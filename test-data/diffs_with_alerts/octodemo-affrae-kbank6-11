diff --git a/src/main/java/com/github/demo/model/Book.java b/src/main/java/com/github/demo/model/Book.java
index ca14e0c..796203a 100644
--- a/src/main/java/com/github/demo/model/Book.java
+++ b/src/main/java/com/github/demo/model/Book.java
@@ -11,19 +11,34 @@ public class Book {
 
     private String cover;
 
-    public Book() {
+    private int rating;
 
+    public Book() {
+        this.title = "";
+        this.author = "";
+        this.cover = "";
+        this.rating = 0;
     }
 
     public Book(String author, String title) {
+        this();
         this.author = author;
         this.title = title;
     }
 
     public Book(String author, String title, String cover) {
+        this();
+        this.author = author;
+        this.title = title;
+        this.cover = cover;
+    }
+
+    public Book(String author, String title, String cover, int rating) {
+        this();
         this.author = author;
         this.title = title;
         this.cover = cover;
+        this.rating = rating;
     }
 
     public String getTitle() {
@@ -53,4 +68,19 @@ public String getCover() {
     public void setCover(String cover) {
         this.cover = cover;
     }
+
+    public int getRating() {
+        return rating;
+    }
+
+    public void setRating(int theRating) {
+
+        if (theRating < 0) {
+            this.rating = 0;
+        } else if (theRating > 5) {
+            this.rating = 5;
+        } else {
+            this.rating = theRating;
+        }
+    }
 }
diff --git a/src/main/java/com/github/demo/service/BookDatabase.java b/src/main/java/com/github/demo/service/BookDatabase.java
index a9a416f..c30dffd 100644
--- a/src/main/java/com/github/demo/service/BookDatabase.java
+++ b/src/main/java/com/github/demo/service/BookDatabase.java
@@ -9,7 +9,9 @@ public interface BookDatabase {
 
     List<Book> getAll() throws BookServiceException;
 
+    List<Book> getBooksByTitle(String name) throws BookServiceException;
+
     void populate(Collection<Book> books) throws BookServiceException;
 
     void destroy() throws BookServiceException;
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 3767b9e..68753a5 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -92,7 +92,8 @@ public List<Book> getAll() throws BookServiceException {
                 Book book = new Book(
                     rs.getString("author"),
                     rs.getString("title"),
-                    rs.getString("image")
+                    rs.getString("image"),
+                    rs.getInt("rating")
                 );
                 books.add(book);
             }
@@ -103,6 +104,48 @@ public List<Book> getAll() throws BookServiceException {
         return books;
     }
 
+    @Override
+    public List<Book> getBooksByTitle(String name) throws BookServiceException {
+        List<Book> books = new ArrayList<Book>();
+
+        if (!isValid()) {
+            throw new BookServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
+        Statement stmt = null;
+
+        try {
+            stmt = connection.createStatement();
+            String query = "SELECT * FROM books WHERE title LIKE '%" + name + "%'";
+
+            ResultSet results = stmt.executeQuery(query);
+
+            while (results.next()) {
+                Book book = new Book(
+                    results.getString("author"),
+                    results.getString("title"),
+                    results.getString("image"),
+                    results.getInt("rating")
+                );
+                books.add(book);
+            }
+        } catch (SQLException e) {
+            logger.error("Failed while searching for {}'", name);
+            throw new BookServiceException(e);
+        } finally {
+            try {
+                if (stmt != null) {
+                    stmt.close();
+                }
+            } catch (SQLException se) {
+                // Do nothing
+            } finally {
+                stmt = null;
+            }
+        }
+        return books;
+    }
+
     @Override
     public void destroy() {
         try {
@@ -128,6 +171,7 @@ public void populate(Collection<Book> books) throws BookServiceException {
                     ps.setString(1, book.getTitle());
                     ps.setString(2, book.getAuthor());
                     ps.setString(3, book.getCover());
+                    ps.setInt(4, book.getRating());
                     ps.execute();
                 }
                 logger.info("Database populated.");
diff --git a/src/main/java/com/github/demo/service/BookService.java b/src/main/java/com/github/demo/service/BookService.java
index 79f3d9e..ff417b6 100644
--- a/src/main/java/com/github/demo/service/BookService.java
+++ b/src/main/java/com/github/demo/service/BookService.java
@@ -23,4 +23,8 @@ public BookService() throws BookServiceException {
     public List<Book> getBooks() throws BookServiceException {
         return this.booksDatabase.getAll();
     }
+
+    public List<Book> searchBooks(String name) throws BookServiceException {
+        return this.booksDatabase.getBooksByTitle(name);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/service/BookUtils.java b/src/main/java/com/github/demo/service/BookUtils.java
index 6232d5a..848bfd5 100644
--- a/src/main/java/com/github/demo/service/BookUtils.java
+++ b/src/main/java/com/github/demo/service/BookUtils.java
@@ -10,12 +10,12 @@ public class BookUtils {
     public static List<Book> getSampleBooks() {
         List<Book> books = new ArrayList<Book>(6);
 
-        books.add(new Book("Jeff Sutherland","Scrum: The Art of Doing Twice the Work in Half the Time", "scrum.jpg"));
-        books.add(new Book("Eric Ries","The Lean Startup: How Constant Innovation Creates Radically Successful Businesses", "lean.jpg"));
-        books.add(new Book("Geoffrey A. Moore","Crossing the Chasm", "chasm.jpg"));
-        books.add(new Book("David Thomas","The Pragmatic Programmer: From Journeyman to Master", "pragmatic.jpg"));
-        books.add(new Book("Frederick P. Brooks Jr.", "The Mythical Man-Month: Essays on Software Engineering", "month.jpg"));
-        books.add(new Book("Steve Krug","Don't Make Me Think, Revisited: A Common Sense Approach to Web Usability", "think.jpg"));
+        books.add(new Book("Jeff Sutherland", "Scrum: The Art of Doing Twice the Work in Half the Time", "scrum.jpg", 5));
+        books.add(new Book("Eric Ries", "The Lean Startup: How Constant Innovation Creates Radically Successful Businesses", "lean.jpg", 2));
+        books.add(new Book("Geoffrey A. Moore", "Crossing the Chasm", "chasm.jpg", 4));
+        books.add(new Book("David Thomas", "The Pragmatic Programmer: From Journeyman to Master", "pragmatic.jpg", 1));
+        books.add(new Book("Frederick P. Brooks Jr.", "The Mythical Man-Month: Essays on Software Engineering", "month.jpg", 5));
+        books.add(new Book("Steve Krug", "Don't Make Me Think, Revisited: A Common Sense Approach to Web Usability", "think.jpg", 3));
 
         return books;
     }
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..6dace96 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -65,7 +65,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String searchTerm = req.getParameter("title");
+            if (searchTerm != null) {
+                books = bookService.searchBooks(searchTerm);
+            } else {
+                books = bookService.getBooks();
+            }
+
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
diff --git a/src/main/webapp/static/books.html b/src/main/webapp/static/books.html
index dbba20d..69b19e5 100644
--- a/src/main/webapp/static/books.html
+++ b/src/main/webapp/static/books.html
@@ -80,6 +80,13 @@
                   <h4 class="media-heading"><a href="#">[[${book.title}]]</a></h4>
                   <h5 class="media-heading"> by <a href="#">[[${book.author}]]</a></h5>
                   <span>Status: </span><span class="text-success"><strong>In Stock</strong></span>
+                  <!-- Rating shown in stars -->
+                  <div>
+                    <span>Rating: </span>
+                    <span th:each="i : ${#numbers.sequence(1, book.rating)}">
+                      <img src="/static/images/star.png" style="width: 12px; height: 12px;" />
+                    </span>
+                  </div>
                 </div>
               </div>
             </td>
diff --git a/src/test/java/com/github/demo/model/BookTest.java b/src/test/java/com/github/demo/model/BookTest.java
index c9afce0..1d433ec 100644
--- a/src/test/java/com/github/demo/model/BookTest.java
+++ b/src/test/java/com/github/demo/model/BookTest.java
@@ -37,6 +37,18 @@ public void testGetDetails() {
         Assert.assertNotNull(details);
     }
 
+    @Test
+    public void testSetInvalidRating() {
+        book.setRating(6);
+        Assert.assertEquals(5, book.getRating());
+    }
+
+    @Test
+    public void testSetNegativeRating() {
+        book.setRating(-1);
+        Assert.assertEquals(0, book.getRating());
+    }
+
     @Before
     public void setUp() throws Exception {
         book = new Book();
