diff --git a/wolf/CMakeLists.txt b/wolf/CMakeLists.txt
index c14a1bc67..6d21ce4f4 100644
--- a/wolf/CMakeLists.txt
+++ b/wolf/CMakeLists.txt
@@ -85,6 +85,7 @@ option(WOLF_SYSTEM_MIMALLOC "Enable Microsoft's mimalloc memory allocator" OFF)
 option(WOLF_SYSTEM_SIG_SLOT "Enable signal/slot based on boost signals2" OFF)
 option(WOLF_SYSTEM_SOCKET "Enable TCP/UDP protocol over socket" OFF)
 option(WOLF_SYSTEM_STACKTRACE "Enable boost stacktrace" OFF)
+option(WOLF_SYSTEM_GAMEPAD "Enable gamepad input handling" ON)
 #option(WOLF_SYSTEM_WASM3 "Enable WebAssembly interpreter" OFF)
 #option(WOLF_SYSTEM_ZLIB "Enable zlib for compression" OFF)
 
diff --git a/wolf/cmake/system.cmake b/wolf/cmake/system.cmake
index 8e3aec8db..cd3352ae8 100644
--- a/wolf/cmake/system.cmake
+++ b/wolf/cmake/system.cmake
@@ -249,3 +249,28 @@ list(APPEND SRCS
     ${WOLF_SYSTEM_TEST_SRC}
 )
 
+if (WOLF_SYSTEM_GAMEPAD)
+    message("fetching https://github.com/libsdl-org/SDL")
+    FetchContent_Declare(
+            sdl
+            GIT_REPOSITORY https://github.com/libsdl-org/SDL
+            GIT_TAG        release-2.26.1
+    )
+
+    set(FETCHCONTENT_QUIET OFF)
+    FetchContent_MakeAvailable(sdl)
+
+    list(APPEND INCLUDES
+            ${sdl_SOURCE_DIR}/include
+            )
+    list(APPEND LIBS SDL2)
+
+    file(GLOB_RECURSE WOLF_SYSTEM_GAMEPAD_SRC
+            "${CMAKE_CURRENT_SOURCE_DIR}/system/gamepad/w_gamepad.hpp"
+            "${CMAKE_CURRENT_SOURCE_DIR}/system/gamepad/w_gamepad_emscripten.cpp"
+            "${CMAKE_CURRENT_SOURCE_DIR}/system/gamepad/w_gamepad_sdl.cpp"
+            )
+    list(APPEND SRCS
+            ${WOLF_SYSTEM_GAMEPAD_SRC}
+            )
+endif()
diff --git a/wolf/system/gamepad/w_gamepad.hpp b/wolf/system/gamepad/w_gamepad.hpp
new file mode 100644
index 000000000..150e50723
--- /dev/null
+++ b/wolf/system/gamepad/w_gamepad.hpp
@@ -0,0 +1,37 @@
+#pragma once
+
+#ifdef WOLF_SYSTEM_GAMEPAD
+
+#include <wolf.hpp>
+
+#include "w_gamepad_types.h"
+#include <vector>
+
+namespace wolf::system::gamepad {
+
+class w_gamepad {
+ public:
+  W_API w_gamepad() noexcept;
+  W_API ~w_gamepad() noexcept;
+
+  W_API bool get_events(w_gamepad_event &p_event) {
+    if (_events.empty()) {
+      return false;
+    }
+
+    p_event = _events.back();
+    _events.pop_back();
+
+    return true;
+  }
+
+  void update();
+
+ private:
+  //INFO: using std::vector makes a LIFO queue of events
+  static std::vector<w_gamepad_event> _events;
+};
+
+} // namespace wolf::system::gamepad
+
+#endif
diff --git a/wolf/system/gamepad/w_gamepad_emscripten.cpp b/wolf/system/gamepad/w_gamepad_emscripten.cpp
new file mode 100644
index 000000000..c8279b47f
--- /dev/null
+++ b/wolf/system/gamepad/w_gamepad_emscripten.cpp
@@ -0,0 +1,92 @@
+#ifdef WOLF_SYSTEM_GAMEPAD
+#ifdef EMSCRIPTEN
+#include <emscripten/html5.h>
+
+#include <iostream>
+#include <vector>
+
+#include "w_gamepad.hpp"
+#include "w_gamepad_keymap.h"
+
+using w_gamepad = wolf::system::gamepad::w_gamepad;
+using w_gamepad_event = wolf::system::gamepad::w_gamepad_event;
+
+std::vector<EmscriptenGamepadEvent> gamepads;
+std::vector<w_gamepad_event> w_gamepad::_events;
+
+EM_BOOL gamepadconnected_callback(int eventType, const EmscriptenGamepadEvent *gamepadEvent, void *userData) {
+  gamepads.push_back(*gamepadEvent);
+  reinterpret_cast<w_gamepad *>(userData)->update();
+
+  return EM_TRUE;
+}
+
+EM_BOOL gamepaddisconnected_callback(int eventType, const EmscriptenGamepadEvent *gamepadEvent, void *userData) {
+  std::erase_if(gamepads, [gamepadEvent](const auto &e) {
+    return gamepadEvent->index == e.index;
+  });
+
+  return EM_TRUE;
+}
+
+void w_gamepad::update() {
+  emscripten_sample_gamepad_data();
+
+  for (auto &gamepad : gamepads) {
+    EmscriptenGamepadEvent gamepadState;
+    auto result = emscripten_get_gamepad_status(gamepad.index, &gamepadState);
+
+    if (result != EMSCRIPTEN_RESULT_SUCCESS) {
+      continue;
+    }
+
+    if (gamepadState.timestamp != 0 && gamepadState.timestamp == gamepad.timestamp) {
+      continue;
+    }
+
+    for (int i = 0; i < gamepadState.numButtons; i++) {
+      if (gamepad.digitalButton[i] == gamepadState.digitalButton[i]) {
+        continue;
+      }
+
+      auto state = gamepadState.digitalButton[i] ? w_gamepad_state_type::PRESSED : w_gamepad_state_type::RELEASED;
+      w_gamepad_button button{
+          .type = w_gamepad_event_type::BUTTON,
+          .which = (std::uint32_t)gamepad.index,
+          .button = w_gamepad_button_map[i],
+          .state = state};
+      w_gamepad_event event{
+          .button = button};
+      _events.emplace_back(event);
+    }
+
+    for (int i = 0; i < gamepadState.numAxes; i++) {
+      if (gamepad.axis[i] == gamepadState.axis[i]) {
+        continue;
+      }
+
+      auto value = (std::int16_t)(32767. * gamepadState.axis[i]);
+      w_gamepad_axis axis{
+          .type = w_gamepad_event_type::AXIS,
+          .which = (std::uint32_t)gamepad.index,
+          .axis = w_gamepad_axis_map[i],
+          .value = value};
+      w_gamepad_event event{
+          .axis = axis};
+      _events.emplace_back(event);
+    }
+
+    gamepad = gamepadState;
+  }
+}
+
+w_gamepad::~w_gamepad() noexcept {}
+
+w_gamepad::w_gamepad() noexcept {
+  // TODO: callback registration may fail, check for EMSCRIPTEN_RESULT_SUCCESS
+  emscripten_set_gamepadconnected_callback(this, EM_TRUE, gamepadconnected_callback);
+  emscripten_set_gamepaddisconnected_callback(this, EM_TRUE, gamepaddisconnected_callback);
+}
+
+#endif
+#endif
\ No newline at end of file
diff --git a/wolf/system/gamepad/w_gamepad_keymap.h b/wolf/system/gamepad/w_gamepad_keymap.h
new file mode 100644
index 000000000..305976853
--- /dev/null
+++ b/wolf/system/gamepad/w_gamepad_keymap.h
@@ -0,0 +1,38 @@
+#pragma once
+
+#ifdef WOLF_SYSTEM_GAMEPAD
+
+#include "w_gamepad_types.h"
+
+namespace wolf::system::gamepad {
+
+static w_gamepad_button_type w_gamepad_button_map[] = {
+  w_gamepad_button_type::A,
+  w_gamepad_button_type::B,
+  w_gamepad_button_type::X,
+  w_gamepad_button_type::Y,
+  w_gamepad_button_type::LEFTSHOULDER,
+  w_gamepad_button_type::RIGHTSHOULDER,
+  w_gamepad_button_type::PADDLE1,
+  w_gamepad_button_type::PADDLE2,
+  w_gamepad_button_type::BACK,
+  w_gamepad_button_type::START,
+  w_gamepad_button_type::LEFTSTICK,
+  w_gamepad_button_type::RIGHTSTICK,
+  w_gamepad_button_type::DPAD_UP,
+  w_gamepad_button_type::DPAD_DOWN,
+  w_gamepad_button_type::DPAD_LEFT,
+  w_gamepad_button_type::DPAD_RIGHT,
+  w_gamepad_button_type::GUIDE,
+};
+
+static w_gamepad_axis_type w_gamepad_axis_map[] = {
+  w_gamepad_axis_type::LEFTX,
+  w_gamepad_axis_type::LEFTY,
+  w_gamepad_axis_type::RIGHTX,
+  w_gamepad_axis_type::RIGHTY,
+};
+
+} // namespace wolf::system::gamepad
+
+#endif
diff --git a/wolf/system/gamepad/w_gamepad_sdl.cpp b/wolf/system/gamepad/w_gamepad_sdl.cpp
new file mode 100644
index 000000000..395c93c63
--- /dev/null
+++ b/wolf/system/gamepad/w_gamepad_sdl.cpp
@@ -0,0 +1,76 @@
+#ifdef WOLF_SYSTEM_GAMEPAD
+#ifndef EMSCRIPTEN
+#include <SDL.h>
+
+#include <iostream>
+#include <vector>
+
+#include "w_gamepad.hpp"
+
+using w_gamepad = wolf::system::gamepad::w_gamepad;
+using w_gamepad_event = wolf::system::gamepad::w_gamepad_event;
+
+std::vector<SDL_GameController*> controllers;
+std::vector<w_gamepad_event> w_gamepad::_events;
+
+w_gamepad::w_gamepad() noexcept {
+  // TODO: since the constructor is noexcept should we add an init function?
+  if (SDL_Init(SDL_INIT_GAMECONTROLLER) != 0) {
+    std::cerr << "SDL could not initialize! SDL Error: " << SDL_GetError() << std::endl;
+  }
+
+  for (int i = 0; i < SDL_NumJoysticks(); i++) {
+    if (SDL_IsGameController(i)) {
+      controllers.push_back(SDL_GameControllerOpen(i));
+    }
+  }
+}
+
+w_gamepad::~w_gamepad() noexcept {
+  for (auto controller : controllers) {
+    SDL_GameControllerClose(controller);
+  }
+  controllers.clear();
+  SDL_Quit();
+}
+
+void w_gamepad::update() {
+  SDL_Event sdl_event;
+  w_gamepad_button button{.type = w_gamepad_event_type::BUTTON};
+  w_gamepad_axis axis{.type = w_gamepad_event_type::AXIS};
+  w_gamepad_event event;
+  while (SDL_PollEvent(&sdl_event)) {
+    switch (sdl_event.type) {
+      case SDL_CONTROLLERBUTTONDOWN:
+      case SDL_CONTROLLERBUTTONUP:
+        button.which = sdl_event.cbutton.which;
+        button.button = (w_gamepad_button_type)(sdl_event.cbutton.button + 1);
+        button.state = sdl_event.cbutton.state ? w_gamepad_state_type::PRESSED : w_gamepad_state_type::RELEASED;
+        event.button = button;
+        _events.emplace_back(event);
+        break;
+
+      case SDL_CONTROLLERAXISMOTION:
+        axis.which = sdl_event.caxis.which;
+        axis.axis = (w_gamepad_axis_type)(sdl_event.caxis.axis + 1);
+        axis.value = sdl_event.caxis.value;
+        event.axis = axis;
+        _events.emplace_back(event);
+        break;
+
+      case SDL_CONTROLLERDEVICEADDED:
+        controllers.push_back(SDL_GameControllerOpen(sdl_event.cdevice.which));
+        break;
+
+      case SDL_CONTROLLERDEVICEREMOVED:
+        auto controller = SDL_GameControllerFromInstanceID(sdl_event.cdevice.which);
+        auto it = std::find(controllers.begin(), controllers.end(), controller);
+        SDL_GameControllerClose(*it);
+        controllers.erase(it);
+        break;
+    }
+  }
+}
+
+#endif
+#endif
\ No newline at end of file
diff --git a/wolf/system/gamepad/w_gamepad_types.h b/wolf/system/gamepad/w_gamepad_types.h
new file mode 100644
index 000000000..a142fd9b8
--- /dev/null
+++ b/wolf/system/gamepad/w_gamepad_types.h
@@ -0,0 +1,78 @@
+#pragma once
+
+#ifdef WOLF_SYSTEM_GAMEPAD
+
+#include <cstdint>
+
+namespace wolf::system::gamepad {
+
+enum class w_gamepad_event_type {
+  BUTTON,
+  AXIS,
+  MAX
+};
+
+enum class w_gamepad_state_type {
+  RELEASED,
+  PRESSED,
+  MAX
+};
+
+enum class w_gamepad_button_type {
+  A,
+  B,
+  X,
+  Y,
+  BACK,
+  GUIDE,
+  START,
+  LEFTSTICK,
+  RIGHTSTICK,
+  LEFTSHOULDER,
+  RIGHTSHOULDER,
+  DPAD_UP,
+  DPAD_DOWN,
+  DPAD_LEFT,
+  DPAD_RIGHT,
+  MISC1,    /* Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button */
+  PADDLE1,  /* Xbox Elite paddle P1 */
+  PADDLE2,  /* Xbox Elite paddle P3 */
+  PADDLE3,  /* Xbox Elite paddle P2 */
+  PADDLE4,  /* Xbox Elite paddle P4 */
+  TOUCHPAD, /* PS4/PS5 touchpad button */
+  MAX
+};
+
+enum class w_gamepad_axis_type {
+  LEFTX,
+  LEFTY,
+  RIGHTX,
+  RIGHTY,
+  TRIGGERLEFT,
+  TRIGGERRIGHT,
+  MAX
+};
+
+struct w_gamepad_button {
+  w_gamepad_event_type type;
+  std::uint32_t which;
+  w_gamepad_button_type button;
+  w_gamepad_state_type state;
+};
+
+struct w_gamepad_axis {
+  w_gamepad_event_type type;
+  std::uint32_t which;
+  w_gamepad_axis_type axis;
+  std::int16_t value;
+};
+
+union w_gamepad_event {
+  w_gamepad_event_type type;
+  w_gamepad_button button;
+  w_gamepad_axis axis;
+};
+
+} // namespace wolf::system::gamepad
+
+#endif
\ No newline at end of file
