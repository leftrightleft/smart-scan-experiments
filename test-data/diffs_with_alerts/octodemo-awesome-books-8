diff --git a/pom.xml b/pom.xml
index ef9c036..35bd65e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -17,8 +17,8 @@
         <!--
             Dependency Versions
         -->
-        <jetty.version>10.0.0</jetty.version>
-        <log4j.version>2.17.2</log4j.version>
+        <jetty.version>10.0.6</jetty.version>
+        <log4j.version>2.14.1</log4j.version>
 
         <!--
             Properties used to create a CD style version number for the Maven build
@@ -28,7 +28,7 @@
         <sha1>-SNAPSHOT</sha1>
 
         <!-- GitHub Repository name -->
-        <github.repository>octodemo-resources/template-bookstore-security</github.repository>
+        <github.repository>msft-demo-resources/template-bookstore-security</github.repository>
     </properties>
 
     <dependencyManagement>
diff --git a/src/main/java/com/github/demo/DemoServer.java b/src/main/java/com/github/demo/DemoServer.java
index d69febc..02ec3a4 100644
--- a/src/main/java/com/github/demo/DemoServer.java
+++ b/src/main/java/com/github/demo/DemoServer.java
@@ -3,7 +3,11 @@
 import java.net.URL;
 import java.net.URI;
 
-import com.github.demo.servlet.*;
+import com.github.demo.service.BookService;
+import com.github.demo.service.BookServiceException;
+import com.github.demo.servlet.BookServlet;
+import com.github.demo.servlet.BookApiServlet;
+import com.github.demo.servlet.StatusServlet;
 
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.DefaultServlet;
@@ -51,11 +55,26 @@ public static void main(String[] args) throws Exception {
 
         ctxHandler.addServlet(StatusServlet.class, "/status");
 
-        // Default servlet path, must be last
-        ServletHolder books = new ServletHolder("/", BookServlet.class);
-        books.setInitParameter("dirAllowed","false");
-        books.setInitParameter("pathInfoOnly","true");
-        ctxHandler.addServlet(books, "/");
+        try {
+            BookService bookService = new BookService();
+
+            BookApiServlet booksApiServlet = new BookApiServlet(bookService);
+            ServletHolder booksApi = new ServletHolder(booksApiServlet);
+            booksApi.setInitParameter("dirAllowed","false");
+            booksApi.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(booksApi, "/api");
+
+            // Default servlet path, must be last
+            BookServlet bookServlet = new BookServlet(bookService);
+            ServletHolder books = new ServletHolder(bookServlet);
+            books.setInitParameter("dirAllowed","false");
+            books.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(books, "/");
+
+        } catch (BookServiceException e) {
+            logger.error("Failed to instantiate BookService: " + e.getMessage());
+            System.exit(-1);
+        }
 
         server.setHandler(ctxHandler);
 
diff --git a/src/main/java/com/github/demo/model/Book.java b/src/main/java/com/github/demo/model/Book.java
index ca14e0c..6ab4a50 100644
--- a/src/main/java/com/github/demo/model/Book.java
+++ b/src/main/java/com/github/demo/model/Book.java
@@ -11,21 +11,36 @@ public class Book {
 
     private String cover;
 
-    public Book() {
+    private int rating;
 
+    public Book() {
+        this.title = "";
+        this.author = "";
+        this.cover = "";
+        this.rating = 0;
     }
 
     public Book(String author, String title) {
+        this();
         this.author = author;
         this.title = title;
     }
 
     public Book(String author, String title, String cover) {
+        this();
         this.author = author;
         this.title = title;
         this.cover = cover;
     }
 
+    public Book(String author, String title, String cover, int rating) {
+        this();
+        this.author = author;
+        this.title = title;
+        this.cover = cover;
+        this.rating = rating;
+    }
+
     public String getTitle() {
         return title;
     }
@@ -53,4 +68,12 @@ public String getCover() {
     public void setCover(String cover) {
         this.cover = cover;
     }
+
+    public int getRating() {
+        return rating;
+    }
+
+    public void setRating(int rating) {
+        this.rating = rating;
+    }
 }
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 9023ef5..68753a5 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -92,7 +92,8 @@ public List<Book> getAll() throws BookServiceException {
                 Book book = new Book(
                     rs.getString("author"),
                     rs.getString("title"),
-                    rs.getString("image")
+                    rs.getString("image"),
+                    rs.getInt("rating")
                 );
                 books.add(book);
             }
@@ -123,7 +124,8 @@ public List<Book> getBooksByTitle(String name) throws BookServiceException {
                 Book book = new Book(
                     results.getString("author"),
                     results.getString("title"),
-                    results.getString("image")
+                    results.getString("image"),
+                    results.getInt("rating")
                 );
                 books.add(book);
             }
@@ -169,6 +171,7 @@ public void populate(Collection<Book> books) throws BookServiceException {
                     ps.setString(1, book.getTitle());
                     ps.setString(2, book.getAuthor());
                     ps.setString(3, book.getCover());
+                    ps.setInt(4, book.getRating());
                     ps.execute();
                 }
                 logger.info("Database populated.");
diff --git a/src/main/java/com/github/demo/service/BookUtils.java b/src/main/java/com/github/demo/service/BookUtils.java
index 6232d5a..848bfd5 100644
--- a/src/main/java/com/github/demo/service/BookUtils.java
+++ b/src/main/java/com/github/demo/service/BookUtils.java
@@ -10,12 +10,12 @@ public class BookUtils {
     public static List<Book> getSampleBooks() {
         List<Book> books = new ArrayList<Book>(6);
 
-        books.add(new Book("Jeff Sutherland","Scrum: The Art of Doing Twice the Work in Half the Time", "scrum.jpg"));
-        books.add(new Book("Eric Ries","The Lean Startup: How Constant Innovation Creates Radically Successful Businesses", "lean.jpg"));
-        books.add(new Book("Geoffrey A. Moore","Crossing the Chasm", "chasm.jpg"));
-        books.add(new Book("David Thomas","The Pragmatic Programmer: From Journeyman to Master", "pragmatic.jpg"));
-        books.add(new Book("Frederick P. Brooks Jr.", "The Mythical Man-Month: Essays on Software Engineering", "month.jpg"));
-        books.add(new Book("Steve Krug","Don't Make Me Think, Revisited: A Common Sense Approach to Web Usability", "think.jpg"));
+        books.add(new Book("Jeff Sutherland", "Scrum: The Art of Doing Twice the Work in Half the Time", "scrum.jpg", 5));
+        books.add(new Book("Eric Ries", "The Lean Startup: How Constant Innovation Creates Radically Successful Businesses", "lean.jpg", 2));
+        books.add(new Book("Geoffrey A. Moore", "Crossing the Chasm", "chasm.jpg", 4));
+        books.add(new Book("David Thomas", "The Pragmatic Programmer: From Journeyman to Master", "pragmatic.jpg", 1));
+        books.add(new Book("Frederick P. Brooks Jr.", "The Mythical Man-Month: Essays on Software Engineering", "month.jpg", 5));
+        books.add(new Book("Steve Krug", "Don't Make Me Think, Revisited: A Common Sense Approach to Web Usability", "think.jpg", 3));
 
         return books;
     }
diff --git a/src/main/java/com/github/demo/servlet/BookApiServlet.java b/src/main/java/com/github/demo/servlet/BookApiServlet.java
new file mode 100644
index 0000000..e73fdab
--- /dev/null
+++ b/src/main/java/com/github/demo/servlet/BookApiServlet.java
@@ -0,0 +1,76 @@
+package com.github.demo.servlet;
+
+import com.github.demo.model.Book;
+import com.github.demo.service.BookService;
+import com.github.demo.service.BookServiceException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.json.JSONStringer;
+import org.json.JSONWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.List;
+
+public class BookApiServlet extends HttpServlet {
+
+    private static final long serialVersionUID = 1L;
+
+    private static final Logger logger = LoggerFactory.getLogger(BookApiServlet.class);
+
+    private BookService bookService;
+
+    public BookApiServlet(BookService bookService) throws BookServiceException {
+        logger.info("Starting Bookstore Api Servlet...");
+
+        if (bookService == null) {
+            logger.error("BookService was not provided.");
+            throw new BookServiceException("A valid book service object is required");
+        }
+        this.bookService = bookService;
+    }
+
+    @Override
+    public void doPost(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+        doGet(req, resp);
+    }
+
+    @Override
+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+
+        resp.setContentType("application/json; charset=UTF-8");
+
+        try {
+            JSONWriter writer = new JSONStringer().array();
+
+            String title = req.getParameter("title");
+            List<Book> books;
+            if (title != null) {
+                books = bookService.searchBooks(title);
+            } else {
+                books = bookService.getBooks();
+            }
+
+            books.forEach((book) -> {
+                writer.object();
+                writer.key("title").value(book.getTitle());
+                writer.key("author").value(book.getAuthor());
+                writer.key("details").value(book.getDetails());
+                writer.endObject();
+
+            });
+            writer.endArray();
+
+            resp.getWriter().write(writer.toString());
+        } catch (BookServiceException e) {
+            String json = new JSONStringer().object().key("error").value(500).endObject().toString();
+            resp.getWriter().write(json);
+        }
+    }
+}
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..f910286 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -28,14 +28,14 @@ public class BookServlet extends HttpServlet {
 
     private BookService bookService;
 
-    public BookServlet() throws Exception {
+    public BookServlet(BookService bookService) throws BookServiceException {
         logger.info("Starting Bookstore Servlet...");
-        try {
-            bookService = new BookService();
-        } catch (BookServiceException e) {
-            logger.error("Failed to instantiate BookService: " + e.getMessage());
-            throw e;
+
+        if (bookService == null) {
+            logger.error("BookService was not provided.");
+            throw new BookServiceException("A valid book service object is required");
         }
+        this.bookService = bookService;
     }
 
     @Override
@@ -65,7 +65,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String searchTerm = req.getParameter("title");
+            if (searchTerm != null) {
+                books = bookService.searchBooks(searchTerm);
+            } else {
+                books = bookService.getBooks();
+            }
+            
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
diff --git a/src/main/java/com/github/demo/servlet/StatusServlet.java b/src/main/java/com/github/demo/servlet/StatusServlet.java
index 95b0b6c..b96275a 100644
--- a/src/main/java/com/github/demo/servlet/StatusServlet.java
+++ b/src/main/java/com/github/demo/servlet/StatusServlet.java
@@ -4,22 +4,35 @@
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
+import org.apache.logging.log4j.ThreadContext;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.IOException;
 
 /**
- * A status page servlet that will report success if the application has been instantiated.
+ * A status page servlet that will report success if the application has been
+ * instantiated.
  * this provides a useful status check for containers and deployment purposes.
  */
 public class StatusServlet extends HttpServlet {
 
     private static final long serialVersionUID = 1L;
 
+    private static final Logger logger = LoggerFactory.getLogger(StatusServlet.class);
+
     public StatusServlet() {
     }
 
     protected void doGet(HttpServletRequest req, HttpServletResponse resp)
             throws ServletException, IOException {
 
+        String apiVersion = req.getHeader("X-Api-Version");
+        ThreadContext.put("api.version", apiVersion);
+
+        logger.info("status servlet GET");
+
         resp.setContentType("text/html; charset=UTF-8");
         resp.getWriter().write("ok");
     }
diff --git a/src/main/resources/config.properties b/src/main/resources/config.properties
new file mode 100644
index 0000000..9404162
--- /dev/null
+++ b/src/main/resources/config.properties
@@ -0,0 +1,13 @@
+#######################################################################################
+#
+# Java properties file for providing runtime configuration to the application
+#
+#######################################################################################
+
+# ADO Credential, already invalidated
+AZURE_DEVOPS_KEY=yylxibmlziutjpgip57zmbgjxdym6dxevwtt2ucsgovistwncr6q
+
+ENVIRONMENT=integration
+
+DATABASE_URL=localhost:5432
+DATABASE_NAME=books
\ No newline at end of file
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index de66f83..40f3612 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -2,7 +2,7 @@
 <Configuration status="WARN">
   <Appenders>
     <Console name="Console" target="SYSTEM_OUT">
-      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
+      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level api-version=%X{api.version} %logger{36} - %msg%n"/>
     </Console>
   </Appenders>
 
diff --git a/src/main/webapp/static/books.html b/src/main/webapp/static/books.html
index dbba20d..69b19e5 100644
--- a/src/main/webapp/static/books.html
+++ b/src/main/webapp/static/books.html
@@ -80,6 +80,13 @@
                   <h4 class="media-heading"><a href="#">[[${book.title}]]</a></h4>
                   <h5 class="media-heading"> by <a href="#">[[${book.author}]]</a></h5>
                   <span>Status: </span><span class="text-success"><strong>In Stock</strong></span>
+                  <!-- Rating shown in stars -->
+                  <div>
+                    <span>Rating: </span>
+                    <span th:each="i : ${#numbers.sequence(1, book.rating)}">
+                      <img src="/static/images/star.png" style="width: 12px; height: 12px;" />
+                    </span>
+                  </div>
                 </div>
               </div>
             </td>
