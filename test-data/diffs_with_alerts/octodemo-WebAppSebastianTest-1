diff --git a/pom.xml b/pom.xml
index df245c8..bf14946 100644
--- a/pom.xml
+++ b/pom.xml
@@ -15,6 +15,18 @@
 	<url>http://www.comcast.com</url>
 
 	<dependencies>
+      <dependency>
+        <groupId>org.apache.logging.log4j</groupId>
+        <artifactId>log4j-api</artifactId>
+        <version>2.17.0</version>
+      </dependency>
+
+      <dependency>
+        <groupId>org.apache.logging.log4j</groupId>
+        <artifactId>log4j-core</artifactId>
+        <version>2.17.0</version>
+      </dependency>
+
       <dependency>
           <groupId>com.adobe.xmp</groupId>
           <artifactId>xmpcore</artifactId>
diff --git a/server/__init__.py b/server/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/server/__main__.py b/server/__main__.py
new file mode 100644
index 0000000..a2aa005
--- /dev/null
+++ b/server/__main__.py
@@ -0,0 +1,36 @@
+import os
+import sys
+sys.path.append('.')
+
+from server.webapp import flaskapp, database, cursor, TEMPLATES
+from server.models import *
+from server.routes import *
+
+default_books = [
+    ("The Hobbit", "JRR Tolkien", True),
+    ("The Fellowship of the Ring", "JRR Tolkien", True),
+    ("The Eye of the World", "Robert Jordan", False),
+    ("A Game of Thrones", "George R. R. Martin", True),
+    ("The Way of Kings", "Brandon Sanderson", False)
+]
+
+
+if __name__ == "__main__":
+    cursor.execute(
+        '''CREATE TABLE books (name text, author text, read text)'''
+    )
+
+    for bookname, bookauthor, hasread in default_books:
+        try:
+            cursor.execute(
+                'INSERT INTO books values (?, ?, ?)',
+                (bookname, bookauthor, 'true' if hasread else 'false')
+            )
+
+        except Exception as err:
+            print(f'[!] Error Occurred: {err}')
+
+    flaskapp.run('0.0.0.0', debug=bool(os.environ.get('DEBUG', False)))
+    
+    cursor.close()
+    database.close()
diff --git a/server/models/__init__.py b/server/models/__init__.py
new file mode 100644
index 0000000..4b08c41
--- /dev/null
+++ b/server/models/__init__.py
@@ -0,0 +1,2 @@
+
+from server.models.books import Book
diff --git a/server/models/books.py b/server/models/books.py
new file mode 100644
index 0000000..ffc0a84
--- /dev/null
+++ b/server/models/books.py
@@ -0,0 +1,8 @@
+
+from dataclasses import dataclass
+
+@dataclass
+class Book():
+    name: str
+    author: str
+    read: bool
diff --git a/server/routes.py b/server/routes.py
new file mode 100644
index 0000000..bab7594
--- /dev/null
+++ b/server/routes.py
@@ -0,0 +1,30 @@
+
+from flask import request, render_template, make_response
+
+from server.webapp import flaskapp, cursor
+from server.models import Book
+
+
+@flaskapp.route('/')
+def index():
+    name = request.args.get('name')
+    author = request.args.get('author')
+    read = bool(request.args.get('read'))
+
+    if name:
+        cursor.execute(
+            "SELECT * FROM books WHERE name LIKE '%" + name + "%'"
+        )
+        books = [Book(*row) for row in cursor]
+
+    elif author:
+        cursor.execute(
+            "SELECT * FROM books WHERE author LIKE '%" + author + "%'"
+        )
+        books = [Book(*row) for row in cursor]
+
+    else:
+        cursor.execute("SELECT name, author, read FROM books")
+        books = [Book(*row) for row in cursor]
+
+    return render_template('books.html', books=books)
diff --git a/server/webapp.py b/server/webapp.py
new file mode 100644
index 0000000..a7edb0b
--- /dev/null
+++ b/server/webapp.py
@@ -0,0 +1,16 @@
+import os
+import sqlite3
+
+from flask import Flask
+
+
+ROOT = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
+TEMPLATES = os.path.join(ROOT, 'templates')
+
+flaskapp = Flask("BookStore", template_folder=TEMPLATES)
+flaskapp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
+
+database_uri = os.environ.get('SQLITE_URI', ':memory:')
+
+database = sqlite3.connect(database_uri, check_same_thread=False)
+cursor = database.cursor()
diff --git a/src/com/comcast/cmb/common/persistence/AWSStorage.java b/src/com/comcast/cmb/common/persistence/AWSStorage.java
index 2f72b73..333c8a0 100644
--- a/src/com/comcast/cmb/common/persistence/AWSStorage.java
+++ b/src/com/comcast/cmb/common/persistence/AWSStorage.java
@@ -1,10 +1,10 @@
 package com.comcast.cmb.common.persistence;
 
 public class AWSStorage {
-	private static final String K = "YkL8AXTbPHFXCoxwQntFTuryvPyrvanU+zRu6Mg1";
 	private static final String A = "bKgkEpbBOxSSyoY0dhlRCAE3";
 	private static final String B = "AccountName=zax4;AccountKey=sdiufew843785xjsd740sd8ur83/9sdfkis+0lsfdalsdjf+//alsf2r2rle2rasdfSDFFW23rl92W893SF/+a==";
 	private static final String C = "aAzd0940-sS_sldfj~.A093Wwzl_l.343z";
+
 	public static void store(){
 		// TODO: to be implemented, method stub for now
 	}
diff --git a/src/com/comcast/cqs/controller/CQSQueueMessagesPageServlet.java b/src/com/comcast/cqs/controller/CQSQueueMessagesPageServlet.java
index a09260f..45ce9cf 100644
--- a/src/com/comcast/cqs/controller/CQSQueueMessagesPageServlet.java
+++ b/src/com/comcast/cqs/controller/CQSQueueMessagesPageServlet.java
@@ -15,6 +15,9 @@
  */
 package com.comcast.cqs.controller;
 
+import java.io.File;
+import java.nio.file.Files;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -46,6 +49,8 @@
 import com.comcast.cqs.model.CQSMessage;
 import com.comcast.cqs.model.CQSMessageAttribute;
 import com.comcast.cqs.util.Util;
+import org.json.JSONObject;
+import org.json.JSONException;
 
 /**
  * Admin page for showing messages in a queue
@@ -68,6 +73,15 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro
 		PrintWriter out = response.getWriter();
 		
 		String userId = request.getParameter("userId");
+
+		File userPermissionFile = new File("/opt/controller/user-permissions/" + userId + ".json");
+		String content = new String(Files.readAllBytes(userPermissionFile.toPath()));
+		int permissions = parsePermissions(content);
+		if (permissions < 3){
+			out.println("Access denied! User '" + userId + "' only has the following permissions: " + content);
+			return;
+		}
+
 		String queueName = request.getParameter("queueName");
 		String msgStr = request.getParameter("message");
 		String prevHandle = request.getParameter("prevHandle");
@@ -430,4 +444,13 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro
 	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 		doGet(request, response);
 	}
+
+	public static int parsePermissions(String permissions){
+		try {
+			JSONObject json = new JSONObject(permissions);
+			return json.getInt("permissions");
+		} catch (JSONException e) {
+			throw new RuntimeException("Unable to parse JSON string!");
+		}
+	}
 }
