diff --git a/README.md b/README.md
index 889d2a3..fd2e30b 100644
--- a/README.md
+++ b/README.md
@@ -11,6 +11,7 @@ For a step-by-step guide see the [guide](./docs/README.md) in the repository.
 
 ![bookstore](https://user-images.githubusercontent.com/681306/114581130-5e2d4b00-9c77-11eb-837b-4efaefa29e39.png)
 
+Here is my token : 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
 
 
 ### GitHub Codespaces
diff --git a/pom.xml b/pom.xml
index a3445fb..d2b8d54 100644
--- a/pom.xml
+++ b/pom.xml
@@ -84,6 +84,12 @@
             <version>4.13</version>
             <scope>test</scope>
         </dependency>
+
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-core</artifactId>
+            <version>5.3.7</version>
+</dependency>
     </dependencies>
 
     <build>
diff --git a/src/main/java/com/github/demo/DemoServer.java b/src/main/java/com/github/demo/DemoServer.java
index d69febc..02ec3a4 100644
--- a/src/main/java/com/github/demo/DemoServer.java
+++ b/src/main/java/com/github/demo/DemoServer.java
@@ -3,7 +3,11 @@
 import java.net.URL;
 import java.net.URI;
 
-import com.github.demo.servlet.*;
+import com.github.demo.service.BookService;
+import com.github.demo.service.BookServiceException;
+import com.github.demo.servlet.BookServlet;
+import com.github.demo.servlet.BookApiServlet;
+import com.github.demo.servlet.StatusServlet;
 
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.DefaultServlet;
@@ -51,11 +55,26 @@ public static void main(String[] args) throws Exception {
 
         ctxHandler.addServlet(StatusServlet.class, "/status");
 
-        // Default servlet path, must be last
-        ServletHolder books = new ServletHolder("/", BookServlet.class);
-        books.setInitParameter("dirAllowed","false");
-        books.setInitParameter("pathInfoOnly","true");
-        ctxHandler.addServlet(books, "/");
+        try {
+            BookService bookService = new BookService();
+
+            BookApiServlet booksApiServlet = new BookApiServlet(bookService);
+            ServletHolder booksApi = new ServletHolder(booksApiServlet);
+            booksApi.setInitParameter("dirAllowed","false");
+            booksApi.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(booksApi, "/api");
+
+            // Default servlet path, must be last
+            BookServlet bookServlet = new BookServlet(bookService);
+            ServletHolder books = new ServletHolder(bookServlet);
+            books.setInitParameter("dirAllowed","false");
+            books.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(books, "/");
+
+        } catch (BookServiceException e) {
+            logger.error("Failed to instantiate BookService: " + e.getMessage());
+            System.exit(-1);
+        }
 
         server.setHandler(ctxHandler);
 
diff --git a/src/main/java/com/github/demo/model/Book.java b/src/main/java/com/github/demo/model/Book.java
index ca14e0c..6c9bdc5 100644
--- a/src/main/java/com/github/demo/model/Book.java
+++ b/src/main/java/com/github/demo/model/Book.java
@@ -11,6 +11,8 @@ public class Book {
 
     private String cover;
 
+    private int rating;
+
     public Book() {
 
     }
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 9023ef5..09b47fd 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -105,42 +105,31 @@ public List<Book> getAll() throws BookServiceException {
 
     @Override
     public List<Book> getBooksByTitle(String name) throws BookServiceException {
-        List<Book> books = new ArrayList<Book>();
+        List<Book> books = new ArrayList<>();
 
         if (!isValid()) {
             throw new BookServiceException("Database connection is not valid, check logs for failure details.");
         }
 
-        Statement stmt = null;
-
-        try {
-            stmt = connection.createStatement();
-            String query = "SELECT * FROM books WHERE title LIKE '%" + name + "%'";
-
-            ResultSet results = stmt.executeQuery(query);
-
-            while (results.next()) {
-                Book book = new Book(
-                    results.getString("author"),
-                    results.getString("title"),
-                    results.getString("image")
-                );
-                books.add(book);
+        String query = "SELECT * FROM books WHERE title LIKE ?";
+        try (PreparedStatement stmt = connection.prepareStatement(query)) {
+            stmt.setString(1, "%" + name + "%");
+
+            try (ResultSet results = stmt.executeQuery()) {
+                while (results.next()) {
+                    Book book = new Book(
+                        results.getString("author"),
+                        results.getString("title"),
+                        results.getString("image")
+                    );
+                    books.add(book);
+                }
             }
         } catch (SQLException e) {
             logger.error("Failed while searching for {}'", name);
             throw new BookServiceException(e);
-        } finally {
-            try {
-                if (stmt != null) {
-                    stmt.close();
-                }
-            } catch (SQLException se) {
-                // Do nothing
-            } finally {
-                stmt = null;
-            }
         }
+
         return books;
     }
 
diff --git a/src/main/java/com/github/demo/servlet/BookApiServlet.java b/src/main/java/com/github/demo/servlet/BookApiServlet.java
new file mode 100644
index 0000000..e73fdab
--- /dev/null
+++ b/src/main/java/com/github/demo/servlet/BookApiServlet.java
@@ -0,0 +1,76 @@
+package com.github.demo.servlet;
+
+import com.github.demo.model.Book;
+import com.github.demo.service.BookService;
+import com.github.demo.service.BookServiceException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.json.JSONStringer;
+import org.json.JSONWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.List;
+
+public class BookApiServlet extends HttpServlet {
+
+    private static final long serialVersionUID = 1L;
+
+    private static final Logger logger = LoggerFactory.getLogger(BookApiServlet.class);
+
+    private BookService bookService;
+
+    public BookApiServlet(BookService bookService) throws BookServiceException {
+        logger.info("Starting Bookstore Api Servlet...");
+
+        if (bookService == null) {
+            logger.error("BookService was not provided.");
+            throw new BookServiceException("A valid book service object is required");
+        }
+        this.bookService = bookService;
+    }
+
+    @Override
+    public void doPost(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+        doGet(req, resp);
+    }
+
+    @Override
+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+
+        resp.setContentType("application/json; charset=UTF-8");
+
+        try {
+            JSONWriter writer = new JSONStringer().array();
+
+            String title = req.getParameter("title");
+            List<Book> books;
+            if (title != null) {
+                books = bookService.searchBooks(title);
+            } else {
+                books = bookService.getBooks();
+            }
+
+            books.forEach((book) -> {
+                writer.object();
+                writer.key("title").value(book.getTitle());
+                writer.key("author").value(book.getAuthor());
+                writer.key("details").value(book.getDetails());
+                writer.endObject();
+
+            });
+            writer.endArray();
+
+            resp.getWriter().write(writer.toString());
+        } catch (BookServiceException e) {
+            String json = new JSONStringer().object().key("error").value(500).endObject().toString();
+            resp.getWriter().write(json);
+        }
+    }
+}
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..f910286 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -28,14 +28,14 @@ public class BookServlet extends HttpServlet {
 
     private BookService bookService;
 
-    public BookServlet() throws Exception {
+    public BookServlet(BookService bookService) throws BookServiceException {
         logger.info("Starting Bookstore Servlet...");
-        try {
-            bookService = new BookService();
-        } catch (BookServiceException e) {
-            logger.error("Failed to instantiate BookService: " + e.getMessage());
-            throw e;
+
+        if (bookService == null) {
+            logger.error("BookService was not provided.");
+            throw new BookServiceException("A valid book service object is required");
         }
+        this.bookService = bookService;
     }
 
     @Override
@@ -65,7 +65,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String searchTerm = req.getParameter("title");
+            if (searchTerm != null) {
+                books = bookService.searchBooks(searchTerm);
+            } else {
+                books = bookService.getBooks();
+            }
+            
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
