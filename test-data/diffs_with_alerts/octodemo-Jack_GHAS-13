diff --git a/.github/workflows/Reset_Repo.yml b/.github/workflows/Reset_Repo.yml
index 751d478..8036e91 100644
--- a/.github/workflows/Reset_Repo.yml
+++ b/.github/workflows/Reset_Repo.yml
@@ -11,7 +11,7 @@ jobs:
   Reset_Repo:
     runs-on: 'GitHub_Jack_PowerRunner'
     permissions:
-      actions: write
+      actions: read
       contents: write
 
     steps:
diff --git a/repo_reset/reset.sh b/repo_reset/reset.sh
old mode 100644
new mode 100755
index 7f74a64..e1feda2
--- a/repo_reset/reset.sh
+++ b/repo_reset/reset.sh
@@ -1,13 +1,16 @@
 #!/bin/bash
 
-# Define directory and file paths
+# Define file paths and git config variables
 file_path="./routes/showProductReviews.ts"
-vuln_file_path="/vuln/showProductReviews.ts"
+vuln_file_path="./repo_reset/vuln/showProductReviews.ts"
+git_name="Jack G Kafaty"
+git_email="jackgkafaty@github.com"
 
 
 # Unzip vuln file to be replaced
 mkdir -p ./repo_reset/vuln/ 
-unzip ./repo_reset/showProductReviews.ts.zip -d ./repo_reset/vuln/
+unzip ./repo_reset/showProductReviews.zip -d ./repo_reset/vuln/
+
 
 # Fetch all remote branches
 git fetch origin
@@ -38,13 +41,16 @@ fi
 #Pulls for changes in case any was made on web
 git pull origin main
 
-# Delete all local branches except main
-#for branch in $(git branch | grep -v "main"); do
- #   git branch -D $branch
-#done
+#Delete all local branches except main
+for branch in $(git branch | grep -v "main"); do
+    git branch -D $branch
+done
+
+# Fetch and prune to sync local list of remote branches with the actual remote repository
+git fetch --prune
 
 # Delete all remote branches except main
-for branch in $(git branch -r | grep -vE "main|HEAD"); do
+for branch in $(git branch -r | grep -vE "origin/main|HEAD"); do
     git push origin --delete ${branch#origin/}
 done
 
@@ -60,8 +66,8 @@ fi
 cp "$vuln_file_path" "$file_path"
 
 # Set Git global config
-git config --global user.name 'Jack G Kafaty'
-git config --global user.email 'jackgkafaty@github.com'
+git config --global user.name "$git_name"
+git config --global user.email "$git_email"
 
 # Commit changes
 git add .
@@ -70,10 +76,3 @@ git push --set-upstream origin $new_branch
 
 # Create pull request
 gh pr create --title "$new_branch" --body "Updated Product Review to measure the time it takes to execute a database query, which is used later to check for potential NoSQL denial-of-service (DoS) attacks " --base main --head $new_branch
-
-
-# Allowing CodeQL to complete code scanning so that the  GitHub Pull Requests and Issues extension can show comments.
-#echo "Waiting for 4 minutes before pulling..."
-#sleep 240
-
-#git pull
diff --git a/repo_reset/showProductReviews.ts.zip b/repo_reset/showProductReviews.ts.zip
deleted file mode 100644
index 92145dd..0000000
Binary files a/repo_reset/showProductReviews.ts.zip and /dev/null differ
diff --git a/repo_reset/showProductReviews.zip b/repo_reset/showProductReviews.zip
new file mode 100644
index 0000000..68a326c
Binary files /dev/null and b/repo_reset/showProductReviews.zip differ
diff --git a/repo_reset/vuln/showProductReviews.ts b/repo_reset/vuln/showProductReviews.ts
new file mode 100644
index 0000000..40a21b1
--- /dev/null
+++ b/repo_reset/vuln/showProductReviews.ts
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2014-2023 Bjoern Kimminich & the OWASP Juice Shop contributors.
+ * SPDX-License-Identifier: MIT
+ */
+
+import utils = require('../lib/utils')
+import challengeUtils = require('../lib/challengeUtils')
+import { Request, Response, NextFunction } from 'express'
+import { Review } from 'data/types'
+
+const challenges = require('../data/datacache').challenges
+const security = require('../lib/insecurity')
+const db = require('../data/mongodb')
+
+// Blocking sleep function as in native MongoDB
+// @ts-expect-error test
+global.sleep = (time: number) => {
+  // Ensure that users don't accidentally dos their servers for too long
+  if (time > 2000) {
+    time = 2000
+  }
+  const stop = new Date().getTime()
+  while (new Date().getTime() < stop + time) {
+    ;
+  }
+}
+
+module.exports = function productReviews () {
+  return (req: Request, res: Response) => {
+    const id = utils.disableOnContainerEnv() ? Number(req.params.id) : req.params.id
+
+    // Measure how long the query takes, to check if there was a NoSQL dos attack
+    const t0 = new Date().getTime()
+    db.reviews.find({ $where: 'this.product == ' + id }).then((reviews: Review[]) => {
+      const t1 = new Date().getTime()
+      challengeUtils.solveIf(challenges.noSqlCommandChallenge, () => { return (t1 - t0) > 2000 })
+      const user = security.authenticatedUsers.from(req)
+      for (let i = 0; i < reviews.length; i++) {
+        if (user === undefined || reviews[i].likedBy.includes(user.data.email)) {
+
+
+        }
+      }
+      res.json(utils.queryResultToJson(reviews))
+    }, () => {
+      res.status(400).json({ error: 'Wrong Params' })
+    })
+  }
+}
\ No newline at end of file
diff --git a/routes/showProductReviews.ts b/routes/showProductReviews.ts
index 3cdc726..40a21b1 100644
--- a/routes/showProductReviews.ts
+++ b/routes/showProductReviews.ts
@@ -3,6 +3,15 @@
  * SPDX-License-Identifier: MIT
  */
 
+import utils = require('../lib/utils')
+import challengeUtils = require('../lib/challengeUtils')
+import { Request, Response, NextFunction } from 'express'
+import { Review } from 'data/types'
+
+const challenges = require('../data/datacache').challenges
+const security = require('../lib/insecurity')
+const db = require('../data/mongodb')
+
 // Blocking sleep function as in native MongoDB
 // @ts-expect-error test
 global.sleep = (time: number) => {
@@ -15,3 +24,26 @@ global.sleep = (time: number) => {
     ;
   }
 }
+
+module.exports = function productReviews () {
+  return (req: Request, res: Response) => {
+    const id = utils.disableOnContainerEnv() ? Number(req.params.id) : req.params.id
+
+    // Measure how long the query takes, to check if there was a NoSQL dos attack
+    const t0 = new Date().getTime()
+    db.reviews.find({ $where: 'this.product == ' + id }).then((reviews: Review[]) => {
+      const t1 = new Date().getTime()
+      challengeUtils.solveIf(challenges.noSqlCommandChallenge, () => { return (t1 - t0) > 2000 })
+      const user = security.authenticatedUsers.from(req)
+      for (let i = 0; i < reviews.length; i++) {
+        if (user === undefined || reviews[i].likedBy.includes(user.data.email)) {
+
+
+        }
+      }
+      res.json(utils.queryResultToJson(reviews))
+    }, () => {
+      res.status(400).json({ error: 'Wrong Params' })
+    })
+  }
+}
\ No newline at end of file
