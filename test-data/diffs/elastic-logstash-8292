diff --git a/logstash-core/benchmarks/src/main/java/org/logstash/benchmark/EventFieldBenchmark.java b/logstash-core/benchmarks/src/main/java/org/logstash/benchmark/EventFieldBenchmark.java
new file mode 100644
index 00000000000..e046e209f1f
--- /dev/null
+++ b/logstash-core/benchmarks/src/main/java/org/logstash/benchmark/EventFieldBenchmark.java
@@ -0,0 +1,76 @@
+package org.logstash.benchmark;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import org.logstash.Event;
+import org.logstash.FieldReference;
+import org.logstash.Timestamp;
+import org.openjdk.jmh.annotations.Benchmark;
+import org.openjdk.jmh.annotations.BenchmarkMode;
+import org.openjdk.jmh.annotations.Fork;
+import org.openjdk.jmh.annotations.Measurement;
+import org.openjdk.jmh.annotations.Mode;
+import org.openjdk.jmh.annotations.OperationsPerInvocation;
+import org.openjdk.jmh.annotations.OutputTimeUnit;
+import org.openjdk.jmh.annotations.Scope;
+import org.openjdk.jmh.annotations.Setup;
+import org.openjdk.jmh.annotations.State;
+import org.openjdk.jmh.annotations.Warmup;
+import org.openjdk.jmh.runner.Runner;
+import org.openjdk.jmh.runner.RunnerException;
+import org.openjdk.jmh.runner.options.Options;
+import org.openjdk.jmh.runner.options.OptionsBuilder;
+
+@Warmup(iterations = 3, time = 500, timeUnit = TimeUnit.MILLISECONDS)
+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
+@Fork(1)
+@BenchmarkMode(Mode.Throughput)
+@OutputTimeUnit(TimeUnit.MICROSECONDS)
+@State(Scope.Thread)
+public class EventFieldBenchmark {
+
+    private static final int EVENTS_PER_INVOCATION = 100_000;
+
+    private static final Event EVENT = new Event();
+
+    @Setup
+    public void setUp() {
+        EVENT.setField("Foo", "Bar");
+        EVENT.setField("Foo1", "Bar1");
+        EVENT.setField("Foo2", "Bar2");
+        EVENT.setField("Foo3", "Bar3");
+        EVENT.setField("Foo4", "Bar4");
+        EVENT.setField("Foo5", new Timestamp(System.currentTimeMillis()));
+        final Map<String, Object> nested = new HashMap<>(5);
+        nested.put("foooo", "baaaaaar");
+        nested.put("fooooish", "baaaaaar234");
+        EVENT.setField("sdfsfsdf", nested);
+        EVENT.setTimestamp(Timestamp.now());
+    }
+
+    @Benchmark
+    @OperationsPerInvocation(EVENTS_PER_INVOCATION)
+    public final void setByString() {
+        for (int i = 0; i < EVENTS_PER_INVOCATION; ++i) {
+            EVENT.setField("foo", "bar");
+        }
+    }
+
+    @Benchmark
+    @OperationsPerInvocation(EVENTS_PER_INVOCATION)
+    public final void setByFieldRef() {
+        final FieldReference field = FieldReference.from("foo");
+        for (int i = 0; i < EVENTS_PER_INVOCATION; ++i) {
+            EVENT.setField(field, "bar");
+        }
+    }
+
+    public static void main(final String... args) throws RunnerException {
+        Options opt = new OptionsBuilder()
+            .include(EventFieldBenchmark.class.getSimpleName())
+            .forks(2)
+            .build();
+        new Runner(opt).run();
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 1cda5eee31f..640c7ab898b 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -38,11 +38,10 @@ public final class Event implements Cloneable, Queueable {
     private static final String META_MAP_KEY = "META";
 
     private static final FieldReference TAGS_FIELD = FieldReference.from("tags");
-    
+
     private static final Logger logger = LogManager.getLogger(Event.class);
 
-    public Event()
-    {
+    public Event() {
         this.metadata = new ConvertedMap(10);
         this.data = new ConvertedMap(10);
         this.data.putInterned(VERSION, VERSION_ONE);
@@ -111,7 +110,7 @@ public boolean isCancelled() {
     }
 
     public Timestamp getTimestamp() throws IOException {
-        final JrubyTimestampExtLibrary.RubyTimestamp timestamp = 
+        final JrubyTimestampExtLibrary.RubyTimestamp timestamp =
             (JrubyTimestampExtLibrary.RubyTimestamp) data.get(TIMESTAMP);
         if (timestamp != null) {
             return timestamp.getTimestamp();
@@ -146,6 +145,79 @@ public Object getUnconvertedField(final FieldReference field) {
         }
     }
 
+    public void setField(final String reference, final String value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final String value) {
+        setField(field, RubyUtil.RUBY.newString(value));
+    }
+
+    public void setField(final String reference, final RubyString value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final RubyString value) {
+        switch (field.type()) {
+            case FieldReference.META_PARENT:
+                throwWrongMetaType(RubyString.class);
+            case FieldReference.META_CHILD:
+                Accessors.set(metadata, field, value);
+                break;
+            default:
+                Accessors.set(data, field, value);
+        }
+    }
+
+    public void setField(final String reference, final Collection<Object> value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final Collection<Object> value) {
+        setField(field, ConvertedList.newFromList(value));
+    }
+
+    public void setField(final String reference, final ConvertedList value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final ConvertedList value) {
+        switch (field.type()) {
+            case FieldReference.META_PARENT:
+                throwWrongMetaType(Collection.class);
+            case FieldReference.META_CHILD:
+                Accessors.set(metadata, field, value);
+                break;
+            default:
+                Accessors.set(data, field, value);
+        }
+    }
+
+    public void setField(final String reference, final Map<String, Object> value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final Map<String, Object> value) {
+        setField(field, ConvertedMap.newFromMap(value));
+    }
+
+    public void setField(final String reference, final ConvertedMap value) {
+        setField(FieldReference.from(reference), value);
+    }
+
+    public void setField(final FieldReference field, final ConvertedMap value) {
+        switch (field.type()) {
+            case FieldReference.META_PARENT:
+                metadata = value;
+                break;
+            case FieldReference.META_CHILD:
+                Accessors.set(metadata, field, value);
+                break;
+            default:
+                Accessors.set(data, field, value);
+        }
+    }
+
     public void setField(final String reference, final Object value) {
         setField(FieldReference.from(reference), value);
     }
@@ -201,20 +273,19 @@ public String toJson() throws JsonProcessingException {
     }
 
     public static Event[] fromJson(String json)
-            throws IOException
-    {
+        throws IOException {
         // empty/blank json string does not generate an event
         if (json == null || json.trim().isEmpty()) {
-            return new Event[]{ };
+            return new Event[]{};
         }
 
         Event[] result;
         Object o = JSON_MAPPER.readValue(json, Object.class);
         // we currently only support Map or Array json objects
         if (o instanceof Map) {
-            result = new Event[]{ new Event((Map<String, Object>)o) };
+            result = new Event[]{new Event((Map<String, Object>) o)};
         } else if (o instanceof List) {
-            final Collection<Map<String, Object>> list = (Collection<Map<String, Object>>) o; 
+            final Collection<Map<String, Object>> list = (Collection<Map<String, Object>>) o;
             result = new Event[list.size()];
             int i = 0;
             for (final Map<String, Object> e : list) {
@@ -395,4 +466,13 @@ public static Event deserialize(byte[] data) throws IOException {
         }
         return fromSerializableMap(data);
     }
+
+    private static void throwWrongMetaType(final Class<?> cls) {
+        throw new IllegalArgumentException(
+            String.format(
+                "Cannot set %s as value for '@metadata' field, only Map type is allowed!",
+                cls.getName()
+            )
+        );
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index e8a0e43f8ad..5d8c226d5d1 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -34,7 +34,7 @@ public void queueableInterfaceRoundTrip() throws Exception {
         inner.put("innerFoo", 42L);
         final RubySymbol symbol = RubyUtil.RUBY.newSymbol("val");
         e.setField("symbol", symbol);
-        e.setField("null", null);
+        e.setField("null", (Object) null);
         inner.put("innerQuux", 42.42);
         e.setField("baz", inner);
         final BigInteger bigint = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.TEN);
