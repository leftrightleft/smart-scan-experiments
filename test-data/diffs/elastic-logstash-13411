diff --git a/lib/pluginmanager/utils/http_client.rb b/lib/pluginmanager/utils/http_client.rb
index a8cb91cafdc..25e7d491ef4 100644
--- a/lib/pluginmanager/utils/http_client.rb
+++ b/lib/pluginmanager/utils/http_client.rb
@@ -36,7 +36,7 @@ def self.remote_file_exist?(uri, redirect_count = 0)
         response = http.request(request)
 
         if response.code == "302"
-          new_uri = response.headers["location"]
+          new_uri = response["location"]
           remote_file_exist?(new_uri, redirect_count + 1)
         elsif response.code == "200"
           true
diff --git a/spec/unit/plugin_manager/utils/http_client_spec.rb b/spec/unit/plugin_manager/utils/http_client_spec.rb
index e0d6510bd32..48d849bedae 100644
--- a/spec/unit/plugin_manager/utils/http_client_spec.rb
+++ b/spec/unit/plugin_manager/utils/http_client_spec.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "pluginmanager/utils/http_client"
+require "net/http"
 require "uri"
 
 describe LogStash::PluginManager::Utils::HttpClient do
@@ -88,9 +89,13 @@
       end
 
       context "with redirects" do
-        let(:redirect_response) { instance_double("Net::HTTP::Response", :code => "302", :headers => { "location" => "https://localhost:8888/new_path" }) }
+        let(:location) { "https://localhost:8888/new_path" }
+        let(:redirect_response) { instance_double("Net::HTTP::Response", :code => "302", :headers => { "location" => location }) }
         let(:response_ok) { instance_double("Net::HTTP::Response", :code => "200") }
 
+        before(:each) do
+          allow(redirect_response).to receive(:[]).with("location").and_return(location)
+        end
         it "follow 1 level redirect" do
           expect(mock_http).to receive(:request).with(kind_of(Net::HTTP::Head)).and_return(redirect_response)
           expect(mock_http).to receive(:request).with(kind_of(Net::HTTP::Head)).and_return(response_ok)
