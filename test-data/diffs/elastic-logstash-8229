diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index ca78035ef05..7a3265ee94c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradlew b/gradlew
index 27309d92314..cccdd3d517f 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e72f..e95643d6a2c 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/logstash-core/src/main/java/org/logstash/plugin/ConstructingObjectParser.java b/logstash-core/src/main/java/org/logstash/plugin/ConstructingObjectParser.java
new file mode 100644
index 00000000000..7232c9a1880
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/ConstructingObjectParser.java
@@ -0,0 +1,185 @@
+package org.logstash.plugin;
+
+import java.util.*;
+import java.util.function.BiConsumer;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+/**
+ * A functional class which constructs an object from a given configuration map.
+ *
+ * History: This is idea is taken largely from Elasticsearch's ConstructingObjectParser
+ *
+ * @param <Value> The object type to construct when `parse` is called.
+ */
+public class ConstructingObjectParser<Value> implements Function<Map<String, Object>, Value> {
+    private final Function<Object[], Value> builder;
+    private final Map<String, BiConsumer<Value, Object>> parsers = new LinkedHashMap<>();
+    private final Map<String, BiConsumer<ArrayList<Object>, Object>> constructorArgs = new TreeMap<>();
+
+    public ConstructingObjectParser(Function<Object[], Value> builder) {
+        this.builder = builder;
+    }
+
+    public static Integer integerTransform(Object object) {
+        if (object instanceof Integer) {
+            return (Integer) object;
+        } else if (object instanceof String) {
+            return Integer.parseInt((String) object);
+        } else {
+            throw new IllegalArgumentException("Value must be a number, but is a " + object.getClass());
+        }
+    }
+
+    public static String stringTransform(Object object) {
+        if (object instanceof String) {
+            return (String) object;
+        } else if (object instanceof Number) {
+            return object.toString();
+        } else {
+            throw new IllegalArgumentException("Value must be a string, but is a " + object.getClass());
+        }
+    }
+
+    public static <T> T objectTransform(Object object, ConstructingObjectParser<T> parser) {
+        if (object instanceof Map) {
+            // XXX: Fix this unchecked cast.
+            return parser.apply((Map<String, Object>) object);
+        } else {
+            throw new IllegalArgumentException("Object value must be a Map, but is a " + object.getClass());
+        }
+    }
+
+    /**
+     * Add an field with an integer value.
+     *
+     * @param name the name of this field
+     * @param consumer the function to call once the value is available
+     */
+    public void integer(String name, BiConsumer<Value, Integer> consumer) {
+        declareField(name, consumer, ConstructingObjectParser::integerTransform);
+    }
+
+    /**
+     * Declare an integer constructor argument.
+     *
+     * @param name the name of the field.
+     */
+    public void integer(String name) {
+        declareConstructorArg(name, ConstructingObjectParser::integerTransform);
+    }
+
+    /**
+     * Add a field with a string value.
+     *
+     * @param name the name of this field
+     * @param consumer the function to call once the value is available
+     */
+    public void string(String name, BiConsumer<Value, String> consumer) {
+        declareField(name, consumer, ConstructingObjectParser::stringTransform);
+    }
+
+    /**
+     * Declare a constructor argument that is a string.
+     *
+     * @param name the name of this field.
+     */
+    public void string(String name) {
+        declareConstructorArg(name, ConstructingObjectParser::stringTransform);
+    }
+
+    /**
+     * Add a field with an object value
+     *
+     * @param name the name of this field
+     * @param consumer the function to call once the value is available
+     * @param parser The ConstructingObjectParser that will build the object
+     * @param <T> The type of object to store as the value.
+     */
+    public <T> void object(String name, BiConsumer<Value, T> consumer, ConstructingObjectParser<T> parser) {
+        declareField(name, consumer, (t) -> objectTransform(t, parser));
+    }
+
+    /**
+     * Declare a constructor argument that is an object.
+     *
+     * @param name   the name of the field which represents this constructor argument
+     * @param parser the ConstructingObjectParser that builds the object
+     * @param <T>    The type of object created by the parser.
+     */
+    public <T> void object(String name, ConstructingObjectParser<T> parser) {
+        declareConstructorArg(name, (t) -> objectTransform(t, parser));
+    }
+
+    public <T> void declareField(String name, BiConsumer<Value, T> consumer, Function<Object, T> transform) {
+        BiConsumer<Value, Object> objConsumer = (value, object) -> consumer.accept(value, transform.apply(object));
+        parsers.put(name, objConsumer);
+    }
+
+    public <T> void declareConstructorArg(String name, Function<Object, T> transform) {
+        int position = constructorArgs.size();
+        BiConsumer<ArrayList<Object>, Object> objConsumer = (array, object) -> array.add(position, transform.apply(object));
+        constructorArgs.put(name, objConsumer);
+    }
+
+    /**
+     * Construct an object using the given config.
+     *
+     * The intent is that a config map, such as one from a Logstash pipeline config:
+     *
+     *     input {
+     *         example {
+     *             some => "setting"
+     *             goes => "here"
+     *         }
+     *     }
+     *
+     *  ... will know how to build an object for the above "example" input plugin.
+     */
+    public Value apply(Map<String, Object> config) {
+        rejectUnknownFields(config.keySet());
+        Value value = construct(config);
+
+        // Now call all the object setters/etc
+        for (Map.Entry<String, Object> entry : config.entrySet()) {
+            String name = entry.getKey();
+            if (constructorArgs.containsKey(name)) {
+                // Skip constructor arguments
+                continue;
+            }
+
+            BiConsumer<Value, Object> parser = parsers.get(name);
+            assert parser != null;
+
+            parser.accept(value, entry.getValue());
+        }
+
+        return value;
+    }
+
+    private void rejectUnknownFields(Set<String> configNames) {
+        // Check for any unknown parameters.
+        List<String> unknown = configNames.stream().filter(name -> !(parsers.containsKey(name) || constructorArgs.containsKey(name))).collect(Collectors.toList());
+
+        if (!unknown.isEmpty()) {
+            throw new IllegalArgumentException("Unknown settings " + unknown);
+        }
+    }
+
+    private Value construct(Map<String, Object> config) {
+        ArrayList<Object> args = new ArrayList<>(constructorArgs.size());
+
+        // Constructor arguments. Any constructor argument is a *required* setting.
+        for (Map.Entry<String, BiConsumer<ArrayList<Object>, Object>> argInfo : constructorArgs.entrySet()) {
+            String name = argInfo.getKey();
+            BiConsumer<ArrayList<Object>, Object> argsBuilder = argInfo.getValue();
+            if (config.containsKey(name)) {
+                argsBuilder.accept(args, config.get(name));
+            } else {
+                throw new IllegalArgumentException("Missing required argument '" + name + "' for " + getClass());
+            }
+        }
+
+        return builder.apply(args.toArray());
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Plugin.java b/logstash-core/src/main/java/org/logstash/plugin/Plugin.java
new file mode 100644
index 00000000000..8accc0ddced
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Plugin.java
@@ -0,0 +1,20 @@
+package org.logstash.plugin;
+
+import java.util.Map;
+
+public interface Plugin {
+    // register hooks
+    // additional settings
+
+    default Map<String, ConstructingObjectParser<? extends Input>> getInputs() {
+        return null;
+    }
+
+    default Map<String, ConstructingObjectParser<? extends Processor>> getProcessors() {
+        return null;
+    }
+
+    default Map<String, ConstructingObjectParser<? extends Output>> getOutputs() {
+        return null;
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/ConstructingObjectParserTest.java b/logstash-core/src/test/java/org/logstash/plugin/ConstructingObjectParserTest.java
new file mode 100644
index 00000000000..bc5a5e5a9e6
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/ConstructingObjectParserTest.java
@@ -0,0 +1,94 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.junit.experimental.runners.Enclosed;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import java.util.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Enclosed.class)
+public class ConstructingObjectParserTest {
+    public static class IntegrationTest {
+        @Test
+        public void testParsing() {
+            ConstructingObjectParser<Example> c = new ConstructingObjectParser<>((args) -> new Example());
+            c.integer("foo", Example::setValue);
+
+            Map<String, Object> config = Collections.singletonMap("foo", 1);
+
+            Example e = c.apply(config);
+            assertEquals(1, e.getValue());
+        }
+
+        private class Example {
+            private int i;
+
+            public Example() {
+            }
+
+            int getValue() {
+                return i;
+            }
+
+            void setValue(int i) {
+                this.i = i;
+            }
+        }
+    }
+
+    @RunWith(Parameterized.class)
+    public static class StringAccepts {
+        private final Object input;
+        private final Object expected;
+
+        public StringAccepts(Object input, Object expected) {
+            this.input = input;
+            this.expected = expected;
+        }
+
+        @Parameters
+        public static Collection<Object[]> data() {
+            return Arrays.asList(new Object[][]{
+                    {"1", "1"},
+                    {1, "1"},
+                    {1L, "1"},
+                    {1F, "1.0"},
+                    {1D, "1.0"},
+            });
+        }
+
+        @Test
+        public void testStringTransform() {
+            String value = ConstructingObjectParser.stringTransform(input);
+            assertEquals(expected, value);
+
+        }
+    }
+
+    @RunWith(Parameterized.class)
+    public static class StringRejections {
+        private Object input;
+
+        public StringRejections(Object input) {
+            this.input = input;
+        }
+
+        @Parameters
+        public static List<Object> data() {
+            return Arrays.asList(
+                    new Object(),
+                    Collections.emptyMap(),
+                    Collections.emptyList()
+            );
+        }
+
+        @Test(expected = IllegalArgumentException.class)
+        public void testFailure() {
+            ConstructingObjectParser.stringTransform(input);
+        }
+    }
+}
\ No newline at end of file
