diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Batch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Batch.java
index 3e582786a90..edf55c2cf64 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Batch.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Batch.java
@@ -15,10 +15,10 @@ public class Batch implements Closeable {
     private final Queue queue;
     private final AtomicBoolean closed;
 
-    public Batch(SequencedList<byte[]> serialized, Queue q) {
+    public Batch(SequencedList serialized, Queue q) {
         this(
-            serialized.getElements(),
-            serialized.getSeqNums().size() == 0 ? -1L : serialized.getSeqNums().get(0), q
+                serialized.getElements(),
+                serialized.getSeqNums().size() == 0 ? -1L : serialized.getSeqNums().get(0), q
         );
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
index 6d05092273b..98e373eec04 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
@@ -47,11 +47,11 @@ public String toString() {
      * @return {@link SequencedList} collection of serialized elements read
      * @throws IOException if an IO error occurs
      */
-    public SequencedList<byte[]> read(int limit) throws IOException {
+    public SequencedList read(int limit) throws IOException {
         // first make sure this page is activated, activating previously activated is harmless
         this.pageIO.activate();
 
-        SequencedList<byte[]> serialized = this.pageIO.read(this.firstUnreadSeqNum, limit);
+        SequencedList serialized = this.pageIO.read(this.firstUnreadSeqNum, limit);
         assert serialized.getSeqNums().get(0) == this.firstUnreadSeqNum :
             String.format("firstUnreadSeqNum=%d != first result seqNum=%d", this.firstUnreadSeqNum, serialized.getSeqNums().get(0));
 
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index f11aa7534b8..b28e58e9af0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -565,7 +565,7 @@ private Batch readPageBatch(Page p, int limit, long timeout) throws IOException
             if (! p.isFullyRead()) {
                 boolean wasFull = isFull();
 
-                final SequencedList<byte[]> serialized = p.read(left);
+                final SequencedList serialized = p.read(left);
                 int n = serialized.getElements().size();
                 assert n > 0 : "page read returned 0 elements";
                 elements.addAll(serialized.getElements());
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/SequencedList.java b/logstash-core/src/main/java/org/logstash/ackedqueue/SequencedList.java
index abbcbe01590..dda5090d646 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/SequencedList.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/SequencedList.java
@@ -3,16 +3,16 @@
 import java.util.List;
 import org.logstash.ackedqueue.io.LongVector;
 
-public class SequencedList<E> {
-    private final List<E> elements;
+public final class SequencedList {
+    private final List<byte[]> elements;
     private final LongVector seqNums;
 
-    public SequencedList(List<E> elements, LongVector seqNums) {
+    public SequencedList(List<byte[]> elements, LongVector seqNums) {
         this.elements = elements;
         this.seqNums = seqNums;
     }
 
-    public List<E> getElements() {
+    public List<byte[]> getElements() {
         return elements;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
index ee0035a8578..5d26086cde7 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
@@ -88,7 +88,7 @@ public void open(long minSeqNum, int elementCount) throws IOException {
     }
 
     @Override
-    public SequencedList<byte[]> read(long seqNum, int limit) throws IOException {
+    public SequencedList read(long seqNum, int limit) throws IOException {
         assert seqNum >= this.minSeqNum :
             String.format("seqNum=%d < minSeqNum=%d", seqNum, this.minSeqNum);
         assert seqNum <= maxSeqNum() :
@@ -124,7 +124,7 @@ public SequencedList<byte[]> read(long seqNum, int limit) throws IOException {
             }
         }
 
-        return new SequencedList<>(elements, seqNums);
+        return new SequencedList(elements, seqNums);
     }
 
     // recover will overwrite/update/set this object minSeqNum, capacity and elementCount attributes
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/PageIO.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/PageIO.java
index 6560b5a4c31..9c8930979ed 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/PageIO.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/PageIO.java
@@ -32,7 +32,7 @@ public interface PageIO extends Closeable {
     void write(byte[] bytes, long seqNum) throws IOException;
 
     // read up to limit number of items starting at give seqNum
-    SequencedList<byte[]> read(long seqNum, int limit) throws IOException;
+    SequencedList read(long seqNum, int limit) throws IOException;
 
     // @return the data container total capacity in bytes
     int getCapacity();
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
index adf930ae78e..06930a4d5e5 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
@@ -46,7 +46,7 @@ public void roundTrip() throws Exception {
         }
         writeIo.close();
         readIo.open(1, 16);
-        SequencedList<byte[]> result = readIo.read(1, 16);
+        SequencedList result = readIo.read(1, 16);
         for (byte[] bytes : result.getElements()) {
             StringElement element = StringElement.deserialize(bytes);
             readList.add(element);
