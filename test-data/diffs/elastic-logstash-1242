diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index a266a624034..93e220e31f8 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -159,7 +159,7 @@ def show_version
     if [:info, :debug].include?(verbosity?) || debug? || verbose?
       show_version_ruby
 
-      if RUBY_PLATFORM == "java"
+      if LogStash::Environment.jruby?
         show_version_java
         show_version_elasticsearch
       end
diff --git a/lib/logstash/environment.rb b/lib/logstash/environment.rb
index 1a03b22a18b..0e956fca548 100644
--- a/lib/logstash/environment.rb
+++ b/lib/logstash/environment.rb
@@ -24,6 +24,12 @@ def load_elasticsearch_jars!
       end
     end
 
+    def log4j_loaded?
+      !!Java::OrgApacheLog4j.const_get("Logger") # Java org.apache.log4j
+    rescue NameError
+      false
+    end
+
     def jruby?
       RUBY_PLATFORM == "java"
     end
diff --git a/lib/logstash/inputs/eventlog.rb b/lib/logstash/inputs/eventlog.rb
index bcab85b87dd..d44152a7148 100644
--- a/lib/logstash/inputs/eventlog.rb
+++ b/lib/logstash/inputs/eventlog.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/inputs/base"
 require "logstash/namespace"
+require "logstash/environment"
 require "socket"
 
 # This input will pull events from a (http://msdn.microsoft.com/en-us/library/windows/desktop/bb309026%28v=vs.85%29.aspx)[Windows Event Log].
@@ -32,7 +33,7 @@ def register
     @hostname = Socket.gethostname
     @logger.info("Registering input eventlog://#{@hostname}/#{@logfile}")
 
-    if RUBY_PLATFORM == "java"
+    if LogStash::Environment.jruby?
       require "logstash/inputs/eventlog/racob_fix"
       require "jruby-win32ole"
     else
@@ -68,10 +69,10 @@ def run(queue)
             EventType Logfile Message RecordNumber SourceName
             TimeGenerated TimeWritten Type User
         }.each{
-            |property| e[property] = event.send property 
+            |property| e[property] = event.send property
         }
 
-        if RUBY_PLATFORM == "java"
+        if LogStash::Environment.jruby?
           # unwrap jruby-win32ole racob data
           e["InsertionStrings"] = unwrap_racob_variant_array(event.InsertionStrings)
           data = unwrap_racob_variant_array(event.Data)
@@ -112,7 +113,7 @@ def to_timestamp(wmi_time)
     # parse the utc date string
     /(?<w_date>\d{8})(?<w_time>\d{6})\.\d{6}(?<w_sign>[\+-])(?<w_diff>\d{3})/ =~ wmi_time
     result = "#{w_date}T#{w_time}#{w_sign}"
-    # the offset is represented by the difference, in minutes, 
+    # the offset is represented by the difference, in minutes,
     # between the local time zone and Greenwich Mean Time (GMT).
     if w_diff.to_i > 0
       # calculate the timezone offset in hours and minutes
@@ -122,7 +123,7 @@ def to_timestamp(wmi_time)
     else
       result.concat("0000")
     end
-  
+
     return DateTime.strptime(result, "%Y%m%dT%H%M%S%z").iso8601
   end
 end # class LogStash::Inputs::EventLog
diff --git a/lib/logstash/inputs/log4j.rb b/lib/logstash/inputs/log4j.rb
index 86096d97f44..a783ee09e6e 100644
--- a/lib/logstash/inputs/log4j.rb
+++ b/lib/logstash/inputs/log4j.rb
@@ -43,14 +43,8 @@ def initialize(*args)
   public
   def register
     LogStash::Environment.load_elasticsearch_jars!
-    require "java"
     require "jruby/serialization"
-
-    begin
-      Java::OrgApacheLog4jSpi.const_get("LoggingEvent")
-    rescue
-      raise(LogStash::PluginLoadingError, "Log4j java library not loaded")
-    end
+    raise(LogStash::PluginLoadingError, "Log4j java library not loaded") unless LogStash::Environment.log4j_loaded?
 
     if server?
       @logger.info("Starting Log4j input listener", :address => "#{@host}:#{@port}")
diff --git a/lib/logstash/logging.rb b/lib/logstash/logging.rb
index 175891d8969..484a3875971 100644
--- a/lib/logstash/logging.rb
+++ b/lib/logstash/logging.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
+require "logstash/environment"
 require "cabin"
 require "logger"
 
@@ -46,6 +47,7 @@ def fatal?(*args); @channel.fatal?(*args); end
 
   def self.setup_log4j(logger)
     require "java"
+    raise(LogStash::EnvironmentError, "Log4j java library not loaded") unless LogStash::Environment.log4j_loaded?
 
     properties = java.util.Properties.new
     log4j_level = "WARN"
diff --git a/lib/logstash/outputs/file.rb b/lib/logstash/outputs/file.rb
index 4ca7b98ec50..db4f6bb5213 100644
--- a/lib/logstash/outputs/file.rb
+++ b/lib/logstash/outputs/file.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
+require "logstash/environment"
 require "logstash/outputs/base"
 require "zlib"
 
@@ -10,13 +11,13 @@ class LogStash::Outputs::File < LogStash::Outputs::Base
   config_name "file"
   milestone 2
 
-  # The path to the file to write. Event fields can be used here, 
+  # The path to the file to write. Event fields can be used here,
   # like "/var/log/logstash/%{host}/%{application}"
-  # One may also utilize the path option for date-based log 
+  # One may also utilize the path option for date-based log
   # rotation via the joda time format. This will use the event
   # timestamp.
-  # E.g.: path => "./test-%{+YYYY-MM-dd}.txt" to create 
-  # ./test-2013-05-29.txt 
+  # E.g.: path => "./test-%{+YYYY-MM-dd}.txt" to create
+  # ./test-2013-05-29.txt
   config :path, :validate => :string, :required => true
 
   # The maximum size of file to write. When the file exceeds this
@@ -35,7 +36,7 @@ class LogStash::Outputs::File < LogStash::Outputs::Base
   # event will be written as a single line.
   config :message_format, :validate => :string
 
-  # Flush interval (in seconds) for flushing writes to log files. 
+  # Flush interval (in seconds) for flushing writes to log files.
   # 0 will flush on every message.
   config :flush_interval, :validate => :number, :default => 2
 
@@ -136,12 +137,12 @@ def open(path)
     dir = File.dirname(path)
     if !Dir.exists?(dir)
       @logger.info("Creating directory", :directory => dir)
-      FileUtils.mkdir_p(dir) 
+      FileUtils.mkdir_p(dir)
     end
 
     # work around a bug opening fifos (bug JRUBY-6280)
     stat = File.stat(path) rescue nil
-    if stat and stat.ftype == "fifo" and RUBY_PLATFORM == "java"
+    if stat and stat.ftype == "fifo" and LogStash::Environment.jruby?
       fd = java.io.FileWriter.new(java.io.File.new(path))
     else
       fd = File.new(path, "a")
diff --git a/lib/logstash/time_addon.rb b/lib/logstash/time_addon.rb
index a5970332dc3..5b6f45e2bea 100644
--- a/lib/logstash/time_addon.rb
+++ b/lib/logstash/time_addon.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
+require "logstash/environment"
 
 module LogStash::Time
   ISO8601_STRFTIME = "%04d-%02d-%02dT%02d:%02d:%02d.%06d%+03d:00".freeze
@@ -7,7 +8,7 @@ def self.now
     return Time.new.utc
   end
 
-  if RUBY_PLATFORM == "java"
+  if LogStash::Environment.jruby?
     JODA_ISO8601_PARSER = org.joda.time.format.ISODateTimeFormat.dateTimeParser
     #JODA_ISO8601_PARSER = org.joda.time.format.DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
     UTC = org.joda.time.DateTimeZone.forID("UTC")
diff --git a/spec/environment.rb b/spec/environment.rb
index d0dea75ffeb..78ee8aa47c3 100644
--- a/spec/environment.rb
+++ b/spec/environment.rb
@@ -13,4 +13,28 @@
       expect{LogStash::Environment.load_elasticsearch_jars!}.to raise_error(LogStash::EnvironmentError)
     end
   end
+
+  describe "log4j_loaded?" do
+
+    it "should find log4j" do
+      expect{LogStash::Environment.load_elasticsearch_jars!}.to_not raise_error
+      expect(LogStash::Environment.log4j_loaded?).to be_true
+    end
+
+    it "should not find log4j" do
+      # temporarily turn off verbosity to avoid warning: already initialized constant Java
+      saved_verbose = $VERBOSE
+      $VERBOSE = nil
+
+      # temporarily reset Java module
+      saved_java = Java rescue nil
+      Java = Module.new if saved_java
+
+      expect(LogStash::Environment.log4j_loaded?).to be_false
+
+      # restore Java and verbosity
+      Java = saved_java
+      $VERBOSE = saved_verbose
+    end
+  end
 end
