diff --git a/.rubocop.yml b/.rubocop.yml
index 21e75173bdc..a543ce718e7 100644
--- a/.rubocop.yml
+++ b/.rubocop.yml
@@ -67,6 +67,16 @@ Layout/SpaceAfterComma:
   Enabled: true
 Layout/SpaceAfterSemicolon:
   Enabled: true
+Layout/SpaceAroundBlockParameters:
+  Enabled: true
+Layout/SpaceAroundEqualsInParameterDefault:
+  Enabled: true
+Layout/SpaceAroundKeyword:
+  Enabled: true
+Layout/SpaceAroundMethodCallOperator:
+  Enabled: true
+Layout/SpaceAroundOperators:
+  Enabled: true
 
 ##### Need review #####
 Layout/AccessModifierIndentation:
@@ -189,16 +199,6 @@ Layout/SpaceAfterMethodName:
   Enabled: false
 Layout/SpaceAfterNot:
   Enabled: false
-Layout/SpaceAroundBlockParameters:
-  Enabled: false
-Layout/SpaceAroundEqualsInParameterDefault:
-  Enabled: false
-Layout/SpaceAroundKeyword:
-  Enabled: false
-Layout/SpaceAroundMethodCallOperator:
-  Enabled: false
-Layout/SpaceAroundOperators:
-  Enabled: false
 Layout/SpaceBeforeBlockBraces:
   Enabled: false
 Layout/SpaceBeforeBrackets:
diff --git a/ci/test_supported_plugins.rb b/ci/test_supported_plugins.rb
index f9b615de194..91c1adc1f86 100644
--- a/ci/test_supported_plugins.rb
+++ b/ci/test_supported_plugins.rb
@@ -23,7 +23,7 @@
 
 # it has to be out of logstash local close else plugins' Gradle script
 # would interfere with Logstash's one
-base_folder =  ENV['LOGSTASH_PLUGINS_TMP'] || (require 'tmpdir'; Dir.tmpdir)
+base_folder = ENV['LOGSTASH_PLUGINS_TMP'] || (require 'tmpdir'; Dir.tmpdir)
 puts "Using #{base_folder} as temporary clone folder"
 plugins_folder = File.join(base_folder, "plugin_clones")
 unless File.directory?(plugins_folder)
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index 0e8d1306507..3252220212b 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -192,8 +192,8 @@ def execute_bundler(options)
       ::Bundler::CLI.start(bundler_arguments(options))
     end
 
-    def specific_platforms(platforms=::Gem.platforms)
-      platforms.find_all {|plat| plat.is_a?(::Gem::Platform) && plat.os=='java' && !plat.cpu.nil?}
+    def specific_platforms(platforms = ::Gem.platforms)
+      platforms.find_all {|plat| plat.is_a?(::Gem::Platform) && plat.os == 'java' && !plat.cpu.nil?}
     end
 
     def genericize_platform
@@ -233,7 +233,7 @@ def expand_logstash_mixin_dependencies(plugin_names); require 'set'
     # @return [Array] gem names that plugin depends on
     def fetch_plugin_dependencies(plugin_name)
       old_spec = ::Gem::Specification.find_all_by_name(plugin_name).last
-      require_version = old_spec ? ">= #{old_spec.version}": nil
+      require_version = old_spec ? ">= #{old_spec.version}" : nil
       dep = ::Gem::Dependency.new(plugin_name, require_version)
       new_specs, errors = ::Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
 
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index d7f8c90c5a8..47b62dca203 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -52,7 +52,7 @@ def ruby_engine
     end
 
     def oss_only?
-      return true if ENV['OSS']=="true"
+      return true if ENV['OSS'] == "true"
 
       !File.exist?(File.join(LogStash::Environment::LOGSTASH_HOME, "x-pack"))
     end
diff --git a/lib/bootstrap/rubygems.rb b/lib/bootstrap/rubygems.rb
index 34a05ff7da0..c0fd7dbdbc0 100644
--- a/lib/bootstrap/rubygems.rb
+++ b/lib/bootstrap/rubygems.rb
@@ -43,7 +43,7 @@ def unpack(file, path)
       # - User build his own gem with a fix
       # - User doesnt increment the version
       # - User install the same version but different code or dependencies multiple times..
-      basename  = ::File.basename(file, '.gem')
+      basename = ::File.basename(file, '.gem')
       unique = SecureRandom.hex(4)
       target_path = ::File.expand_path(::File.join(path, unique, basename))
 
diff --git a/lib/pluginmanager/bundler/logstash_uninstall.rb b/lib/pluginmanager/bundler/logstash_uninstall.rb
index 2dbee48cce9..11cfbefbc95 100644
--- a/lib/pluginmanager/bundler/logstash_uninstall.rb
+++ b/lib/pluginmanager/bundler/logstash_uninstall.rb
@@ -77,7 +77,7 @@ def remove_gem(gem_name)
     end
 
     def display_cant_remove_message(gem_name, dependencies_from)
-        message =<<-eos
+        message = <<-eos
 Failed to remove \"#{gem_name}\" because the following plugins or libraries depend on it:
 
 * #{dependencies_from.join("\n* ")}
diff --git a/lib/pluginmanager/pack_command.rb b/lib/pluginmanager/pack_command.rb
index d9d2200fcd9..2113a8bd4b0 100644
--- a/lib/pluginmanager/pack_command.rb
+++ b/lib/pluginmanager/pack_command.rb
@@ -28,7 +28,7 @@ def file_extension
   end
 
   def signal_deprecation_warning_for_pack
-  message =<<-EOS
+  message = <<-EOS
 The pack and the unpack command are now deprecated and will be removed in a future version of Logstash.
 See the `prepare-offline-pack` to update your workflow. You can get documentation about this by running `bin/logstash-plugin prepare-offline-pack --help`
   EOS
diff --git a/lib/pluginmanager/pack_fetch_strategy/uri.rb b/lib/pluginmanager/pack_fetch_strategy/uri.rb
index 74c432886f9..3c296a01df0 100644
--- a/lib/pluginmanager/pack_fetch_strategy/uri.rb
+++ b/lib/pluginmanager/pack_fetch_strategy/uri.rb
@@ -27,7 +27,7 @@ class Uri
     class << self
       def get_installer_for(plugin_name)
         begin
-          uri =  URI.parse(plugin_name)
+          uri = URI.parse(plugin_name)
 
           if local?(uri)
             PluginManager.ui.debug("Local file: #{uri.path}")
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index ccf0aa73665..9c33079f341 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -56,7 +56,7 @@ class ValidationError < StandardError; end
   # @param [Hash] options the options used to setup external components
   # @option options [Array<String>] :rubygems_source Gem sources to lookup for the verification
   # @return [Boolean] true if valid logstash plugin gem name & version or a .gem file
-  def self.logstash_plugin?(plugin, version = nil, options={})
+  def self.logstash_plugin?(plugin, version = nil, options = {})
     if plugin_file?(plugin)
       begin
         return logstash_plugin_gem_spec?(plugin_file_spec(plugin))
@@ -92,8 +92,8 @@ def self.logstash_plugin?(plugin, version = nil, options={})
   # @param [Hash] Set of available options when fetching the information
   # @option options [Boolean] :pre Include pre release versions in the search (default: false)
   # @return [Hash] The plugin version information as returned by rubygems
-  def self.fetch_latest_version_info(plugin, options={})
-    exclude_prereleases =  options.fetch(:pre, false)
+  def self.fetch_latest_version_info(plugin, options = {})
+    exclude_prereleases = options.fetch(:pre, false)
     versions = LogStash::Rubygems.versions(plugin)
     raise ValidationError.new("Something went wrong with the validation. You can skip the validation with the --no-verify option") if !versions.is_a?(Array) || versions.empty?
     versions = versions.select { |version| !version["prerelease"] } if !exclude_prereleases
diff --git a/logstash-core/lib/logstash/api/app_helpers.rb b/logstash-core/lib/logstash/api/app_helpers.rb
index cdcb30d803c..9530432966c 100644
--- a/logstash-core/lib/logstash/api/app_helpers.rb
+++ b/logstash-core/lib/logstash/api/app_helpers.rb
@@ -25,7 +25,7 @@ module LogStash::Api::AppHelpers
   # it will make sense to separate them.
   #
   # See `#error` method in the `LogStash::Api::Module::Base`
-  def respond_with(data, options={})
+  def respond_with(data, options = {})
     as     = options.fetch(:as, :json)
     filter = options.fetch(:filter, "")
 
diff --git a/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb b/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
index 0f928339909..fb04b600c72 100644
--- a/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
+++ b/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
@@ -71,7 +71,7 @@ def to_hash
   end
 
   def cpu_time_as_percent(hash)
-    (((cpu_time(hash) / @cmd.uptime * 1.0)*10000).to_i)/100.0
+    (((cpu_time(hash) / @cmd.uptime * 1.0) * 10000).to_i) / 100.0
   end
 
   def cpu_time(hash)
diff --git a/logstash-core/lib/logstash/api/commands/node.rb b/logstash-core/lib/logstash/api/commands/node.rb
index ce9a90e1af3..0ef7f95a57e 100644
--- a/logstash-core/lib/logstash/api/commands/node.rb
+++ b/logstash-core/lib/logstash/api/commands/node.rb
@@ -23,7 +23,7 @@ module Api
     module Commands
       class Node < Commands::Base
 
-        def all(selected_fields=[])
+        def all(selected_fields = [])
           payload = {
             :pipelines => pipelines,
             :os => os,
@@ -33,7 +33,7 @@ def all(selected_fields=[])
           payload
         end
 
-        def pipelines(options={})
+        def pipelines(options = {})
           pipeline_ids = service.get_shallow(:stats, :pipelines).keys
           pipeline_ids.each_with_object({}) do |pipeline_id, result|
             pipeline_node = pipeline(pipeline_id, options)
@@ -43,7 +43,7 @@ def pipelines(options={})
           {}
         end
 
-        def pipeline(pipeline_id, options={})
+        def pipeline(pipeline_id, options = {})
           metrics = extract_metrics(
             [:stats, :pipelines, pipeline_id.to_sym, :config],
             :ephemeral_id,
@@ -55,7 +55,7 @@ def pipeline(pipeline_id, options={})
             :config_reload_interval,
             :dead_letter_queue_enabled,
             :dead_letter_queue_path,
-          ).reject{|_, v|v.nil?}
+          ).reject{|_, v| v.nil?}
           if options.fetch(:graph, false)
             extended_stats = extract_metrics([:stats, :pipelines, pipeline_id.to_sym, :config], :graph)
             decorated_vertices = extended_stats[:graph]["graph"]["vertices"].map { |vertex| decorate_with_cluster_uuids(vertex)  }
@@ -96,7 +96,7 @@ def jvm
           }
         end
 
-        def hot_threads(options={})
+        def hot_threads(options = {})
           HotThreadsReport.new(self, options)
         end
 
diff --git a/logstash-core/lib/logstash/api/commands/stats.rb b/logstash-core/lib/logstash/api/commands/stats.rb
index 277e0ca79fe..5c55d46082e 100644
--- a/logstash-core/lib/logstash/api/commands/stats.rb
+++ b/logstash-core/lib/logstash/api/commands/stats.rb
@@ -91,7 +91,7 @@ def flow
           {}
         end
 
-        def pipeline(pipeline_id = nil, opts={})
+        def pipeline(pipeline_id = nil, opts = {})
           extended_stats = LogStash::Config::PipelinesInfo.format_pipelines_info(
             service.agent,
             service.snapshot.metric_store,
@@ -143,7 +143,7 @@ def gc
           service.get_shallow(:jvm, :gc)
         end
 
-        def hot_threads(options={})
+        def hot_threads(options = {})
           HotThreadsReport.new(self, options)
         end
 
@@ -154,7 +154,7 @@ def geoip
         end
 
         private
-        def plugins_stats_report(pipeline_id, extended_pipeline, opts={})
+        def plugins_stats_report(pipeline_id, extended_pipeline, opts = {})
           stats = service.get_shallow(:stats, :pipelines, pipeline_id.to_sym)
           PluginsStats.report(stats, extended_pipeline, opts)
         end
@@ -172,7 +172,7 @@ def plugin_stats(stats, plugin_type)
             end
           end
 
-          def report(stats, extended_stats=nil, opts={})
+          def report(stats, extended_stats = nil, opts = {})
             ret = {
               :events => stats[:events],
               :flow => stats[:flow],
diff --git a/logstash-core/lib/logstash/api/modules/base.rb b/logstash-core/lib/logstash/api/modules/base.rb
index 7c6b38ec134..c32386e24ab 100644
--- a/logstash-core/lib/logstash/api/modules/base.rb
+++ b/logstash-core/lib/logstash/api/modules/base.rb
@@ -40,7 +40,7 @@ class Base < ::Sinatra::Base
 
         helpers AppHelpers
 
-        def initialize(app=nil, agent)
+        def initialize(app = nil, agent)
           super(app)
           @agent = agent
           @factory = ::LogStash::Api::CommandFactory.new(LogStash::Api::Service.new(agent))
diff --git a/logstash-core/lib/logstash/codecs/base.rb b/logstash-core/lib/logstash/codecs/base.rb
index 9479c40af85..f028cfe168c 100644
--- a/logstash-core/lib/logstash/codecs/base.rb
+++ b/logstash-core/lib/logstash/codecs/base.rb
@@ -27,7 +27,7 @@ def self.plugin_type
     "codec"
   end
 
-  def initialize(params={})
+  def initialize(params = {})
     super
     config_init(@params)
     register if respond_to?(:register)
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index c476431a2e0..c066489f81e 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -47,7 +47,7 @@ def process_escape_sequences=(val)
       set_meta(PROCESS_ESCAPE_SEQUENCES, val)
     end
 
-    def compile(base_source_with_metadata=nil)
+    def compile(base_source_with_metadata = nil)
       # There is no way to move vars across nodes in treetop :(
       self.base_source_with_metadata = base_source_with_metadata
 
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
index 8dd50b34c9e..3b0dd0f9680 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
@@ -198,12 +198,12 @@ def _nt_cs
       i1 = index
       r2 = _nt_comment
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r1 = r2
       else
         r3 = _nt_whitespace
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r1 = r3
         else
           @index = i1
@@ -380,12 +380,12 @@ def _nt_branch_or_plugin
     i0 = index
     r1 = _nt_branch
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_plugin
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -418,7 +418,7 @@ def _nt_plugin_type
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       if (match_len = has_terminal?("filter", false, index))
@@ -429,7 +429,7 @@ def _nt_plugin_type
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         if (match_len = has_terminal?("output", false, index))
@@ -440,7 +440,7 @@ def _nt_plugin_type
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           @index = i0
@@ -711,12 +711,12 @@ def _nt_name
       r1 = instantiate_node(LogStash::Compiler::LSCL::AST::Name, input, i1...index, s1)
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r3 = _nt_string
       if r3
-        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
         r0 = r3
       else
         @index = i0
@@ -810,32 +810,32 @@ def _nt_value
     i0 = index
     r1 = _nt_plugin
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_bareword
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_string
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_number
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_array
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_hash
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -866,27 +866,27 @@ def _nt_array_value
     i0 = index
     r1 = _nt_bareword
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_string
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_number
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_hash
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               @index = i0
@@ -1000,7 +1000,7 @@ def _nt_double_quoted_string
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1040,7 +1040,7 @@ def _nt_double_quoted_string
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1117,7 +1117,7 @@ def _nt_single_quoted_string
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1157,7 +1157,7 @@ def _nt_single_quoted_string
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1210,12 +1210,12 @@ def _nt_string
     i0 = index
     r1 = _nt_double_quoted_string
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_single_quoted_string
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -1266,7 +1266,7 @@ def _nt_regexp
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1306,7 +1306,7 @@ def _nt_regexp
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1767,17 +1767,17 @@ def _nt_hashentry
     i1 = index
     r2 = _nt_number
     if r2
-      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+      r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
       r1 = r2
     else
       r3 = _nt_bareword
       if r3
-        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
         r1 = r3
       else
         r4 = _nt_string
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r1 = r4
         else
           @index = i1
@@ -2443,43 +2443,43 @@ def _nt_expression
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::Expression)
     else
       r7 = _nt_negative_expression
       if r7
-        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
+        r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
         r0 = r7
         r0.extend(LogStash::Compiler::LSCL::AST::Expression)
       else
         r8 = _nt_in_expression
         if r8
-          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
+          r8 = SyntaxNode.new(input, (index - 1)...index) if r8 == true
           r0 = r8
           r0.extend(LogStash::Compiler::LSCL::AST::Expression)
         else
           r9 = _nt_not_in_expression
           if r9
-            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
+            r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
             r0 = r9
             r0.extend(LogStash::Compiler::LSCL::AST::Expression)
           else
             r10 = _nt_compare_expression
             if r10
-              r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
+              r10 = SyntaxNode.new(input, (index - 1)...index) if r10 == true
               r0 = r10
               r0.extend(LogStash::Compiler::LSCL::AST::Expression)
             else
               r11 = _nt_regexp_expression
               if r11
-                r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
+                r11 = SyntaxNode.new(input, (index - 1)...index) if r11 == true
                 r0 = r11
                 r0.extend(LogStash::Compiler::LSCL::AST::Expression)
               else
                 r12 = _nt_rvalue
                 if r12
-                  r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
+                  r12 = SyntaxNode.new(input, (index - 1)...index) if r12 == true
                   r0 = r12
                   r0.extend(LogStash::Compiler::LSCL::AST::Expression)
                 else
@@ -2591,7 +2591,7 @@ def _nt_negative_expression
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::NegativeExpression)
     else
@@ -2620,7 +2620,7 @@ def _nt_negative_expression
         r9 = nil
       end
       if r9
-        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
+        r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
         r0 = r9
         r0.extend(LogStash::Compiler::LSCL::AST::NegativeExpression)
       else
@@ -2855,32 +2855,32 @@ def _nt_rvalue
     i0 = index
     r1 = _nt_string
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_number
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_selector
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_method_call
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_regexp
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -3155,7 +3155,7 @@ def _nt_compare_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
     else
@@ -3167,7 +3167,7 @@ def _nt_compare_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
       else
@@ -3179,7 +3179,7 @@ def _nt_compare_operator
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
         else
@@ -3191,7 +3191,7 @@ def _nt_compare_operator
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
           else
@@ -3203,7 +3203,7 @@ def _nt_compare_operator
               r5 = nil
             end
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
               r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
             else
@@ -3215,7 +3215,7 @@ def _nt_compare_operator
                 r6 = nil
               end
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
                 r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
               else
@@ -3278,12 +3278,12 @@ def _nt_regexp_expression
             i5 = index
             r6 = _nt_string
             if r6
-              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+              r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
               r5 = r6
             else
               r7 = _nt_regexp
               if r7
-                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
+                r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
                 r5 = r7
               else
                 @index = i5
@@ -3328,7 +3328,7 @@ def _nt_regexp_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::RegExpOperator)
     else
@@ -3340,7 +3340,7 @@ def _nt_regexp_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::RegExpOperator)
       else
@@ -3374,7 +3374,7 @@ def _nt_boolean_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
     else
@@ -3386,7 +3386,7 @@ def _nt_boolean_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
       else
@@ -3398,7 +3398,7 @@ def _nt_boolean_operator
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
         else
@@ -3410,7 +3410,7 @@ def _nt_boolean_operator
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
           else
diff --git a/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb b/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
index 1fdcecf2041..fde035ff35c 100644
--- a/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
+++ b/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
@@ -38,13 +38,13 @@ def compile
   # Traverse the syntax tree recursively.
   # The order should respect the order of the configuration file as it is read
   # and written by humans (and the order in which it is parsed).
-  def recurse(e, depth=0, &block)
+  def recurse(e, depth = 0, &block)
     r = block.call(e, depth)
     e.elements.each { |e| recurse(e, depth + 1, &block) } if r && e.elements
     nil
   end
 
-  def recursive_inject(results=[], &block)
+  def recursive_inject(results = [], &block)
     if !elements.nil?
       elements.each do |element|
         if block.call(element)
@@ -67,7 +67,7 @@ def recursive_select(*klasses)
     return recursive_inject { |e| klasses.any? {|k| e.is_a?(k)} }
   end
 
-  def recursive_inject_parent(results=[], &block)
+  def recursive_inject_parent(results = [], &block)
     if !parent.nil?
       if block.call(parent)
         results << parent
@@ -78,32 +78,32 @@ def recursive_inject_parent(results=[], &block)
     return results
   end
 
-  def recursive_select_parent(results=[], klass)
+  def recursive_select_parent(results = [], klass)
     return recursive_inject_parent(results) { |e| e.is_a?(klass) }
   end
 
   # Monkeypatch Treetop::Runtime::SyntaxNode's inspect method to skip
   # any Whitespace or SyntaxNodes with no children.
-  def _inspect(indent="")
+  def _inspect(indent = "")
     em = extension_modules
-    interesting_methods = methods-[em.last ? em.last.methods : nil]-self.class.instance_methods
+    interesting_methods = methods - [em.last ? em.last.methods : nil] - self.class.instance_methods
     im = interesting_methods.size > 0 ? " (#{interesting_methods.join(",")})" : ""
     tv = text_value
     tv = "...#{tv[-20..-1]}" if tv.size > 20
 
     indent +
     self.class.to_s.sub(/.*:/, '') +
-      em.map{|m| "+"+m.to_s.sub(/.*:/, '')}*"" +
+      em.map{|m| "+" + m.to_s.sub(/.*:/, '')} * "" +
       " offset=#{interval.first}" +
       ", #{tv.inspect}" +
       im +
       (elements && elements.size > 0 ?
         ":" +
-          (elements.select { |e| !e.is_a?(LogStash::Config::AST::Whitespace) && e.elements && e.elements.size > 0 }||[]).map{|e|
+          (elements.select { |e| !e.is_a?(LogStash::Config::AST::Whitespace) && e.elements && e.elements.size > 0 } || []).map{|e|
       begin
-        "\n"+e.inspect(indent+"  ")
+        "\n" + e.inspect(indent + "  ")
       rescue  # Defend against inspect not taking a parameter
-        "\n"+indent+" "+e.inspect
+        "\n" + indent + " " + e.inspect
       end
           }.join("") :
         ""
diff --git a/logstash-core/lib/logstash/config/config_ast.rb b/logstash-core/lib/logstash/config/config_ast.rb
index f011fac8515..6773f0e4768 100644
--- a/logstash-core/lib/logstash/config/config_ast.rb
+++ b/logstash-core/lib/logstash/config/config_ast.rb
@@ -561,26 +561,26 @@ class SelectorElement < Node; end
 # Monkeypatch Treetop::Runtime::SyntaxNode's inspect method to skip
 # any Whitespace or SyntaxNodes with no children.
 class Treetop::Runtime::SyntaxNode
-  def _inspect(indent="")
+  def _inspect(indent = "")
     em = extension_modules
-    interesting_methods = methods-[em.last ? em.last.methods : nil]-self.class.instance_methods
+    interesting_methods = methods - [em.last ? em.last.methods : nil] - self.class.instance_methods
     im = interesting_methods.size > 0 ? " (#{interesting_methods.join(",")})" : ""
     tv = text_value
     tv = "...#{tv[-20..-1]}" if tv.size > 20
 
     indent +
     self.class.to_s.sub(/.*:/, '') +
-      em.map{|m| "+"+m.to_s.sub(/.*:/, '')}*"" +
+      em.map{|m| "+" + m.to_s.sub(/.*:/, '')} * "" +
       " offset=#{interval.first}" +
       ", #{tv.inspect}" +
       im +
       (elements && elements.size > 0 ?
         ":" +
-          (elements.select { |e| !e.is_a?(LogStash::Config::AST::Whitespace) && e.elements && e.elements.size > 0 }||[]).map{|e|
+          (elements.select { |e| !e.is_a?(LogStash::Config::AST::Whitespace) && e.elements && e.elements.size > 0 } || []).map{|e|
       begin
-        "\n"+e.inspect(indent+"  ")
+        "\n" + e.inspect(indent + "  ")
       rescue  # Defend against inspect not taking a parameter
-        "\n"+indent+" "+e.inspect
+        "\n" + indent + " " + e.inspect
       end
           }.join("") :
         ""
diff --git a/logstash-core/lib/logstash/config/grammar.rb b/logstash-core/lib/logstash/config/grammar.rb
index 6ee61e4e23b..f87b16fb621 100644
--- a/logstash-core/lib/logstash/config/grammar.rb
+++ b/logstash-core/lib/logstash/config/grammar.rb
@@ -222,12 +222,12 @@ def _nt_cs
       i1 = index
       r2 = _nt_comment
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r1 = r2
       else
         r3 = _nt_whitespace
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r1 = r3
         else
           @index = i1
@@ -404,12 +404,12 @@ def _nt_branch_or_plugin
     i0 = index
     r1 = _nt_branch
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_plugin
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -442,7 +442,7 @@ def _nt_plugin_type
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       if (match_len = has_terminal?("filter", false, index))
@@ -453,7 +453,7 @@ def _nt_plugin_type
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         if (match_len = has_terminal?("output", false, index))
@@ -464,7 +464,7 @@ def _nt_plugin_type
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           @index = i0
@@ -735,12 +735,12 @@ def _nt_name
       r1 = instantiate_node(LogStash::Config::AST::Name, input, i1...index, s1)
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r3 = _nt_string
       if r3
-        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
         r0 = r3
       else
         @index = i0
@@ -834,32 +834,32 @@ def _nt_value
     i0 = index
     r1 = _nt_plugin
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_bareword
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_string
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_number
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_array
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_hash
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -890,27 +890,27 @@ def _nt_array_value
     i0 = index
     r1 = _nt_bareword
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_string
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_number
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_hash
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               @index = i0
@@ -1024,7 +1024,7 @@ def _nt_double_quoted_string
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1064,7 +1064,7 @@ def _nt_double_quoted_string
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1141,7 +1141,7 @@ def _nt_single_quoted_string
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1181,7 +1181,7 @@ def _nt_single_quoted_string
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1234,12 +1234,12 @@ def _nt_string
     i0 = index
     r1 = _nt_double_quoted_string
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_single_quoted_string
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -1290,7 +1290,7 @@ def _nt_regexp
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1330,7 +1330,7 @@ def _nt_regexp
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1791,17 +1791,17 @@ def _nt_hashentry
     i1 = index
     r2 = _nt_number
     if r2
-      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+      r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
       r1 = r2
     else
       r3 = _nt_bareword
       if r3
-        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
         r1 = r3
       else
         r4 = _nt_string
         if r4
-          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
           r1 = r4
         else
           @index = i1
@@ -2467,43 +2467,43 @@ def _nt_expression
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Config::AST::Expression)
     else
       r7 = _nt_negative_expression
       if r7
-        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
+        r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
         r0 = r7
         r0.extend(LogStash::Config::AST::Expression)
       else
         r8 = _nt_in_expression
         if r8
-          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
+          r8 = SyntaxNode.new(input, (index - 1)...index) if r8 == true
           r0 = r8
           r0.extend(LogStash::Config::AST::Expression)
         else
           r9 = _nt_not_in_expression
           if r9
-            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
+            r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
             r0 = r9
             r0.extend(LogStash::Config::AST::Expression)
           else
             r10 = _nt_compare_expression
             if r10
-              r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
+              r10 = SyntaxNode.new(input, (index - 1)...index) if r10 == true
               r0 = r10
               r0.extend(LogStash::Config::AST::Expression)
             else
               r11 = _nt_regexp_expression
               if r11
-                r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
+                r11 = SyntaxNode.new(input, (index - 1)...index) if r11 == true
                 r0 = r11
                 r0.extend(LogStash::Config::AST::Expression)
               else
                 r12 = _nt_rvalue
                 if r12
-                  r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
+                  r12 = SyntaxNode.new(input, (index - 1)...index) if r12 == true
                   r0 = r12
                   r0.extend(LogStash::Config::AST::Expression)
                 else
@@ -2615,7 +2615,7 @@ def _nt_negative_expression
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Config::AST::NegativeExpression)
     else
@@ -2644,7 +2644,7 @@ def _nt_negative_expression
         r9 = nil
       end
       if r9
-        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
+        r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
         r0 = r9
         r0.extend(LogStash::Config::AST::NegativeExpression)
       else
@@ -2879,32 +2879,32 @@ def _nt_rvalue
     i0 = index
     r1 = _nt_string
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_number
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_selector
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_method_call
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_regexp
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -3179,7 +3179,7 @@ def _nt_compare_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Config::AST::ComparisonOperator)
     else
@@ -3191,7 +3191,7 @@ def _nt_compare_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Config::AST::ComparisonOperator)
       else
@@ -3203,7 +3203,7 @@ def _nt_compare_operator
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Config::AST::ComparisonOperator)
         else
@@ -3215,7 +3215,7 @@ def _nt_compare_operator
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Config::AST::ComparisonOperator)
           else
@@ -3227,7 +3227,7 @@ def _nt_compare_operator
               r5 = nil
             end
             if r5
-              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
               r0 = r5
               r0.extend(LogStash::Config::AST::ComparisonOperator)
             else
@@ -3239,7 +3239,7 @@ def _nt_compare_operator
                 r6 = nil
               end
               if r6
-                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
                 r0 = r6
                 r0.extend(LogStash::Config::AST::ComparisonOperator)
               else
@@ -3302,12 +3302,12 @@ def _nt_regexp_expression
             i5 = index
             r6 = _nt_string
             if r6
-              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
+              r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
               r5 = r6
             else
               r7 = _nt_regexp
               if r7
-                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
+                r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
                 r5 = r7
               else
                 @index = i5
@@ -3352,7 +3352,7 @@ def _nt_regexp_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Config::AST::RegExpOperator)
     else
@@ -3364,7 +3364,7 @@ def _nt_regexp_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Config::AST::RegExpOperator)
       else
@@ -3398,7 +3398,7 @@ def _nt_boolean_operator
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Config::AST::BooleanOperator)
     else
@@ -3410,7 +3410,7 @@ def _nt_boolean_operator
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Config::AST::BooleanOperator)
       else
@@ -3422,7 +3422,7 @@ def _nt_boolean_operator
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Config::AST::BooleanOperator)
         else
@@ -3434,7 +3434,7 @@ def _nt_boolean_operator
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Config::AST::BooleanOperator)
           else
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index e034c9223eb..deea9717ba2 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -199,7 +199,7 @@ def milestone(m = nil)
     # @option opts [Boolean]      :list
     # @option opts [Object]       :default
     # @option opts [Boolean]      :required
-    def config(name, opts={})
+    def config(name, opts = {})
       @config ||= Hash.new
       # TODO(sissel): verify 'name' is of type String, Symbol, or Regexp
 
diff --git a/logstash-core/lib/logstash/dependency_report.rb b/logstash-core/lib/logstash/dependency_report.rb
index 7f827ec028c..83a54f4beeb 100644
--- a/logstash-core/lib/logstash/dependency_report.rb
+++ b/logstash-core/lib/logstash/dependency_report.rb
@@ -160,7 +160,7 @@ module SPDX
 
     module_function
     def map(value)
-      MAP_APACHE2[value] ||  MAP_ARTISTIC2[value] || MAP_BSD[value] ||  MAP_GPL2[value] || value
+      MAP_APACHE2[value] || MAP_ARTISTIC2[value] || MAP_BSD[value] || MAP_GPL2[value] || value
     end
   end
 end
diff --git a/logstash-core/lib/logstash/elasticsearch_client.rb b/logstash-core/lib/logstash/elasticsearch_client.rb
index 1fde69a8c0a..dd39b327920 100644
--- a/logstash-core/lib/logstash/elasticsearch_client.rb
+++ b/logstash-core/lib/logstash/elasticsearch_client.rb
@@ -28,7 +28,7 @@ class Response
     # to create a normalised response across different client IMPL
     attr_reader :status, :body, :headers
 
-    def initialize(status, body, headers={})
+    def initialize(status, body, headers = {})
       @status, @body, @headers = status, body, headers
       @body = body.force_encoding('UTF-8') if body.respond_to?(:force_encoding)
     end
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 3a26b1b255d..3aab0a87537 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -186,11 +186,11 @@ def test_jars_root(dir_name, package)
       ::File.join(dir_name, package, "test-jars")
     end
 
-    def load_runtime_jars!(dir_name="vendor", package="jar-dependencies")
+    def load_runtime_jars!(dir_name = "vendor", package = "jar-dependencies")
       load_jars!(::File.join(runtime_jars_root(dir_name, package), "*.jar"))
     end
 
-    def load_test_jars!(dir_name="vendor", package="jar-dependencies")
+    def load_test_jars!(dir_name = "vendor", package = "jar-dependencies")
       load_jars!(::File.join(test_jars_root(dir_name, package), "*.jar"))
     end
 
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 0465403a90e..0c2f4820fd7 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -68,7 +68,7 @@ def self.plugin_type
   end
 
   public
-  def initialize(params={})
+  def initialize(params = {})
     super
     @threadable = false
     @stop_called = Concurrent::AtomicBoolean.new(false)
diff --git a/logstash-core/lib/logstash/instrument/metric_store.rb b/logstash-core/lib/logstash/instrument/metric_store.rb
index f31b149a771..2fb5aa20d7a 100644
--- a/logstash-core/lib/logstash/instrument/metric_store.rb
+++ b/logstash-core/lib/logstash/instrument/metric_store.rb
@@ -313,7 +313,7 @@ def fetch_or_store_namespaces(namespaces_path)
         node = memo.compute_if_absent(current) { Concurrent::Map.new }
 
         unless node.kind_of?(Concurrent::Map)
-          raise NamespacesExpectedError, "Expecting a `Namespaces` but found class:  #{node.class.name} for namespaces_path: #{namespaces_path.first(index+1)}"
+          raise NamespacesExpectedError, "Expecting a `Namespaces` but found class:  #{node.class.name} for namespaces_path: #{namespaces_path.first(index + 1)}"
         end
 
         node
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
index f7f2fcfe191..13d4db7053f 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
@@ -44,7 +44,7 @@ class GarbageCollectorName
       def self.get(gc_name)
         if YOUNG_GC_NAMES.include?(gc_name)
           YOUNG
-        elsif(OLD_GC_NAMES.include?(gc_name))
+        elsif (OLD_GC_NAMES.include?(gc_name))
           OLD
         end
       end
@@ -139,7 +139,7 @@ def collect_jvm_metrics(data)
 
     def collect_heap_metrics(data)
       heap = aggregate_information_for(data["heap"].values)
-      heap[:used_percent] = (heap[:used_in_bytes] / heap[:max_in_bytes].to_f)*100.0
+      heap[:used_percent] = (heap[:used_in_bytes] / heap[:max_in_bytes].to_f) * 100.0
 
       heap.each_pair do |key, value|
         metric.gauge([:jvm, :memory, :heap], key, value.to_i)
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index b0542b5b6c5..96b039df2b8 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -53,7 +53,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @worker_observer = org.logstash.execution.WorkerObserver.new(process_events_namespace_metric,
                                                                  pipeline_events_namespace_metric)
 
-    @drain_queue =  settings.get_value("queue.drain") || settings.get("queue.type") == MEMORY
+    @drain_queue = settings.get_value("queue.drain") || settings.get("queue.type") == MEMORY
 
     @events_filtered = java.util.concurrent.atomic.LongAdder.new
     @events_consumed = java.util.concurrent.atomic.LongAdder.new
diff --git a/logstash-core/lib/logstash/json.rb b/logstash-core/lib/logstash/json.rb
index b5d137f6cb6..905c9cc1280 100644
--- a/logstash-core/lib/logstash/json.rb
+++ b/logstash-core/lib/logstash/json.rb
@@ -31,7 +31,7 @@ def jruby_load(data, options = {})
       raise LogStash::Json::ParserError.new(e.message)
     end
 
-    def jruby_dump(o, options={})
+    def jruby_dump(o, options = {})
       # TODO [guyboertje] remove these comments in 5.0
       # test for enumerable here to work around an omission in JrJackson::Json.dump to
       # also look for Java::JavaUtil::ArrayList, see TODO submit issue
diff --git a/logstash-core/lib/logstash/modules/kibana_client.rb b/logstash-core/lib/logstash/modules/kibana_client.rb
index 812dc3264ed..3f94dd4459a 100644
--- a/logstash-core/lib/logstash/modules/kibana_client.rb
+++ b/logstash-core/lib/logstash/modules/kibana_client.rb
@@ -29,7 +29,7 @@ class Response
     # to create a custom response with body as an Object (Hash or Array)
     attr_reader :status, :body, :headers
 
-    def initialize(status, body, headers={})
+    def initialize(status, body, headers = {})
       @status, @body, @headers = status, body, headers
       @body = body.is_a?(String) ? LogStash::Json.load(body) : body
     end
diff --git a/logstash-core/lib/logstash/modules/resource_base.rb b/logstash-core/lib/logstash/modules/resource_base.rb
index c680902fab4..5e351b06409 100644
--- a/logstash-core/lib/logstash/modules/resource_base.rb
+++ b/logstash-core/lib/logstash/modules/resource_base.rb
@@ -23,7 +23,7 @@ module LogStash module Modules module ResourceBase
 
   def initialize(base, content_type, content_path, content = nil, content_id = nil)
     @base, @content_type, @content_path = base, content_type, content_path
-    @content_id =  content_id || ::File.basename(@content_path, ".*")
+    @content_id = content_id || ::File.basename(@content_path, ".*")
     # content at this time will be a JSON string
     @content = content
     if !@content.nil?
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 750fb626df3..13d10f92ca1 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -39,7 +39,7 @@ class LogStash::Outputs::Base < LogStash::Plugin
   config :workers, :type => :number, :default => 1
 
   # Set or return concurrency type
-  def self.concurrency(type=nil)
+  def self.concurrency(type = nil)
     if type
       @concurrency = type
     else
@@ -59,7 +59,7 @@ def self.threadsafe?
 
   # Deprecated: Favor `concurrency :single`
   # Remove in Logstash 6.0.0
-  def self.declare_workers_not_supported!(message=nil)
+  def self.declare_workers_not_supported!(message = nil)
     concurrency :single
   end
 
@@ -70,7 +70,7 @@ def self.plugin_type
   end
 
   public
-  def initialize(params={})
+  def initialize(params = {})
     super
     config_init(@params)
 
@@ -105,7 +105,7 @@ def multi_receive(events)
     end
   end
 
-  def workers_not_supported(message=nil)
+  def workers_not_supported(message = nil)
     raise "This plugin (#{self.class.name}) is using the obsolete '#workers_not_supported' method. If you installed this plugin specifically on this Logstash version, it is not compatible. If you are a plugin author, please see https://www.elastic.co/guide/en/logstash/current/_how_to_write_a_logstash_output_plugin.html for more info"
   end
 
diff --git a/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb b/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
index b01049e4cb9..3819f6a06ff 100644
--- a/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
+++ b/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
@@ -53,7 +53,7 @@ class UDPSocket
 
 if LogStash::Environment.windows?
   # make sure all strings pulled out of ENV are UTF8
-  class <<ENV
+  class << ENV
     alias_method :orig_getter, :[]
     def [](key)
       case value = orig_getter(key)
diff --git a/logstash-core/lib/logstash/patches/puma.rb b/logstash-core/lib/logstash/patches/puma.rb
index bc4e1a2a967..767131e14f8 100644
--- a/logstash-core/lib/logstash/patches/puma.rb
+++ b/logstash-core/lib/logstash/patches/puma.rb
@@ -88,7 +88,7 @@ def format(str)
     # and +text+ additional info
     # @version 5.0.0
     # @overload
-    def connection_error(error, req, text="HTTP connection error")
+    def connection_error(error, req, text = "HTTP connection error")
       @logger.debug(text, { error: error, req: req, backtrace: error&.backtrace }) if @logger.debug?
     end
 
@@ -113,7 +113,7 @@ def ssl_error(error, ssl_socket)
     # +error+ an exception object, +req+ the request,
     # and +text+ additional info
     # @overload
-    def unknown_error(error, req=nil, text="Unknown error")
+    def unknown_error(error, req = nil, text = "Unknown error")
       details = { error: error, req: req }
       details[:backtrace] = error.backtrace if @logger.debug?
       @logger.error(text, details)
@@ -123,7 +123,7 @@ def unknown_error(error, req=nil, text="Unknown error")
     # +error+ an exception object, +req+ the request,
     # and +text+ additional info
     # @overload
-    def debug_error(error, req=nil, text="")
+    def debug_error(error, req = nil, text = "")
       @logger.debug(text, { error: error, req: req, backtrace: error&.backtrace }) if @logger.debug?
     end
   end
diff --git a/logstash-core/lib/logstash/pipelines_registry.rb b/logstash-core/lib/logstash/pipelines_registry.rb
index 9361e95ace7..3810201e8bb 100644
--- a/logstash-core/lib/logstash/pipelines_registry.rb
+++ b/logstash-core/lib/logstash/pipelines_registry.rb
@@ -290,7 +290,7 @@ def non_running_pipelines
 
     # @return [Hash{String=>Pipeline}]
     def running_user_defined_pipelines
-      select_pipelines { |state | !state.terminated? && !state.pipeline.system? }
+      select_pipelines { |state| !state.terminated? && !state.pipeline.system? }
     end
 
     private
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 8a73ecdef9d..107a1319b95 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -65,7 +65,7 @@ def eql?(other)
     self.class.name == other.class.name && @params == other.params
   end
 
-  def initialize(params={})
+  def initialize(params = {})
     @logger = self.logger
     @deprecation_logger = self.deprecation_logger
     # need to access settings statically because plugins are initialized in config_ast with no context.
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index ee8436e91fe..8effd286516 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -305,7 +305,7 @@ def execute
       logger.warn("--config.debug was specified, but log.level was not set to \'debug\'! No config info will be logged.")
     end
 
-    while(msg = LogStash::DeprecationMessage.instance.shift)
+    while (msg = LogStash::DeprecationMessage.instance.shift)
       deprecation_logger.deprecated msg
     end
 
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 47fd481f88e..edcaf6cd4e4 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -185,7 +185,7 @@ def reset
       @settings.values.each(&:reset)
     end
 
-    def from_yaml(yaml_path, file_name="logstash.yml")
+    def from_yaml(yaml_path, file_name = "logstash.yml")
       settings = read_yaml(::File.join(yaml_path, file_name))
       self.merge(deep_replace(flatten_hash(settings)), true)
       self
@@ -223,7 +223,7 @@ def read_yaml(path)
       YAML.safe_load(IO.read(path)) || {}
     end
 
-    def flatten_hash(h, f="", g={})
+    def flatten_hash(h, f = "", g = {})
       return g.update({ f => h }) unless h.is_a? Hash
       if f.empty?
         h.each { |k, r| flatten_hash(r, k, g) }
@@ -239,7 +239,7 @@ class Setting
 
     attr_reader :name, :default
 
-    def initialize(name, klass, default=nil, strict=true, &validator_proc)
+    def initialize(name, klass, default = nil, strict = true, &validator_proc)
       @name = name
       unless klass.is_a?(Class)
         raise ArgumentError.new("Setting \"#{@name}\" must be initialized with a class (received #{klass})")
@@ -343,7 +343,7 @@ def validate(input)
     end
 
     class Coercible < Setting
-      def initialize(name, klass, default=nil, strict=true, &validator_proc)
+      def initialize(name, klass, default = nil, strict = true, &validator_proc)
         @name = name
         unless klass.is_a?(Class)
           raise ArgumentError.new("Setting \"#{@name}\" must be initialized with a class (received #{klass})")
@@ -377,7 +377,7 @@ def coerce(value)
     ### Specific settings #####
 
     class Boolean < Coercible
-      def initialize(name, default, strict=true, &validator_proc)
+      def initialize(name, default, strict = true, &validator_proc)
         super(name, Object, default, strict, &validator_proc)
       end
 
@@ -394,7 +394,7 @@ def coerce(value)
     end
 
     class Numeric < Coercible
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, ::Numeric, default, strict)
       end
 
@@ -414,7 +414,7 @@ def coerce(v)
     end
 
     class Integer < Coercible
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, ::Integer, default, strict)
       end
 
@@ -432,7 +432,7 @@ def coerce(value)
     end
 
     class PositiveInteger < Integer
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, default, strict) do |v|
           if v > 0
             true
@@ -446,7 +446,7 @@ def initialize(name, default=nil, strict=true)
     class Port < Integer
       VALID_PORT_RANGE = 1..65535
 
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, default, strict) { |value| valid?(value) }
       end
 
@@ -458,8 +458,8 @@ def valid?(port)
     class PortRange < Coercible
       PORT_SEPARATOR = "-"
 
-      def initialize(name, default=nil, strict=true)
-        super(name, ::Range, default, strict=true) { |value| valid?(value) }
+      def initialize(name, default = nil, strict = true)
+        super(name, ::Range, default, strict = true) { |value| valid?(value) }
       end
 
       def valid?(range)
@@ -493,7 +493,7 @@ def validate(value)
     end
 
     class Validator < Setting
-      def initialize(name, default=nil, strict=true, validator_class=nil)
+      def initialize(name, default = nil, strict = true, validator_class = nil)
         @validator_class = validator_class
         super(name, ::Object, default, strict)
       end
@@ -504,7 +504,7 @@ def validate(value)
     end
 
     class String < Setting
-      def initialize(name, default=nil, strict=true, possible_strings=[])
+      def initialize(name, default = nil, strict = true, possible_strings = [])
         @possible_strings = possible_strings
         super(name, ::String, default, strict)
       end
@@ -525,7 +525,7 @@ def validate(value)
     end
 
     class Password < Coercible
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, LogStash::Util::Password, default, strict)
       end
 
@@ -592,7 +592,7 @@ def build_password_policies
     # then these options in the config file or command line will be all valid: "foo", true, false, "true", "false"
     #
     class CoercibleString < Coercible
-      def initialize(name, default=nil, strict=true, possible_strings=[], &validator_proc)
+      def initialize(name, default = nil, strict = true, possible_strings = [], &validator_proc)
         @possible_strings = possible_strings
         super(name, Object, default, strict, &validator_proc)
       end
@@ -610,7 +610,7 @@ def validate(value)
     end
 
     class ExistingFilePath < Setting
-      def initialize(name, default=nil, strict=true)
+      def initialize(name, default = nil, strict = true)
         super(name, ::String, default, strict) do |file_path|
           if !::File.exist?(file_path)
             raise ::ArgumentError.new("File \"#{file_path}\" must exist but was not found.")
@@ -622,7 +622,7 @@ def initialize(name, default=nil, strict=true)
     end
 
     class WritableDirectory < Setting
-      def initialize(name, default=nil, strict=false)
+      def initialize(name, default = nil, strict = false)
         super(name, ::String, default, strict)
       end
 
@@ -667,8 +667,8 @@ def value
     end
 
     class Bytes < Coercible
-      def initialize(name, default=nil, strict=true)
-        super(name, ::Integer, default, strict=true) { |value| valid?(value) }
+      def initialize(name, default = nil, strict = true)
+        super(name, ::Integer, default, strict = true) { |value| valid?(value) }
       end
 
       def valid?(value)
@@ -696,7 +696,7 @@ def validate(value)
     class TimeValue < Coercible
       include LogStash::Util::Loggable
 
-      def initialize(name, default, strict=true, &validator_proc)
+      def initialize(name, default, strict = true, &validator_proc)
         super(name, Util::TimeValue, default, strict, &validator_proc)
       end
 
@@ -714,7 +714,7 @@ def coerce(value)
     end
 
     class ArrayCoercible < Coercible
-      def initialize(name, klass, default, strict=true, &validator_proc)
+      def initialize(name, klass, default, strict = true, &validator_proc)
         @element_class = klass
         super(name, ::Array, default, strict, &validator_proc)
       end
@@ -742,7 +742,7 @@ def validate(input)
     class SplittableStringArray < ArrayCoercible
       DEFAULT_TOKEN = ","
 
-      def initialize(name, klass, default, strict=true, tokenizer = DEFAULT_TOKEN, &validator_proc)
+      def initialize(name, klass, default, strict = true, tokenizer = DEFAULT_TOKEN, &validator_proc)
         @element_class = klass
         @token = tokenizer
         super(name, klass, default, strict, &validator_proc)
@@ -760,7 +760,7 @@ def coerce(value)
     end
 
     class StringArray < ArrayCoercible
-      def initialize(name, default, strict=true, possible_strings=[], &validator_proc)
+      def initialize(name, default, strict = true, possible_strings = [], &validator_proc)
         @possible_strings = possible_strings
         super(name, ::String, default, strict, &validator_proc)
       end
diff --git a/logstash-core/lib/logstash/util/safe_uri.rb b/logstash-core/lib/logstash/util/safe_uri.rb
index d568bba3183..4dae8fc173c 100644
--- a/logstash-core/lib/logstash/util/safe_uri.rb
+++ b/logstash-core/lib/logstash/util/safe_uri.rb
@@ -22,7 +22,7 @@
 # logged, you don't accidentally print the password itself.
 class LogStash::Util::SafeURI
   PASS_PLACEHOLDER = "xxxxxx".freeze
-  HOSTNAME_PORT_REGEX=/\A(?<hostname>([A-Za-z0-9\.\-]+)|\[[0-9A-Fa-f\:]+\])(:(?<port>\d+))?\Z/
+  HOSTNAME_PORT_REGEX = /\A(?<hostname>([A-Za-z0-9\.\-]+)|\[[0-9A-Fa-f\:]+\])(:(?<port>\d+))?\Z/
 
   extend Forwardable
 
diff --git a/logstash-core/lib/logstash/util/settings_helper.rb b/logstash-core/lib/logstash/util/settings_helper.rb
index b319d84b920..6925a38f53f 100644
--- a/logstash-core/lib/logstash/util/settings_helper.rb
+++ b/logstash-core/lib/logstash/util/settings_helper.rb
@@ -75,8 +75,8 @@ def self.from_yaml(args)
   # 3. check if the LS_SETTINGS_DIR environment variable is set
   # 4. return nil if not found
   def self.fetch_settings_path(cli_args)
-    if i=cli_args.find_index("--path.settings")
-      cli_args[i+1]
+    if i = cli_args.find_index("--path.settings")
+      cli_args[i + 1]
     elsif settings_arg = cli_args.find {|v| v.match(/--path.settings=/)}
       match = settings_arg.match(/--path.settings=(.*)/)
       match[1]
diff --git a/logstash-core/lib/logstash/util/thread_dump.rb b/logstash-core/lib/logstash/util/thread_dump.rb
index 5a994dd6e5a..85977978caf 100644
--- a/logstash-core/lib/logstash/util/thread_dump.rb
+++ b/logstash-core/lib/logstash/util/thread_dump.rb
@@ -26,15 +26,15 @@ class ThreadDump
 
       attr_reader :top_count, :ignore, :dump
 
-      def initialize(options={})
-        @options   = options
+      def initialize(options = {})
+        @options = options
         @dump = options.fetch(:dump, ThreadsReport.generate({}))
         @top_count = options.fetch(:threads, THREADS_COUNT_DEFAULT)
         @ignore    = options.fetch(:ignore_idle_threads, IGNORE_IDLE_THREADS_DEFAULT)
       end
 
       def each(&block)
-        i=0
+        i = 0
         dump.each do |hash|
           thread_name = hash["thread.name"]
           break if i >= top_count
diff --git a/logstash-core/lib/logstash/util/unicode_trimmer.rb b/logstash-core/lib/logstash/util/unicode_trimmer.rb
index 9169ecccac9..ae973d1ff10 100644
--- a/logstash-core/lib/logstash/util/unicode_trimmer.rb
+++ b/logstash-core/lib/logstash/util/unicode_trimmer.rb
@@ -39,7 +39,7 @@ def self.pre_shorten(orig_str, desired_bytes)
     # Try to do an initial shortening based on the average char size
     # The goal here is to get us somewhere above or below the boundary quickly
     orig_extra_bytes = orig_bs - desired_bytes
-    pre_shorten_by = (orig_extra_bytes  / avg_size).to_i
+    pre_shorten_by = (orig_extra_bytes / avg_size).to_i
     orig_str.slice(0, orig_len - pre_shorten_by)
   end
 
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 37dfb814eaa..3caac63f80a 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -127,7 +127,7 @@ def self.required_setting_with_changing_default(settings, name, trigger, future_
     # @option :auth_basic [Hash{Symbol=>Object}]
     #             :username [String]
     #             :password [LogStash::Util::Password]
-    def initialize(logger, agent, options={})
+    def initialize(logger, agent, options = {})
       @logger = logger
       @agent = agent
       @http_host = options[:http_host] || DEFAULT_HOST
@@ -181,7 +181,7 @@ def address
       "#{http_host}:#{@port}"
     end
 
-    def stop(options={})
+    def stop(options = {})
       @mutex.synchronize do
         @running.make_false
         @server.stop(true) if @server
@@ -213,7 +213,7 @@ def create_server_thread
           rescue Errno::EADDRINUSE
             if http_ports.count == 1
               raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port", :port => http_ports.first))
-            elsif idx == http_ports.count-1
+            elsif idx == http_ports.count - 1
               raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port_in_range", :http_ports => http_ports))
             end
           end
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 7efb61e85a0..55359d2617a 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -393,7 +393,7 @@
       let(:original_config_output) { Stud::Temporary.pathname }
       let(:new_config_output) { Stud::Temporary.pathname }
 
-      let(:config_file_txt) { "input { generator { count => #{initial_generator_threshold*2} } } output { file { path => '#{original_config_output}'} }" }
+      let(:config_file_txt) { "input { generator { count => #{initial_generator_threshold * 2} } } output { file { path => '#{original_config_output}'} }" }
 
       let(:agent_args) do
         {
diff --git a/logstash-core/spec/logstash/api/commands/node_spec.rb b/logstash-core/spec/logstash/api/commands/node_spec.rb
index 5e7d81ed62f..d5e1c6ef617 100644
--- a/logstash-core/spec/logstash/api/commands/node_spec.rb
+++ b/logstash-core/spec/logstash/api/commands/node_spec.rb
@@ -23,19 +23,19 @@
   let(:report_method) { :all }
   let(:pipeline_id) { nil }
   let(:opts) { {} }
-  let(:mocked_vertex) {{:config_name=>"elasticsearch",
-                       :plugin_type=>"output",
-                       :meta=>{
-                         :source=>{
-                           :protocol=>"str",
-                           :id=>"pipeline",
-                           :line=>1,
-                           :column=>64
+  let(:mocked_vertex) {{:config_name => "elasticsearch",
+                       :plugin_type => "output",
+                       :meta => {
+                         :source => {
+                           :protocol => "str",
+                           :id => "pipeline",
+                           :line => 1,
+                           :column => 64
                          }
                        },
-                       :id=>"2d2270426a2e8d7976b972b6a5318624331fa0d39fa3f903d2f3490e58a7d25a",
-                       :explicit_id=>false,
-                       :type=>"plugin"}
+                       :id => "2d2270426a2e8d7976b972b6a5318624331fa0d39fa3f903d2f3490e58a7d25a",
+                       :explicit_id => false,
+                       :type => "plugin"}
                   }
   let(:api_service) { LogStash::Api::Service.new(@agent) }
   subject(:report) do
@@ -108,7 +108,7 @@
   describe "#pipeline?opts" do
     let(:report_method) { :pipeline }
     let(:pipeline_id) { "main" }
-    let(:opts) { { :graph=>true } }
+    let(:opts) { { :graph => true } }
     # Enforce just the structure
     it "check keys" do
       expect(report.keys).to include(
diff --git a/logstash-core/spec/logstash/api/modules/node_spec.rb b/logstash-core/spec/logstash/api/modules/node_spec.rb
index a514ed660ba..a1f97217dd6 100644
--- a/logstash-core/spec/logstash/api/modules/node_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/node_spec.rb
@@ -165,7 +165,7 @@
         },
         "gc_collectors" => Array
         },
-        "hot_threads"=> {
+        "hot_threads" => {
           "time" => String,
           "busiest_threads" => Numeric,
           "threads" => Array
diff --git a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
index a41f7b40b72..1ee057a3390 100644
--- a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
@@ -29,11 +29,11 @@
 
   # DSL describing response structure
   root_structure = {
-    "jvm"=>{
+    "jvm" => {
       "uptime_in_millis" => Numeric,
-      "threads"=>{
-        "count"=>Numeric,
-        "peak_count"=>Numeric
+      "threads" => {
+        "count" => Numeric,
+        "peak_count" => Numeric
       },
       "gc" => {
         "collectors" => {
@@ -76,16 +76,16 @@
         }
       }
     },
-    "process"=>{
-      "peak_open_file_descriptors"=>Numeric,
-      "max_file_descriptors"=>Numeric,
-      "open_file_descriptors"=>Numeric,
-      "mem"=>{
-        "total_virtual_in_bytes"=>Numeric
+    "process" => {
+      "peak_open_file_descriptors" => Numeric,
+      "max_file_descriptors" => Numeric,
+      "open_file_descriptors" => Numeric,
+      "mem" => {
+        "total_virtual_in_bytes" => Numeric
       },
-      "cpu"=>{
-        "total_in_millis"=>Numeric,
-        "percent"=>Numeric,
+      "cpu" => {
+        "total_in_millis" => Numeric,
+        "percent" => Numeric,
         # load_average is not supported on Windows, set it below
       }
    },
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 526e04e8b30..2932b338cad 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -339,7 +339,7 @@ def rand_meta
                         "integer" => 7,
                         "quoted-key-string" => "nested-quoted-key-string",
                         "quoted-key-integer" => 31,
-                        "deep"    => { # <-- This is deeper nested hash!
+                        "deep" => { # <-- This is deeper nested hash!
                             "string"  => "deeply-nested-string",
                             "integer" => 127,
                             "quoted-key-string" => "deeply-nested-quoted-key-string",
diff --git a/logstash-core/spec/logstash/config/source/local_spec.rb b/logstash-core/spec/logstash/config/source/local_spec.rb
index f44b35ab5a1..4aa382369e9 100644
--- a/logstash-core/spec/logstash/config/source/local_spec.rb
+++ b/logstash-core/spec/logstash/config/source/local_spec.rb
@@ -45,7 +45,7 @@
   context "no configs" do
     context "in the directory" do
       let(:directory) do
-        p =  Stud::Temporary.pathname
+        p = Stud::Temporary.pathname
         FileUtils.mkdir_p(p)
         p
       end
@@ -57,7 +57,7 @@
 
     context "target file doesn't exist" do
       let(:directory) do
-        p =  Stud::Temporary.pathname
+        p = Stud::Temporary.pathname
         FileUtils.mkdir_p(p)
         ::File.join(p, "ls.conf")
       end
diff --git a/logstash-core/spec/logstash/instrument/metric_store_spec.rb b/logstash-core/spec/logstash/instrument/metric_store_spec.rb
index f7b8d1c8d6b..144e4e6c811 100644
--- a/logstash-core/spec/logstash/instrument/metric_store_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_store_spec.rb
@@ -86,28 +86,28 @@
       context "when the path exist" do
         it "retrieves end of of a branch" do
           metrics = subject.get(:node, :sashimi, :pipelines, :pipeline01, :plugins, :"logstash-output-elasticsearch")
-          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => anything)))))))
+          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => anything)))))))
         end
 
         it "retrieves branch" do
           metrics = subject.get(:node, :sashimi, :pipelines, :pipeline01)
-          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything)))))
+          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything)))))
         end
 
         it "allow to retrieve a specific metrics" do
           metrics = subject.get(:node, :sashimi, :pipelines, :pipeline01, :plugins, :"logstash-output-elasticsearch", :event_in)
-          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => a_hash_including(:event_in => be_kind_of(LogStash::Instrument::MetricType::Counter)))))))))
+          expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => a_hash_including(:event_in => be_kind_of(LogStash::Instrument::MetricType::Counter)))))))))
         end
 
         context "with filtered keys" do
           it "allows to retrieve multiple keys on the same level" do
             metrics = subject.get(:node, :sashimi, :pipelines, :"pipeline01,pipeline02")
-            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
+            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
           end
 
           it "supports space in the keys" do
             metrics = subject.get(:node, :sashimi, :pipelines, :"pipeline01, pipeline02 ")
-            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
+            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
           end
 
           it "retrieves only the requested keys" do
@@ -132,28 +132,28 @@
 
           it "retrieves end of of a branch" do
             metrics = subject.get_with_path("node/sashimi/pipelines/pipeline01/plugins/logstash-output-elasticsearch")
-            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => anything)))))))
+            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => anything)))))))
           end
 
           it "retrieves branch" do
             metrics = subject.get_with_path("node/sashimi/pipelines/pipeline01")
-            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything)))))
+            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything)))))
           end
 
           it "allow to retrieve a specific metrics" do
             metrics = subject.get_with_path("node/sashimi/pipelines/pipeline01/plugins/logstash-output-elasticsearch/event_in")
-            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => a_hash_including(:event_in => be_kind_of(LogStash::Instrument::MetricType::Counter)))))))))
+            expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => a_hash_including(:plugins => a_hash_including(:"logstash-output-elasticsearch" => a_hash_including(:event_in => be_kind_of(LogStash::Instrument::MetricType::Counter)))))))))
           end
 
           context "with filtered keys" do
             it "allows to retrieve multiple keys on the same level" do
               metrics = subject.get_with_path("node/sashimi/pipelines/pipeline01,pipeline02/plugins/logstash-output-elasticsearch/event_in")
-              expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
+              expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
             end
 
             it "supports space in the keys" do
               metrics = subject.get_with_path("node/sashimi/pipelines/pipeline01, pipeline02 /plugins/logstash-output-elasticsearch/event_in")
-              expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines  => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
+              expect(metrics).to match(a_hash_including(:node => a_hash_including(:sashimi => a_hash_including(:pipelines => a_hash_including(:pipeline01 => anything, :pipeline02 => anything)))))
             end
 
             it "retrieves only the requested keys" do
diff --git a/logstash-core/spec/logstash/instrument/periodic_poller/cgroup_spec.rb b/logstash-core/spec/logstash/instrument/periodic_poller/cgroup_spec.rb
index 0806ec59d1f..2873b3a9b29 100644
--- a/logstash-core/spec/logstash/instrument/periodic_poller/cgroup_spec.rb
+++ b/logstash-core/spec/logstash/instrument/periodic_poller/cgroup_spec.rb
@@ -191,7 +191,7 @@ module LogStash module Instrument module PeriodicPoller
         it "fills in the hash with minus one" do
           expect(cpuacct_resource.base_path).to eq("/sys/fs/cgroup/cpuacct")
           expect(cpuacct_resource.offset_path).to eq("/bar")
-          expect(cpuacct_resource.to_hash).to eq({:control_group=>"/bar", :usage_nanos=>-1})
+          expect(cpuacct_resource.to_hash).to eq({:control_group => "/bar", :usage_nanos => -1})
         end
       end
     end
@@ -206,7 +206,7 @@ module LogStash module Instrument module PeriodicPoller
         it "fills in the hash with minus one" do
           expect(cpuacct_resource.base_path).to eq("/sys/fs/cgroup/cpuacct")
           expect(cpuacct_resource.offset_path).to eq("/quux")
-          expect(cpuacct_resource.to_hash).to eq({:control_group=>"/quux", :usage_nanos=>-1})
+          expect(cpuacct_resource.to_hash).to eq({:control_group => "/quux", :usage_nanos => -1})
         end
       end
     end
@@ -219,7 +219,7 @@ module LogStash module Instrument module PeriodicPoller
         it "fills in the hash with minus one" do
           expect(cpu_resource.base_path).to eq("/sys/fs/cgroup/cpu")
           expect(cpu_resource.offset_path).to eq("/bar")
-          expect(cpu_resource.to_hash).to eq({:cfs_period_micros=>-1, :cfs_quota_micros=>-1, :control_group=>"/bar", :stat=>{:number_of_elapsed_periods=>-1, :number_of_times_throttled=>-1, :time_throttled_nanos=>-1}})
+          expect(cpu_resource.to_hash).to eq({:cfs_period_micros => -1, :cfs_quota_micros => -1, :control_group => "/bar", :stat => {:number_of_elapsed_periods => -1, :number_of_times_throttled => -1, :time_throttled_nanos => -1}})
         end
       end
     end
@@ -235,7 +235,7 @@ module LogStash module Instrument module PeriodicPoller
         it "fills in the hash with minus one" do
           expect(cpu_resource.base_path).to eq("/sys/fs/cgroup/cpu")
           expect(cpu_resource.offset_path).to eq("/quux")
-          expect(cpu_resource.to_hash).to eq({:cfs_period_micros=>-1, :cfs_quota_micros=>-1, :control_group=>"/quux", :stat=>{:number_of_elapsed_periods=>-1, :number_of_times_throttled=>-1, :time_throttled_nanos=>-1}})
+          expect(cpu_resource.to_hash).to eq({:cfs_period_micros => -1, :cfs_quota_micros => -1, :control_group => "/quux", :stat => {:number_of_elapsed_periods => -1, :number_of_times_throttled => -1, :time_throttled_nanos => -1}})
         end
       end
     end
diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index a5320ded6d0..b1f3bfd5859 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -492,7 +492,7 @@ def flush(options)
           msg = "Defaulting pipeline worker threads to 1 because there are some filters that might not work with multiple worker threads"
           pipeline = mock_java_pipeline_from_string(test_config_with_filters)
           expect(pipeline.logger).to receive(:warn).with(msg,
-            hash_including({:count_was=>worker_thread_count, :filters=>["dummyfilter"]}))
+            hash_including({:count_was => worker_thread_count, :filters => ["dummyfilter"]}))
           pipeline.start
           expect(pipeline.worker_threads.size).to eq(safe_thread_count)
           pipeline.shutdown
@@ -505,7 +505,7 @@ def flush(options)
           msg = "Warning: Manual override - there are filters that might" +
                 " not work with multiple worker threads"
           pipeline = mock_java_pipeline_from_string(test_config_with_filters, pipeline_settings_obj)
-          expect(pipeline.logger).to receive(:warn).with(msg, hash_including({:worker_threads=> override_thread_count, :filters=>["dummyfilter"]}))
+          expect(pipeline.logger).to receive(:warn).with(msg, hash_including({:worker_threads => override_thread_count, :filters => ["dummyfilter"]}))
           pipeline.start
           expect(pipeline.worker_threads.size).to eq(override_thread_count)
           pipeline.shutdown
diff --git a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
index 647641e9fc7..df74dcc9fd7 100644
--- a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
+++ b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
@@ -236,7 +236,7 @@
       999999999,
       Random.rand(1_000_000_000)
     ].each do |excess_nanos|
-      context "with excess_nanos=`#{'%09d'% excess_nanos}`" do
+      context "with excess_nanos=`#{'%09d' % excess_nanos}`" do
         let(:epoch_seconds) { Time.now.to_i }
         let(:excess_nanos) {  }
 
diff --git a/logstash-core/spec/logstash/modules/scaffold_spec.rb b/logstash-core/spec/logstash/modules/scaffold_spec.rb
index aa6cb878dc8..a956bf20066 100644
--- a/logstash-core/spec/logstash/modules/scaffold_spec.rb
+++ b/logstash-core/spec/logstash/modules/scaffold_spec.rb
@@ -65,7 +65,7 @@
   let(:index_pattern_hash) do
     {
       "title" => "foo-*",
-      "timeFieldName" =>"time",
+      "timeFieldName" => "time",
       "fieldFormatMap" => "{some map}",
       "fields" => "[some array]"
     }
@@ -169,12 +169,12 @@
       test_object = resource2.content[3]
       expect(test_object.content_id).to eq("foo-d") #<- the panels can contain items from other folders
       expect(test_object.content_type).to eq("search")
-      expect(test_object.content_as_object).to eq("d"=>"search")
+      expect(test_object.content_as_object).to eq("d" => "search")
 
       test_object = resource2.content[4]
       expect(test_object.content_id).to eq("foo-e") # <- the visualization can contain items from the search folder
       expect(test_object.content_type).to eq("search")
-      expect(test_object.content_as_object).to eq("e"=>"search")
+      expect(test_object.content_as_object).to eq("e" => "search")
     end
   end
 
@@ -216,7 +216,7 @@
       test_module.with_settings(module_settings)
       test_module.import(LogStash::Modules::ElasticsearchImporter.new(client), LogStash::Modules::KibanaImporter.new(kbnclient))
       expect(paths).to eq(expected_paths)
-      expect(contents[0]).to eq({"changes"=>{"defaultIndex"=>"tester-*"}})
+      expect(contents[0]).to eq({"changes" => {"defaultIndex" => "tester-*"}})
       second_kbn_post = contents[1]
       expect(second_kbn_post[:version]).to eq("9.8.7-6")
       expect(second_kbn_post[:objects]).to be_a(Array)
diff --git a/logstash-core/spec/logstash/modules/settings_merger_spec.rb b/logstash-core/spec/logstash/modules/settings_merger_spec.rb
index c0f65f27433..e373535fc47 100644
--- a/logstash-core/spec/logstash/modules/settings_merger_spec.rb
+++ b/logstash-core/spec/logstash/modules/settings_merger_spec.rb
@@ -30,8 +30,8 @@ def get(key) @hash[key]; end
 
 describe LogStash::Modules::SettingsMerger do
   describe "#merge" do
-    let(:cli) { LogStash::Util::ModulesSettingArray.new [{"name"=>"mod1", "var.input.tcp.port"=>"3333"}, {"name"=>"mod2"}] }
-    let(:yml) {[{"name"=>"mod1", "var.input.tcp.port"=>2222, "var.kibana.username"=>"rupert", "var.kibana.password"=>"fotherington"}, {"name"=>"mod3", "var.input.tcp.port"=>4445}]}
+    let(:cli) { LogStash::Util::ModulesSettingArray.new [{"name" => "mod1", "var.input.tcp.port" => "3333"}, {"name" => "mod2"}] }
+    let(:yml) {[{"name" => "mod1", "var.input.tcp.port" => 2222, "var.kibana.username" => "rupert", "var.kibana.password" => "fotherington"}, {"name" => "mod3", "var.input.tcp.port" => 4445}]}
     subject(:results) { described_class.merge(cli, yml) }
     it "merges cli overwriting any common fields in yml" do
       expect(results).to be_a(Array)
@@ -51,7 +51,7 @@ def get(key) @hash[key]; end
     end
 
     context 'only elasticsearch username and password is set' do
-      let(:mod_settings) { {"name"=>"mod1", "var.input.tcp.port"=>2222, "var.elasticsearch.username"=>"rupert", "var.elasticsearch.password"=>"fotherington" } }
+      let(:mod_settings) { {"name" => "mod1", "var.input.tcp.port" => 2222, "var.elasticsearch.username" => "rupert", "var.elasticsearch.password" => "fotherington" } }
       it "sets kibana username and password" do
         expect(mod_settings["var.elasticsearch.username"]).to eq("rupert")
         expect(mod_settings["var.elasticsearch.password"]).to eq("fotherington")
@@ -61,8 +61,8 @@ def get(key) @hash[key]; end
     end
 
     context 'elasticsearch and kibana usernames and passwords are set' do
-      let(:mod_settings) { {"name"=>"mod1", "var.input.tcp.port"=>2222, "var.elasticsearch.username"=>"rupert", "var.elasticsearch.password"=>"fotherington",
-                                                               "var.kibana.username"=>"davey", "var.kibana.password"=>"stott"} }
+      let(:mod_settings) { {"name" => "mod1", "var.input.tcp.port" => 2222, "var.elasticsearch.username" => "rupert", "var.elasticsearch.password" => "fotherington",
+                                                               "var.kibana.username" => "davey", "var.kibana.password" => "stott"} }
 
       it "keeps existing kibana username and password" do
         expect(mod_settings["var.elasticsearch.username"]).to eq("rupert")
diff --git a/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb b/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
index 6faba307268..1a0e9c71f02 100644
--- a/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
+++ b/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
@@ -63,7 +63,7 @@
       before do
         # create a 2MB file
         ::File.open(page_file, 'wb') do |f|
-          f.write( SecureRandom.random_bytes( 2 ** 21 ) )
+          f.write( SecureRandom.random_bytes( 2**21 ) )
         end
       end
 
@@ -90,7 +90,7 @@
       end
 
       it "should throw" do
-        expect(pq_config_validator).to receive(:check_disk_space) do | _, _, required_free_bytes|
+        expect(pq_config_validator).to receive(:check_disk_space) do |_, _, required_free_bytes|
           expect(required_free_bytes.size).to eq(1)
           expect(required_free_bytes.values[0]).to eq(1024**5 * 1000 * 2) # require 2000pb
         end.and_call_original
diff --git a/logstash-core/spec/logstash/pipeline_pq_file_spec.rb b/logstash-core/spec/logstash/pipeline_pq_file_spec.rb
index 11f7bff59c8..fe0f80fe68e 100644
--- a/logstash-core/spec/logstash/pipeline_pq_file_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_pq_file_spec.rb
@@ -30,7 +30,7 @@ def self.make_shared
     @concurrency = :shared
   end
 
-  def initialize(params={})
+  def initialize(params = {})
     super
     @num_closes = 0
     @event_count = 0
diff --git a/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb b/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
index 43f76c962b9..b0c6115d420 100644
--- a/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
+++ b/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
@@ -77,9 +77,9 @@
         context 'with a single `ca_trusted_fingerprint`' do
           let(:options) { super().merge('ca_trusted_fingerprint' => input) }
           context 'that is valid' do
-            let(:input) { "1b:ad:1d:ea:"*8 }
+            let(:input) { "1b:ad:1d:ea:" * 8 }
             include_examples('normalizes fingerprints') do
-              let(:normalized) { ['1BAD1DEA'*8] }
+              let(:normalized) { ['1BAD1DEA' * 8] }
             end
           end
           context 'that is not valid' do
@@ -91,13 +91,13 @@
         context 'with multiple `ca_trusted_fingerprint` values' do
           let(:options) { super().merge('ca_trusted_fingerprint' => input) }
           context 'that are valid' do
-            let(:input) { ["1b:ad:1d:ea:"*8, 'BEefCaB1'*8] }
+            let(:input) { ["1b:ad:1d:ea:" * 8, 'BEefCaB1' * 8] }
             include_examples('normalizes fingerprints') do
-              let(:normalized) { ["1BAD1DEA"*8, "BEEFCAB1"*8] }
+              let(:normalized) { ["1BAD1DEA" * 8, "BEEFCAB1" * 8] }
             end
           end
           context 'that is not valid' do
-            let(:input) { ["NOPE", "1BAD1DEA"*8] }
+            let(:input) { ["NOPE", "1BAD1DEA" * 8] }
 
             include_examples('rejects bad input in the usual way')
           end
diff --git a/logstash-core/spec/logstash/queue_factory_spec.rb b/logstash-core/spec/logstash/queue_factory_spec.rb
index 5e40619fb1e..b1d6547c54f 100644
--- a/logstash-core/spec/logstash/queue_factory_spec.rb
+++ b/logstash-core/spec/logstash/queue_factory_spec.rb
@@ -54,7 +54,7 @@
     end
 
     it "returns a `WrappedAckedQueue`" do
-      queue =  subject.create(settings)
+      queue = subject.create(settings)
       expect(queue).to be_kind_of(LogStash::WrappedAckedQueue)
       queue.close
     end
@@ -82,7 +82,7 @@
     end
 
     it "returns a `WrappedSynchronousQueue`" do
-      queue =  subject.create(settings)
+      queue = subject.create(settings)
       expect(queue).to be_kind_of(LogStash::WrappedSynchronousQueue)
       queue.close
     end
diff --git a/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
index d5526e4f600..030ceec1ddb 100644
--- a/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
+++ b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
@@ -55,7 +55,7 @@
   end
 
   context "when defining a custom tokenizer" do
-    subject { described_class.new("testing", element_class, default_value, strict=true, ";") }
+    subject { described_class.new("testing", element_class, default_value, strict = true, ";") }
 
     let(:candidate) { "hello;ninja" }
 
diff --git a/logstash-core/spec/logstash/state_resolver_spec.rb b/logstash-core/spec/logstash/state_resolver_spec.rb
index 3c2ffc4b732..ac7ef3d51dc 100644
--- a/logstash-core/spec/logstash/state_resolver_spec.rb
+++ b/logstash-core/spec/logstash/state_resolver_spec.rb
@@ -62,7 +62,7 @@
       let(:main_pipeline) { mock_pipeline(:main) }
       let(:main_pipeline_config) { main_pipeline.pipeline_config }
       let(:pipelines) do
-        r =  LogStash::PipelinesRegistry.new
+        r = LogStash::PipelinesRegistry.new
         r.create_pipeline(:main, main_pipeline) { true }
         r
       end
@@ -111,7 +111,7 @@
 
     context "when we have a lot of pipeline running" do
       let(:pipelines) do
-        r =  LogStash::PipelinesRegistry.new
+        r = LogStash::PipelinesRegistry.new
         r.create_pipeline(:main1, mock_pipeline(:main1)) { true }
         r.create_pipeline(:main2, mock_pipeline(:main2)) { true }
         r.create_pipeline(:main3, mock_pipeline(:main3)) { true }
@@ -176,7 +176,7 @@
       let(:main_pipeline) { mock_pipeline(:main) }
       let(:main_pipeline_config) { main_pipeline.pipeline_config }
       let(:pipelines) do
-        r =  LogStash::PipelinesRegistry.new
+        r = LogStash::PipelinesRegistry.new
         r.create_pipeline(:main, main_pipeline) { true }
         r
       end
diff --git a/logstash-core/spec/logstash/util/accessors_spec.rb b/logstash-core/spec/logstash/util/accessors_spec.rb
index 61aedaabb82..0acbf6e1ffd 100644
--- a/logstash-core/spec/logstash/util/accessors_spec.rb
+++ b/logstash-core/spec/logstash/util/accessors_spec.rb
@@ -89,21 +89,21 @@
   context "using field path" do
     it "should get shallow string value of word key" do
       str = "[hello]"
-      data = { "hello" =>  "world" }
+      data = { "hello" => "world" }
       accessors = LogStash::Util::Accessors.new(data)
       expect(accessors.get(str)).to eq("world")
     end
 
     it "should get shallow string value of key with spaces" do
       str = "[hel lo]"
-      data = { "hel lo" =>  "world" }
+      data = { "hel lo" => "world" }
       accessors = LogStash::Util::Accessors.new(data)
       expect(accessors.get(str)).to eq("world")
     end
 
     it "should get shallow string value of numeric key string" do
       str = "[1]"
-      data = { "1" =>  "world" }
+      data = { "1" => "world" }
       accessors = LogStash::Util::Accessors.new(data)
       expect(accessors.get(str)).to eq("world")
     end
diff --git a/logstash-core/spec/logstash/util/plugin_version_spec.rb b/logstash-core/spec/logstash/util/plugin_version_spec.rb
index 5079dde4f61..f95506c2ff6 100644
--- a/logstash-core/spec/logstash/util/plugin_version_spec.rb
+++ b/logstash-core/spec/logstash/util/plugin_version_spec.rb
@@ -25,7 +25,7 @@
     let(:gem)     { "bundler" }
 
     it 'raises an PluginNoVersionError if we cant find the plugin in the gem path' do
-      dummy_name ='this-character-doesnt-exist-in-the-marvel-universe'
+      dummy_name = 'this-character-doesnt-exist-in-the-marvel-universe'
       expect { subject.find_version!(dummy_name) }.to raise_error(LogStash::PluginNoVersionError)
     end
 
diff --git a/logstash-core/spec/support/helpers.rb b/logstash-core/spec/support/helpers.rb
index 5f96083e567..1ed2a4ecc07 100644
--- a/logstash-core/spec/support/helpers.rb
+++ b/logstash-core/spec/support/helpers.rb
@@ -39,7 +39,7 @@ def clear_data_dir
   end
 end
 
-def mock_settings(settings_values={})
+def mock_settings(settings_values = {})
   settings = LogStash::SETTINGS.clone
 
   settings_values.each do |key, value|
@@ -49,7 +49,7 @@ def mock_settings(settings_values={})
   settings
 end
 
-def make_test_agent(settings=mock_settings, config_source=nil)
+def make_test_agent(settings = mock_settings, config_source = nil)
     sl = LogStash::Config::SourceLoader.new
     sl.add_source(config_source || LogStash::Config::Source::Local.new(settings))
     sl
@@ -57,7 +57,7 @@ def make_test_agent(settings=mock_settings, config_source=nil)
     ::LogStash::Agent.new(settings, sl)
 end
 
-def make_config_source(settings=mock_settings)
+def make_config_source(settings = mock_settings)
   TestPipelineConfigSource.new(settings)
 end
 
@@ -72,7 +72,7 @@ def initialize(settings)
     @pipelines = {}
   end
 
-  def add_pipeline(pipeline_id, config_string, settings_overrides={})
+  def add_pipeline(pipeline_id, config_string, settings_overrides = {})
     logger.debug("adding pipeline `#{pipeline_id}` from string `#{config_string}` with additional settings `#{settings_overrides}`")
     @pipelines[pipeline_id.to_sym] = compose_pipeline_config(pipeline_id, config_string, settings_overrides)
   end
diff --git a/logstash-core/spec/support/matchers.rb b/logstash-core/spec/support/matchers.rb
index 5615579347d..faa2f9a1640 100644
--- a/logstash-core/spec/support/matchers.rb
+++ b/logstash-core/spec/support/matchers.rb
@@ -84,7 +84,7 @@ def all_instance_methods_implemented?
       expect(pipeline).to_not be_nil
     end
     # either the pipeline_id is not in the running pipelines OR it is but have different configurations
-    expect(!agent.running_pipelines.keys.map(&:to_s).include?(pipeline_config.pipeline_id.to_s) ||  pipeline.config_str != pipeline_config.config_string).to be_truthy
+    expect(!agent.running_pipelines.keys.map(&:to_s).include?(pipeline_config.pipeline_id.to_s) || pipeline.config_str != pipeline_config.config_string).to be_truthy
   end
 
   match_when_negated do
diff --git a/logstash-core/spec/support/mocks_classes.rb b/logstash-core/spec/support/mocks_classes.rb
index 9759dcc2552..0f80223c997 100644
--- a/logstash-core/spec/support/mocks_classes.rb
+++ b/logstash-core/spec/support/mocks_classes.rb
@@ -81,7 +81,7 @@ class DummyOutput < LogStash::Outputs::Base
 
       attr_reader :num_closes, :events
 
-      def initialize(params={})
+      def initialize(params = {})
         super
         @num_closes = 0
         @events = []
@@ -109,7 +109,7 @@ class DummyOutputWithEventsArray < LogStash::Outputs::Base
 
       attr_reader :events
 
-      def initialize(params={})
+      def initialize(params = {})
         super
         @events = []
       end
@@ -131,7 +131,7 @@ class DroppingDummyOutput < LogStash::Outputs::Base
 
       attr_reader :num_closes
 
-      def initialize(params={})
+      def initialize(params = {})
         super
         @num_closes = 0
         @events_received = Concurrent::AtomicFixnum.new(0)
diff --git a/logstash-core/spec/support/shared_contexts.rb b/logstash-core/spec/support/shared_contexts.rb
index c15f7e74074..2a19f1f266b 100644
--- a/logstash-core/spec/support/shared_contexts.rb
+++ b/logstash-core/spec/support/shared_contexts.rb
@@ -35,7 +35,7 @@
   end
 end
 
-shared_context "api setup" do |settings_overrides={}|
+shared_context "api setup" do |settings_overrides = {}|
   ##
   # blocks until the condition returns true, or the limit has passed
   # @return [true] if the condition was met
@@ -46,7 +46,7 @@ def block_until(limit_seconds, &condition)
       break if Time.now >= deadline
       return true if condition.call
 
-      next_sleep = [(2.0**(try))/10, 2, deadline - Time.now].min
+      next_sleep = [(2.0**(try)) / 10, 2, deadline - Time.now].min
       Kernel::sleep(next_sleep) unless next_sleep <= 0
     end
     # one last try
diff --git a/logstash-core/spec/support/shared_examples.rb b/logstash-core/spec/support/shared_examples.rb
index edb029c10af..29eb4953b19 100644
--- a/logstash-core/spec/support/shared_examples.rb
+++ b/logstash-core/spec/support/shared_examples.rb
@@ -86,7 +86,7 @@
   describe "#time" do
     it "allow to record time with a block given" do
       expect do
-        subject.time(key) { 1+1 }
+        subject.time(key) { 1 + 1 }
       end.not_to raise_error
     end
 
diff --git a/qa/Rakefile b/qa/Rakefile
index a3f61c5ff41..2aa2719549d 100644
--- a/qa/Rakefile
+++ b/qa/Rakefile
@@ -29,7 +29,7 @@ task :default => :spec
 
 namespace :qa do
   namespace :vm do
-    def user_feedback_string_for(action, platform, machines, options={})
+    def user_feedback_string_for(action, platform, machines, options = {})
       experimental_string = options["experimental"] ? "experimental" : "non experimental"
       message  = "#{action} all #{experimental_string} VM's defined in acceptance/Vagrantfile"
       "#{message} for #{platform}: #{machines}" if !platform.nil?
@@ -48,7 +48,7 @@ namespace :qa do
 
     desc "Bootstrap all the VM's used for this tests"
     task :setup, :platform do |t, args|
-      config   = PlatformConfig.new
+      config = PlatformConfig.new
       experimental = (ENV['LS_QA_EXPERIMENTAL_OS'].to_s.downcase || "false") == "true"
       machines = config.select_names_for(args[:platform], {"experimental" => experimental})
 
@@ -63,7 +63,7 @@ namespace :qa do
 
     desc "Halt all VM's involved in the acceptance test round"
     task :halt, :platform do |t, args|
-      config   = PlatformConfig.new
+      config = PlatformConfig.new
       experimental = (ENV['LS_QA_EXPERIMENTAL_OS'].to_s.downcase || "false") == "true"
       machines = config.select_names_for(args[:platform], {"experimental" => experimental})
 
@@ -84,14 +84,14 @@ namespace :qa do
     platforms.types.each do |type|
       desc "Run acceptance test in #{type} machines"
       task type do
-        ENV['LS_TEST_PLATFORM']=type
+        ENV['LS_TEST_PLATFORM'] = type
         exit(RSpec::Core::Runner.run([Rake::FileList["acceptance/spec/lib/*_spec.rb"]]))
       end
     end
 
     desc "Run one single machine acceptance test"
     task :single, :machine do |t, args|
-      ENV['LS_VAGRANT_HOST']  = args[:machine]
+      ENV['LS_VAGRANT_HOST'] = args[:machine]
       exit(RSpec::Core::Runner.run([Rake::FileList["acceptance/spec/lib/**/**/*_spec.rb"]]))
     end
   end
diff --git a/qa/acceptance/spec/shared_examples/updated.rb b/qa/acceptance/spec/shared_examples/updated.rb
index e915aef4938..d273f05dd64 100644
--- a/qa/acceptance/spec/shared_examples/updated.rb
+++ b/qa/acceptance/spec/shared_examples/updated.rb
@@ -31,7 +31,7 @@
   end
 
   before(:each) do
-    options={:version => LOGSTASH_LATEST_VERSION, :snapshot => false, :base => "./", :skip_jdk_infix => true }
+    options = {:version => LOGSTASH_LATEST_VERSION, :snapshot => false, :base => "./", :skip_jdk_infix => true }
     logstash.install(options) # make sure latest version is installed
   end
 
diff --git a/qa/acceptance/spec/spec_helper.rb b/qa/acceptance/spec/spec_helper.rb
index 71a741279bb..5731ee0b047 100644
--- a/qa/acceptance/spec/spec_helper.rb
+++ b/qa/acceptance/spec/spec_helper.rb
@@ -47,7 +47,7 @@
 default_vagrant_boxes = ( platform == 'all' ? config.platforms : config.filter_type(platform, {"experimental" => experimental}) )
 
 selected_boxes = if ENV.include?('LS_VAGRANT_HOST') then
-                   config.platforms.select { |p| p.name  == ENV['LS_VAGRANT_HOST'] }
+                   config.platforms.select { |p| p.name == ENV['LS_VAGRANT_HOST'] }
                  else
                    default_vagrant_boxes
                  end
diff --git a/qa/docker/spec/spec_helper.rb b/qa/docker/spec/spec_helper.rb
index babef10dcbd..3c1fc31d6fb 100644
--- a/qa/docker/spec/spec_helper.rb
+++ b/qa/docker/spec/spec_helper.rb
@@ -29,7 +29,7 @@ def create_container(image, options = {})
   image.run(nil, options)
 end
 
-def start_container(image, options={})
+def start_container(image, options = {})
   container = create_container(image, options)
   wait_for_logstash(container)
   container
@@ -42,7 +42,7 @@ def wait_for_logstash(container)
   end
 end
 
-def wait_for_pipeline(container, pipeline='main')
+def wait_for_pipeline(container, pipeline = 'main')
   Stud.try(40.times, [NoMethodError, Docker::Error::ConflictError, RSpec::Expectations::ExpectationNotMetError, TypeError]) do
     expect(pipeline_stats_available?(container, pipeline)).to be true
   end
@@ -53,7 +53,7 @@ def cleanup_container(container)
     begin
       container.stop
     ensure
-      container.delete(:force=>true)
+      container.delete(:force => true)
     end
   end
 end
@@ -78,16 +78,16 @@ def get_node_stats(container)
   make_request(container, 'curl -s http://localhost:9600/_node/stats')
 end
 
-def get_pipeline_setting(container, property, pipeline='main')
+def get_pipeline_setting(container, property, pipeline = 'main')
   make_request(container, "curl -s http://localhost:9600/_node/pipelines/#{pipeline}")
           .dig('pipelines', pipeline, property)
 end
 
-def get_pipeline_stats(container, pipeline='main')
+def get_pipeline_stats(container, pipeline = 'main')
   make_request(container, "curl -s http://localhost:9600/_node/stats/pipelines").dig('pipelines', pipeline)
 end
 
-def get_plugin_info(container, type, id, pipeline='main')
+def get_plugin_info(container, type, id, pipeline = 'main')
   pipeline_info = make_request(container, "curl -s http://localhost:9600/_node/stats/pipelines")
   all_plugins = pipeline_info.dig('pipelines', pipeline, 'plugins', type)
   if all_plugins.nil?
@@ -96,7 +96,7 @@ def get_plugin_info(container, type, id, pipeline='main')
     puts "Unable to find plugins from #{pipeline_info}, when looking for #{type} plugins in #{pipeline}"
     return nil
   end
-  all_plugins.find{|plugin|plugin['id'] == id}
+  all_plugins.find{|plugin| plugin['id'] == id}
 end
 
 def logstash_available?(container)
diff --git a/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec b/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
index ef895343e0b..1b305acc835 100644
--- a/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
+++ b/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
@@ -16,7 +16,7 @@ Gem::Specification.new do |s|
 
   # Special flag to let us know this is actually a logstash plugin
   s.metadata = { "logstash_plugin" => "true", "logstash_group" => "output" }
-  s.post_install_message =<<eos
+  s.post_install_message = <<eos
 This plugins will require the configuration of XXXXX in the logstash.yml
 
 Make sure you double check your configuration
diff --git a/qa/integration/framework/settings.rb b/qa/integration/framework/settings.rb
index 9e407179119..a9e780e2438 100644
--- a/qa/integration/framework/settings.rb
+++ b/qa/integration/framework/settings.rb
@@ -74,6 +74,6 @@ def feature_flag
 
   def feature_config_dir
     feature = feature_flag
-    feature.empty? ? nil: File.join(FIXTURES_DIR, feature)
+    feature.empty? ? nil : File.join(FIXTURES_DIR, feature)
   end
 end
diff --git a/qa/integration/specs/cli/install_spec.rb b/qa/integration/specs/cli/install_spec.rb
index 2dce0ba0557..7021c421f7d 100644
--- a/qa/integration/specs/cli/install_spec.rb
+++ b/qa/integration/specs/cli/install_spec.rb
@@ -25,7 +25,7 @@
 require "open3"
 
 def gem_in_lock_file?(pattern, lock_file)
-  content =  File.read(lock_file)
+  content = File.read(lock_file)
   content.match(pattern)
 end
 
@@ -139,7 +139,7 @@ def gem_in_lock_file?(pattern, lock_file)
       end
 
       it "successfully installs the plugin with debug enabled" do
-        execute = @logstash_plugin.run_raw("#{install_command} #{plugin_name}", true, {"DEBUG"=>"1"})
+        execute = @logstash_plugin.run_raw("#{install_command} #{plugin_name}", true, {"DEBUG" => "1"})
 
         expect(execute.stderr_and_stdout).to match(/Installation successful/)
         expect(execute.exit_code).to eq(0)
diff --git a/qa/integration/specs/kafka_input_spec.rb b/qa/integration/specs/kafka_input_spec.rb
index ec9a331da08..fc42fd092bb 100644
--- a/qa/integration/specs/kafka_input_spec.rb
+++ b/qa/integration/specs/kafka_input_spec.rb
@@ -57,7 +57,7 @@
     end
 
     try(num_retries) do
-      count = File.foreach(file_output_path).inject(0) {|c, _| c+1}
+      count = File.foreach(file_output_path).inject(0) {|c, _| c + 1}
       expect(count).to eq(num_events)
     end
   end
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 33856ad3187..e5694dc59cd 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -233,7 +233,7 @@
     logging_put_assert logstash_service.monitoring_api.logging_put({"logger.deprecation.logstash" => "ERROR"})
 
     result = logstash_service.monitoring_api.logging_get
-    result["loggers"].each do | k, v |
+    result["loggers"].each do |k, v|
       next if k.eql?("logstash.agent")
       #since we explicitly set the logstash.agent logger above, the logger.logstash parent logger will not take precedence
       if k.start_with?("logstash") || k.start_with?("slowlog") || k.start_with?("deprecation")
@@ -330,7 +330,7 @@
 
   def logging_get_assert(logstash_service, logstash_level, slowlog_level, skip: '')
     result = logstash_service.monitoring_api.logging_get
-    result["loggers"].each do | k, v |
+    result["loggers"].each do |k, v|
       next if !k.empty? && k.eql?(skip)
       if k.start_with? "logstash", "org.logstash" #logstash is the ruby namespace, and org.logstash for java
         expect(v).to eq(logstash_level), "logstash logger '#{k}' has logging level: #{v} expected: #{logstash_level}"
diff --git a/qa/integration/specs/reload_config_spec.rb b/qa/integration/specs/reload_config_spec.rb
index 86c59ac038e..ac2e8c66d87 100644
--- a/qa/integration/specs/reload_config_spec.rb
+++ b/qa/integration/specs/reload_config_spec.rb
@@ -68,7 +68,7 @@
     # make sure the pipeline flow has non-zero input throughput after receiving data
     Stud.try(max_retry.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
       pipeline_flow_stats = logstash_service.monitoring_api.pipeline_stats("main")["flow"]
-      expect(pipeline_flow_stats['input_throughput']).to include('lifetime' => (a_value >  0))
+      expect(pipeline_flow_stats['input_throughput']).to include('lifetime' => (a_value > 0))
     end
 
     # do a reload
diff --git a/qa/platform_config.rb b/qa/platform_config.rb
index df0f2151891..480aba6860e 100644
--- a/qa/platform_config.rb
+++ b/qa/platform_config.rb
@@ -80,7 +80,7 @@ def each(&block)
     @platforms.each(&block)
   end
 
-  def filter_type(type_name, options={})
+  def filter_type(type_name, options = {})
     experimental = options.fetch("experimental", false)
     @platforms.select do |platform|
       (type_name.nil? ? true : platform.type == type_name) &&
@@ -88,7 +88,7 @@ def filter_type(type_name, options={})
     end
   end
 
-  def select_names_for(platform, options={})
+  def select_names_for(platform, options = {})
     filter_options = { "experimental" => options.fetch("experimental", false) }
     filter_type(platform, filter_options).map{ |p| p.name }
   end
diff --git a/qa/rspec/commands.rb b/qa/rspec/commands.rb
index adfc41f66e2..c977ae6f88f 100644
--- a/qa/rspec/commands.rb
+++ b/qa/rspec/commands.rb
@@ -36,7 +36,7 @@ class Artifact
 
     attr_reader :host, :client
 
-    def initialize(host, options={})
+    def initialize(host, options = {})
       @host    = host
       @options = options
       @client  = CommandsFactory.fetch(options["type"], options["host"])
@@ -71,8 +71,8 @@ def stop_service
       client.stop_service(name, host)
     end
 
-    def install(options={})
-      base      = options.fetch(:base, ServiceTester::Base::LOCATION)
+    def install(options = {})
+      base = options.fetch(:base, ServiceTester::Base::LOCATION)
       @skip_jdk_infix = options.fetch(:skip_jdk_infix, false)
       filename = filename(options)
       package   = client.package_for(filename, @skip_jdk_infix, base)
@@ -117,9 +117,9 @@ def to_s
 
     private
 
-    def filename(options={})
+    def filename(options = {})
       snapshot  = options.fetch(:snapshot, true)
-      "logstash-#{options[:version]}#{(snapshot ?  "-SNAPSHOT" : "")}"
+      "logstash-#{options[:version]}#{(snapshot ? "-SNAPSHOT" : "")}"
     end
   end
 
diff --git a/qa/rspec/commands/base.rb b/qa/rspec/commands/base.rb
index 781ddc050d4..1e3904d3e27 100644
--- a/qa/rspec/commands/base.rb
+++ b/qa/rspec/commands/base.rb
@@ -23,8 +23,8 @@ module ServiceTester
   class InstallException < Exception; end
 
   class Base
-    LOCATION="/logstash-build".freeze
-    LOGSTASH_PATH="/usr/share/logstash/".freeze
+    LOCATION = "/logstash-build".freeze
+    LOGSTASH_PATH = "/usr/share/logstash/".freeze
 
     def snapshot(host)
       LogStash::VagrantHelpers.save_snapshot(host)
@@ -34,11 +34,11 @@ def restore(host)
       LogStash::VagrantHelpers.restore_snapshot(host)
     end
 
-    def start_service(service, host=nil)
+    def start_service(service, host = nil)
       service_manager(service, "start", host)
     end
 
-    def stop_service(service, host=nil)
+    def stop_service(service, host = nil)
       service_manager(service, "stop", host)
     end
 
@@ -68,7 +68,7 @@ def plugin_installed?(host, plugin_name, version = nil)
         search_token = plugin_name
       else
         cmd = run_command_in_path("bin/logstash-plugin list --verbose", host)
-        search_token ="#{plugin_name} (#{version})"
+        search_token = "#{plugin_name} (#{version})"
       end
 
       plugins_list = cmd.stdout.split("\n")
@@ -106,7 +106,7 @@ def delete_file(path, host)
       run_command("rm -rf #{path}", host)
     end
 
-    def package_for(filename, skip_jdk_infix, base=ServiceTester::Base::LOCATION)
+    def package_for(filename, skip_jdk_infix, base = ServiceTester::Base::LOCATION)
       jdk_arch_ext = jdk_architecture_extension(skip_jdk_infix)
       File.join(base, "#{filename}#{jdk_arch_ext}.#{package_extension}")
     end
diff --git a/qa/rspec/commands/debian.rb b/qa/rspec/commands/debian.rb
index dcbe2808442..b4d57afaf65 100644
--- a/qa/rspec/commands/debian.rb
+++ b/qa/rspec/commands/debian.rb
@@ -44,7 +44,7 @@ def architecture_extension
       end
     end
 
-    def install(package, host=nil)
+    def install(package, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       errors = []
       at(hosts, {in: :serial}) do |_|
@@ -56,7 +56,7 @@ def install(package, host=nil)
       raise InstallException.new(errors.join("\n")) unless errors.empty?
     end
 
-    def uninstall(package, host=nil)
+    def uninstall(package, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("dpkg -r #{package}")
diff --git a/qa/rspec/commands/redhat.rb b/qa/rspec/commands/redhat.rb
index f61cbaf486d..07a7e2e13e4 100644
--- a/qa/rspec/commands/redhat.rb
+++ b/qa/rspec/commands/redhat.rb
@@ -44,7 +44,7 @@ def architecture_extension
       end
     end
 
-    def install(package, host=nil)
+    def install(package, host = nil)
       hosts  = (host.nil? ? servers : Array(host))
       errors = []
       exit_status = 0
@@ -58,7 +58,7 @@ def install(package, host=nil)
       end
     end
 
-    def uninstall(package, host=nil)
+    def uninstall(package, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("yum remove -y #{package}")
diff --git a/qa/rspec/commands/suse.rb b/qa/rspec/commands/suse.rb
index c66ba048c5d..34e5ed0b5d6 100644
--- a/qa/rspec/commands/suse.rb
+++ b/qa/rspec/commands/suse.rb
@@ -37,7 +37,7 @@ def architecture_extension()
       "x86_64"
     end
 
-    def install(package, host=nil)
+    def install(package, host = nil)
       hosts  = (host.nil? ? servers : Array(host))
       errors = []
       at(hosts, {in: :serial}) do |_host|
@@ -47,7 +47,7 @@ def install(package, host=nil)
       raise InstallException.new(errors.join("\n")) unless errors.empty?
     end
 
-    def uninstall(package, host=nil)
+    def uninstall(package, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         cmd = sudo_exec!("zypper --no-gpg-checks --non-interactive remove #{package}")
@@ -72,7 +72,7 @@ def running?(hosts, package)
       stdout.match(/Active: active \(running\)/)
     end
 
-    def service_manager(service, action, host=nil)
+    def service_manager(service, action, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("service #{service} #{action}")
diff --git a/qa/rspec/commands/suse/sles-11.rb b/qa/rspec/commands/suse/sles-11.rb
index 7b3d792ec63..98774745958 100644
--- a/qa/rspec/commands/suse/sles-11.rb
+++ b/qa/rspec/commands/suse/sles-11.rb
@@ -30,7 +30,7 @@ def running?(hosts, package)
       stdout.match(/#{package} is running$/)
     end
 
-    def service_manager(service, action, host=nil)
+    def service_manager(service, action, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("/etc/init.d/#{service} #{action}")
diff --git a/qa/rspec/commands/system_helpers.rb b/qa/rspec/commands/system_helpers.rb
index f0b4159346a..85b8068da0a 100644
--- a/qa/rspec/commands/system_helpers.rb
+++ b/qa/rspec/commands/system_helpers.rb
@@ -19,7 +19,7 @@
 
 module ServiceTester
   module SystemD
-    def running?(hosts, package, jdk_path='/usr/share/logstash/jdk/bin/java')
+    def running?(hosts, package, jdk_path = '/usr/share/logstash/jdk/bin/java')
       stdout = ""
       at(hosts, {in: :serial}) do |host|
         cmd = sudo_exec!("service #{package} status")
@@ -33,7 +33,7 @@ def running?(hosts, package, jdk_path='/usr/share/logstash/jdk/bin/java')
       )
     end
 
-    def service_manager(service, action, host=nil)
+    def service_manager(service, action, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("service #{service} #{action}")
@@ -42,7 +42,7 @@ def service_manager(service, action, host=nil)
   end
 
   module InitD
-    def running?(hosts, package, jdk_path='/usr/share/logstash/jdk/bin/java')
+    def running?(hosts, package, jdk_path = '/usr/share/logstash/jdk/bin/java')
       stdout = ""
       at(hosts, {in: :serial}) do |host|
         cmd = sudo_exec!("initctl status #{package}")
@@ -60,7 +60,7 @@ def running?(hosts, package, jdk_path='/usr/share/logstash/jdk/bin/java')
       running
     end
 
-    def service_manager(service, action, host=nil)
+    def service_manager(service, action, host = nil)
       hosts = (host.nil? ? servers : Array(host))
       at(hosts, {in: :serial}) do |_|
         sudo_exec!("initctl #{action} #{service}")
diff --git a/qa/support/logstash-filter-qatest/logstash-filter-qatest-newer.gemspec b/qa/support/logstash-filter-qatest/logstash-filter-qatest-newer.gemspec
index e0aaf15a910..0baa11df7da 100644
--- a/qa/support/logstash-filter-qatest/logstash-filter-qatest-newer.gemspec
+++ b/qa/support/logstash-filter-qatest/logstash-filter-qatest-newer.gemspec
@@ -10,7 +10,7 @@ Gem::Specification.new do |s|
   s.require_paths = ["lib"]
 
   # Files
-  s.files = `git ls-files`.split($\)+::Dir.glob('vendor/*')
+  s.files = `git ls-files`.split($\) + ::Dir.glob('vendor/*')
 
   # Tests
   s.test_files = s.files.grep(%r{^(test|spec|features)/})
diff --git a/qa/support/logstash-filter-qatest/logstash-filter-qatest-old.gemspec b/qa/support/logstash-filter-qatest/logstash-filter-qatest-old.gemspec
index 82e3be79baf..aa163c4f648 100644
--- a/qa/support/logstash-filter-qatest/logstash-filter-qatest-old.gemspec
+++ b/qa/support/logstash-filter-qatest/logstash-filter-qatest-old.gemspec
@@ -10,7 +10,7 @@ Gem::Specification.new do |s|
   s.require_paths = ["lib"]
 
   # Files
-  s.files = `git ls-files`.split($\)+::Dir.glob('vendor/*')
+  s.files = `git ls-files`.split($\) + ::Dir.glob('vendor/*')
 
   # Tests
   s.test_files = s.files.grep(%r{^(test|spec|features)/})
diff --git a/qa/vagrant/command.rb b/qa/vagrant/command.rb
index a5efce0221a..a0d4655901c 100644
--- a/qa/vagrant/command.rb
+++ b/qa/vagrant/command.rb
@@ -37,7 +37,7 @@ def success?
       end
     end
 
-    def self.run(cmd, debug=false)
+    def self.run(cmd, debug = false)
       # This block is require to be able to launch a ruby subprocess
       # that use bundler.
       Bundler.with_clean_env do
@@ -58,7 +58,7 @@ def self.run(cmd, debug=false)
 
     # This method will raise an exception if the `CMD`
     # was not run successfully and will display the content of STDERR
-    def self.run!(cmd, debug=false)
+    def self.run!(cmd, debug = false)
       response = run(cmd, debug)
 
       unless response.success?
diff --git a/qa/vagrant/helpers.rb b/qa/vagrant/helpers.rb
index 4386e38b30f..d56739b1d4c 100644
--- a/qa/vagrant/helpers.rb
+++ b/qa/vagrant/helpers.rb
@@ -22,26 +22,26 @@
 module LogStash
   class VagrantHelpers
 
-    def self.halt(machines=[], options={})
+    def self.halt(machines = [], options = {})
       debug = options.fetch(:debug, false)
       CommandExecutor.run!("vagrant halt #{machines.join(' ')}", debug)
     end
 
-    def self.destroy(machines=[], options={})
+    def self.destroy(machines = [], options = {})
       debug = options.fetch(:debug, false)
       CommandExecutor.run!("vagrant destroy --force #{machines.join(' ')}", debug)
     end
 
-    def self.bootstrap(machines=[], options={})
+    def self.bootstrap(machines = [], options = {})
       debug = options.fetch(:debug, false)
       CommandExecutor.run!("vagrant up #{machines.join(' ')}", debug)
     end
 
-    def self.save_snapshot(machine="")
+    def self.save_snapshot(machine = "")
       CommandExecutor.run!("vagrant snapshot save #{machine} #{machine}-snapshot")
     end
 
-    def self.restore_snapshot(machine="")
+    def self.restore_snapshot(machine = "")
       CommandExecutor.run!("vagrant snapshot restore #{machine} #{machine}-snapshot")
     end
 
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 237cae90e12..464a8319c34 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -108,11 +108,11 @@ namespace "artifact" do
     @oss_excludes = default_exclude_paths + [ "x-pack/**/*" ]
   end
 
-  def files(exclude_paths=default_exclude_paths)
+  def files(exclude_paths = default_exclude_paths)
     Rake::FileList.new(*package_files).exclude(*exclude_paths)
   end
 
-  def source_modified_since?(time, exclude_paths=default_exclude_paths)
+  def source_modified_since?(time, exclude_paths = default_exclude_paths)
     skip_list = ["logstash-core-plugin-api/versions-gem-copy.yml", "logstash-core/versions-gem-copy.yml"]
     result = false
     files(exclude_paths).each do |file|
@@ -381,7 +381,7 @@ namespace "artifact" do
 
     return if defined?(BUILD_METADATA_FILE)
     BUILD_METADATA_FILE = Tempfile.new('build.rb')
-    BUILD_DATE=Time.now.iso8601
+    BUILD_DATE = Time.now.iso8601
     build_info = {
       "build_date" => BUILD_DATE,
       "build_sha" => `git rev-parse HEAD`.chomp,
@@ -454,7 +454,7 @@ namespace "artifact" do
     end
   end
 
-  def build_tar(license, tar_suffix = nil, exclude_paths=default_exclude_paths, platform: '')
+  def build_tar(license, tar_suffix = nil, exclude_paths = default_exclude_paths, platform: '')
     require "zlib"
     require 'rubygems'
     require 'rubygems/package'
@@ -503,7 +503,7 @@ namespace "artifact" do
     end
   end
 
-  def build_zip(license, zip_suffix = "", exclude_paths=default_exclude_paths, platform: '')
+  def build_zip(license, zip_suffix = "", exclude_paths = default_exclude_paths, platform: '')
     require 'zip'
     ensure_logstash_version_constant_defined
     zippath = "build/logstash#{zip_suffix}-#{LOGSTASH_VERSION}#{PACKAGE_SUFFIX}#{platform}.zip"
@@ -529,13 +529,13 @@ namespace "artifact" do
     puts "Complete: #{zippath}"
   end
 
-  def package_with_jdk(platform, jdk_arch, variant=:standard)
+  def package_with_jdk(platform, jdk_arch, variant = :standard)
     safe_system("./gradlew copyJdk -Pjdk_bundle_os=linux -Pjdk_arch=#{jdk_arch}")
     package(platform, variant, true, jdk_arch)
     safe_system('./gradlew deleteLocalJdk -Pjdk_bundle_os=linux')
   end
 
-  def package(platform, variant=:standard, bundle_jdk=false, jdk_arch='x86_64')
+  def package(platform, variant = :standard, bundle_jdk = false, jdk_arch = 'x86_64')
     oss = variant == :oss
 
     require "stud/temporary"
@@ -553,7 +553,7 @@ namespace "artifact" do
 
     suffix = ""
     if oss
-      suffix= "-oss"
+      suffix = "-oss"
       exclude_paths = oss_exclude_paths
     else
       exclude_paths = default_exclude_paths
diff --git a/rakelib/gems.rake b/rakelib/gems.rake
index c8e87cb1841..0edf097ed1b 100644
--- a/rakelib/gems.rake
+++ b/rakelib/gems.rake
@@ -35,7 +35,7 @@ namespace "gem" do
     task.reenable # Allow this task to be run again
   end
 
-  task "install", [:name, :requirement, :target] =>  ["build/bootstrap"] do |task, args|
+  task "install", [:name, :requirement, :target] => ["build/bootstrap"] do |task, args|
     name, requirement, target = args[:name], args[:requirement], args[:target]
 
     ENV["GEM_HOME"] = ENV["GEM_PATH"] = target
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 8795c29e503..1e59152aa26 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -54,7 +54,7 @@ namespace "test" do
   end
 
   desc "run all installed plugins specs"
-  task "plugins"  => "bootstrap" do
+  task "plugins" => "bootstrap" do
     plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
     # the module LogStash::PluginManager requires the file `lib/pluginmanager/plugin_aliases.yml`,
     # that file is created during the bootstrap task
diff --git a/spec/support/resource_dsl_methods.rb b/spec/support/resource_dsl_methods.rb
index 4ffec5c6f7c..f327329c9df 100644
--- a/spec/support/resource_dsl_methods.rb
+++ b/spec/support/resource_dsl_methods.rb
@@ -29,7 +29,7 @@ class FalseClass
 
 module ResourceDSLMethods
   # Convert a nested hash to a mapping of key paths to expected classes
-  def hash_to_mapping(h, path=[], mapping={})
+  def hash_to_mapping(h, path = [], mapping = {})
     h.each do |k, v|
       if v.is_a?(Hash)
         hash_to_mapping(v, path + [k], mapping)
@@ -94,7 +94,7 @@ def test_api(expected, path)
     yield if block_given? # Add custom expectations
   end
 
-  def test_api_and_resources(expected, xopts={})
+  def test_api_and_resources(expected, xopts = {})
     xopts[:exclude_from_root] ||= []
     root_expectation = expected.clone
     xopts[:exclude_from_root].each {|k| root_expectation.delete(k)}
diff --git a/spec/unit/plugin_manager/pack_fetch_strategy/repository_spec.rb b/spec/unit/plugin_manager/pack_fetch_strategy/repository_spec.rb
index a24adb4bec4..ca5554e0024 100644
--- a/spec/unit/plugin_manager/pack_fetch_strategy/repository_spec.rb
+++ b/spec/unit/plugin_manager/pack_fetch_strategy/repository_spec.rb
@@ -49,7 +49,7 @@
   context "when the remote host is unreachable" do
     it "returns false and yield a debug message" do
       # To make sure we really try to connect to a failing host we have to let it through webmock
-      host ="#{Time.now.to_i.to_s}-do-not-exist"
+      host = "#{Time.now.to_i.to_s}-do-not-exist"
       WebMock.disable_net_connect!(:allow => host)
       ENV["LOGSTASH_PACK_URL"] = "http://#{host}"
       expect(subject.get_installer_for(plugin_name)).to be_falsey
diff --git a/spec/unit/plugin_manager/util_spec.rb b/spec/unit/plugin_manager/util_spec.rb
index 38dece461b2..e32aca583ab 100644
--- a/spec/unit/plugin_manager/util_spec.rb
+++ b/spec/unit/plugin_manager/util_spec.rb
@@ -24,18 +24,18 @@
     let(:plugin_name) { "logstash-output-elasticsearch" }
 
     let(:version_data) do
-      [ { "authors"=>"Elastic", "built_at"=>"2015-08-11T00:00:00.000Z", "description"=>"Output events to elasticsearch",
-          "downloads_count"=>1638, "metadata"=>{"logstash_group"=>"output", "logstash_plugin"=>"true"}, "number"=>"2.0.0.pre",
-          "summary"=>"Logstash Output to Elasticsearch", "platform"=>"java", "ruby_version"=>">= 0", "prerelease"=>true,
-          "licenses"=>["apache-2.0"], "requirements"=>[], "sha"=>"194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"},
-      { "authors"=>"Elastic", "built_at"=>"2015-08-10T00:00:00.000Z", "description"=>"Output events to elasticsearch",
-        "downloads_count"=>1638, "metadata"=>{"logstash_group"=>"output", "logstash_plugin"=>"true"}, "number"=>"1.0.7",
-        "summary"=>"Logstash Output to Elasticsearch", "platform"=>"java", "ruby_version"=>">= 0", "prerelease"=>false,
-        "licenses"=>["apache-2.0"], "requirements"=>[], "sha"=>"194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"},
-      { "authors"=>"Elastic", "built_at"=>"2015-08-09T00:00:00.000Z", "description"=>"Output events to elasticsearch",
-        "downloads_count"=>1638, "metadata"=>{"logstash_group"=>"output", "logstash_plugin"=>"true"}, "number"=>"1.0.4",
-        "summary"=>"Logstash Output to Elasticsearch", "platform"=>"java", "ruby_version"=>">= 0", "prerelease"=>false,
-        "licenses"=>["apache-2.0"], "requirements"=>[], "sha"=>"194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"} ]
+      [ { "authors" => "Elastic", "built_at" => "2015-08-11T00:00:00.000Z", "description" => "Output events to elasticsearch",
+          "downloads_count" => 1638, "metadata" => {"logstash_group" => "output", "logstash_plugin" => "true"}, "number" => "2.0.0.pre",
+          "summary" => "Logstash Output to Elasticsearch", "platform" => "java", "ruby_version" => ">= 0", "prerelease" => true,
+          "licenses" => ["apache-2.0"], "requirements" => [], "sha" => "194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"},
+      { "authors" => "Elastic", "built_at" => "2015-08-10T00:00:00.000Z", "description" => "Output events to elasticsearch",
+        "downloads_count" => 1638, "metadata" => {"logstash_group" => "output", "logstash_plugin" => "true"}, "number" => "1.0.7",
+        "summary" => "Logstash Output to Elasticsearch", "platform" => "java", "ruby_version" => ">= 0", "prerelease" => false,
+        "licenses" => ["apache-2.0"], "requirements" => [], "sha" => "194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"},
+      { "authors" => "Elastic", "built_at" => "2015-08-09T00:00:00.000Z", "description" => "Output events to elasticsearch",
+        "downloads_count" => 1638, "metadata" => {"logstash_group" => "output", "logstash_plugin" => "true"}, "number" => "1.0.4",
+        "summary" => "Logstash Output to Elasticsearch", "platform" => "java", "ruby_version" => ">= 0", "prerelease" => false,
+        "licenses" => ["apache-2.0"], "requirements" => [], "sha" => "194b27099c13605a882a3669e2363fdecccaab1de48dd44b0cda648dd5516799"} ]
     end
 
     before(:each) do
diff --git a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
index 6acab42414e..94ed9074f20 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
@@ -150,7 +150,7 @@ def initialize(plugins, target, source,  c = {})
     end
 
     def create_plugins(plugins)
-      plugin_names = plugins == :all ?  retrieve_all_plugins : Array(plugins)
+      plugin_names = plugins == :all ? retrieve_all_plugins : Array(plugins)
       plugin_names.map do |name|
         if skip_plugin?(name)
           puts "#{name} > #{Util.yellow("IGNORED")}"
diff --git a/tools/logstash-docgen/lib/logstash/docgen/parser.rb b/tools/logstash-docgen/lib/logstash/docgen/parser.rb
index c8eba1d21b2..4114c8d42c8 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/parser.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/parser.rb
@@ -106,7 +106,7 @@ def version
 
     def release_date(format = "%B %-d, %Y")
       @release_date ||= begin
-                          url ="https://rubygems.org/api/v1/versions/#{canonical_name}.json"
+                          url = "https://rubygems.org/api/v1/versions/#{canonical_name}.json"
                           response = open(url).read
                           # HACK: One of out default plugins, the webhdfs, has a bad encoding in the gemspec
                           # which make our parser trip with this error:
@@ -178,7 +178,7 @@ def get_binding
   class Parser
     # This is a multipass parser
     def self.parse(file, options = { :default_plugin => true })
-      context =  PluginContext.new(options)
+      context = PluginContext.new(options)
       static = StaticParser.new(context)
 
       # Extract ancestors, classes and modules and retrieve the physical
diff --git a/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb b/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
index 847a7c326a2..649c2f25ba0 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
@@ -37,7 +37,7 @@ class StaticParser
     RESET_BUFFER_RE = /^require\s("|')\w+("|')/
 
     def initialize(context)
-      @rules =  [
+      @rules = [
         [ COMMENT_RE, :parse_comment ],
         [ CLASS_DEFINITION_RE, :parse_class_description ],
         [ NEW_CLASS_DEFINITION_RE_ML, :parse_new_class_description ],
diff --git a/tools/logstash-docgen/spec/fixtures/logstash-filter-dummy.gemspec b/tools/logstash-docgen/spec/fixtures/logstash-filter-dummy.gemspec
index 47fce246017..b9ec61cfc96 100644
--- a/tools/logstash-docgen/spec/fixtures/logstash-filter-dummy.gemspec
+++ b/tools/logstash-docgen/spec/fixtures/logstash-filter-dummy.gemspec
@@ -8,7 +8,7 @@ Gem::Specification.new do |s|
   s.authors       = ["Elastic"]
   s.email         = ["info@elastic.co"]
 
-  s.homepage        = "http://www.elasticsearch.org/guide/en/logstash/current/index.html"
+  s.homepage = "http://www.elasticsearch.org/guide/en/logstash/current/index.html"
   s.require_paths = ["lib"]
 
   # Files
diff --git a/tools/logstash-docgen/spec/logstash/docgen/dependency_lookup_spec.rb b/tools/logstash-docgen/spec/logstash/docgen/dependency_lookup_spec.rb
index 9cde1d2563c..25633a5c2b2 100644
--- a/tools/logstash-docgen/spec/logstash/docgen/dependency_lookup_spec.rb
+++ b/tools/logstash-docgen/spec/logstash/docgen/dependency_lookup_spec.rb
@@ -43,7 +43,7 @@
 
   it "doesn't include duplicates" do
     VCR.use_cassette("logstash-core") do
-      versions =  subject.supported_logstash(gemspec)
+      versions = subject.supported_logstash(gemspec)
       expect { versions.size }.not_to change { versions.uniq }
     end
   end
diff --git a/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb b/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
index 32e88bfd058..2daae9d790a 100644
--- a/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
+++ b/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
@@ -49,7 +49,7 @@
   context "an execution without errors" do
     let(:job_with_no_errors) do
       lambda do
-        1+1
+        1 + 1
       end
     end
 
@@ -87,7 +87,7 @@
   context "an execution with errors" do
     let(:job_with_with_errors) do
       lambda do
-        1/0
+        1 / 0
       end
     end
 
diff --git a/tools/paquet/lib/paquet/utils.rb b/tools/paquet/lib/paquet/utils.rb
index c932c06b4f4..4cdc93de507 100644
--- a/tools/paquet/lib/paquet/utils.rb
+++ b/tools/paquet/lib/paquet/utils.rb
@@ -32,7 +32,7 @@ def self.download_file(source, destination, counter = REDIRECTION_LIMIT)
         uri = URI.parse(source)
 
         http = Net::HTTP.new(uri.host, uri.port, )
-        http.use_ssl = uri.scheme ==  HTTPS_SCHEME
+        http.use_ssl = uri.scheme == HTTPS_SCHEME
 
         response = http.get(uri.path)
 
diff --git a/tools/release/generate_release_notes.rb b/tools/release/generate_release_notes.rb
index a6cb1f573aa..f2a6c1d1289 100755
--- a/tools/release/generate_release_notes.rb
+++ b/tools/release/generate_release_notes.rb
@@ -66,8 +66,8 @@
 report <<  "=== Logstash Commits between #{release_branch} and #{previous_release_tag}\n"
 report <<  "Computed with \"git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --date=relative v#{previous_release_tag}..#{release_branch}\""
 report <<  ""
-logstash_prs =  `git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --date=relative v#{previous_release_tag}..#{release_branch}`
-report <<  logstash_prs
+logstash_prs = `git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --date=relative v#{previous_release_tag}..#{release_branch}`
+report << logstash_prs
 report << "\n=== Logstash Plugin Release Changelogs ==="
 report << "Computed from \"git diff v#{previous_release_tag}..#{release_branch} *.release\""
 result = `git diff v#{previous_release_tag}..#{release_branch} *.release`.split("\n")
diff --git a/x-pack/lib/config_management/bootstrap_check.rb b/x-pack/lib/config_management/bootstrap_check.rb
index 780c28ec6cb..16e54f3877f 100644
--- a/x-pack/lib/config_management/bootstrap_check.rb
+++ b/x-pack/lib/config_management/bootstrap_check.rb
@@ -45,7 +45,7 @@ def self.check(settings)
           raise LogStash::BootstrapCheckError, "You need to specify the ID of the pipelines with the `xpack.management.pipeline.id` options in your logstash.yml"
         end
 
-        invalid_patterns =  pipeline_ids.reject { |entry| PIPELINE_ID_PATTERN =~ entry }
+        invalid_patterns = pipeline_ids.reject { |entry| PIPELINE_ID_PATTERN =~ entry }
         if invalid_patterns.any?
           raise LogStash::BootstrapCheckError, "Pipeline id in `xpack.management.pipeline.id` must begin with a letter or underscore and contain only letters, underscores, dashes, and numbers. The asterisk wildcard `*` can also be used. Invalid ids: #{invalid_patterns.join(', ')}"
         end
diff --git a/x-pack/lib/config_management/elasticsearch_source.rb b/x-pack/lib/config_management/elasticsearch_source.rb
index 0320a996ecf..2968c0483a8 100644
--- a/x-pack/lib/config_management/elasticsearch_source.rb
+++ b/x-pack/lib/config_management/elasticsearch_source.rb
@@ -53,7 +53,7 @@ def config_conflict?
 
       # decide using system indices api (7.10+) or legacy api (< 7.10) base on elasticsearch server version
       def get_pipeline_fetcher(es_version)
-        (es_version[:major] >= 8 || (es_version[:major] == 7 && es_version[:minor] >= 10))? SystemIndicesFetcher.new: LegacyHiddenIndicesFetcher.new
+        (es_version[:major] >= 8 || (es_version[:major] == 7 && es_version[:minor] >= 10)) ? SystemIndicesFetcher.new : LegacyHiddenIndicesFetcher.new
       end
 
       def pipeline_configs
@@ -215,7 +215,7 @@ def fetch_config(es_version, pipeline_ids, client)
         retry_handler = ::LogStash::Helpers::LoggableTry.new(logger, 'fetch pipelines from Central Management')
         response = retry_handler.try(10.times, ::LogStash::Outputs::ElasticSearch::HttpClient::Pool::HostUnreachableError) {
           path = es_supports_pipeline_wildcard_search ?
-                   "#{SYSTEM_INDICES_API_PATH}?id=#{ERB::Util.url_encode(pipeline_ids.join(","))}":
+                   "#{SYSTEM_INDICES_API_PATH}?id=#{ERB::Util.url_encode(pipeline_ids.join(","))}" :
                    "#{SYSTEM_INDICES_API_PATH}/"
           client.get(path)
         }
@@ -245,7 +245,7 @@ def get_wildcard_pipelines(pipeline_ids, response)
         wildcard_patterns, fix_pids = pipeline_ids.partition { |pattern| pattern.include?("*")}
 
         fix_id_pipelines = fix_pids.map { |id|
-          response.has_key?(id) ? {id => response[id]}: {}
+          response.has_key?(id) ? {id => response[id]} : {}
         }.reduce({}, :merge)
         fix_id_pipelines.keys.map { |id| response.delete(id)}
 
@@ -256,7 +256,7 @@ def get_wildcard_pipelines(pipeline_ids, response)
             wildcard_matched_patterns << pattern if matched
             matched
           }
-          found_pattern ? {id => response[id]}: {}
+          found_pattern ? {id => response[id]} : {}
         }.reduce({}, :merge)
 
         log_pipeline_not_found((fix_pids - fix_id_pipelines.keys) + (wildcard_patterns - wildcard_matched_patterns.to_a))
diff --git a/x-pack/lib/filters/geoip/database_metadata.rb b/x-pack/lib/filters/geoip/database_metadata.rb
index 62f6c3b19e1..5a6a5527005 100644
--- a/x-pack/lib/filters/geoip/database_metadata.rb
+++ b/x-pack/lib/filters/geoip/database_metadata.rb
@@ -55,7 +55,7 @@ def update(metadata)
   end
 
   def get_all
-    file_exist?(@metadata_path)? ::CSV.read(@metadata_path, headers: false) : Array.new
+    file_exist?(@metadata_path) ? ::CSV.read(@metadata_path, headers: false) : Array.new
   end
 
   # Give rows of metadata that match/exclude the type
diff --git a/x-pack/lib/filters/geoip/download_manager.rb b/x-pack/lib/filters/geoip/download_manager.rb
index 7d4b437e1ff..938888b476e 100644
--- a/x-pack/lib/filters/geoip/download_manager.rb
+++ b/x-pack/lib/filters/geoip/download_manager.rb
@@ -125,7 +125,7 @@ def rest_client
                     request_timeout: 15,
                     connect_timeout: 5
                   }
-                  client_options[:proxy]=ENV['http_proxy'] if ENV.include?('http_proxy')
+                  client_options[:proxy] = ENV['http_proxy'] if ENV.include?('http_proxy')
                   Manticore::Client.new(client_options)
                 end
   end
diff --git a/x-pack/lib/filters/geoip/util.rb b/x-pack/lib/filters/geoip/util.rb
index eecbbdfbbcb..e7a3eb14feb 100644
--- a/x-pack/lib/filters/geoip/util.rb
+++ b/x-pack/lib/filters/geoip/util.rb
@@ -41,7 +41,7 @@ def file_exist?(path)
       end
 
       def md5(file_path)
-        file_exist?(file_path) ? Digest::MD5.hexdigest(::File.read(file_path)): ""
+        file_exist?(file_path) ? Digest::MD5.hexdigest(::File.read(file_path)) : ""
       end
 
       def error_details(e, logger)
diff --git a/x-pack/lib/license_checker/license_manager.rb b/x-pack/lib/license_checker/license_manager.rb
index 2377ef7d136..3a65c9dcc9b 100644
--- a/x-pack/lib/license_checker/license_manager.rb
+++ b/x-pack/lib/license_checker/license_manager.rb
@@ -17,7 +17,7 @@ class LicenseManager
 
       attr_reader :last_updated
 
-      def initialize(reader, feature, refresh_period=30, refresh_unit=TimeUnit::SECONDS)
+      def initialize(reader, feature, refresh_period = 30, refresh_unit = TimeUnit::SECONDS)
         @license_reader = reader
         @feature = feature
 
diff --git a/x-pack/lib/license_checker/licensed.rb b/x-pack/lib/license_checker/licensed.rb
index 5f3bb005a6b..80cd9a983d6 100644
--- a/x-pack/lib/license_checker/licensed.rb
+++ b/x-pack/lib/license_checker/licensed.rb
@@ -30,7 +30,7 @@ module LicenseChecker
     module Licensed
       include LogStash::Util::Loggable
 
-      def setup_license_checker(feature, refresh_period=30, refresh_unit=TimeUnit::SECONDS)
+      def setup_license_checker(feature, refresh_period = 30, refresh_unit = TimeUnit::SECONDS)
         @feature = feature
 
         license_manager = LogStash::LicenseChecker::LicenseManager.new(license_reader, feature, refresh_period, refresh_unit)
@@ -52,7 +52,7 @@ def populate_license_state(xpack_info)
         { :state => :error, :log_level => :error, :log_message => "Licensing is not currently setup for #{@feature}, please contact support"}
       end
 
-      def with_license_check(raise_on_error=false)
+      def with_license_check(raise_on_error = false)
         current_license_state = get_current_license_state
         message = current_license_state[:log_message]
 
diff --git a/x-pack/lib/license_checker/x_pack_info.rb b/x-pack/lib/license_checker/x_pack_info.rb
index 516af92946f..dc425801de0 100644
--- a/x-pack/lib/license_checker/x_pack_info.rb
+++ b/x-pack/lib/license_checker/x_pack_info.rb
@@ -14,7 +14,7 @@ module LicenseChecker
     class XPackInfo
       include LogStash::Util::Loggable
 
-      def initialize(license, features = nil, installed=true, failed = false)
+      def initialize(license, features = nil, installed = true, failed = false)
         @license = license
         @installed = installed
         @features = features
diff --git a/x-pack/lib/monitoring/inputs/metrics.rb b/x-pack/lib/monitoring/inputs/metrics.rb
index 3b820283531..0514b2e31c2 100644
--- a/x-pack/lib/monitoring/inputs/metrics.rb
+++ b/x-pack/lib/monitoring/inputs/metrics.rb
@@ -150,7 +150,7 @@ def update_states
       return unless @agent
 
       # Update once every 10m
-      time_for_update = @last_states_update.nil? || @last_states_update < (Time.now - 60*10)
+      time_for_update = @last_states_update.nil? || @last_states_update < (Time.now - 60 * 10)
 
       pipeline_hashes = []
       agent.running_pipelines.each do |pipeline_id, pipeline|
diff --git a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
index a70f85648e9..0221a4b8a53 100644
--- a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
+++ b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
@@ -15,7 +15,7 @@ def initialize(global_stats, snapshot, cluster_uuid)
       @webserver_enabled = LogStash::SETTINGS.get_value("api.enabled")
     end
 
-    def make(agent, extended_performance_collection=true, collection_interval=10)
+    def make(agent, extended_performance_collection = true, collection_interval = 10)
       metrics_doc = {
         "timestamp" => @snapshot.created_at,
         "logstash" => fetch_node_stats(agent, @metric_store),
@@ -86,7 +86,7 @@ def format_os_stats(stats)
         cpuacct = stats.extract_metrics([:os, :cgroup, :cpuacct], :control_group, :usage_nanos)
         cgroups_stats = stats.extract_metrics([:os, :cgroup, :cpu, :stat], :number_of_elapsed_periods, :number_of_times_throttled, :time_throttled_nanos)
         control_group = stats.get_shallow(:os, :cgroup, :cpu, :control_group).value
-        {:cpu => load_average, :cgroup => {:cpuacct =>  cpuacct, :cpu => {:control_group => control_group, :stat => cgroups_stats}}}
+        {:cpu => load_average, :cgroup => {:cpuacct => cpuacct, :cpu => {:control_group => control_group, :stat => cgroups_stats}}}
       else
         {:cpu => load_average}
       end
diff --git a/x-pack/lib/monitoring/monitoring.rb b/x-pack/lib/monitoring/monitoring.rb
index e06b5f12958..18e508c39e4 100644
--- a/x-pack/lib/monitoring/monitoring.rb
+++ b/x-pack/lib/monitoring/monitoring.rb
@@ -216,7 +216,7 @@ def generate_pipeline_config(settings)
       end
 
       private
-      def retrieve_collection_settings(settings, prefix="")
+      def retrieve_collection_settings(settings, prefix = "")
         opt = {}
         opt[:collection_interval] = settings.get("#{prefix}monitoring.collection.interval").to_nanos
         opt[:collection_timeout_interval] = settings.get("#{prefix}monitoring.collection.timeout_interval").to_nanos
diff --git a/x-pack/modules/azure/lib/filters/azure_event.rb b/x-pack/modules/azure/lib/filters/azure_event.rb
index 60cf28f7093..4486b58e239 100644
--- a/x-pack/modules/azure/lib/filters/azure_event.rb
+++ b/x-pack/modules/azure/lib/filters/azure_event.rb
@@ -120,7 +120,7 @@ def add_json_event_properties(event)
 
       CONST_FIELD_NAMES = {
           "SUBSCRIPTIONS" => "subscription",
-          "RESOURCEGROUPS" =>"resource_group",
+          "RESOURCEGROUPS" => "resource_group",
           "PROVIDERS" => "provider"
       }.freeze
 
diff --git a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
index e8cc3e82315..cc44f77bd07 100644
--- a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
+++ b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
@@ -6,7 +6,7 @@ module Elasticsearch
   module API
     module Actions
       # Update the password of the specified user
-      def update_password(arguments={})
+      def update_password(arguments = {})
         method = HTTP_PUT
         path   = Utils.__pathify '_security/user/',
                                  Utils.__escape(arguments[:user]),
diff --git a/x-pack/qa/integration/support/helpers.rb b/x-pack/qa/integration/support/helpers.rb
index f4b4af8e5f1..ac51503a6e7 100644
--- a/x-pack/qa/integration/support/helpers.rb
+++ b/x-pack/qa/integration/support/helpers.rb
@@ -101,7 +101,7 @@ def es_version
   [major.to_i, minor.to_i]
 end
 
-def push_elasticsearch_config(pipeline_id, config, version="1")
+def push_elasticsearch_config(pipeline_id, config, version = "1")
   major, minor = es_version
   if major >= 8 || (major == 7 && minor >= 10)
     elasticsearch_client.perform_request(:put, "_logstash/pipeline/#{pipeline_id}", {},
diff --git a/x-pack/spec/config_management/elasticsearch_source_spec.rb b/x-pack/spec/config_management/elasticsearch_source_spec.rb
index 55083b06407..012421f9109 100644
--- a/x-pack/spec/config_management/elasticsearch_source_spec.rb
+++ b/x-pack/spec/config_management/elasticsearch_source_spec.rb
@@ -48,7 +48,7 @@
       "license" => {
         "status" => license_status,
         "uid" => "9a48c67c-ce2c-4169-97bf-37d324b8ab80",
-        "type"=> license_type,
+        "type" => license_type,
         "expiry_date_in_millis" => license_expiry_in_millis
       },
       "features" => {
@@ -99,31 +99,31 @@
   let(:es_version_7_9_response) { generate_es_version_response("7.9.1") }
 
   let(:elasticsearch_7_9_err_response) {
-    {"error"=>
-         {"root_cause"=>
-              [{"type"=>"parse_exception",
-                "reason"=>"request body or source parameter is required"}],
-          "type"=>"parse_exception",
-          "reason"=>"request body or source parameter is required"},
-     "status"=>400}
+    {"error" =>
+         {"root_cause" =>
+              [{"type" => "parse_exception",
+                "reason" => "request body or source parameter is required"}],
+          "type" => "parse_exception",
+          "reason" => "request body or source parameter is required"},
+     "status" => 400}
   }
 
   let(:elasticsearch_8_err_response) {
-    {"error"=>
-         {"root_cause"=>
-              [{"type"=>"index_not_found_exception",
-                "reason"=>"no such index [.logstash]",
-                "resource.type"=>"index_expression",
-                "resource.id"=>".logstash",
-                "index_uuid"=>"_na_",
-                "index"=>".logstash"}],
-          "type"=>"index_not_found_exception",
-          "reason"=>"no such index [.logstash]",
-          "resource.type"=>"index_expression",
-          "resource.id"=>".logstash",
-          "index_uuid"=>"_na_",
-          "index"=>".logstash"},
-     "status"=>404}
+    {"error" =>
+         {"root_cause" =>
+              [{"type" => "index_not_found_exception",
+                "reason" => "no such index [.logstash]",
+                "resource.type" => "index_expression",
+                "resource.id" => ".logstash",
+                "index_uuid" => "_na_",
+                "index" => ".logstash"}],
+          "type" => "index_not_found_exception",
+          "reason" => "no such index [.logstash]",
+          "resource.type" => "index_expression",
+          "resource.id" => ".logstash",
+          "index_uuid" => "_na_",
+          "index" => ".logstash"},
+     "status" => 404}
   }
 
   before do
@@ -225,7 +225,7 @@
       let(:es_version_8_3) { { major: 8, minor: 3} }
       let(:es_version_9_0) { { major: 9, minor: 0} }
       let(:pipeline_id) { "super_generator" }
-      let(:elasticsearch_response) { {"#{pipeline_id}"=> {"pipeline"=> "#{config}"}} }
+      let(:elasticsearch_response) { {"#{pipeline_id}" => {"pipeline" => "#{config}"}} }
       let(:all_pipelines) { JSON.parse(::File.read(::File.join(::File.dirname(__FILE__), "fixtures", "pipelines.json"))) }
       let(:mock_logger) { double("fetcher's logger") }
 
@@ -236,19 +236,19 @@
       it "#fetch_config from ES v8.2" do
         expect(mock_client).to receive(:get).with("#{described_class::SYSTEM_INDICES_API_PATH}/").and_return(elasticsearch_response.clone)
         expect(subject.fetch_config(es_version_8_2, [pipeline_id], mock_client)).to eq(elasticsearch_response)
-        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline"=>"#{config}"})
+        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline" => "#{config}"})
       end
 
       it "#fetch_config from ES v8.3" do
         expect(mock_client).to receive(:get).with("#{described_class::SYSTEM_INDICES_API_PATH}?id=#{pipeline_id}").and_return(elasticsearch_response.clone)
         expect(subject.fetch_config(es_version_8_3, [pipeline_id], mock_client)).to eq(elasticsearch_response)
-        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline"=>"#{config}"})
+        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline" => "#{config}"})
       end
 
       it "#fetch_config from ES v9.0" do
         expect(mock_client).to receive(:get).with("#{described_class::SYSTEM_INDICES_API_PATH}?id=#{pipeline_id}").and_return(elasticsearch_response.clone)
         expect(subject.fetch_config(es_version_9_0, [pipeline_id], mock_client)).to eq(elasticsearch_response)
-        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline"=>"#{config}"})
+        expect(subject.get_single_pipeline_setting(pipeline_id)).to eq({"pipeline" => "#{config}"})
       end
 
       it "#fetch_config should raise error" do
@@ -311,28 +311,28 @@
       let(:pipeline_id) { "super_generator" }
       let(:another_pipeline_id) { "another_generator" }
       let(:elasticsearch_response) {
-        {"docs"=>
-             [{"_index"=>".logstash",
-               "_id"=>"#{pipeline_id}",
-               "_version"=>2,
-               "_seq_no"=>2,
-               "_primary_term"=>1,
-               "found"=>true,
-               "_source"=>
-                   {"pipeline"=> "#{config}"}},
-              {"_index"=>".logstash",
-               "_id"=>"#{another_pipeline_id}",
-               "_version"=>2,
-               "_seq_no"=>3,
-               "_primary_term"=>1,
-               "found"=>true,
-               "_source"=>
-                   {"pipeline"=> "#{another_config}"}},
-              {"_index"=>".logstash", "_id"=>"not_exists", "found"=>false}]}
+        {"docs" =>
+             [{"_index" => ".logstash",
+               "_id" => "#{pipeline_id}",
+               "_version" => 2,
+               "_seq_no" => 2,
+               "_primary_term" => 1,
+               "found" => true,
+               "_source" =>
+                   {"pipeline" => "#{config}"}},
+              {"_index" => ".logstash",
+               "_id" => "#{another_pipeline_id}",
+               "_version" => 2,
+               "_seq_no" => 3,
+               "_primary_term" => 1,
+               "found" => true,
+               "_source" =>
+                   {"pipeline" => "#{another_config}"}},
+              {"_index" => ".logstash", "_id" => "not_exists", "found" => false}]}
       }
 
       let(:formatted_es_response) {
-        {"super_generator"=>{"_index"=>".logstash", "_id"=>"super_generator", "_version"=>2, "_seq_no"=>2, "_primary_term"=>1, "found"=>true, "_source"=>{"pipeline"=>"input { generator { count => 100 } tcp { port => 6005 } } output {  }}"}}}
+        {"super_generator" => {"_index" => ".logstash", "_id" => "super_generator", "_version" => 2, "_seq_no" => 2, "_primary_term" => 1, "found" => true, "_source" => {"pipeline" => "input { generator { count => 100 } tcp { port => 6005 } } output {  }}"}}}
       }
 
       let(:mock_logger) { double("fetcher's logger") }
@@ -430,7 +430,7 @@
 
         # invalid settings to be ignored...
         "pipeline.output.workers"    => "99",
-        "nonsensical.invalid.setting"=> "-9999",
+        "nonsensical.invalid.setting" => "-9999",
       }
     end
     let(:pipeline_metadata) do
@@ -484,10 +484,10 @@
 
     describe "system indices [8] and legacy api [7.9]" do
       [8, 7.9].each { |es_version|
-        let(:elasticsearch_response) { (es_version >= 8)? elasticsearch_8_response: elasticsearch_7_9_response }
+        let(:elasticsearch_response) { (es_version >= 8) ? elasticsearch_8_response : elasticsearch_7_9_response }
 
         before :each do
-          allow(mock_client).to receive(:get).with("/").and_return(es_version >= 8? es_version_response: es_version_7_9_response)
+          allow(mock_client).to receive(:get).with("/").and_return(es_version >= 8 ? es_version_response : es_version_7_9_response)
         end
 
         context "with one `pipeline_id` configured [#{es_version}]" do
@@ -575,11 +575,11 @@
           describe "security enabled/disabled in Elasticsearch [#{es_version}]" do
             let(:xpack_response) do
               {
-                  "license"=> {
-                      "status"=> license_status,
-                      "uid"=> "9a48c67c-ce2c-4169-97bf-37d324b8ab80",
-                      "type"=> license_type,
-                      "expiry_date_in_millis"=> license_expiry_in_millis
+                  "license" => {
+                      "status" => license_status,
+                      "uid" => "9a48c67c-ce2c-4169-97bf-37d324b8ab80",
+                      "type" => license_type,
+                      "expiry_date_in_millis" => license_expiry_in_millis
                   },
                   "features" => {
                       "security" => {
@@ -774,19 +774,19 @@
   end
 
   def generate_es_version_response(version)
-    {"name"=>"MacBook-Pro",
-     "cluster_name"=>"elasticsearch",
-     "cluster_uuid"=>"YgpKq8VkTJuGTSb9aidlIA",
-     "version"=>
-         {"number"=>"#{version}",
-          "build_flavor"=>"default",
-          "build_type"=>"tar",
-          "build_hash"=>"26eb422dc55236a1c5625e8a73e5d866e54610a2",
-          "build_date"=>"2020-09-24T09:37:06.459350Z",
-          "build_snapshot"=>true,
-          "lucene_version"=>"8.7.0",
-          "minimum_wire_compatibility_version"=>"7.10.0",
-          "minimum_index_compatibility_version"=>"7.0.0"},
-     "tagline"=>"You Know, for Search"}
+    {"name" => "MacBook-Pro",
+     "cluster_name" => "elasticsearch",
+     "cluster_uuid" => "YgpKq8VkTJuGTSb9aidlIA",
+     "version" =>
+         {"number" => "#{version}",
+          "build_flavor" => "default",
+          "build_type" => "tar",
+          "build_hash" => "26eb422dc55236a1c5625e8a73e5d866e54610a2",
+          "build_date" => "2020-09-24T09:37:06.459350Z",
+          "build_snapshot" => true,
+          "lucene_version" => "8.7.0",
+          "minimum_wire_compatibility_version" => "7.10.0",
+          "minimum_index_compatibility_version" => "7.0.0"},
+     "tagline" => "You Know, for Search"}
   end
 end
diff --git a/x-pack/spec/license_checker/license_reader_spec.rb b/x-pack/spec/license_checker/license_reader_spec.rb
index f9b731f0de8..ff5c58d7d30 100644
--- a/x-pack/spec/license_checker/license_reader_spec.rb
+++ b/x-pack/spec/license_checker/license_reader_spec.rb
@@ -100,7 +100,7 @@
       end
     end
     context 'when client raises a 404' do
-      let(:exception_404)do
+      let(:exception_404) do
         LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError.new(404, '', '', '')
       end
       before(:each) do
