diff --git a/logstash-core/lib/logstash/logging/logger.rb b/logstash-core/lib/logstash/logging/logger.rb
index 5af0886bf84..cec53bfbc1b 100644
--- a/logstash-core/lib/logstash/logging/logger.rb
+++ b/logstash-core/lib/logstash/logging/logger.rb
@@ -73,7 +73,7 @@ def self.configure_logging(level, path = LogManager::ROOT_LOGGER_NAME)
         raise ArgumentError, "invalid level[#{level}] for logger[#{path}]"
       end
 
-      def self.initialize(config_location)
+      def self.reconfigure(config_location)
         @@config_mutex.synchronize do
           config_location_uri = URI.create(config_location)
           file_path = config_location_uri.path
@@ -92,6 +92,9 @@ def self.initialize(config_location)
         end
       end
 
+      # until dev_utils/rspec/spec_helper is changed, we need to have both methods
+      singleton_class.send(:alias_method, :initialize, :reconfigure)
+
       def self.get_logging_context
         return  LoggerContext.getContext(false)
       end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 1126f287d92..49fc9b4e50c 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -249,7 +249,7 @@ def execute
     java.lang.System.setProperty("ls.log.level", setting("log.level"))
     unless java.lang.System.getProperty("log4j.configurationFile")
       log4j_config_location = ::File.join(setting("path.settings"), "log4j2.properties")
-      LogStash::Logging::Logger::initialize("file:///" + log4j_config_location)
+      LogStash::Logging::Logger::reconfigure("file:///" + log4j_config_location)
     end
     # override log level that may have been introduced from a custom log4j config file
     LogStash::Logging::Logger::configure_logging(setting("log.level"))
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 15c43b0bd4c..22a9ecb4aa6 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -35,7 +35,7 @@
     allow(LogStash::Logging::Logger).to receive(:configure_logging) do |level, path|
       allow(logger).to receive(:level).and_return(level.to_sym)
     end
-
+    allow(LogStash::Logging::Logger).to receive(:reconfigure).with(any_args)
     # Make sure we don't start a real pipeline here.
     # because we cannot easily close the pipeline
     allow(LogStash::Agent).to receive(:new).with(any_args).and_return(agent)
@@ -43,10 +43,6 @@
     allow(agent).to receive(:shutdown)
   end
 
-  after :each do
-    LogStash::Logging::Logger::configure_logging("info")
-  end
-
   describe "argument precedence" do
     let(:config) { "input {} output {}" }
     let(:cli_args) { ["-e", config, "-w", "20"] }
