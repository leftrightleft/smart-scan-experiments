diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/AckedBatch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/AckedBatch.java
index fe76bc5592a..07eade22812 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/AckedBatch.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/AckedBatch.java
@@ -1,8 +1,9 @@
 package org.logstash.ackedqueue;
 
 import java.io.IOException;
+import org.jruby.Ruby;
+import org.jruby.RubyBoolean;
 import org.jruby.RubyHash;
-import org.jruby.runtime.ThreadContext;
 import org.logstash.Event;
 import org.logstash.ext.JrubyEventExtLibrary;
 
@@ -15,11 +16,12 @@ public static AckedBatch create(Batch batch) {
         return ackedBatch;
     }
 
-    public RubyHash toRubyHash(ThreadContext context) {
-        final RubyHash result = RubyHash.newHash(context.runtime);
-        this.batch.getElements().forEach(e -> result.put(
-            JrubyEventExtLibrary.RubyEvent.newRubyEvent(context.runtime, (Event) e),
-            context.tru
+    public RubyHash toRubyHash(final Ruby runtime) {
+        final RubyBoolean trueValue = runtime.getTrue();
+        final RubyHash result = RubyHash.newHash(runtime);
+        this.batch.getElements().forEach(e -> result.fastASet(
+            JrubyEventExtLibrary.RubyEvent.newRubyEvent(runtime, (Event) e),
+            trueValue
             )
         );
         return result;
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/AckedReadBatch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/AckedReadBatch.java
index 599c4022409..09e025b47c0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/AckedReadBatch.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/AckedReadBatch.java
@@ -28,21 +28,20 @@ public static AckedReadBatch create(final JRubyAckedQueueExt queue, final int si
     }
 
     private AckedReadBatch(final JRubyAckedQueueExt queue, final int size, final long timeout) {
-        ThreadContext context = RUBY.getCurrentContext();
-        AckedBatch batch = null;
+        AckedBatch batch;
         try {
             batch = queue.readBatch(size, timeout);
         } catch (IOException e) {
             throw new IllegalStateException(e);
         }
         if (batch == null) {
-            originals = RubyHash.newHash(context.runtime);
+            originals = RubyHash.newHash(RUBY);
             ackedBatch = null;
         } else {
             ackedBatch = batch;
-            originals = ackedBatch.toRubyHash(context);
+            originals = ackedBatch.toRubyHash(RUBY);
         }
-        generated = RubyHash.newHash(context.runtime);
+        generated = RubyHash.newHash(RUBY);
     }
 
     @Override
@@ -55,18 +54,17 @@ public void merge(final IRubyObject event) {
     @SuppressWarnings({"unchecked", "rawtypes"})
     @Override
     public RubyArray to_a() {
-        ThreadContext context = RUBY.getCurrentContext();
-        final RubyArray result = context.runtime.newArray(filteredSize());
+        final RubyArray result = RUBY.newArray(filteredSize());
         for (final JrubyEventExtLibrary.RubyEvent event
                 : (Collection<JrubyEventExtLibrary.RubyEvent>) originals.keys()) {
             if (!MemoryReadBatch.isCancelled(event)) {
-                result.add(event);
+                result.append(event);
             }
         }
         for (final JrubyEventExtLibrary.RubyEvent event
                 : (Collection<JrubyEventExtLibrary.RubyEvent>) generated.keys()) {
             if (!MemoryReadBatch.isCancelled(event)) {
-                result.add(event);
+                result.append(event);
             }
         }
         return result;
diff --git a/logstash-core/src/main/java/org/logstash/execution/MemoryReadBatch.java b/logstash-core/src/main/java/org/logstash/execution/MemoryReadBatch.java
index c6854044004..814bca75a31 100644
--- a/logstash-core/src/main/java/org/logstash/execution/MemoryReadBatch.java
+++ b/logstash-core/src/main/java/org/logstash/execution/MemoryReadBatch.java
@@ -1,7 +1,6 @@
 package org.logstash.execution;
 
 import org.jruby.RubyArray;
-import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.ext.JrubyEventExtLibrary;
 
@@ -32,11 +31,10 @@ public static MemoryReadBatch create() {
     @Override
     @SuppressWarnings({"rawtypes"})
     public RubyArray to_a() {
-        ThreadContext context = RUBY.getCurrentContext();
-        final RubyArray result = context.runtime.newArray(events.size());
+        final RubyArray result = RUBY.newArray(events.size());
         for (final IRubyObject event : events) {
             if (!isCancelled(event)) {
-                result.add(event);
+                result.append(event);
             }
         }
         return result;
