diff --git a/Dockerfile b/Dockerfile
index 56dc10b8fc6..233f91d3dc9 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -22,7 +22,6 @@ LABEL retention="keep"
 
 ADD gradlew /opt/logstash/gradlew
 ADD gradle/wrapper /opt/logstash/gradle/wrapper
-ADD buildSrc /opt/logstash/buildSrc
 RUN /opt/logstash/gradlew wrapper
 
 ADD versions.yml /opt/logstash/versions.yml
@@ -33,6 +32,7 @@ ADD CONTRIBUTORS /opt/logstash/CONTRIBUTORS
 ADD Gemfile.template /opt/logstash/Gemfile.template
 ADD Rakefile /opt/logstash/Rakefile
 ADD build.gradle /opt/logstash/build.gradle
+ADD rubyUtils.gradle /opt/logstash/rubyUtils.gradle
 ADD rakelib /opt/logstash/rakelib
 ADD config /opt/logstash/config
 ADD spec /opt/logstash/spec
diff --git a/build.gradle b/build.gradle
index f3a13e0a5c1..734cdc17bed 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,6 @@ buildscript {
         }
     }
     dependencies {
-        classpath 'org.yaml:snakeyaml:1.23'
         classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.7.1"
     }
 }
@@ -16,16 +15,11 @@ plugins {
 }
 
 apply plugin: 'de.undercouch.download'
+apply from: "rubyUtils.gradle"
 
 
 import de.undercouch.gradle.tasks.download.Download
-import de.undercouch.gradle.tasks.download.Verify
 import groovy.json.JsonSlurper
-import org.logstash.gradle.RubyGradleUtils
-import org.yaml.snakeyaml.Yaml
-
-import java.nio.file.Files
-import java.nio.file.Paths
 
 allprojects {
   group = 'org.logstash'
@@ -100,29 +94,12 @@ subprojects {
 }
 
 // fetch version from Logstash's master versions.yml file
-def versionMap = (Map) (new Yaml()).load(new File("${projectDir}/versions.yml").text)
 version = versionMap['logstash-core']
 def versionQualifier = System.getenv('VERSION_QUALIFIER')
 if (versionQualifier) {
     version = "$version-$versionQualifier"
 }
 
-String jRubyURL
-String jRubyVersion
-String jRubySha1
-Boolean doChecksum
-
-if (versionMap["jruby-runtime-override"]) {
-    jRubyVersion = versionMap["jruby-runtime-override"]["version"]
-    jRubyURL = versionMap["jruby-runtime-override"]["url"]
-    doChecksum = false
-} else {
-    jRubyVersion = versionMap["jruby"]["version"]
-    jRubySha1 = versionMap["jruby"]["sha1"]
-    jRubyURL = "https://repo1.maven.org/maven2/org/jruby/jruby-dist/${jRubyVersion}/jruby-dist-${jRubyVersion}-bin.tar.gz"
-    doChecksum = true
-}
-
 // Tasks
 
 clean {
@@ -138,8 +115,6 @@ clean {
 
 task bootstrap {}
 
-RubyGradleUtils rubyGradleUtils = new RubyGradleUtils(buildDir, projectDir)
-
 project(":logstash-core") {
   ["rubyTests", "test"].each { tsk ->
     tasks.getByPath(":logstash-core:" + tsk).configure {
@@ -148,81 +123,6 @@ project(":logstash-core") {
   }
 }
 
-def jrubyTarPath = "${projectDir}/vendor/_/jruby-dist-${jRubyVersion}-bin.tar.gz"
-
-def customJRubyDir = project.hasProperty("custom.jruby.path") ? project.property("custom.jruby.path") : ""
-def customJRubyVersion = customJRubyDir == "" ? "" : Files.readAllLines(Paths.get(customJRubyDir, "VERSION")).get(0).trim()
-def customJRubyTar = customJRubyDir == "" ? "" : (customJRubyDir + "/maven/jruby-dist/target/jruby-dist-${customJRubyVersion}-bin.tar.gz")
-
-task downloadJRuby(type: Download) {
-    description "Download JRuby artifact from this specific URL: ${jRubyURL}"
-    src jRubyURL
-    onlyIfNewer true
-    inputs.file("${projectDir}/versions.yml")
-    outputs.file(jrubyTarPath)
-    dest new File("${projectDir}/vendor/_", "jruby-dist-${jRubyVersion}-bin.tar.gz")
-}
-
-downloadJRuby.onlyIf { customJRubyDir == "" }
-
-task verifyFile(dependsOn: downloadJRuby, type: Verify) {
-    description "Verify the SHA1 of the download JRuby artifact"
-    inputs.file(jrubyTarPath)
-    outputs.file(jrubyTarPath)
-    src new File(jrubyTarPath)
-    algorithm 'SHA-1'
-    checksum jRubySha1
-}
-
-verifyFile.onlyIf { customJRubyDir == "" }
-
-task buildCustomJRuby(type: Exec) {
-  description "Build tar.gz and .jar artifacts from JRuby source directory"
-  workingDir (customJRubyDir == "" ? "./" : customJRubyDir)
-  commandLine './mvnw', 'clean', 'install', '-Pdist', '-Pcomplete'
-  standardOutput = new ByteArrayOutputStream()
-  errorOutput = new ByteArrayOutputStream()
-  ext.output = {
-    standardOutput.toString() + errorOutput.toString()
-  }
-}
-
-buildCustomJRuby.onlyIf { customJRubyDir != "" }
-
-task installCustomJRuby(dependsOn: buildCustomJRuby, type: Copy) {
-  description "Install custom built JRuby in the vendor directory"
-  inputs.file(customJRubyTar)
-  outputs.dir("${projectDir}/vendor/jruby")
-  from tarTree(customJRubyTar == "" ? jrubyTarPath : customJRubyTar)
-  eachFile { f ->
-    f.path = f.path.replaceFirst("^jruby-${customJRubyVersion}", '')
-  }
-  exclude "**/stdlib/rdoc/**"
-  includeEmptyDirs = false
-  into "${projectDir}/vendor/jruby"
-}
-
-installCustomJRuby.onlyIf { customJRubyDir != "" }
-
-task downloadAndInstallJRuby(dependsOn: [verifyFile, installCustomJRuby], type: Copy) {
-    description "Install JRuby in the vendor directory"
-    inputs.file(jrubyTarPath)
-    outputs.dir("${projectDir}/vendor/jruby")
-    from tarTree(downloadJRuby.dest)
-    eachFile { f ->
-      f.path = f.path.replaceFirst("^jruby-${jRubyVersion}", '')
-    }
-    exclude "**/stdlib/rdoc/**"
-    includeEmptyDirs = false
-    into "${projectDir}/vendor/jruby"
-    doLast {
-      rubyGradleUtils.gem("rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
-      rubyGradleUtils.gem("json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    }
-}
-
-downloadAndInstallJRuby.onlyIf { customJRubyDir == "" }
-
 task installDefaultGems(dependsOn: downloadAndInstallJRuby) {
   inputs.files file("${projectDir}/Gemfile.template")
   inputs.files fileTree("${projectDir}/rakelib")
@@ -232,9 +132,9 @@ task installDefaultGems(dependsOn: downloadAndInstallJRuby) {
   outputs.dir("${projectDir}/logstash-core/lib/jars")
   outputs.dir("${projectDir}/vendor/bundle/jruby/2.5.0")
   doLast {
-    rubyGradleUtils.gem("rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.gem("json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.rake('plugin:install-default')
+      gem(projectDir, buildDir, "rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      gem(projectDir, buildDir, "json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      rake(projectDir, buildDir, 'plugin:install-default')
   }
 }
 
@@ -251,9 +151,9 @@ task installTestGems(dependsOn: assemblyDeps) {
   outputs.dir("${projectDir}/logstash-core/lib/jars")
   outputs.dir("${projectDir}/vendor/bundle/jruby/2.5.0")
   doLast {
-    rubyGradleUtils.gem("rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.gem("json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.rake('plugin:install-development-dependencies')
+      gem(projectDir, buildDir, "rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      gem(projectDir, buildDir, "json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      rake(projectDir, buildDir, 'plugin:install-development-dependencies')
   }
 }
 
@@ -269,8 +169,8 @@ task assembleTarDistribution(dependsOn: assemblyDeps) {
   inputs.files fileTree("${projectDir}/x-pack")
   outputs.files file("${buildDir}/logstash-${project.version}-SNAPSHOT.tar.gz")
   doLast {
-    rubyGradleUtils.gem("rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.rake('artifact:tar')
+      gem(projectDir, buildDir, "rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      rake(projectDir, buildDir, 'artifact:tar')
   }
 }
 
@@ -284,7 +184,7 @@ task assembleOssTarDistribution(dependsOn: assemblyDeps) {
   inputs.files fileTree("${projectDir}/logstash-core/lib")
   inputs.files fileTree("${projectDir}/logstash-core/src")
   doLast {
-    rubyGradleUtils.rake('artifact:tar_oss')
+      rake(projectDir, buildDir, 'artifact:tar_oss')
   }
 }
 
@@ -300,7 +200,7 @@ task assembleZipDistribution(dependsOn: assemblyDeps) {
   inputs.files fileTree("${projectDir}/x-pack")
   outputs.files file("${buildDir}/logstash-${project.version}.zip")
   doLast {
-    rubyGradleUtils.rake('artifact:zip')
+      rake(projectDir, buildDir, 'artifact:zip')
   }
 }
 
@@ -315,7 +215,8 @@ task assembleOssZipDistribution(dependsOn: assemblyDeps) {
   inputs.files fileTree("${projectDir}/logstash-core/src")
   outputs.files file("${buildDir}/logstash-${project.version}.zip")
   doLast {
-    rubyGradleUtils.rake('artifact:zip_oss')
+      rake(projectDir, buildDir, 'artifact:zip_oss')
+
   }
 }
 
@@ -336,7 +237,7 @@ def qaBundleBin = "${qaBundledGemPath}/bin/bundle"
 task installIntegrationTestBundler(dependsOn: unpackTarDistribution) {
   outputs.files fileTree("${qaBundledGemPath}/gems/bundler-1.17.1")
   doLast {
-    rubyGradleUtils.gem("bundler", "1.17.1", qaBundledGemPath)
+      gem(projectDir, buildDir, "bundler", "1.17.1", qaBundledGemPath)
   }
 }
 
@@ -349,10 +250,11 @@ task installIntegrationTestGems(dependsOn: installIntegrationTestBundler) {
   outputs.files fileTree("${qaVendorPath}")
   outputs.files file("${projectDir}/qa/integration/Gemfile.lock")
   doLast {
-    rubyGradleUtils.bundle(
-      "${projectDir}/qa/integration", qaBundleBin, ['install', '--path', qaVendorPath],
-      [LS_GEM_PATH: qaBundledGemPath, LS_GEM_HOME: qaBundledGemPath]
-    )
+      bundleWithEnv(
+        projectDir, buildDir,
+        "${projectDir}/qa/integration", qaBundleBin, ['install', '--path', qaVendorPath],
+        [LS_GEM_PATH: qaBundledGemPath, LS_GEM_HOME: qaBundledGemPath]
+      )
   }
 }
 
@@ -412,12 +314,10 @@ task generateLicenseReportInputs() {
 
 task generatePluginsVersion(dependsOn: bootstrap) {
   doLast {
-    rubyGradleUtils.rake('generate_plugins_version')
+      rake(projectDir, buildDir, 'generate_plugins_version')
   }
 }
 
-// If you are running a JRuby snapshot we will skip the integrity check.
-verifyFile.onlyIf { doChecksum }
 bootstrap.dependsOn installTestGems
 
 runIntegrationTests.shouldRunAfter tasks.getByPath(":logstash-core:test")
diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
deleted file mode 100644
index d41a08344f5..00000000000
--- a/buildSrc/build.gradle
+++ /dev/null
@@ -1,12 +0,0 @@
-apply plugin: 'java'
-apply plugin: 'groovy'
-
-group = 'org.logstash.gradle'
-
-repositories {
-  mavenCentral()
-}
-
-dependencies {
-  compile group: 'org.jruby', name: 'jruby-complete', version: '9.2.6.0'
-}
diff --git a/buildSrc/src/main/groovy/org/logstash/gradle/RubyGradleUtils.groovy b/buildSrc/src/main/groovy/org/logstash/gradle/RubyGradleUtils.groovy
deleted file mode 100644
index 53d26e45b4b..00000000000
--- a/buildSrc/src/main/groovy/org/logstash/gradle/RubyGradleUtils.groovy
+++ /dev/null
@@ -1,103 +0,0 @@
-package org.logstash.gradle
-
-import org.jruby.Ruby
-import org.jruby.embed.PathType
-import org.jruby.embed.ScriptingContainer
-
-final class RubyGradleUtils {
-
-  private final File buildDir
-
-  private final File projectDir
-
-  RubyGradleUtils(File buildDir, File projectDir) {
-    this.buildDir = buildDir
-    this.projectDir = projectDir
-  }
-
-  /**
-   * Executes a bundler bin script with given parameters.
-   * @param pwd Current worker directory to execute in
-   * @param bundleBin Bundler Bin Script
-   * @param args CLI Args to Use with Bundler
-   */
-  void bundle(String pwd, String bundleBin, Iterable<String> args) {
-    bundle(pwd, bundleBin, args, Collections.emptyMap())
-  }
-
-  /**
-   * Executes a bundler bin script with given parameters.
-   * @param pwd Current worker directory to execute in
-   * @param bundleBin Bundler Bin Script
-   * @param args CLI Args to Use with Bundler
-   * @param env Environment Variables to Set
-   */
-  void bundle(String pwd, String bundleBin, Iterable<String> args, Map<String, String> env) {
-    executeJruby { ScriptingContainer jruby ->
-      jruby.environment.putAll(env)
-      jruby.currentDirectory = pwd
-      jruby.argv = args.toList().toArray()
-      jruby.runScriptlet(PathType.ABSOLUTE, bundleBin)
-    }
-  }
-
-  /**
-   * Installs a Gem with the given version to the given path.
-   * @param gem Gem Name
-   * @param version Version to Install
-   * @param path Path to Install to
-   */
-  void gem(String gem, String version, String path) {
-    executeJruby { ScriptingContainer jruby ->
-      jruby.currentDirectory = projectDir
-      jruby.runScriptlet(
-        "require 'rubygems/commands/install_command'\n" +
-          "cmd = Gem::Commands::InstallCommand.new\n" +
-          "cmd.handle_options [\"--no-ri\", \"--no-rdoc\", '${gem}', '-v', '${version}', '-i', '${path}']\n" +
-          "begin \n" +
-          "  cmd.execute\n" +
-          "rescue Gem::SystemExitException => e\n" +
-          "  raise e unless e.exit_code == 0\n" +
-          "end"
-      )
-    }
-  }
-
-  /**
-   * Executes RSpec for a given plugin.
-   * @param plugin Plugin to run specs for
-   * @param args CLI arguments to pass to rspec
-   */
-  void rake(String task) {
-    executeJruby { ScriptingContainer jruby ->
-      jruby.currentDirectory = projectDir
-      jruby.runScriptlet("require 'rake'")
-      jruby.runScriptlet(
-        "rake = Rake.application\n" +
-          "rake.init\n" +
-          "rake.load_rakefile\n" +
-          "rake['${task}'].invoke"
-      )
-    }
-  }
-
-  /**
-   * Executes Closure using a fresh JRuby environment, safely tearing it down afterwards.
-   * @param block Closure to run
-   */
-  Object executeJruby(Closure<?> block) {
-    def jruby = new ScriptingContainer()
-    def env = jruby.environment
-    def gemDir = "${projectDir}/vendor/bundle/jruby/2.5.0".toString()
-    env.put "USE_RUBY", "1"
-    env.put "GEM_HOME", gemDir
-    env.put "GEM_SPEC_CACHE", "${buildDir}/cache".toString()
-    env.put "GEM_PATH", gemDir
-    try {
-      return block(jruby)
-    } finally {
-      jruby.terminate()
-      Ruby.clearGlobalRuntime()
-    }
-  }
-}
diff --git a/buildSrc/src/main/java/org/logstash/gradle/ExecLogOutputStream.java b/buildSrc/src/main/java/org/logstash/gradle/ExecLogOutputStream.java
deleted file mode 100644
index 2f39436bbe4..00000000000
--- a/buildSrc/src/main/java/org/logstash/gradle/ExecLogOutputStream.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package org.logstash.gradle;
-
-import java.io.ByteArrayOutputStream;
-import java.io.PrintStream;
-
-/**
- * Stream that can be used to forward Gradle Exec task output to an arbitrary {@link PrintStream}.
- */
-public final class ExecLogOutputStream extends ByteArrayOutputStream {
-
-    /**
-     * Underlying {@link PrintStream} to flush output to.
-     */
-    private final PrintStream stream;
-
-    /**
-     * Ctor.
-     * @param stream PrintStream to flush to
-     */
-    public ExecLogOutputStream(final PrintStream stream) {
-        this.stream = stream;
-    }
-
-    @Override
-    public synchronized void flush() {
-        stream.print(toString());
-        reset();
-    }
-}
diff --git a/rubyUtils.gradle b/rubyUtils.gradle
new file mode 100644
index 00000000000..603a3356c8b
--- /dev/null
+++ b/rubyUtils.gradle
@@ -0,0 +1,246 @@
+
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'org.yaml:snakeyaml:1.23'
+        classpath "de.undercouch:gradle-download-task:3.2.0"
+        classpath "org.jruby:jruby-complete:9.2.6.0"
+    }
+}
+
+import de.undercouch.gradle.tasks.download.Download
+import de.undercouch.gradle.tasks.download.Verify
+import org.yaml.snakeyaml.Yaml
+
+
+import org.jruby.Ruby
+import org.jruby.embed.PathType
+import org.jruby.embed.ScriptingContainer
+
+import java.nio.file.Files
+import java.nio.file.Paths
+
+ext {
+    bundle = this.&bundle
+    bundleWithEnv = this.&bundleWithEnv
+    gem = this.&gem
+    buildGem = this.&buildGem
+    rake = this.&rake
+    versionMap = new HashMap()
+}
+
+/**
+ * Executes a bundler bin script with given parameters.
+ * @param projectDir Gradle projectDir
+ * @param buildDir Gradle buildDir
+ * @param pwd Current worker directory to execute in
+ * @param bundleBin Bundler Bin Script
+ * @param args CLI Args to Use with Bundler
+ */
+void bundle(File projectDir, File buildDir, String pwd, String bundleBin, Iterable<String> args) {
+    bundleWithEnv(projectDir, buildDir, pwd, bundleBin, args, Collections.emptyMap())
+}
+
+/**
+ * Executes a bundler bin script with given parameters.
+ * @param projectDir Gradle projectDir
+ * @param buildDir Gradle buildDir
+ * @param pwd Current worker directory to execute in
+ * @param bundleBin Bundler Bin Script
+ * @param args CLI Args to Use with Bundler
+ * @param env Environment Variables to Set
+ */
+void bundleWithEnv(File projectDir, File buildDir, String pwd, String bundleBin, Iterable<String> args, Map<String, String> env) {
+    executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
+        jruby.environment.putAll(env)
+        jruby.currentDirectory = pwd
+        jruby.argv = args.toList().toArray()
+        jruby.runScriptlet(PathType.ABSOLUTE, bundleBin)
+    }
+}
+
+/**
+ * Installs a Gem with the given version to the given path.
+ * @param projectDir Gradle projectDir
+ * @param buildDir Gradle buildDir
+ * @param gem Gem Name
+ * @param version Version to Install
+ * @param path Path to Install to
+ */
+void gem(File projectDir, File buildDir, String gem, String version, String path) {
+    executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
+        jruby.currentDirectory = projectDir
+        jruby.runScriptlet("""
+                require 'rubygems/commands/install_command'
+                cmd = Gem::Commands::InstallCommand.new
+                cmd.handle_options ['--no-ri', '--no-rdoc', '${gem}', '-v', '${version}', '-i', '${path}']
+                begin
+                    cmd.execute
+                rescue Gem::SystemExitException => e
+                    raise e unless e.exit_code == 0
+                end
+                """
+        )
+    }
+}
+
+void buildGem(File projectDir, File buildDir, String gemspec) {
+    executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
+        jruby.currentDirectory = projectDir
+        jruby.runScriptlet("""
+                require 'rubygems/commands/build_command'
+                cmd = Gem::Commands::BuildCommand.new
+                cmd.handle_options ['${gemspec}']
+                begin
+                    cmd.execute
+                rescue Gem::SystemExitException => e
+                    raise e unless e.exit_code == 0
+                end
+                """
+        )
+    }
+}
+
+/**
+ * Executes RSpec for a given plugin.
+ * @param projectDir Gradle projectDir
+ * @param buildDir Gradle buildDir
+ * @param plugin Plugin to run specs for
+ * @param args CLI arguments to pass to rspec
+ */
+void rake(File projectDir, File buildDir, String task) {
+    executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
+        jruby.currentDirectory = projectDir
+        jruby.runScriptlet("require 'rake'")
+        jruby.runScriptlet("""
+                rake = Rake.application
+                rake.init
+                rake.load_rakefile
+                rake['${task}'].invoke
+                """
+        )
+    }
+}
+
+/**
+ * Executes Closure using a fresh JRuby environment, safely tearing it down afterwards.
+ * @param projectDir Gradle projectDir
+ * @param buildDir Gradle buildDir
+ * @param block Closure to run
+ */
+Object executeJruby(File projectDir, File buildDir, Closure<?> /* Object*/ block) {
+    def jruby = new ScriptingContainer()
+    def env = jruby.environment
+    def gemDir = "${projectDir}/vendor/bundle/jruby/2.5.0".toString()
+    env.put "USE_RUBY", "1"
+    env.put "GEM_HOME", gemDir
+    env.put "GEM_SPEC_CACHE", "${buildDir}/cache".toString()
+    env.put "GEM_PATH", gemDir
+    try {
+        block(jruby)
+    } finally {
+        jruby.terminate()
+        Ruby.clearGlobalRuntime()
+    }
+}
+
+//===============================================================================
+// Ruby variables
+//===============================================================================
+
+def versionsPath = project.hasProperty("LOGSTASH_CORE_PATH") ? LOGSTASH_CORE_PATH + "/../versions.yml" : "${projectDir}/versions.yml"
+versionMap = (Map) (new Yaml()).load(new File("${versionsPath}").text)
+
+String jRubyURL
+String jRubyVersion
+String jRubySha1
+Boolean doChecksum
+
+if (versionMap["jruby-runtime-override"]) {
+    jRubyVersion = versionMap["jruby-runtime-override"]["version"]
+    jRubyURL = versionMap["jruby-runtime-override"]["url"]
+    doChecksum = false
+} else {
+    jRubyVersion = versionMap["jruby"]["version"]
+    jRubySha1 = versionMap["jruby"]["sha1"]
+    jRubyURL = "https://repo1.maven.org/maven2/org/jruby/jruby-dist/${jRubyVersion}/jruby-dist-${jRubyVersion}-bin.tar.gz"
+    doChecksum = true
+}
+def jrubyTarPath = "${projectDir}/vendor/_/jruby-dist-${jRubyVersion}-bin.tar.gz"
+
+def customJRubyDir = project.hasProperty("custom.jruby.path") ? project.property("custom.jruby.path") : ""
+def customJRubyVersion = customJRubyDir == "" ? "" : Files.readAllLines(Paths.get(customJRubyDir, "VERSION")).get(0).trim()
+def customJRubyTar = customJRubyDir == "" ? "" : (customJRubyDir + "/maven/jruby-dist/target/jruby-dist-${customJRubyVersion}-bin.tar.gz")
+
+task downloadJRuby(type: Download) {
+    description "Download JRuby artifact from this specific URL: ${jRubyURL}"
+    src jRubyURL
+    onlyIfNewer true
+    inputs.file("${projectDir}/versions.yml")
+    outputs.file(jrubyTarPath)
+    dest new File("${projectDir}/vendor/_", "jruby-dist-${jRubyVersion}-bin.tar.gz")
+}
+
+downloadJRuby.onlyIf { customJRubyDir == "" }
+
+task verifyFile(dependsOn: downloadJRuby, type: Verify) {
+    description "Verify the SHA1 of the download JRuby artifact"
+    inputs.file(jrubyTarPath)
+    outputs.file(jrubyTarPath)
+    src new File(jrubyTarPath)
+    algorithm 'SHA-1'
+    checksum jRubySha1
+}
+
+verifyFile.onlyIf { customJRubyDir == "" }
+verifyFile.onlyIf { doChecksum }
+
+task buildCustomJRuby(type: Exec) {
+    description "Build tar.gz and .jar artifacts from JRuby source directory"
+    workingDir (customJRubyDir == "" ? "./" : customJRubyDir)
+    commandLine './mvnw', 'clean', 'install', '-Pdist', '-Pcomplete'
+    standardOutput = new ByteArrayOutputStream()
+    errorOutput = new ByteArrayOutputStream()
+    ext.output = {
+        standardOutput.toString() + errorOutput.toString()
+    }
+}
+
+buildCustomJRuby.onlyIf { customJRubyDir != "" }
+
+task installCustomJRuby(dependsOn: buildCustomJRuby, type: Copy) {
+    description "Install custom built JRuby in the vendor directory"
+    inputs.file(customJRubyTar)
+    outputs.dir("${projectDir}/vendor/jruby")
+    from tarTree(customJRubyTar == "" ? jrubyTarPath : customJRubyTar)
+    eachFile { f ->
+        f.path = f.path.replaceFirst("^jruby-${customJRubyVersion}", '')
+    }
+    exclude "**/stdlib/rdoc/**"
+    includeEmptyDirs = false
+    into "${projectDir}/vendor/jruby"
+}
+
+installCustomJRuby.onlyIf { customJRubyDir != "" }
+
+
+task downloadAndInstallJRuby(dependsOn: [verifyFile, installCustomJRuby], type: Copy) {
+    description "Install JRuby in the vendor directory"
+    inputs.file(jrubyTarPath)
+    outputs.dir("${projectDir}/vendor/jruby")
+    from tarTree(downloadJRuby.dest)
+    eachFile { f ->
+        f.path = f.path.replaceFirst("^jruby-${jRubyVersion}", '')
+    }
+    exclude "**/stdlib/rdoc/**"
+    includeEmptyDirs = false
+    into "${projectDir}/vendor/jruby"
+    doLast {
+        gem(projectDir, buildDir, "rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
+        gem(projectDir, buildDir, "json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
+    }
+}
+
+downloadAndInstallJRuby.onlyIf { customJRubyDir == "" }
