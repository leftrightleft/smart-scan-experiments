diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index 0e630244907..e166cbd332e 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -231,8 +231,7 @@ public void open() throws IOException {
 
             if (this.headPage.getMinSeqNum() <= 0 && this.headPage.getElementCount() <= 0) {
                 // head page is empty, let's keep it as-is
-
-                this.currentByteSize += pageIO.getCapacity();
+                increaseCurrentByteSize(pageIO.getCapacity());
 
                 // but checkpoint it to update the firstUnackedPageNum if it changed
                 this.headPage.checkpoint();
@@ -296,7 +295,7 @@ private void addIO(Checkpoint checkpoint, PageIO pageIO) throws IOException {
             this.tailPages.add(page);
             this.unreadTailPages.add(page);
             this.unreadCount += page.unreadCount();
-            this.currentByteSize += page.getPageIO().getCapacity();
+            increaseCurrentByteSize(page.getPageIO().getCapacity());
 
             // for now deactivate all tail pages, we will only reactivate the first one at the end
             page.getPageIO().deactivate();
@@ -308,6 +307,14 @@ private void addIO(Checkpoint checkpoint, PageIO pageIO) throws IOException {
         }
     }
 
+    private void increaseCurrentByteSize(int size) {
+        this.currentByteSize += size;
+        if (this.currentByteSize >= this.maxBytes) {
+            logger.info("reached the maximum queue capacity {}, current byte size: {}",
+                    this.maxBytes, this.currentByteSize);
+        }
+    }
+
     // add a read tail page into this queue structures but also verify that this tail page
     // is not fully acked in which case it will be purged
     private void addPage(Checkpoint checkpoint, TailPage page) throws IOException {
@@ -333,7 +340,7 @@ private void addPage(Checkpoint checkpoint, TailPage page) throws IOException {
             this.tailPages.add(page);
             this.unreadTailPages.add(page);
             this.unreadCount += page.unreadCount();
-            this.currentByteSize += page.getPageIO().getCapacity();
+            increaseCurrentByteSize(page.getPageIO().getCapacity());
 
             // for now deactivate all tail pages, we will only reactivate the first one at the end
             page.getPageIO().deactivate();
@@ -352,7 +359,7 @@ private void newCheckpointedHeadpage(int pageNum) throws IOException {
         headPageIO.create();
         this.headPage = new HeadPage(pageNum, this, headPageIO);
         this.headPage.forceCheckpoint();
-        this.currentByteSize += headPageIO.getCapacity();
+        increaseCurrentByteSize(headPageIO.getCapacity());
     }
 
     // @param element the Queueable object to write to the queue
