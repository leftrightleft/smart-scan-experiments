diff --git a/lib/logstash/inputs/zeromq.rb b/lib/logstash/inputs/zeromq.rb
index ae4e710573f..46e83e02b70 100644
--- a/lib/logstash/inputs/zeromq.rb
+++ b/lib/logstash/inputs/zeromq.rb
@@ -76,24 +76,15 @@ def register
 
     case @topology
     when "pair"
-      zmq_const = ZMQ::PAIR 
+      @zmq_const = ZMQ::PAIR 
     when "pushpull"
-      zmq_const = ZMQ::PULL
+      @zmq_const = ZMQ::PULL
     when "pubsub"
-      zmq_const = ZMQ::SUB
+      @zmq_const = ZMQ::SUB
     end # case socket_type
-    @zsocket = context.socket(zmq_const)
-    error_check(@zsocket.setsockopt(ZMQ::LINGER, 1),
-                "while setting ZMQ::LINGER == 1)")
-
-    if @sockopt
-      setopts(@zsocket, @sockopt)
-    end
-
-    @address.each do |addr|
-      setup(@zsocket, addr)
-    end
 
+    setup
+    
     if @topology == "pubsub"
       if @topic.nil?
         @logger.debug("ZMQ - No topic provided. Subscribing to all messages")
@@ -138,8 +129,18 @@ def run(output_queue)
           @logger.debug("ZMQ receiving", :event => m2)
           msg = m2
         end
+
         @sender ||= "zmq+#{@topology}://#{@type}/"
-        e = self.to_event(msg, @sender)
+        msg_array = Array.new
+        rc = @zsocket.recv_strings(msg_array)
+        error_check(rc, "in recv_strings")
+        @logger.debug("0mq: receiving", :event => msg_array)
+        if msg_array.count >1 and @zmq_const == ZMQ::SUB
+          e = self.to_event(msg_array[1..-1].join("\n"), @source)
+          e['@zeromq_topic'] = msg_array.first
+        else
+          e = self.to_event(msg_array.first, @sender)
+        end
         if e
           output_queue << e
         end
diff --git a/lib/logstash/outputs/zeromq.rb b/lib/logstash/outputs/zeromq.rb
index 0f5bcc0d834..81c66a68d27 100644
--- a/lib/logstash/outputs/zeromq.rb
+++ b/lib/logstash/outputs/zeromq.rb
@@ -60,6 +60,10 @@ class LogStash::Outputs::ZeroMQ < LogStash::Outputs::Base
   # example: sockopt => ["ZMQ::HWM", 50, "ZMQ::IDENTITY", "my_named_queue"]
   config :sockopt, :validate => :hash
 
+  # Message output fomart, an sprintf string. If ommited json_event will be used.
+  # example: message_format => "%{@timestamp} %{@message}"
+  config :message_format, :validate => :string
+
   public
   def register
     require "ffi-rzmq"
@@ -69,30 +73,20 @@ def register
     # Translate topology shorthand to socket types
     case @topology
     when "pair"
-      zmq_const = ZMQ::PAIR
+      @zmq_const = ZMQ::PAIR
     when "pushpull"
-      zmq_const = ZMQ::PUSH
+      @zmq_const = ZMQ::PUSH
     when "pubsub"
-      zmq_const = ZMQ::PUB
+      @zmq_const = ZMQ::PUB
     end # case socket_type
 
-    @zsocket = context.socket(zmq_const)
-
-    error_check(@zsocket.setsockopt(ZMQ::LINGER, 1),
-                "while setting ZMQ::LINGER == 1)")
-
-    if @sockopt
-      setopts(@zsocket, @sockopt)
-    end
+    setup
 
-    @address.each do |addr|
-      setup(@zsocket, addr)
-    end
   end # def register
 
   public
   def teardown
-    error_check(@publisher.close, "while closing the socket")
+    error_check(@zsocket.close, "while closing the socket")
   end # def teardown
 
   private
@@ -106,16 +100,21 @@ def receive(event)
 
     # TODO(sissel): Figure out why masterzen has '+ "\n"' here
     #wire_event = event.to_hash.to_json + "\n"
-    wire_event = event.to_json
+    if @message_format
+      wire_event = event.sprintf(@message_format) + "\n"
+    else
+      wire_event = event.to_json
+    end
 
     begin
       @logger.debug("0mq: sending", :event => wire_event)
       if @topology == "pubsub"
-        @logger.debug("0mq output: setting topic to: #{event.sprintf(@topic)}")
-        error_check(@zsocket.send_string(event.sprintf(@topic), ZMQ::SNDMORE), "in topic send_string")
+        topic = event.sprintf(@topic)
+        @logger.debug("0mq output: setting topic to: \"#{topic}\"")
+        error_check(@zsocket.send_string(topic, ZMQ::SNDMORE), "in topic send_string")
       end
       error_check(@zsocket.send_string(wire_event), "in send_string")
-    rescue => e
+    rescue Exception => e
       @logger.warn("0mq output exception", :address => @address, :queue => @queue_name, :exception => e, :backtrace => e.backtrace)
     end
   end # def receive
diff --git a/lib/logstash/util/zeromq.rb b/lib/logstash/util/zeromq.rb
index 254aeaa9f5c..b85a58af915 100644
--- a/lib/logstash/util/zeromq.rb
+++ b/lib/logstash/util/zeromq.rb
@@ -11,7 +11,7 @@ def context
     CONTEXT
   end
 
-  def setup(socket, address)
+  def setup_socket(socket, address)
     if server?
       error_check(socket.bind(address), "binding to #{address}")
     else
@@ -20,6 +20,24 @@ def setup(socket, address)
     @logger.info("0mq: #{server? ? 'connected' : 'bound'}", :address => address)
   end
 
+  # Instance method for common socket setup
+  def setup
+    @zsocket = context.socket(@zmq_const)
+
+    error_check(@zsocket.setsockopt(ZMQ::LINGER, 1),
+                "while setting ZMQ::LINGER == 1)")
+
+    # TODO (lusis)
+    # wireup sockopt hash
+    if @sockopt
+      setopts(@zsocket, @sockopt)
+    end
+    
+    @address.each do |addr|
+      setup_socket(@zsocket, addr)
+    end
+  end
+
   def error_check(rc, doing)
     unless ZMQ::Util.resultcode_ok?(rc)
       @logger.error("ZeroMQ error while #{doing}", { :error_code => rc })
@@ -27,6 +45,11 @@ def error_check(rc, doing)
     end
   end # def error_check
 
+  def reload
+    error_check(@zsocket.close, "while closing socket")
+    setup
+  end
+
   def setopts(socket, options)
     options.each do |opt,value|
       sockopt = opt.split('::')[1]
@@ -43,4 +66,10 @@ def setopts(socket, options)
               "while setting #{opt} == #{value}")
     end # end each
   end # end setopts
+
+  def reload
+    error_check(@zsocket.close, "while closing socket")
+    setup
+  end
+
 end # module LogStash::Util::ZeroMQ
