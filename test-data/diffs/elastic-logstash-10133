diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
index 50b8d30f003..50002fc93d9 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
@@ -208,16 +208,8 @@ private static Closure conditionalLoop(final VariableDefinition event,
         final ValueSyntaxElement ifData, final ValueSyntaxElement elseData) {
         final ValueSyntaxElement eventVal = event.access();
         return Closure.wrap(
-            SyntaxFactory.forLoop(
-                event, inputBuffer,
-                Closure.wrap(
-                    SyntaxFactory.ifCondition(
-                        condition.call("fulfilled", eventVal),
-                        Closure.wrap(ifData.call("add", eventVal)),
-                        Closure.wrap(elseData.call("add", eventVal))
-                    )
-                )
-            )
+                SyntaxFactory.value("org.logstash.config.ir.compiler.Utils")
+                        .call("filterEvents", inputBuffer, condition, ifData, elseData)
         );
     }
 
@@ -245,22 +237,10 @@ private static ComputeStepSyntaxElement<Dataset> prepare(final DatasetCompiler.C
      */
     private static Closure withInputBuffering(final Closure compute,
         final Collection<ValueSyntaxElement> parents, final ValueSyntaxElement inputBuffer) {
-        final VariableDefinition event =
-            new VariableDefinition(JrubyEventExtLibrary.RubyEvent.class, "e");
-        final ValueSyntaxElement eventVar = event.access();
         return Closure.wrap(
-            parents.stream().map(par ->
-                SyntaxFactory.forLoop(
-                    event, computeDataset(par),
-                    Closure.wrap(
-                        SyntaxFactory.ifCondition(
-                            SyntaxFactory.not(
-                                eventVar.call("getEvent").call("isCancelled")
-                            ), Closure.wrap(inputBuffer.call("add", eventVar))
-                        )
-                    )
-                )
-            ).toArray(MethodLevelSyntaxElement[]::new)
+                parents.stream().map(par -> SyntaxFactory.value("org.logstash.config.ir.compiler.Utils")
+                        .call("copyNonCancelledEvents", computeDataset(par), inputBuffer)
+                ).toArray(MethodLevelSyntaxElement[]::new)
         ).add(compute).add(clear(inputBuffer));
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/Utils.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/Utils.java
new file mode 100644
index 00000000000..8165258e568
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/Utils.java
@@ -0,0 +1,33 @@
+package org.logstash.config.ir.compiler;
+
+import org.logstash.ext.JrubyEventExtLibrary;
+
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Static utility methods that replace common blocks of generated code in the Java execution.
+ */
+public class Utils {
+
+    // has field1.compute(batchArg, flushArg, shutdownArg) passed as input
+    public static void copyNonCancelledEvents(Collection<JrubyEventExtLibrary.RubyEvent> input, List output) {
+        for (JrubyEventExtLibrary.RubyEvent e : input) {
+            if (!(e.getEvent().isCancelled())) {
+                output.add(e);
+            }
+        }
+    }
+
+    public static void filterEvents(Collection<JrubyEventExtLibrary.RubyEvent> input, EventCondition filter,
+                                    List fulfilled, List unfulfilled) {
+        for (JrubyEventExtLibrary.RubyEvent e : input) {
+            if (filter.fulfilled(e)) {
+                fulfilled.add(e);
+            } else {
+                unfulfilled.add(e);
+            }
+        }
+    }
+
+}
