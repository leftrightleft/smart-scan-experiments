diff --git a/docs/configuration.md b/docs/configuration.md
index 8b67637d2eb..3be1ef3336a 100644
--- a/docs/configuration.md
+++ b/docs/configuration.md
@@ -255,6 +255,38 @@ You can also do multiple expressions in a single condition:
       }
     }
 
+Here are some examples for testing with the in conditional:
+
+    filter {
+      if [foo] in [foobar] {
+        mutate { add_tag => "field in field" }
+      }
+      if [foo] in "foo" {
+        mutate { add_tag => "field in string" }
+      }
+      if "hello" in [greeting] {
+        mutate { add_tag => "string in field" }
+      }
+      if [foo] in ["hello", "world", "foo"] {
+        mutate { add_tag => "field in list" }
+      }
+      if [missing] in [alsomissing] {
+        mutate { add_tag => "shouldnotexist" }
+      }
+      if !("foo" in ["hello", "world"]) {
+        mutate { add_tag => "shouldexist" }
+      }
+    }
+
+Or, to test if grok was successful:
+
+    output {
+      if "_grokparsefailure" not in [tags] {
+        elasticsearch { ... }
+      }
+    }
+
+
 ## Further Reading
 
 For more information, see [the plugin docs index](index)
diff --git a/lib/logstash/codecs/netflow.rb b/lib/logstash/codecs/netflow.rb
index ce88c509dbf..acdc31319ce 100644
--- a/lib/logstash/codecs/netflow.rb
+++ b/lib/logstash/codecs/netflow.rb
@@ -334,6 +334,24 @@ def netflow_field_for(type, length)
       [[:string, :if_name, {:length => length, :trim_padding => true}]]
     when 83
       [[:string, :if_desc, {:length => length, :trim_padding => true}]]
+    when 148
+      [[:uint64, :flowID ]]
+    when 233
+      [[:uint8, :firewallEvent]]
+    when 225
+      [[:ip4_addr, :postNATSourceIPv4Address]]
+    when 226
+      [[:ip4_addr, :postNATDestinationIPv4Address]]
+    when 227
+      [[:uint16, :postNAPTSourceTransportAddress]]
+    when 228
+      [[:uint16, :postNAPTDestinationTransportAddress]]
+    when 346
+      [[:uint16, :privateEnterpriseNumber]]
+    when 56701
+      [[:string, :AppID, {:length => length, :trim_padding => true}]]
+    when 56702
+      [[:string, :UserID, {:length => length, :trim_padding => true}]]
     else
       @logger.warn("Unsupported field", :type => type, :length => length)
       nil
diff --git a/lib/logstash/filters/elasticsearch.rb b/lib/logstash/filters/elasticsearch.rb
index 65d16660957..272809498e5 100644
--- a/lib/logstash/filters/elasticsearch.rb
+++ b/lib/logstash/filters/elasticsearch.rb
@@ -34,8 +34,14 @@ class LogStash::Filters::Elasticsearch < LogStash::Filters::Base
   # List of elasticsearch hosts to use for querying.
   config :hosts, :validate => :array
 
+  # Elasticsearch action
+  config :action, :validate => [ "query", "delete_by_query" ], :default => "query"
+  
   # Elasticsearch query string
   config :query, :validate => :string
+  
+  # Elasticsearch index
+  config :index, :validate => :string, :default => "_all"
 
   # Comma-delimited list of <field>:<direction> pairs that define the sort order
   config :sort, :validate => :string, :default => "@timestamp:desc"
@@ -58,10 +64,16 @@ def filter(event)
     begin
       query_str = event.sprintf(@query)
 
-      results = @client.search q: query_str, sort: @sort, size: 1
+      if @action == "query"
+        results = @client.search q: query_str, sort: @sort, size: 1
 
-      @fields.each do |old, new|
-        event[new] = results['hits']['hits'][0]['_source'][old]
+        @fields.each do |old, new|
+          event[new] = results['hits']['hits'][0]['_source'][old]
+        end
+      else
+        if @action == "delete_by_query"
+          results = @client.delete_by_query index: @index, q: query_str
+        end
       end
 
       filter_matched(event)
diff --git a/patterns/firewalls b/patterns/firewalls
index ff7baeae38e..b60e2efa47c 100644
--- a/patterns/firewalls
+++ b/patterns/firewalls
@@ -58,3 +58,36 @@ CISCOFW713172 Group = %{GREEDYDATA:group}, IP = %{IP:src_ip}, Automatic NAT Dete
 # ASA-4-733100
 CISCOFW733100 \[\s*%{DATA:drop_type}\s*\] drop %{DATA:drop_rate_id} exceeded. Current burst rate is %{INT:drop_rate_current_burst} per second, max configured rate is %{INT:drop_rate_max_burst}; Current average rate is %{INT:drop_rate_current_avg} per second, max configured rate is %{INT:drop_rate_max_avg}; Cumulative total count is %{INT:drop_total_count}
 #== End Cisco ASA ==
+
+#== Palo Alto Networks Firewalls ==
+# From https://live.paloaltonetworks.com/servlet/JiveServlet/downloadBody/2021-102-8-13361/PANOS-Syslog-Integration-TN-RevM.pdf
+
+PANTIMETAMP %{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}
+
+# From the PAN Doc:
+# Any field that contains a comma or a double-quote will be enclosed in double quotes.
+# Furthermore, a double-quote appearing inside a field will be escaped by preceding it
+# with another double-quote. The Misc field in threat log will always be enclosed in
+# double-quotes to maintain backward compatibility.
+#
+# So, this likely needs to be updated to include the quoting stuff, but this works for now
+PANCSVFIELD ([^,]*)
+PCF %{PANCSVFIELD}
+
+PANHEADER \<\d+\>%{SYSLOGTIMESTAMP:syslogtimestamp} %{SYSLOGHOST:logsource}
+PANTYPE (TRAFFIC|THREAT|CONFIG|SYSTEM|HIP-MATCH)
+
+
+PANTRAFFIC %{PANHEADER} %{PCF},%{PCF:Receive_Time},%{PCF:Serial_Number},%{PANTYPE:Type},%{PCF:Subtype},%{PCF},%{PCF:Generated_Time},%{PCF:Source_IP},%{PCF:Destination_IP},%{PCF:NAT_Source_IP},%{PCF:NAT_Destination_IP},%{PCF:Rule_Name},%{PCF:Source_User},%{PCF:Destination_User},%{PCF:Application},%{PCF:Virtual_System},%{PCF:Source_Zone},%{PCF:Destination_Zone},%{PCF:Ingress_Interface},%{PCF:Egress_Interface},%{PCF:Log_Forwarding_Profile},%{PCF},%{PCF:Session_ID},%{PCF:Repeat_Count},%{PCF:Source_Port},%{PCF:Destination_Port},%{PCF:NAT_Source_Port},%{PCF:NAT_Destination_Port},%{PCF:Flags},%{PCF:Protocol},%{PCF:Action},%{PCF:Bytes},%{PCF:Bytes_Sent},%{PCF:Bytes_Received},%{PCF:Packets},%{PCF:Start_Time},%{PCF:Elapsed_Time},%{PCF:Category},%{PCF},%{PCF:Sequence_Number},%{PCF:Action_Flags},%{PCF:Source_Location},%{PCF:Destination_Location},%{PCF},%{PCF:Packets_Sent},%{PCF:Packets_Received}
+
+PANTHREAT %{PANHEADER} %{PCF},%{PCF:Receive_Time},%{PCF:Serial_Number},%{PANTYPE:Type},%{PCF:Subtype},%{PCF},%{PCF:Generated_Time},%{PCF:Source_IP},%{PCF:Destination_IP},%{PCF:NAT_Source_IP},%{PCF:NAT_Destination_IP},%{PCF:Rule_Name},%{PCF:Source_User},%{PCF:Destination_User},%{PCF:Application},%{PCF:Virtual_System},%{PCF:Source_Zone},%{PCF:Destination_Zone},%{PCF:Ingress_Interface},%{PCF:Egress_Interface},%{PCF:Log_Forwarding_Profile},%{PCF},%{PCF:Session_ID},%{PCF:Repeat_Count},%{PCF:Source_Port},%{PCF:Destination_Port},%{PCF:NAT_Source_Port},%{PCF:NAT_Destination_Port},%{PCF:Flags},%{PCF:Protocol},%{PCF:Action},%{PCF:Miscellaneous},%{PCF:Threat_ID},%{PCF:Category},%{PCF:Severity},%{PCF:Direction},%{PCF:Sequence_Number},%{PCF:Action_Flags},%{PCF:Source_Location},%{PCF:Destination_Location},%{PCF},%{PCF:Content_Type}
+
+PANHIPMATCH %{PANHEADER} %{PCF},%{PCF:Receive_Time},%{PCF:Serial_Number},%{PANTYPE:Type},%{PCF:Subtype},%{PCF},%{PCF},%{PCF:Source_User},%{PCF:Virtual_System},%{PCF:Machine_name},%{PCF:Source_Address},%{PCF:HIP},%{PCF:Repeat_Count},%{PCF:HIP_Type},%{PCF},%{PCF},%{PCF:Sequence_Number},%{PCF:Action_Flags}
+
+PANCONFIG %{PANHEADER} %{PCF},%{PCF:Receive_Time},%{PCF:Serial_Number},%{PANTYPE:Type},%{PCF:Subtype},%{PCF},%{PCF},%{PCF:Host},%{PCF:Virtual_System},%{PCF:Command},%{PCF:Admin},%{PCF:Client},%{PCF:Result},%{PCF:Configuration_Path},%{PCF:Sequence_Number},%{PCF:Action_Flags}
+
+PANSYSTEM %{PANHEADER} %{PCF},%{PCF:Receive_Time},%{PCF:Serial_Number},%{PANTYPE:Type},%{PCF:Subtype},%{PCF},%{PCF},%{PCF:Virtual_System},%{PCF:Event_ID},%{PCF:Object},%{PCF},%{PCF},%{PCF:Module},%{PCF:Severity},%{PCF:Description},%{PCF:Sequence_Number},%{PCF:Action_Flags}
+
+PANSYSLOG ({%PANTRAFFIC}|%{PANTHREAT}|%{PANHIPMATCH}|%{PANCONFIG}|%{PANSYSTEM})
+
+#== End of Palo Alto Networks Firewalls ==
