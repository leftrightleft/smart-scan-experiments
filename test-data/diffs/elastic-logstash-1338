diff --git a/lib/logstash/inputs/eventlog.rb b/lib/logstash/inputs/eventlog.rb
index 92c0790fc00..85f36842626 100644
--- a/lib/logstash/inputs/eventlog.rb
+++ b/lib/logstash/inputs/eventlog.rb
@@ -11,6 +11,7 @@
 #       eventlog {
 #         type  => 'Win32-EventLog'
 #         logfile  => 'System'
+#         sincedb_path  => 'C:/ProgramData/Logstash/eventlog-System.sincedb'
 #       }
 #     }
 class LogStash::Inputs::EventLog < LogStash::Inputs::Base
@@ -23,6 +24,14 @@ class LogStash::Inputs::EventLog < LogStash::Inputs::Base
   # Event Log Name
   config :logfile, :validate => :array, :default => [ "Application", "Security", "System" ]
 
+  # Where to write the sincedb database (keeps track of the current
+  # position of monitored event logs).
+  config :sincedb_path, :validate => :string
+
+  # How often (in seconds) to write a since database with the current position of
+  # monitored event logs.
+  config :sincedb_write_interval, :validate => :number, :default => 15
+
   public
   def register
 
@@ -32,11 +41,17 @@ def register
     @hostname = Socket.gethostname
     @logger.info("Registering input eventlog://#{@hostname}/#{@logfile}")
 
+    @sincedb = {}
+    @sincedb_last_write = 0
+    @sincedb_write_pending = false
+
     if RUBY_PLATFORM == "java"
       require "jruby-win32ole"
     else
       require "win32ole"
     end
+
+    _sincedb_open
   end # def register
 
   public
@@ -84,9 +99,51 @@ def run(queue)
 
         e["message"] = event.Message
 
+        if @sincedb[event.Logfile] != nil && event.RecordNumber - 1 > @sincedb[event.Logfile]
+          oldwmi_query = "Select * from Win32_NTLogEvent Where LogFile='#{event.Logfile}' And RecordNumber > #{@sincedb[event.Logfile]} And RecordNumber < #{event.RecordNumber}"
+          #Know bug event send in reverse order, because no sort in WQL and no reverse_each in RubyWIN32OLE
+          @wmi.ExecQuery(oldwmi_query).each{ |oldevent|
+            oldtimestamp = to_timestamp(oldevent.TimeGenerated)
+
+            oe = LogStash::Event.new(
+              "host" => @hostname,
+              "path" => @logfile,
+              "type" => @type,
+              "@timestamp" => oldtimestamp
+            )
+
+            %w{Category CategoryString ComputerName EventCode EventIdentifier
+                EventType Logfile Message RecordNumber SourceName
+                TimeGenerated TimeWritten Type User
+            }.each{
+                |property| oe[property] = oldevent.send property 
+            }
+
+            if RUBY_PLATFORM == "java"
+              # unwrap jruby-win32ole racob data
+              oe["InsertionStrings"] = unwrap_racob_variant_array(oldevent.InsertionStrings)
+              data = unwrap_racob_variant_array(oldevent.Data)
+              # Data is an array of signed shorts, so convert to bytes and pack a string
+              oe["Data"] = data.map{|byte| (byte > 0) ? byte : 256 + byte}.pack("c*")
+            else
+              # win32-ole data does not need to be unwrapped
+              oe["InsertionStrings"] = oldevent.InsertionStrings
+              oe["Data"] = oldevent.Data
+            end
+
+            oe["message"] = oldevent.Message
+
+            decorate(oe)
+            queue << oe
+          }
+        end
+
         decorate(e)
         queue << e
 
+        @sincedb[event.Logfile] = event.RecordNumber
+        _sincedb_write
+
       end # while
 
     rescue Exception => ex
@@ -124,5 +181,92 @@ def to_timestamp(wmi_time)
   
     return DateTime.strptime(result, "%Y%m%dT%H%M%S%z").iso8601
   end
-end # class LogStash::Inputs::EventLog
 
+  private
+  def sincedb_write(reason=nil)
+    @logger.debug("caller requested sincedb write (#{reason})")
+    _sincedb_write(true)  # since this is an external request, force the write
+  end
+
+  private
+  def _sincedb_open
+    path = @sincedb_path
+    begin
+      db = File.open(path)
+    rescue
+      @logger.debug("_sincedb_open: #{path}: #{$!}")
+      return
+    end
+
+    @logger.debug("_sincedb_open: reading from #{path}")
+    db.each do |line|
+      eventlogname, recordnumber = line.split(" ", 2)
+      @logger.debug("_sincedb_open: setting #{eventlogname} to #{recordnumber.to_i}")
+      @sincedb[eventlogname] = recordnumber.to_i
+    end
+  end # def _sincedb_open
+
+  private
+  def _sincedb_write_if_pending
+
+    #  Check to see if sincedb should be written out since there was a file read after the sincedb flush, 
+    #  and during the sincedb_write_interval
+
+    if @sincedb_write_pending
+	_sincedb_write
+    end
+  end
+
+  private
+  def _sincedb_write(sincedb_force_write=false)
+
+    # This routine will only write out sincedb if enough time has passed based on @sincedb_write_interval
+    # If it hasn't and we were asked to write, then we are pending a write.
+
+    # if we were called with force == true, then we have to write sincedb and bypass a time check 
+    # ie. external caller calling the public sincedb_write method
+
+    if (!sincedb_force_write)
+       now = Time.now.to_i
+       delta = now - @sincedb_last_write
+
+       # we will have to flush out the sincedb file after the interval expires.  So, we will try again later.
+       if delta < @sincedb_write_interval
+         @sincedb_write_pending = true
+         return
+       end
+    end
+
+    @logger.debug("writing sincedb (delta since last write = #{delta})")
+
+    path = @sincedb_path
+    tmp = "#{path}.new"
+    begin
+      db = File.open(tmp, "w")
+    rescue => e
+      @logger.warn("_sincedb_write failed: #{tmp}: #{e}")
+      return
+    end
+
+    @sincedb.each do |eventlogname, recordnumber|
+      db.puts([eventlogname, recordnumber].flatten.join(" "))
+    end
+    db.close
+
+    begin
+      File.rename(tmp, path)
+    rescue => e
+      @logger.warn("_sincedb_write rename/sync failed: #{tmp} -> #{path}: #{e}")
+    end
+
+    @sincedb_last_write = now
+    @sincedb_write_pending = false
+
+  end # def _sincedb_write
+
+  public
+  def teardown
+    sincedb_write
+  end # def teardown
+
+end # class LogStash::Inputs::EventLog
