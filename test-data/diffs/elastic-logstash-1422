diff --git a/lib/logstash/outputs/s3.rb b/lib/logstash/outputs/s3.rb
index e3a47b41bbf..13ae5371d8f 100644
--- a/lib/logstash/outputs/s3.rb
+++ b/lib/logstash/outputs/s3.rb
@@ -347,7 +347,7 @@ def receive(event)
  def self.format_message(event)
     message = "Date: #{event["@timestamp"]}\n"
     message << "Source: #{event["source"]}\n"
-    message << "Tags: #{event["tags"].join(', ')}\n"
+    message << "Tags: #{event["tags"] ? event["tags"].join(', ') : ''}\n"
     message << "Fields: #{event.to_hash.inspect}\n"
     message << "Message: #{event["message"]}"
  end
diff --git a/spec/outputs/s3.rb b/spec/outputs/s3.rb
new file mode 100644
index 00000000000..448647cf4e5
--- /dev/null
+++ b/spec/outputs/s3.rb
@@ -0,0 +1,33 @@
+require "test_utils"
+
+require "logstash/outputs/s3"
+require "rspec/mocks"
+
+describe LogStash::Outputs::S3 do
+  extend LogStash::RSpec
+
+  describe "format the message" do
+
+    it 'should not blow up if there are no tags' do
+      event = { "[@timestamp]" => "such timestamp",
+                "source" => "source wow",
+                "tags" => nil }
+      #event = double('event')
+      #event.should_receive(:[]).with('@timestamp')
+      #event.should_receive(:[]).with('source')
+      #event.should_receive(:[]).with('tags')
+      lambda {
+        LogStash::Outputs::S3.format_message(event)
+      }.should_not raise_error 
+    end
+
+    it 'should not blow up if there are tags' do
+      event = { "[@timestamp]" => "such timestamp",
+                "source" => "source wow",
+                "tags" => ['foo','bar'] }
+      lambda {
+        LogStash::Outputs::S3.format_message(event)
+    }.should_not raise_error 
+    end
+  end
+end
