diff --git a/lib/logstash/codecs/fluent.rb b/lib/logstash/codecs/fluent.rb
index d1e6acd336e..c762f3a15d2 100644
--- a/lib/logstash/codecs/fluent.rb
+++ b/lib/logstash/codecs/fluent.rb
@@ -18,38 +18,96 @@
 #     logger = Fluent::Logger::FluentLogger.new(nil, :host => "example.log", :port => 4000)
 #     logger.post("some_tag", { "your" => "data", "here" => "yay!" })
 #
+# Forwarding data from the fluentd agents to the logstash is also possible.
+#
+# Logstash configuration:
+#
+#    input {
+#      tcp {
+#        codec => fluent
+#        port => 4000
+#      }
+#    }
+#
+# Fluent configuration:
+#
+#    <source>
+#      type tail
+#      format none
+#      path /var/log/syslog
+#      tag syslog
+#    </source>
+#    <match syslog>
+#      type out_forward
+#      heartbeat_type tcp
+#      <server>
+#        name localhost
+#        host localhost
+#        port 4000
+#        weight 100
+#      </server>
+#    </match>
+#
 # Notes:
 #
+# * heartbeat_type of the fluent's out_forward plugin must be set to tcp, although the default value is udp if using
+#   logstash'es tcp input plugin
+#
+# * udp heartbeats are supported by the logstash fluent input plugin
+#
 # * the fluent uses a second-precision time for events, so you will never see
-#   subsecond precision on events processed by this codec.
+#   subsecond precision on events processed by this codec except the cases when
+#   the @timestamp presents in the received message
 #
 class LogStash::Codecs::Fluent < LogStash::Codecs::Base
   config_name "fluent"
   milestone 1
 
+  config :ignore_tag, :validate => :boolean, :default => false
+
   public
   def register
     require "msgpack"
     @decoder = MessagePack::Unpacker.new
+    @payload_decoder = MessagePack::Unpacker.new
   end
 
   public
   def decode(data)
     @decoder.feed(data)
-    @decoder.each do |tag, epochtime, map|
-      event = LogStash::Event.new(map.merge(
-        "@timestamp" => Time.at(epochtime),
-        "tags" => tag
-      ))
-      yield event
+    @decoder.each do |obj|
+      tag = obj[0]
+      entries = obj[1]
+      if entries.class == String # PackedForward
+        @payload_decoder.feed_each(entries) do |epochtime, map|
+          yield event(tag, epochtime, map)
+        end
+      elsif entries.class == Array # Forward
+        entries.each do |epochtime, map|
+          yield event(tag, epochtime, map)
+        end
+      else # Message [tag, timestamp, msg]
+        yield event(tag, entries, obj[2])
+      end
     end
   end # def decode
 
   public
   def encode(event)
-    tag = event["tags"] || "log"
+    tag = (event["tags"][0] unless event["tags"].nil?) || "log"
     epochtime = event["@timestamp"].to_i
-    @on_event.call(MessagePack.pack([ tag, epochtime, event.to_hash ]))
+    # Time is not supported by MessagePack, so convert @timestamp to string
+    msg = event.to_hash.merge({"@timestamp" => event["@timestamp"].iso8601(3)})
+    @on_event.call(MessagePack.pack([ tag, epochtime, msg ]))
   end # def encode
 
+  private
+  def event(tag, epochtime, map)
+    map["@timestamp"] = Time.at(epochtime).utc if map["@timestamp"].nil?
+
+    event = LogStash::Event.new(map)
+    event.tag(tag) unless @ignore_tag
+    event
+  end
+
 end # class LogStash::Codecs::Fluent
diff --git a/lib/logstash/inputs/fluent.rb b/lib/logstash/inputs/fluent.rb
new file mode 100644
index 00000000000..2695142b09b
--- /dev/null
+++ b/lib/logstash/inputs/fluent.rb
@@ -0,0 +1,131 @@
+# encoding: utf-8
+require "logstash/inputs/base"
+require "logstash/namespace"
+require "socket"
+
+# Read fluentd events over a TCP socket.
+#
+# Each event is assumed to be supported by the fluent codec.
+#
+# For example, you can receive logs from fluentd out-forward plugin with:
+#
+# Logstash configuration:
+#
+#    input {
+#      fluent {
+#        port => 4000
+#      }
+#    }
+#
+# Fluent configuration:
+#
+#    <source>
+#      type tail
+#      format none
+#      path /var/log/syslog
+#      tag syslog
+#    </source>
+#    <match syslog>
+#      type out_forward
+#      <server>
+#        name localhost
+#        host localhost
+#        port 4000
+#        weight 100
+#      </server>
+#    </match>
+#
+# Notes:
+#
+# * manually specified codec will not have any effect, as this plugin is already preconfigured with fluent codec
+#
+class LogStash::Inputs::Fluent < LogStash::Inputs::Base
+  config_name "fluent"
+  milestone 1
+
+  # The address to listen on.
+  config :host, :validate => :string, :default => "0.0.0.0"
+
+  # The port to listen on.
+  config :port, :validate => :number, :default => 24224
+
+  # Don't add fluent's tag to the event tags
+  config :ignore_tag, :validate => :boolean, :default => false
+
+  def initialize(*args)
+    super(*args)
+    BasicSocket.do_not_reverse_lookup = true
+  end
+  # def initialize
+
+  public
+  def register
+    require "logstash/inputs/tcp"
+    require "logstash/codecs/fluent"
+
+    codec = LogStash::Codecs::Fluent.new({
+      "ignore_tag" => @ignore_tag
+    })
+    codec.register
+
+    @tcp = LogStash::Inputs::Tcp.new({
+      "host" => @host,
+      "port" => @port.to_s,
+      "codec" => codec
+    })
+    @tcp.register
+  end
+  # def register
+
+  public
+  def run(output_queue)
+    @heartbeat = Thread.new do
+      heartbeat_handler
+    end
+    begin
+      @tcp.run(output_queue)
+    rescue
+      unless @interrupted
+        raise
+      end
+    end
+    @heartbeat.join
+  end
+  # def run
+
+  public
+  def teardown
+    @interrupted = true
+    @heartbeat.raise(LogStash::ShutdownSignal)
+    @tcp.teardown
+  end
+  # def teardown
+
+  private
+  def heartbeat_handler
+    begin
+      @udp.close if @udp && !@udp.closed?
+
+      @udp = UDPSocket.new(Socket::AF_INET)
+      @udp.bind(@host, @port)
+
+      loop do
+        _, client = @udp.recvfrom(128)
+        @logger.debug("Heartbeat received", :client => "#{client[3]}:#{client[1]}")
+
+        @udp.send("\0", 0, client[3], client[1])
+      end
+    rescue LogStash::ShutdownSignal
+      @logger.info("ShutdownSignal caught. Exiting heartbeat listener")
+    rescue => e
+      unless @interrupted
+        @logger.warn("Heartbeat listener died", :exception => e, :backtrace => e.backtrace)
+        retry
+      end
+    ensure
+      @udp.close if @udp && !@udp.closed?
+    end
+  end
+  # def heartbeat_handler
+
+end # class LogStash::Inputs::Fluent
diff --git a/lib/logstash/time_addon.rb b/lib/logstash/time_addon.rb
index a5970332dc3..14e36db06ef 100644
--- a/lib/logstash/time_addon.rb
+++ b/lib/logstash/time_addon.rb
@@ -13,7 +13,7 @@ def self.now
     UTC = org.joda.time.DateTimeZone.forID("UTC")
     def self.parse_iso8601(t)
       millis = JODA_ISO8601_PARSER.parseMillis(t)
-      return Time.at(millis / 1000, (millis % 1000) * 1000)
+      return Time.at(millis / 1000, (millis % 1000) * 1000).gmtime
     end
   else
     def self.parse_iso8601(t)
diff --git a/spec/codecs/fluent.rb b/spec/codecs/fluent.rb
new file mode 100644
index 00000000000..5ecb3946be2
--- /dev/null
+++ b/spec/codecs/fluent.rb
@@ -0,0 +1,162 @@
+require "logstash/codecs/fluent"
+require "logstash/event"
+require "insist"
+require "msgpack"
+
+describe LogStash::Codecs::Fluent do
+  subject do
+    next LogStash::Codecs::Fluent.new
+  end
+
+  context "#decode" do
+    it "should decode packed forward" do
+      data = MessagePack.pack([
+        "syslog",
+        MessagePack.pack([0, {"message" => "Hello World"}]) +
+        MessagePack.pack([1, {"message" => "Bye World"}])
+      ])
+
+      events = []
+      subject.decode(data) do |event|
+        events << event
+      end
+
+      insist { events.length } == 2
+
+      insist { events[0].is_a? LogStash::Event }
+      insist { events[0]["@timestamp"] } == Time.at(0).utc
+      insist { events[0]["message"] } == "Hello World"
+      insist { events[0]["tags"] } == ["syslog"]
+
+      insist { events[1].is_a? LogStash::Event }
+      insist { events[1]["@timestamp"] } == Time.at(1).utc
+      insist { events[1]["message"] } == "Bye World"
+      insist { events[1]["tags"] } == ["syslog"]
+    end
+
+    it "should prevent duplicate tags" do
+      data = MessagePack.pack([
+        "syslog",
+        MessagePack.pack([0, {"message" => "Hello World", "tags" => ["syslog", "fluent"]}])
+      ])
+
+      subject.decode(data) do |event|
+        insist { event.is_a? LogStash::Event }
+        insist { event["@timestamp"] } == Time.at(0).utc
+        insist { event["message"] } == "Hello World"
+        insist { event["tags"] } == ["syslog", "fluent"]
+      end
+    end
+
+    it "should use @timestamp from data" do
+      data = MessagePack.pack([
+        "syslog",
+        MessagePack.pack([0, {"message" => "Hello World", "@timestamp" => "2014-01-01T00:00:0.000Z"}])
+      ])
+
+      subject.decode(data) do |event|
+        insist { event.is_a? LogStash::Event }
+        insist { event["@timestamp"] } == LogStash::Time.parse_iso8601("2014-01-01T00:00:0.000Z")
+        insist { event["message"] } == "Hello World"
+        insist { event["tags"] } == ["syslog"]
+      end
+    end
+
+    it "should decode forward" do
+      data = MessagePack.pack([
+        "syslog",
+        [[0, {"message" => "Hello World"}], [1, {"message" => "Bye World"}]]
+      ])
+
+      events = []
+      subject.decode(data) do |event|
+        events << event
+      end
+
+      insist { events.length } == 2
+
+      insist { events[0].is_a? LogStash::Event }
+      insist { events[0]["@timestamp"] } == Time.at(0).utc
+      insist { events[0]["message"] } == "Hello World"
+      insist { events[0]["tags"] } == ["syslog"]
+
+      insist { events[1].is_a? LogStash::Event }
+      insist { events[1]["@timestamp"] } == Time.at(1).utc
+      insist { events[1]["message"] } == "Bye World"
+      insist { events[1]["tags"] } == ["syslog"]
+    end
+
+    it "should decode message" do
+      data = MessagePack.pack(["syslog", 0, {"message" => "Hello World"}])
+
+      subject.decode(data) do |event|
+        insist { event.is_a? LogStash::Event }
+        insist { event["@timestamp"] } == Time.at(0).utc
+        insist { event["message"] } == "Hello World"
+        insist { event["tags"] } == ["syslog"]
+      end
+    end
+
+    it "should ignore default tag" do
+      data = MessagePack.pack(["syslog", 0, {"message" => "Hello World"}])
+      subject.instance_eval {
+        @ignore_tag = true
+      }
+      subject.decode(data) do |event|
+        insist { event.is_a? LogStash::Event }
+        insist { event["@timestamp"] } == Time.at(0).utc
+        insist { event["message"] } == "Hello World"
+        insist { event["tags"] } == nil
+      end
+    end
+  end
+
+  context "#encode" do
+    it "should encode message" do
+      event = LogStash::Event.new({"message" => "Hello World", "tags" => ["syslog"]})
+      got_event = false
+      subject.on_event do |data|
+        insist { MessagePack.unpack(data) } == ["syslog", event["@timestamp"].to_i, {
+            "message" => "Hello World",
+            "tags" => ["syslog"],
+            "@timestamp" => event["@timestamp"].iso8601(3),
+            "@version" => event["@version"]
+        }]
+        got_event = true
+      end
+      subject.encode(event)
+      insist { got_event }
+    end
+
+    it "should use the first tag" do
+      event = LogStash::Event.new({"message" => "Hello World", "tags" => ["syslog", "fluent"]})
+      got_event = false
+      subject.on_event do |data|
+        insist { MessagePack.unpack(data) } == ["syslog", event["@timestamp"].to_i, {
+            "message" => "Hello World",
+            "tags" => ["syslog", "fluent"],
+            "@timestamp" => event["@timestamp"].iso8601(3),
+            "@version" => event["@version"]
+        }]
+        got_event = true
+      end
+      subject.encode(event)
+      insist { got_event }
+    end
+
+    it "should use the default tag" do
+      event = LogStash::Event.new({"message" => "Hello World"})
+      got_event = false
+      subject.on_event do |data|
+        insist { MessagePack.unpack(data) } == ["log", event["@timestamp"].to_i, {
+            "message" => "Hello World",
+            "@timestamp" => event["@timestamp"].iso8601(3),
+            "@version" => event["@version"]
+        }]
+        got_event = true
+      end
+      subject.encode(event)
+      insist { got_event }
+    end
+  end
+end
diff --git a/spec/inputs/fluent.rb b/spec/inputs/fluent.rb
new file mode 100644
index 00000000000..bddd72cebb4
--- /dev/null
+++ b/spec/inputs/fluent.rb
@@ -0,0 +1,156 @@
+# coding: utf-8
+require "test_utils"
+require "socket"
+require "msgpack"
+
+describe "inputs/fluent" do
+  extend LogStash::RSpec
+
+  describe "read event" do
+    port = 5511
+    config <<-CONFIG
+      input {
+        fluent {
+          port => #{port}
+        }
+      }
+    CONFIG
+
+    data = MessagePack.pack([
+      "syslog",
+      MessagePack.pack([0, {"message" => "Hello World"}]).force_encoding("UTF-8") +
+      MessagePack.pack([1, {"message" => "Bye World"}]).force_encoding("UTF-8")
+    ])
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 until pipeline.ready?
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket.puts(data)
+      socket.close
+
+      events = 2.times.collect { queue.pop }
+
+      insist { events[0]["@timestamp"] } == Time.at(0).utc
+      insist { events[0]["message"] } == "Hello World"
+      insist { events[0]["tags"] } == ["syslog"]
+
+      insist { events[1]["@timestamp"] } == Time.at(1).utc
+      insist { events[1]["message"] } == "Bye World"
+      insist { events[1]["tags"] } == ["syslog"]
+    end # input
+  end
+
+  describe "responds to tcp heartbeats" do
+    port = 5512
+    config <<-CONFIG
+      input {
+        fluent {
+          port => #{port}
+        }
+      }
+    CONFIG
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 until pipeline.ready?
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket.close
+    end # input
+  end
+
+  describe "responds to udp heartbeats" do
+    port = 5513
+    config <<-CONFIG
+      input {
+        fluent {
+          port => #{port}
+        }
+      }
+    CONFIG
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 until pipeline.ready?
+
+      socket = Stud.try(5.times) { UDPSocket.new(Socket::AF_INET) }
+      socket.send("\0", 0, "127.0.0.1", port)
+
+      Stud.try(5.times) {
+        IO.select([socket], nil, nil, 0.1)
+        data, _ = socket.recvfrom_nonblock(128)
+        insist { data } == "\0"
+      }
+
+      socket.close
+    end # input
+  end
+
+  describe "explicit codec does not have any effect" do
+    port = 5514
+    config <<-CONFIG
+      input {
+        fluent {
+          port => #{port}
+          codec => json
+        }
+      }
+    CONFIG
+
+    data = MessagePack.pack([
+      "syslog", 
+      MessagePack.pack([0, {"message" => "Hello World"}]).force_encoding("UTF-8")
+    ])
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 until pipeline.ready?
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket.puts(data)
+      socket.close
+
+      event = queue.pop
+
+      insist { event["@timestamp"] } == Time.at(0).utc
+      insist { event["message"] } == "Hello World"
+      insist { event["tags"] } == ["syslog"]
+    end # input
+  end
+
+  describe "ignore fluent\"s tag" do
+    port = 5515
+    config <<-CONFIG
+    input {
+      fluent {
+        port => #{port}
+        ignore_tag => true
+      }
+    }
+    CONFIG
+
+    data = MessagePack.pack([
+      "syslog", 
+      MessagePack.pack([0, {"message" => "Hello World"}]).force_encoding("UTF-8")
+    ])
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 until pipeline.ready?
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket.puts(data)
+      socket.close
+
+      event = queue.pop
+
+      insist { event["@timestamp"] } == Time.at(0).utc
+      insist { event["message"] } == "Hello World"
+      insist { event["tags"] } == nil
+    end # input
+  end
+
+end
+
+
+
