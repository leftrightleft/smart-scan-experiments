diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index 92ce5567d70..355a816e059 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -67,6 +67,15 @@ def get(namespaces_path, key, type)
       end
     end
 
+    ##
+    # Ensures that a metric on the provided `namespaces_path` with the provided `key`
+    # is registered, using the provided `metric_instance` IFF it is not already present.
+    #
+    # @param namespaces_path [Array<Symbol>]
+    # @param key [Symbol]
+    # @param metric_instance [Metric]
+    #
+    # @return [Boolean] true IFF the provided `metric_instance` was registered
     def register?(namespaces_path, key, metric_instance)
       registered = false
 
diff --git a/logstash-core/lib/logstash/instrument/metric_type.rb b/logstash-core/lib/logstash/instrument/metric_type.rb
index 1915e59a375..5fc7b4ec35f 100644
--- a/logstash-core/lib/logstash/instrument/metric_type.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type.rb
@@ -23,8 +23,8 @@ module LogStash module Instrument
   module MetricType
     METRIC_TYPE_LIST = {
       :counter => LogStash::Instrument::MetricType::Counter,
-      :gauge => LogStash::Instrument::MetricType::Gauge,
-      :uptime => LogStash::Instrument::MetricType::Uptime,
+      :gauge   => LogStash::Instrument::MetricType::Gauge,
+      :uptime  => LogStash::Instrument::MetricType::Uptime,
     }.freeze
 
     # Use the string to generate a concrete class for this metrics
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb b/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb
index c492f1a07e7..2b715d85404 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb
@@ -27,10 +27,8 @@ def initialize(metric, agent, options = {})
 
     def collect
       pipelines = @agent.running_user_defined_pipelines
-      pipelines.each do |_, pipeline|
-        unless pipeline.nil?
-          pipeline.collect_flow_metrics
-        end
+      pipelines.each_value do |pipeline|
+        pipeline.collect_flow_metrics unless pipeline.nil?
       end
     end
   end
diff --git a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
index be9eeb3101f..5e68297d831 100644
--- a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
@@ -31,9 +31,7 @@
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Set;
 import java.util.UUID;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -345,35 +343,24 @@ public final PipelineReporterExt reporter() {
     @JRubyMethod(name = "collect_dlq_stats")
     public final IRubyObject collectDlqStats(final ThreadContext context) {
         if (dlqEnabled(context).isTrue()) {
-            getDlqMetric(context).gauge(
-                    context,
-                    QUEUE_SIZE_IN_BYTES_KEY,
-                    dlqWriter(context).callMethod(context, "get_current_queue_size")
-            );
-            getDlqMetric(context).gauge(
-                    context,
-                    STORAGE_POLICY_KEY,
-                    dlqWriter(context).callMethod(context, "get_storage_policy")
-            );
-            getDlqMetric(context).gauge(
-                    context,
-                    MAX_QUEUE_SIZE_IN_BYTES_KEY,
-                    getSetting(context, "dead_letter_queue.max_bytes").convertToInteger());
-            getDlqMetric(context).gauge(
-                    context,
-                    DROPPED_EVENTS_KEY,
-                    dlqWriter(context).callMethod(context, "get_dropped_events")
-            );
-            getDlqMetric(context).gauge(
-                    context,
-                    LAST_ERROR_KEY,
-                    dlqWriter(context).callMethod(context, "get_last_error")
-            );
-            getDlqMetric(context).gauge(
-                    context,
-                    EXPIRED_EVENTS_KEY,
-                    dlqWriter(context).callMethod(context, "get_expired_events")
-            );
+            getDlqMetric(context).gauge(context,
+                                        QUEUE_SIZE_IN_BYTES_KEY,
+                                        dlqWriter(context).callMethod(context, "get_current_queue_size"));
+            getDlqMetric(context).gauge(context,
+                                        STORAGE_POLICY_KEY,
+                                        dlqWriter(context).callMethod(context, "get_storage_policy"));
+            getDlqMetric(context).gauge(context,
+                                        MAX_QUEUE_SIZE_IN_BYTES_KEY,
+                                        getSetting(context, "dead_letter_queue.max_bytes").convertToInteger());
+            getDlqMetric(context).gauge(context,
+                                        DROPPED_EVENTS_KEY,
+                                        dlqWriter(context).callMethod(context, "get_dropped_events"));
+            getDlqMetric(context).gauge(context,
+                                        LAST_ERROR_KEY,
+                                        dlqWriter(context).callMethod(context, "get_last_error"));
+            getDlqMetric(context).gauge(context,
+                                        EXPIRED_EVENTS_KEY,
+                                        dlqWriter(context).callMethod(context, "get_expired_events"));
         }
         return context.nil;
     }
@@ -390,15 +377,8 @@ public final IRubyObject isConfiguredReloadable(final ThreadContext context) {
 
     @JRubyMethod(name = "collect_stats")
     public final IRubyObject collectStats(final ThreadContext context) throws IOException {
-        final AbstractNamespacedMetricExt pipelineMetric = metric.namespace(
-            context,
-            RubyArray.newArray(
-                context.runtime,
-                Arrays.asList(
-                        STATS_KEY,
-                        PIPELINES_KEY,
-                        pipelineId.asString().intern(),
-                        QUEUE_KEY)));
+        final AbstractNamespacedMetricExt pipelineMetric =
+                metric.namespace(context, pipelineNamespacedPath(QUEUE_KEY));
 
         pipelineMetric.gauge(context, TYPE_KEY, getSetting(context, "queue.type"));
         if (queue instanceof JRubyWrappedAckedQueueExt) {
@@ -406,28 +386,19 @@ public final IRubyObject collectStats(final ThreadContext context) throws IOExce
             final RubyString dirPath = inner.ruby_dir_path(context);
             final AbstractNamespacedMetricExt capacityMetrics =
                 pipelineMetric.namespace(context, CAPACITY_NAMESPACE);
-            capacityMetrics.gauge(
-                context, PAGE_CAPACITY_IN_BYTES_KEY, inner.ruby_page_capacity(context)
-            );
-            capacityMetrics.gauge(
-                context, MAX_QUEUE_SIZE_IN_BYTES_KEY, inner.ruby_max_size_in_bytes(context)
-            );
-            capacityMetrics.gauge(
-                context, MAX_QUEUE_UNREAD_EVENTS_KEY, inner.ruby_max_unread_events(context)
-            );
-            capacityMetrics.gauge(
-                context, QUEUE_SIZE_IN_BYTES_KEY, inner.ruby_persisted_size_in_bytes(context)
-            );
+
+            capacityMetrics.gauge(context, PAGE_CAPACITY_IN_BYTES_KEY, inner.ruby_page_capacity(context));
+            capacityMetrics.gauge(context, MAX_QUEUE_SIZE_IN_BYTES_KEY, inner.ruby_max_size_in_bytes(context));
+            capacityMetrics.gauge(context, MAX_QUEUE_UNREAD_EVENTS_KEY, inner.ruby_max_unread_events(context));
+            capacityMetrics.gauge(context, QUEUE_SIZE_IN_BYTES_KEY, inner.ruby_persisted_size_in_bytes(context));
+
             final AbstractNamespacedMetricExt dataMetrics =
                 pipelineMetric.namespace(context, DATA_NAMESPACE);
             final FileStore fileStore = Files.getFileStore(Paths.get(dirPath.asJavaString()));
-            dataMetrics.gauge(
-                context,
-                FREE_SPACE_IN_BYTES_KEY,
-                context.runtime.newFixnum(fileStore.getUnallocatedSpace())
-            );
+            dataMetrics.gauge(context, FREE_SPACE_IN_BYTES_KEY, context.runtime.newFixnum(fileStore.getUnallocatedSpace()));
             dataMetrics.gauge(context, STORAGE_TYPE_KEY, context.runtime.newString(fileStore.type()));
             dataMetrics.gauge(context, PATH_KEY, dirPath);
+
             pipelineMetric.gauge(context, EVENTS_KEY, inner.ruby_unread_count(context));
         }
         return context.nil;
@@ -438,7 +409,7 @@ public final IRubyObject collectStats(final ThreadContext context) throws IOExce
     public final IRubyObject initializeFlowMetrics(final ThreadContext context) {
         if (metric.collector(context).isNil()) { return context.nil; }
 
-        final UptimeMetric uptimeMetric = initOrGetUptimeMetric(context, buildNamespace(), context.runtime.newSymbol("uptime_in_millis"));
+        final UptimeMetric uptimeMetric = initOrGetUptimeMetric(context, buildNamespace(), UPTIME_IN_MILLIS_KEY);
         final Metric<Number> uptimeInPreciseMillis = uptimeMetric.withUnitsPrecise(MILLISECONDS);
         final Metric<Number> uptimeInPreciseSeconds = uptimeMetric.withUnitsPrecise(SECONDS);
 
@@ -485,31 +456,31 @@ private static FlowMetric createFlowMetric(final RubySymbol name,
         return new FlowMetric(name.asJavaString(), numeratorMetric, denominatorMetric);
     }
 
-    LongCounter initOrGetCounterMetric(final ThreadContext context,
-                                       final RubySymbol[] subPipelineNamespacePath,
-                                       final RubySymbol metricName) {
+    private LongCounter initOrGetCounterMetric(final ThreadContext context,
+                                               final RubySymbol[] subPipelineNamespacePath,
+                                               final RubySymbol metricName) {
         final IRubyObject collector = this.metric.collector(context);
-        final IRubyObject fullNamespace = RubyArray.newArray(context.runtime, fullNamespacePath(subPipelineNamespacePath));
+        final IRubyObject fullNamespace = pipelineNamespacedPath(subPipelineNamespacePath);
 
         final IRubyObject retrievedMetric = collector.callMethod(context, "get", new IRubyObject[]{fullNamespace, metricName, context.runtime.newSymbol("counter")});
         return retrievedMetric.toJava(LongCounter.class);
     }
 
-    UptimeMetric initOrGetUptimeMetric(final ThreadContext context,
-                                       final RubySymbol[] subPipelineNamespacePath,
-                                       final RubySymbol uptimeMetricName) {
+    private UptimeMetric initOrGetUptimeMetric(final ThreadContext context,
+                                               final RubySymbol[] subPipelineNamespacePath,
+                                               final RubySymbol uptimeMetricName) {
         final IRubyObject collector = this.metric.collector(context);
-        final IRubyObject fullNamespace = RubyArray.newArray(context.runtime, fullNamespacePath(subPipelineNamespacePath));
+        final IRubyObject fullNamespace = pipelineNamespacedPath(subPipelineNamespacePath);
 
         final IRubyObject retrievedMetric = collector.callMethod(context, "get", new IRubyObject[]{fullNamespace, uptimeMetricName, context.runtime.newSymbol("uptime")});
         return retrievedMetric.toJava(UptimeMetric.class);
     }
 
-    <T> void storeMetric(final ThreadContext context,
-                         final RubySymbol[] subPipelineNamespacePath,
-                         final Metric<T> metric) {
+    private <T> void storeMetric(final ThreadContext context,
+                                 final RubySymbol[] subPipelineNamespacePath,
+                                 final Metric<T> metric) {
         final IRubyObject collector = this.metric.collector(context);
-        final IRubyObject fullNamespace = RubyArray.newArray(context.runtime, fullNamespacePath(subPipelineNamespacePath));
+        final IRubyObject fullNamespace = pipelineNamespacedPath(subPipelineNamespacePath);
         final IRubyObject metricKey = context.runtime.newSymbol(metric.getName());
 
         final IRubyObject wasRegistered = collector.callMethod(context, "register?", new IRubyObject[]{fullNamespace, metricKey, JavaUtil.convertJavaToUsableRubyObject(context.runtime, metric)});
@@ -520,17 +491,23 @@ <T> void storeMetric(final ThreadContext context,
         }
     }
 
-    RubySymbol[] fullNamespacePath(RubySymbol... subPipelineNamespacePath) {
+    private RubyArray<RubySymbol> pipelineNamespacedPath(final RubySymbol... subPipelineNamespacePath) {
         final RubySymbol[] pipelineNamespacePath = new RubySymbol[] { STATS_KEY, PIPELINES_KEY, pipelineId.asString().intern() };
         if (subPipelineNamespacePath.length == 0) {
-            return pipelineNamespacePath;
+            return rubySymbolArray(pipelineNamespacePath);
         }
         final RubySymbol[] fullNamespacePath = Arrays.copyOf(pipelineNamespacePath, pipelineNamespacePath.length + subPipelineNamespacePath.length);
         System.arraycopy(subPipelineNamespacePath, 0, fullNamespacePath, pipelineNamespacePath.length, subPipelineNamespacePath.length);
-        return fullNamespacePath;
+
+        return rubySymbolArray(fullNamespacePath);
     }
 
-    RubySymbol[] buildNamespace(final RubySymbol... namespace) {
+    @SuppressWarnings("unchecked")
+    private RubyArray<RubySymbol> rubySymbolArray(final RubySymbol[] symbols) {
+        return getRuntime().newArray(symbols);
+    }
+
+    private RubySymbol[] buildNamespace(final RubySymbol... namespace) {
         return namespace;
     }
 
@@ -608,14 +585,7 @@ protected SecretStore getSecretStore(final ThreadContext context) {
 
     private AbstractNamespacedMetricExt getDlqMetric(final ThreadContext context) {
         if (dlqMetric == null) {
-            dlqMetric = metric.namespace(
-                context, RubyArray.newArray(
-                    context.runtime,
-                    Arrays.asList(
-                            STATS_KEY,
-                            PIPELINES_KEY,
-                            pipelineId.asString().intern(),
-                            DLQ_KEY)));
+            dlqMetric = metric.namespace(context, pipelineNamespacedPath(DLQ_KEY));
         }
         return dlqMetric;
     }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
index c12ea262d89..329cea5de17 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
@@ -23,10 +23,12 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
 import org.jruby.RubyClass;
 import org.jruby.RubyObject;
+import org.jruby.RubySymbol;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.runtime.ThreadContext;
@@ -38,6 +40,8 @@
 import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.counter.LongCounter;
 
+import static org.logstash.instrument.metrics.MetricKeys.*;
+
 @JRubyClass(name = "WrappedWriteClient")
 public final class JRubyWrappedWriteClientExt extends RubyObject implements QueueWriter {
 
@@ -68,40 +72,31 @@ public JRubyWrappedWriteClientExt initialize(final ThreadContext context,
             (AbstractMetricExt) args[2], args[3]);
     }
 
-    public JRubyWrappedWriteClientExt initialize(
-        final JRubyAbstractQueueWriteClientExt queueWriteClientExt,
-        final String pipelineId,
-        final AbstractMetricExt metric,
-        final IRubyObject pluginId) {
+    public JRubyWrappedWriteClientExt initialize(final JRubyAbstractQueueWriteClientExt queueWriteClientExt,
+                                                 final String pipelineId,
+                                                 final AbstractMetricExt metric,
+                                                 final IRubyObject pluginId) {
         this.writeClient = queueWriteClientExt;
+
+        final RubySymbol pipelineIdSym = getRuntime().newSymbol(pipelineId);
+        final RubySymbol pluginIdSym = pluginId.asString().intern();
+
         // Synchronize on the metric since setting up new fields on it is not threadsafe
         synchronized (metric) {
             final AbstractNamespacedMetricExt eventsMetrics =
-                getMetric(metric,
-                        MetricKeys.STATS_KEY.asJavaString(),
-                        MetricKeys.EVENTS_KEY.asJavaString());
+                getMetric(metric, STATS_KEY, EVENTS_KEY);
 
             eventsMetricsCounter = LongCounter.fromRubyBase(eventsMetrics, MetricKeys.IN_KEY);
             eventsMetricsTime = LongCounter.fromRubyBase(eventsMetrics, MetricKeys.PUSH_DURATION_KEY);
 
             final AbstractNamespacedMetricExt pipelineEventMetrics =
-                getMetric(metric,
-                        MetricKeys.STATS_KEY.asJavaString(),
-                        MetricKeys.PIPELINES_KEY.asJavaString(),
-                        pipelineId,
-                        MetricKeys.EVENTS_KEY.asJavaString());
+                getMetric(metric, STATS_KEY, PIPELINES_KEY, pipelineIdSym, EVENTS_KEY);
 
             pipelineMetricsCounter = LongCounter.fromRubyBase(pipelineEventMetrics, MetricKeys.IN_KEY);
             pipelineMetricsTime = LongCounter.fromRubyBase(pipelineEventMetrics, MetricKeys.PUSH_DURATION_KEY);
 
-            final AbstractNamespacedMetricExt pluginMetrics = getMetric(
-                    metric,
-                    MetricKeys.STATS_KEY.asJavaString(),
-                    MetricKeys.PIPELINES_KEY.asJavaString(),
-                    pipelineId,
-                    MetricKeys.PLUGINS_KEY.asJavaString(),
-                    MetricKeys.INPUTS_KEY.asJavaString(),
-                    pluginId.asJavaString(), MetricKeys.EVENTS_KEY.asJavaString());
+            final AbstractNamespacedMetricExt pluginMetrics =
+                    getMetric(metric, STATS_KEY, PIPELINES_KEY, pipelineIdSym, PLUGINS_KEY, INPUTS_KEY, pluginIdSym, EVENTS_KEY);
             pluginMetricsCounter =
                 LongCounter.fromRubyBase(pluginMetrics, MetricKeys.OUT_KEY);
             pluginMetricsTime = LongCounter.fromRubyBase(pluginMetrics, MetricKeys.PUSH_DURATION_KEY);
@@ -160,17 +155,10 @@ private void incrementTimers(final long start) {
         pluginMetricsTime.increment(increment);
     }
 
-    private static AbstractNamespacedMetricExt getMetric(final AbstractMetricExt base,
-        final String... keys) {
-        return base.namespace(RubyUtil.RUBY.getCurrentContext(), toSymbolArray(keys));
-    }
 
-    private static IRubyObject toSymbolArray(final String... strings) {
-        final IRubyObject[] res = new IRubyObject[strings.length];
-        for (int i = 0; i < strings.length; ++i) {
-            res[i] = RubyUtil.RUBY.newSymbol(strings[i]);
-        }
-        return RubyUtil.RUBY.newArray(res);
+    private AbstractNamespacedMetricExt getMetric(final AbstractMetricExt base,
+                                                  final RubySymbol... keys) {
+        return base.namespace(getRuntime().getCurrentContext(), getRuntime().newArray(keys));
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/FlowMetric.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/FlowMetric.java
index e95d4d9de7a..b7621a790b2 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/FlowMetric.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/FlowMetric.java
@@ -1,3 +1,22 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
 package org.logstash.instrument.metrics;
 
 import java.math.BigDecimal;
@@ -6,8 +25,11 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
+import java.util.OptionalDouble;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.LongSupplier;
+import java.util.function.Supplier;
 
 public class FlowMetric extends AbstractMetric<Map<String,Double>> {
 
@@ -57,6 +79,9 @@ public void capture() {
         });
     }
 
+    /**
+     * @return a map containing all available finite rates (see {@link Capture#calculateRate(Capture)})
+     */
     public Map<String, Double> getValue() {
         final Capture headCapture = head.get();
         if (Objects.isNull(headCapture)) {
@@ -65,17 +90,8 @@ public Map<String, Double> getValue() {
 
         final Map<String, Double> rates = new HashMap<>();
 
-        final Double lifetimeRate = headCapture.calculateRate(baseline);
-
-        if (Objects.nonNull(lifetimeRate)) {
-            rates.put(LIFETIME_KEY, lifetimeRate);
-        }
-
-        final Capture instantCapture = instant.get();
-        final Double currentRate = headCapture.calculateRate(instantCapture);
-        if (Objects.nonNull(currentRate)) {
-            rates.put(CURRENT_KEY, currentRate);
-        }
+        headCapture.calculateRate(baseline).ifPresent((rate) -> rates.put(LIFETIME_KEY, rate));
+        headCapture.calculateRate(instant::get).ifPresent((rate) -> rates.put(CURRENT_KEY,  rate));
 
         return Map.copyOf(rates);
     }
@@ -101,20 +117,37 @@ public Capture(final Number numerator, final Number denominator, final long nano
             this.nanoTimestamp = nanoTimestamp;
         }
 
-        Double calculateRate(final Capture baseline) {
-            if (Objects.isNull(baseline)) { return null; }
-            if (baseline == this) { return null; }
+        /**
+         *
+         * @param baseline a non-null {@link Capture} from which to compare.
+         * @return an {@link OptionalDouble} that will be non-empty IFF we have sufficient information
+         *         to calculate a finite rate of change of the numerator relative to the denominator.
+         */
+        OptionalDouble calculateRate(final Capture baseline) {
+            Objects.requireNonNull(baseline, "baseline");
+            if (baseline == this) { return OptionalDouble.empty(); }
 
             final double deltaNumerator = this.numerator.doubleValue() - baseline.numerator.doubleValue();
             final double deltaDenominator = this.denominator.doubleValue() - baseline.denominator.doubleValue();
 
             // divide-by-zero safeguard
-            if (deltaDenominator == 0.0) { return null; }
+            if (deltaDenominator == 0.0) { return OptionalDouble.empty(); }
 
             // To prevent the appearance of false-precision, we round to 3 decimal places.
-            return BigDecimal.valueOf(deltaNumerator)
-                    .divide(BigDecimal.valueOf(deltaDenominator), 3, RoundingMode.HALF_UP)
-                    .doubleValue();
+            return OptionalDouble.of(BigDecimal.valueOf(deltaNumerator)
+                                               .divide(BigDecimal.valueOf(deltaDenominator), 3, RoundingMode.HALF_UP)
+                                               .doubleValue());
+        }
+
+        /**
+         * @param possibleBaseline a {@link Supplier<Capture>} that may return null
+         * @return an {@link OptionalDouble} that will be non-empty IFF we have sufficient information
+         *         to calculate a finite rate of change of the numerator relative to the denominator.
+         */
+        OptionalDouble calculateRate(final Supplier<Capture> possibleBaseline) {
+            return Optional.ofNullable(possibleBaseline.get())
+                           .map(this::calculateRate)
+                           .orElseGet(OptionalDouble::empty);
         }
 
         Duration calculateCapturePeriod(final Capture baseline) {
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/UptimeMetric.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/UptimeMetric.java
index ff9ec5dfcce..92decd22387 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/UptimeMetric.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/UptimeMetric.java
@@ -1,3 +1,22 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
 package org.logstash.instrument.metrics;
 
 import java.math.BigDecimal;
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginMetricsFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginMetricsFactoryExt.java
index e0286a589ac..bb6fd11a0f5 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginMetricsFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginMetricsFactoryExt.java
@@ -8,11 +8,12 @@
 import org.logstash.RubyUtil;
 import org.logstash.instrument.metrics.AbstractMetricExt;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
-import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.NullMetricExt;
 
 import java.util.Arrays;
 
+import static org.logstash.instrument.metrics.MetricKeys.*;
+
 /**
  * JRuby extension to implement a factory class for Plugin's metrics
  * */
@@ -46,11 +47,7 @@ AbstractNamespacedMetricExt getRoot(final ThreadContext context) {
             context,
             RubyArray.newArray(
                 context.runtime,
-                Arrays.asList(
-                        MetricKeys.STATS_KEY,
-                        MetricKeys.PIPELINES_KEY,
-                        pipelineId,
-                        MetricKeys.PLUGINS_KEY)));
+                Arrays.asList(STATS_KEY, PIPELINES_KEY, pipelineId, PLUGINS_KEY)));
     }
 
     @JRubyMethod
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
index 0c16697bee2..d855251bf53 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
@@ -38,6 +38,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.logstash.RubyUtil.RUBY;
 import static org.logstash.RubyUtil.RUBY_OUTPUT_DELEGATOR_CLASS;
+import static org.logstash.instrument.metrics.MetricKeys.EVENTS_KEY;
 
 @SuppressWarnings("rawtypes")
 @NotThreadSafe
@@ -203,7 +204,7 @@ private OutputDelegatorExt constructOutputDelegator() {
     }
 
     private RubyHash getMetricStore() {
-        return getMetricStore(new String[]{"output", "foo", MetricKeys.EVENTS_KEY.asJavaString()});
+        return getMetricStore(new String[]{"output", "foo", EVENTS_KEY.asJavaString()});
     }
 
     private long getMetricLongValue(String symbolName) {
