diff --git a/docs/static/contributing-java-plugin.asciidoc b/docs/static/contributing-java-plugin.asciidoc
index b17721a7bf0..04e994fed8d 100644
--- a/docs/static/contributing-java-plugin.asciidoc
+++ b/docs/static/contributing-java-plugin.asciidoc
@@ -1,7 +1,7 @@
 [[contributing-java-plugin]]
 == Contributing a Java Plugin
 
-experimental[]
+beta[]
 
 Now you can write your own Java plugin for use with {ls}.
 We have provided instructions and GitHub examples to give
@@ -13,7 +13,7 @@ including:
 * Extensions to the Java execution engine to support running Java plugins in
 Logstash pipelines
 * APIs for developing Java plugins. 
-The APIs are in the `co.elastic.logstash.api.v0` package. 
+The APIs are in the `co.elastic.logstash.api` package. 
 A Java plugin might break if it references classes or specific concrete
 implementations of API interfaces outside that package. The implementation of
 classes outside of the API package may change at any time.
@@ -24,7 +24,7 @@ Java plugins in Logstash. (Currently, this process is manual.)
 === Process overview
 Here are the steps:
 
-. Choose the type of plugin you want to create: input, filter, or output. 
+. Choose the type of plugin you want to create: input, codec, filter, or output. 
 . Set up your environment. 
 . Code the plugin.
 . Package and deploy the plugin.
@@ -35,20 +35,20 @@ Here are the steps:
 Here are the example repos:
 
 * https://github.com/logstash-plugins/logstash-input-java_input_example[Input plugin example]
-//* https://github.com/logstash-plugins/logstash-codec-java_codec_example[Codec plugin example]
+* https://github.com/logstash-plugins/logstash-codec-java_codec_example[Codec plugin example]
 * https://github.com/logstash-plugins/logstash-filter-java_filter_example[Filter plugin example]
 * https://github.com/logstash-plugins/logstash-output-java_output_example[Output plugin example]
 
 Here are the instructions:
 
 * <<java-input-plugin>>
-//* <<java-codec-plugin>>
+* <<java-codec-plugin>>
 * <<java-filter-plugin>>
 * <<java-output-plugin>>
 
 
 include::java-input.asciidoc[]
-//include::java-codec.asciidoc[]
+include::java-codec.asciidoc[]
 include::java-filter.asciidoc[]
 include::java-output.asciidoc[]
 
diff --git a/docs/static/include/javapluginpkg.asciidoc b/docs/static/include/javapluginpkg.asciidoc
index e4e2ee945fe..b3f16c1982f 100644
--- a/docs/static/include/javapluginpkg.asciidoc
+++ b/docs/static/include/javapluginpkg.asciidoc
@@ -61,7 +61,8 @@ end
 You can use this file with the following modifications: 
 
 * `s.name` must follow the +logstash-pass:attributes[{plugintype}]-<{plugintype}-name>+ pattern
-* `s.version` must match the `project.version` specified in the `build.gradle` file.
+* `s.version` must match the `project.version` specified in the `build.gradle` file. 
+Both versions should be set to be read from the `VERSION` file in this example.
 
 **+lib/logstash/{plugintype}s/<{plugintype}-name>.rb+**
 
diff --git a/docs/static/include/javapluginsetup.asciidoc b/docs/static/include/javapluginsetup.asciidoc
index 9cb497902b7..02e5d60114c 100644
--- a/docs/static/include/javapluginsetup.asciidoc
+++ b/docs/static/include/javapluginsetup.asciidoc
@@ -20,7 +20,7 @@ git clone --branch <branch_name> --single-branch https://github.com/elastic/logs
 The `branch_name` should correspond to the version of Logstash containing the
 preferred revision of the Java plugin API. 
 
-NOTE: The experimental version of the Java plugin API is available in the `6.6`
+NOTE: The beta version of the Java plugin API is available in the `6.7`
 branch of the Logstash codebase.
 
 Specify the `target_folder` for your local copy of the Logstash codebase. If you
diff --git a/docs/static/java-codec.asciidoc b/docs/static/java-codec.asciidoc
new file mode 100644
index 00000000000..5ed4d3c905e
--- /dev/null
+++ b/docs/static/java-codec.asciidoc
@@ -0,0 +1,410 @@
+:register_method:	true
+:encode_method:		true
+:decode_method:		true
+:plugintype:    	codec
+:pluginclass:   	Codecs
+:pluginname:    	example
+:pluginnamecap: 	Example
+:plugintypecap:   Codec
+:sversion:        '0.2.0'
+
+:pluginrepo:      https://github.com/logstash-plugins/logstash-codec-java_codec_example[example codec plugin]
+
+:blockinput:		true
+
+//:getstarted: Let's step through creating a {plugintype} plugin using the https://github.com/logstash-plugins/logstash-codec-example/[example {plugintype} plugin].
+
+//:methodheader: Logstash codecs must implement the `register` method, and the `decode` method or the `encode` method (or both).
+
+[[java-codec-plugin]]
+=== How to write a Java codec plugin
+
+beta[]
+
+// Pulls in shared section: Setting Up Environment
+include::include/javapluginsetup.asciidoc[]
+
+[float]
+=== Code the plugin
+
+The example codec plugin decodes messages separated by a configurable delimiter
+and encodes messages by writing their string  representation separated by a
+delimiter. For example, if the codec were configured with `/` as the delimiter,
+the input text `event1/event2/` would be decoded into two separate events with
+`message` fields of `event1` and `event2`,  respectively. Note that this is only
+an example codec and does not cover all the edge cases that a production-grade
+codec should cover.
+
+Let's look at the main class in that codec filter:
+ 
+[source,java]
+-----
+@LogstashPlugin(name="java_codec_example")
+public class JavaCodecExample implements Codec {
+
+    public static final PluginConfigSpec<String> DELIMITER_CONFIG =
+            PluginConfigSpec.stringSetting("delimiter", ",");
+
+    private final String id;
+    private final String delimiter;
+    private final CharsetEncoder encoder;
+    private Event currentEncodedEvent;
+    private CharBuffer currentEncoding;
+
+    public JavaCodecExample(final Configuration config, final Context context) {
+        this(config.get(DELIMITER_CONFIG));
+    }
+
+    private JavaCodecExample(String delimiter) {
+        this.id = UUID.randomUUID().toString();
+        this.delimiter = delimiter;
+        this.encoder = Charset.defaultCharset().newEncoder();
+    }
+
+    @Override
+    public void decode(ByteBuffer byteBuffer, Consumer<Map<String, Object>> consumer) {
+        // a not-production-grade delimiter decoder
+        byte[] byteInput = new byte[byteBuffer.remaining()];
+        byteBuffer.get(byteInput);
+        if (byteInput.length > 0) {
+            String input = new String(byteInput);
+            String[] split = input.split(delimiter);
+            for (String s : split) {
+                Map<String, Object> map = new HashMap<>();
+                map.put("message", s);
+                consumer.accept(map);
+            }
+        }
+    }
+
+    @Override
+    public void flush(ByteBuffer byteBuffer, Consumer<Map<String, Object>> consumer) {
+        // if the codec maintains any internal state such as partially-decoded input, this
+        // method should flush that state along with any additional input supplied in
+        // the ByteBuffer
+
+        decode(byteBuffer, consumer); // this is a simplistic implementation
+    }
+
+    @Override
+    public boolean encode(Event event, ByteBuffer buffer) throws EncodeException {
+        try {
+            if (currentEncodedEvent != null && event != currentEncodedEvent) {
+                throw new EncodeException("New event supplied before encoding of previous event was completed");
+            } else if (currentEncodedEvent == null) {
+                currentEncoding = CharBuffer.wrap(event.toString() + delimiter);
+            }
+
+            CoderResult result = encoder.encode(currentEncoding, buffer, true);
+            buffer.flip();
+            if (result.isError()) {
+                result.throwException();
+            }
+
+            if (result.isOverflow()) {
+                currentEncodedEvent = event;
+                return false;
+            } else {
+                currentEncodedEvent = null;
+                return true;
+            }
+        } catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        // should return a list of all configuration options for this plugin
+        return Collections.singletonList(DELIMITER_CONFIG);
+    }
+
+    @Override
+    public Codec cloneCodec() {
+        return new JavaCodecExample(this.delimiter);
+    }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
+}
+-----
+
+Let's step through and examine each part of that class.
+
+[float]
+==== Class declaration
+
+[source,java]
+-----
+@LogstashPlugin(name="java_codec_example")
+public class JavaCodecExample implements Codec {
+-----
+
+Notes about the class declaration:
+
+* All Java plugins must be annotated with the `@LogstashPlugin` annotation. Additionally:
+** The `name` property of the annotation must be supplied and defines the name of the plugin as it will be used
+   in the Logstash pipeline definition. For example, this codec would be referenced in the codec section of the
+   an appropriate input or output in the Logstash pipeline defintion as `codec => java_codec_example { }`
+** The value of the `name` property must match the name of the class excluding casing and underscores.
+* The class must implement the `co.elastic.logstash.api.Codec` interface.
+
+[float]
+===== Plugin settings
+
+The snippet below contains both the setting definition and the method referencing it:
+
+[source,java]
+-----
+public static final PluginConfigSpec<String> DELIMITER_CONFIG =
+        PluginConfigSpec.stringSetting("delimiter", ",");
+
+@Override
+public Collection<PluginConfigSpec<?>> configSchema() {
+    return Collections.singletonList(DELIMITER_CONFIG);
+}
+-----
+
+The `PluginConfigSpec` class allows developers to specify the settings that a
+plugin supports complete with setting  name, data type, deprecation status,
+required status, and default value. In this example, the `delimiter` setting
+defines the delimiter on which the codec will split events. It is not a required
+setting and if it is not explicitly  set, its default value will be `,`.
+
+The `configSchema` method must return a list of all settings that the plugin
+supports. The Logstash execution engine  will validate that all required
+settings are present and that no unsupported settings are present.
+
+[float]
+===== Constructor and initialization
+
+[source,java]
+-----
+private final String id;
+private final String delimiter;
+private final CharsetEncoder encoder;
+
+public JavaCodecExample(final Configuration config, final Context context) {
+    this(config.get(DELIMITER_CONFIG));
+}
+
+private JavaCodecExample(String delimiter) {
+    this.id = UUID.randomUUID().toString();
+    this.delimiter = delimiter;
+    this.encoder = Charset.defaultCharset().newEncoder();
+}
+-----
+
+All Java codec plugins must have a constructor taking a `Configuration` and
+`Context` argument. This is the  constructor that will be used to instantiate
+them at runtime. The retrieval and validation of all plugin settings  should
+occur in this constructor. In this example, the delimiter to be used for
+delimiting events is retrieved from  its setting and stored in a local variable
+so that it can be used later in the `decode` and `encode` methods. The codec's
+ID is initialized to a random UUID (as should be done for most codecs), and a
+local `encoder` variable is initialized to encode and decode with a specified
+character set.
+
+Any additional initialization may occur in the constructor as well. If there are
+any unrecoverable errors encountered in the configuration or initialization of
+the codec plugin, a descriptive exception should be thrown. The exception will
+be logged and will prevent Logstash from starting.
+
+[float]
+==== Codec methods
+
+[source,java]
+-----
+@Override
+public void decode(ByteBuffer byteBuffer, Consumer<Map<String, Object>> consumer) {
+    // a not-production-grade delimiter decoder
+    byte[] byteInput = new byte[byteBuffer.remaining()];
+    byteBuffer.get(byteInput);
+    if (byteInput.length > 0) {
+        String input = new String(byteInput);
+        String[] split = input.split(delimiter);
+        for (String s : split) {
+            Map<String, Object> map = new HashMap<>();
+            map.put("message", s);
+            consumer.accept(map);
+        }
+    }
+}
+
+@Override
+public void flush(ByteBuffer byteBuffer, Consumer<Map<String, Object>> consumer) {
+    decode(byteBuffer, consumer); // this is a simplistic implementation
+}
+
+@Override
+public boolean encode(Event event, ByteBuffer buffer) throws EncodeException {
+    try {
+        if (currentEncodedEvent != null && event != currentEncodedEvent) {
+            throw new EncodeException("New event supplied before encoding of previous event was completed");
+        } else if (currentEncodedEvent == null) {
+            currentEncoding = CharBuffer.wrap(event.toString() + delimiter);
+        }
+
+        CoderResult result = encoder.encode(currentEncoding, buffer, true);
+        buffer.flip();
+        if (result.isError()) {
+            result.throwException();
+        }
+
+        if (result.isOverflow()) {
+            currentEncodedEvent = event;
+            return false;
+        } else {
+            currentEncodedEvent = null;
+            return true;
+        }
+    } catch (IOException e) {
+        throw new IllegalStateException(e);
+    }
+}
+
+-----
+
+The `decode`, `flush`, and `encode` methods provide the core functionality of
+the codec. Codecs may be used by inputs to decode a sequence or stream of bytes
+into events or by outputs to encode events into a sequence of bytes.
+
+The `decode` method decodes events from the specified `ByteBuffer` and passes
+them to the provided `Consumer`. The  input must provide a `ByteBuffer` that is
+ready for reading with `byteBuffer.position()` indicating the next position to
+read and `byteBuffer.limit()` indicating the first byte in the buffer that is
+not safe to read. Codecs must ensure that `byteBuffer.position()` reflects the
+last-read position before returning control to the input. The input is then
+responsible for returning the buffer to write mode via either
+`byteBuffer.clear()` or `byteBuffer.compact()` before resuming writes. In the
+example above, the `decode` method simply splits the incoming byte stream on the
+specified delimiter. A production-grade codec such as
+https://github.com/elastic/logstash/blob/6.7/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java[`java-line`]
+would not make the simplifying assumption that the end of the supplied byte
+stream corresponded with the end of an  event.
+
+The `flush` method works in coordination with the `decode` method to decode all
+remaining events from the specified  `ByteBuffer` along with any internal state
+that may remain after previous calls to the `decode` method. As an example of
+internal state that a codec might maintain, consider an input stream of bytes
+`event1/event2/event3` with a  delimiter of `/`. Due to buffering or other
+reasons, the input might supply a partial stream of bytes such as  `event1/eve`
+to the codec's `decode` method. In this case, the codec could save the beginning
+three characters `eve`  of the second event rather than assuming that the
+supplied byte stream ends on an event boundary. If the next call to `decode`
+supplied the `nt2/ev` bytes, the codec would prepend the saved `eve` bytes to
+produce the full `event2` event and then save the remaining `ev` bytes for
+decoding when the remainder of the bytes for that event were supplied. A call to
+`flush` signals the codec that the supplied bytes represent the end of an event
+stream and all remaining bytes should be decoded to events. The `flush` example
+above is a simplistic implementation that does not maintain any state about
+partially-supplied byte streams across calls to `decode`.
+
+The `encode` method encodes an event into a sequence of bytes and writes it into
+the specified `ByteBuffer`. Under  ideal circumstances, the entirety of the
+event's encoding will fit into the supplied buffer. In cases where the buffer
+has insufficient space to hold the event's encoding, the codec must fill the
+buffer with as much of the event's encoding as possible, the `encode` must
+return `false`, and the output must call the `encode` method with the same event
+and a buffer that has more `buffer.remaining()` bytes. The output typically does
+that by draining the partial encoding from the supplied buffer. This process
+must be repeated until the event's entire encoding is written to the buffer at
+which point the `encode` method will return `true`. Attempting to call this
+method with a new event before the entirety of the previous event's encoding has
+been written to a buffer must result in an `EncodeException`. As the coneptual
+inverse of the `decode` method, the `encode` method must return the buffer in a
+state from which it can be read, typically by calling `buffer.flip()` before
+returning. In the example above, the `encode` method attempts to write the
+event's encoding to the supplied buffer. If the buffer contains sufficient free
+space, the entirety of the event is written and `true` is returned. Otherwise,
+the method writes as much of the event's encoding to the buffer as possible,
+returns `false`, and stores the remainder to be written to the buffer in the
+next call to the `encode` method.
+
+[float]
+==== cloneCodec method
+
+[source,java]
+-----
+@Override
+public Codec cloneCodec() {
+    return new JavaCodecExample(this.delimiter);
+}
+-----
+
+The `cloneCodec` method should return an identical instance of the codec with the exception of its ID. Because codecs
+may be stateful, a separate instance of each codec must be supplied to each worker thread in a pipeline. For all
+pipelines with more than one worker, the `cloneCodec` method is called by the Logstash execution engine to create all 
+codec instances beyond the first. In the example above, the codec is cloned with the same delimiter but a different ID. 
+
+[float]
+==== getId method
+
+[source,java]
+-----
+@Override
+public String getId() {
+    return id;
+}
+-----
+
+For codec plugins, the `getId` method should always return the id that was set at instantiation time. This is typically
+an UUID.
+
+[float]
+==== Unit tests
+
+Lastly, but certainly not least importantly, unit tests are strongly encouraged.
+The example codec plugin includes an 
+https://github.com/logstash-plugins/logstash-codec-java_codec_example/blob/master/src/test/java/org/logstash/javaapi/JavaCodecExampleTest.java[example unit
+test] that you can use as a template for your own.
+
+// Pulls in shared section about Packaging and Deploying
+include::include/javapluginpkg.asciidoc[]
+
+[float]
+=== Run Logstash with the Java codec plugin
+
+To test the plugin, start Logstash with:
+
+[source,java]
+-----
+echo "foo,bar" | bin/logstash --java-execution -e 'input { java_stdin { codec => java_codec_example } } }'
+-----
+
+Note that the `--java-execution` flag to enable the Java execution engine is required as Java plugins are not supported
+in the Ruby execution engine.
+The expected Logstash output (excluding initialization) with the configuration above is:
+
+[source,txt]
+-----
+{
+      "@version" => "1",
+       "message" => "foo",
+    "@timestamp" => yyyy-MM-ddThh:mm:ss.SSSZ,
+          "host" => "<yourHostName>"
+}
+{
+      "@version" => "1",
+       "message" => "bar\n",
+    "@timestamp" => yyyy-MM-ddThh:mm:ss.SSSZ,
+          "host" => "<yourHostName>"
+}
+-----
+
+[float]
+=== Feedback
+
+If you have any feedback on Java plugin support in Logstash, please comment on our 
+https://github.com/elastic/logstash/issues/9215[main Github issue] or post in the 
+https://discuss.elastic.co/c/logstash[Logstash forum].
+
+:pluginrepo!:
+:sversion!:
+:plugintypecap!:
+:pluginnamecap!:
+:pluginname!:
+:pluginclass!:
+:plugintype!:
diff --git a/docs/static/java-filter.asciidoc b/docs/static/java-filter.asciidoc
index 6114cbe9133..886b8a4d000 100644
--- a/docs/static/java-filter.asciidoc
+++ b/docs/static/java-filter.asciidoc
@@ -14,7 +14,7 @@
 [[java-filter-plugin]]
 === How to write a Java filter plugin
 
-experimental[]
+beta[]
 
 // Pulls in shared section: Setting Up Environment
 include::include/javapluginsetup.asciidoc[]
@@ -29,26 +29,27 @@ to `day_of_week: "yadnoM"`. Let's look at the main class in that example filter:
  
 [source,java]
 -----
-import org.apache.commons.lang3.StringUtils;
-
 @LogstashPlugin(name = "java_filter_example")
 public class JavaFilterExample implements Filter {
 
     public static final PluginConfigSpec<String> SOURCE_CONFIG =
-            Configuration.stringSetting("source", "message");
+            PluginConfigSpec.stringSetting("source", "message");
 
+    private String id;
     private String sourceField;
 
-    public JavaFilterExample(Configuration config, Context context) {
+    public JavaFilterExample(String id, Configuration config, Context context) {
+        this.id = id;
         this.sourceField = config.get(SOURCE_CONFIG);
     }
 
     @Override
-    public Collection<Event> filter(Collection<Event> events) {
+    public Collection<Event> filter(Collection<Event> events, FilterMatchListener matchListener) {
         for (Event e : events) {
             Object f = e.getField(sourceField);
             if (f instanceof String) {
                 e.setField(sourceField, StringUtils.reverse((String)f));
+                matchListener.filterMatched(e);                
             }
         }
         return events;
@@ -58,6 +59,11 @@ public class JavaFilterExample implements Filter {
     public Collection<PluginConfigSpec<?>> configSchema() {
         return Collections.singletonList(SOURCE_CONFIG);
     }
+    
+    @Override
+    public String getId() {
+        return this.id;
+    }      
 }
 -----
 
@@ -79,7 +85,7 @@ Notes about the class declaration:
    in the Logstash pipeline definition. For example, this filter would be referenced in the filter section of the
    Logstash pipeline defintion as `filter { java_filter_example => { .... } }`
 ** The value of the `name` property must match the name of the class excluding casing and underscores.
-* The class must implement the `co.elastic.logstash.api.v0.Filter` interface.
+* The class must implement the `co.elastic.logstash.api.Filter` interface.
 
 [float]
 ==== Plugin settings
@@ -88,7 +94,7 @@ The snippet below contains both the setting definition and the method referencin
 [source,java]
 -----
 public static final PluginConfigSpec<String> SOURCE_CONFIG =
-        Configuration.stringSetting("source", "message");
+        PluginConfigSpec.stringSetting("source", "message");
 
 @Override
 public Collection<PluginConfigSpec<?>> configSchema() {
@@ -110,19 +116,21 @@ no unsupported settings are present.
 
 [source,java]
 -----
+private String id;
 private String sourceField;
 
-public JavaFilterExample(Configuration config, Context context) {
+public JavaFilterExample(String id, Configuration config, Context context) {
+    this.id = id;
     this.sourceField = config.get(SOURCE_CONFIG);
 }
 -----
 
-All Java filter plugins must have a constructor taking both a `Configuration`
-and `Context` argument. This is the constructor that will be used to instantiate
-them at runtime. The retrieval and validation of all plugin settings should
-occur in this constructor. In this example, the name of the field to be reversed
-in each event is retrieved from its setting and stored in a local variable so
-that it can be used later in the `filter` method. 
+All Java filter plugins must have a constructor taking a `String` id and a
+`Configuration` and `Context` argument.  This is the constructor that will be
+used to instantiate them at runtime. The retrieval and validation of all plugin
+settings should occur in this constructor. In this example, the name of the
+field to be reversed in each event is  retrieved from its setting and stored in
+a local variable so that it can be used later in the `filter` method. 
 
 Any additional initialization may occur in the constructor as well. If there are
 any unrecoverable errors encountered in the configuration or initialization of
@@ -135,11 +143,12 @@ be logged and will prevent Logstash from starting.
 [source,java]
 -----
 @Override
-public Collection<Event> filter(Collection<Event> events) {
+public Collection<Event> filter(Collection<Event> events, FilterMatchListener matchListener) {
     for (Event e : events) {
         Object f = e.getField(sourceField);
         if (f instanceof String) {
             e.setField(sourceField, StringUtils.reverse((String)f));
+            matchListener.filterMatched(e);            
         }
     }
     return events;
@@ -175,6 +184,34 @@ In the example above, the value of the `source` field is retrieved from each
 event and reversed if it is a string value. Because each event is mutated in
 place, the incoming `events` collection can be returned.
 
+The `matchListener` is the mechanism by which filters indicate which events
+"match". The common actions for filters  such as `add_field` and `add_tag` are
+applied only to events that are designated as "matching". Some filters such as
+the https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html[grok
+filter]
+have a clear definition  for what constitutes a matching event and will notify
+the listener only for matching events. Other filters such as the 
+https://www.elastic.co/guide/en/logstash/current/plugins-filters-uuid.html[UUID
+filter]
+have no specific match  criteria and should notify the listener for every event
+filtered. In this example, the filter notifies the match listener for any event
+that had a `String` value in its `source` field and was therefore able to be
+reversed.
+
+[float]
+==== getId method
+
+[source,java]
+-----
+@Override
+public String getId() {
+    return id;
+}
+----
+
+For filter plugins, the `getId` method should always return the id that was provided to the plugin through its
+constructor at instantiation time.
+
 [float]
 ==== Unit tests
 
diff --git a/docs/static/java-input.asciidoc b/docs/static/java-input.asciidoc
index 0fd2ed48fa5..91734827505 100644
--- a/docs/static/java-input.asciidoc
+++ b/docs/static/java-input.asciidoc
@@ -13,7 +13,7 @@
 [[java-input-plugin]]
 === How to write a Java input plugin
 
-experimental[]
+beta[]
 
 // Pulls in shared section: Setting Up Environment
 include::include/javapluginsetup.asciidoc[]
@@ -30,28 +30,31 @@ terminating. Let's look at the main class in the  example input.
 public class JavaInputExample implements Input {
 
     public static final PluginConfigSpec<Long> EVENT_COUNT_CONFIG =
-            Configuration.numSetting("count", 3);
+            PluginConfigSpec.numSetting("count", 3);
 
     public static final PluginConfigSpec<String> PREFIX_CONFIG =
-            Configuration.stringSetting("prefix", "message");
+            PluginConfigSpec.stringSetting("prefix", "message");
 
+    private String id;
     private long count;
     private String prefix;
     private final CountDownLatch done = new CountDownLatch(1);
     private volatile boolean stopped;
 
-    public JavaInputExample(Configuration config, Context context) {
+
+    public JavaInputExample(String id, Configuration config, Context context) {
+            this.id = id;
         count = config.get(EVENT_COUNT_CONFIG);
         prefix = config.get(PREFIX_CONFIG);
     }
 
     @Override
-    public void start(QueueWriter queueWriter) {
+    public void start(Consumer<Map<String, Object>> consumer) {
         int eventCount = 0;
         try {
             while (!stopped && eventCount < count) {
                 eventCount++;
-                queueWriter.push(Collections.singletonMap("message",
+                consumer.accept.push(Collections.singletonMap("message",
                         prefix + " " + StringUtils.center(eventCount + " of " + count, 20)));
             }
         } finally {
@@ -74,6 +77,11 @@ public class JavaInputExample implements Input {
     public Collection<PluginConfigSpec<?>> configSchema() {
         return Arrays.asList(EVENT_COUNT_CONFIG, PREFIX_CONFIG);
     }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
 }
 -----
 
@@ -95,7 +103,7 @@ Notes about the class declaration:
    in the Logstash pipeline definition. For example, this input would be referenced in the input section of the
    Logstash pipeline defintion as `input { java_input_example => { .... } }`
 ** The value of the `name` property must match the name of the class excluding casing and underscores.
-* The class must implement the `co.elastic.logstash.api.v0.Input` interface.
+* The class must implement the `co.elastic.logstash.api.Input` interface.
 
 [float]
 ==== Plugin settings
@@ -105,10 +113,10 @@ The snippet below contains both the setting definition and the method referencin
 [source,java]
 -----
 public static final PluginConfigSpec<Long> EVENT_COUNT_CONFIG =
-        Configuration.numSetting("count", 3);
+        PluginConfigSpec.numSetting("count", 3);
 
 public static final PluginConfigSpec<String> PREFIX_CONFIG =
-        Configuration.stringSetting("prefix", "message");
+        PluginConfigSpec.stringSetting("prefix", "message");
 
 @Override
 public Collection<PluginConfigSpec<?>> configSchema() {
@@ -134,21 +142,23 @@ unsupported settings are present.
 
 [source,java]
 -----
+private String id;
 private long count;
 private String prefix;
 
-public JavaInputExample(Configuration config, Context context) {
+public JavaInputExample(String id, Configuration config, Context context) {
+    this.id = id;
     count = config.get(EVENT_COUNT_CONFIG);
     prefix = config.get(PREFIX_CONFIG);
 }
 -----
 
-All Java input plugins must have a constructor taking both a `Configuration` and
-`Context` argument. This is the constructor that will be used to instantiate
-them at runtime. The retrieval and validation of all plugin settings should
-occur in this constructor. In this example, the values of the two plugin
-settings are retrieved and stored in local variables for later use in the
-`start` method. 
+All Java input plugins must have a constructor taking a `String` id and
+`Configuration` and `Context` argument. This is the constructor that will be
+used to instantiate them at runtime. The retrieval and validation of all plugin
+settings should occur in this constructor. In this example, the values of the
+two plugin settings are retrieved and stored in local variables for later use in
+the `start` method. 
 
 Any additional initialization may occur in the constructor as well. If there are
 any unrecoverable errors encountered in the configuration or initialization of
@@ -161,12 +171,12 @@ be logged and will prevent Logstash from starting.
 [source,java]
 -----
 @Override
-public void start(QueueWriter queueWriter) {
+public void start(Consumer<Map<String, Object>> consumer) {
     int eventCount = 0;
     try {
         while (!stopped && eventCount < count) {
             eventCount++;
-            queueWriter.push(Collections.singletonMap("message",
+            consumer.accept.push(Collections.singletonMap("message",
                     prefix + " " + StringUtils.center(eventCount + " of " + count, 20)));
         }
     } finally {
@@ -188,7 +198,7 @@ the `stop` method. If the input produces a finite stream of events, this method
 event in the stream is produced or a stop request is made, whichever comes first.
 
 Events should be constructed as instances of `Map<String, Object>` and pushed into the event pipeline via the
-`QueueWriter.push()` method. 
+`Consumer<Map<String, Object>>.accept()` method. 
 
 [float]
 ==== Stop and awaitStop methods
@@ -215,10 +225,24 @@ mechanism may be implemented in any way that honors the API contract though a
 
 Inputs stop both asynchronously and cooperatively. Use the `awaitStop` method to
 block until the input has  completed the stop process. Note that this method
-should **not** signal the input to stop as the `stop` method  does. The
+should **not** signal the input to stop as the `stop` method does. The
 awaitStop mechanism may be implemented in any way that honors the API contract
 though a `CountDownLatch` works well for many use cases.
 
+[float]
+==== getId method
+
+[source,java]
+-----
+@Override
+public String getId() {
+    return id;
+}
+-----
+
+For input plugins, the `getId` method should always return the id that was provided to the plugin through its
+constructor at instantiation time.
+
 [float]
 ==== Unit tests
 Lastly, but certainly not least importantly, unit tests are strongly encouraged.
diff --git a/docs/static/java-output.asciidoc b/docs/static/java-output.asciidoc
index c1ab52c3a6d..0ea37476898 100644
--- a/docs/static/java-output.asciidoc
+++ b/docs/static/java-output.asciidoc
@@ -15,7 +15,7 @@
 [[java-output-plugin]]
 === How to write a Java output plugin
 
-experimental[]
+beta[]
 
 // Pulls in shared section: Setting Up Environment
 include::include/javapluginsetup.asciidoc[]
@@ -23,41 +23,39 @@ include::include/javapluginsetup.asciidoc[]
 [float]
 === Code the plugin
 
-The example output plugin prints events in JSON format to the console. Let's
-look at the main class in that example output:
+The example output plugin prints events to the console using the event's
+`toString` method. Let's look at the main class in the example output:
  
 [source,java]
 -----
-@LogstashPlugin(name="java_output_example")
+@LogstashPlugin(name = "java_output_example")
 public class JavaOutputExample implements Output {
 
     public static final PluginConfigSpec<String> PREFIX_CONFIG =
-            Configuration.stringSetting("prefix", "");
+            PluginConfigSpec.stringSetting("prefix", "");
 
+    private final String id;
     private String prefix;
     private PrintStream printer;
     private final CountDownLatch done = new CountDownLatch(1);
     private volatile boolean stopped = false;
 
-    public JavaOutputExample(final Configuration configuration, final Context context) {
-        this(configuration, context, System.out);
+    public JavaOutputExample(final String id, final Configuration configuration, final Context context) {
+        this(id, configuration, context, System.out);
     }
 
-    JavaOutputExample(final Configuration config, final Context context, OutputStream targetStream) {
+    JavaOutputExample(final String id, final Configuration config, final Context context, OutputStream targetStream) {
+        this.id = id;
         prefix = config.get(PREFIX_CONFIG);
         printer = new PrintStream(targetStream);
     }
 
     @Override
     public void output(final Collection<Event> events) {
-        try {
-            Iterator<Event> z = events.iterator();
-            while (z.hasNext() && !stopped) {
-                String s = prefix + z.next().toJson();
-                printer.println(s);
-            }
-        } catch (JsonProcessingException e) {
-            throw new IllegalStateException(e);
+      Iterator<Event> z = events.iterator();
+      while (z.hasNext() && !stopped) {
+          String s = prefix + z.next();
+          printer.println(s);
         }
     }
 
@@ -76,6 +74,11 @@ public class JavaOutputExample implements Output {
     public Collection<PluginConfigSpec<?>> configSchema() {
         return Collections.singletonList(PREFIX_CONFIG);
     }
+  
+    @Override
+    public String getId() {
+        return id;
+    }
 }
 -----
 
@@ -97,7 +100,7 @@ Notes about the class declaration:
    in the Logstash pipeline definition. For example, this output would be referenced in the output section of the
    Logstash pipeline definition as `output { java_output_example => { .... } }`
 ** The value of the `name` property must match the name of the class excluding casing and underscores.
-* The class must implement the `co.elastic.logstash.api.v0.Output` interface.
+* The class must implement the `co.elastic.logstash.api.Output` interface.
 
 [float]
 ==== Plugin settings
@@ -107,7 +110,7 @@ The snippet below contains both the setting definition and the method referencin
 [source,java]
 -----
 public static final PluginConfigSpec<String> PREFIX_CONFIG =
-        Configuration.stringSetting("prefix", "");
+        PluginConfigSpec.stringSetting("prefix", "");
 
 @Override
 public Collection<PluginConfigSpec<?>> configSchema() {
@@ -131,26 +134,28 @@ unsupported settings are present.
 
 [source,java]
 -----
+private final String id;
 private String prefix;
 private PrintStream printer;
 
-public JavaOutputExample(final Configuration configuration, final Context context) {
+public JavaOutputExample(final String id, final Configuration configuration, final Context context) {
     this(configuration, context, System.out);
 }
 
-JavaOutputExample(final Configuration config, final Context context, OutputStream targetStream) {
+JavaOutputExample(final String id, final Configuration config, final Context context, OutputStream targetStream) {
+    this.id = id;
     prefix = config.get(PREFIX_CONFIG);
     printer = new PrintStream(targetStream);
 }
 -----
 
-All Java output plugins must have a constructor taking both a `Configuration`
-and `Context` argument. This is the constructor that will be used to instantiate
-them at runtime. The retrieval and validation of all plugin settings should
-occur in this constructor. In this example, the values of the `prefix` setting
-is retrieved and stored in a local variable for later use in the `output`
-method. In this example, a second, pacakge private constructor is defined that
-is useful for unit testing with a `Stream` other than `System.out`.
+All Java output plugins must have a constructor taking a `String` id and a
+`Configuration` and `Context` argument. This is the constructor that will be
+used to instantiate them at runtime. The retrieval and validation of all plugin
+settings should occur in this constructor. In this example, the values of the
+`prefix` setting is retrieved and stored in a local variable for later use in
+the `output` method. In this example, a second, pacakge private constructor is
+defined that is useful for unit testing with a `Stream` other than `System.out`.
 
 Any additional initialization may occur in the constructor as well. If there are
 any unrecoverable errors encountered in the configuration or initialization of
@@ -164,14 +169,10 @@ be logged and will prevent Logstash from starting.
 -----
 @Override
 public void output(final Collection<Event> events) {
-    try {
-        Iterator<Event> z = events.iterator();
-        while (z.hasNext() && !stopped) {
-            String s = prefix + z.next().toJson();
-            printer.println(s);
-        }
-    } catch (JsonProcessingException e) {
-        throw new IllegalStateException(e);
+    Iterator<Event> z = events.iterator();
+    while (z.hasNext() && !stopped) {
+        String s = prefix + z.next();
+        printer.println(s);
     }
 }
 -----
@@ -210,6 +211,20 @@ should **not** signal the output to stop as the `stop` method  does. The
 awaitStop mechanism may be implemented in any way that honors the API contract
 though a `CountDownLatch` works well for many use cases.
 
+[float]
+==== getId method
+
+[source,java]
+-----
+@Override
+public String getId() {
+    return id;
+}
+-----
+
+For output plugins, the `getId` method should always return the id that was provided to the plugin through its
+constructor at instantiation time.
+
 [float]
 ==== Unit tests
 
