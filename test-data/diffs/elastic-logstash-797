diff --git a/lib/logstash/outputs/gelf.rb b/lib/logstash/outputs/gelf.rb
index 89e3722749f..c3a5da04318 100644
--- a/lib/logstash/outputs/gelf.rb
+++ b/lib/logstash/outputs/gelf.rb
@@ -5,7 +5,7 @@
 # GELF output. This is most useful if you want to use logstash
 # to output events to graylog2.
 #
-# More information at <http://www.graylog2.org/about/gelf>
+# More information at <http://graylog2.org/gelf#specs>
 class LogStash::Outputs::Gelf < LogStash::Outputs::Base
 
   config_name "gelf"
@@ -35,22 +35,22 @@ class LogStash::Outputs::Gelf < LogStash::Outputs::Base
   # Single-character versions of these are also valid, "d", "i", "w", "e", "f",
   # "u"
   # The following additional severity_labels from logstash's  syslog_pri filter
-  # are accepted: "emergency", "alert", "critical",  "warning", "notice", and 
+  # are accepted: "emergency", "alert", "critical",  "warning", "notice", and
   # "informational"
   config :level, :validate => :array, :default => [ "%{severity}", "INFO" ]
 
   # The GELF facility. Dynamic values like %{foo} are permitted here; this
   # is useful if you need to use a value from the event as the facility name.
-  config :facility, :validate => :string, :default => "logstash-gelf"
+  config :facility, :validate => :string, :deprecated => true
 
   # The GELF line number; this is usually the line number in your program where
   # the log event originated. Dynamic values like %{foo} are permitted here, but the
   # value should be a number.
-  config :line, :validate => :string
+  config :line, :validate => :string, :deprecated => true
 
   # The GELF file; this is usually the source code file in your program where
   # the log event originated. Dynamic values like %{foo} are permitted here.
-  config :file, :validate => :string, :default => "%{path}"
+  config :file, :validate => :string, :deprecated => true
 
   # Ship metadata within event object? This will cause logstash to ship
   # any fields in the event (such as those created by grok) in the GELF
@@ -63,7 +63,7 @@ class LogStash::Outputs::Gelf < LogStash::Outputs::Base
 
   # Ignore these fields when ship_metadata is set. Typically this lists the
   # fields used in dynamic values for GELF fields.
-  config :ignore_metadata, :validate => :array, :default => [ "@timestamp", "@version", "severity", "source_host", "source_path", "short_message" ]
+  config :ignore_metadata, :validate => :array, :default => [ "@timestamp", "@version", "severity", "host", "source_host", "source_path", "short_message" ]
 
   # The GELF custom field mappings. GELF supports arbitrary attributes as custom
   # fields. This exposes that. Exclude the `_` portion of the field name
@@ -141,7 +141,10 @@ def receive(event)
     m["full_message"] = event.sprintf(@full_message)
 
     m["host"] = event.sprintf(@sender)
-    m["file"] = event.sprintf(@file)
+
+    # deprecated fields
+    m["facility"] = event.sprintf(@facility) if @facility
+    m["file"] = event.sprintf(@file) if @file
     m["line"] = event.sprintf(@line) if @line
     m["line"] = m["line"].to_i if m["line"].is_a?(String) and m["line"] === /^[\d]+$/
 
@@ -155,8 +158,11 @@ def receive(event)
         name = "_id" if name == "id"  # "_id" is reserved, so use "__id"
         if !value.nil? and !@ignore_metadata.include?(name)
           if value.is_a?(Array)
-            # collapse single-element arrays, otherwise leave as array
-            m["_#{name}"] = (value.length == 1) ? value.first : value
+            m["_#{name}"] = value.join(', ')
+          elsif value.is_a?(Hash)
+            value.each do |hash_name, hash_value|
+              m["_#{name}_#{hash_name}"] = hash_value
+            end
           else
             # Non array values should be presented as-is
             # https://logstash.jira.com/browse/LOGSTASH-113
@@ -176,9 +182,6 @@ def receive(event)
       end
     end
 
-    # set facility as defined
-    m["facility"] = event.sprintf(@facility)
-
     # Probe severity array levels
     level = nil
     if @level.is_a?(Array)
