diff --git a/LogstashAPI/build.gradle b/LogstashAPI/build.gradle
new file mode 100644
index 00000000000..67769e5dd4f
--- /dev/null
+++ b/LogstashAPI/build.gradle
@@ -0,0 +1,14 @@
+group 'org.logstash'
+version '7.0.0-alpha1'
+
+apply plugin: 'java'
+
+sourceCompatibility = 1.8
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    testCompile group: 'junit', name: 'junit', version: '4.12'
+}
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Filter.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Filter.java
new file mode 100644
index 00000000000..f659ad6efba
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Filter.java
@@ -0,0 +1,12 @@
+package org.logstash.LogstashAPI;
+
+/**
+ * Methods only here for example, not suggestion for actual API
+ */
+public interface Filter {
+
+    void start();
+
+    void stop();
+
+}
\ No newline at end of file
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Input.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Input.java
new file mode 100644
index 00000000000..dd19113ff53
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Input.java
@@ -0,0 +1,12 @@
+package org.logstash.LogstashAPI;
+
+/**
+ * Methods only here for example, not suggestion for actual API
+ */
+public interface Input {
+
+    void start();
+
+    void stop();
+
+}
\ No newline at end of file
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Output.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Output.java
new file mode 100644
index 00000000000..ac78fb110fc
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Output.java
@@ -0,0 +1,12 @@
+package org.logstash.LogstashAPI;
+
+/**
+ * Methods only here for example, not suggestion for actual API
+ */
+public interface Output {
+
+    void start();
+
+    void stop();
+
+}
\ No newline at end of file
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Plugin.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Plugin.java
new file mode 100644
index 00000000000..821090d476f
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/Plugin.java
@@ -0,0 +1,13 @@
+package org.logstash.LogstashAPI;
+
+import java.lang.annotation.*;
+
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface Plugin {
+    /**
+     * The name of the plugin
+     */
+    String value();
+}
\ No newline at end of file
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 6b921972dd9..1583d04c5bb 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -121,6 +121,8 @@ dependencies {
     compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
     compile "org.jruby:jruby-complete:${jrubyVersion}"
     compile 'com.google.googlejavaformat:google-java-format:1.5'
+    compile 'org.reflections:reflections:0.9.11'
+    compile project(':LogstashAPI')
     testCompile 'org.apache.logging.log4j:log4j-core:2.9.1:tests'
     testCompile 'junit:junit:4.12'
     testCompile 'net.javacrumbs.json-unit:json-unit:1.9.0'
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 840aec14050..48a4e181f1f 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -20,6 +20,7 @@
 require "securerandom"
 
 LogStash::Environment.load_locale!
+java_import  org.logstash.Logstash
 
 class LogStash::Agent
   include LogStash::Util::Loggable
@@ -34,6 +35,10 @@ class LogStash::Agent
   #   :auto_reload [Boolean] - enable reloading of pipelines
   #   :reload_interval [Integer] - reload pipelines every X seconds
   def initialize(settings = LogStash::SETTINGS, source_loader = nil)
+    @plugin_manager = org.logstash.Logstash.getPluginManager()
+
+    @plugin_manager.start()
+
     @logger = self.class.logger
     @settings = settings
     @auto_reload = setting("config.reload.automatic")
@@ -183,6 +188,7 @@ def uptime
   end
 
   def shutdown
+    @plugin_manager.shutdown()
     stop_collecting_metrics
     stop_webserver
     transition_to_stopped
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index c9c8460b8c3..b6175d71309 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -25,6 +25,7 @@
 java_import org.logstash.common.io.DeadLetterQueueWriter
 java_import org.logstash.config.ir.CompiledPipeline
 java_import org.logstash.config.ir.ConfigCompiler
+java_import org.logstash.Logstash
 
 module LogStash; class JavaBasePipeline
   include LogStash::Util::Loggable
@@ -59,6 +60,13 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     if settings.get_value("config.debug") && @logger.debug?
       @logger.debug("Compiled pipeline code", default_logging_keys(:code => @lir.get_graph.to_string))
     end
+
+    # again ... just for illustration purposes
+    @plugin_manager = org.logstash.Logstash.getPluginManager()
+    @plugin_manager.get_inputs.each do |input|
+      input.start
+    end
+
     @inputs = @lir_execution.inputs
     @filters = @lir_execution.filters
     @outputs = @lir_execution.outputs
diff --git a/logstash-core/src/main/java/org/logstash/DefaultPluginManager.java b/logstash-core/src/main/java/org/logstash/DefaultPluginManager.java
new file mode 100644
index 00000000000..13edea11dd9
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/DefaultPluginManager.java
@@ -0,0 +1,183 @@
+package org.logstash;
+
+import org.logstash.LogstashAPI.Filter;
+import org.logstash.LogstashAPI.Input;
+import org.logstash.LogstashAPI.Output;
+import org.logstash.LogstashAPI.Plugin;
+import org.reflections.Reflections;
+import org.reflections.scanners.FieldAnnotationsScanner;
+import org.reflections.scanners.SubTypesScanner;
+import org.reflections.scanners.TypeAnnotationsScanner;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+
+public class DefaultPluginManager {
+
+    Map<URLClassLoader, Class<Input>> _inputs = new HashMap<>();
+    Map<URLClassLoader, Class<Filter>> _filters = new HashMap<>();
+    Map<URLClassLoader, Class<Output>> _outputs = new HashMap<>();
+
+    Collection<Input> inputs = new HashSet<>();
+    Collection<Filter> filters = new HashSet<>();
+    Collection<Output> outputs = new HashSet<>();
+
+    Path pluginsPath;
+
+    public DefaultPluginManager(Path pluginsPath) {
+        System.out.println("Plugin path: " + pluginsPath.toString());
+        this.pluginsPath = pluginsPath;
+    }
+
+
+    public Collection<Input> getInputs() {
+
+        if(inputs.isEmpty()) {
+            inputs = newUp(_inputs);
+        }
+        return inputs;
+
+    }
+
+    public Collection<Filter> getFilters() {
+        if(filters.isEmpty()) {
+            filters = newUp(_filters);
+        }
+        return filters;
+    }
+
+    public Collection<Output> getOutputs() {
+        if(outputs.isEmpty()) {
+            outputs = newUp(_outputs);
+        }
+        return outputs;
+    }
+
+    private <T> Collection<T> newUp(Map<URLClassLoader, Class <T>> clazzes){
+       return  clazzes.entrySet().stream().map(entry -> {
+            try {
+                return (T)entry.getKey().loadClass(entry.getValue().getCanonicalName()).newInstance();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }).collect(Collectors.toList());
+    }
+
+    public void start() {
+        System.out.println("Starting plugin manager");
+        System.out.println("Starting to unzip");
+        unzip(findFiles(pluginsPath.toFile(), "zip"));
+        loadPlugins(pluginsPath.toFile());
+
+        System.out.println("Finished unzip");
+
+    }
+
+    void shutdown() {
+        System.out.println("Stopping plugin manager");
+    }
+
+    private void unzip(Collection<File> zips) {
+        for (File zip : zips) {
+            pluginsPath.resolve(zip.getName().replace(".zip", "")).toFile().mkdirs();
+            try {
+                byte[] buffer = new byte[1024];
+                ZipInputStream zis = new ZipInputStream(new FileInputStream(zip));
+                try {
+                    ZipEntry zipEntry = zis.getNextEntry();
+                    while (zipEntry != null) {
+                        File outfile = pluginsPath.resolve(zip.getName().replace(".zip", "")).resolve(zipEntry.getName()).toFile();
+                        System.out.println("Outfile: " + outfile);
+                        if (zipEntry.isDirectory()) {
+                            outfile.mkdirs();
+                            zipEntry = zis.getNextEntry();
+                        } else {
+
+                            try (FileOutputStream fos = new FileOutputStream(outfile)) {
+                                int len;
+                                while ((len = zis.read(buffer)) > 0) {
+                                    fos.write(buffer, 0, len);
+                                }
+                                zipEntry = zis.getNextEntry();
+                            }
+                        }
+                    }
+                } finally {
+                    zis.closeEntry();
+                    zis.close();
+                }
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    private Collection<File> findFiles(File base, String extension) {
+        List<File> files = new ArrayList<>(Arrays.asList(base.listFiles()));
+        return files.stream().filter(f -> f.isFile()).filter(f -> f.getName().endsWith((extension))).collect(Collectors.toList());
+    }
+
+    private void loadPlugins(File base) {
+        try {
+            List<File> dirs = Arrays.asList(base.listFiles()).stream().filter(f -> f.isDirectory()).collect(Collectors.toList());
+
+            for (File dir : dirs) {
+                URL[] urlsToLoad = new URL[2];
+                //add classes
+                urlsToLoad[0] = dir.toPath().resolve("classes").toUri().toURL();
+                urlsToLoad[1] = dir.toPath().resolve("lib").toUri().toURL();
+
+
+                URLClassLoader pluginLoader = URLClassLoader.newInstance(urlsToLoad, this.getClass().getClassLoader());
+
+                System.out.println("*******Classpath (" + dir + ") *********");
+                Arrays.asList(urlsToLoad).forEach(System.out::println);
+                System.out.println("****************");
+
+                //Find plugin via reflections
+                Reflections reflections = new Reflections("org.logstash.plugins", new SubTypesScanner(), new TypeAnnotationsScanner(), new FieldAnnotationsScanner(), pluginLoader);
+                Set<Class<?>> plugins = reflections.getTypesAnnotatedWith(Plugin.class);
+
+                for (Class<?> clazz : plugins) {
+                    Class<?>[] interfaces = clazz.getInterfaces();
+                   Plugin plugin = clazz.getAnnotation(Plugin.class);
+                    String type = null;
+                    for (Class<?> i : interfaces) {
+                        if ("org.logstash.LogstashAPI.Input".equals(i.getCanonicalName())) {
+                            _inputs.put(pluginLoader, (Class<Input>) clazz);
+                            type = "input";
+                        } else if ("org.logstash.LogstashAPI.Output".equals(i.getCanonicalName())) {
+                            _outputs.put(pluginLoader, (Class<Output>) clazz);
+                            type = "output";
+                        } else if ("org.logstash.LogstashAPI.Filter".equals(i.getCanonicalName())) {
+                            _filters.put(pluginLoader, (Class<Filter>) clazz);
+                            type = "filter";
+
+                        }
+                        System.out.println("Found " + type + " plugin \"" + plugin.value() + "\"");
+                    }
+                }
+            }
+
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/Logstash.java b/logstash-core/src/main/java/org/logstash/Logstash.java
index 8996a342973..84b54974368 100644
--- a/logstash-core/src/main/java/org/logstash/Logstash.java
+++ b/logstash-core/src/main/java/org/logstash/Logstash.java
@@ -5,6 +5,7 @@
 import java.io.PrintStream;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jruby.Ruby;
@@ -14,12 +15,20 @@
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.builtin.IRubyObject;
 
+
 /**
  * Logstash Main Entrypoint.
  */
 public final class Logstash implements Runnable, AutoCloseable {
 
     private static final Logger LOGGER = LogManager.getLogger(Logstash.class);
+    final static Path LOGSTASH_HOME = Paths.get(System.getenv("LS_HOME")).toAbsolutePath();
+    static final Path PLUGINS_PATH = Logstash.LOGSTASH_HOME.resolve("vendor").resolve("java-plugins");
+    public static final DefaultPluginManager PLUGIN_MANAGER = new DefaultPluginManager(PLUGINS_PATH);
+
+    public static DefaultPluginManager getPluginManager(){
+        return PLUGIN_MANAGER;
+    }
 
     /**
      * JRuby Runtime Environment.
diff --git a/settings.gradle b/settings.gradle
index aa7217dfb7b..508dc19137f 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -3,3 +3,5 @@ project(':logstash-core').projectDir = new File('./logstash-core')
 project(':logstash-core-benchmarks').projectDir = new File('./logstash-core/benchmarks')
 project(':ingest-converter').projectDir = new File('./tools/ingest-converter')
 project(':benchmark-cli').projectDir = new File('./tools/benchmark-cli')
+include ':LogstashAPI'
+project(':LogstashAPI').projectDir = new File('./LogstashAPI')
