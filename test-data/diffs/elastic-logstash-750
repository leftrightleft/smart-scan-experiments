diff --git a/lib/logstash/codecs/compress_spooler.rb b/lib/logstash/codecs/compress_spooler.rb
new file mode 100644
index 00000000000..218b5b06290
--- /dev/null
+++ b/lib/logstash/codecs/compress_spooler.rb
@@ -0,0 +1,53 @@
+require "logstash/codecs/base"
+
+class LogStash::Codecs::CompressSpooler < LogStash::Codecs::Base
+  require "msgpack"
+  require "zlib"
+  config_name 'compress_spooler'
+  milestone 1
+  config :spool_size, :validate => :number, :default => 50
+  config :compress_level, :validate => :number, :default => 6
+
+  attr_reader :buffer
+
+  public
+  def decode(data)
+    z = Zlib::Inflate.new
+    data = MessagePack.unpack(z.inflate(data))
+    z.finish
+    z.close
+    data.each do |event|
+      event = LogStash::Event.new(event)
+      event["@timestamp"] = Time.at(event["@timestamp"]).utc if event["@timestamp"].is_a? Float
+      event["tags"] ||= []
+      if @format
+        event["message"] ||= event.sprintf(@format)
+      end
+      yield event
+    end
+  end # def decode
+
+  public
+  def encode(data)
+    @buffer = [] if @buffer.nil?
+    #buffer size is hard coded for now until a 
+    #better way to pass args into codecs is implemented
+    if @buffer.length >= @spool_size
+      z = Zlib::Deflate.new(@compress_level)
+      @on_event.call z.deflate(MessagePack.pack(@buffer), Zlib::FINISH)
+      z.close
+      @buffer = []
+    else
+      data["@timestamp"] = data["@timestamp"].to_f
+      @buffer << data.to_hash
+    end
+  end # def encode
+
+  public
+  def teardown
+    if !@buffer.nil? and @buffer.length > 0
+      @on_event.call @buffer
+    end
+    @buffer = []
+  end
+end # class LogStash::Codecs::CompressSpooler
diff --git a/lib/logstash/inputs/rabbitmq/hot_bunnies.rb b/lib/logstash/inputs/rabbitmq/hot_bunnies.rb
index 7c88a27f7b4..daea9efec28 100644
--- a/lib/logstash/inputs/rabbitmq/hot_bunnies.rb
+++ b/lib/logstash/inputs/rabbitmq/hot_bunnies.rb
@@ -112,8 +112,8 @@ def consume
         @codec.decode(data) do |event|
           decorate(event)
           @output_queue << event if event
-          @ch.ack(metadata.delivery_tag) if @ack
         end
+	@ch.ack(metadata.delivery_tag) if @ack
       end
       @q.subscribe_with(@consumer, :manual_ack => @ack, :block => true)
     end
diff --git a/lib/logstash/outputs/rabbitmq/hot_bunnies.rb b/lib/logstash/outputs/rabbitmq/hot_bunnies.rb
index 79a5dc21ce5..7876a664a8b 100644
--- a/lib/logstash/outputs/rabbitmq/hot_bunnies.rb
+++ b/lib/logstash/outputs/rabbitmq/hot_bunnies.rb
@@ -18,26 +18,26 @@ def register
       declare_exchange
 
       @connected.set(true)
+
+      @codec.on_event(&method(:publish_serialized))
     end
 
 
     def receive(event)
       return unless output?(event)
 
-      key = event.sprintf(@key) if @key
-
       begin
-        publish_serialized(event.to_json, key)
+        @codec.encode(event)
       rescue JSON::GeneratorError => e
         @logger.warn("Trouble converting event to JSON", :exception => e,
                      :event => event)
       end
     end
 
-    def publish_serialized(message, key = @key)
+    def publish_serialized(message)
       begin
         if @connected.get
-          @x.publish(message, :routing_key => key, :properties => {
+          @x.publish(message, :routing_key => @key, :properties => {
             :persistent => @persistent
           })
         else
