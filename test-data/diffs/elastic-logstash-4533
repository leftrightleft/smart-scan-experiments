diff --git a/logstash-core/lib/logstash/util.rb b/logstash-core/lib/logstash/util.rb
index 92ab156c7a5..fc0ba6c9eeb 100644
--- a/logstash-core/lib/logstash/util.rb
+++ b/logstash-core/lib/logstash/util.rb
@@ -193,7 +193,7 @@ def self.deep_clone(o)
     when Fixnum, Symbol, IO, TrueClass, FalseClass, NilClass
       o
     when LogStash::Codecs::Base
-      o.clone.tap {|c| c.register }
+      o.clone
     when String
       o.clone #need to keep internal state e.g. frozen
     else
diff --git a/logstash-core/spec/logstash/plugin_spec.rb b/logstash-core/spec/logstash/plugin_spec.rb
index 781a57aefe0..2a38ca1b70f 100644
--- a/logstash-core/spec/logstash/plugin_spec.rb
+++ b/logstash-core/spec/logstash/plugin_spec.rb
@@ -144,9 +144,26 @@ class LogStash::Filters::Stromae < LogStash::Filters::Base
     ].each do |klass|
 
       it "subclass #{klass.name} does not modify params" do
-        instance = klass.new(args)
+        klass.new(args)
         expect(args).to be_empty
       end
     end
+
+    context "codec initialization" do
+
+      class LogStash::Codecs::Noop < LogStash::Codecs::Base
+        config_name "noop"
+
+        config :format, :validate => :string
+        def register; end
+      end
+
+      it "should only register once" do
+        args   = { "codec" => LogStash::Codecs::Noop.new("format" => ".") }
+        expect_any_instance_of(LogStash::Codecs::Noop).to receive(:register).once
+        LogStash::Plugin.new(args)
+      end
+
+    end
   end
 end
