diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
index 86574a3ae3d..c2c5dbfa631 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
@@ -293,7 +293,21 @@ private boolean executeStoragePolicy(int eventPayloadSize) {
         if (!exceedMaxQueueSize(eventPayloadSize)) {
             return false;
         }
-        
+
+        // load currentQueueSize from filesystem because there could be a consumer
+        // that's already cleaning
+        try {
+            this.currentQueueSize.set(computeQueueSize());
+        } catch (IOException ex) {
+            logger.warn("Unable to determine DLQ size, skipping storage policy check", ex);
+            return false;
+        }
+
+        // after reload verify the condition is still valid
+        if (!exceedMaxQueueSize(eventPayloadSize)) {
+            return false;
+        }
+
         if (storageType == QueueStorageType.DROP_NEWER) {
             lastError = String.format("Cannot write event to DLQ(path: %s): reached maxQueueSize of %d", queuePath, maxQueueSize);
             logger.error(lastError);
diff --git a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
index e55cf219efa..5702d169a54 100644
--- a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
@@ -346,7 +346,7 @@ public void testRemoveSegmentsOrder() throws IOException {
     }
 
     @Test
-    public void testDropEventCountCorrectlyNotEnqueuedEvents() throws IOException {
+    public void testDropEventCountCorrectlyNotEnqueuedEvents() throws IOException, InterruptedException {
         Event blockAlmostFullEvent = DeadLetterQueueReaderTest.createEventWithConstantSerializationOverhead(Collections.emptyMap());
         int serializationHeader = 286;
         int notEnoughHeaderSpace = 5;
@@ -384,6 +384,11 @@ public void testDropEventCountCorrectlyNotEnqueuedEvents() throws IOException {
                 DLQEntry entry = new DLQEntry(event, "", "", String.format("%05d", i), DeadLetterQueueReaderTest.constantSerializationLengthTimestamp(startTime));
                 final int serializationLength = entry.serialize().length;
                 assertEquals("Serialized entry fills block payload", BLOCK_SIZE - RECORD_HEADER_SIZE, serializationLength);
+                if (i == 636) {
+                    // wait flusher thread flushes the data. When DLQ full condition is reached then the size is checked against
+                    // the effective file sizes loaded from FS. This is due to writer-reader interaction
+                    Thread.sleep(2_000);
+                }
                 writeManager.writeEntry(entry);
             }
 
