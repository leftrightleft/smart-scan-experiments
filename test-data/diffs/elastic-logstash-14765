diff --git a/logstash-core/spec/logstash/pipeline_reporter_spec.rb b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
index 082b06a6859..555319b53df 100644
--- a/logstash-core/spec/logstash/pipeline_reporter_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
@@ -29,10 +29,14 @@
   let(:pipeline) { Kernel.send(pipeline_setup, config)}
   let(:reporter) { pipeline.reporter }
 
-  before do
+  let(:do_setup_plugin_registry) do
     allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput").and_return(::LogStash::Outputs::DummyOutput)
     allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_call_original
     allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_call_original
+  end
+
+  before do
+    do_setup_plugin_registry
 
     @pre_snapshot = reporter.snapshot
 
@@ -49,7 +53,7 @@
     end
 
     it "should end with no stalled threads" do
-      expect(@pre_snapshot.stalling_threads_info).to eql([])
+      expect(@post_snapshot.stalling_threads_info).to eql([])
     end
   end
 
@@ -81,6 +85,40 @@
     it "should be zero after running" do
       expect(@post_snapshot.inflight_count).to eql(0)
     end
+
+    # We provide a hooked filter that captures a new reporter snapshot with each event.
+    # Since the event being processed is by-definition part of a batch that is in-flight,
+    # we expect all of the resulting reporter snapshots to have non-zero inflight_event-s
+    context "while running" do
+      let!(:report_queue) { Queue.new }
+      let(:hooked_dummy_filter_class) do
+        ::LogStash::Filters::DummyFilter.with_hook do |event|
+          report_queue << reporter.snapshot
+        end
+      end
+      let(:hooked_dummy_filter_name) { hooked_dummy_filter_class.config_name }
+
+      let(:config) do
+        <<~EOCONFIG
+          input  { generator { count => #{generator_count} } }
+          filter { #{hooked_dummy_filter_name} {} }
+          output { dummyoutput {} }
+        EOCONFIG
+      end
+
+      let(:do_setup_plugin_registry) do
+        super()
+        allow(LogStash::Plugin).to receive(:lookup).with("filter", hooked_dummy_filter_name)
+                                                   .and_return(hooked_dummy_filter_class)
+      end
+
+      it 'captures inflight counts that are non-zero ' do
+        inflight_reports = Array.new(report_queue.size) { report_queue.pop }
+
+        expect(inflight_reports).to_not be_empty
+        expect(inflight_reports).to all(have_attributes(inflight_count: (a_value > 0)))
+      end
+    end
   end
 end
 
diff --git a/logstash-core/spec/support/mocks_classes.rb b/logstash-core/spec/support/mocks_classes.rb
index eb673fe3b76..251dd63a2b4 100644
--- a/logstash-core/spec/support/mocks_classes.rb
+++ b/logstash-core/spec/support/mocks_classes.rb
@@ -59,6 +59,18 @@ def register
       def filter(event)
         # noop
       end
+
+      ##
+      # Returns a one-off subclass of the DummyFilter that
+      # executes the provided hook with each event it receives
+      def self.with_hook(&block)
+        Class.new(self) do
+          config_name "dummyfilter_#{__id__}"
+          define_method(:filter) do |event|
+            block.call(event)
+          end
+        end
+      end
     end
   end
 
diff --git a/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java b/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
index bc5110c2a5e..2cf4ac5590d 100644
--- a/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
@@ -27,6 +27,7 @@
 import org.jruby.RubyHash;
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
+import org.jruby.RubyThread;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.runtime.Block;
@@ -160,6 +161,7 @@ private RubyArray workerStates(final ThreadContext context, final RubyHash batch
         final RubyArray result = context.runtime.newArray();
         ((Iterable<IRubyObject>) pipeline.callMethod(context, "worker_threads"))
             .forEach(thread -> {
+                final long nativeThreadId = ((RubyThread) thread).getNativeThread().getId();
                 final RubyHash hash = RubyHash.newHash(context.runtime);
                 IRubyObject status = thread.callMethod(context, "status");
                 if (status.isNil()) {
@@ -168,17 +170,35 @@ private RubyArray workerStates(final ThreadContext context, final RubyHash batch
                 hash.op_aset(context, STATUS_KEY, status);
                 hash.op_aset(context, ALIVE_KEY, thread.callMethod(context, "alive?"));
                 hash.op_aset(context, INDEX_KEY, context.runtime.newFixnum(result.size()));
-                final IRubyObject batch = batchMap.op_aref(context, thread);
-                hash.op_aset(
-                    context, INFLIGHT_COUNT_KEY,
-                    batch.isNil() ?
-                        context.runtime.newFixnum(0) : batch.callMethod(context, "size")
-                );
+                final IRubyObject batch = batchMap.op_aref(context, context.runtime.newFixnum(nativeThreadId));
+                hash.op_aset(context, INFLIGHT_COUNT_KEY, extractBatchSize(context, batch));
                 result.add(hash);
             });
         return result;
     }
 
+    /**
+     * Attempts to safely extract the batch size from a wrapped {@link QueueBatch} or
+     * a ruby object responding to {@code size}
+     *
+     * @param context The Ruby {@code ThreadContext}
+     * @param batch a batch, which may be a wrapped {@link QueueBatch} or a ruby
+     *              object that responds to `#size`
+     * @return the detected size, or zero.
+     */
+    private IRubyObject extractBatchSize(final ThreadContext context, final IRubyObject batch) {
+        if (!batch.isNil()) {
+            if (QueueBatch.class.isAssignableFrom(batch.getJavaClass())) {
+                final int filteredSize = batch.toJava(QueueBatch.class).filteredSize();
+                return getRuntime().newFixnum(filteredSize);
+            }
+            if (batch.respondsTo("size")) {
+                return batch.callMethod(context, "size");
+            }
+        }
+        return context.runtime.newFixnum(0L);
+    }
+
     @SuppressWarnings({"unchecked","rawtypes"})
     private RubyArray outputInfo(final ThreadContext context) {
         final RubyArray result = context.runtime.newArray();
@@ -267,6 +287,11 @@ public IRubyObject methodMissing(final ThreadContext context, final IRubyObject
             return data.op_aref(context, method);
         }
 
+        @JRubyMethod(name = "respond_to_missing?")
+        public IRubyObject isRespondToMissing(final ThreadContext context, final IRubyObject method, final IRubyObject includePrivate) {
+            return context.tru;
+        }
+
         @JRubyMethod(name = "format_threads_by_plugin")
         @SuppressWarnings("unchecked")
         public RubyHash formatThreadsByPlugin(final ThreadContext context) {
