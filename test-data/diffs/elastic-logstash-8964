diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index e0d9c79778f..90a5d10098a 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -57,7 +57,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @plugin_factory = LogStash::Plugins::PluginFactory.new(
       # use NullMetric if called in the BasePipeline context otherwise use the @metric value
       @lir, LogStash::Plugins::PluginMetricFactory.new(pipeline_id, @metric || Instrument::NullMetric.new),
-      @logger, LogStash::Plugins::ExecutionContextFactory.new(@agent, self, @dlq_writer),
+      LogStash::Plugins::ExecutionContextFactory.new(@agent, self, @dlq_writer),
       JavaFilterDelegator
     )
     @lir_execution = CompiledPipeline.new(@lir, @plugin_factory)
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 3ed9eeffb76..6806fc5a528 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -7,7 +7,7 @@
 module LogStash class OutputDelegator
   attr_reader :metric, :metric_events, :strategy, :namespaced_metric, :metric_events, :id
 
-  def initialize(logger, output_class, metric, execution_context, strategy_registry, plugin_args)
+  def initialize(output_class, metric, execution_context, strategy_registry, plugin_args)
     @output_class = output_class
     @metric = metric
     @id = plugin_args["id"]
@@ -23,7 +23,7 @@ def initialize(logger, output_class, metric, execution_context, strategy_registr
     @time_metric = @metric_events.counter(:duration_in_millis)
     @strategy = strategy_registry.
                   class_for(self.concurrency).
-                  new(logger, @output_class, @namespaced_metric, execution_context, plugin_args)
+                  new(@output_class, @namespaced_metric, execution_context, plugin_args)
   end
 
   def config_name
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
index 9648c249417..862f545d6e0 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
@@ -1,8 +1,8 @@
 # Remove this in Logstash 6.0
 module LogStash module OutputDelegatorStrategies class Legacy
   attr_reader :worker_count, :workers
-  
-  def initialize(logger, klass, metric, execution_context, plugin_args)
+
+  def initialize(klass, metric, execution_context, plugin_args)
     @worker_count = (plugin_args["workers"] || 1).to_i
     @workers = @worker_count.times.map { klass.new(plugin_args) }
     @workers.each do |w|
@@ -12,11 +12,11 @@ def initialize(logger, klass, metric, execution_context, plugin_args)
     @worker_queue = SizedQueue.new(@worker_count)
     @workers.each {|w| @worker_queue << w}
   end
-  
+
   def register
     @workers.each(&:register)
   end
-  
+
   def multi_receive(events)
     worker = @worker_queue.pop
     worker.multi_receive(events)
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
index 4afce212ec5..30cee6de60d 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
@@ -1,10 +1,10 @@
 module LogStash module OutputDelegatorStrategies class Shared
-  def initialize(logger, klass, metric, execution_context, plugin_args)
+  def initialize(klass, metric, execution_context, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
     @output.execution_context = execution_context
   end
-  
+
   def register
     @output.register
   end
@@ -13,10 +13,10 @@ def multi_receive(events)
     @output.multi_receive(events)
   end
 
-  def do_close    
+  def do_close
     @output.do_close
   end
 
-  ::LogStash::OutputDelegatorStrategyRegistry.instance.register(:shared, self)  
+  ::LogStash::OutputDelegatorStrategyRegistry.instance.register(:shared, self)
 end; end; end
 
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/single.rb b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
index 5b836f2b587..982f0b97648 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/single.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
@@ -1,5 +1,5 @@
 module LogStash module OutputDelegatorStrategies class Single
-  def initialize(logger, klass, metric, execution_context, plugin_args)
+  def initialize(klass, metric, execution_context, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
     @output.execution_context = execution_context
@@ -9,7 +9,7 @@ def initialize(logger, klass, metric, execution_context, plugin_args)
   def register
     @output.register
   end
-  
+
   def multi_receive(events)
     @mutex.synchronize do
       @output.multi_receive(events)
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 34dc9f1480c..d30b5865416 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -64,7 +64,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @plugin_factory = LogStash::Plugins::PluginFactory.new(
       # use NullMetric if called in the BasePipeline context otherwise use the @metric value
       @lir, LogStash::Plugins::PluginMetricFactory.new(pipeline_id, @metric || Instrument::NullMetric.new),
-      @logger, LogStash::Plugins::ExecutionContextFactory.new(@agent, self, @dlq_writer),
+      LogStash::Plugins::ExecutionContextFactory.new(@agent, self, @dlq_writer),
       FilterDelegator
     )
     grammar = LogStashConfigParser.new
diff --git a/logstash-core/lib/logstash/plugins/plugin_factory.rb b/logstash-core/lib/logstash/plugins/plugin_factory.rb
index 78f7bb95ae5..7e2484fa2b6 100644
--- a/logstash-core/lib/logstash/plugins/plugin_factory.rb
+++ b/logstash-core/lib/logstash/plugins/plugin_factory.rb
@@ -32,11 +32,10 @@ def create(plugin_type)
     class PluginFactory
       include org.logstash.config.ir.compiler.RubyIntegration::PluginFactory
 
-      def initialize(lir, metric_factory, logger, exec_factory, filter_class)
+      def initialize(lir, metric_factory, exec_factory, filter_class)
         @lir = lir
         @plugins_by_id = {}
         @metric_factory = metric_factory
-        @logger = logger
         @exec_factory = exec_factory
         @filter_class = filter_class
       end
@@ -83,7 +82,7 @@ def plugin(plugin_type, name, line, column, *args)
         execution_context = @exec_factory.create(id, klass.config_name)
 
         if plugin_type == "output"
-          OutputDelegator.new(@logger, klass, type_scoped_metric, execution_context, OutputDelegatorStrategyRegistry.instance, args)
+          OutputDelegator.new(klass, type_scoped_metric, execution_context, OutputDelegatorStrategyRegistry.instance, args)
         elsif plugin_type == "filter"
           @filter_class.new(klass, type_scoped_metric, execution_context, args)
         else # input or codec plugin
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 5c009996e38..758d5d55240 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -11,7 +11,6 @@ def increment(_)
     end
   end
 
-  let(:logger) { double("logger") }
   let(:events) { 7.times.map { LogStash::Event.new }}
   let(:plugin_args) { {"id" => "foo", "arg1" => "val1"} }
   let(:collector) { [] }
@@ -22,7 +21,7 @@ def increment(_)
 
   include_context "execution_context"
 
-  subject { described_class.new(logger, out_klass, metric, execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
+  subject { described_class.new(out_klass, metric, execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
 
   context "with a plain output plugin" do
     let(:out_klass) { double("output klass") }
@@ -47,7 +46,6 @@ def increment(_)
       allow(out_inst).to receive(:id).and_return("a-simple-plugin")
 
       allow(subject.metric_events).to receive(:increment).with(any_args)
-      allow(logger).to receive(:debug).with(any_args)
     end
 
     it "should initialize cleanly" do
@@ -56,7 +54,7 @@ def increment(_)
 
     it "should push the name of the plugin to the metric" do
       expect(metric).to receive(:gauge).with(:name, out_klass.config_name)
-      described_class.new(logger, out_klass, metric, execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
+      described_class.new(out_klass, metric, execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
     end
 
     context "after having received a batch of events" do
@@ -112,7 +110,7 @@ def increment(_)
           it "should find the correct concurrency type for the output" do
             expect(subject.concurrency).to eq(strategy_concurrency)
           end
-          
+
           it "should find the correct Strategy class for the worker" do
             expect(subject.strategy).to be_a(klass)
           end
@@ -130,7 +128,7 @@ def increment(_)
               before do
                 allow(subject.strategy).to receive(method)
               end
-              
+
               it "should delegate #{method} to the strategy" do
                 subject.send(method, *args)
                 if args
@@ -145,7 +143,7 @@ def increment(_)
               before do
                 allow(out_inst).to receive(method)
               end
-              
+
               it "should delegate #{method} to the strategy" do
                 subject.send(method, *args)
                 if args
