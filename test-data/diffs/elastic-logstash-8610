diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 9cbc0adbc0d..d83dd29a887 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -8,7 +8,6 @@
 import org.jruby.anno.JRubyClass;
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.ObjectAllocator;
-import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.ackedqueue.ext.AbstractJRubyQueue;
 import org.logstash.ackedqueue.ext.RubyAckedBatch;
 import org.logstash.ext.JrubyEventExtLibrary;
@@ -82,16 +81,13 @@ public final class RubyUtil {
         RUBY_EVENT_CLASS.setConstant("VERSION_ONE", RUBY.newString(Event.VERSION_ONE));
         RUBY_EVENT_CLASS.defineAnnotatedMethods(JrubyEventExtLibrary.RubyEvent.class);
         RUBY_EVENT_CLASS.defineAnnotatedConstants(JrubyEventExtLibrary.RubyEvent.class);
-        RUBY_ACKED_BATCH_CLASS = setupLogstashClass("AckedBatch", new ObjectAllocator() {
-            @Override
-            public IRubyObject allocate(final Ruby runtime, final RubyClass rubyClass) {
-                return new RubyAckedBatch(runtime, rubyClass);
-            }
-        }, RubyAckedBatch.class);
         final RubyClass abstractQueue = setupLogstashClass(
             "AbstractAckedQueue", ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR,
             AbstractJRubyQueue.class
         );
+        RUBY_ACKED_BATCH_CLASS = setupLogstashClass(
+            "AckedBatch", RubyAckedBatch::new, RubyAckedBatch.class
+        );
         setupLogstashClass(
             "AckedQueue", abstractQueue, AbstractJRubyQueue.RubyAckedQueue::new,
             AbstractJRubyQueue.RubyAckedQueue.class
@@ -132,7 +128,7 @@ private static RubyClass setupLogstashClass(final String name,
     /**
      * Sets up a Java-defined {@link RubyClass} in the Logstash Ruby module.
      * @param name Name of the class
-     * @param parent Parent RubyClass 
+     * @param parent Parent RubyClass
      * @param allocator Allocator of the class
      * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
      * @return RubyClass
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java
index 6767b96445d..200be51d343 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java
@@ -117,7 +117,7 @@ public IRubyObject ruby_read_batch(ThreadContext context, IRubyObject limit,
             throw RubyUtil.newRubyIOError(context.runtime, e);
         }
         // TODO: return proper Batch object
-        return (b == null) ? context.nil : new RubyAckedBatch(context.runtime, b);
+        return (b == null) ? context.nil : RubyAckedBatch.create(context.runtime, b);
     }
 
     @JRubyMethod(name = "is_fully_acked?")
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
index 9ca84140211..aa2d5448499 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
@@ -27,9 +27,11 @@ public RubyAckedBatch(Ruby runtime, RubyClass klass) {
         super(runtime, klass);
     }
 
-    public RubyAckedBatch(Ruby runtime, Batch batch) {
-        super(runtime, RubyUtil.RUBY_ACKED_BATCH_CLASS);
-        this.batch = batch;
+    public static RubyAckedBatch create(Ruby runtime, Batch batch) {
+        final RubyAckedBatch ackedBatch =
+            new RubyAckedBatch(runtime, RubyUtil.RUBY_ACKED_BATCH_CLASS);
+        ackedBatch.batch = batch;
+        return ackedBatch;
     }
 
     @SuppressWarnings("unchecked") // for the getList() calls
