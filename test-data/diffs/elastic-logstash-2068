diff --git a/docs/asciidoc/static/configuration.asciidoc b/docs/asciidoc/static/configuration.asciidoc
index f4454e97a4b..1ebbd4c9a9d 100644
--- a/docs/asciidoc/static/configuration.asciidoc
+++ b/docs/asciidoc/static/configuration.asciidoc
@@ -129,7 +129,7 @@ The above makes 'path' a 3-element array including all 3 strings.
 [float]
 ==== Hash
 
-A hash is basically the same syntax as Ruby hashes. 
+A hash is basically the same syntax as Ruby hashes.
 The key and value are simply pairs, such as:
 
 [source,js]
@@ -145,48 +145,46 @@ match => {
 [float]
 ==== Password
 
-A hash is basically the same syntax as Ruby hashes. 
-The key and value are simply pairs, such as:
+A password field is basically a String field with a single value, but it will
+not be logged or printed
+
+Example:
 
 [source,js]
 ----------------------------------
-match => {
-  "field1" => "value1"
-  "field2" => "value2"
-  ...
-}
+  my_password => "password"
 ----------------------------------
 
+
 [[path]]
 [float]
 ==== Path
 
-A hash is basically the same syntax as Ruby hashes. 
-The key and value are simply pairs, such as:
+A path field is a String field which represents a valid operating system path
+
+Example:
 
 [source,js]
 ----------------------------------
-match => {
-  "field1" => "value1"
-  "field2" => "value2"
-  ...
-}
+  my_path => "/tmp/logstash"
 ----------------------------------
 
 [[codec]]
 [float]
 ==== Codec
 
-A hash is basically the same syntax as Ruby hashes. 
-The key and value are simply pairs, such as:
+A codec is the name of Logstash codec used to represent the data. Codec can be
+used in both inputs and outputs.
+Input codecs are a convenient method for decoding your data before it enters the input,
+without needing a separate filter in your Logstash pipeline.
+Output codecs are a convenient method for encoding your data before it leaves the output,
+without needing a separate filter in your Logstash pipeline.
+
+Example:
 
 [source,js]
 ----------------------------------
-match => {
-  "field1" => "value1"
-  "field2" => "value2"
-  ...
-}
+  codec => "json"
 ----------------------------------
 
 
@@ -195,7 +193,7 @@ match => {
 
 All events have properties. For example, an apache access log would have things
 like status code (200, 404), request path ("/", "index.html"), HTTP verb (GET, POST),
-client IP address, etc. Logstash calls these properties "fields." 
+client IP address, etc. Logstash calls these properties "fields."
 
 In many cases, it is useful to be able to refer to a field by name. To do this,
 you can use the Logstash field reference syntax.
@@ -242,7 +240,7 @@ output {
 }
 ----------------------------------
 
-You can also do time formatting in this sprintf format. Instead of specifying a field name, use the `+FORMAT` syntax where `FORMAT` is a [time format](http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html). 
+You can also do time formatting in this sprintf format. Instead of specifying a field name, use the `+FORMAT` syntax where `FORMAT` is a [time format](http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html).
 
 For example, if you want to use the file output to write to logs based on the
 hour and the 'type' field:
@@ -283,8 +281,8 @@ What's an expression? Comparison tests, boolean logic, etc!
 
 The following comparison operators  are supported:
 
-* equality, etc: ==,  !=,  <,  >,  <=,  >= 
-* regexp: =~, !~ 
+* equality, etc: ==,  !=,  <,  >,  <=,  >=
+* regexp: =~, !~
 * inclusion: in, not in
 
 The following boolean operators are supported:
@@ -391,4 +389,4 @@ output {
 [float]
 === Further Reading
 
-For more information, see [the plugin docs index](index)
+For more information, see [the plugin docs index](index)
\ No newline at end of file
