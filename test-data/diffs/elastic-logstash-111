diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index 6e63b64880f..5cf75aeb814 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -19,6 +19,9 @@ class LogStash::Filters::Base < LogStash::Plugin
   # Optional.
   config :tags, :validate => :array, :default => []
 
+  # Only handle events without any of these tags. Note this check is additional to type and tags.
+  config :exclude_tags, :validate => :array, :default => []
+
   # If this filter is successful, add arbitrary tags to the event.
   # Tags can be dynamic and include parts of the event using the %{field}
   # syntax. Example:
@@ -33,6 +36,20 @@ class LogStash::Filters::Base < LogStash::Plugin
   # would add a tag "foo_hello"
   config :add_tag, :validate => :array, :default => []
 
+  # If this filter is successful, remove arbitrary tags from the event.
+  # Tags can be dynamic and include parts of the event using the %{field}
+  # syntax. Example:
+  #
+  #     filter {
+  #       myfilter {
+  #         remove_tag => [ "foo_%{somefield}" ]
+  #       }
+  #     }
+  #
+  # If the event has field "somefield" == "hello" this filter, on success,
+  # would remove the tag "foo_hello" if it is present
+  config :remove_tag, :validate => :array, :default => []
+
   # If this filter is successful, add any arbitrary fields to this event.
   # Example:
   #
@@ -46,7 +63,7 @@ class LogStash::Filters::Base < LogStash::Plugin
   #  and the %{@source} piece replaced with that value from the event.
   config :add_field, :validate => :hash, :default => {}
 
-  RESERVED = ["type", "tags", "add_tag", "add_field"]
+  RESERVED = ["type", "tags", "add_tag", "remove_tag", "add_field", "exclude_tags"]
 
   public
   def initialize(params)
@@ -93,6 +110,14 @@ def filter_matched(event)
       event.tags << event.sprintf(tag)
       #event.tags |= [ event.sprintf(tag) ]
     end
+
+    if @remove_tag
+      remove_tags = @remove_tag.map do |tag|
+        event.sprintf(tag)
+      end
+      @logger.debug("filters/#{self.class.name}: removing tags", :tags => (event.tags & remove_tags))
+      event.tags -= remove_tags
+    end
   end # def filter_matched
 
   protected
@@ -111,6 +136,13 @@ def filter?(event)
       end
     end
 
+    if !@exclude_tags.empty?
+      if (diff_tags = (event.tags & @exclude_tags)).size != 0
+        @logger.debug(["Dropping event because tags contains excluded tags: #{diff_tags.inspect}", event])
+        return false
+      end
+    end
+
     return true
   end
 end # class LogStash::Filters::Base
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 7d414237a1f..37bab342b8e 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -22,6 +22,9 @@ class LogStash::Outputs::Base < LogStash::Plugin
   # Optional.
   config :tags, :validate => :array, :default => []
 
+  # Only handle events without any of these tags. Note this check is additional to type and tags.
+  config :exclude_tags, :validate => :array, :default => []
+
   # Only handle events with all of these fields.
   # Optional.
   config :fields, :validate => :array, :default => []
@@ -68,6 +71,13 @@ def output?(event)
       end
     end
 
+    if !@exclude_tags.empty?
+      if (diff_tags = (event.tags & @exclude_tags)).size != 0
+        @logger.debug(["Dropping event because tags contains excluded tags: #{diff_tags.inspect}", event])
+        return false
+      end
+    end
+        
     if !@fields.empty?
       if (event.fields.keys & @fields).size != @fields.size
         @logger.debug(["Dropping event because type doesn't match #{@fields.inspect}", event])
