diff --git a/lib/logstash/config/config_ast.rb b/lib/logstash/config/config_ast.rb
index f240e507430..a88bf5f5915 100644
--- a/lib/logstash/config/config_ast.rb
+++ b/lib/logstash/config/config_ast.rb
@@ -84,7 +84,7 @@ def compile
         end
 
         if type == "filter"
-          definitions << "  events.flatten.each{|e| block.call(e) if e != event}"
+          definitions << "  events.flatten.each{|e| block.call(e) }"
         end
         definitions << "end"
       end
@@ -211,7 +211,7 @@ def compile
 
             new_events = []
             #{variable_name}.filter(event){|new_event| new_events << new_event}
-            event.cancelled? ? new_events : new_events << event
+            event.cancelled? ? new_events : new_events.unshift(event)
           end
         CODE
       when "output"
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index a35ae766872..8811e1e5dc4 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -202,9 +202,9 @@ def filterworker
         when LogStash::Event
           # use events array to guarantee ordering of origin vs created events
           # where created events are emitted by filters like split or metrics
-          events = [event]
+          events = []
           filter(event) { |newevent| events << newevent }
-          events.each { |event| @filter_to_output.push(event) unless event.cancelled? }
+          events.each { |event| @filter_to_output.push(event) }
         when LogStash::FlushEvent
           # handle filter flushing here so that non threadsafe filters (thus only running one filterworker)
           # don't have to deal with thread safety implementing the flush method
diff --git a/spec/test_utils.rb b/spec/test_utils.rb
index 61cebed57a4..8c98f4a911c 100644
--- a/spec/test_utils.rb
+++ b/spec/test_utils.rb
@@ -91,13 +91,7 @@ def sample(sample_event, &block)
           pipeline.instance_eval { @filters.each(&:register) }
 
           event.each do |e|
-            extra = []
-            pipeline.filter(e) do |new_event|
-              extra << new_event
-            end
-
-            results << e unless e.cancelled?
-            results += extra.reject(&:cancelled?)
+            pipeline.filter(e) {|new_event| results << new_event }
           end
 
           pipeline.flush_filters(:final => true) do |e|
