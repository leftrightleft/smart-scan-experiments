diff --git a/logstash-core/src/main/java/org/logstash/Accessors.java b/logstash-core/src/main/java/org/logstash/Accessors.java
index f7197d1f260..d135cbf51ef 100644
--- a/logstash-core/src/main/java/org/logstash/Accessors.java
+++ b/logstash-core/src/main/java/org/logstash/Accessors.java
@@ -91,22 +91,19 @@ private static boolean foundInList(final String key, final List<Object> target)
     }
 
     private Object findTarget(FieldReference field) {
-        Object target;
-
-        if ((target = this.lut.get(field.getReference())) != null) {
-            return target;
-        }
+        final Object target = this.lut.get(field.getReference());
+        return target != null ? target : cacheTarget(field);
+    }
 
-        target = this.data;
-        for (String key : field.getPath()) {
+    private Object cacheTarget(final FieldReference field) {
+        Object target = this.data;
+        for (final String key : field.getPath()) {
             target = fetch(target, key);
-            if (! isCollection(target)) {
+            if (!isCollection(target)) {
                 return null;
             }
         }
-
         this.lut.put(field.getReference(), target);
-
         return target;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/Javafier.java b/logstash-core/src/main/java/org/logstash/Javafier.java
index b12e7ec6bac..f710e850332 100644
--- a/logstash-core/src/main/java/org/logstash/Javafier.java
+++ b/logstash-core/src/main/java/org/logstash/Javafier.java
@@ -15,6 +15,9 @@ public class Javafier {
     private Javafier(){}
 
     public static Object deep(Object o) {
+        if(o == null) {
+            return null;
+        }
         if (o instanceof BiValue) {
             return ((BiValue)o).javaValue();
         } else if(o instanceof ConvertedMap) {
diff --git a/logstash-core/src/main/java/org/logstash/PathCache.java b/logstash-core/src/main/java/org/logstash/PathCache.java
index 68414cf3af2..41a3fdd95e8 100644
--- a/logstash-core/src/main/java/org/logstash/PathCache.java
+++ b/logstash-core/src/main/java/org/logstash/PathCache.java
@@ -12,7 +12,7 @@ public final class PathCache {
 
     static {
         // inject @timestamp
-        cache(BRACKETS_TIMESTAMP, timestamp);
+        cache.put(BRACKETS_TIMESTAMP, timestamp);
     }
 
     public static boolean isTimestamp(String reference) {
@@ -21,16 +21,16 @@ public static boolean isTimestamp(String reference) {
 
     public static FieldReference cache(String reference) {
         // atomicity between the get and put is not important
-        FieldReference result = cache.get(reference);
-        if (result == null) {
-            result = FieldReference.parse(reference);
-            cache.put(reference, result);
+        final FieldReference result = cache.get(reference);
+        if (result != null) {
+            return result;
         }
-        return result;
+        return parseToCache(reference);
     }
-
-    public static FieldReference cache(String reference, FieldReference field) {
-        cache.put(reference, field);
-        return field;
+    
+    private static FieldReference parseToCache(final String reference) {
+        final FieldReference result = FieldReference.parse(reference);
+        cache.put(reference, result);
+        return result;
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index ae233be3d74..4557734dae5 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -25,6 +25,9 @@ public class Valuefier {
     private Valuefier(){}
 
     private static Object convertJavaProxy(JavaProxy jp) {
+        if(jp == null) {
+            return BiValues.NULL_BI_VALUE;
+        }
         Object obj = JavaUtil.unwrapJavaObject(jp);
         if (obj instanceof IRubyObject[]) {
             return ConvertedList.newFromRubyArray((IRubyObject[]) obj);
@@ -42,7 +45,7 @@ private static Object convertJavaProxy(JavaProxy jp) {
 
     public static Object convertNonCollection(Object o) {
         try {
-            return BiValues.newBiValue(o);
+            return o == null ? BiValues.NULL_BI_VALUE : BiValues.newBiValue(o);
         } catch (IllegalArgumentException e) {
             final Class<?> cls = o.getClass();
             throw new IllegalArgumentException(String.format(ERR_TEMPLATE, cls.getName(), cls.getSimpleName()), e);
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
index feb1e6f7fa9..db646c3c2ed 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
@@ -67,7 +67,7 @@ private static HashMap<String, String> initCache() {
         return hm;
     }
 
-    private static final NullBiValue NULL_BI_VALUE = NullBiValue.newNullBiValue();
+    public static final NullBiValue NULL_BI_VALUE = NullBiValue.newNullBiValue();
 
     private final BiValueType biValueType;
 
@@ -75,7 +75,7 @@ private static HashMap<String, String> initCache() {
         this.biValueType = biValueType;
     }
 
-    private static final HashMap<String, String> nameCache = initCache();
+    private static final HashMap<String, String> NAME_CACHE = initCache();
 
     private BiValue build(Object value) {
         return biValueType.build(value);
@@ -85,18 +85,22 @@ public static BiValue newBiValue(Object o) {
         if (o == null) {
             return NULL_BI_VALUE;
         }
-        BiValues bvs = valueOf(fetchName(o));
-        return bvs.build(o);
+        return valueOf(fetchName(o)).build(o);
     }
 
     private static String fetchName(Object o) {
-        String cls = o.getClass().getName();
-        if (nameCache.containsKey(cls)) {
-            return nameCache.get(cls);
+        final String cls = o.getClass().getName();
+        final String name = NAME_CACHE.get(cls);
+        if (name != null) {
+            return name;
         }
-        String toCache = cls.toUpperCase().replace('.', '_');
+        return cacheName(cls);
+    }
+    
+    private static String cacheName(final String cls) {
+        final String toCache = cls.toUpperCase().replace('.', '_');
         // TODO[Guy] log warn that we are seeing a uncached value
-        nameCache.put(cls, toCache);
+        NAME_CACHE.put(cls, toCache);
         return toCache;
     }
 
