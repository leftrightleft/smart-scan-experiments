diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index cc87b28b232..1c434a5f2cd 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -113,7 +113,7 @@ def register(hooks, settings)
 
     attr_reader :hooks
 
-    def initialize
+    def initialize(alias_registry = nil)
       @mutex = Mutex.new
       # We need a threadsafe class here because we may perform
       # get/set operations concurrently despite the fact we don't use
@@ -123,6 +123,7 @@ def initialize
       @registry = java.util.concurrent.ConcurrentHashMap.new
       @java_plugins = java.util.concurrent.ConcurrentHashMap.new
       @hooks = HooksRegistry.new
+      @alias_registry = alias_registry || Java::org.logstash.plugins.AliasRegistry.new
     end
 
     def setup!
@@ -196,41 +197,47 @@ def lookup(type, plugin_name, &block)
     # a plugin and will do a lookup on the namespace of the required class to find a matching
     # plugin with the appropriate type.
     def legacy_lookup(type, plugin_name)
-      begin
-        path = "logstash/#{type}s/#{plugin_name}"
+      klass = load_plugin_class(type, plugin_name)
 
-        klass = begin
-          namespace_lookup(type, plugin_name)
-        rescue UnknownPlugin => e
-          # Plugin not registered. Try to load it.
-          begin
-            require path
-            namespace_lookup(type, plugin_name)
-          rescue LoadError => e
-            logger.error("Tried to load a plugin's code, but failed.", :exception => e, :path => path, :type => type, :name => plugin_name)
-            raise
-          end
-        end
+      if !klass && @alias_registry.alias?(type.to_java, plugin_name)
+        resolved_plugin_name = @alias_registry.original_from_alias(type.to_java, plugin_name)
+        logger.debug("Loading #{type} plugin #{resolved_plugin_name} via its alias #{plugin_name}...")
+        klass = load_plugin_class(type, resolved_plugin_name)
+        lazy_add(type, resolved_plugin_name, klass) if klass
+      end
 
-        plugin = lazy_add(type, plugin_name, klass)
-      rescue => e
-        logger.error("Problems loading a plugin with",
-                    :type => type,
-                    :name => plugin_name,
-                    :path => path,
-                    :error_message => e.message,
-                    :error_class => e.class,
-                    :error_backtrace => e.backtrace)
-
-        raise LoadError, "Problems loading the requested plugin named #{plugin_name} of type #{type}. Error: #{e.class} #{e.message}"
+      unless klass
+        logger.error("Unable to load plugin.", :type => type, :name => plugin_name)
+        raise LoadError, "Unable to load the requested plugin named #{plugin_name} of type #{type}. The plugin is not installed."
       end
 
-      plugin
+      lazy_add(type, plugin_name, klass)
+    end
+
+    # load a plugin's class, or return nil if the plugin cannot be loaded.
+    # attempts to load the class purely through namespace lookup,
+    # and falls back to requiring the path of the expected plugin.
+    # @param type [String]: plugin type, such as "input", "output", "filter", "codec"
+    # @param plugin_name [String]: plugin name, such as "grok", "elasticsearch"
+    # @return [Class,nil] the plugin class, or nil
+    private
+    def load_plugin_class(type, plugin_name)
+      klass = namespace_lookup(type, plugin_name)
+
+      unless klass
+        require("logstash/#{type}s/#{plugin_name}")
+        klass = namespace_lookup(type, plugin_name)
+      end
+      klass
+    rescue LoadError => e
+      logger.debug("Tried to load a plugin's code, but failed.", :exception => e, :path => e.path, :type => type, :name => plugin_name)
+      nil
     end
 
+    public
     def lookup_pipeline_plugin(type, name)
       LogStash::PLUGIN_REGISTRY.lookup(type, name) do |plugin_klass, plugin_name|
-        is_a_plugin?(plugin_klass, plugin_name)
+        is_a_plugin_or_alias?(plugin_klass, type.to_java, plugin_name)
       end
     rescue LoadError, NameError => e
       logger.debug("Problems loading the plugin with", :type => type, :name => name)
@@ -268,8 +275,7 @@ def size
     # ex.: namespace_lookup("filter", "grok") looks for LogStash::Filters::Grok
     # @param type [String] plugin type, "input", "output", "filter"
     # @param name [String] plugin name, ex.: "grok"
-    # @return [Class] the plugin class or raises NameError
-    # @raise NameError if plugin class does not exist or is invalid
+    # @return [Class,nil] the plugin class or nil
     def namespace_lookup(type, name)
       type_const = "#{type.capitalize}s"
       namespace = LogStash.const_get(type_const)
@@ -277,10 +283,7 @@ def namespace_lookup(type, name)
       # namespace.constants is the shallow collection of all constants symbols in namespace
       # note that below namespace.const_get(c) should never result in a NameError since c is from the constants collection
       klass_sym = namespace.constants.find { |c| is_a_plugin?(namespace.const_get(c), name) }
-      klass = klass_sym && namespace.const_get(klass_sym)
-
-      raise(UnknownPlugin) unless klass
-      klass
+      klass_sym && namespace.const_get(klass_sym)
     end
 
     # check if klass is a valid plugin for name
@@ -290,7 +293,19 @@ def namespace_lookup(type, name)
     def is_a_plugin?(klass, name)
       (klass.class == Java::JavaLang::Class && klass.simple_name.downcase == name.gsub('_','')) ||
       (klass.class == Java::JavaClass && klass.simple_name.downcase == name.gsub('_','')) ||
-      (klass.ancestors.include?(LogStash::Plugin) && klass.respond_to?(:config_name) && klass.config_name == name)
+      (klass.ancestors.include?(LogStash::Plugin) && klass.respond_to?(:config_name) &&
+        klass.config_name == name)
+    end
+
+    # check if klass is a valid plugin for name,
+    # including alias resolution
+    def is_a_plugin_or_alias?(klass, type, plugin_name)
+      return true if is_a_plugin?(klass, plugin_name)
+
+      resolved_plugin_name = @alias_registry.resolve_alias(type, plugin_name)
+      return true if is_a_plugin?(klass, resolved_plugin_name)
+
+      false
     end
 
     def add_plugin(type, name, klass)
diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index df9ef00847b..18f514862f4 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -199,6 +199,15 @@ def flush(options)
     end
   end
 
+  describe "aliased plugin instantiation" do
+    it "should create the pipeline as if it's using the original plugin" do
+      alias_registry = Java::org.logstash.plugins.AliasRegistry.new({["input", "alias"] => "generator"})
+      LogStash::PLUGIN_REGISTRY = LogStash::Plugins::Registry.new alias_registry
+      pipeline = mock_java_pipeline_from_string("input { alias { count => 1 } } output { null {} }")
+      expect(pipeline.ephemeral_id).to_not be_nil
+      pipeline.close
+    end
+  end
 
   describe "event cancellation" do
     # test harness for https://github.com/elastic/logstash/issues/6055
diff --git a/logstash-core/spec/logstash/plugins/registry_spec.rb b/logstash-core/spec/logstash/plugins/registry_spec.rb
index 827f33a5421..659bb4b49e3 100644
--- a/logstash-core/spec/logstash/plugins/registry_spec.rb
+++ b/logstash-core/spec/logstash/plugins/registry_spec.rb
@@ -34,9 +34,11 @@ def register; end
 end
 
 describe LogStash::Plugins::Registry do
-  let(:registry) { described_class.new }
+  let(:alias_registry) { nil }
+  let(:registry) { described_class.new alias_registry }
 
   context "when loading installed plugins" do
+    let(:alias_registry) { Java::org.logstash.plugins.AliasRegistry.new({["input", "alias_std_input"] => "stdin"}) }
     let(:plugin) { double("plugin") }
 
     it "should return the expected class" do
@@ -44,6 +46,11 @@ def register; end
       expect(klass).to eq(LogStash::Inputs::Stdin)
     end
 
+    it "should load an aliased ruby plugin" do
+      klass = registry.lookup("input", "alias_std_input")
+      expect(klass).to eq(LogStash::Inputs::Stdin)
+    end
+
     it "should raise an error if can not find the plugin class" do
       expect { registry.lookup("input", "do-not-exist-elastic") }.to raise_error(LoadError)
     end
@@ -53,13 +60,34 @@ def register; end
       expect { registry.lookup("input", "new_plugin") }.to change { registry.size }.by(1)
       expect { registry.lookup("input", "new_plugin") }.not_to change { registry.size }
     end
+
+    context "when loading installed plugin that overrides an alias" do
+      let(:alias_registry) { Java::org.logstash.plugins.AliasRegistry.new({["input", "dummy"] => "new_plugin"}) }
+
+      it 'should load the concrete implementation instead of resolving the alias' do
+        klass = registry.lookup("input", "dummy")
+        expect(klass).to eq(LogStash::Inputs::Dummy)
+      end
+    end
   end
 
   context "when loading code defined plugins" do
+    let(:alias_registry) { Java::org.logstash.plugins.AliasRegistry.new({["input", "alias_input"] => "new_plugin"}) }
+
     it "should return the expected class" do
       klass = registry.lookup("input", "dummy")
       expect(klass).to eq(LogStash::Inputs::Dummy)
     end
+
+    it "should return the expected class also for aliased plugins" do
+      klass = registry.lookup("input", "alias_input")
+      expect(klass).to eq(LogStash::Inputs::NewPlugin)
+    end
+
+    it "should return the expected class also for alias-targeted plugins" do
+      klass = registry.lookup("input", "new_plugin")
+      expect(klass).to eq(LogStash::Inputs::NewPlugin)
+    end
   end
 
   context "when plugin is not installed and not defined" do
diff --git a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
new file mode 100644
index 00000000000..485b61a232c
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
@@ -0,0 +1,117 @@
+package org.logstash.plugins;
+
+import org.logstash.plugins.PluginLookup.PluginType;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+
+public class AliasRegistry {
+
+    private final static class PluginCoordinate {
+        private final PluginType type;
+        private final String name;
+
+        public PluginCoordinate(PluginType type, String name) {
+            this.type = type;
+            this.name = name;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            PluginCoordinate that = (PluginCoordinate) o;
+            return type == that.type && Objects.equals(name, that.name);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(type, name);
+        }
+
+        PluginCoordinate withName(String name) {
+            return new PluginCoordinate(this.type, name);
+        }
+    }
+
+
+    private final Map<PluginCoordinate, String> aliases = new HashMap<>();
+    private final Map<PluginCoordinate, String> reversedAliases = new HashMap<>();
+
+    public AliasRegistry() {
+        Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
+        defaultDefinitions.put(new PluginCoordinate(PluginType.INPUT, "elastic_agent"), "beats");
+        configurePluginAliases(defaultDefinitions);
+    }
+
+    /**
+     * Constructor used in tests to customize the plugins renames.
+     * The input map's key are tuples of (type, name)
+     * */
+    public AliasRegistry(Map<List<String>, String> aliasDefinitions) {
+        Map<PluginCoordinate, String> aliases = new HashMap<>();
+
+        // transform the (tye, name) into PluginCoordinate
+        for (Map.Entry<List<String>, String> e : aliasDefinitions.entrySet()) {
+            final List<String> tuple = e.getKey();
+            final PluginCoordinate key = mapTupleToCoordinate(tuple);
+            aliases.put(key, e.getValue());
+        }
+
+        configurePluginAliases(aliases);
+    }
+
+    private PluginCoordinate mapTupleToCoordinate(List<String> tuple) {
+        if (tuple.size() != 2) {
+            throw new IllegalArgumentException("Expected a tuple of 2 elements, but found: " + tuple);
+        }
+        final PluginType type = PluginType.valueOf(tuple.get(0).toUpperCase());
+        final String name = tuple.get(1);
+        final PluginCoordinate key = new PluginCoordinate(type, name);
+        return key;
+    }
+
+    private void configurePluginAliases(Map<PluginCoordinate, String> aliases) {
+        this.aliases.putAll(aliases);
+        for (Map.Entry<PluginCoordinate, String> e : this.aliases.entrySet()) {
+            final PluginCoordinate reversedAlias = e.getKey().withName(e.getValue());
+            if (reversedAliases.containsKey(reversedAlias)) {
+                throw new IllegalStateException("Found plugin " + e.getValue() + " aliased more than one time");
+            }
+            reversedAliases.put(reversedAlias, e.getKey().name);
+        }
+    }
+
+    public boolean isAlias(String type, String pluginName) {
+        final PluginType pluginType = PluginType.valueOf(type.toUpperCase());
+
+        return isAlias(pluginType, pluginName);
+    }
+
+    public boolean isAlias(PluginType type, String pluginName) {
+        return aliases.containsKey(new PluginCoordinate(type, pluginName));
+    }
+
+    public String originalFromAlias(PluginType type, String alias) {
+        return aliases.get(new PluginCoordinate(type, alias));
+    }
+
+    public String originalFromAlias(String type, String alias) {
+        return originalFromAlias(PluginType.valueOf(type.toUpperCase()), alias);
+    }
+
+    public Optional<String> aliasFromOriginal(PluginType type, String realPluginName) {
+        return Optional.ofNullable(reversedAliases.get(new PluginCoordinate(type, realPluginName)));
+    }
+
+    /**
+     * if pluginName is an alias then return the real plugin name else return it unchanged
+     */
+    public String resolveAlias(String type, String pluginName) {
+        final PluginCoordinate pluginCoord = new PluginCoordinate(PluginType.valueOf(type.toUpperCase()), pluginName);
+        return aliases.getOrDefault(pluginCoord, pluginName);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
index c61bacc756d..663c1bb867c 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
@@ -32,6 +32,7 @@
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.plugins.discovery.PluginRegistry;
+import org.logstash.plugins.factory.PluginFactoryExt;
 
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -40,20 +41,23 @@
  * Java Implementation of the plugin that is implemented by wrapping the Ruby
  * {@code LogStash::Plugin} class for the Ruby plugin lookup.
  */
-public final class PluginLookup {
+public final class PluginLookup implements PluginFactoryExt.PluginResolver {
 
     private static final IRubyObject RUBY_REGISTRY = RubyUtil.RUBY.executeScript(
             "require 'logstash/plugins/registry'\nrequire 'logstash/plugin'\nLogStash::Plugin",
             ""
     );
 
-    private PluginLookup() {
-        // Utility Class
+    private final PluginRegistry pluginRegistry;
+
+    public PluginLookup(PluginRegistry pluginRegistry) {
+        this.pluginRegistry = pluginRegistry;
     }
 
     @SuppressWarnings("rawtypes")
-    public static PluginLookup.PluginClass lookup(final PluginLookup.PluginType type, final String name) {
-        Class<?> javaClass = PluginRegistry.getPluginClass(type, name);
+    @Override
+    public PluginClass resolve(PluginType type, String name) {
+        Class<?> javaClass = pluginRegistry.getPluginClass(type, name);
         if (javaClass != null) {
 
             if (!PluginValidator.validatePlugin(type, javaClass)) {
diff --git a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
index 7b77283f112..7fde7b4c154 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
@@ -20,7 +20,9 @@
 
 package org.logstash.plugins.discovery;
 
-import org.logstash.plugins.PluginLookup;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.logstash.plugins.AliasRegistry;
 import co.elastic.logstash.api.Codec;
 import co.elastic.logstash.api.Configuration;
 import co.elastic.logstash.api.Context;
@@ -28,32 +30,56 @@
 import co.elastic.logstash.api.Input;
 import co.elastic.logstash.api.LogstashPlugin;
 import co.elastic.logstash.api.Output;
+import org.logstash.plugins.PluginLookup.PluginType;
 import org.reflections.Reflections;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 
 /**
- * Registry for built-in Java plugins (not installed via logstash-plugin)
- */
+ * Registry for built-in Java plugins (not installed via logstash-plugin).
+ * This is singleton ofr two reasons:
+ * <ul>
+ *  <li>it's a registry so no need for multiple instances</li>
+ *  <li>the Reflections library used need to run in single thread during discovery phase</li>
+ * </ul>
+ * */
 public final class PluginRegistry {
 
-    private static final Map<String, Class<Input>> INPUTS = new HashMap<>();
-    private static final Map<String, Class<Filter>> FILTERS = new HashMap<>();
-    private static final Map<String, Class<Output>> OUTPUTS = new HashMap<>();
-    private static final Map<String, Class<Codec>> CODECS = new HashMap<>();
+    private static final Logger LOGGER = LogManager.getLogger(PluginRegistry.class);
+
+    private final Map<String, Class<Input>> inputs = new HashMap<>();
+    private final Map<String, Class<Filter>> filters = new HashMap<>();
+    private final Map<String, Class<Output>> outputs = new HashMap<>();
+    private final Map<String, Class<Codec>> codecs = new HashMap<>();
+    private static final Object LOCK = new Object();
+    private static volatile PluginRegistry INSTANCE;
+    private final AliasRegistry aliasRegistry;
 
-    static {
+    private PluginRegistry(AliasRegistry aliasRegistry) {
+        this.aliasRegistry = aliasRegistry;
         discoverPlugins();
     }
 
-    private PluginRegistry() {} // utility class
-
+    public static PluginRegistry getInstance(AliasRegistry aliasRegistry) {
+        if (INSTANCE == null) {
+            synchronized (LOCK) {
+                if (INSTANCE == null) {
+                    INSTANCE = new PluginRegistry(aliasRegistry);
+                }
+            }
+        }
+        return INSTANCE;
+    }
+    
     @SuppressWarnings("unchecked")
-    private static void discoverPlugins() {
+    private void discoverPlugins() {
+        // the constructor of Reflection must be called only by one thread, else there is a
+        // risk that the first thread that completes close the Zip files for the others.
         Reflections reflections = new Reflections("org.logstash.plugins");
         Set<Class<?>> annotated = reflections.getTypesAnnotatedWith(LogstashPlugin.class);
         for (final Class<?> cls : annotated) {
@@ -61,67 +87,91 @@ private static void discoverPlugins() {
                 if (annotation instanceof LogstashPlugin) {
                     String name = ((LogstashPlugin) annotation).name();
                     if (Filter.class.isAssignableFrom(cls)) {
-                        FILTERS.put(name, (Class<Filter>) cls);
+                        filters.put(name, (Class<Filter>) cls);
                     }
                     if (Output.class.isAssignableFrom(cls)) {
-                        OUTPUTS.put(name, (Class<Output>) cls);
+                        outputs.put(name, (Class<Output>) cls);
                     }
                     if (Input.class.isAssignableFrom(cls)) {
-                        INPUTS.put(name, (Class<Input>) cls);
+                        inputs.put(name, (Class<Input>) cls);
                     }
                     if (Codec.class.isAssignableFrom(cls)) {
-                        CODECS.put(name, (Class<Codec>) cls);
+                        codecs.put(name, (Class<Codec>) cls);
                     }
 
                     break;
                 }
             }
         }
+
+        // after loaded all plugins, check if aliases has to be provided
+        addAliasedPlugins(PluginType.FILTER, filters);
+        addAliasedPlugins(PluginType.OUTPUT, outputs);
+        addAliasedPlugins(PluginType.INPUT, inputs);
+        addAliasedPlugins(PluginType.CODEC, codecs);
     }
 
-    public static Class<?> getPluginClass(PluginLookup.PluginType pluginType, String pluginName) {
-        if (pluginType == PluginLookup.PluginType.FILTER) {
-            return getFilterClass(pluginName);
-        }
-        if (pluginType == PluginLookup.PluginType.OUTPUT) {
-            return getOutputClass(pluginName);
-        }
-        if (pluginType == PluginLookup.PluginType.INPUT) {
-            return getInputClass(pluginName);
+    private <T> void addAliasedPlugins(PluginType type, Map<String, Class<T>> pluginCache) {
+        final Map<String, Class<T>> aliasesToAdd = new HashMap<>();
+        for (Map.Entry<String, Class<T>> e : pluginCache.entrySet()) {
+            final String realPluginName = e.getKey();
+            final Optional<String> alias = aliasRegistry.aliasFromOriginal(type, realPluginName);
+            if (alias.isPresent()) {
+                final String aliasName = alias.get();
+                if (!pluginCache.containsKey(aliasName)) {
+                    // no real plugin with same alias name was found
+                    aliasesToAdd.put(aliasName, e.getValue());
+                    final String typeStr = type.name().toLowerCase();
+                    LOGGER.info("Plugin {}-{} is aliased as {}-{}", typeStr, realPluginName, typeStr, aliasName);
+                }
+            }
         }
-        if (pluginType == PluginLookup.PluginType.CODEC) {
-            return getCodecClass(pluginName);
+        for (Map.Entry<String, Class<T>> e : aliasesToAdd.entrySet()) {
+            pluginCache.put(e.getKey(), e.getValue());
         }
+    }
 
-        throw new IllegalStateException("Unknown plugin type: " + pluginType);
-
+    public Class<?> getPluginClass(PluginType pluginType, String pluginName) {
+        
+        switch (pluginType) {
+            case FILTER:
+                return getFilterClass(pluginName);
+            case OUTPUT:
+                return getOutputClass(pluginName);
+            case INPUT:
+                return getInputClass(pluginName);
+            case CODEC:
+                return getCodecClass(pluginName);
+            default:
+                throw new IllegalStateException("Unknown plugin type: " + pluginType);
+        }
     }
 
-    public static Class<Input> getInputClass(String name) {
-        return INPUTS.get(name);
+    public Class<Input> getInputClass(String name) {
+        return inputs.get(name);
     }
 
-    public static Class<Filter> getFilterClass(String name) {
-        return FILTERS.get(name);
+    public Class<Filter> getFilterClass(String name) {
+        return filters.get(name);
     }
 
-    public static Class<Codec> getCodecClass(String name) {
-        return CODECS.get(name);
+    public Class<Codec> getCodecClass(String name) {
+        return codecs.get(name);
     }
 
-    public static Class<Output> getOutputClass(String name) {
-        return OUTPUTS.get(name);
+    public Class<Output> getOutputClass(String name) {
+        return outputs.get(name);
     }
 
-    public static Codec getCodec(String name, Configuration configuration, Context context) {
-        if (name != null && CODECS.containsKey(name)) {
-            return instantiateCodec(CODECS.get(name), configuration, context);
+    public Codec getCodec(String name, Configuration configuration, Context context) {
+        if (name != null && codecs.containsKey(name)) {
+            return instantiateCodec(codecs.get(name), configuration, context);
         }
         return null;
     }
 
     @SuppressWarnings({"unchecked","rawtypes"})
-    private static Codec instantiateCodec(Class clazz, Configuration configuration, Context context) {
+    private Codec instantiateCodec(Class clazz, Configuration configuration, Context context) {
         try {
             Constructor<Codec> constructor = clazz.getConstructor(Configuration.class, Context.class);
             return constructor.newInstance(configuration, context);
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
index 6365d63aa1c..b3c8d3a8882 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
@@ -19,8 +19,10 @@
 import org.logstash.instrument.metrics.AbstractMetricExt;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
+import org.logstash.plugins.AliasRegistry;
 import org.logstash.plugins.ConfigVariableExpander;
 import org.logstash.plugins.PluginLookup;
+import org.logstash.plugins.discovery.PluginRegistry;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
@@ -84,7 +86,7 @@ public static IRubyObject filterDelegator(final ThreadContext context,
     }
 
     public PluginFactoryExt(final Ruby runtime, final RubyClass metaClass) {
-        this(runtime, metaClass, PluginLookup::lookup);
+        this(runtime, metaClass, new PluginLookup(PluginRegistry.getInstance(new AliasRegistry())));
     }
 
     PluginFactoryExt(final Ruby runtime, final RubyClass metaClass, PluginResolver pluginResolver) {
