diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java b/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
index 29e62ba607a..c7b03c07855 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
@@ -15,7 +15,7 @@ public TailPage(HeadPage page) {
 
     // create a new TailPage object for an exiting Checkpoint and data file
     // @param pageIO the PageIO object is expected to be open/recover/create
-    public TailPage(Checkpoint checkpoint, Queue queue, PageIO pageIO) throws IOException {
+    public TailPage(Checkpoint checkpoint, Queue queue, PageIO pageIO) {
         super(checkpoint.getPageNum(), queue, checkpoint.getMinSeqNum(), checkpoint.getElementCount(), checkpoint.getFirstUnackedSeqNum(), new BitSet(), pageIO);
 
         // this page ackedSeqNums bitset is a new empty bitset, if we have some acked elements, set them in the bitset
@@ -45,4 +45,4 @@ public void close() throws IOException {
             this.pageIO.close();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
index 1b7a77f2549..bf80fb9b5b0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
@@ -276,7 +276,7 @@ private byte[] readData() throws IOException {
         return streamedInput.readByteArray();
     }
 
-    private void skipChecksum() throws IOException {
+    private void skipChecksum() {
         streamedInput.skip(CHECKSUM_SIZE);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
index 8afeb4eef2c..3cd0764c679 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
@@ -40,7 +40,7 @@ public int read(byte[] b, int off, int len) throws IOException {
     }
 
     @Override
-    public long skip(long n) throws IOException {
+    public long skip(long n) {
         if (n > buffer.remaining()) {
             int ret = buffer.position();
             buffer.position(buffer.limit());
@@ -67,7 +67,7 @@ public void movePosition(int position) {
         buffer.position(position);
     }
 
-    public void rewind() throws IOException {
+    public void rewind() {
         buffer.rewind();
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
index 6934e8e105a..fa8e22714ed 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
@@ -138,7 +138,7 @@ public Path getCurrentSegment() {
         return currentReader.getPath();
     }
 
-    public long getCurrentPosition() throws IOException {
+    public long getCurrentPosition() {
         return currentReader.getChannelPosition();
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index 887bd9a1fd1..90fb0d632c1 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -121,7 +121,7 @@ public <T> byte[] seekToNextEventPosition(T target, Function<byte[], T> keyExtra
         return event;
     }
 
-    public long getChannelPosition() throws IOException {
+    public long getChannelPosition() {
         return channelPosition;
     }
 
@@ -150,7 +150,7 @@ public boolean isEndOfStream() {
     /**
      *
      */
-     int seekToStartOfEventInBlock() throws IOException {
+     int seekToStartOfEventInBlock() {
          while (true) {
              RecordType type = RecordType.fromByte(currentBlock.array()[currentBlock.arrayOffset() + currentBlock.position()]);
              if (RecordType.COMPLETE.equals(type) || RecordType.START.equals(type)) {
@@ -192,7 +192,7 @@ private void maybeRollToNextBlock() throws IOException {
         }
     }
 
-    private void getRecord(ByteBuffer buffer, RecordHeader header) throws IOException {
+    private void getRecord(ByteBuffer buffer, RecordHeader header) {
         Checksum computedChecksum = new CRC32();
         computedChecksum.update(currentBlock.array(), currentBlock.position(), header.getSize());
 
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index e514a45dc88..df9367ca643 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -196,7 +196,7 @@ public IRubyObject ruby_append(ThreadContext context, IRubyObject value)
         }
 
         @JRubyMethod(name = "sprintf", required = 1)
-        public IRubyObject ruby_sprintf(ThreadContext context, IRubyObject format) throws IOException {
+        public IRubyObject ruby_sprintf(ThreadContext context, IRubyObject format) {
             try {
                 return RubyString.newString(context.runtime, event.sprintf(format.toString()));
             } catch (IOException e) {
@@ -211,14 +211,12 @@ public IRubyObject ruby_to_s(ThreadContext context)
         }
 
         @JRubyMethod(name = "to_hash")
-        public IRubyObject ruby_to_hash(ThreadContext context) throws IOException
-        {
+        public IRubyObject ruby_to_hash(ThreadContext context) {
             return Rubyfier.deep(context.runtime, this.event.getData());
         }
 
         @JRubyMethod(name = "to_hash_with_metadata")
-        public IRubyObject ruby_to_hash_with_metadata(ThreadContext context) throws IOException
-        {
+        public IRubyObject ruby_to_hash_with_metadata(ThreadContext context) {
             Map data = this.event.toMap();
             Map metadata = this.event.getMetadata();
 
