diff --git a/docs/plugin-synopsis.asciidoc.erb b/docs/plugin-synopsis.asciidoc.erb
index 726ea321058..d0a28cc71c4 100644
--- a/docs/plugin-synopsis.asciidoc.erb
+++ b/docs/plugin-synopsis.asciidoc.erb
@@ -17,7 +17,7 @@
 <% sorted_attributes.each do |name, config|
    next if config[:deprecated]
    if config[:validate].is_a?(Array) 
-     annotation = "|string, one of #{config[:validate].inspect}"
+     annotation = "|<<string,string>>, one of `#{config[:validate].inspect}`"
    elsif config[:validate] == :path
      annotation = "|a valid filesystem path"
    else
diff --git a/lib/logstash/inputs/base.rb b/lib/logstash/inputs/base.rb
index 22bda363343..2f4f254681e 100644
--- a/lib/logstash/inputs/base.rb
+++ b/lib/logstash/inputs/base.rb
@@ -11,7 +11,7 @@ class LogStash::Inputs::Base < LogStash::Plugin
   include LogStash::Config::Mixin
   config_name "input"
 
-  # Add a 'type' field to all events handled by this input.
+  # Add a `type` field to all events handled by this input.
   #
   # Types are used mainly for filter activation.
   #
@@ -33,20 +33,20 @@ class LogStash::Inputs::Base < LogStash::Plugin
   # The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.
   config :codec, :validate => :codec, :default => "plain"
 
-  # The character encoding used in this input. Examples include "UTF-8"
-  # and "cp1252"
+  # The character encoding used in this input. Examples include `UTF-8`
+  # and `cp1252`
   #
-  # This setting is useful if your log files are in Latin-1 (aka cp1252)
-  # or in another character set other than UTF-8.
+  # This setting is useful if your log files are in `Latin-1` (aka `cp1252`)
+  # or in another character set other than `UTF-8`.
   #
-  # This only affects "plain" format logs since json is UTF-8 already.
+  # This only affects `plain` format logs since json is `UTF-8` already.
   config :charset, :validate => ::Encoding.name_list, :deprecated => true
 
-  # If format is "json", an event sprintf string to build what
-  # the display @message should be given (defaults to the raw JSON).
-  # sprintf format strings look like %{fieldname}
+  # If format is `json`, an event `sprintf` string to build what
+  # the display `@message` should be given (defaults to the raw JSON).
+  # `sprintf` format strings look like `%{fieldname}`
   #
-  # If format is "json_event", ALL fields except for @type
+  # If format is `json_event`, ALL fields except for `@type`
   # are expected to be present. Not receiving all fields
   # will cause unexpected results.
   config :message_format, :validate => :string, :deprecated => true
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 9fedbf10818..7084ed3f4b3 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -13,7 +13,7 @@ class LogStash::Outputs::Base < LogStash::Plugin
   config_name "output"
 
   # The type to act on. If a type is given, then this output will only
-  # act on messages with the same type. See any input plugin's "type"
+  # act on messages with the same type. See any input plugin's `type`
   # attribute for more.
   # Optional.
   config :type, :validate => :string, :default => "", :deprecated => "You can achieve this same behavior with the new conditionals, like: `if [type] == \"sometype\" { %PLUGIN% { ... } }`."
