diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
index bc66371c67a..ba46b2cb83d 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
@@ -21,12 +21,11 @@
 package org.logstash.config.ir.compiler;
 
 import co.elastic.logstash.api.Codec;
+import org.jruby.RubyObject;
 import org.jruby.RubyString;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.common.SourceWithMetadata;
 
-import java.util.Map;
-
 /**
  * This class holds interfaces implemented by Ruby concrete classes.
  */
@@ -51,5 +50,6 @@ public interface PluginFactory {
 
         Codec buildDefaultCodec(String codecName);
 
+        Codec buildRubyCodecWrapper(RubyObject rubyCodec);
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java b/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
index caf1a4d89bd..345cb7a2fc8 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
@@ -24,7 +24,11 @@
 import co.elastic.logstash.api.Password;
 import co.elastic.logstash.api.PluginConfigSpec;
 import co.elastic.logstash.api.Codec;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.jruby.RubyObject;
 import org.logstash.config.ir.compiler.RubyIntegration;
+import org.logstash.plugins.factory.RubyCodecDelegator;
 
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -35,6 +39,7 @@
  * Configuration for Logstash Java plugins.
  */
 public final class ConfigurationImpl implements Configuration {
+    private static final Logger LOGGER = LogManager.getLogger(ConfigurationImpl.class);
 
     private final RubyIntegration.PluginFactory pluginFactory;
     private final Map<String, Object> rawSettings;
@@ -69,6 +74,9 @@ public <T> T get(final PluginConfigSpec<T> configSpec) {
             } else if (configSpec.type() == Codec.class && o instanceof String && pluginFactory != null) {
                 Codec codec = pluginFactory.buildDefaultCodec((String) o);
                 return configSpec.type().cast(codec);
+            } else if (configSpec.type() == Codec.class && o instanceof RubyObject && RubyCodecDelegator.isRubyCodecSubclass((RubyObject) o)) {
+                Codec codec = pluginFactory.buildRubyCodecWrapper((RubyObject) o);
+                return configSpec.type().cast(codec);
             } else if (configSpec.type() == URI.class && o instanceof String) {
                 try {
                     URI uri = new URI((String) o);
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
index d6affa2a0d5..c23c3d87e0c 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
@@ -166,13 +166,25 @@ public IRubyObject buildCodec(final RubyString name,
 
     @Override
     public Codec buildDefaultCodec(String codecName) {
-        return (Codec) JavaUtil.unwrapJavaValue(plugin(
+        final IRubyObject pluginInstance = plugin(
                 RubyUtil.RUBY.getCurrentContext(),
                 PluginLookup.PluginType.CODEC,
                 codecName,
                 RubyHash.newHash(RubyUtil.RUBY),
                 null
-        ));
+        );
+        final Codec codec = (Codec) JavaUtil.unwrapJavaValue(pluginInstance);
+        if (codec != null) {
+            return codec;
+        }
+
+        // no unwrap is possible so this is a real Ruby instance
+        return new RubyCodecDelegator(RubyUtil.RUBY.getCurrentContext(), pluginInstance);
+    }
+
+    @Override
+    public Codec buildRubyCodecWrapper(RubyObject rubyCodec) {
+        return new RubyCodecDelegator(RubyUtil.RUBY.getCurrentContext(), rubyCodec);
     }
 
     @SuppressWarnings("unchecked")
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/RubyCodecDelegator.java b/logstash-core/src/main/java/org/logstash/plugins/factory/RubyCodecDelegator.java
new file mode 100644
index 00000000000..b70bb185ff7
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/RubyCodecDelegator.java
@@ -0,0 +1,133 @@
+package org.logstash.plugins.factory;
+
+import co.elastic.logstash.api.Codec;
+import co.elastic.logstash.api.Event;
+import co.elastic.logstash.api.PluginConfigSpec;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.jruby.RubyArray;
+import org.jruby.RubyClass;
+import org.jruby.RubyString;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.JavaInternalBlockBody;
+import org.jruby.runtime.Signature;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
+import org.logstash.ext.JrubyEventExtLibrary;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Collection;
+import java.util.Map;
+import java.util.function.Consumer;
+
+public class RubyCodecDelegator implements Codec {
+
+    private static final Logger LOGGER = LogManager.getLogger(RubyCodecDelegator.class);
+
+    private final ThreadContext currentContext;
+    private final IRubyObject pluginInstance;
+    private final String wrappingId;
+
+    public RubyCodecDelegator(ThreadContext currentContext, IRubyObject pluginInstance) {
+        this.currentContext = currentContext;
+        this.pluginInstance = pluginInstance;
+
+        verifyCodecAncestry(pluginInstance);
+        invokeRubyRegister(currentContext, pluginInstance);
+
+        wrappingId = "jw-" + wrappedPluginId();
+    }
+
+    private String wrappedPluginId() {
+        RubyString id = (RubyString) pluginInstance.callMethod(this.currentContext, "id");
+        return id.toString();
+    }
+
+    private static void verifyCodecAncestry(IRubyObject pluginInstance) {
+        if (!isRubyCodecSubclass(pluginInstance)) {
+            throw new IllegalStateException("Ruby wrapped codec is expected to subclass LogStash::Codecs::Base");
+        }
+    }
+
+    public static boolean isRubyCodecSubclass(IRubyObject pluginInstance) {
+        final RubyClass codecBaseClass = RubyUtil.RUBY.getModule("LogStash").getModule("Codecs").getClass("Base");
+        return pluginInstance.getType().hasModuleInHierarchy(codecBaseClass);
+    }
+
+    private void invokeRubyRegister(ThreadContext currentContext, IRubyObject pluginInstance) {
+        pluginInstance.callMethod(currentContext, "register");
+    }
+
+    @Override
+    public void decode(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+        // invoke Ruby's codec #decode(data, block) and use a Block to capture the yielded LogStash::Event to
+        // back to Java and pass to the eventConsumer.
+        if (buffer.remaining() == 0) {
+            // no data to decode
+            return;
+        }
+
+        // setup the block callback bridge to invoke eventConsumer
+        final Block consumerWrapper = new Block(new JavaInternalBlockBody(currentContext.runtime, Signature.ONE_ARGUMENT) {
+            @Override
+            @SuppressWarnings("unchecked")
+            public IRubyObject yield(ThreadContext context, IRubyObject[] args) {
+                // Expect only one argument, the LogStash::Event instantiated by the Ruby codec
+                final IRubyObject event = args[0];
+                eventConsumer.accept( ((JrubyEventExtLibrary.RubyEvent) event).getEvent().getData() );
+                return event;
+            }
+        });
+
+        byte[] byteInput = new byte[buffer.remaining()];
+        buffer.get(byteInput);
+        final RubyString data = RubyUtil.RUBY.newString(new String(byteInput));
+        IRubyObject[] methodParams = new IRubyObject[]{data};
+        pluginInstance.callMethod(this.currentContext, "decode", methodParams, consumerWrapper);
+    }
+
+    @Override
+    public void flush(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+        decode(buffer, eventConsumer);
+    }
+
+    @Override
+    @SuppressWarnings({"uncheked", "rawtypes"})
+    public void encode(Event event, OutputStream output) throws IOException {
+        // convert co.elastic.logstash.api.Event to JrubyEventExtLibrary.RubyEvent
+        if (!(event instanceof org.logstash.Event)) {
+            throw new IllegalStateException("The object to encode must be of type org.logstash.Event");
+        }
+
+        final JrubyEventExtLibrary.RubyEvent rubyEvent = JrubyEventExtLibrary.RubyEvent.newRubyEvent(currentContext.runtime, (org.logstash.Event) event);
+        final RubyArray param = RubyArray.newArray(currentContext.runtime, rubyEvent);
+        final RubyArray encoded = (RubyArray) pluginInstance.callMethod(this.currentContext, "multi_encode", param);
+
+        // method return an nested array, the outer contains just one element
+        // while the inner contains the original event and encoded event in form of String
+        final RubyString result = ((RubyArray) encoded.eltInternal(0)).eltInternal(1).convertToString();
+        output.write(result.getByteList().getUnsafeBytes(), result.getByteList().getBegin(), result.getByteList().getRealSize());
+    }
+
+    @Override
+    public Codec cloneCodec() {
+        return new RubyCodecDelegator(this.currentContext, this.pluginInstance);
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        // this method is invoked only for real java codecs, the one that are configured
+        // in pipeline config that needs configuration validation. In this case the validation
+        // is already done on the Ruby codec.
+        return null;
+    }
+
+    @Override
+    public String getId() {
+        return wrappingId;
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
index e834ec24bda..3aa9458979e 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -552,6 +552,11 @@ public Codec buildDefaultCodec(String codecName) {
             return null;
         }
 
+        @Override
+        public Codec buildRubyCodecWrapper(RubyObject rubyCodec) {
+            return null;
+        }
+
         private static <T> T setupPlugin(final RubyString name,
             final Map<String, Supplier<T>> suppliers) {
             final String key = name.asJavaString();
@@ -739,5 +744,10 @@ public IRubyObject buildCodec(RubyString name, IRubyObject args, SourceWithMetad
         public Codec buildDefaultCodec(String codecName) {
             return null;
         }
+
+        @Override
+        public Codec buildRubyCodecWrapper(RubyObject rubyCodec) {
+            return null;
+        }
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/plugins/TestPluginFactory.java b/logstash-core/src/test/java/org/logstash/plugins/TestPluginFactory.java
index 2476b4c0b8e..d30db1a48de 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/TestPluginFactory.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/TestPluginFactory.java
@@ -21,6 +21,7 @@
 package org.logstash.plugins;
 
 import co.elastic.logstash.api.Codec;
+import org.jruby.RubyObject;
 import org.jruby.RubyString;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.common.SourceWithMetadata;
@@ -60,4 +61,9 @@ public IRubyObject buildCodec(RubyString name, IRubyObject args, SourceWithMetad
     public Codec buildDefaultCodec(String codecName) {
         return new Line(new ConfigurationImpl(Collections.emptyMap()), new ContextImpl(null, null));
     }
+
+    @Override
+    public Codec buildRubyCodecWrapper(RubyObject rubyCodec) {
+        return null;
+    }
 }
diff --git a/qa/integration/fixtures/mixed_codec_spec.yml b/qa/integration/fixtures/mixed_codec_spec.yml
new file mode 100644
index 00000000000..3d105d782a7
--- /dev/null
+++ b/qa/integration/fixtures/mixed_codec_spec.yml
@@ -0,0 +1,43 @@
+
+---
+services:
+  - logstash
+
+config:
+  input_decode: |-
+    input {
+      java_stdin {
+          codec => json
+      }
+    }
+    output {
+      file {
+        path => "${PATH_TO_OUT}"
+      }
+    }
+
+  input_decode_configured: |-
+    input {
+      java_stdin {
+          codec => plain {
+            charset => "ASCII-8BIT"
+          }
+      }
+    }
+    output {
+      file {
+        path => "${PATH_TO_OUT}"
+      }
+    }    
+
+  output_encode: |-
+    input {
+      generator {
+        count => 4
+      }
+    }
+    output {
+      java_stdout {
+        codec => json
+      }
+    }
\ No newline at end of file
diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index 21c98f99e8b..cc4fa04d449 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -112,15 +112,16 @@ def start_with_config_string(config)
 
   # Can start LS in stdin and can send messages to stdin
   # Useful to test metrics and such
-  def start_with_stdin
-    puts "Starting Logstash #{@logstash_bin} -e #{STDIN_CONFIG}"
+  def start_with_stdin(pipeline_config = STDIN_CONFIG)
+    puts "Starting Logstash #{@logstash_bin} -e #{pipeline_config}"
     Bundler.with_unbundled_env do
       out = Tempfile.new("duplex")
       out.sync = true
-      @process = build_child_process("-e", STDIN_CONFIG)
+      @process = build_child_process("-e", pipeline_config)
       # pipe STDOUT and STDERR to a file
       @process.io.stdout = @process.io.stderr = out
       @process.duplex = true
+      @env_variables.map { |k, v|  @process.environment[k] = v} unless @env_variables.nil?
       java_home = java.lang.System.getProperty('java.home')
       @process.environment['LS_JAVA_HOME'] = java_home
       @process.start
@@ -138,7 +139,12 @@ def write_to_stdin(input)
   # Spawn LS as a child process
   def spawn_logstash(*args)
     Bundler.with_unbundled_env do
+      out = Tempfile.new("duplex")
+      out.sync = true
       @process = build_child_process(*args)
+      # pipe STDOUT and STDERR to a file
+      @process.io.stdout = @process.io.stderr = out
+      @process.duplex = true # enable stdin to be written
       @env_variables.map { |k, v|  @process.environment[k] = v} unless @env_variables.nil?
       java_home = java.lang.System.getProperty('java.home')
       @process.environment['LS_JAVA_HOME'] = java_home
@@ -182,6 +188,12 @@ def is_port_open?
     end
   end
 
+  # check REST API is responsive
+  def rest_active?
+    result = monitoring_api.node_info
+    started = !result.nil?
+  end
+
   def monitoring_api
     raise "Logstash is not up, but you asked for monitoring API" unless alive?
     @monitoring_api
@@ -201,6 +213,20 @@ def wait_for_logstash
     raise "Logstash REST API did not come up after #{RETRY_ATTEMPTS}s."
   end
 
+  # wait until LS respond to REST HTTP API request
+  def wait_for_rest_api
+    tries = RETRY_ATTEMPTS
+    while tries > 0
+      if rest_active?
+        return
+      else
+        sleep 1
+      end
+      tries -= 1
+    end
+    raise "Logstash REST API did not come up after #{RETRY_ATTEMPTS}s."
+  end
+
   # this method only overwrites existing config with new config
   # it does not assume that LS pipeline is fully reloaded after a
   # config change. It is up to the caller to validate that.
diff --git a/qa/integration/specs/mixed_codec_spec.rb b/qa/integration/specs/mixed_codec_spec.rb
new file mode 100644
index 00000000000..07e3732166b
--- /dev/null
+++ b/qa/integration/specs/mixed_codec_spec.rb
@@ -0,0 +1,120 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require "stud/temporary"
+require "stud/try"
+require "rspec/wait"
+require "yaml"
+require "fileutils"
+require "logstash/devutils/rspec/spec_helper"
+
+describe "Ruby codec when used in" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+
+  before(:each) {
+    # backup the application settings file -- logstash.yml
+    FileUtils.cp(logstash_service.application_settings_file, "#{logstash_service.application_settings_file}.original")
+    IO.write(logstash_service.application_settings_file, settings.to_yaml)
+  }
+
+  after(:each) {
+    logstash_service.teardown
+    # restore the application settings file -- logstash.yml
+    FileUtils.mv("#{logstash_service.application_settings_file}.original", logstash_service.application_settings_file)
+  }
+
+  let(:temp_dir) { Stud::Temporary.directory("logstash-pipelinelog-test") }
+  let(:logstash_service) { @fixture.get_service("logstash") }
+  let(:out_capture) { Tempfile.new("file_out") }
+  let(:settings) do
+    {"path.logs" => temp_dir }
+  end
+
+  context "input Java plugin" do
+    let(:config) { @fixture.config("input_decode") }
+
+    it "should encode correctly to file and don't log any ERROR" do
+      logstash_service.env_variables = {'PATH_TO_OUT' => out_capture.path}
+      logstash_service.start_with_stdin(config)
+
+      # wait for Logstash to fully start
+      logstash_service.wait_for_rest_api
+
+      logstash_service.write_to_stdin('{"project": "Teleport"}')
+      sleep(2)
+
+      logstash_service.teardown
+
+      plainlog_file = "#{temp_dir}/logstash-plain.log"
+      expect(File.exists?(plainlog_file)).to be true
+      logs = IO.read(plainlog_file)
+      expect(logs).to_not include("ERROR")
+
+      out_capture.rewind
+      expect(out_capture.read).to include("\"project\":\"Teleport\"")
+    end
+  end
+
+  context "input Java plugin with configured codec" do
+    let(:config) { @fixture.config("input_decode_configured") }
+
+    it "should encode correctly to file and don't log any ERROR" do
+      logstash_service.env_variables = {'PATH_TO_OUT' => out_capture.path}
+      logstash_service.spawn_logstash("-w", "1" , "-e", config)
+      logstash_service.wait_for_logstash
+      logstash_service.wait_for_rest_api
+
+      logstash_service.write_to_stdin('Teleport ray')
+      sleep(2)
+
+      logstash_service.teardown
+
+      plainlog_file = "#{temp_dir}/logstash-plain.log"
+      expect(File.exists?(plainlog_file)).to be true
+      logs = IO.read(plainlog_file)
+      expect(logs).to_not include("ERROR")
+
+      out_capture.rewind
+      expect(out_capture.read).to include("Teleport ray")
+    end
+  end
+
+  context "output Java plugin" do
+    let(:config) { @fixture.config("output_encode") }
+
+    it "should encode correctly without any ERROR log" do
+      logstash_service.spawn_logstash("-w", "1" , "-e", config)
+      logstash_service.wait_for_logstash
+      logstash_service.wait_for_rest_api
+
+      logstash_service.teardown
+
+      plainlog_file = "#{temp_dir}/logstash-plain.log"
+      expect(File.exists?(plainlog_file)).to be true
+      logs = IO.read(plainlog_file)
+      expect(logs).to_not include("ERROR")
+    end
+  end
+end
\ No newline at end of file
