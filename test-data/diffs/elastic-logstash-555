diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index 88f911dabb7..abdcd658297 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -76,12 +76,10 @@ def cancelled?
   # Create a deep-ish copy of this event.
   public
   def clone
-    copy = {}
-    @data.each do |k,v|
-      # TODO(sissel): Recurse if this is a hash/array?
-      copy[k] = v.clone
-    end
-    return self.class.new(copy)
+    # Avoid shallow copies of hash and array
+    # See this url for further explanations
+    # http://boonedocks.net/mike/archives/188-Rubys-shallow-copies-of-hashes.html
+    return self.class.new(Marshal.load(Marshal.dump(@data)))
   end # def clone
 
   if RUBY_ENGINE == "jruby"
diff --git a/lib/logstash/filters/clone.rb b/lib/logstash/filters/clone.rb
index 373cf005894..c6670ae554b 100644
--- a/lib/logstash/filters/clone.rb
+++ b/lib/logstash/filters/clone.rb
@@ -2,8 +2,13 @@
 require "logstash/namespace"
 
 # The clone filter is for duplicating events.
+#
 # A clone will be made for each type in the clone list.
 # The original event is left unchanged.
+#
+# Newly created event(s) will be submitted to the complete filter chain
+# and might also be eligible to the clone filter.
+# Beware of infinite loop!
 class LogStash::Filters::Clone < LogStash::Filters::Base
 
   config_name "clone"
diff --git a/lib/logstash/filters/split.rb b/lib/logstash/filters/split.rb
index 2f2bb0ed648..f80d431651c 100644
--- a/lib/logstash/filters/split.rb
+++ b/lib/logstash/filters/split.rb
@@ -9,6 +9,10 @@
 #
 # The end result of each split is a complete copy of the event 
 # with only the current split section of the given field changed.
+#
+# Newly created event(s) will be submitted to the complete filter chain
+# and might also be eligible to the split filter.
+# Beware of infinite loop!
 class LogStash::Filters::Split < LogStash::Filters::Base
 
   config_name "split"
diff --git a/spec/filters/clone.rb b/spec/filters/clone.rb
index d502534362f..cc505dc7679 100644
--- a/spec/filters/clone.rb
+++ b/spec/filters/clone.rb
@@ -19,7 +19,7 @@
       insist { subject }.is_a? Array
       insist { subject.length } == 4
       subject.each_with_index do |s,i|
-        if i == 0 # last one should be 'original'
+        if i == 0 # first one should be 'original'
           insist { s["type"] } == "original"
         else
           insist { s["type"]} == "clone"
@@ -61,7 +61,73 @@
       reject { subject[2].tags }.include? "TESTLOG"
       insist { subject[2].tags }.include? "RABBIT"
       insist { subject[2].tags }.include? "NO_ES"
+    end
+  end
+
+  describe "make deep copies of nested fields" do
+    type "original"
+    config <<-CONFIG
+      filter {
+        clone {
+          type => "original"
+          clones => ["clone"]
+        }
+      }
+    CONFIG
+
+    sample("message" => "hello world", "type" => "original", "hash" => { "nested_hash" => {"value" => "expected"}}) do
+      insist { subject }.is_a? Array
+      insist { subject.length } == 2
+      subject.each_with_index do |s,i|
+        if i == 0 # first one should be 'original'
+          insist { s["type"] } == "original"
+          insist { s["hash"]["nested_hash"]["value"] } == "expected"
+          # Manually mutate the original nested value 
+          #(could not successfully use a filter on nested field)
+          s["hash"]["nested_hash"]["value"] = "mutated"
+          insist { s["hash"]["nested_hash"]["value"] } == "mutated"
+        else
+          insist { s["type"]} == "clone"
+          # Cloned event must not be affected by original event changes
+          insist { s["hash"]["nested_hash"]["value"] } == "expected"
+        end
+        insist { s["message"] } == "hello world"
+      end
+    end
+  end
 
+  describe "cloned event should not (?(O_o)?) pass by the complete filter chain" do
+    type "original"
+    config <<-CONFIG
+      filter {
+        noop {
+          add_tag => ["before"]
+        }
+        clone {
+          type => "original"
+          clones => ["clone", "clone", "clone"]
+        }
+        noop {
+          add_tag => ["after"]
+        }
+      }
+    CONFIG
+
+    sample("message" => "hello world", "type" => "original") do
+      insist { subject }.is_a? Array
+      insist { subject.length } == 4
+      subject.each_with_index do |s,i|
+        if i == 0 # first one should be 'original'
+          insist { s["type"] } == "original"
+          insist { s["tags"] }.include?("before")
+          insist { s["tags"] }.include?("after")
+        else
+          insist { s["type"]} == "clone"
+          insist { s["tags"] }.include?("after")
+          reject { s["tags"] }.include?("before")
+        end
+        insist { s["message"] } == "hello world"
+      end
     end
   end
 end
