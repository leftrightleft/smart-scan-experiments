diff --git a/lib/logstash/outputs/elasticsearch_http.rb b/lib/logstash/outputs/elasticsearch_http.rb
index ac25cc2116e..e4451a5a202 100644
--- a/lib/logstash/outputs/elasticsearch_http.rb
+++ b/lib/logstash/outputs/elasticsearch_http.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/namespace"
 require "logstash/outputs/base"
+require "logstash/retryable"
 require "stud/buffer"
 
 # This output lets you store logs in Elasticsearch.
@@ -12,6 +13,7 @@
 # You can learn more about Elasticsearch at <http://www.elasticsearch.org>
 class LogStash::Outputs::ElasticSearchHTTP < LogStash::Outputs::Base
   include Stud::Buffer
+  include Retryable
 
   config_name "elasticsearch_http"
   milestone 2
@@ -219,16 +221,22 @@ def flush(events, teardown=false)
 
       [ header.to_json, newline, event.to_json, newline ]
     end.flatten
-    post(body.join(""))
+
+    bulk_body = body.join("")
+
+    # retry indefinitely, sleep with exponential backoff starting at 0.1s maxing at 1s
+    retryable(:tries => 0, :base_sleep => 0.1, :max_sleep => 1) do
+      post(bulk_body)
+    end
   end # def receive_bulk
 
   def post(body)
     begin
       response = @agent.post!(@bulk_url, :body => body)
-    rescue EOFError
+    rescue EOFError => e
       @logger.warn("EOF while writing request or reading response header from elasticsearch",
                    :host => @host, :port => @port)
-      return # abort this flush
+      raise e
     end
 
     # Consume the body for error checking
@@ -236,17 +244,17 @@ def post(body)
     body = ""
     begin
       response.read_body { |chunk| body += chunk }
-    rescue EOFError
+    rescue EOFError => e
       @logger.warn("EOF while reading response body from elasticsearch",
                    :host => @host, :port => @port)
-      return # abort this flush
+      raise e
     end
 
     if response.status != 200
       @logger.error("Error writing (bulk) to elasticsearch",
                     :response => response, :response_body => body,
                     :request_body => @queue.join("\n"))
-      return
+      raise("HTTP error status=#{response.status}")
     end
   end # def post
 
diff --git a/lib/logstash/retryable.rb b/lib/logstash/retryable.rb
new file mode 100644
index 00000000000..18c351a49f6
--- /dev/null
+++ b/lib/logstash/retryable.rb
@@ -0,0 +1,44 @@
+module LogStash
+  module Retryable
+    # execute retryable code block
+    # @param [Hash] options retryable options
+    # @option options [Fixnum] :tries retries to perform, default 1, set to 0 for infite retries. 1 means that upon exception the block will be retied once
+    # @option options [Fixnum] :base_sleep seconds to sleep on first retry, default 1
+    # @option options [Fixnum] :max_sleep max seconds to sleep upon exponential backoff, default 1
+    # @option options [Exception] :rescue exception class list to retry on, defaults is Exception, which retries on any Exception.
+    # @option options [Proc] :on_retry call the given Proc/lambda before each retry with the raised exception as parameter
+    #
+    # @author Colin Surprenant
+    # @since 1.0
+    def retryable(options = {}, &block)
+      options = {
+        :tries => 1,
+        :rescue => Exception,
+        :on_retry => nil,
+        :base_sleep => 1,
+        :max_sleep => 1,
+      }.merge(options)
+
+      rescue_classes = Array(options[:rescue])
+      max_sleep_retry = Math.log2(options[:max_sleep] / options[:base_sleep])
+      retry_count = 0
+
+      begin
+        return yield(retry_count)
+      rescue *rescue_classes => e
+        raise e if options[:tries] > 0 && retry_count >= options[:tries]
+
+        options[:on_retry].call(retry_count + 1, e) if options[:on_retry]
+
+        # don'to calculate and possibly overflow exponent on too big a retry count
+        seconds = retry_count < max_sleep_retry ? options[:base_sleep] * (2 ** retry_count) : options[:max_sleep]
+        sleep(seconds)
+
+        retry_count += 1
+        retry
+      end
+
+    end
+
+  end
+end
\ No newline at end of file
diff --git a/spec/retrayable_spec.rb b/spec/retrayable_spec.rb
new file mode 100644
index 00000000000..07b7730458c
--- /dev/null
+++ b/spec/retrayable_spec.rb
@@ -0,0 +1,145 @@
+require "logstash/retryable"
+require "insist"
+
+describe LogStash::Retryable do
+  class C
+    include LogStash::Retryable
+  end
+
+  class E < StandardError; end;
+  class F < StandardError; end;
+
+  subject do
+    C.new.tap do |c|
+      c.stub(:sleep)
+    end
+  end
+
+  context "with default fixed 1 second retry sleep" do
+
+    it "should execute once" do
+      subject.should_receive(:sleep).never
+      expect(subject.retryable(:rescue => nil){|i| expect(i).to eq(0); "foo"}).to eq("foo")
+    end
+
+    it "should not retry on non rescued exceptions" do
+      i = 0
+      subject.should_receive(:sleep).never
+      expect{subject.retryable(:rescue => E){ i += 1; raise F}}.to raise_error(F)
+      expect(i).to eq(1)
+    end
+
+    it "should execute once and retry once by default" do
+      i = 0
+      subject.should_receive(:sleep).once.with(1)
+      expect{subject.retryable{i += 1; raise E}}.to raise_error(E)
+      expect(i).to eq(2)
+    end
+
+    it "should retry on rescued exceptions" do
+      i = 0
+      subject.should_receive(:sleep).once.with(1)
+      expect{subject.retryable(:rescue => E){ i += 1; raise E}}.to raise_error(E)
+      expect(i).to eq(2)
+    end
+
+    it "should retry indefinitely" do
+      i = 0
+      subject.should_receive(:sleep).exactly(50).times.with(1)
+      expect{subject.retryable(:tries => 0, :rescue => E){ i += 1; raise i <= 50 ? E : F}}.to raise_error(F)
+    end
+
+    it "should execute once and retry once by default and execute on_retry callback" do
+      i = 0
+      callback_values = []
+
+      callback = lambda do |retry_count, e|
+        callback_values << [retry_count, e]
+      end
+
+      subject.should_receive(:sleep).once.with(1)
+
+      expect do
+        subject.retryable(:on_retry => callback){i += 1; raise E}
+      end.to raise_error
+
+      expect(i).to eq(2)
+
+      expect(callback_values.size).to eq(1)
+      expect(callback_values[0][0]).to eq(1)
+      expect(callback_values[0][1]).to be_a(E)
+    end
+
+    it "should execute once and retry n times" do
+      i = 0
+      n = 3
+      subject.should_receive(:sleep).exactly(n).times.with(1)
+      expect{subject.retryable(:tries => n){i += 1; raise E}}.to raise_error(E)
+      expect(i).to eq(n + 1)
+    end
+
+    it "should execute once and retry n times and execute on_retry callback" do
+      i = 0
+      n = 3
+      callback_values = []
+
+      callback = lambda do |retry_count, e|
+        callback_values << [retry_count, e]
+      end
+
+      subject.should_receive(:sleep).exactly(n).times.with(1)
+
+      expect do
+        subject.retryable(:tries => n, :on_retry => callback){i += 1; raise E}
+      end.to raise_error
+
+      expect(i).to eq(n + 1)
+
+      expect(callback_values.size).to eq(n)
+      n.times.each do |j|
+        expect(callback_values[j].first).to eq(j + 1)
+        expect(callback_values[j].last).to be_a(E)
+      end
+    end
+  end
+
+  context "with exponential backoff" do
+
+    it "should execute once and retry once with base sleep by default" do
+      subject.should_receive(:sleep).once.with(2)
+      expect do
+        subject.retryable(:base_sleep => 2, :max_sleep => 10){raise E}
+      end.to raise_error(E)
+    end
+
+    it "should execute once and retry n times with exponential backoff sleep" do
+      n = 3
+      s = 0.5
+
+      n.times.each do |i|
+        subject.should_receive(:sleep).once.with(s * (2 ** i)).ordered
+      end
+      expect do
+        subject.retryable(:tries => n, :base_sleep => s, :max_sleep => 100){raise E}
+      end.to raise_error(E)
+    end
+
+    it "should execute once and retry n times with exponential backoff sleep capping at max_sleep" do
+      n = 20
+      base_sleep = 0.1
+      max_sleep = 1
+
+      subject.should_receive(:sleep).once.with(0.1).ordered
+      subject.should_receive(:sleep).once.with(0.2).ordered
+      subject.should_receive(:sleep).once.with(0.4).ordered
+      subject.should_receive(:sleep).once.with(0.8).ordered
+      (n - 4).times.each do |i|
+        subject.should_receive(:sleep).once.with(1).ordered
+      end
+      expect do
+        subject.retryable(:tries => n, :base_sleep => base_sleep, :max_sleep => max_sleep){raise E}
+      end.to raise_error(E)
+    end
+  end
+
+end
