diff --git a/logstash-core/lib/logstash/compiler.rb b/logstash-core/lib/logstash/compiler.rb
index d22c33936b3..6cd68b280e0 100644
--- a/logstash-core/lib/logstash/compiler.rb
+++ b/logstash-core/lib/logstash/compiler.rb
@@ -6,14 +6,8 @@
 module LogStash; class Compiler
   include ::LogStash::Util::Loggable
 
-   def self.empty_or_space(str)
-     str.match(/\A\s*\Z/).nil? == false
-   end
-
   def self.compile_sources(sources_with_metadata, support_escapes)
-    graph_sections = sources_with_metadata.reject do |swm|
-       self.empty_or_space(swm.text)
-    end.map do |swm|
+    graph_sections = sources_with_metadata.map do |swm|
       self.compile_graph(swm, support_escapes)
     end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
index 6befae201af..0f2c92a204b 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
@@ -22,21 +22,9 @@ def plugin_section
   end
 
   module Config1
-    def _1
-      elements[0]
-    end
-
-    def plugin_section
+    def _
       elements[1]
     end
-
-    def _2
-      elements[2]
-    end
-
-    def _3
-      elements[4]
-    end
   end
 
   def _nt_config
@@ -51,46 +39,34 @@ def _nt_config
     end
 
     i0, s0 = index, []
-    r1 = _nt__
-    s0 << r1
-    if r1
-      r2 = _nt_plugin_section
-      s0 << r2
+    s1, i1 = [], index
+    loop do
+      i2, s2 = index, []
+      r3 = _nt__
+      s2 << r3
+      if r3
+        r4 = _nt_plugin_section
+        s2 << r4
+      end
+      if s2.last
+        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
+        r2.extend(Config0)
+      else
+        @index = i2
+        r2 = nil
+      end
       if r2
-        r3 = _nt__
-        s0 << r3
-        if r3
-          s4, i4 = [], index
-          loop do
-            i5, s5 = index, []
-            r6 = _nt__
-            s5 << r6
-            if r6
-              r7 = _nt_plugin_section
-              s5 << r7
-            end
-            if s5.last
-              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
-              r5.extend(Config0)
-            else
-              @index = i5
-              r5 = nil
-            end
-            if r5
-              s4 << r5
-            else
-              break
-            end
-          end
-          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
-          s0 << r4
-          if r4
-            r8 = _nt__
-            s0 << r8
-          end
-        end
+        s1 << r2
+      else
+        break
       end
     end
+    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
+    s0 << r1
+    if r1
+      r5 = _nt__
+      s0 << r5
+    end
     if s0.last
       r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Config,input, i0...index, s0)
       r0.extend(Config1)
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
index 9463528a341..50109cd02d8 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
@@ -3,7 +3,7 @@ require "logstash/compiler/lscl.rb"
 
 grammar LogStashCompilerLSCLGrammar
   rule config
-    _ plugin_section _ (_ plugin_section)* _ <LogStash::Compiler::LSCL::AST::Config>
+    (_ plugin_section)* _ <LogStash::Compiler::LSCL::AST::Config>
   end
 
   rule comment
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 160f1c5ed84..55732b414d8 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -33,10 +33,6 @@ def rand_meta
   end
 
   describe "compile with empty source" do
-    subject(:source_id) { "fake_sourcefile" }
-    let(:source_with_metadata) { org.logstash.common.SourceWithMetadata.new(source_protocol, source_id, 0, 0, source) }
-    subject(:compiled) { puts "PCOMP"; described_class.compile_pipeline(source_with_metadata, settings) }
-
     let(:sources_with_metadata) do
       [
         org.logstash.common.SourceWithMetadata.new("str", "in_plugin", 0, 0, "input { input_0 {} } "),
@@ -50,6 +46,20 @@ def rand_meta
     end
   end
 
+  describe "compile with fully commented source" do
+    let(:sources_with_metadata) do
+      [
+        org.logstash.common.SourceWithMetadata.new("str", "in_plugin", 0, 0, "input { input_0 {} } "),
+        org.logstash.common.SourceWithMetadata.new("str", "commented_filter", 0, 0, "#filter{...}\n"),
+        org.logstash.common.SourceWithMetadata.new("str", "out_plugin", 0, 0, "output { output_0 {} } "),
+      ]
+    end
+
+    it "should compile only non commented text parts" do
+      described_class.compile_sources(sources_with_metadata, false)
+    end
+  end
+
   describe "compiling to Pipeline" do
     subject(:source_id) { "fake_sourcefile" }
     let(:source_with_metadata) { org.logstash.common.SourceWithMetadata.new(source_protocol, source_id, 0, 0, source) }
