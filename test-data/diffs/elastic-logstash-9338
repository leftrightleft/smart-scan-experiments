diff --git a/LogstashAPI/build.gradle b/LogstashAPI/build.gradle
new file mode 100644
index 00000000000..413d737718d
--- /dev/null
+++ b/LogstashAPI/build.gradle
@@ -0,0 +1,15 @@
+group 'org.logstash'
+version '7.0.0-alpha1'
+
+apply plugin: 'java'
+
+sourceCompatibility = 1.8
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile group: 'org.pf4j', name: 'pf4j', version: "2.2.0"
+    testCompile group: 'junit', name: 'junit', version: '4.12'
+}
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/AgentObserver.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/AgentObserver.java
new file mode 100644
index 00000000000..fd954adc32e
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/AgentObserver.java
@@ -0,0 +1,8 @@
+package org.logstash.LogstashAPI;
+
+import org.pf4j.ExtensionPoint;
+
+public interface AgentObserver extends ExtensionPoint {
+    void onStart();
+    void onShutdown();
+}
diff --git a/LogstashAPI/src/main/java/org/logstash/LogstashAPI/PipelineObserver.java b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/PipelineObserver.java
new file mode 100644
index 00000000000..5f057a2aa89
--- /dev/null
+++ b/LogstashAPI/src/main/java/org/logstash/LogstashAPI/PipelineObserver.java
@@ -0,0 +1,8 @@
+package org.logstash.LogstashAPI;
+
+import org.pf4j.ExtensionPoint;
+
+public interface PipelineObserver extends ExtensionPoint {
+    void onStart(String id);
+    void onStop(String id);
+}
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 6b921972dd9..51d644dc8b9 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -121,6 +121,8 @@ dependencies {
     compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
     compile "org.jruby:jruby-complete:${jrubyVersion}"
     compile 'com.google.googlejavaformat:google-java-format:1.5'
+    compile project(':LogstashAPI')
+    compile group: 'org.pf4j', name: 'pf4j', version: '2.2.0'
     testCompile 'org.apache.logging.log4j:log4j-core:2.9.1:tests'
     testCompile 'junit:junit:4.12'
     testCompile 'net.javacrumbs.json-unit:json-unit:1.9.0'
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 840aec14050..15ac37c7c1a 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -34,6 +34,10 @@ class LogStash::Agent
   #   :auto_reload [Boolean] - enable reloading of pipelines
   #   :reload_interval [Integer] - reload pipelines every X seconds
   def initialize(settings = LogStash::SETTINGS, source_loader = nil)
+    @agent_hooks = org.logstash.AgentHooks.new
+
+    @agent_hooks.start()
+
     @logger = self.class.logger
     @settings = settings
     @auto_reload = setting("config.reload.automatic")
@@ -183,6 +187,7 @@ def uptime
   end
 
   def shutdown
+    @agent_hooks.shutdown()
     stop_collecting_metrics
     stop_webserver
     transition_to_stopped
diff --git a/logstash-core/src/main/java/org/logstash/AgentHooks.java b/logstash-core/src/main/java/org/logstash/AgentHooks.java
new file mode 100644
index 00000000000..0fb11811245
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/AgentHooks.java
@@ -0,0 +1,22 @@
+package org.logstash;
+
+import org.logstash.LogstashAPI.AgentObserver;
+import org.pf4j.DefaultPluginManager;
+import org.pf4j.PluginManager;
+
+import java.nio.file.Path;
+
+import static org.logstash.Logstash.PLUGIN_MANAGER;
+
+public class AgentHooks {
+    public void start() {
+        PLUGIN_MANAGER.loadPlugins();
+        PLUGIN_MANAGER.startPlugins();
+
+        PLUGIN_MANAGER.getExtensions(AgentObserver.class).forEach(AgentObserver::onStart);
+    }
+
+    public void shutdown() {
+        PLUGIN_MANAGER.getExtensions(AgentObserver.class).forEach(AgentObserver::onShutdown);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/Logstash.java b/logstash-core/src/main/java/org/logstash/Logstash.java
index 8996a342973..01538756eb7 100644
--- a/logstash-core/src/main/java/org/logstash/Logstash.java
+++ b/logstash-core/src/main/java/org/logstash/Logstash.java
@@ -5,6 +5,7 @@
 import java.io.PrintStream;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jruby.Ruby;
@@ -13,6 +14,8 @@
 import org.jruby.RubyNumeric;
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.builtin.IRubyObject;
+import org.pf4j.DefaultPluginManager;
+import org.pf4j.PluginManager;
 
 /**
  * Logstash Main Entrypoint.
@@ -20,6 +23,9 @@
 public final class Logstash implements Runnable, AutoCloseable {
 
     private static final Logger LOGGER = LogManager.getLogger(Logstash.class);
+    final static Path LOGSTASH_HOME = Paths.get(System.getenv("LS_HOME")).toAbsolutePath();
+    static final Path PLUGINS_PATH = Logstash.LOGSTASH_HOME.resolve("vendor").resolve("java-plugins");
+    static final PluginManager PLUGIN_MANAGER = new DefaultPluginManager(PLUGINS_PATH);
 
     /**
      * JRuby Runtime Environment.
diff --git a/settings.gradle b/settings.gradle
index aa7217dfb7b..508dc19137f 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -3,3 +3,5 @@ project(':logstash-core').projectDir = new File('./logstash-core')
 project(':logstash-core-benchmarks').projectDir = new File('./logstash-core/benchmarks')
 project(':ingest-converter').projectDir = new File('./tools/ingest-converter')
 project(':benchmark-cli').projectDir = new File('./tools/benchmark-cli')
+include ':LogstashAPI'
+project(':LogstashAPI').projectDir = new File('./LogstashAPI')
