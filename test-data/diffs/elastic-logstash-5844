diff --git a/docs/static/advanced-pipeline.asciidoc b/docs/static/advanced-pipeline.asciidoc
index e16898e19ad..7d3711b6b1d 100644
--- a/docs/static/advanced-pipeline.asciidoc
+++ b/docs/static/advanced-pipeline.asciidoc
@@ -1,5 +1,5 @@
 [[advanced-pipeline]]
-=== Setting Up an Advanced Logstash Pipeline
+=== Parsing Logs with Logstash
 
 A Logstash pipeline in most use cases has one or more input, filter, and output plugins. The scenarios in this section
 build Logstash configuration files to specify these plugins and discuss what each plugin is doing.
@@ -13,6 +13,10 @@ the data to a destination.
 
 image::static/images/basic_logstash_pipeline.png[]
 
+In this section, you create a Logstash pipeline that takes Apache web logs as input, parses those logs to create specific,
+named fields from the logs, and writes the parsed data to an Elasticsearch cluster. Rather than
+defining the pipeline configuration at the command line, you'll define the pipeline in a config file. 
+
 The following text represents the skeleton of a configuration pipeline:
 
 [source,shell]
@@ -30,34 +34,30 @@ output {
 }
 --------------------------------------------------------------------------------
 
-This skeleton is non-functional, because the input and output sections don’t have any valid options defined. The
-examples in this tutorial build configuration files to address specific use cases.
-
-Paste the skeleton into a file named `first-pipeline.conf` in your home Logstash directory.
-
-[[parsing-into-es]]
-==== Parsing Apache Logs into Elasticsearch
+This skeleton is non-functional, because the input and output sections don’t have any valid options defined. 
 
-This example creates a Logstash pipeline that takes Apache web logs as input, parses those logs to create specific,
-named fields from the logs, and writes the parsed data to an Elasticsearch cluster.
-
-You can download the sample data set used in this example
-https://download.elastic.co/demos/logstash/gettingstarted/logstash-tutorial.log.gz[here]. Unpack this file.
+To get started, copy and paste the skeleton configuration pipeline into a file named `first-pipeline.conf` in your home
+Logstash directory. Then go https://download.elastic.co/demos/logstash/gettingstarted/logstash-tutorial.log.gz[here] to
+download the sample data set used in this example. Unpack the file.
 
 [float]
 [[configuring-file-input]]
 ==== Configuring Logstash for File Input
 
-To start your Logstash pipeline, configure the Logstash instance to read from a file using the
+NOTE: This example uses the file input plugin for convenience. To tail files in the real world, you'll use
+Filebeat to ship log events to Logstash. You learn how to <<configuring-lsf,configure the Filebeat input plugin>> later
+when you build a more sophisticated pipeline.
+
+To begin your Logstash pipeline, configure the Logstash instance to read from a file by using the
 {logstash}plugins-inputs-file.html[file] input plugin.
 
-Edit the `first-pipeline.conf` file to add the following text:
+Edit the `first-pipeline.conf` file and replace the entire `input` section with the following text:
 
 [source,json]
 --------------------------------------------------------------------------------
 input {
     file {
-        path => "/path/to/logstash-tutorial.log"
+        path => "/path/to/file/*.log"
         start_position => beginning <1>
         ignore_older => 0 <2>
     }
@@ -67,9 +67,10 @@ input {
 <1> The default behavior of the file input plugin is to monitor a file for new information, in a manner similar to the
 UNIX `tail -f` command. To change this default behavior and process the entire file, we need to specify the position
 where Logstash starts processing the file.
-<2> The default behavior of the file input plugin is to ignore files whose last modification is greater than 86400s. To change this default behavior and process the tutorial file (which date can be much older than a day), we need to specify to not ignore old files.
+<2> Setting `ignore_older` to 0 disables file age checking so that the tutorial file is processed even though
+it's older than a day.
 
-Replace `/path/to/` with the actual path to the location of `logstash-tutorial.log` in your file system.
+Replace `/path/to/file` with the absolute path to the location of `logstash-tutorial.log` in your file system.
 
 [float]
 [[configuring-grok-filter]]
@@ -79,6 +80,8 @@ The {logstash}plugins-filters-grok.html[`grok`] filter plugin is one of several
 Logstash. For details on how to manage Logstash plugins, see the <<working-with-plugins,reference documentation>> for
 the plugin manager.
 
+The `grok` filter plugin enables you to parse the unstructured log data into something structured and queryable.
+
 Because the `grok` filter plugin looks for patterns in the incoming log data, configuration requires you to make
 decisions about how to identify the patterns that are of interest to your use case. A representative line from the web
 server log sample looks like this:
@@ -90,8 +93,7 @@ HTTP/1.1" 200 203023 "http://semicomplete.com/presentations/logstash-monitorama-
 Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36"
 --------------------------------------------------------------------------------
 
-The IP address at the beginning of the line is easy to identify, as is the timestamp in brackets. In this tutorial, use
-the `%{COMBINEDAPACHELOG}` grok pattern, which structures lines from the Apache log using the following schema:
+The IP address at the beginning of the line is easy to identify, as is the timestamp in brackets. To parse the data, you can use the `%{COMBINEDAPACHELOG}` grok pattern, which structures lines from the Apache log using the following schema:
 
 [horizontal]
 *Information*:: *Field Name*
@@ -107,7 +109,7 @@ Bytes served:: `bytes`
 Referrer URL:: `referrer`
 User agent:: `agent`
 
-Edit the `first-pipeline.conf` file to add the following text:
+Edit the `first-pipeline.conf` file and replace the entire `filter` section with the following text:
 
 [source,json]
 --------------------------------------------------------------------------------
@@ -117,15 +119,8 @@ filter {
     }
 }
 --------------------------------------------------------------------------------
-And change output to see a result :
-[source,json]
---------------------------------------------------------------------------------
-output {
-  stdout { codec => rubydebug }
-}
---------------------------------------------------------------------------------
 
-After processing, the sample line has the following JSON representation:
+After processing the log file with the grok pattern, the sample line will have the following JSON representation:
 
 [source,json]
 --------------------------------------------------------------------------------
@@ -144,25 +139,6 @@ After processing, the sample line has the following JSON representation:
 }
 --------------------------------------------------------------------------------
 
-[float]
-[[indexing-parsed-data-into-elasticsearch]]
-===== Indexing Parsed Data into Elasticsearch
-
-Now that the web logs are broken down into specific fields, the Logstash pipeline can index the data into an
-Elasticsearch cluster. Edit the `first-pipeline.conf` file to add the following text after the `input` section:
-
-[source,json]
---------------------------------------------------------------------------------
-output {
-    elasticsearch {
-    }
-}
---------------------------------------------------------------------------------
-
-With this configuration, Logstash uses http protocol to connect to Elasticsearch. The above example assumes Logstash
-and Elasticsearch to be running on the same instance. You can specify a remote Elasticsearch instance using `hosts`
-configuration like `hosts => "es-machine:9092"`.
-
 [float]
 [[configuring-geoip-plugin]]
 ===== Enhancing Your Data with the Geoip Filter Plugin
@@ -181,10 +157,43 @@ geoip {
 }
 --------------------------------------------------------------------------------
 
-The `geoip` plugin configuration requires data that is already defined as separate fields. Make sure that the `geoip`
-section is after the `grok` section of the configuration file.
+The `geoip` plugin configuration requires you to specify the name of the source field that contains the IP address to look up. In this example, the `clientip` field contains the IP address.
+
+Since filters are evaluated in sequence, make sure that the `geoip` section is after the `grok` section of 
+the configuration file and that both the `grok` and `geoip` sections are nested within the `filter` section 
+like this:
+
+[source,json]
+--------------------------------------------------------------------------------
+ filter {
+    grok {
+        match => { "message" => "%{COMBINEDAPACHELOG}"}
+    }
+    geoip {
+        source => "clientip"
+    }
+--------------------------------------------------------------------------------
+
+[float]
+[[indexing-parsed-data-into-elasticsearch]]
+==== Indexing Your Data into Elasticsearch
+
+Now that the web logs are broken down into specific fields, the Logstash pipeline can index the data into an
+Elasticsearch cluster. Edit the `first-pipeline.conf` file and replace the entire `output` section with the following
+text:
+
+[source,json]
+--------------------------------------------------------------------------------
+output {
+    elasticsearch {
+        hosts => [ "localhost:9200" ]
+    }
+}
+--------------------------------------------------------------------------------
 
-Specify the name of the field that contains the IP address to look up. In this tutorial, the field name is `clientip`.
+With this configuration, Logstash uses http protocol to connect to Elasticsearch. The above example assumes that
+Logstash and Elasticsearch are running on the same instance. You can specify a remote Elasticsearch instance by using
+the `hosts` configuration to specify something like `hosts => [ "es-machine:9092" ]`.
 
 [float]
 [[testing-initial-pipeline]]
@@ -197,8 +206,9 @@ like this:
 --------------------------------------------------------------------------------
 input {
     file {
-        path => "/Users/palecur/logstash-1.5.2/logstash-tutorial-dataset"
+        path => "/Users/myusername/tutorialdata/*.log"
         start_position => beginning
+        ignore_older => 0 
     }
 }
 filter {
@@ -210,8 +220,9 @@ filter {
     }
 }
 output {
-    elasticsearch {}
-    stdout {}
+    elasticsearch {
+        hosts => [ "localhost:9200" ]
+    }
 }
 --------------------------------------------------------------------------------
 
@@ -234,171 +245,200 @@ Try a test query to Elasticsearch based on the fields created by the `grok` filt
 
 [source,shell]
 --------------------------------------------------------------------------------
-curl -XGET 'localhost:9200/logstash-$DATE/_search?q=response=200'
+curl -XGET 'localhost:9200/logstash-$DATE/_search?pretty&q=response=200'
 --------------------------------------------------------------------------------
 
 Replace $DATE with the current date, in YYYY.MM.DD format.
 
-Since our sample has just one 200 HTTP response, we get one hit back:
+We get multiple hits back. For example:
 
 [source,json]
 --------------------------------------------------------------------------------
-{"took":2,
-"timed_out":false,
-"_shards":{"total":5,
-  "successful":5,
-  "failed":0},
-"hits":{"total":1,
-  "max_score":1.5351382,
-  "hits":[{"_index":"logstash-2015.07.30",
-    "_type":"logs",
-    "_id":"AU7gqOky1um3U6ZomFaF",
-    "_score":1.5351382,
-    "_source":{"message":"83.149.9.216 - - [04/Jan/2015:05:13:45 +0000] \"GET /presentations/logstash-monitorama-2013/images/frontend-response-codes.png HTTP/1.1\" 200 52878 \"http://semicomplete.com/presentations/logstash-monitorama-2013/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\"",
-      "@version":"1",
-      "@timestamp":"2015-07-30T20:30:41.265Z",
-      "host":"localhost",
-      "path":"/path/to/logstash-tutorial-dataset",
-      "clientip":"83.149.9.216",
-      "ident":"-",
-      "auth":"-",
-      "timestamp":"04/Jan/2015:05:13:45 +0000",
-      "verb":"GET",
-      "request":"/presentations/logstash-monitorama-2013/images/frontend-response-codes.png",
-      "httpversion":"1.1",
-      "response":"200",
-      "bytes":"52878",
-      "referrer":"\"http://semicomplete.com/presentations/logstash-monitorama-2013/\"",
-      "agent":"\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\""
+{
+  "took" : 4,
+  "timed_out" : false,
+  "_shards" : {
+    "total" : 5,
+    "successful" : 5,
+    "failed" : 0
+  },
+  "hits" : {
+    "total" : 98,
+    "max_score" : 5.0091305,
+    "hits" : [ {
+      "_index" : "logstash-2016.08.30",
+      "_type" : "logs",
+      "_id" : "AVbd1HyuICXLyJ--dz7g",
+      "_score" : 5.0091305,
+      "_source" : {
+        "message" : "83.149.9.216 - - [04/Jan/2015:05:13:45 +0000] \"GET /presentations/logstash-monitorama-2013/images/frontend-response-codes.png HTTP/1.1\" 200 52878 \"http://semicomplete.com/presentations/logstash-monitorama-2013/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\"",
+        "@version" : "1",
+        "@timestamp" : "2016-08-30T23:41:45.044Z",
+        "path" : "/Users/myusername/tutorialdata/logstash-tutorial.log",
+        "host" : "My-Macbook.local",
+        "clientip" : "83.149.9.216",
+        "ident" : "-",
+        "auth" : "-",
+        "timestamp" : "04/Jan/2015:05:13:45 +0000",
+        "verb" : "GET",
+        "request" : "/presentations/logstash-monitorama-2013/images/frontend-response-codes.png",
+        "httpversion" : "1.1",
+        "response" : "200",
+        "bytes" : "52878",
+        "referrer" : "\"http://semicomplete.com/presentations/logstash-monitorama-2013/\"",
+        "agent" : "\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\"",
+        "geoip" : {
+          "ip" : "83.149.9.216",
+          "country_code2" : "RU",
+          "country_code3" : "RUS",
+          "country_name" : "Russian Federation",
+          "continent_code" : "EU",
+          "region_name" : "48",
+          "city_name" : "Moscow",
+          "latitude" : 55.75219999999999,
+          "longitude" : 37.6156,
+          "timezone" : "Europe/Moscow",
+          "real_region_name" : "Moscow City",
+          "location" : [ 37.6156, 55.75219999999999 ]
+        }
       }
-    }]
-  }
-}
+    },
+    ...
 --------------------------------------------------------------------------------
 
 Try another search for the geographic information derived from the IP address:
 
 [source,shell]
 --------------------------------------------------------------------------------
-curl -XGET 'localhost:9200/logstash-$DATE/_search?q=geoip.city_name=Buffalo'
+curl -XGET 'localhost:9200/logstash-$DATE/_search?pretty&q=geoip.city_name=Buffalo'
 --------------------------------------------------------------------------------
 
 Replace $DATE with the current date, in YYYY.MM.DD format.
 
-Only one of the log entries comes from Buffalo, so the query produces a single response:
+One of the log entries comes from Buffalo, so the query produces the following response:
 
 [source,json]
 --------------------------------------------------------------------------------
-{"took":3,
-"timed_out":false,
-"_shards":{
-  "total":5,
-  "successful":5,
-  "failed":0},
-"hits":{"total":1,
-  "max_score":1.03399,
-  "hits":[{"_index":"logstash-2015.07.31",
-    "_type":"logs",
-    "_id":"AU7mK3CVSiMeBsJ0b_EP",
-    "_score":1.03399,
-    "_source":{
-      "message":"108.174.55.234 - - [04/Jan/2015:05:27:45 +0000] \"GET /?flav=rss20 HTTP/1.1\" 200 29941 \"-\" \"-\"",
-      "@version":"1",
-      "@timestamp":"2015-07-31T22:11:22.347Z",
-      "host":"localhost",
-      "path":"/path/to/logstash-tutorial-dataset",
-      "clientip":"108.174.55.234",
-      "ident":"-",
-      "auth":"-",
-      "timestamp":"04/Jan/2015:05:27:45 +0000",
-      "verb":"GET",
-      "request":"/?flav=rss20",
-      "httpversion":"1.1",
-      "response":"200",
-      "bytes":"29941",
-      "referrer":"\"-\"",
-      "agent":"\"-\"",
-      "geoip":{
-        "ip":"108.174.55.234",
-        "country_code2":"US",
-        "country_code3":"USA",
-        "country_name":"United States",
-        "continent_code":"NA",
-        "region_name":"NY",
-        "city_name":"Buffalo",
-        "postal_code":"14221",
-        "latitude":42.9864,
-        "longitude":-78.7279,
-        "dma_code":514,
-        "area_code":716,
-        "timezone":"America/New_York",
-        "real_region_name":"New York",
-        "location":[-78.7279,42.9864]
+{
+  "took" : 6,
+  "timed_out" : false,
+  "_shards" : {
+    "total" : 5,
+    "successful" : 5,
+    "failed" : 0
+  },
+  "hits" : {
+    "total" : 1,
+    "max_score" : 1.0149983,
+    "hits" : [ {
+      "_index" : "logstash-2016.08.30",
+      "_type" : "logs",
+      "_id" : "AVbd1HyuICXLyJ--dz8u",
+      "_score" : 1.0149983,
+      "_source" : {
+        "message" : "108.174.55.234 - - [04/Jan/2015:05:27:45 +0000] \"GET /?flav=rss20 HTTP/1.1\" 200 29941 \"-\" \"-\"",
+        "@version" : "1",
+        "@timestamp" : "2016-08-30T23:41:45.066Z",
+        "path" : "/Users/myusername/tutorialdata/logstash-tutorial.log",
+        "host" : "My-Macbook",
+        "clientip" : "108.174.55.234",
+        "ident" : "-",
+        "auth" : "-",
+        "timestamp" : "04/Jan/2015:05:27:45 +0000",
+        "verb" : "GET",
+        "request" : "/?flav=rss20",
+        "httpversion" : "1.1",
+        "response" : "200",
+        "bytes" : "29941",
+        "referrer" : "\"-\"",
+        "agent" : "\"-\"",
+        "geoip" : {
+          "ip" : "108.174.55.234",
+          "country_code2" : "US",
+          "country_code3" : "USA",
+          "country_name" : "United States",
+          "continent_code" : "NA",
+          "region_name" : "NY",
+          "city_name" : "Buffalo",
+          "postal_code" : "14221",
+          "latitude" : 42.9864,
+          "longitude" : -78.7279,
+          "dma_code" : 514,
+          "area_code" : 716,
+          "timezone" : "America/New_York",
+          "real_region_name" : "New York",
+          "location" : [ -78.7279, 42.9864 ]
+        }
       }
-    }
-  }]
- }
+    } ]
+  }
 }
 --------------------------------------------------------------------------------
 
 [[multiple-input-output-plugins]]
-==== Multiple Input and Output Plugins
+==== Stitching Together Multiple Input and Output Plugins
 
 The information you need to manage often comes from several disparate sources, and use cases can require multiple
 destinations for your data. Your Logstash pipeline can use multiple input and output plugins to handle these
 requirements.
 
-This example creates a Logstash pipeline that takes input from a Twitter feed and the Filebeat client, then
+In this section, you create a Logstash pipeline that takes input from a Twitter feed and the Filebeat client, then
 sends the information to an Elasticsearch cluster as well as writing the information directly to a file.
 
 [float]
 [[twitter-configuration]]
 ==== Reading from a Twitter feed
 
-To add a Twitter feed, you need several pieces of information:
+To add a Twitter feed, you use the {logstash}plugins-inputs-twitter.html[`twitter`] input plugin. To
+configure the plugin, you need several pieces of information:
 
-* A _consumer_ key, which uniquely identifies your Twitter app, which is Logstash in this case.
+* A _consumer_ key, which uniquely identifies your Twitter app.
 * A _consumer secret_, which serves as the password for your Twitter app.
 * One or more _keywords_ to search in the incoming feed.
 * An _oauth token_, which identifies the Twitter account using this app.
 * An _oauth token secret_, which serves as the password of the Twitter account.
 
-Visit https://dev.twitter.com/apps to set up a Twitter account and generate your consumer key and secret, as well as
-your OAuth token and secret.
+Visit https://dev.twitter.com/apps[https://dev.twitter.com/apps] to set up a Twitter account and generate your consumer
+key and secret, as well as your access token and secret. See the docs for the {logstash}plugins-inputs-twitter.html[`twitter`] input plugin if you're not sure how to generate these keys. 
+
+Like you did earlier when you worked on <<advanced-pipeline>>, create a config file (called `second-pipeline.conf`) that
+contains the skeleton of a configuration pipeline. If you want, you can reuse the file you created earlier, but make
+sure you pass in the correct config file name when you run Logstash. 
 
-Use this information to add the following lines to the `input` section of the `first-pipeline.conf` file:
+Add the following lines to the `input` section of the `second-pipeline.conf` file, substituting your values for the 
+placeholder values shown here:
 
 [source,json]
 --------------------------------------------------------------------------------
-twitter {
-    consumer_key =>
-    consumer_secret =>
-    keywords =>
-    oauth_token =>
-    oauth_token_secret =>
-}
+    twitter {
+        consumer_key => "enter_your_consumer_key_here"
+        consumer_secret => "enter_your_secret_here"
+        keywords => ["cloud"]
+        oauth_token => "enter_your_access_token_here"
+        oauth_token_secret => "enter_your_access_token_secret_here"
+    }
 --------------------------------------------------------------------------------
 
 [float]
 [[configuring-lsf]]
 ==== The Filebeat Client
 
-The https://github.com/elastic/beats/tree/master/filebeat[filebeat] client is a lightweight, resource-friendly tool that
-collects logs from files on the server and forwards these logs to your Logstash instance for processing. The
-Filebeat client uses the secure Beats protocol to communicate with your Logstash instance. The
-lumberjack protocol is designed for reliability and low latency. Filebeat uses the computing resources of
-the machine hosting the source data, and the {logstash}plugins-inputs-beats.html[Beats input] plugin minimizes the
+The https://github.com/elastic/beats/tree/master/filebeat[Filebeat] client is a lightweight, resource-friendly tool that
+collects logs from files on the server and forwards these logs to your Logstash instance for processing. Filebeat is 
+designed for reliability and low latency. Filebeat uses the computing resources of the machine hosting the source data,
+and the {logstash}plugins-inputs-beats.html[`Beats input`] plugin minimizes the
 resource demands on the Logstash instance.
 
+
 NOTE: In a typical use case, Filebeat runs on a separate machine from the machine running your
 Logstash instance. For the purposes of this tutorial, Logstash and Filebeat are running on the
 same machine.
 
-Default Logstash configuration includes the {logstash}plugins-inputs-beats.html[Beats input plugin], which is
-designed to be resource-friendly. To install Filebeat on your data source machine, download the
-appropriate package from the Filebeat https://www.elastic.co/downloads/beats/filebeat[product page].
+The default Logstash installation includes the {logstash}plugins-inputs-beats.html[`Beats input`] plugin. To install
+Filebeat on your data source machine, download the appropriate package from the Filebeat https://www.elastic.co/downloads/beats/filebeat[product page].
 
-Create a configuration file for Filebeat similar to the following example:
+After installing Filebeat, you need to configure it. Open the `filebeat.yml` file located in your Filebeat installation
+directory, and replace the contents with the following lines. Make sure `paths` points to your syslog: 
 
 [source,shell]
 --------------------------------------------------------------------------------
@@ -406,40 +446,32 @@ filebeat:
   prospectors:
     -
       paths:
-        - "/path/to/sample-log" <1>
+        - /var/log/*.log <1>
       fields:
-        type: syslog
+        type: syslog <2>
 output:
   logstash:
     hosts: ["localhost:5043"]
-  tls:
-    certificate: /path/to/ssl-certificate.crt <2>
-    certificate_key: /path/to/ssl-certificate.key
-    certificate_authorities: /path/to/ssl-certificate.crt
-    timeout: 15
 --------------------------------------------------------------------------------
 
-<1> Path to the file or files that Filebeat processes.
-<2> Path to the SSL certificate for the Logstash instance.
+<1> Absolute path to the file or files that Filebeat processes.
+<2> Adds a field called `type` with the value `syslog` to the event.
 
-Save this configuration file as `filebeat.yml`.
+Save your changes. 
+
+To keep the configuration simple, you won't specify TLS/SSL settings as you would in a real world
+scenario.
 
 Configure your Logstash instance to use the Filebeat input plugin by adding the following lines to the `input` section
-of the `first-pipeline.conf` file:
+of the `second-pipeline.conf` file:
 
 [source,json]
 --------------------------------------------------------------------------------
-beats {
-    port => "5043"
-    ssl => true
-    ssl_certificate => "/path/to/ssl-cert" <1>
-    ssl_key => "/path/to/ssl-key" <2>
-}
+    beats {
+        port => "5043"
+    }
 --------------------------------------------------------------------------------
 
-<1> Path to the SSL certificate that the Logstash instance uses to authenticate itself to Filebeat.
-<2> Path to the key for the SSL certificate.
-
 [float]
 [[logstash-file-output]]
 ==== Writing Logstash Data to a File
@@ -448,23 +480,23 @@ You can configure your Logstash pipeline to write data directly to a file with t
 {logstash}plugins-outputs-file.html[`file`] output plugin.
 
 Configure your Logstash instance to use the `file` output plugin by adding the following lines to the `output` section
-of the `first-pipeline.conf` file:
+of the `second-pipeline.conf` file:
 
 [source,json]
 --------------------------------------------------------------------------------
-file {
-    path => /path/to/target/file
-}
+    file {
+        path => /path/to/target/file
+    }
 --------------------------------------------------------------------------------
 
 [float]
 [[multiple-es-nodes]]
-==== Writing to multiple Elasticsearch nodes
+==== Writing to Multiple Elasticsearch Nodes
 
 Writing to multiple Elasticsearch nodes lightens the resource demands on a given Elasticsearch node, as well as
 providing redundant points of entry into the cluster when a particular node is unavailable.
 
-To configure your Logstash instance to write to multiple Elasticsearch nodes, edit the output section of the `first-pipeline.conf` file to read:
+To configure your Logstash instance to write to multiple Elasticsearch nodes, edit the `output` section of the `second-pipeline.conf` file to read:
 
 [source,json]
 --------------------------------------------------------------------------------
@@ -483,23 +515,20 @@ default port for Elasticsearch is `9200` and can be omitted in the configuration
 [[testing-second-pipeline]]
 ===== Testing the Pipeline
 
-At this point, your `first-pipeline.conf` file looks like this:
+At this point, your `second-pipeline.conf` file looks like this: 
 
 [source,json]
 --------------------------------------------------------------------------------
 input {
     twitter {
-        consumer_key =>
-        consumer_secret =>
-        keywords =>
-        oauth_token =>
-        oauth_token_secret =>
+        consumer_key => "enter_your_consumer_key_here"
+        consumer_secret => "enter_your_secret_here"
+        keywords => ["cloud"]
+        oauth_token => "enter_your_access_token_here"
+        oauth_token_secret => "enter_your_access_token_secret_here"
     }
     beats {
         port => "5043"
-        ssl => true
-        ssl_certificate => "/path/to/ssl-cert"
-        ssl_key => "/path/to/ssl-key"
     }
 }
 output {
@@ -507,7 +536,7 @@ output {
         hosts => ["IP Address 1:port1", "IP Address 2:port2", "IP Address 3"]
     }
     file {
-        path => /path/to/target/file
+        path => "/path/to/target/file"
     }
 }
 --------------------------------------------------------------------------------
@@ -529,7 +558,7 @@ To verify your configuration, run the following command:
 
 [source,shell]
 --------------------------------------------------------------------------------
-bin/logstash -f first-pipeline.conf --configtest
+bin/logstash -f second-pipeline.conf --configtest
 --------------------------------------------------------------------------------
 
 The `--configtest` option parses your configuration file and reports any errors. When the configuration file passes
@@ -537,23 +566,34 @@ the configuration test, start Logstash with the following command:
 
 [source,shell]
 --------------------------------------------------------------------------------
-bin/logstash -f first-pipeline.conf
+bin/logstash -f second-pipeline.conf
 --------------------------------------------------------------------------------
 
 Use the `grep` utility to search in the target file to verify that information is present:
 
 [source,shell]
 --------------------------------------------------------------------------------
-grep Mozilla /path/to/target/file
+grep syslog /path/to/target/file
 --------------------------------------------------------------------------------
 
 Run an Elasticsearch query to find the same information in the Elasticsearch cluster:
 
 [source,shell]
 --------------------------------------------------------------------------------
-curl -XGET 'localhost:9200/logstash-2015.07.30/_search?q=agent=Mozilla'
+curl -XGET 'localhost:9200/logstash-$DATE/_search?pretty&q=fields.type:syslog'
+--------------------------------------------------------------------------------
+
+Replace $DATE with the current date, in YYYY.MM.DD format.
+
+To see data from the Twitter feed, try this query:
+
+[source,shell]
+--------------------------------------------------------------------------------
+curl -XGET 'http://localhost:9200/logstash-$DATE/_search?pretty&q=client:iphone'
 --------------------------------------------------------------------------------
 
+Again, remember to replace $DATE with the current date, in YYYY.MM.DD format. 
+
 [[stalled-shutdown]]
 === Stalled Shutdown Detection
 
diff --git a/docs/static/getting-started-with-logstash.asciidoc b/docs/static/getting-started-with-logstash.asciidoc
index 532b8e4d133..81fc59d87cb 100644
--- a/docs/static/getting-started-with-logstash.asciidoc
+++ b/docs/static/getting-started-with-logstash.asciidoc
@@ -49,8 +49,8 @@ that we only provide binary packages, but no source packages, as the packages
 are created as part of the Logstash build.
 
 We have split the Logstash package repositories by version into separate urls
-to avoid accidental upgrades across major or minor versions. For all 1.5.x
-releases use 1.5 as version number, for 1.4.x use 1.4, etc.
+to avoid accidental upgrades across major or minor versions. For all 2.4.x releases
+use 2.4 as version number, for 2.3.x use 2.3, and so on.
 
 We use the PGP key
 https://pgp.mit.edu/pks/lookup?op=vindex&search=0xD27D666CD88E42B4[D88E42B4],
@@ -153,5 +153,4 @@ hello world
 Logstash adds timestamp and IP address information to the message. Exit Logstash by issuing a *CTRL-D* command in the
 shell where Logstash is running.
 
-The <<advanced-pipeline,Advanced Tutorial>> expands the capabilities of your Logstash instance to cover broader
-use cases.
+You’ve created and run a basic Logstash pipeline. Next, you learn how to create a more realistic pipeline.
diff --git a/docs/static/introduction.asciidoc b/docs/static/introduction.asciidoc
index 9b69959d6a6..597e5b41c58 100644
--- a/docs/static/introduction.asciidoc
+++ b/docs/static/introduction.asciidoc
@@ -27,7 +27,7 @@ Collect more, so you can know more. Logstash welcomes data of all shapes and siz
 Where it all started.
 
 * Handle all types of logging data
-** Easily ingest a multitude of web logs like <<parsing-into-es,Apache>>, and application
+** Easily ingest a multitude of web logs like <<advanced-pipeline,Apache>>, and application
 logs like <<plugins-inputs-log4j,log4j>> for Java
 ** Capture many other log formats like <<plugins-inputs-syslog,syslog>>,
 <<plugins-inputs-eventlog,Windows event logs>>, networking and firewall logs, and more
