diff --git a/Gemfile b/Gemfile
index edd4647c37e..55a261ee2f9 100644
--- a/Gemfile
+++ b/Gemfile
@@ -2,4 +2,9 @@
 # If you modify this file manually all comments and formatting will be lost.
 
 source "https://rubygems.org"
-gemspec :name => "logstash-core"
+gem "logstash-core", "2.0.0.dev", :path => "."
+gem "file-dependencies", "0.1.6"
+gem "ci_reporter", "1.9.3", :group => :development
+gem "simplecov", :group => :development
+gem "coveralls", :group => :development
+gem "rspec", "~> 2.14.0", :group => :development
diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
index 2769b32dbf2..e6b2c9a1c53 100644
--- a/Gemfile.jruby-1.9.lock
+++ b/Gemfile.jruby-1.9.lock
@@ -1,94 +1,57 @@
 PATH
   remote: .
   specs:
-    logstash (2.0.0.dev-java)
-      cabin (>= 0.7.0)
-      clamp
-      file-dependencies (= 0.1.6)
-      filesize
-      ftw (~> 0.0.40)
+    logstash-core (2.0.0.dev-java)
+      cabin (~> 0.7.0)
+      clamp (~> 0.6.5)
+      filesize (= 0.0.4)
       i18n (= 0.6.9)
-      jar-dependencies (= 0.1.7)
-      jrjackson
-      maven-tools (= 1.0.7)
-      mime-types
-      minitar
-      pry
-      rack
-      ruby-maven (= 3.1.1.0.8)
-      sinatra
-      stud
-      treetop (~> 1.4.0)
+      jrjackson (~> 0.2.8)
+      minitar (~> 0.5.4)
+      pry (~> 0.10.1)
+      stud (~> 0.0.19)
+      treetop (< 1.5.0)
 
 GEM
   remote: https://rubygems.org/
   specs:
-    addressable (2.3.7)
-    axiom-types (0.1.1)
-      descendants_tracker (~> 0.0.4)
-      ice_nine (~> 0.11.0)
-      thread_safe (~> 0.3, >= 0.3.1)
-    backports (3.6.4)
     builder (3.2.2)
     cabin (0.7.1)
     ci_reporter (1.9.3)
       builder (>= 2.1.2)
-    clamp (0.6.3)
+    clamp (0.6.5)
     coderay (1.1.0)
-    coercible (1.0.0)
-      descendants_tracker (~> 0.0.1)
-    coveralls (0.7.10)
-      multi_json (~> 1.10)
+    coveralls (0.8.1)
+      json (~> 1.8)
       rest-client (>= 1.6.8, < 2)
-      simplecov (~> 0.9.1)
+      simplecov (~> 0.10.0)
       term-ansicolor (~> 1.3)
       thor (~> 0.19.1)
-    descendants_tracker (0.0.4)
-      thread_safe (~> 0.3, >= 0.3.1)
     diff-lcs (1.2.5)
     docile (1.1.5)
-    equalizer (0.0.9)
-    ffi (1.9.6-java)
+    domain_name (0.5.24)
+      unf (>= 0.0.5, < 1.0.0)
+    ffi (1.9.8-java)
     file-dependencies (0.1.6)
       minitar
     filesize (0.0.4)
-    ftw (0.0.42)
-      addressable
-      backports (>= 2.6.2)
-      cabin (> 0)
-      http_parser.rb (~> 0.6)
-    gem_publisher (1.5.0)
-    http_parser.rb (0.6.0-java)
+    http-cookie (1.0.2)
+      domain_name (~> 0.5)
     i18n (0.6.9)
-    ice_nine (0.11.1)
-    insist (1.0.0)
-    jar-dependencies (0.1.7)
     jrjackson (0.2.8)
-    logstash-devutils (0.0.12-java)
-      gem_publisher
-      insist (= 1.0.0)
-      jar-dependencies
-      minitar
-      rake
-      rspec (~> 2.14.0)
-    maven-tools (1.0.7)
-      virtus (~> 1.0)
+    json (1.8.2-java)
     method_source (0.8.2)
-    mime-types (2.4.3)
+    mime-types (2.5)
     minitar (0.5.4)
-    multi_json (1.10.1)
-    netrc (0.10.2)
+    netrc (0.10.3)
     polyglot (0.3.5)
     pry (0.10.1-java)
       coderay (~> 1.1.0)
       method_source (~> 0.8.1)
       slop (~> 3.4)
       spoon (~> 0.0)
-    rack (1.6.0)
-    rack-protection (1.5.3)
-      rack
-    rake (10.4.2)
-    rest-client (1.7.3)
+    rest-client (1.8.0)
+      http-cookie (>= 1.0.2, < 2.0)
       mime-types (>= 1.16, < 3.0)
       netrc (~> 0.7)
     rspec (2.14.1)
@@ -99,19 +62,11 @@ GEM
     rspec-expectations (2.14.5)
       diff-lcs (>= 1.1.3, < 2.0)
     rspec-mocks (2.14.6)
-    ruby-maven (3.1.1.0.8)
-      maven-tools (~> 1.0.1)
-      ruby-maven-libs (= 3.1.1)
-    ruby-maven-libs (3.1.1)
-    simplecov (0.9.2)
+    simplecov (0.10.0)
       docile (~> 1.1.0)
-      multi_json (~> 1.0)
-      simplecov-html (~> 0.9.0)
-    simplecov-html (0.9.0)
-    sinatra (1.4.5)
-      rack (~> 1.4)
-      rack-protection (~> 1.4)
-      tilt (~> 1.3, >= 1.3.4)
+      json (~> 1.8)
+      simplecov-html (~> 0.10.0)
+    simplecov-html (0.10.0)
     slop (3.6.0)
     spoon (0.0.4)
       ffi
@@ -119,17 +74,11 @@ GEM
     term-ansicolor (1.3.0)
       tins (~> 1.0)
     thor (0.19.1)
-    thread_safe (0.3.4-java)
-    tilt (1.4.1)
-    tins (1.3.4)
+    tins (1.5.1)
     treetop (1.4.15)
       polyglot
       polyglot (>= 0.3.1)
-    virtus (1.0.4)
-      axiom-types (~> 0.1)
-      coercible (~> 1.0)
-      descendants_tracker (~> 0.0, >= 0.0.3)
-      equalizer (~> 0.0, >= 0.0.9)
+    unf (0.1.4-java)
 
 PLATFORMS
   java
@@ -137,7 +86,7 @@ PLATFORMS
 DEPENDENCIES
   ci_reporter (= 1.9.3)
   coveralls
-  logstash!
-  logstash-devutils
+  file-dependencies (= 0.1.6)
+  logstash-core (= 2.0.0.dev)!
   rspec (~> 2.14.0)
   simplecov
diff --git a/bin/bundle b/bin/bundle
index aaae921c4c5..605370c3261 100755
--- a/bin/bundle
+++ b/bin/bundle
@@ -8,16 +8,14 @@
 # Exit cleanly from an early interrupt
 Signal.trap("INT") { exit 1 }
 
-$LOAD_PATH.unshift(File.expand_path(File.join("__FILE__", "..", "lib")))
-
-require "logstash/environment"
+require_relative "../lib/bootstrap/environment"
 Gem.clear_paths
 Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
 
 require "bundler"
 require "bundler/cli"
 require "bundler/friendly_errors"
-require "logstash/patches/bundler"
+LogStash::Bundler.patch!
 
 Bundler.with_friendly_errors do
   Bundler::CLI.start(ARGV, :debug => true)
diff --git a/bin/logstash b/bin/logstash
index 21e26d9ddf5..ec9657bfaf7 100755
--- a/bin/logstash
+++ b/bin/logstash
@@ -4,35 +4,28 @@
 # This is most useful when done from a git checkout.
 #
 # Usage:
-#     bin/logstash <command> [arguments]
+#   bin/logstash <command> [arguments]
 #
 # See 'bin/logstash help' for a list of commands.
 #
-# Defaults you can override with environment variables
-LS_HEAP_SIZE="${LS_HEAP_SIZE:=500m}"
-
-unset CDPATH
-basedir=$(cd `dirname $0`/..; pwd)
-. "${basedir}/bin/logstash.lib.sh"
+# Supported environment variables:
+#   LS_HEAP_SIZE="xxx" size for the -Xmx${LS_HEAP_SIZE} maximum Java heap size option, default is "500m"
+#   LS_JAVA_OPTS="xxx" to append extra options to the defaults JAVA_OPTS provided by logstash
+#   JAVA_OPTS="xxx" to *completely override* the defauls set of JAVA_OPTS provided by logstash
+#
+# Development environment variables:
+#   USE_RUBY=1 to force use the local "ruby" command to launch logstash instead of using the vendored JRuby
+#   USE_DRIP=1 to force use drip
+#   DEBUG=1 to output debugging information
 
+. "$(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
 setup
 
-# Export these so that they can be picked up by file input (and others?).
-export HOME SINCEDB_DIR
-
 case $1 in
   -*)
-    if [ -z "$VENDORED_JRUBY" ] ; then
-      exec "${RUBYCMD}" "${basedir}/lib/logstash/runner.rb" "agent" "$@"
-    else
-      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/runner.rb" "agent" "$@"
-    fi
+    ruby_exec "${LOGSTASH_HOME}/lib/bootstrap/environment.rb" "logstash/runner.rb" "agent" "$@"
     ;;
   *)
-    if [ -z "$VENDORED_JRUBY" ] ; then
-      exec "${RUBYCMD}" "${basedir}/lib/logstash/runner.rb" "$@"
-    else
-      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/runner.rb" "$@"
-    fi
+    ruby_exec "${LOGSTASH_HOME}/lib/bootstrap/environment.rb" "logstash/runner.rb" "$@"
     ;;
 esac
diff --git a/bin/logstash-test b/bin/logstash-test
deleted file mode 100755
index 3af148b6c40..00000000000
--- a/bin/logstash-test
+++ /dev/null
@@ -1,4 +0,0 @@
-#!/bin/sh
-
-basedir=$(cd `dirname $0`/..; pwd)
-exec $basedir/bin/logstash rspec "$@"
diff --git a/bin/logstash.bat b/bin/logstash.bat
index 4876aa7e80e..bc9b672e927 100644
--- a/bin/logstash.bat
+++ b/bin/logstash.bat
@@ -11,15 +11,15 @@ set first_arg=%1
 setlocal EnableDelayedExpansion
 if "!first_arg:~0,1!" equ "-" (
   if "%VENDORED_JRUBY%" == "" (
-    %RUBYCMD% "%LS_HOME%\lib\logstash\runner.rb" agent %*
+    %RUBYCMD% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" agent %*
   ) else (
-    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\logstash\runner.rb" agent %*
+    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" agent %*
   )
 ) else (
   if "%VENDORED_JRUBY%" == "" (
-    %RUBYCMD% "%LS_HOME%\lib\logstash\runner.rb" %*
+    %RUBYCMD% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
   ) else (
-    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\logstash\runner.rb" %*
+    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
   )
 )
 
diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index 1da6aa0b817..f3704876d72 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -1,4 +1,9 @@
-basedir=$(cd `dirname $0`/..; pwd)
+unset CDPATH
+LOGSTASH_HOME=$(cd `dirname $0`/..; pwd)
+export LOGSTASH_HOME
+
+# Defaults you can override with environment variables
+LS_HEAP_SIZE="${LS_HEAP_SIZE:=500m}"
 
 setup_java() {
   if [ -z "$JAVACMD" ] ; then
@@ -57,7 +62,7 @@ setup_java() {
 }
 
 setup_drip() {
-  if [ -z $DRIP_JAVACMD ] ; then
+  if [ -z "$DRIP_JAVACMD" ] ; then
     JAVACMD="drip"
   fi
 
@@ -74,7 +79,7 @@ setup_drip() {
   # faster JRuby startup options https://github.com/jruby/jruby/wiki/Improving-startup-time
   # since we are using drip to speed up, we may as well throw these in also
   if [ "$USE_RUBY" = "1" ] ; then
-    export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"
+    export JRUBY_OPTS="$JRUBY_OPTS -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"
   else
     JAVA_OPTS="$JAVA_OPTS -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -noverify"
   fi
@@ -84,8 +89,7 @@ setup_drip() {
 }
 
 setup_vendored_jruby() {
-  #JRUBY_JAR=$(ls "${basedir}"/vendor/jruby/jruby-complete-*.jar)
-  JRUBY_BIN="${basedir}/vendor/jruby/bin/jruby"
+  JRUBY_BIN="${LOGSTASH_HOME}/vendor/jruby/bin/jruby"
 
   if [ ! -f "${JRUBY_BIN}" ] ; then
     echo "Unable to find JRuby."
@@ -102,9 +106,9 @@ setup_ruby() {
 }
 
 jruby_opts() {
-  echo "--1.9"
+  printf "%s" "--1.9"
   for i in $JAVA_OPTS ; do
-    echo "-J$i"
+    printf "%s" " -J$i"
   done
 }
 
@@ -127,6 +131,24 @@ setup() {
     setup_java
     setup_vendored_jruby
   fi
+}
+
+ruby_exec() {
+  if [ -z "$VENDORED_JRUBY" ] ; then
+
+    # $VENDORED_JRUBY is empty so use the local "ruby" command
+
+    if [ "$DEBUG" ] ; then
+      echo "DEBUG: exec ${RUBYCMD} $@"
+    fi
+    exec "${RUBYCMD}" "$@"
+  else
+
+    # $VENDORED_JRUBY is non-empty so use the vendored JRuby
 
-  export RUBYLIB="${basedir}/lib"
+    if [ "$DEBUG" ] ; then
+      echo "DEBUG: exec ${JRUBY_BIN} $(jruby_opts) $@"
+    fi
+    exec "${JRUBY_BIN}" $(jruby_opts) "$@"
+  fi
 }
diff --git a/bin/plugin b/bin/plugin
index 55fbf35f904..5971f8c0bbe 100755
--- a/bin/plugin
+++ b/bin/plugin
@@ -1,38 +1,10 @@
 #!/bin/sh
-# Run logstash from source
-#
-# This is most useful when done from a git checkout.
-#
-# Usage:
-#     bin/logstash <command> [arguments]
-#
-# See 'bin/logstash help' for a list of commands.
-#
-# Defaults you can override with environment variables
-LS_HEAP_SIZE="${LS_HEAP_SIZE:=500m}"
-
-unset CDPATH
-basedir=$(cd `dirname $0`/..; pwd)
-. "${basedir}/bin/logstash.lib.sh"
 
+. "$(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
 setup
 
-# Export these so that they can be picked up by file input (and others?).
-export HOME SINCEDB_DIR
+# bin/plugin is a short lived ruby script thus we can use aggressive "faster starting JRuby options"
+# see https://github.com/jruby/jruby/wiki/Improving-startup-time
+export JRUBY_OPTS="$JRUBY_OPTS -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify -X-C -Xcompile.invokedynamic=false"
 
-case $1 in
-  -*)
-    if [ -z "$VENDORED_JRUBY" ] ; then
-      exec "${RUBYCMD}" "${basedir}/lib/logstash/pluginmanager.rb" "$@"
-    else
-      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/pluginmanager.rb" "$@"
-    fi
-    ;;
-  *)
-    if [ -z "$VENDORED_JRUBY" ] ; then
-      exec "${RUBYCMD}" "${basedir}/lib/logstash/pluginmanager.rb" "$@"
-    else
-      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/pluginmanager.rb" "$@"
-    fi
-    ;;
-esac
+ruby_exec "${LOGSTASH_HOME}/lib/pluginmanager/main.rb" "$@"
diff --git a/bin/plugin.bat b/bin/plugin.bat
index b2f11943c41..e51beecca65 100644
--- a/bin/plugin.bat
+++ b/bin/plugin.bat
@@ -7,9 +7,9 @@ CALL %SCRIPT_DIR%\setup.bat
 
 :EXEC
 if "%VENDORED_JRUBY%" == "" (
-  %RUBYCMD% "%LS_HOME%\lib\logstash\pluginmanager.rb" %*
+  %RUBYCMD% "%LS_HOME%\lib\pluginmanager\main.rb" %*
 ) else (
-  %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\logstash\pluginmanager.rb" %*
+  %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\pluginmanager\main.rb" %*
 )
 
 ENDLOCAL
diff --git a/bin/rspec b/bin/rspec
index 6e825ac62cb..bae3c0d43f8 100755
--- a/bin/rspec
+++ b/bin/rspec
@@ -1,14 +1,9 @@
-#!/usr/bin/env ruby
+#!/bin/sh
 
-$LOAD_PATH << File.expand_path(File.join("__FILE__", "..", "lib"))
-$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), "../spec"))
+. "$(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
+setup
 
-require "logstash/environment"
-require "logstash/bundler"
-LogStash::Bundler.setup!
+# use faster starting JRuby options see https://github.com/jruby/jruby/wiki/Improving-startup-time
+export JRUBY_OPTS="$JRUBY_OPTS -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1"
 
-require "rspec/core"
-require "rspec"
-
-status = RSpec::Core::Runner.run(ARGV).to_i
-exit status if status != 0
+ruby_exec "${LOGSTASH_HOME}/lib/bootstrap/rspec.rb" "$@"
diff --git a/docs/asciidocgen.rb b/docs/asciidocgen.rb
index 340549fce00..0467eb7fc70 100644
--- a/docs/asciidocgen.rb
+++ b/docs/asciidocgen.rb
@@ -140,7 +140,7 @@ def generate(file, settings)
 
     # local scoping for the monkeypatch belowg
     attributes = @attributes
-    
+
     # Monkeypatch the 'config' method to capture
     # Note, this monkeypatch requires us do the config processing
     # one at a time.
diff --git a/dripmain.rb b/dripmain.rb
index b4f537db588..92946007605 100644
--- a/dripmain.rb
+++ b/dripmain.rb
@@ -1,17 +1,13 @@
 # dripmain.rb is called by org.jruby.main.DripMain to further warm the JVM with any preloading
 # that we can do to speedup future startup using drip.
 
-# we are out of the application context here so setup the load path and gem paths
-lib_path = File.expand_path(File.join(File.dirname(__FILE__), "./lib"))
-$:.unshift(lib_path)
-
-require "logstash/bundler"
+require_relative "lib/bootstrap/environment"
 LogStash::Bundler.setup!
 
 # typical required gems and libs
-require "i18n"
-I18n.enforce_available_locales = true
-I18n.load_path << LogStash::Environment.locales_path("en.yml")
+require "logstash/environment"
+LogStash::Environment.load_locale!
+
 require "cabin"
 require "stud/trap"
 require "stud/task"
diff --git a/lib/logstash/bundler.rb b/lib/bootstrap/bundler.rb
similarity index 70%
rename from lib/logstash/bundler.rb
rename to lib/bootstrap/bundler.rb
index 4ea3801de1c..163b3eca04e 100644
--- a/lib/logstash/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -1,85 +1,56 @@
-require "logstash/environment"
-
 module LogStash
   module Bundler
-    # Take a gem package and extract it to a specific target
-    # @param [String] Gem file, this must be a path
-    # @param [String, String] Return a Gem::Package and the installed path
-    def self.unpack(file, path)
-      require "rubygems/package"
-      require "securerandom"
-
-      # We are creating a random directory per extract,
-      # if we dont do this bundler will not trigger download of the dependencies.
-      # Use case is:
-      # - User build his own gem with a fix
-      # - User doesnt increment the version
-      # - User install the same version but different code or dependencies multiple times..
-      basename  = ::File.basename(file, '.gem') 
-      unique = SecureRandom.hex(4)
-      target_path = ::File.expand_path(::File.join(path, unique, basename))
-      
-      package = ::Gem::Package.new(file)
-      package.extract_files(target_path)
-
-      return [package, target_path]
+    extend self
+
+    def patch!
+      # Patch bundler to write a .lock file specific to the version of ruby.
+      # This keeps MRI/JRuby/RBX from conflicting over the Gemfile.lock updates
+      ::Bundler::SharedHelpers.module_exec do
+        def default_lockfile
+          ruby = "#{Environment.ruby_engine}-#{Environment.ruby_abi_version}"
+          Pathname.new("#{default_gemfile}.#{ruby}.lock")
+        end
+      end
     end
 
-    def self.setup!(options = {})
+    def setup!(options = {})
       options = {:without => [:development]}.merge(options)
       options[:without] = Array(options[:without])
 
       # make sure we use our own installed bundler
-      require "logstash/patches/rubygems" # patch rubygems before clear_paths
+      LogStash::Rubygems.patch!
       ::Gem.clear_paths
-      ::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
+      ::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = Environment.logstash_gem_home
 
       # set BUNDLE_GEMFILE ENV before requiring bundler to avoid bundler recurse and load unrelated Gemfile(s)
-      ENV["BUNDLE_GEMFILE"] = LogStash::Environment::GEMFILE_PATH
+      ENV["BUNDLE_GEMFILE"] = Environment::GEMFILE_PATH
 
       require "bundler"
-      require "logstash/bundler"
-      require "logstash/patches/bundler"
+      LogStash::Bundler.patch!
 
-      ::Bundler.settings[:path]    = LogStash::Environment::BUNDLE_DIR
+      ::Bundler.settings[:path] = Environment::BUNDLE_DIR
       ::Bundler.settings[:without] = options[:without].join(":")
       # in the context of Bundler.setup it looks like this is useless here because Gemfile path can only be specified using
       # the ENV, see https://github.com/bundler/bundler/blob/v1.8.3/lib/bundler/shared_helpers.rb#L103
-      ::Bundler.settings[:gemfile] = LogStash::Environment::GEMFILE_PATH
+      ::Bundler.settings[:gemfile] = Environment::GEMFILE_PATH
 
       ::Bundler.reset!
       ::Bundler.setup
     end
 
-    # capture any $stdout from the passed block. also trap any exception in that block, in which case the trapped exception will be returned
-    # @param [Proc] the code block to execute
-    # @return [String, Exception] the captured $stdout string and any trapped exception or nil if none
-    def self.capture_stdout(&block)
-      old_stdout = $stdout
-      $stdout = StringIO.new("", "w")
-      begin
-        block.call
-      rescue => e
-        return [$stdout.string, e]
-      end
-
-      [$stdout.string, nil]
-    ensure
-      $stdout = old_stdout
-    end
-
     # execute bundle install and capture any $stdout output. any raised exception in the process will be trapped
     # and returned. logs errors to $stdout.
     # @param options [Hash] invoke options with default values, :max_tries => 10, :clean => false, :install => false, :update => false
     # @param   options[:update] must be either false or a String or an Array of String
     # @return [String, Exception] the installation captured output and any raised exception or nil if none
-    def self.invoke_bundler!(options = {})
+    def invoke!(options = {})
       options = {:max_tries => 10, :clean => false, :install => false, :update => false, :without => [:development]}.merge(options)
       options[:without] = Array(options[:without])
       options[:update] = Array(options[:update]) if options[:update]
 
       # make sure we use our own installed bundler
-      require "logstash/patches/rubygems" # patch rubygems before clear_paths
+      # require "logstash/patches/rubygems" # patch rubygems before clear_paths
+      LogStash::Rubygems.patch!
       ::Gem.clear_paths
       ::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
 
@@ -90,7 +61,8 @@ def self.invoke_bundler!(options = {})
 
       require "bundler"
       require "bundler/cli"
-      require "logstash/patches/bundler"
+      # require "logstash/patches/bundler"
+      LogStash::Bundler.patch!
 
       # force Rubygems sources to our Gemfile sources
       ::Gem.sources = options[:rubygems_source] if options[:rubygems_source]
@@ -135,9 +107,9 @@ def self.invoke_bundler!(options = {})
     end
 
     # build Bundler::CLI.start arguments array from the given options hash
-    # @param option [Hash] the invoke_bundler! options hash
+    # @param option [Hash] the invoke! options hash
     # @return [Array<String>] Bundler::CLI.start string arguments array
-    def self.bundler_arguments(options = {})
+    def bundler_arguments(options = {})
       arguments = []
 
       if options[:install]
@@ -152,5 +124,23 @@ def self.bundler_arguments(options = {})
 
       arguments.flatten
     end
+
+   # capture any $stdout from the passed block. also trap any exception in that block, in which case the trapped exception will be returned
+    # @param [Proc] the code block to execute
+    # @return [String, Exception] the captured $stdout string and any trapped exception or nil if none
+    def capture_stdout(&block)
+      old_stdout = $stdout
+      $stdout = StringIO.new("", "w")
+      begin
+        block.call
+      rescue => e
+        return [$stdout.string, e]
+      end
+
+      [$stdout.string, nil]
+    ensure
+      $stdout = old_stdout
+    end
+
   end
 end
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
new file mode 100644
index 00000000000..c6644b09e47
--- /dev/null
+++ b/lib/bootstrap/environment.rb
@@ -0,0 +1,49 @@
+# bootstrap.rb contains the minimal code to be able to launch Bundler to eventually be able
+# to retrieve the core code in the logstash-core gem which can live under different paths
+# depending on the launch context (local dev, packaged, etc)
+
+require_relative "bundler"
+require_relative "rubygems"
+
+module LogStash
+  module Environment
+    extend self
+
+    # also set the env LOGSTASH_HOME
+    LOGSTASH_HOME = ENV["LOGSTASH_HOME"] = ::File.expand_path(::File.join(__FILE__, "..", "..", ".."))
+
+    BUNDLE_DIR = ::File.join(LOGSTASH_HOME, "vendor", "bundle")
+    GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "Gemfile")
+    LOCAL_GEM_PATH = ::File.join(LOGSTASH_HOME, 'vendor', 'local_gems')
+
+    # @return [String] the ruby version string bundler uses to craft its gem path
+    def gem_ruby_version
+      RbConfig::CONFIG["ruby_version"]
+    end
+
+    # @return [String] major.minor ruby version, ex 1.9
+    def ruby_abi_version
+      RUBY_VERSION[/(\d+\.\d+)(\.\d+)*/, 1]
+    end
+
+    # @return [String] jruby, ruby, rbx, ...
+    def ruby_engine
+      RUBY_ENGINE
+    end
+
+    def logstash_gem_home
+      ::File.join(BUNDLE_DIR, ruby_engine, gem_ruby_version)
+    end
+  end
+end
+
+
+# when launched as a script, not require'd, (currently from bin/logstash and bin/plugin) the first
+# argument is the path of a Ruby file to require and a LogStash::Runner class is expected to be
+# defined and exposing the LogStash::Runner#main instance method which will be called with the current ARGV
+# currently lib/logstash/runner.rb and lib/pluginmanager/main.rb are called using this.
+if $0 == __FILE__
+  LogStash::Bundler.setup!
+  require ARGV.shift
+  LogStash::Runner.new.main(ARGV)
+end
\ No newline at end of file
diff --git a/lib/bootstrap/rspec.rb b/lib/bootstrap/rspec.rb
new file mode 100755
index 00000000000..e70779176f4
--- /dev/null
+++ b/lib/bootstrap/rspec.rb
@@ -0,0 +1,11 @@
+require_relative "environment"
+LogStash::Bundler.setup!({:without => []})
+require "logstash/environment"
+
+$LOAD_PATH.unshift(File.join(LogStash::Environment::LOGSTASH_CORE, "spec"))
+
+require "rspec/core"
+require "rspec"
+
+status = RSpec::Core::Runner.run(ARGV.empty? ? ["spec"] : ARGV).to_i
+exit status if status != 0
diff --git a/lib/bootstrap/rubygems.rb b/lib/bootstrap/rubygems.rb
new file mode 100644
index 00000000000..fb90e473f9e
--- /dev/null
+++ b/lib/bootstrap/rubygems.rb
@@ -0,0 +1,69 @@
+module LogStash
+  module Rubygems
+    extend self
+
+    def patch!
+      # monkey patch RubyGems to silence ffi warnings:
+      #
+      # WARN: Unresolved specs during Gem::Specification.reset:
+      #       ffi (>= 0)
+      # WARN: Clearing out unresolved specs.
+      # Please report a bug if this causes problems.
+      #
+      # see https://github.com/elasticsearch/logstash/issues/2556 and https://github.com/rubygems/rubygems/issues/1070
+      #
+      # this code is from Rubygems v2.1.9 in JRuby 1.7.17. Per tickets this issue should be solved at JRuby >= 1.7.20.
+      #
+      # this method implementation works for Rubygems version 2.1.0 and up, verified up to 2.4.6
+      if ::Gem::Version.new(::Gem::VERSION) >= ::Gem::Version.new("2.1.0") && ::Gem::Version.new(::Gem::VERSION) < ::Gem::Version.new("2.5.0")
+        ::Gem::Specification.class_exec do
+          def self.reset
+            @@dirs = nil
+            ::Gem.pre_reset_hooks.each { |hook| hook.call }
+            @@all = nil
+            @@stubs = nil
+            _clear_load_cache
+            unresolved = unresolved_deps
+            unless unresolved.empty?
+              unless (unresolved.size == 1 && unresolved["ffi"])
+                w = "W" + "ARN"
+                warn "#{w}: Unresolved specs during Gem::Specification.reset:"
+                unresolved.values.each do |dep|
+                  warn "      #{dep}"
+                end
+                warn "#{w}: Clearing out unresolved specs."
+                warn "Please report a bug if this causes problems."
+              end
+              unresolved.clear
+            end
+            ::Gem.post_reset_hooks.each { |hook| hook.call }
+          end
+        end
+      end
+    end
+
+    # Take a gem package and extract it to a specific target
+    # @param [String] Gem file, this must be a path
+    # @param [String, String] Return a Gem::Package and the installed path
+    def unpack(file, path)
+      require "rubygems/package"
+      require "securerandom"
+
+      # We are creating a random directory per extract,
+      # if we dont do this bundler will not trigger download of the dependencies.
+      # Use case is:
+      # - User build his own gem with a fix
+      # - User doesnt increment the version
+      # - User install the same version but different code or dependencies multiple times..
+      basename  = ::File.basename(file, '.gem')
+      unique = SecureRandom.hex(4)
+      target_path = ::File.expand_path(::File.join(path, unique, basename))
+
+      package = ::Gem::Package.new(file)
+      package.extract_files(target_path)
+
+      return [package, target_path]
+    end
+
+  end
+end
diff --git a/lib/logstash-core.rb b/lib/logstash-core.rb
new file mode 100644
index 00000000000..bde05c37429
--- /dev/null
+++ b/lib/logstash-core.rb
@@ -0,0 +1,2 @@
+module LogStash
+end
\ No newline at end of file
diff --git a/lib/logstash.rb b/lib/logstash.rb
deleted file mode 100644
index 4837cb3e181..00000000000
--- a/lib/logstash.rb
+++ /dev/null
@@ -1,4 +0,0 @@
-# encoding: utf-8
-require "logstash/agent"
-require "logstash/event"
-require "logstash/namespace"
diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index 5b1a0bca3d2..afe8bfaaef7 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -39,11 +39,6 @@ class LogStash::Agent < Clamp::Command
   option ["-V", "--version"], :flag,
     I18n.t("logstash.agent.flag.version")
 
-  option ["-p", "--pluginpath"] , "PATH",
-    I18n.t("logstash.agent.flag.pluginpath"),
-    :multivalued => true,
-    :attribute_name => :plugin_paths
-
   option ["-t", "--configtest"], :flag,
     I18n.t("logstash.agent.flag.configtest"),
     :attribute_name => :config_test
@@ -207,7 +202,6 @@ def show_gems
   # Log file stuff, plugin path checking, etc.
   def configure
     configure_logging(log_file)
-    configure_plugin_path(plugin_paths) if !plugin_paths.nil?
   end # def configure
 
   # Point logging at a specific path.
@@ -258,33 +252,6 @@ def configure_logging(path)
     # http://jira.codehaus.org/browse/JRUBY-7003
   end # def configure_logging
 
-  # Validate and add any paths to the list of locations
-  # logstash will look to find plugins.
-  def configure_plugin_path(paths)
-    # Append any plugin paths to the ruby search path
-    paths.each do |path|
-      # Verify the path exists
-      if !Dir.exists?(path)
-        warn(I18n.t("logstash.agent.configuration.plugin_path_missing",
-                    :path => path))
-
-      end
-
-      # TODO(sissel): Verify the path looks like the correct form.
-      # aka, there must be file in path/logstash/{inputs,codecs,filters,outputs}/*.rb
-      plugin_glob = File.join(path, "logstash", "{inputs,codecs,filters,outputs}", "*.rb")
-      if Dir.glob(plugin_glob).empty?
-        @logger.warn(I18n.t("logstash.agent.configuration.no_plugins_found",
-                    :path => path, :plugin_glob => plugin_glob))
-      end
-
-      # We push plugin paths to the front of the LOAD_PATH so that folks
-      # can override any core logstash plugins if they need to.
-      @logger.debug("Adding plugin path", :path => path)
-      $LOAD_PATH.unshift(path)
-    end
-  end # def configure_plugin_path
-
   def load_config(path)
     begin
       uri = URI.parse(path)
diff --git a/lib/logstash/environment.rb b/lib/logstash/environment.rb
index 351d293b620..512c096a643 100644
--- a/lib/logstash/environment.rb
+++ b/lib/logstash/environment.rb
@@ -5,19 +5,19 @@ module LogStash
   module Environment
     extend self
 
-    LOGSTASH_HOME = ::File.expand_path(::File.join(::File.dirname(__FILE__), "..", ".."))
-    BUNDLE_DIR = ::File.join(LOGSTASH_HOME, "vendor", "bundle")
-    GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "Gemfile")
+    # rehydrate the bootstrap environment if the startup was not done by executing bootstrap.rb
+    unless LogStash::Environment.const_defined?("LOGSTASH_HOME")
+      abort("ERROR: missing LOGSTASH_HOME environment variable") if ENV["LOGSTASH_HOME"].to_s.empty?
+      $LOAD_PATH << ::File.join(ENV["LOGSTASH_HOME"], "lib")
+      require "bootstrap/environment"
+    end
+
+    LOGSTASH_CORE = ::File.expand_path(::File.join(::File.dirname(__FILE__), "..", ".."))
     BUNDLE_CONFIG_PATH = ::File.join(LOGSTASH_HOME, ".bundle", "config")
     BOOTSTRAP_GEM_PATH = ::File.join(LOGSTASH_HOME, 'build', 'bootstrap')
-    LOCAL_GEM_PATH = ::File.join(LOGSTASH_HOME, 'vendor', 'local_gems')
 
     LOGSTASH_ENV = (ENV["LS_ENV"] || 'production').to_s.freeze
 
-    def logstash_gem_home
-      ::File.join(BUNDLE_DIR, ruby_engine, gem_ruby_version)
-    end
-
     def env
       LOGSTASH_ENV
     end
@@ -75,21 +75,6 @@ def ruby_bin
       ENV["USE_RUBY"] == "1" ? "ruby" : File.join("vendor", "jruby", "bin", "jruby")
     end
 
-    # @return [String] major.minor ruby version, ex 1.9
-    def ruby_abi_version
-      RUBY_VERSION[/(\d+\.\d+)(\.\d+)*/, 1]
-    end
-
-    # @return [String] the ruby version string bundler uses to craft its gem path
-    def gem_ruby_version
-      RbConfig::CONFIG["ruby_version"]
-    end
-
-    # @return [String] jruby, ruby, rbx, ...
-    def ruby_engine
-      RUBY_ENGINE
-    end
-
     def jruby?
       @jruby ||= !!(RUBY_PLATFORM == "java")
     end
@@ -102,16 +87,12 @@ def vendor_path(path)
       return ::File.join(LOGSTASH_HOME, "vendor", path)
     end
 
-    def plugin_path(path)
-      return ::File.join(LOGSTASH_HOME, "lib", "logstash", path)
-    end
-
     def pattern_path(path)
       return ::File.join(LOGSTASH_HOME, "patterns", path)
     end
 
     def locales_path(path)
-      return ::File.join(LOGSTASH_HOME, "locales", path)
+      return ::File.join(LOGSTASH_CORE, "locales", path)
     end
 
     def load_locale!
diff --git a/lib/logstash/namespace.rb b/lib/logstash/namespace.rb
index 145455aea49..72a1fc2e6cf 100644
--- a/lib/logstash/namespace.rb
+++ b/lib/logstash/namespace.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-#$: << File.join(File.dirname(__FILE__), "..", "..", "vendor", "bundle")
 
 module LogStash
   module Inputs; end
diff --git a/lib/logstash/pluginmanager.rb b/lib/logstash/pluginmanager.rb
deleted file mode 100644
index fd6dc1c6a97..00000000000
--- a/lib/logstash/pluginmanager.rb
+++ /dev/null
@@ -1,17 +0,0 @@
-$DEBUGLIST = (ENV["DEBUG"] || "").split(",")
-
-require "logstash/environment"
-
-ENV["GEM_HOME"] = ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
-Gem.use_paths(LogStash::Environment.logstash_gem_home)
-
-require 'logstash/pluginmanager/main'
-
-if __FILE__ == $0
-  begin
-    LogStash::PluginManager::Main.run("bin/plugin", ARGV)
-  rescue LogStash::PluginManager::Error => e
-    $stderr.puts(e.message)
-    exit(1)
-  end
-end
diff --git a/lib/logstash/pluginmanager/main.rb b/lib/logstash/pluginmanager/main.rb
deleted file mode 100644
index 39442b41f9d..00000000000
--- a/lib/logstash/pluginmanager/main.rb
+++ /dev/null
@@ -1,21 +0,0 @@
-require "logstash/namespace"
-require "logstash/errors"
-require "logstash/pluginmanager/install"
-require "logstash/pluginmanager/uninstall"
-require "logstash/pluginmanager/list"
-require "logstash/pluginmanager/update"
-require "logstash/pluginmanager/util"
-require "clamp"
-
-module LogStash
-  module PluginManager
-    class Error < StandardError; end
-
-    class Main < Clamp::Command
-      subcommand "install", "Install a plugin", LogStash::PluginManager::Install
-      subcommand "uninstall", "Uninstall a plugin", LogStash::PluginManager::Uninstall
-      subcommand "update", "Install a plugin", LogStash::PluginManager::Update
-      subcommand "list", "List all installed plugins", LogStash::PluginManager::List
-    end
-  end
-end
diff --git a/lib/logstash/runner.rb b/lib/logstash/runner.rb
index 6fb9657c23e..340deb32d7a 100644
--- a/lib/logstash/runner.rb
+++ b/lib/logstash/runner.rb
@@ -1,34 +1,16 @@
 # encoding: utf-8
 
 Thread.abort_on_exception = true
-
 Encoding.default_external = Encoding::UTF_8
-$START = Time.now
 $DEBUGLIST = (ENV["DEBUG"] || "").split(",")
 
-require "logstash/bundler"
-LogStash::Bundler.setup!
-
 require "logstash/environment"
+
 LogStash::Environment.load_locale!
 
 require "logstash/namespace"
 require "logstash/program"
 
-class LogStash::RSpecsRunner
-  def initialize(args)
-    @args = args
-  end
-
-  def run
-    @result = RSpec::Core::Runner.run(@args)
-  end
-
-  def wait
-    return @result
-  end
-end
-
 class LogStash::Runner
   include LogStash::Program
 
@@ -39,7 +21,6 @@ def main(args)
     @startup_interruption_trap = Stud::trap("INT") { puts "Interrupted"; exit 0 }
 
     LogStash::Util::set_thread_name(self.class.name)
-    #$LOAD_PATH << File.join(File.dirname(__FILE__), "..")
 
     if RUBY_VERSION < "1.9.2"
       $stderr.puts "Ruby 1.9.2 or later is required. (You are running: " + RUBY_VERSION + ")"
@@ -63,15 +44,6 @@ def run(args)
         end
         return LogStash::Agent.run($0, agent_args)
       end,
-      "rspec" => lambda do
-        require "rspec/core/runner"
-        require "rspec"
-        spec_path = File.expand_path(File.join(File.dirname(__FILE__), "/../../spec"))
-        $LOAD_PATH << spec_path
-        all_specs = Dir.glob(File.join(spec_path, "/**/*_spec.rb"))
-        rspec = LogStash::RSpecsRunner.new(args.empty? ? all_specs : args)
-        return rspec.run
-      end,
       "irb" => lambda do
         require "irb"
         return IRB.start(__FILE__)
@@ -96,21 +68,10 @@ def run(args)
         end
         return 0
       end,
-      "plugin" => lambda do
-        require 'logstash/pluginmanager'
-        plugin_manager = LogStash::PluginManager::Main.new($0)
-        begin
-          plugin_manager.parse(args)
-          return plugin_manager.execute
-        rescue Clamp::HelpWanted => e
-          show_help(e.command)
-          return 0
-        end
-      end,
       "agent" => lambda do
         require "logstash/agent"
         # Hack up a runner
-        agent = LogStash::Agent.new($0)
+        agent = LogStash::Agent.new("/bin/logstash agent", $0)
         begin
           agent.parse(args)
         rescue Clamp::HelpWanted => e
@@ -146,24 +107,15 @@ def run(args)
 Available commands:
   agent - runs the logstash agent
   version - emits version info about this logstash
-  rspec - runs tests
-      ]
+]
       #$stderr.puts commands.keys.map { |s| "  #{s}" }.join("\n")
       return Stud::Task.new { 1 }
     end
   end # def run
 
-  # @return true if this file is the main file being run and not via rspec
-  def self.autorun?
-    # caller is the current execution stack
-    $0 == __FILE__ && caller.none?{|entry| entry =~ /rspec/}
-  end
-
   private
 
   def show_help(command)
     puts command.help
   end
 end # class LogStash::Runner
-
-LogStash::Runner.new.main(ARGV) if LogStash::Runner.autorun?
diff --git a/lib/logstash/pluginmanager/command.rb b/lib/pluginmanager/command.rb
similarity index 100%
rename from lib/logstash/pluginmanager/command.rb
rename to lib/pluginmanager/command.rb
diff --git a/lib/logstash/gemfile.rb b/lib/pluginmanager/gemfile.rb
similarity index 99%
rename from lib/logstash/gemfile.rb
rename to lib/pluginmanager/gemfile.rb
index 87408017b13..e57d73e8732 100644
--- a/lib/logstash/gemfile.rb
+++ b/lib/pluginmanager/gemfile.rb
@@ -1,6 +1,4 @@
-require "logstash/util"
 module LogStash
-
   class GemfileError < StandardError; end
 
   class Gemfile
diff --git a/lib/logstash/pluginmanager/install.rb b/lib/pluginmanager/install.rb
similarity index 89%
rename from lib/logstash/pluginmanager/install.rb
rename to lib/pluginmanager/install.rb
index f9e05ffa26c..d1e51bb08c2 100644
--- a/lib/logstash/pluginmanager/install.rb
+++ b/lib/pluginmanager/install.rb
@@ -1,13 +1,6 @@
-require "clamp"
-require "logstash/namespace"
-require "logstash/environment"
-require "logstash/pluginmanager/util"
-require "logstash/pluginmanager/command"
 require "jar-dependencies"
 require "jar_install_post_install_hook"
 require "file-dependencies/gem"
-require "logstash/gemfile"
-require "logstash/bundler"
 require "fileutils"
 
 class LogStash::PluginManager::Install < LogStash::PluginManager::Command
@@ -21,7 +14,7 @@ class LogStash::PluginManager::Install < LogStash::PluginManager::Command
   # one plugin name can be also specified.
   def execute
     validate_cli_options!
-    
+
     if local_gems?
       gems = extract_local_gems_plugins
     elsif development?
@@ -32,7 +25,7 @@ def execute
     end
 
     install_gems_list!(gems)
-    remove_unused_locally_installed_gems! 
+    remove_unused_locally_installed_gems!
   end
 
   private
@@ -53,7 +46,7 @@ def verify_remote!(gems)
     gems.each do |plugin, version|
       puts("Validating #{[plugin, version].compact.join("-")}")
       signal_error("Installation aborted, verification failed for #{plugin} #{version}") unless LogStash::PluginManager.logstash_plugin?(plugin, version)
-    end 
+    end
   end
 
   def plugins_development_gems
@@ -64,7 +57,7 @@ def plugins_development_gems
 
     # Construct the list of dependencies to add to the current gemfile
     specs.each_with_object([]) do |spec, install_list|
-      dependencies = spec.dependencies 
+      dependencies = spec.dependencies
         .select { |dep| dep.type == :development }
         .map { |dep| [dep.name] + dep.requirement.as_list }
 
@@ -95,7 +88,7 @@ def install_gems_list!(install_list)
     bundler_options[:without] = [] if development?
     bundler_options[:rubygems_source] = gemfile.gemset.sources
 
-    output = LogStash::Bundler.invoke_bundler!(bundler_options)
+    output = LogStash::Bundler.invoke!(bundler_options)
 
     puts("Installation successful")
   rescue => exception
@@ -105,23 +98,23 @@ def install_gems_list!(install_list)
     display_bundler_output(output)
   end
 
-  # Extract the specified local gems in a predefined local path 
+  # Extract the specified local gems in a predefined local path
   # Update the gemfile to use a relative path to this plugin and run
   # Bundler, this will mark the gem not updatable by `bin/plugin update`
-  # This is the most reliable way to make it work in bundler without 
+  # This is the most reliable way to make it work in bundler without
   # hacking with `how bundler works`
   #
   # Bundler 2.0, will have support for plugins source we could create a .gem source
   # to support it.
   def extract_local_gems_plugins
-    plugins_arg.collect do |plugin| 
+    plugins_arg.collect do |plugin|
       # We do the verify before extracting the gem so we dont have to deal with unused path
       if verify?
         puts("Validating #{plugin}")
         signal_error("Installation aborted, verification failed for #{plugin}") unless LogStash::PluginManager.logstash_plugin?(plugin, version)
       end
 
-      package, path = LogStash::Bundler.unpack(plugin, LogStash::Environment::LOCAL_GEM_PATH)
+      package, path = LogStash::Rubygems.unpack(plugin, LogStash::Environment::LOCAL_GEM_PATH)
       [package.spec.name, package.spec.version, { :path => relative_path(path) }]
     end
   end
diff --git a/lib/logstash/pluginmanager/list.rb b/lib/pluginmanager/list.rb
similarity index 91%
rename from lib/logstash/pluginmanager/list.rb
rename to lib/pluginmanager/list.rb
index b29c3f08859..b60b7b35e3f 100644
--- a/lib/logstash/pluginmanager/list.rb
+++ b/lib/pluginmanager/list.rb
@@ -1,8 +1,3 @@
-require 'clamp'
-require 'logstash/namespace'
-require 'logstash/pluginmanager/util'
-require 'logstash/pluginmanager/command'
-require "logstash/bundler"
 require 'rubygems/spec_fetcher'
 
 class LogStash::PluginManager::List < LogStash::PluginManager::Command
diff --git a/lib/pluginmanager/main.rb b/lib/pluginmanager/main.rb
new file mode 100644
index 00000000000..b88ee1e9a07
--- /dev/null
+++ b/lib/pluginmanager/main.rb
@@ -0,0 +1,42 @@
+$LOAD_PATH.unshift(File.expand_path(File.join(__FILE__, "..", "..")))
+
+require "bootstrap/environment"
+
+ENV["GEM_HOME"] = ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
+Gem.use_paths(LogStash::Environment.logstash_gem_home)
+
+module LogStash
+  module PluginManager
+  end
+end
+
+require "clamp"
+require "pluginmanager/command"
+require "pluginmanager/util"
+require "pluginmanager/gemfile"
+require "pluginmanager/install"
+require "pluginmanager/uninstall"
+require "pluginmanager/list"
+require "pluginmanager/update"
+
+module LogStash
+  module PluginManager
+    class Error < StandardError; end
+
+    class Main < Clamp::Command
+      subcommand "install", "Install a plugin", LogStash::PluginManager::Install
+      subcommand "uninstall", "Uninstall a plugin", LogStash::PluginManager::Uninstall
+      subcommand "update", "Install a plugin", LogStash::PluginManager::Update
+      subcommand "list", "List all installed plugins", LogStash::PluginManager::List
+    end
+  end
+end
+
+if $0 == __FILE__
+  begin
+    LogStash::PluginManager::Main.run("bin/plugin", ARGV)
+  rescue LogStash::PluginManager::Error => e
+    $stderr.puts(e.message)
+    exit(1)
+  end
+end
\ No newline at end of file
diff --git a/lib/logstash/pluginmanager/uninstall.rb b/lib/pluginmanager/uninstall.rb
similarity index 66%
rename from lib/logstash/pluginmanager/uninstall.rb
rename to lib/pluginmanager/uninstall.rb
index a9ed7810814..277745fd199 100644
--- a/lib/logstash/pluginmanager/uninstall.rb
+++ b/lib/pluginmanager/uninstall.rb
@@ -1,14 +1,3 @@
-require "logstash/namespace"
-require "logstash/logging"
-require "logstash/errors"
-require "logstash/environment"
-require "logstash/pluginmanager/util"
-require "logstash/pluginmanager/command"
-require "clamp"
-
-require "logstash/gemfile"
-require "logstash/bundler"
-
 class LogStash::PluginManager::Uninstall < LogStash::PluginManager::Command
   parameter "PLUGIN", "plugin name"
 
@@ -26,9 +15,9 @@ def execute
 
       puts("Uninstalling #{plugin}")
 
-      # any errors will be logged to $stderr by invoke_bundler!
-      # output, exception = LogStash::Bundler.invoke_bundler!(:install => true, :clean => true)
-      output = LogStash::Bundler.invoke_bundler!(:install => true, :clean => true)
+      # any errors will be logged to $stderr by invoke!
+      # output, exception = LogStash::Bundler.invoke!(:install => true, :clean => true)
+      output = LogStash::Bundler.invoke!(:install => true, :clean => true)
 
       remove_unused_locally_installed_gems!
     end
diff --git a/lib/logstash/pluginmanager/update.rb b/lib/pluginmanager/update.rb
similarity index 89%
rename from lib/logstash/pluginmanager/update.rb
rename to lib/pluginmanager/update.rb
index 19700cf138c..b9276a996ba 100644
--- a/lib/logstash/pluginmanager/update.rb
+++ b/lib/pluginmanager/update.rb
@@ -1,12 +1,6 @@
-require "clamp"
-require "logstash/namespace"
-require "logstash/pluginmanager/util"
-require "logstash/pluginmanager/command"
 require "jar-dependencies"
 require "jar_install_post_install_hook"
 require "file-dependencies/gem"
-require "logstash/gemfile"
-require "logstash/bundler"
 
 class LogStash::PluginManager::Update < LogStash::PluginManager::Command
   parameter "[PLUGIN] ...", "Plugin name(s) to upgrade to latest version", :attribute_name => :plugins_arg
@@ -49,10 +43,10 @@ def update_gems!
 
     puts("Updating " + plugins.join(", "))
 
-    # any errors will be logged to $stderr by invoke_bundler!
+    # any errors will be logged to $stderr by invoke!
     # Bundler cannot update and clean gems in one operation so we have to call the CLI twice.
-    output = LogStash::Bundler.invoke_bundler!(:update => plugins)
-    output = LogStash::Bundler.invoke_bundler!(:clean => true)
+    output = LogStash::Bundler.invoke!(:update => plugins)
+    output = LogStash::Bundler.invoke!(:clean => true)
 
     display_updated_plugins(previous_gem_specs_map)
   rescue => exception
diff --git a/lib/logstash/pluginmanager/util.rb b/lib/pluginmanager/util.rb
similarity index 100%
rename from lib/logstash/pluginmanager/util.rb
rename to lib/pluginmanager/util.rb
diff --git a/logstash-core.gemspec b/logstash-core.gemspec
index 03072b49038..03c12988ead 100644
--- a/logstash-core.gemspec
+++ b/logstash-core.gemspec
@@ -1,5 +1,7 @@
 # -*- encoding: utf-8 -*-
-require File.expand_path('../lib/logstash/version', __FILE__)
+lib = File.expand_path('../lib', __FILE__)
+$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
+require 'logstash/version'
 
 Gem::Specification.new do |gem|
   gem.authors       = ["Jordan Sissel", "Pete Fritchman", "Elasticsearch"]
@@ -9,45 +11,33 @@ Gem::Specification.new do |gem|
   gem.homepage      = "http://www.elastic.co/guide/en/logstash/current/index.html"
   gem.license       = "Apache License (2.0)"
 
-  gem.files         = Dir.glob(["lib/**/*.rb", "locales/*"])
+  gem.files         = Dir.glob(["logstash-core.gemspec", "lib/logstash-core.rb", "lib/logstash/**/*.rb", "spec/**/*.rb", "locales/*"])
   gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
   gem.name          = "logstash-core"
   gem.require_paths = ["lib"]
   gem.version       = LOGSTASH_VERSION
 
-  # Core dependencies
-  gem.add_runtime_dependency "cabin", [">=0.7.0"]    #(Apache 2.0 license)
-  gem.add_runtime_dependency "pry"                   #(Ruby license)
-  gem.add_runtime_dependency "stud"                  #(Apache 2.0 license)
-  gem.add_runtime_dependency "clamp"                 #(MIT license) for command line args/flags
-  gem.add_runtime_dependency "filesize"              #(MIT license) for :bytes config validator
+  gem.add_runtime_dependency "cabin", "~> 0.7.0" #(Apache 2.0 license)
+  gem.add_runtime_dependency "pry", "~> 0.10.1" #(Ruby license)
+  gem.add_runtime_dependency "stud", "~> 0.0.19" #(Apache 2.0 license)
+  gem.add_runtime_dependency "clamp", "~> 0.6.5" #(MIT license) for command line args/flags
+  gem.add_runtime_dependency "filesize", "0.0.4" #(MIT license) for :bytes config validator
 
   # TODO(sissel): Treetop 1.5.x doesn't seem to work well, but I haven't
   # investigated what the cause might be. -Jordan
-  gem.add_runtime_dependency "treetop", ["~> 1.4.0"] #(MIT license)
+  gem.add_runtime_dependency "treetop", "< 1.5.0" #(MIT license)
 
   # upgrade i18n only post 0.6.11, see https://github.com/svenfuchs/i18n/issues/270
-  gem.add_runtime_dependency "i18n", ["=0.6.9"]   #(MIT license)
+  gem.add_runtime_dependency "i18n", "= 0.6.9" #(MIT license)
 
-  # Web dependencies
-  gem.add_runtime_dependency "ftw", ["~> 0.0.40"] #(Apache 2.0 license)
-  gem.add_runtime_dependency "mime-types"         #(GPL 2.0)
-  gem.add_runtime_dependency "rack"               #(MIT-style license)
-  gem.add_runtime_dependency "sinatra"            #(MIT-style license)
-
-  # Plugin manager dependencies
-  gem.add_runtime_dependency "minitar"
-  gem.add_runtime_dependency "file-dependencies", '0.1.6'
+  # filetools and rakelib
+  gem.add_runtime_dependency "minitar", "~> 0.5.4"
 
   if RUBY_PLATFORM == 'java'
     gem.platform = RUBY_PLATFORM
-
-    # bouncy-castle-java 1.5.0147 and jruby-openssl 0.9.5 are included in jruby 1.7.6 no need to include here
-    # and this avoids the gemspec jar path parsing issue of jar-dependencies 0.1.2
-    gem.add_runtime_dependency "jrjackson"                           #(Apache 2.0 license)
+    gem.add_runtime_dependency "jrjackson", "~> 0.2.8" #(Apache 2.0 license)
   else
-    gem.add_runtime_dependency "excon"    #(MIT license)
-    gem.add_runtime_dependency "oj"       #(MIT-style license)
+    gem.add_runtime_dependency "oj" #(MIT-style license)
   end
 
   if RUBY_ENGINE == "rbx"
@@ -59,14 +49,6 @@ Gem::Specification.new do |gem|
     gem.add_runtime_dependency "racc"
   end
 
-  # These are runtime-deps so you can do 'java -jar logstash.jar rspec <test>'
-  gem.add_development_dependency "rspec", "~> 2.14.0" #(MIT license)
-
-  gem.add_development_dependency "logstash-devutils"
-
-  # Testing dependencies
-  gem.add_development_dependency "ci_reporter", "1.9.3"
-  gem.add_development_dependency "simplecov"
-  gem.add_development_dependency "coveralls"
-
+  gem.add_development_dependency "rspec", "~> 2.14" #(MIT license)
+  gem.add_development_dependency "logstash-devutils", "~> 0"
 end
diff --git a/logstash.gemspec b/logstash.gemspec
deleted file mode 100644
index 598025b4777..00000000000
--- a/logstash.gemspec
+++ /dev/null
@@ -1,17 +0,0 @@
-# -*- encoding: utf-8 -*-
-require File.expand_path('../lib/logstash/version', __FILE__)
-
-Gem::Specification.new do |gem|
-  gem.authors       = ["Jordan Sissel", "Pete Fritchman", "Elasticsearch"]
-  gem.email         = ["jls@semicomplete.com", "petef@databits.net", "info@elasticsearch.com"]
-  gem.description   = %q{scalable log and event management (search, archive, pipeline)}
-  gem.summary       = %q{logstash - log and event management}
-  gem.homepage      = "http://www.elastic.co/guide/en/logstash/current/index.html"
-  gem.license       = "Apache License (2.0)"
-
-  gem.files         = Dir.glob(["lib/**/*.rb", "locales/*"])
-  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
-  gem.name          = "logstash"
-  gem.require_paths = ["lib"]
-  gem.version       = LOGSTASH_VERSION
-end
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 35ce8863c60..0f27581951b 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -5,7 +5,9 @@ namespace "artifact" do
       "LICENSE",
       "CHANGELOG",
       "CONTRIBUTORS",
-      "{bin,lib,spec,locales}/{,**/*}",
+      "bin/**/*",
+      "lib/bootstrap/**/*",
+      "lib/pluginmanager/**/*",
       "patterns/**/*",
       "vendor/??*/**/*",
       "Gemfile",
@@ -17,12 +19,10 @@ namespace "artifact" do
     return @exclude_paths if @exclude_paths
 
     @exclude_paths = []
-    @exclude_paths << "spec/reports/**/*"
     @exclude_paths << "**/*.gem"
     @exclude_paths << "**/test/files/slow-xpath.xml"
     @exclude_paths << "**/logstash-*/spec"
     @exclude_paths << "bin/bundle"
-    @exclude_paths << "bin/rspec"
 
     @exclude_paths
   end
@@ -43,11 +43,6 @@ namespace "artifact" do
     end.flatten.uniq
   end
 
-  task "use-defaults-gemfile" do
-    FileUtils.cp("Gemfile.defaults", "Gemfile")
-    FileUtils.cp("Gemfile.jruby-1.9.lock.defaults", "Gemfile.jruby-1.9.lock")
-  end
-
   # We create an empty bundle config file
   # This will allow the deb and rpm to create a file
   # with the correct user group and permission.
@@ -56,7 +51,7 @@ namespace "artifact" do
     File.open(".bundle/config", "w") { }
   end
 
-  task "prepare" => ["bootstrap", "use-defaults-gemfile", "plugin:install-default", "clean-bundle-config"]
+  task "prepare" => ["bootstrap", "plugin:install-default", "plugin:install-local-logstash-core-gem", "clean-bundle-config"]
 
   desc "Build a tar.gz of logstash with all dependencies"
   task "tar" => ["prepare"] do
@@ -64,6 +59,7 @@ namespace "artifact" do
     require "archive/tar/minitar"
     require "logstash/version"
     tarpath = "build/logstash-#{LOGSTASH_VERSION}.tar.gz"
+    puts("[artifact:tar] building #{tarpath}")
     gz = Zlib::GzipWriter.new(File.new(tarpath, "wb"), Zlib::BEST_COMPRESSION)
     tar = Archive::Tar::Minitar::Output.new(gz)
     files.each do |path|
@@ -98,6 +94,7 @@ namespace "artifact" do
     Rake::Task["dependency:rubyzip"].invoke
     require 'zip'
     zippath = "build/logstash-#{LOGSTASH_VERSION}.zip"
+    puts("[artifact:zip] building #{zippath}")
     File.unlink(zippath) if File.exists?(zippath)
     Zip::File.open(zippath, Zip::File::CREATE) do |zipfile|
       files.each do |path|
@@ -226,11 +223,13 @@ namespace "artifact" do
 
   desc "Build an RPM of logstash with all dependencies"
   task "rpm" => ["prepare"] do
+    puts("[artifact:rpm] building rpm package")
     package("centos", "5")
   end
 
   desc "Build an RPM of logstash with all dependencies"
   task "deb" => ["prepare"] do
+    puts("[artifact:deb] building deb package")
     package("ubuntu", "12.04")
   end
 end
diff --git a/rakelib/default_plugins.rb b/rakelib/default_plugins.rb
index d580645b447..ba57271ca8a 100644
--- a/rakelib/default_plugins.rb
+++ b/rakelib/default_plugins.rb
@@ -57,7 +57,6 @@ module RakeLib
       logstash-input-graphite
       logstash-input-imap
       logstash-input-irc
-      logstash-input-kafka
       logstash-input-log4j
       logstash-input-lumberjack
       logstash-input-pipe
@@ -74,6 +73,7 @@ module RakeLib
       logstash-input-unix
       logstash-input-xmpp
       logstash-input-zeromq
+      logstash-input-kafka
       logstash-output-cloudwatch
       logstash-output-csv
       logstash-output-elasticsearch
@@ -88,7 +88,6 @@ module RakeLib
       logstash-output-http
       logstash-output-irc
       logstash-output-juggernaut
-      logstash-output-kafka
       logstash-output-lumberjack
       logstash-output-nagios
       logstash-output-nagios_nsca
@@ -105,6 +104,7 @@ module RakeLib
       logstash-output-stdout
       logstash-output-tcp
       logstash-output-udp
+      logstash-output-kafka
     )
 
     # plugins required to run the logstash core specs
diff --git a/rakelib/dependency.rake b/rakelib/dependency.rake
index 212dcc7f18e..56471a99640 100644
--- a/rakelib/dependency.rake
+++ b/rakelib/dependency.rake
@@ -1,35 +1,35 @@
 
 namespace "dependency" do
   task "bundler" do
-    Rake::Task["gem:require"].invoke("bundler", ">= 1.3.5", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("bundler", "~> 1.9.4")
   end
 
   task "rbx-stdlib" do
-    Rake::Task["gem:require"].invoke("rubysl", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("rubysl", ">= 0")
   end # task rbx-stdlib
 
   task "archive-tar-minitar" do
-    Rake::Task["gem:require"].invoke("minitar", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("minitar", ">= 0")
   end # task archive-minitar
 
   task "stud" do
-    Rake::Task["gem:require"].invoke("stud", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("stud", ">= 0")
   end # task stud
 
   task "fpm" do
-    Rake::Task["gem:require"].invoke("fpm", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("fpm", ">= 0")
   end # task stud
 
   task "rubyzip" do
-    Rake::Task["gem:require"].invoke("rubyzip", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("rubyzip", ">= 0")
   end # task stud
 
   task "octokit" do
-    Rake::Task["gem:require"].invoke("octokit", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("octokit", ">= 0")
   end # task octokit
 
   task "gems" do
-    Rake::Task["gem:require"].invoke("gems", ">= 0", LogStash::Environment.logstash_gem_home)
+    Rake::Task["gem:require"].invoke("gems", ">= 0")
   end # task gems
 
 end # namespace dependency
diff --git a/rakelib/docs.rake b/rakelib/docs.rake
index 49f145c2745..5139fe4bc3b 100644
--- a/rakelib/docs.rake
+++ b/rakelib/docs.rake
@@ -1,5 +1,3 @@
-require 'logstash/environment'
-
 namespace "docs" do
 
   task "generate" do
@@ -10,6 +8,8 @@ namespace "docs" do
   end
 
   task "generate-docs" do
+    require "bootstrap/environment"
+
     list = Dir.glob("#{LogStash::Environment.logstash_gem_home}/gems/logstash-*/lib/logstash/{input,output,filter,codec}s/*.rb").join(" ")
     cmd = "bin/logstash docgen -o asciidoc_generated #{list}"
     system(cmd)
diff --git a/rakelib/gems.rake b/rakelib/gems.rake
index 9c711b5fe73..b5761f0db5a 100644
--- a/rakelib/gems.rake
+++ b/rakelib/gems.rake
@@ -2,9 +2,10 @@ require "rubygems/specification"
 require "rubygems/commands/install_command"
 
 namespace "gem" do
-  task "require",  :name, :requirement, :target do |task, args|
-    name, requirement, target = args[:name], args[:requirement], args[:target]
+  task "require",  :name, :requirement do |task, args|
+    name, requirement = args[:name], args[:requirement]
 
+    require "bootstrap/environment"
     ENV["GEM_HOME"] = ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
     Gem.use_paths(LogStash::Environment.logstash_gem_home)
 
@@ -12,7 +13,7 @@ namespace "gem" do
       gem name, requirement
     rescue Gem::LoadError => e
       puts "Installing #{name} #{requirement} because the build process needs it."
-      Rake::Task["gem:install"].invoke(name, requirement, target)
+      Rake::Task["gem:install"].invoke(name, requirement, LogStash::Environment.logstash_gem_home)
     end
     task.reenable # Allow this task to be run again
   end
diff --git a/rakelib/plugin.rake b/rakelib/plugin.rake
index a25b2d1959d..48708667287 100644
--- a/rakelib/plugin.rake
+++ b/rakelib/plugin.rake
@@ -56,4 +56,28 @@ namespace "plugin" do
 
     task.reenable # Allow this task to be run again
   end
+
+  task "clean-logstash-core-gem" do
+    Dir["logstash-core*.gem"].each do |gem|
+      rm(gem)
+    end
+  end
+
+  task "build-logstash-core-gem" => [ "clean-logstash-core-gem" ] do
+    puts("[plugin:build-logstash-core-gem] Building logstash-core.gemspec")
+
+    system("gem build logstash-core.gemspec")
+
+    task.reenable # Allow this task to be run again
+  end
+
+  task "install-local-logstash-core-gem" => [ "build-logstash-core-gem" ] do
+    gems = Dir["logstash-core*.gem"]
+    abort("ERROR: logstash-core gem not found") if gems.size != 1
+    puts("[plugin:install-local-logstash-core-gem] Installing #{gems.first}")
+    install_plugins("--no-verify", gems.first)
+
+    task.reenable # Allow this task to be run again
+  end
+
 end # namespace "plugin"
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 62545933b72..8b307dd96d2 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -1,16 +1,13 @@
-##
-# In Logstash we use rspec throw the runner interface so we need to
-# call explicity to exit in order to set the proper exit code, otherwise
+# we need to call exit explicity  in order to set the proper exit code, otherwise
 # most common CI systems can not know whats up with this tests.
-# In general this is not a problem, because the most common rspec usage
-# is throw the rake task, where rspec sets this himself internally.
-##
-require "logstash/pluginmanager/util"
+
+require "pluginmanager/util"
 
 namespace "test" do
   task "setup" do
-    require "logstash/bundler"
+    require "bootstrap/environment"
     LogStash::Bundler.setup!({:without => []})
+
     require "rspec/core/runner"
     require "rspec"
   end
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index ad671d5745f..f026b2dae56 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -125,14 +125,14 @@ namespace "vendor" do
   end
 
   task "gems", [:bundle] do |task, args|
-    require "logstash/environment"
-    require "logstash/bundler"
+    require "bootstrap/environment"
+
     Rake::Task["dependency:rbx-stdlib"] if LogStash::Environment.ruby_engine == "rbx"
     Rake::Task["dependency:stud"].invoke
     Rake::Task["dependency:bundler"].invoke
 
     puts("Invoking bundler install...")
-    output, exception = LogStash::Bundler.invoke_bundler!(:install => true)
+    output, exception = LogStash::Bundler.invoke!(:install => true)
     puts(output)
     raise(exception) if exception
   end # task gems
diff --git a/spec/lib/logstash/bundler_spec.rb b/spec/lib/logstash/bundler_spec.rb
index 63cb602d472..e821a668bd1 100644
--- a/spec/lib/logstash/bundler_spec.rb
+++ b/spec/lib/logstash/bundler_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "spec_helper"
-require "logstash/bundler"
 require "bundler/cli"
 
 describe LogStash::Bundler do
@@ -30,7 +29,7 @@
   context 'when invoking bundler' do
     original_stderr = $stderr
 
-    subject { LogStash::Bundler.invoke_bundler!(options) }
+    subject { LogStash::Bundler.invoke!(options) }
     # by default we want to fail fast on the test
     let(:options) { { :install => true, :max_tries => 0, :without => [:development]} }
     let(:bundler_args) { LogStash::Bundler.bundler_arguments(options) }
@@ -53,7 +52,7 @@
 
     it 'should call Bundler::CLI.start with the correct arguments' do
       expect(::Bundler::CLI).to receive(:start).with(bundler_args)
-      LogStash::Bundler.invoke_bundler!(options)
+      LogStash::Bundler.invoke!(options)
     end
 
     context 'abort with an exception' do
diff --git a/spec/util/gemfile_spec.rb b/spec/util/gemfile_spec.rb
index ef839347b0d..f4909c5bbcc 100644
--- a/spec/util/gemfile_spec.rb
+++ b/spec/util/gemfile_spec.rb
@@ -1,6 +1,6 @@
 # encoding: utf-8
 require "spec_helper"
-require "logstash/gemfile"
+require "pluginmanager/gemfile"
 
 describe "logstash Gemfile Manager" do
 
@@ -139,7 +139,7 @@
 
       context "has gems defined with a path" do
         let(:file) {
-          %Q[ 
+          %Q[
           source "https://rubygems.org"
           gemspec :a => "a", "b" => 1
           gem "foo", "> 1.0", :path => "/tmp/foo"
@@ -155,7 +155,7 @@
 
       context "no gems defined with a path" do
         let(:file) {
-          %Q[ 
+          %Q[
           source "https://rubygems.org"
           gemspec :a => "a", "b" => 1
           gem "no-fun"
@@ -168,7 +168,7 @@
       end
 
       context "keep a backup of the original file" do
-        
+
       end
     end
 
