diff --git a/logstash-core-event/lib/logstash/event.rb b/logstash-core-event/lib/logstash/event.rb
index b1eb9d46cdb..917bd825b02 100644
--- a/logstash-core-event/lib/logstash/event.rb
+++ b/logstash-core-event/lib/logstash/event.rb
@@ -67,6 +67,10 @@ class DeprecatedMethod < StandardError; end
   @@logger = DEFAULT_LOGGER
 
   def initialize(data = {})
+    reset(data)
+  end
+
+  def reset(data = {})
     @cancelled = false
     @data = data
     @accessors = LogStash::Util::Accessors.new(data)
diff --git a/logstash-core/lib/logstash/codecs/base.rb b/logstash-core/lib/logstash/codecs/base.rb
index 4d10950f534..cfd1c6d6e41 100644
--- a/logstash-core/lib/logstash/codecs/base.rb
+++ b/logstash-core/lib/logstash/codecs/base.rb
@@ -9,7 +9,10 @@ module LogStash::Codecs; class Base < LogStash::Plugin
   include LogStash::Config::Mixin
   config_name "codec"
 
+  attr_accessor :event_pool
+
   def initialize(params={})
+    @event_pool = params.delete(:event_pool)
     super
     config_init(@params)
     register if respond_to?(:register)
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index ae6616ddf01..445496d1dbf 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -119,6 +119,7 @@ class LogStash::Filters::Base < LogStash::Plugin
 
   public
   def initialize(params)
+    @event_pool = params.delete(:event_pool)
     super
     config_init(@params)
     @threadsafe = true
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 414cd714784..13f2ec394c6 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -47,9 +47,11 @@ class LogStash::Inputs::Base < LogStash::Plugin
 
   attr_accessor :params
   attr_accessor :threadable
+  attr_accessor :event_pool
 
   public
   def initialize(params={})
+    @event_pool = params.delete(:event_pool)
     super
     @threadable = false
     @stop_called = Concurrent::AtomicBoolean.new(false)
@@ -57,7 +59,6 @@ def initialize(params={})
     @tags ||= []
   end # def initialize
 
-  public
   def register
     raise "#{self.class}#register must be overidden"
   end # def register
@@ -98,6 +99,15 @@ def decorate(event)
     LogStash::Util::Decorators.add_tags(@tags,event,"inputs/#{self.class.name}")
   end
 
+  def obtain_event
+    if @event_pool.nil?
+      event = Event.new
+    else
+      event = @event_pool.obtain
+    end
+    event
+  end
+
   protected
   def fix_streaming_codecs
     require "logstash/codecs/plain"
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 3f59cc0e715..775fc5b5c8e 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -26,6 +26,7 @@ class LogStash::Outputs::Base < LogStash::Plugin
   config :workers, :validate => :number, :default => 1
 
   attr_reader :worker_plugins, :available_workers, :workers, :worker_plugins, :workers_not_supported
+  attr_accessor :event_pool
 
   def self.declare_threadsafe!
     declare_workers_not_supported!
@@ -59,6 +60,7 @@ def workers_not_supported(message=nil)
 
   public
   def initialize(params={})
+    @event_pool = params.delete(:event_pool)
     super
     config_init(@params)
 
@@ -80,7 +82,7 @@ def receive(event)
   public
   # To be overriden in implementations
   def multi_receive(events)
-    events.each {|event| receive(event) }
+    events.each {|event| receive(event); @event_pool.release(event) if !@event_pool.nil? }
   end
 
   private
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 3af7a6a3790..9ff07ed819b 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -13,11 +13,13 @@
 require "logstash/util/defaults_printer"
 require "logstash/shutdown_watcher"
 require "logstash/util/wrapped_synchronous_queue"
+require "logstash/util/event_pool"
 require "logstash/pipeline_reporter"
 require "logstash/output_delegator"
 
 module LogStash; class Pipeline
   attr_reader :inputs, :filters, :outputs, :worker_threads, :events_consumed, :events_filtered, :reporter, :pipeline_id, :logger, :thread, :config_str, :original_settings
+  attr_reader :inputs, :filters, :outputs, :worker_threads, :events_consumed, :events_filtered, :reporter, :pipeline_id, :logger, :thread, :config_str, :original_settings, :event_pool
 
   DEFAULT_OUTPUT_WORKERS = 1
 
@@ -52,6 +54,8 @@ def initialize(config_str, settings = {})
 
     @worker_threads = []
 
+    @event_pool = LogStash::Util::EventPool.new(@settings[:pipeline_batch_size] * ( @settings[:pipeline_workers] || DEFAULT_SETTINGS[:default_pipeline_workers] ) )
+
     grammar = LogStashConfigParser.new
     @config = grammar.parse(config_str)
     if @config.nil?
@@ -407,7 +411,7 @@ def shutdown_workers
 
   def plugin(plugin_type, name, *args)
     args << {} if args.empty?
-    args.first.merge!(LogStash::Config::Mixin::ALLOW_ENV_FLAG => @allow_env)
+    args.first.merge!(LogStash::Config::Mixin::ALLOW_ENV_FLAG => @allow_env, :event_pool => @event_pool)
 
     klass = LogStash::Plugin.lookup(plugin_type, name)
 
diff --git a/logstash-core/lib/logstash/util/event_pool.rb b/logstash-core/lib/logstash/util/event_pool.rb
new file mode 100644
index 00000000000..6e679ffef03
--- /dev/null
+++ b/logstash-core/lib/logstash/util/event_pool.rb
@@ -0,0 +1,28 @@
+require "thread"
+require "logstash/event"
+require "logstash/util/wrapped_concurrent_linked_queue"
+
+module LogStash; module Util
+  class EventPool
+    def initialize(max_size)
+      @max_size = max_size
+      @queue = LogStash::Util::WrappedConcurrentLinkedQueue.new
+    end
+
+    # TODO: Handle Max Size to prevent Exceptions
+    def obtain(data)
+      event = @queue.pop
+      if event.nil?
+        event = Event.new(data)
+      else
+        event.reset(data)
+      end
+
+      event
+    end
+
+    def release(event)
+      @queue.push(event)
+    end
+  end
+end end
diff --git a/logstash-core/lib/logstash/util/wrapped_concurrent_linked_queue.rb b/logstash-core/lib/logstash/util/wrapped_concurrent_linked_queue.rb
new file mode 100644
index 00000000000..3b0a8e0e093
--- /dev/null
+++ b/logstash-core/lib/logstash/util/wrapped_concurrent_linked_queue.rb
@@ -0,0 +1,29 @@
+# encoding: utf-8
+require "java"
+
+module LogStash; module Util
+  class WrappedConcurrentLinkedQueue
+    java_import java.util.concurrent.ConcurrentLinkedQueue
+    java_import java.util.concurrent.TimeUnit
+
+    def initialize
+      @queue = java.util.concurrent.ConcurrentLinkedQueue.new
+    end
+
+    # Push an object to the queue if the queue is full
+    # it will block until the object can be added to the queue.
+    #
+    # @param [Object] Object to add to the queue
+    def push(obj)
+      @queue.offer(obj)
+    end
+    alias_method(:<<, :push)
+    alias_method(:offer, :push)
+
+    def pop
+      @queue.poll
+    end
+    alias_method(:take, :pop)
+    alias_method(:poll, :pop)
+  end # class WrappedSynchronousQueue
+end end # module LogStash; module Util
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index 33110e53261..dae4cb2410f 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -22,7 +22,7 @@ class DummyCodec < LogStash::Codecs::Base
   milestone 2
 
   def decode(data)
-    data
+    event = @event_pool.obtain(data)
   end
 
   def encode(event)
@@ -47,7 +47,7 @@ def initialize(params={})
 
   def register
   end
-  
+
   def receive(event)
     @events << event
   end
@@ -83,6 +83,25 @@ def threadsafe?() true; end
   def close() end
 end
 
+class DummyInputGenerator < DummyInput
+  config_name = "dummy_generator"
+
+  config :message, :validate => :string, :default => "Hello world!"
+  config :count, :validate => :number, :default => 1
+
+  def run(queue)
+    for i in 1..count
+      puts "#{i}/#{count}"
+      @codec.decode(message) do |event|
+        decorate(event)
+        event["sequence"] = i
+        queue << event
+      end
+    end
+    queue << LogStash::ShutdownEvent.new
+  end
+end
+
 class TestPipeline < LogStash::Pipeline
   attr_reader :outputs, :settings, :logger
 end
@@ -389,7 +408,7 @@ class TestPipeline < LogStash::Pipeline
         }
       }
       filter {
-        multiline { 
+        multiline {
           pattern => "^NeverMatch"
           negate => true
           what => "previous"
@@ -401,7 +420,7 @@ class TestPipeline < LogStash::Pipeline
       EOS
     end
     let(:output) { DummyOutput.new }
-    
+
     before do
       allow(DummyOutput).to receive(:new).with(any_args).and_return(output)
       allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_return(LogStash::Inputs::Generator)
@@ -468,4 +487,47 @@ class TestPipeline < LogStash::Pipeline
        expect(pipeline1.instance_variables).to eq(pipeline2.instance_variables)
     end
   end
+
+  context "Event Pool" do
+    let(:event) { LogStash::Event.new }
+
+    let(:number_of_events) { 2 }
+    let(:config) do
+      <<-EOS
+      input {
+        dummy_generator {
+          message => ["message"]
+          count => #{number_of_events}
+        }
+      }
+      filter {
+        dummyfilter {}
+      }
+      output {
+        dummyoutput {}
+      }
+      EOS
+    end
+
+    let(:pipeline) { LogStash::Pipeline.new(config, { :debug_config => true }) }
+
+    before do
+      allow(LogStash::Util::EventPool).to receive(:obtain)
+      allow(LogStash::Util::EventPool).to receive(:release)
+
+      allow(LogStash::Util::WrappedConcurrentLinkedQueue).to receive(:pop)
+      allow(LogStash::Util::WrappedConcurrentLinkedQueue).to receive(:push)
+
+      allow(LogStash::Plugin).to receive(:lookup).with("input", "dummy_generator").and_return(DummyInputGenerator)
+      allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_return(DummyCodec)
+      allow(LogStash::Plugin).to receive(:lookup).with("filter", "dummyfilter").and_return(DummyFilter)
+      allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput").and_return(DummyOutput)
+    end
+
+    it "reuses existing event" do
+      expect(pipeline.event_pool).to receive(:obtain).and_call_original
+      thread = Thread.new { pipeline.run }
+      thread.join
+    end
+  end
 end
diff --git a/logstash-core/spec/logstash/util/wrapped_concurrent_linked_queue_spec.rb b/logstash-core/spec/logstash/util/wrapped_concurrent_linked_queue_spec.rb
new file mode 100644
index 00000000000..859e2272423
--- /dev/null
+++ b/logstash-core/spec/logstash/util/wrapped_concurrent_linked_queue_spec.rb
@@ -0,0 +1,31 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/util/wrapped_concurrent_linked_queue"
+
+describe LogStash::Util::WrappedConcurrentLinkedQueue do
+  context "#push" do
+    it "returns true" do
+      expect(subject.push("Bonjour")).to be(true)
+    end
+  end
+
+  context "#pop" do
+    context "when queue is empty" do
+      it "returns null" do
+        expect(subject.pop).to be_nil
+      end
+    end
+
+    context "when queue has elements" do
+      let(:element) { "Hello World!" }
+
+      before do
+        subject.push(element)
+      end
+
+      it "returns an element" do
+        expect(subject.pop).to eq(element)
+      end
+    end
+  end
+end
