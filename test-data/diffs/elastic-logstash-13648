diff --git a/bin/logstash.bat b/bin/logstash.bat
index 08f32925f7e..28850bb8f73 100644
--- a/bin/logstash.bat
+++ b/bin/logstash.bat
@@ -47,9 +47,6 @@ if "%MAYBE_JVM_OPTIONS_PARSER_FAILED%" == "jvm_options_parser_failed" (
 )
 set JAVA_OPTS=%LS_JAVA_OPTS%
 
-rem check the Java version
-%JAVA% -cp "%CLASSPATH%" "org.logstash.util.JavaVersionChecker" || exit /b 1
-
 %JAVA% %JAVA_OPTS% -cp "%CLASSPATH%" org.logstash.Logstash %*
 
 goto :end
diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index 28096f70824..0ce1479f09c 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -139,11 +139,12 @@ setup_java() {
 
   CLASSPATH="$(setup_classpath $LOGSTASH_JARS)"
 
-  # Verify the version of Java being used, and exit if the wrong version of Java is not available.
-  if ! "${JAVACMD}" -cp "${CLASSPATH}" org.logstash.util.JavaVersionChecker ; then
-    exit 1
-  fi
   JAVA_OPTS=`exec "${JAVACMD}" -cp "${CLASSPATH}" org.logstash.launchers.JvmOptionsParser "$LOGSTASH_HOME" "$LS_JVM_OPTS"`
+  EXIT_CODE=$?
+  if [ $EXIT_CODE -ne 0 ]; then
+    exit $EXIT_CODE
+  fi
+
   unset CLASSPATH
   export JAVA_OPTS
 }
diff --git a/logstash-core/src/main/java/org/logstash/launchers/JvmOptionsParser.java b/logstash-core/src/main/java/org/logstash/launchers/JvmOptionsParser.java
index 653acb9c671..04958cd6ccc 100644
--- a/logstash-core/src/main/java/org/logstash/launchers/JvmOptionsParser.java
+++ b/logstash-core/src/main/java/org/logstash/launchers/JvmOptionsParser.java
@@ -1,5 +1,7 @@
 package org.logstash.launchers;
 
+import org.logstash.util.JavaVersion;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -68,10 +70,24 @@ public static void main(final String[] args) throws InterruptedException, IOExce
                     "Expected two arguments specifying path to LOGSTASH_HOME and an optional LS_JVM_OPTS, but was " + Arrays.toString(args)
             );
         }
+        bailOnOldJava();
         final String lsJavaOpts = System.getenv("LS_JAVA_OPTS");
         handleJvmOptions(args, lsJavaOpts);
     }
 
+    static void bailOnOldJava(){
+        if (JavaVersion.CURRENT.compareTo(JavaVersion.JAVA_11) < 0) {
+            final String message = String.format(
+                    Locale.ROOT,
+                    "The minimum required Java version is 11; your Java version from [%s] does not meet this requirement",
+                    System.getProperty("java.home")
+            );
+            System.err.println(message);
+            System.exit(1);
+        }
+    }
+
+
     static void handleJvmOptions(String[] args, String lsJavaOpts) {
         final JvmOptionsParser parser = new JvmOptionsParser(args[0]);
         final String jvmOpts = args.length == 2 ? args[1] : null;
diff --git a/logstash-core/src/main/java/org/logstash/util/JavaVersionChecker.java b/logstash-core/src/main/java/org/logstash/util/JavaVersionChecker.java
deleted file mode 100644
index c46eeadb083..00000000000
--- a/logstash-core/src/main/java/org/logstash/util/JavaVersionChecker.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Licensed to Elasticsearch B.V. under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch B.V. licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *	http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.logstash.util;
-
-import java.util.Arrays;
-import java.util.Locale;
-
-/**
- * Simple program that checks if the runtime Java version is at least 11.
- * Based on JavaVersionChecker from Elasticsearch
- */
-final class JavaVersionChecker {
-
-    private JavaVersionChecker() {}
-
-    /**
-     * The main entry point. The exit code is 0 if the Java version is at least 11, otherwise the exit code is 1.
-     *
-     * @param args the args to the program which are rejected if not empty
-     */
-    public static void main(final String[] args) {
-        // no leniency!
-        if (args.length != 0) {
-            throw new IllegalArgumentException("expected zero arguments but was " + Arrays.toString(args));
-        }
-        if (JavaVersion.CURRENT.compareTo(JavaVersion.JAVA_11) < 0) {
-            final String message = String.format(
-                    Locale.ROOT,
-                    "the minimum required Java version is 11; your Java version from [%s] does not meet this requirement",
-                    System.getProperty("java.home")
-            );
-            errPrintln(message);
-            exit(1);
-        }
-        exit(0);
-    }
-
-    /**
-     * Prints a string and terminates the line on standard error.
-     *
-     * @param message the message to print
-     */
-    static void errPrintln(final String message) {
-        System.err.println(message);
-    }
-
-    /**
-     * Exit the VM with the specified status.
-     *
-     * @param status the status
-     */
-    static void exit(final int status) {
-        System.exit(status);
-    }
-
-}
\ No newline at end of file
