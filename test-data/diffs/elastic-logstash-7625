diff --git a/logstash-core/src/main/java/org/logstash/Accessors.java b/logstash-core/src/main/java/org/logstash/Accessors.java
index ec65795c334..46ae3920671 100644
--- a/logstash-core/src/main/java/org/logstash/Accessors.java
+++ b/logstash-core/src/main/java/org/logstash/Accessors.java
@@ -15,19 +15,19 @@ public Accessors(Map<String, Object> data) {
     }
 
     public Object get(String reference) {
-        FieldReference field = PathCache.getInstance().cache(reference);
+        FieldReference field = PathCache.cache(reference);
         Object target = findTarget(field);
         return (target == null) ? null : fetch(target, field.getKey());
     }
 
     public Object set(String reference, Object value) {
-        FieldReference field = PathCache.getInstance().cache(reference);
+        FieldReference field = PathCache.cache(reference);
         Object target = findCreateTarget(field);
         return store(target, field.getKey(), value);
     }
 
     public Object del(String reference) {
-        FieldReference field = PathCache.getInstance().cache(reference);
+        FieldReference field = PathCache.cache(reference);
         Object target = findTarget(field);
         if (target != null) {
             if (target instanceof Map) {
@@ -48,7 +48,7 @@ public Object del(String reference) {
     }
 
     public boolean includes(String reference) {
-        FieldReference field = PathCache.getInstance().cache(reference);
+        FieldReference field = PathCache.cache(reference);
         Object target = findTarget(field);
         if (target instanceof Map && foundInMap((Map<String, Object>) target, field.getKey())) {
             return true;
@@ -122,7 +122,7 @@ private Object findCreateTarget(FieldReference field) {
         return target;
     }
 
-    private boolean foundInList(List<Object> target, int index) {
+    private static boolean foundInList(List<Object> target, int index) {
         try {
             int offset = listIndex(index, target.size());
             return target.get(offset) != null;
@@ -132,11 +132,11 @@ private boolean foundInList(List<Object> target, int index) {
 
     }
 
-    private boolean foundInMap(Map<String, Object> target, String key) {
+    private static boolean foundInMap(Map<String, Object> target, String key) {
         return target.containsKey(key);
     }
 
-    private Object fetch(Object target, String key) {
+    private static Object fetch(Object target, String key) {
         if (target instanceof Map) {
             Object result = ((Map<String, Object>) target).get(key);
             return result;
@@ -154,7 +154,7 @@ private Object fetch(Object target, String key) {
         }
     }
 
-    private Object store(Object target, String key, Object value) {
+    private static Object store(Object target, String key, Object value) {
         if (target instanceof Map) {
             ((Map<String, Object>) target).put(key, value);
         } else if (target instanceof List) {
@@ -184,14 +184,14 @@ private Object store(Object target, String key, Object value) {
         return value;
     }
 
-    private boolean isCollection(Object target) {
+    private static boolean isCollection(Object target) {
         if (target == null) {
             return false;
         }
         return (target instanceof Map || target instanceof List);
     }
 
-    private ClassCastException newCollectionException(Object target) {
+    private static ClassCastException newCollectionException(Object target) {
         return new ClassCastException("expecting List or Map, found "  + target.getClass());
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/PathCache.java b/logstash-core/src/main/java/org/logstash/PathCache.java
index 55e7ac8b867..68414cf3af2 100644
--- a/logstash-core/src/main/java/org/logstash/PathCache.java
+++ b/logstash-core/src/main/java/org/logstash/PathCache.java
@@ -2,33 +2,24 @@
 
 import java.util.concurrent.ConcurrentHashMap;
 
-public class PathCache {
+public final class PathCache {
 
-    private static PathCache instance = null;
-    private static ConcurrentHashMap<String, FieldReference> cache = new ConcurrentHashMap<>();
+    private static final ConcurrentHashMap<String, FieldReference> cache = new ConcurrentHashMap<>();
 
-    private FieldReference timestamp;
+    private static final FieldReference timestamp = cache(Event.TIMESTAMP);
 
     private static final String BRACKETS_TIMESTAMP = "[" + Event.TIMESTAMP + "]";
 
-    protected PathCache() {
+    static {
         // inject @timestamp
-        this.timestamp = cache(Event.TIMESTAMP);
-        cache(BRACKETS_TIMESTAMP, this.timestamp);
+        cache(BRACKETS_TIMESTAMP, timestamp);
     }
 
-    public static PathCache getInstance() {
-        if (instance == null) {
-            instance = new PathCache();
-        }
-        return instance;
-    }
-
-    public boolean isTimestamp(String reference) {
-        return (cache(reference) == this.timestamp);
+    public static boolean isTimestamp(String reference) {
+        return cache(reference) == timestamp;
     }
 
-    public FieldReference cache(String reference) {
+    public static FieldReference cache(String reference) {
         // atomicity between the get and put is not important
         FieldReference result = cache.get(reference);
         if (result == null) {
@@ -38,7 +29,7 @@ public FieldReference cache(String reference) {
         return result;
     }
 
-    public FieldReference cache(String reference, FieldReference field) {
+    public static FieldReference cache(String reference, FieldReference field) {
         cache.put(reference, field);
         return field;
     }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 7ccddc61a87..4e7cf4bb230 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -120,7 +120,7 @@ public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, I
         {
             String r = reference.asJavaString();
 
-            if (PathCache.getInstance().isTimestamp(r)) {
+            if (PathCache.isTimestamp(r)) {
                 if (!(value instanceof JrubyTimestampExtLibrary.RubyTimestamp)) {
                     throw context.runtime.newTypeError("wrong argument type " + value.getMetaClass() + " (expected LogStash::Timestamp)");
                 }
