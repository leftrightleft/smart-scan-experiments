diff --git a/logstash-core/lib/logstash/execution_context.rb b/logstash-core/lib/logstash/execution_context.rb
index 62f42d09431..5eaef5d7e2a 100644
--- a/logstash-core/lib/logstash/execution_context.rb
+++ b/logstash-core/lib/logstash/execution_context.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require "logstash/util/dead_letter_queue_manager"
+
 module LogStash
   class ExecutionContext
     attr_reader :pipeline, :agent, :dlq_writer
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 089d6948dbe..f1c000f3e3c 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -12,7 +12,6 @@
 require "logstash/instrument/null_metric"
 require "logstash/instrument/namespaced_null_metric"
 require "logstash/instrument/collector"
-require "logstash/util/dead_letter_queue_manager"
 require "logstash/queue_factory"
 require "logstash/compiler"
 require "securerandom"
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index c29fb48f888..44398a926e1 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -15,7 +15,6 @@
 require "logstash/instrument/null_metric"
 require "logstash/instrument/namespaced_null_metric"
 require "logstash/instrument/collector"
-require "logstash/util/dead_letter_queue_manager"
 require "logstash/filter_delegator"
 require "logstash/queue_factory"
 require "logstash/plugins/plugin_factory"
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 7680f05719e..0c6a4710a29 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -3,7 +3,6 @@
 require "logstash/logging"
 require "logstash/config/mixin"
 require "logstash/instrument/null_metric"
-require "logstash/util/dead_letter_queue_manager"
 require "concurrent"
 require "securerandom"
 
@@ -21,9 +20,9 @@ class LogStash::Plugin
   # for a specific plugin.
   config :enable_metric, :validate => :boolean, :default => true
 
-  # Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
-  # It is strongly recommended to set this ID in your configuration. This is particularly useful 
-  # when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
+  # Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one.
+  # It is strongly recommended to set this ID in your configuration. This is particularly useful
+  # when you have two or more plugins of the same type, for example, if you have 2 grok filters.
   # Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.
   #
   # [source,ruby]
diff --git a/logstash-core/lib/logstash/util/dead_letter_queue_manager.rb b/logstash-core/lib/logstash/util/dead_letter_queue_manager.rb
index 768fc4d2da0..548cf47a69e 100644
--- a/logstash-core/lib/logstash/util/dead_letter_queue_manager.rb
+++ b/logstash-core/lib/logstash/util/dead_letter_queue_manager.rb
@@ -1,61 +1,2 @@
-require 'logstash/environment'
-
-module LogStash; module Util
-  class PluginDeadLetterQueueWriter
-
-    attr_reader :plugin_id, :plugin_type, :inner_writer
-
-    def initialize(inner_writer, plugin_id, plugin_type)
-      @plugin_id = plugin_id
-      @plugin_type = plugin_type
-      @inner_writer = inner_writer
-    end
-
-    def write(logstash_event, reason)
-      if @inner_writer && @inner_writer.is_open
-        @inner_writer.writeEntry(logstash_event.to_java, @plugin_type, @plugin_id, reason)
-      end
-    end
-
-    def close
-      if @inner_writer && @inner_writer.is_open
-        @inner_writer.close
-      end
-    end
-  end
-
-  class DummyDeadLetterQueueWriter
-    # class uses to represent a writer when dead_letter_queue is disabled
-    def initialize
-    end
-
-    def write(logstash_event, reason)
-      # noop
-    end
-
-    def is_open
-      false
-    end
-
-    def close
-      # noop
-    end
-  end
-
-  class DeadLetterQueueFactory
-    java_import org.logstash.common.DeadLetterQueueFactory
-
-    def self.get(pipeline_id)
-      if LogStash::SETTINGS.get("dead_letter_queue.enable")
-        return DeadLetterQueueWriter.new(
-          DeadLetterQueueFactory.getWriter(pipeline_id, LogStash::SETTINGS.get("path.dead_letter_queue"), LogStash::SETTINGS.get('dead_letter_queue.max_bytes')))
-      else
-        return DeadLetterQueueWriter.new(nil)
-      end
-    end
-
-    def self.close(pipeline_id)
-      DeadLetterQueueFactory.close(pipeline_id)
-    end
-  end
-end end
+# The contents of this file have been ported to Java. It is included for for compatibility
+# with plugins that directly include it.
diff --git a/logstash-core/spec/logstash/execution_context_spec.rb b/logstash-core/spec/logstash/execution_context_spec.rb
index 68bf97d7ee9..13a9adc144b 100644
--- a/logstash-core/spec/logstash/execution_context_spec.rb
+++ b/logstash-core/spec/logstash/execution_context_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "spec_helper"
-require "logstash/util/dead_letter_queue_manager"
 require "logstash/execution_context"
 
 describe LogStash::ExecutionContext do
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 4bc4aca16d7..6595dc09bfc 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -11,6 +11,7 @@
 import org.logstash.ackedqueue.ext.JRubyAckedQueueExt;
 import org.logstash.ackedqueue.ext.JRubyWrappedAckedQueueExt;
 import org.logstash.common.BufferedTokenizerExt;
+import org.logstash.common.AbstractDeadLetterQueueWriterExt;
 import org.logstash.config.ir.compiler.FilterDelegatorExt;
 import org.logstash.config.ir.compiler.OutputDelegatorExt;
 import org.logstash.config.ir.compiler.OutputStrategyExt;
@@ -98,6 +99,12 @@ public final class RubyUtil {
 
     public static final RubyClass TIMED_EXECUTION_CLASS;
 
+    public static final RubyClass ABSTRACT_DLQ_WRITER_CLASS;
+
+    public static final RubyClass DUMMY_DLQ_WRITER_CLASS;
+
+    public static final RubyClass PLUGIN_DLQ_WRITER_CLASS;
+
     /**
      * Logstash Ruby Module.
      */
@@ -135,6 +142,26 @@ public final class RubyUtil {
         METRIC_CLASS.defineAnnotatedMethods(MetricExt.class);
         NAMESPACED_METRIC_CLASS.defineAnnotatedMethods(NamespacedMetricExt.class);
         TIMED_EXECUTION_CLASS.defineAnnotatedMethods(MetricExt.TimedExecution.class);
+        final RubyModule util = LOGSTASH_MODULE.defineModuleUnder("Util");
+        ABSTRACT_DLQ_WRITER_CLASS = util.defineClassUnder(
+            "AbstractDeadLetterQueueWriterExt", RUBY.getObject(),
+            ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR
+        );
+        ABSTRACT_DLQ_WRITER_CLASS.defineAnnotatedMethods(AbstractDeadLetterQueueWriterExt.class);
+        DUMMY_DLQ_WRITER_CLASS = util.defineClassUnder(
+            "DummyDeadLetterQueueWriter", ABSTRACT_DLQ_WRITER_CLASS,
+            AbstractDeadLetterQueueWriterExt.DummyDeadLetterQueueWriterExt::new
+        );
+        DUMMY_DLQ_WRITER_CLASS.defineAnnotatedMethods(
+            AbstractDeadLetterQueueWriterExt.DummyDeadLetterQueueWriterExt.class
+        );
+        PLUGIN_DLQ_WRITER_CLASS = util.defineClassUnder(
+            "PluginDeadLetterQueueWriter", ABSTRACT_DLQ_WRITER_CLASS,
+            AbstractDeadLetterQueueWriterExt.PluginDeadLetterQueueWriterExt::new
+        );
+        PLUGIN_DLQ_WRITER_CLASS.defineAnnotatedMethods(
+            AbstractDeadLetterQueueWriterExt.PluginDeadLetterQueueWriterExt.class
+        );
         OUTPUT_STRATEGY_REGISTRY = setupLogstashClass(
             OutputStrategyExt.OutputStrategyRegistryExt::new,
             OutputStrategyExt.OutputStrategyRegistryExt.class
diff --git a/logstash-core/src/main/java/org/logstash/common/AbstractDeadLetterQueueWriterExt.java b/logstash-core/src/main/java/org/logstash/common/AbstractDeadLetterQueueWriterExt.java
new file mode 100644
index 00000000000..57226a4f015
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/common/AbstractDeadLetterQueueWriterExt.java
@@ -0,0 +1,201 @@
+package org.logstash.common;
+
+import java.io.IOException;
+import org.jruby.Ruby;
+import org.jruby.RubyBoolean;
+import org.jruby.RubyClass;
+import org.jruby.RubyObject;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.common.io.DeadLetterQueueWriter;
+import org.logstash.ext.JrubyEventExtLibrary;
+
+@JRubyClass(name = "AbstractDeadLetterQueueWriter")
+public abstract class AbstractDeadLetterQueueWriterExt extends RubyObject {
+
+    AbstractDeadLetterQueueWriterExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    @JRubyMethod(name = "is_open")
+    public final RubyBoolean isOpen(final ThreadContext context) {
+        return open(context);
+    }
+
+    @JRubyMethod(name = "plugin_id")
+    public final IRubyObject pluginId(final ThreadContext context) {
+        return getPluginId(context);
+    }
+
+    @JRubyMethod(name = "plugin_type")
+    public final IRubyObject pluginType(final ThreadContext context) {
+        return getPluginType(context);
+    }
+
+    @JRubyMethod(name = "inner_writer")
+    public final IRubyObject innerWriter(final ThreadContext context) {
+        return getInnerWriter(context);
+    }
+
+    @JRubyMethod
+    public final IRubyObject write(final ThreadContext context, final IRubyObject event,
+        final IRubyObject reason) {
+        return doWrite(context, event, reason);
+    }
+
+    @JRubyMethod
+    public final IRubyObject close(final ThreadContext context) {
+        return doClose(context);
+    }
+
+    protected abstract RubyBoolean open(ThreadContext context);
+
+    protected abstract IRubyObject getPluginId(ThreadContext context);
+
+    protected abstract IRubyObject getPluginType(ThreadContext context);
+
+    protected abstract IRubyObject getInnerWriter(ThreadContext context);
+
+    protected abstract IRubyObject doWrite(ThreadContext context, IRubyObject event,
+        IRubyObject reason);
+
+    protected abstract IRubyObject doClose(ThreadContext context);
+
+    @JRubyClass(name = "DummyDeadLetterQueueWriter")
+    public static final class DummyDeadLetterQueueWriterExt
+        extends AbstractDeadLetterQueueWriterExt {
+
+        public DummyDeadLetterQueueWriterExt(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+
+        @Override
+        @JRubyMethod
+        public IRubyObject initialize(final ThreadContext context) {
+            return super.initialize(context);
+        }
+
+        @Override
+        protected IRubyObject getPluginId(final ThreadContext context) {
+            return context.nil;
+        }
+
+        @Override
+        protected IRubyObject getPluginType(final ThreadContext context) {
+            return context.nil;
+        }
+
+        @Override
+        protected IRubyObject getInnerWriter(final ThreadContext context) {
+            return context.nil;
+        }
+
+        @Override
+        protected IRubyObject doWrite(final ThreadContext context, final IRubyObject event,
+            final IRubyObject reason) {
+            return context.nil;
+        }
+
+        @Override
+        protected IRubyObject doClose(final ThreadContext context) {
+            return context.nil;
+        }
+
+        @Override
+        protected RubyBoolean open(final ThreadContext context) {
+            return context.fals;
+        }
+    }
+
+    @JRubyClass(name = "PluginDeadLetterQueueWriter")
+    public static final class PluginDeadLetterQueueWriterExt
+        extends AbstractDeadLetterQueueWriterExt {
+
+        private IRubyObject writerWrapper;
+
+        private DeadLetterQueueWriter innerWriter;
+
+        private IRubyObject pluginId;
+
+        private IRubyObject pluginType;
+
+        private String pluginIdString;
+
+        private String pluginTypeString;
+
+        public PluginDeadLetterQueueWriterExt(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+
+        @JRubyMethod
+        public IRubyObject initialize(final ThreadContext context,
+            final IRubyObject innerWriter, final IRubyObject pluginId,
+            final IRubyObject pluginType) {
+            writerWrapper = innerWriter;
+            if (writerWrapper.getJavaClass().equals(DeadLetterQueueWriter.class)) {
+                this.innerWriter = (DeadLetterQueueWriter) writerWrapper.toJava(
+                    DeadLetterQueueWriter.class
+                );
+            }
+            this.pluginId = pluginId;
+            if (!pluginId.isNil()) {
+                pluginIdString = pluginId.asJavaString();
+            }
+            this.pluginType = pluginType;
+            if (!pluginType.isNil()) {
+                pluginTypeString = pluginType.asJavaString();
+            }
+            return this;
+        }
+
+        @Override
+        protected IRubyObject getPluginId(final ThreadContext context) {
+            return pluginId;
+        }
+
+        @Override
+        protected IRubyObject getPluginType(final ThreadContext context) {
+            return pluginType;
+        }
+
+        @Override
+        protected IRubyObject getInnerWriter(final ThreadContext context) {
+            return writerWrapper;
+        }
+
+        @Override
+        protected IRubyObject doWrite(final ThreadContext context, final IRubyObject event,
+            final IRubyObject reason) {
+            if (hasOpenWriter()) {
+                try {
+                    innerWriter.writeEntry(
+                        ((JrubyEventExtLibrary.RubyEvent) event).getEvent(),
+                        pluginIdString, pluginTypeString, reason.asJavaString()
+                    );
+                } catch (final IOException ex) {
+                    throw new IllegalStateException(ex);
+                }
+            }
+            return context.nil;
+        }
+
+        @Override
+        protected IRubyObject doClose(final ThreadContext context) {
+            if (hasOpenWriter()) {
+                innerWriter.close();
+            }
+            return context.nil;
+        }
+
+        @Override
+        protected RubyBoolean open(final ThreadContext context) {
+            return context.runtime.newBoolean(hasOpenWriter());
+        }
+
+        private boolean hasOpenWriter() {
+            return innerWriter != null && innerWriter.isOpen();
+        }
+    }
+}
