diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index bc3ba8b1715..e5216fce45c 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -191,9 +191,9 @@ dependencies {
     }
     implementation 'org.javassist:javassist:3.26.0-GA'
     testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}:tests"
+    testImplementation 'junit:junit:4.13.2'
     testImplementation 'org.hamcrest:hamcrest:2.2'
     testImplementation 'org.hamcrest:hamcrest-library:2.2'
-    testImplementation 'junit:junit:4.12'
     testImplementation 'net.javacrumbs.json-unit:json-unit:2.3.0'
     testImplementation 'org.elasticsearch:securemock:1.2'
     testImplementation 'org.assertj:assertj-core:3.11.1'
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index 768d4baea99..93f4aaf983a 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -20,14 +20,21 @@
 
 package org.logstash;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
-
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ExecutionException;
+import java.util.stream.Collectors;
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.UncheckedExecutionException;
 import org.jruby.RubyString;
+import org.jruby.runtime.Helpers;
+import org.jruby.util.collections.ConcurrentWeakHashMap;
 
 /**
  * Represents a reference to another field of the event {@link Event}
@@ -46,52 +53,67 @@ public static class IllegalSyntaxException extends RuntimeException {
 
     /**
      * This type indicates that the referenced that is the metadata of an {@link Event} found in
-     * {@link Event#metadata}.
+     * {@link Event#getMetadata()}.
      */
     public static final int META_PARENT = 0;
 
     /**
-     * This type indicates that the referenced data must be looked up from {@link Event#metadata}.
+     * This type indicates that the referenced data must be looked up from {@link Event#getMetadata()}.
      */
     public static final int META_CHILD = 1;
 
     /**
-     * This type indicates that the referenced data must be looked up from {@link Event#data}.
+     * This type indicates that the referenced data must be looked up from {@link Event#getData()}.
      */
     private static final int DATA_CHILD = -1;
 
     private static final String[] EMPTY_STRING_ARRAY = new String[0];
 
     /**
-     * Holds all existing {@link FieldReference} instances for de-duplication.
+     * The tokenizer that will be used when parsing field references
      */
-    private static final Map<FieldReference, FieldReference> DEDUP = new HashMap<>(64);
+    private static final StrictTokenizer TOKENIZER = new StrictTokenizer();
 
     /**
-     * The tokenizer that will be used when parsing field references
+     * Holds all existing {@link FieldReference} instances for de-duplication.
      */
-    private static final StrictTokenizer TOKENIZER = new StrictTokenizer();
+    // the trick here is that there has to be another strong reference to the FieldReference instance in the map
+    // (either referenced directly e.g. from the compiled pipeline or through the caches)
+    // NOTE: while de-duplication seems redundant, the compiled pipeline bits rely on having the same instance returned
+    static final ConcurrentMap<FieldReference, WeakReference<FieldReference>> DEDUP = new ConcurrentWeakHashMap<>(64);
 
     /**
      * Unique {@link FieldReference} pointing at the timestamp field in a {@link Event}.
      */
     public static final FieldReference TIMESTAMP_REFERENCE =
-        deduplicate(new FieldReference(EMPTY_STRING_ARRAY, Event.TIMESTAMP, DATA_CHILD));
+            deduplicate(new FieldReference(EMPTY_STRING_ARRAY, Event.TIMESTAMP, DATA_CHILD));
 
     private static final FieldReference METADATA_PARENT_REFERENCE =
-        new FieldReference(EMPTY_STRING_ARRAY, Event.METADATA, META_PARENT);
+            new FieldReference(EMPTY_STRING_ARRAY, Event.METADATA, META_PARENT);
+
+    static final int CACHE_MAXIMUM_SIZE = 10_000;
 
     /**
      * Cache of all existing {@link FieldReference} by their {@link RubyString} source.
      */
-    private static final Map<RubyString, FieldReference> RUBY_CACHE =
-        new ConcurrentHashMap<>(64, 0.2F, 1);
+    static final LoadingCache<RubyString, FieldReference> RUBY_CACHE = CacheBuilder.newBuilder()
+            .maximumSize(CACHE_MAXIMUM_SIZE)
+            .build(new CacheLoader<RubyString, FieldReference>() {
+                public FieldReference load(RubyString key) {
+                    return deduplicate(parse(key));
+                }
+            });
 
     /**
      * Cache of all existing {@link FieldReference} by their {@link String} source.
      */
-    private static final Map<String, FieldReference> CACHE =
-        new ConcurrentHashMap<>(64, 0.2F, 1);
+    static final LoadingCache<String, FieldReference> CACHE = CacheBuilder.newBuilder()
+            .maximumSize(CACHE_MAXIMUM_SIZE)
+            .build(new CacheLoader<String, FieldReference>() {
+                public FieldReference load(String key) {
+                    return deduplicate(parse(key));
+                }
+            });
 
     private final String[] path;
 
@@ -113,32 +135,42 @@ private FieldReference(final String[] path, final String key, final int type) {
     }
 
     public static FieldReference from(final RubyString reference) {
-        // atomicity between the get and put is not important
-        final FieldReference result = RUBY_CACHE.get(reference);
-        if (result != null) {
-            return result;
+        FieldReference result = RUBY_CACHE.getIfPresent(reference);
+        if (result == null) {
+            try {
+                result = RUBY_CACHE.get(reference.newFrozen());
+            } catch (ExecutionException|UncheckedExecutionException e) {
+                unwrapAndThrow(e);
+            }
         }
-        return RUBY_CACHE.computeIfAbsent(reference.newFrozen(), ref -> from(ref.asJavaString()));
+        return result;
     }
 
-    public static FieldReference from(final String reference) {
-        // atomicity between the get and put is not important
-        final FieldReference result = CACHE.get(reference);
-        if (result != null) {
-            return result;
+    public static FieldReference from(final String reference) throws IllegalSyntaxException {
+        try {
+            return CACHE.get(reference);
+        } catch (ExecutionException|UncheckedExecutionException e) {
+            unwrapAndThrow(e); return null; // return never happens
         }
-        return parseToCache(reference);
     }
 
     public static boolean isValid(final String reference) {
         try {
-            FieldReference.from(reference);
+            CACHE.get(reference);
             return true;
-        } catch (IllegalSyntaxException ise) {
-            return false;
+        } catch (ExecutionException|UncheckedExecutionException e) {
+            if (e.getCause() instanceof IllegalSyntaxException) return false;
+            unwrapAndThrow(e); return false; // return never happens
         }
     }
 
+    private static void unwrapAndThrow(final Exception e) throws IllegalSyntaxException {
+        if (e.getCause() != null) {
+            Helpers.throwException(e.getCause());
+        }
+        Helpers.throwException(e);
+    }
+
     /**
      * Returns the type of this instance to allow for fast switch operations in
      * {@link Event#getUnconvertedField(FieldReference)} and
@@ -170,20 +202,12 @@ public int hashCode() {
         return hash;
     }
 
-    /**
-     * De-duplicates instances using {@link FieldReference#DEDUP}. This method must be
-     * {@code synchronized} since we are running non-atomic get-put sequence on
-     * {@link FieldReference#DEDUP}.
-     * @param parsed FieldReference to de-duplicate
-     * @return De-duplicated FieldReference
-     */
-    private static synchronized FieldReference deduplicate(final FieldReference parsed) {
-        FieldReference ret = DEDUP.get(parsed);
-        if (ret == null) {
-            DEDUP.put(parsed, parsed);
-            ret = parsed;
-        }
-        return ret;
+    @Override
+    public String toString() {
+        List<String> fullPath = new ArrayList<>(Arrays.asList(path));
+        fullPath.add(key);
+        return getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(this)) +
+                '{' + fullPath.stream().collect(Collectors.joining(".")) + '}';
     }
 
     /**
@@ -203,19 +227,27 @@ private static int calculateHash(final String key, final String[] path, final in
         return prime * hash + type;
     }
 
-    private static FieldReference parseToCache(final String reference) {
-        FieldReference result = parse(reference);
-        if (CACHE.size() < 10_000) {
-            result = deduplicate(result);
-            CACHE.put(reference, result);
+    /**
+     * De-duplicates instances using {@link FieldReference#DEDUP}.
+     *
+     * {@link FieldReference#DEDUP}.
+     * @param parsed FieldReference to de-duplicate
+     * @return De-duplicated FieldReference
+     */
+    private static FieldReference deduplicate(final FieldReference parsed) {
+        WeakReference<FieldReference> ref = DEDUP.get(parsed);
+        if (ref == null) {
+            WeakReference<FieldReference> prev;
+            prev = DEDUP.putIfAbsent(parsed, ref = new WeakReference<>(parsed));
+            if (prev != null) ref = prev;
         }
-        return result;
+        return ref.get();
     }
 
     private static FieldReference parse(final CharSequence reference) {
         final List<String> path = TOKENIZER.tokenize(reference);
 
-        final String key = path.remove(path.size() - 1).intern();
+        final String key = path.remove(path.size() - 1);
         final boolean empty = path.isEmpty();
         if (empty && key.equals(Event.METADATA)) {
             return METADATA_PARENT_REFERENCE;
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index 9dc15127029..376cb0649c7 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -20,43 +20,32 @@
 
 package org.logstash;
 
-import java.lang.reflect.Field;
-import java.util.Map;
-import org.hamcrest.CoreMatchers;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.number.OrderingComparison.greaterThan;
+import static org.hamcrest.number.OrderingComparison.lessThan;
+import static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertSame;
 
 public final class FieldReferenceTest {
 
-    @SuppressWarnings("unchecked")
     @Before
-    public void clearParsingCache() throws Exception {
-        final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
-        cacheField.setAccessible(true);
-        final Map<CharSequence, FieldReference> cache =
-                (Map<CharSequence, FieldReference>) cacheField.get(null);
-        cache.clear();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Before
-    public void clearDedupCache() throws Exception  {
-        final Field cacheField = FieldReference.class.getDeclaredField("DEDUP");
-        cacheField.setAccessible(true);
-        final Map<CharSequence, FieldReference> cache =
-                (Map<CharSequence, FieldReference>) cacheField.get(null);
-        cache.clear();
+    @After
+    public void clearParsingCache() {
+        FieldReference.CACHE.cleanUp();
+        FieldReference.RUBY_CACHE.cleanUp();
     }
 
     @Test
-    public void deduplicatesTimestamp() throws Exception {
-        assertTrue(FieldReference.from("@timestamp") == FieldReference.from("[@timestamp]"));
+    public void deduplicatesTimestamp() {
+        assertSame(FieldReference.TIMESTAMP_REFERENCE, FieldReference.from("@timestamp"));
+        assertSame(FieldReference.from("@timestamp"), FieldReference.from("[@timestamp]"));
     }
 
     @Test
@@ -68,18 +57,49 @@ public void testParseEmptyString() {
         );
     }
 
-    @SuppressWarnings("unchecked")
     @Test
-    public void testCacheUpperBound() throws NoSuchFieldException, IllegalAccessException {
-        final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
-        cacheField.setAccessible(true);
-        final Map<CharSequence, FieldReference> cache =
-                (Map<CharSequence, FieldReference>) cacheField.get(null);
-        final int initial = cache.size();
-        for (int i = 0; i < 10_001 - initial; ++i) {
-            FieldReference.from(String.format("[array][%d]", i));
+    public void testCacheUpperBound() {
+        final int initial = (int) FieldReference.CACHE.size();
+        for (int i = 0; i < FieldReference.CACHE_MAXIMUM_SIZE - initial + 10; ++i) {
+            assertNotNull( FieldReference.from(String.format("[array][%d]", i)) );
         }
-        assertThat(cache.size(), CoreMatchers.is(10_000));
+        final int cacheSize = (int) FieldReference.CACHE.size();
+        assertThat(cacheSize, lessThanOrEqualTo(FieldReference.CACHE_MAXIMUM_SIZE));
+        assertThat(cacheSize, greaterThan(FieldReference.CACHE_MAXIMUM_SIZE / 2));
+    }
+
+    @Test
+    public void testRubyCacheUpperBound() {
+        for (int i = 0; i < FieldReference.CACHE_MAXIMUM_SIZE + 100; ++i) {
+            FieldReference.from(RubyUtil.RUBY.newString(String.format("[some_stuff][%d]", i)));
+        }
+        final int cacheSize = (int) FieldReference.RUBY_CACHE.size();
+        assertThat(cacheSize, lessThanOrEqualTo(FieldReference.CACHE_MAXIMUM_SIZE));
+        assertThat(cacheSize, greaterThan(FieldReference.CACHE_MAXIMUM_SIZE / 2));
+    }
+
+    @Test
+    public void testDeduplicationWithWeakRefs() {
+        for (int i = 0; i < FieldReference.CACHE_MAXIMUM_SIZE; ++i) {
+            assertNotNull( FieldReference.from(String.format("[dedup][%d]", i)) );
+        }
+
+        // NOTE: weak refs are hard to test - we just loosely assert map is not growing "too much"
+
+        for (int i = 0; i < 10_000; ++i) {
+            assertNotNull( FieldReference.from(String.format("[dedup1][%d]", i)) );
+        }
+        System.gc();
+        for (int i = 0; i < 100_000; ++i) {
+            assertNotNull( FieldReference.from(String.format("[dedup2][%d]", i)) );
+        }
+        System.gc();
+        for (int i = 0; i < 1_000_000; ++i) { // TODO: depends on the heap size / gc used
+            assertNotNull( FieldReference.from(String.format("[dedup3][%d]", i)) );
+        }
+        System.gc();
+
+        assertThat(FieldReference.DEDUP.size(), lessThan(1_000_000));
     }
 
     @Test
diff --git a/logstash-core/src/test/java/org/logstash/ValuefierTest.java b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
index 58982bca2bb..d6a3cee8d6b 100644
--- a/logstash-core/src/test/java/org/logstash/ValuefierTest.java
+++ b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
@@ -34,12 +34,11 @@
 import org.jruby.java.proxies.MapJavaProxy;
 import org.jruby.javasupport.Java;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.logstash.ext.JrubyTimestampExtLibrary;
 
 import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertThrows;
 
 public class ValuefierTest {
     @Test
@@ -92,15 +91,12 @@ public void testJodaDateTIme() {
         assertEquals(JrubyTimestampExtLibrary.RubyTimestamp.class, result.getClass());
     }
 
-    @Rule
-    public ExpectedException exception = ExpectedException.none();
-
-    @Test
+    @Test()
     public void testUnhandledObject() {
-        RubyMatchData md = new RubyMatchData(RubyUtil.RUBY);
-        exception.expect(MissingConverterException.class);
-        exception.expectMessage("Missing Converter handling for full class name=org.jruby.RubyMatchData, simple name=RubyMatchData");
-        Valuefier.convert(md);
+        Exception e = assertThrows(MissingConverterException.class, () -> {
+            Valuefier.convert(new RubyMatchData(RubyUtil.RUBY));
+        });
+        assertEquals("Missing Converter handling for full class name=org.jruby.RubyMatchData, simple name=RubyMatchData", e.getMessage());
     }
 
     @Test
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java b/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
index 8bd2fb98ee7..3a74b6037da 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
@@ -33,7 +33,12 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class PipelineConfigTest extends RubyEnvTestCase {
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/BooleanEdgeTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/BooleanEdgeTest.java
index e6bd7e4e779..2c5c2cd3d75 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/BooleanEdgeTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/BooleanEdgeTest.java
@@ -27,7 +27,7 @@
 import org.logstash.config.ir.InvalidIRException;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.logstash.config.ir.IRHelpers.*;
 
 @RunWith(Theories.class)
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/EdgeTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/EdgeTest.java
index 379a4db9772..31c167231d7 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/EdgeTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/EdgeTest.java
@@ -24,8 +24,8 @@
 import org.logstash.config.ir.IRHelpers;
 import org.logstash.config.ir.InvalidIRException;
 
-import static org.junit.Assert.*;
 import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class EdgeTest {
     @Test
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/GraphTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/GraphTest.java
index a6c222aa0a8..e60968ff3e2 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/GraphTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/GraphTest.java
@@ -30,7 +30,10 @@
 
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.logstash.config.ir.IRHelpers.createTestExpression;
 import static org.logstash.config.ir.IRHelpers.createTestVertex;
 import static org.logstash.config.ir.IRHelpers.randMeta;
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
index 59e07f4dd42..cae91d564fc 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
@@ -24,7 +24,7 @@
 import org.logstash.config.ir.InvalidIRException;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.logstash.config.ir.IRHelpers.*;
 
 public class IfVertexTest {
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/PluginVertexTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/PluginVertexTest.java
index 3c4dab32e8a..37b7cee6dbf 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/PluginVertexTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/PluginVertexTest.java
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.logstash.config.ir.IRHelpers.*;
 
 public class PluginVertexTest {
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
index 533ab654af1..8e457c47124 100644
--- a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
@@ -38,6 +38,8 @@
 import org.logstash.ObjectMappers;
 import org.logstash.RubyUtil;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+
 /**
  * Tests for {@link JrubyEventExtLibrary.RubyEvent}.
  */
@@ -90,7 +92,7 @@ public void correctlyRaiseRubyRuntimeErrorWhenGivenInvalidFieldReferences() {
         try {
             event.ruby_set_field(context, key, value);
         } catch (RuntimeError rubyRuntimeError) {
-            Assert.assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
+            assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
             return;
         }
         Assert.fail("expected ruby RuntimeError was not thrown.");
@@ -106,7 +108,7 @@ public void correctlyRaiseRubyRuntimeErrorWhenGivenInvalidFieldReferencesInMap()
         try {
             event.ruby_set_field(context, key, value);
         } catch (RuntimeError rubyRuntimeError) {
-            Assert.assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
+            assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
             return;
         }
         Assert.fail("expected ruby RuntimeError was not thrown.");
diff --git a/logstash-core/src/test/java/org/logstash/plugins/PluginValidatorTest.java b/logstash-core/src/test/java/org/logstash/plugins/PluginValidatorTest.java
index c4ddf47b39c..fa2eff6c4e3 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/PluginValidatorTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/PluginValidatorTest.java
@@ -35,9 +35,6 @@
 import java.net.URLClassLoader;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Enumeration;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
 
 import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
 
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
index 2d04364edde..a13433341f5 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
@@ -22,7 +22,6 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 import org.logstash.secret.SecretIdentifier;
 import org.logstash.secret.store.backend.JavaKeyStore;
@@ -49,9 +48,6 @@ public class SecretStoreFactoryTest {
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();
 
-    @Rule
-    public ExpectedException thrown = ExpectedException.none();
-
     private static final SecretStoreFactory secretStoreFactory = SecretStoreFactory.fromEnvironment();
 
     @Test
@@ -63,9 +59,8 @@ public void testAlternativeImplementation() {
         validateMarker(secretStore);
     }
 
-    @Test
+    @Test(expected = SecretStoreException.ImplementationNotFoundException.class)
     public void testAlternativeImplementationInvalid() {
-        thrown.expect(SecretStoreException.ImplementationNotFoundException.class);
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.classname", "junk".toCharArray());
         SecretStore secretStore = secretStoreFactory.load(secureConfig);
@@ -138,9 +133,8 @@ public void testDefaultLoadWithEnvPass() throws Exception {
     /**
      * Ensures that load failure is the correct type.
      */
-    @Test
+    @Test(expected = SecretStoreException.LoadException.class)
     public void testErrorLoading() {
-        thrown.expect(SecretStoreException.LoadException.class);
         //default implementation requires a path
         secretStoreFactory.load(new SecureConfig());
     }
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java b/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
index 39834ae7916..059b4fc9a6a 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
@@ -25,7 +25,6 @@
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 import org.logstash.LogstashJavaCompat;
 import org.logstash.secret.SecretIdentifier;
@@ -70,8 +69,6 @@ public class JavaKeyStoreTest {
     private final static String EXTERNAL_TEST_WRITE = "test_external_write";
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();
-    @Rule
-    public ExpectedException thrown = ExpectedException.none();
     private JavaKeyStore keyStore;
     private char[] keyStorePath;
     private SecureConfig withDefaultPassConfig;
@@ -210,9 +207,8 @@ public void isLogstashKeystore() throws Exception {
      *
      * @throws Exception when ever it wants to.
      */
-    @Test
+    @Test(expected = SecretStoreException.class)
     public void notLogstashKeystore() throws Exception {
-        thrown.expect(SecretStoreException.class);
         SecureConfig altConfig = new SecureConfig();
         Path altPath = folder.newFolder().toPath().resolve("alt.not.a.logstash.keystore");
         try (OutputStream out = Files.newOutputStream(altPath)) {
@@ -229,9 +225,8 @@ public void notLogstashKeystore() throws Exception {
      *
      * @throws Exception when ever it wants to.
      */
-    @Test
+    @Test(expected = SecretStoreException.LoadException.class)
     public void notLogstashKeystoreNoMarker() throws Exception {
-        thrown.expect(SecretStoreException.LoadException.class);
         withDefinedPassConfig.add("keystore.file", Paths.get(this.getClass().getClassLoader().getResource("not.a.logstash.keystore").toURI()).toString().toCharArray().clone());
         new JavaKeyStore().load(withDefinedPassConfig);
     }
@@ -313,9 +308,8 @@ public void retrieveWithInvalidInput() {
      *
      * @throws Exception when ever it wants to
      */
-    @Test
+    @Test(expected = SecretStoreException.AccessException.class)
     public void tamperedKeystore() throws Exception {
-        thrown.expect(SecretStoreException.class);
         byte[] keyStoreAsBytes = Files.readAllBytes(Paths.get(new String(keyStorePath)));
         //bump the middle byte by 1
         int tamperLocation = keyStoreAsBytes.length / 2;
@@ -332,9 +326,8 @@ public void tamperedKeystore() throws Exception {
      *
      * @throws IOException when it goes boom.
      */
-    @Test
-    public void testAlreadyCreated() throws IOException {
-        thrown.expect(SecretStoreException.AlreadyExistsException.class);
+    @Test(expected = SecretStoreException.AlreadyExistsException.class)
+    public void testAlreadyCreated() {
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.file", keyStorePath.clone());
         new JavaKeyStore().create(secureConfig);
@@ -362,9 +355,8 @@ public void testDefaultPermissions() throws Exception {
         }
     }
 
-    @Test
+    @Test(expected = SecretStoreException.LoadException.class)
     public void testDelete() throws IOException {
-        thrown.expect(SecretStoreException.LoadException.class);
         Path altPath = folder.newFolder().toPath().resolve("alt.logstash.keystore");
         SecureConfig altConfig = new SecureConfig();
         altConfig.add("keystore.file", altPath.toString().toCharArray());
@@ -383,9 +375,8 @@ public void testDelete() throws IOException {
      *
      * @throws IOException when ever it wants to
      */
-    @Test
+    @Test(expected = SecretStoreException.CreateException.class)
     public void testEmptyNotAllowedOnCreate() throws IOException {
-        thrown.expect(SecretStoreException.CreateException.class);
         Path altPath = folder.newFolder().toPath().resolve("alt.logstash.keystore");
         SecureConfig altConfig = new SecureConfig();
         altConfig.add("keystore.file", altPath.toString().toCharArray());
@@ -398,9 +389,8 @@ public void testEmptyNotAllowedOnCreate() throws IOException {
      *
      * @throws Exception when ever it wants to
      */
-    @Test
+    @Test(expected = SecretStoreException.AccessException.class)
     public void testEmptyNotAllowedOnExisting() throws Exception {
-        thrown.expect(SecretStoreException.AccessException.class);
         Path altPath = folder.newFolder().toPath().resolve("alt.logstash.keystore");
         SecureConfig altConfig = new SecureConfig();
         altConfig.add("keystore.file", altPath.toString().toCharArray());
@@ -583,18 +573,16 @@ public void testLargeKeysAndValues() {
         keyStore.purgeSecret(id);
     }
 
-    @Test
+    @Test(expected = SecretStoreException.LoadException.class)
     public void testLoadNotCreated() throws IOException {
-        thrown.expect(SecretStoreException.LoadException.class);
         Path altPath = folder.newFolder().toPath().resolve("alt.logstash.keystore");
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.file", altPath.toString().toCharArray());
         new JavaKeyStore().load(secureConfig.clone());
     }
 
-    @Test
+    @Test(expected = SecretStoreException.LoadException.class)
     public void testNoPathDefined() {
-        thrown.expect(SecretStoreException.LoadException.class);
         new JavaKeyStore().load(new SecureConfig());
     }
 
@@ -687,9 +675,8 @@ public void testWithRealSecondJvm() throws Exception {
      *
      * @throws Exception when ever it wants to
      */
-    @Test
-    public void wrongPassword() throws Exception {
-        thrown.expect(SecretStoreException.AccessException.class);
+    @Test(expected = SecretStoreException.AccessException.class)
+    public void wrongPassword() {
         withDefinedPassConfig.add(SecretStoreFactory.KEYSTORE_ACCESS_KEY, "wrongpassword".toCharArray());
         new JavaKeyStore().load(withDefinedPassConfig);
     }
diff --git a/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java b/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
index 67217d3dcbc..b63a4bc6888 100644
--- a/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
+++ b/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
@@ -19,47 +19,40 @@
 
 package org.logstash.util;
 
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.junit.Assert.*;
 
 public class CloudSettingAuthTest {
 
-    @Rule
-    public ExpectedException exceptionRule = ExpectedException.none();
-
     @Test
     public void testThrowExceptionWhenGivenStringWithoutSeparatorOrPassword() {
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Auth username and password format should be");
-
-        new CloudSettingAuth("foobarbaz");
+        assertArgumentError("Cloud Auth username and password format should be \"<username>:<password>\".", () -> {
+            new CloudSettingAuth("foobarbaz");
+        });
     }
 
     @Test
     public void testThrowExceptionWhenGivenStringWithoutPassword() {
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Auth username and password format should be");
-
-        new CloudSettingAuth("foo:");
+        assertArgumentError("Cloud Auth username and password format should be \"<username>:<password>\".", () -> {
+            new CloudSettingAuth("foo:");
+        });
     }
 
     @Test
     public void testThrowExceptionWhenGivenStringWithoutUsername() {
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Auth username and password format should be");
-
-        new CloudSettingAuth(":bar");
+        assertArgumentError("Cloud Auth username and password format should be \"<username>:<password>\".", () -> {
+            new CloudSettingAuth(":bar");
+        });
     }
 
     @Test
     public void testThrowExceptionWhenGivenStringWhichIsEmpty() {
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Auth username and password format should be");
-
-        new CloudSettingAuth("");
+        assertArgumentError("Cloud Auth username and password format should be \"<username>:<password>\".", () -> {
+            new CloudSettingAuth("");
+        });
     }
 
     @Test
@@ -76,4 +69,9 @@ public void testWhenGivenStringWhichIsCloudAuthSetTheString() {
         assertEquals("frodo:<password>", sut.toString());
     }
 
+    private void assertArgumentError(final String withMessage, final ThrowingRunnable runnable) {
+        org.jruby.exceptions.ArgumentError e = assertThrows(org.jruby.exceptions.ArgumentError.class, runnable);
+        assertEquals(withMessage, e.getException().getMessage().toString());
+    }
+
 }
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java b/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
index 118d6bd7b5f..618b9c0a917 100644
--- a/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
+++ b/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
@@ -20,10 +20,10 @@
 package org.logstash.util;
 
 import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.junit.Assert.*;
 
 public class CloudSettingIdTest {
@@ -31,9 +31,6 @@ public class CloudSettingIdTest {
     private String input = "foobar:dXMtZWFzdC0xLmF3cy5mb3VuZC5pbyRub3RhcmVhbCRpZGVudGlmaWVy";
     private CloudSettingId sut;
 
-    @Rule
-    public ExpectedException exceptionRule = ExpectedException.none();
-
     @Before
     public void setUp() {
         sut = new CloudSettingId(input);
@@ -61,40 +58,41 @@ public void testNullInputMakesAllGettersReturnNull() {
     public void testThrowExceptionWhenMalformedValueIsGiven() {
         String[] raw = new String[] {"first", "second"};
         String encoded = CloudSettingId.cloudIdEncode(raw);
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Id, after decoding, is invalid. Format: '<segment1>$<segment2>$<segment3>'. Received: \"" + String.join("$", raw) + "\".");
-
-        new CloudSettingId(encoded);
+        assertArgumentError("Cloud Id, after decoding, is invalid. Format: '<segment1>$<segment2>$<segment3>'. Received: \"" + String.join("$", raw) + "\".", () -> {
+            new CloudSettingId(encoded);
+        });
     }
 
     @Test
     public void testThrowExceptionWhenAtLeatOneSegmentIsEmpty() {
         String[] raw = new String[] {"first", "", "third"};
         String encoded = CloudSettingId.cloudIdEncode(raw);
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Id, after decoding, is invalid. Format: '<segment1>$<segment2>$<segment3>'. Received: \"" + String.join("$", raw) + "\".");
-
-        new CloudSettingId(encoded);
+        assertArgumentError("Cloud Id, after decoding, is invalid. Format: '<segment1>$<segment2>$<segment3>'. Received: \"" + String.join("$", raw) + "\".", () -> {
+            new CloudSettingId(encoded);
+        });
     }
 
     @Test
     public void testThrowExceptionWhenElasticSegmentSegmentIsUndefined() {
         String[] raw = new String[] {"us-east-1.aws.found.io", "undefined", "my-kibana"};
         String encoded = CloudSettingId.cloudIdEncode(raw);
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Id, after decoding, elasticsearch segment is 'undefined', literally.");
-
-        new CloudSettingId(encoded);
+        assertArgumentError("Cloud Id, after decoding, elasticsearch segment is 'undefined', literally.", () -> {
+            new CloudSettingId(encoded);
+        });
     }
 
     @Test
     public void testThrowExceptionWhenKibanaSegmentSegmentIsUndefined() {
         String[] raw = new String[] {"us-east-1.aws.found.io", "my-elastic-cluster", "undefined"};
         String encoded = CloudSettingId.cloudIdEncode(raw);
-        exceptionRule.expect(org.jruby.exceptions.ArgumentError.class);
-        exceptionRule.expectMessage("Cloud Id, after decoding, the kibana segment is 'undefined', literally. You may need to enable Kibana in the Cloud UI.");
+        assertArgumentError("Cloud Id, after decoding, the kibana segment is 'undefined', literally. You may need to enable Kibana in the Cloud UI.", () -> {
+            new CloudSettingId(encoded);
+        });
+    }
 
-        new CloudSettingId(encoded);
+    private void assertArgumentError(final String withMessage, final ThrowingRunnable runnable) {
+        org.jruby.exceptions.ArgumentError e = assertThrows(org.jruby.exceptions.ArgumentError.class, runnable);
+        assertEquals(withMessage, e.getException().getMessage().toString());
     }
 
     // without a label
