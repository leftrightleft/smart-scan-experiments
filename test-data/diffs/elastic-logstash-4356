diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index dd7c8523a7c..32506d83d03 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -3,17 +3,22 @@
 require "logstash/errors"
 require "logstash/config/cpu_core_strategy"
 require "logstash/pipeline"
-require "uri"
 require "stud/trap"
+require "uri"
+require "socket"
+require "securerandom"
 
 LogStash::Environment.load_locale!
 
 class LogStash::Agent
 
   attr_writer :logger
+  attr_reader :node_name
 
-  def initialize
+  def initialize(options = {})
     @pipelines = {}
+     
+    @node_name = options[:node_name] || Socket.gethostname
   end
 
   def execute
@@ -36,6 +41,10 @@ def add_pipeline(pipeline_id, config_str, settings = {})
     @pipelines[pipeline_id] = LogStash::Pipeline.new(config_str, settings.merge(:pipeline_id => pipeline_id))
   end
 
+  def node_uuid
+    @node_uuid ||= SecureRandom.uuid
+  end
+
   private
   # Emit a warning message.
   def warn(message)
@@ -76,4 +85,4 @@ def trap_sigint
       end
     end
   end
-end # class LogStash::Agent
\ No newline at end of file
+end # class LogStash::Agent
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 13e74d4c8a9..ede0c4fcbfb 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -75,12 +75,11 @@ class LogStash::Runner < Clamp::Command
     I18n.t("logstash.runner.flag.rubyshell"),
     :attribute_name => :ruby_shell
 
-  attr_reader :agent
+  option ["-n", "--node-name"], "NAME", 
+    I18n.t("logstash.runner.flag.node_name"),
+    :attribute_name => :node_name
 
-  def initialize(*args)
-    @agent = LogStash::Agent.new
-    super(*args)
-  end
+  attr_reader :agent
 
   def execute
     require "logstash/util"
@@ -88,6 +87,8 @@ def execute
     require "stud/task"
     require "cabin" # gem 'cabin'
 
+    @agent = LogStash::Agent.new({ :node_name => node_name })
+
     @logger = Cabin::Channel.get(LogStash)
 
     LogStash::Util::set_thread_name(self.class.name)
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index c1e9a19e466..a951265e1ba 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -209,3 +209,6 @@ en:
         rubyshell: |+
           Drop to shell instead of running as normal.
           Valid shells are "irb" and "pry"
+        node_name: |+
+          Specify the name of this logstash instance, if no value is given
+          it will default to the current hostname.
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 9a609ddf886..4caf2059995 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -1,5 +1,27 @@
 # encoding: utf-8
-require 'spec_helper'
+require "logstash/agent"
+require "spec_helper"
 
 describe LogStash::Agent do
+  context "#node_name" do
+    let(:hostname) { "the-logstash" }
+
+    before do
+      allow(Socket).to receive(:gethostname).and_return(hostname)
+    end
+
+    it "fallback to hostname when no name is provided" do
+      expect(LogStash::Agent.new.node_name).to be(hostname)
+    end
+
+    it "uses the user provided name" do
+      expect(LogStash::Agent.new({ :node_name => "a-name" }).node_name).to eq("a-name")
+    end
+  end
+
+  context "#node_uuid" do
+    it "create a unique uuid between agent instances" do
+      expect(LogStash::Agent.new.node_uuid).not_to be(LogStash::Agent.new.node_uuid)
+    end
+  end
 end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 3dec2c0e7ef..1cf86166f97 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -24,8 +24,8 @@ def run(args); end
       let(:args) { ["-e", ""] }
 
       it "should execute the agent" do
-        expect(subject.agent).to receive(:add_pipeline).once
-        expect(subject.agent).to receive(:execute).once
+        expect_any_instance_of(LogStash::Agent).to receive(:add_pipeline).once
+        expect_any_instance_of(LogStash::Agent).to receive(:execute).once
         subject.run(args)
       end
     end
