diff --git a/tools/ingest-converter/src/main/resources/ingest-pipeline.js b/tools/ingest-converter/src/main/resources/ingest-pipeline.js
index 2056c034c97..1d2c0f08892 100644
--- a/tools/ingest-converter/src/main/resources/ingest-pipeline.js
+++ b/tools/ingest-converter/src/main/resources/ingest-pipeline.js
@@ -26,50 +26,63 @@ function ingest_pipeline_to_logstash(json, append_stdio) {
                 );
             }
         }
+        var processed = false;
         if (IngestDate.has_date(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("date", IngestDate.date_hash(processor))
             )
+            processed = true;
         }
         if (IngestGeoIp.has_geoip(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("geoip", IngestGeoIp.geoip_hash(processor))
             )
+            processed = true;
         }
         if (IngestConvert.has_convert(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestConvert.convert_hash(processor))
             );
+            processed = true;
         }
         if (IngestGsub.has_gsub(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestGsub.gsub_hash(processor))
             );
+            processed = true;
         }
         if (IngestAppend.has_append(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestAppend.append_hash(processor))
             );
+            processed = true;
         }
         if (IngestJson.has_json(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("json", IngestJson.json_hash(processor))
             );
+            processed = true;
         }
         if (IngestRename.has_rename(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestRename.rename_hash(processor))
             );
+            processed = true;
         }
         if (IngestLowercase.has_lowercase(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestLowercase.lowercase_hash(processor))
             );
+            processed = true;
         }
         if (IngestSet.has_set(processor)) {
             filter_blocks.push(
                 IngestConverter.create_hash("mutate", IngestSet.set_hash(processor))
             );
+            processed = true;
+        }
+        if (!processed) {
+            print("WARN Found unrecognized processor named: " + Object.keys(processor)[0]);
         }
         return IngestConverter.join_hash_fields(filter_blocks);
     }
diff --git a/tools/ingest-converter/src/main/resources/ingest-set.js b/tools/ingest-converter/src/main/resources/ingest-set.js
index c5982b044d2..122dc44a5fb 100644
--- a/tools/ingest-converter/src/main/resources/ingest-set.js
+++ b/tools/ingest-converter/src/main/resources/ingest-set.js
@@ -11,6 +11,10 @@ var IngestSet = {
         } else {
             value_contents = value;
         }
+        var painless_condition = set_json["if"];
+        if (!!painless_condition) {
+          print("WARN Found in 'set' processor an 'if' painless condition not translated: " + painless_condition);
+        }
         var mutate_contents = IngestConverter.create_field(
             IngestConverter.quote_string(IngestConverter.dots_to_square_brackets(set_json["field"])),
             value_contents);
