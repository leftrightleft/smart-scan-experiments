diff --git a/logstash-core/lib/logstash/config/source/multi_local.rb b/logstash-core/lib/logstash/config/source/multi_local.rb
index 10346041490..b9da78861df 100644
--- a/logstash-core/lib/logstash/config/source/multi_local.rb
+++ b/logstash-core/lib/logstash/config/source/multi_local.rb
@@ -70,6 +70,8 @@ def config_conflict?
           @conflict_messages << I18n.t("logstash.runner.config-pipelines-empty", :path => pipelines_yaml_location)
         elsif @detected_marker.is_a?(Class)
           @conflict_messages << I18n.t("logstash.runner.config-pipelines-invalid", :invalid_class => @detected_marker, :path => pipelines_yaml_location)
+        elsif @detected_marker.kind_of?(ConfigurationError)
+          @conflict_messages << @detected_marker.message
         end
       else
         do_warning? && logger.warn("Ignoring the 'pipelines.yml' file because modules or command line options are specified")
@@ -85,17 +87,15 @@ def retrieve_yaml_pipelines
       when Array
         result
       when false
-        raise ConfigurationError.new("Pipelines YAML file is empty. Path: #{pipelines_yaml_location}")
+        raise ConfigurationError, I18n.t("logstash.runner.config-pipelines-empty", :path => pipelines_yaml_location)
       else
-        raise ConfigurationError.new("Pipelines YAML file must contain an array of pipeline configs. Found \"#{result.class}\" in #{pipelines_yaml_location}")
+        raise ConfigurationError, I18n.t("logstash.runner.config-pipelines-invalid", :invalid_class => result.class, :path => pipelines_yaml_location)
       end
     end
 
     def read_pipelines_from_yaml(yaml_location)
-      logger.debug("Reading pipeline configurations from YAML", :location => pipelines_yaml_location)
-      ::YAML.safe_load(::File.read(yaml_location))
-    rescue => e
-      raise ConfigurationError.new("Failed to read pipelines yaml file. Location: #{yaml_location}, Exception: #{e.inspect}")
+      yaml_contents = ::File.read(yaml_location) rescue fail(ConfigurationError, I18n.t("logstash.runner.config-pipelines-failed-read-with-exception", :path => yaml_location, exception: $!.inspect))
+      ::YAML.safe_load(yaml_contents, fallback: false) rescue fail(ConfigurationError, I18n.t("logstash.runner.config-pipelines-failed-parse-with-exception", :path => yaml_location, exception: $!.inspect))
     end
 
     def pipelines_yaml_location
@@ -105,12 +105,12 @@ def pipelines_yaml_location
     def detect_duplicate_pipelines(pipelines)
       duplicate_ids = pipelines.group_by {|pipeline| pipeline.get("pipeline.id") }.select {|k, v| v.size > 1 }.map {|k, v| k}
       if duplicate_ids.any?
-        raise ConfigurationError.new("Pipelines YAML file contains duplicate pipeline ids: #{duplicate_ids.inspect}. Location: #{pipelines_yaml_location}")
+        raise ConfigurationError, I18n.t("logstash.runner.config-pipelines-duplicate-ids", :path => pipelines_yaml_location, duplicate_ids: duplicate_ids.inspect)
       end
     end
 
     def detect_pipelines
-      result = read_pipelines_from_yaml(pipelines_yaml_location) rescue nil
+      result = read_pipelines_from_yaml(pipelines_yaml_location)
       if result.is_a?(Array)
         @detected_marker = true
       elsif result.nil?
@@ -120,6 +120,9 @@ def detect_pipelines
       else
         @detected_marker = result.class
       end
+    rescue ConfigurationError => cfg_error
+      @detected_marker = cfg_error
+    ensure
       @detect_pipelines_called = true
     end
 
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 2f8170ed9c6..e74977175f3 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -126,10 +126,16 @@ en:
         Using command-line module configuration to override logstash.yml module configuration.
       config-pipelines-failed-read: >-
         Failed to read pipelines yaml file. Location: %{path}
+      config-pipelines-failed-read-with-exception: >-
+        Failed to read pipelines yaml file. Location: %{path}, Exception: %{exception}
+      config-pipelines-failed-parse-with-exception: >-
+        Failed to parse contents of pipelines yaml file. Location: %{path}, Exception: %{exception}
       config-pipelines-empty: >-
         Pipelines YAML file is empty. Location: %{path}
       config-pipelines-invalid: >-
         Pipelines YAML file must contain an array of pipeline configs. Found "%{invalid_class}" in %{path}
+      config-pipelines-duplicate-ids: >-
+        Pipelines YAML file contains duplicate pipeline ids: #{duplicate_ids}. Location: #{path}
       reload-without-config-path: >-
         Configuration reloading also requires passing a configuration path with '-f yourlogstash.conf'
       reload-with-config-string: >-
diff --git a/qa/integration/specs/multiple_pipeline_spec.rb b/qa/integration/specs/multiple_pipeline_spec.rb
index 6f3a75c033f..de13917cfd1 100644
--- a/qa/integration/specs/multiple_pipeline_spec.rb
+++ b/qa/integration/specs/multiple_pipeline_spec.rb
@@ -56,8 +56,11 @@
 
   let(:retry_attempts) { 40 }
 
+  let(:pipelines_yaml_file_permissions) { 0644 }
+
   before(:each) do
     IO.write(pipelines_yaml_file, pipelines_yaml)
+    File.chmod(pipelines_yaml_file_permissions, pipelines_yaml_file)
   end
 
   it "executes the multiple pipelines" do
@@ -73,6 +76,53 @@
     expect(IO.readlines(temporary_out_file_2).size).to eq(1)
   end
 
+  context 'effectively-empty pipelines.yml file' do
+    let!(:pipelines_yaml) do
+      <<~EOYAML
+        # this yaml file contains
+        # only comments and
+        # is effectively empty
+      EOYAML
+    end
+
+    it 'exits with helpful guidance' do
+      logstash_service = @fixture.get_service("logstash")
+      status = logstash_service.run('--path.settings', settings_dir, '--log.level=debug')
+      expect(status.exit_code).to_not be_zero
+      expect(status.stderr_and_stdout).to include('Pipelines YAML file is empty')
+    end
+  end
+
+  context 'unreadable pipelines.yml file' do
+    let(:pipelines_yaml_file_permissions) { 000 }
+
+    it 'exits with helpful guidance' do
+      logstash_service = @fixture.get_service("logstash")
+      status = logstash_service.run('--path.settings', settings_dir, '--log.level=debug')
+      expect(status.exit_code).to_not be_zero
+      expect(status.stderr_and_stdout).to include('Failed to read pipelines yaml file', 'Permission denied')
+    end
+  end
+
+  context 'readable pipelines.yml with invalid YAML contents' do
+
+    let!(:pipelines_yaml) do
+      <<~EOYAML
+         - pipeline.id: my_id
+           pipeline.workers: 1
+         # note: indentation not aligned will cause YAML parse error
+         pipeline.ordered: true
+      EOYAML
+    end
+
+    it 'exits with helpful guidance' do
+      logstash_service = @fixture.get_service("logstash")
+      status = logstash_service.run('--path.settings', settings_dir, '--log.level=debug')
+      expect(status.exit_code).to_not be_zero
+      expect(status.stderr_and_stdout).to include('Failed to parse contents of pipelines yaml file', 'SyntaxError:')
+    end
+  end
+
   describe "inter-pipeline communication" do
     let(:count) { 2 }
     let(:pipelines) do 
