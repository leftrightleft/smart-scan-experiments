diff --git a/lib/logstash/config/mixin.rb b/lib/logstash/config/mixin.rb
index 12df2e232e8..e8dec435406 100644
--- a/lib/logstash/config/mixin.rb
+++ b/lib/logstash/config/mixin.rb
@@ -451,21 +451,22 @@ def validate_value(value, validator)
             end
 
             result = value.first.is_a?(::LogStash::Util::Password) ? value.first : ::LogStash::Util::Password.new(value.first)
-          when :path
+          when :file_or_dir
             if value.size > 1 # Only 1 value wanted
-              return false, "Expected path (one value), got #{value.size} values?"
+              return false, "Expected file_or_dir (one value), got #{value.size} values?"
             end
 
-            # Paths must be absolute
-            #if !Pathname.new(value.first).absolute?
-              #return false, "Require absolute path, got relative path #{value.first}?"
-            #end
-
             if !File.exists?(value.first) # Check if the file exists
-              return false, "File does not exist or cannot be opened #{value.first}"
+              return false, "File or Directory does not exist or cannot be opened #{value.first}"
             end
 
             result = value.first
+          when :path
+            if value.size > 1 # Only 1 value wanted
+              return false, "Expected path (one value), got #{value.size} values?"
+            end
+
+            result = value.first.is_a?(::Pathname) ? value.first : ::Pathname.new(value.first)
           when :bytes
             begin
               bytes = Integer(value.first) rescue nil
diff --git a/spec/core/config_mixin_spec.rb b/spec/core/config_mixin_spec.rb
index 128f6287b5f..9abcaa2254c 100644
--- a/spec/core/config_mixin_spec.rb
+++ b/spec/core/config_mixin_spec.rb
@@ -97,4 +97,41 @@
       expect(clone.password.value).to(be == secret)
     end
   end
+
+  context "when validating :file_or_dir" do
+    let(:klass) do
+      Class.new(LogStash::Filters::Base) do
+        config_name "cake"
+        config :file, :validate => :file_or_dir, :default => "/foo/bar"
+      end
+    end
+
+    it "should be valid and exist" do
+      allow(File).to receive(:exists?).with("/foo/bar").and_return(true)
+      expect { klass.new({}) }.to_not raise_error
+    end
+
+    it "raises an exception if the path does not exist" do
+      expect { klass.new({}) }.to raise_error(LogStash::ConfigurationError)
+    end
+  end
+
+  context "when validating :path" do
+    let(:klass) do
+      Class.new(LogStash::Filters::Base) do
+        config_name "cake"
+        config :path, :validate => :path, :default => "foobar"
+      end
+    end
+
+    subject { klass.new({}) }
+
+    it "should be valid and exist" do
+      expect { klass.new({}) }.to_not raise_error
+    end
+
+    it "should be a pathname object" do
+      expect(subject.path).to be_a(Pathname)
+    end
+  end
 end
