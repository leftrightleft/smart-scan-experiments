diff --git a/Gemfile b/Gemfile
index 4364afb3098..b7b6f67b197 100755
--- a/Gemfile
+++ b/Gemfile
@@ -1,5 +1,9 @@
 source :rubygems
 
+def jruby?
+  return RUBY_ENGINE == "jruby"
+end
+
 gem "cabin", "0.4.1" # for logging. apache 2 license
 gem "bunny" # for amqp support, MIT-style license
 gem "uuidtools" # for naming amqp queues, License ???
@@ -30,6 +34,7 @@ gem "statsd-ruby", "0.3.0" # outputs/statsd, # License: As-Is
 gem "gmetric", "0.1.3" # outputs/ganglia, # License: MIT
 gem "xmpp4r", "0.5" # outputs/xmpp, # License: As-Is
 gem "gelfd", "0.2.0" #inputs/gelf, # License: Apache 2.0
+jruby? and gem "jruby-win32ole" # inputs/eventlog, # License: JRuby
 
 gem "ffi-rzmq", "0.9.0"
 gem "ffi"
diff --git a/lib/logstash/inputs/eventlog.rb b/lib/logstash/inputs/eventlog.rb
new file mode 100644
index 00000000000..cc930f56f25
--- /dev/null
+++ b/lib/logstash/inputs/eventlog.rb
@@ -0,0 +1,100 @@
+require "logstash/inputs/base"
+require "logstash/namespace"
+require "socket"
+
+# Pull events from a Windows Event Log
+#
+# To collect Events from the System Event Log, use a config like:
+# input {
+#   eventlog {
+#     type  => 'Win32-EventLog'
+#     name  => 'System'
+#   }
+# }
+class LogStash::Inputs::EventLog < LogStash::Inputs::Base
+
+  config_name "eventlog"
+  plugin_status "beta"
+
+  # Event Log Name
+  config :name, :validate => :string, :required => true, :default => "System"
+
+  public
+  def initialize(params)
+    super
+    @format ||= "json_event"
+  end # def initialize
+
+  public
+  def register
+    @hostname = Socket.gethostname
+    @logger.info("Registering input eventlog://#{@hostname}/#{@name}")
+    require "win32ole" # rubygem 'win32ole' ('jruby-win32ole' on JRuby)
+  end # def register
+
+  public
+  def run(queue)
+    @wmi = WIN32OLE.connect("winmgmts://")
+    # When we start up, assume we've already shipped all the events in the log.
+    # TODO: Maybe persist this somewhere else so we can catch up on events that
+    #       happened while Logstash was not running (like reboots, etc.).
+    #       I suppose it would also be valid to just ship all the events at
+    #       start-up, but might have thundering-herd problems with that...
+    newest_shipped_event = latest_record_number
+    next_newest_shipped_event = newest_shipped_event
+    begin
+      @logger.debug("Tailing Windows Event Log '#{@name}'")
+      loop do
+        event_index = 0
+        latest_events.each do |event|
+          break if event.RecordNumber == newest_shipped_event
+          timestamp = DateTime.strptime(event.TimeGenerated, "%Y%m%d%H%M%S").iso8601
+          timestamp[19..-1] = DateTime.now.iso8601[19..-1] # Copy over the correct TZ offset
+          e = LogStash::Event.new({
+            "@source" => "eventlog://#{@hostname}/#{@name}",
+            "@type" => @type,
+            "@timestamp" => timestamp
+          })
+          %w{Category CategoryString ComputerName EventCode EventIdentifier
+            EventType Logfile Message RecordNumber SourceName
+            TimeGenerated TimeWritten Type User
+          }.each do |property|
+            e[property] = event.send property
+          end # each event propery
+          e["InsertionStrings"] = unwrap_racob_variant_array(event.InsertionStrings)
+          data = unwrap_racob_variant_array(event.Data)
+          # Data is an array of signed shorts, so convert to bytes and pack a string
+          e["Data"] = data.map{|byte| (byte > 0) ? byte : 256 + byte}.pack("c*")
+          queue << e
+          # Update the newest-record pointer if I'm shipping the newest record in this batch
+          next_newest_shipped_event = event.RecordNumber if (event_index += 1) == 1
+        end # lastest_events.each
+        newest_shipped_event = next_newest_shipped_event
+        sleep 10 # Poll for new events every 10 seconds
+      end # loop
+    rescue Exception => ex
+      @logger.error("Windows Event Log error: #{ex}\n#{ex.backtrace}")
+      sleep 1
+      retry
+    end # begin/rescue
+  end # def run
+
+  private
+  def latest_events
+    wmi_query = "select * from Win32_NTLogEvent where Logfile = '#{@name}'"
+    events = @wmi.ExecQuery(wmi_query)
+  end # def latest_events
+
+  private
+  def latest_record_number
+    record_number = 0
+    latest_events.each{|event| record_number = event.RecordNumber; break}
+    record_number
+  end # def latest_record_number
+
+  private
+  def unwrap_racob_variant_array(variants)
+    variants ||= []
+    variants.map {|v| (v.respond_to? :getValue) ? v.getValue : v}
+  end # def unwrap_racob_variant_array
+end # class LogStash::Inputs::EventLog
diff --git a/lib/logstash/outputs/email.rb b/lib/logstash/outputs/email.rb
index 2f0aabe5a44..eb445bb1051 100755
--- a/lib/logstash/outputs/email.rb
+++ b/lib/logstash/outputs/email.rb
@@ -1,338 +1,338 @@
-require "logstash/outputs/base"
-require "logstash/namespace"
-
-# https://github.com/mikel/mail
-# supports equal(default), not equal(!), greater than(>), less than(<), greater than or equal(>=), less than or equal(<=), contains(*), does not contain(!*)
-# you must provide a matchName - which is the key.  Then provide your query values - again in key value pairs, separated by a ',' in the value spot.
-# You can say this : 
-# [ "response errors", "response,501,,or,response,301" ] 
-# I hate making requirements like this but this is the format that is the most flexible for making fine selections over data. 
-# NOTE: In the above example we are using just an equality test - so the two values must be exact for matches to be made. You must provide an AND/OR block 
-# between conditions so we know how to deal with them.  Please see below for an example where you wanted an AND instead of the OR default - this would require both to be valid. 
-# [ "response errors", "response,501,,and,response,301" ] 
-# as you can see you can just seperate the Operator logic with a blank key and the operator of your liking - AND/OR 
-# IMPORTANT : you MUST provide a "matchName". This is so I can easily be able to provide a label of sorts for the alert.  
-# In addition, we break after we find  the first valid match. 
-#
-#   email {
-#        tags => [ "sometag" ]
-#        match => [ "response errors", "response,501,,or,response,301",
-#                   "multiple response errors", "response,501,,and,response,301" ] 
-#        to => "main.contact@domain.com"
-#        from => "alert.account@domain.com" # default: logstash.alert@nowhere.com
-#        cc => "" # provide additional recipients
-#        options => [ "smtpIporHost", "smtp.gmail.com",
-#                     "port", "587",
-#                     "domain", "yourDomain", # optional
-#                     "userName", "yourSMTPUsername", 
-#                     "password", "PASS", 
-#                     "starttls", "true",
-#                     "authenticationType", "plain",
-#                     "debug", "true" # optional
-#                   ]
-#        via => "smtp" # or pop or sendmail
-#        subject => "Found '%{matchName}' Alert on %{@source_host}"
-#        body => "Here is the event line %{@message}"
-#        htmlbody => "<h2>%{matchName}</h2><br/><br/><h3>Full Event</h3><br/><br/><div align='center'>%{@message}</div>"
-#    }
-class LogStash::Outputs::Email < LogStash::Outputs::Base
-
-  config_name "email"
-  plugin_status "beta"
-  
-  # the registered fields that we want to monitor
-  # A hash of matches of field => value
-  config :match, :validate => :hash, :required => true
-  
-  # the To address setting - fully qualified email address to send to
-  config :to, :validate => :string, :required => true
-  
-  # The From setting for email - fully qualified email address for the From:
-  config :from, :validate => :string, :default => "logstash.alert@nowhere.com"
-  
-  # cc - send to others
-  config :cc, :validate => :string, :default => ""
-  
-  # how to send email: either smtp or sendmail - default to 'smtp'
-  config :via, :validate => :string, :default => "smtp"
-
-  # the options to use:
-  # smtp: address, port, enable_starttls_auto, user_name, password, authentication(bool), domain
-  # sendmail: location, arguments
-  # If you do not specify anything, you will get the following equivalent code set in
-  # every new mail object:
-  # 
-  #   Mail.defaults do
-  #     delivery_method :smtp, { :address              => "localhost",
-  #                              :port                 => 25,
-  #                              :domain               => 'localhost.localdomain',
-  #                              :user_name            => nil,
-  #                              :password             => nil,
-  #                              :authentication       => nil,(plain, login and cram_md5)
-  #                              :enable_starttls_auto => true  }
-  # 
-  #     retriever_method :pop3, { :address             => "localhost",
-  #                               :port                => 995,
-  #                               :user_name           => nil,
-  #                               :password            => nil,
-  #                               :enable_ssl          => true }
-  #   end
-  # 
-  #   Mail.delivery_method.new  #=> Mail::SMTP instance
-  #   Mail.retriever_method.new #=> Mail::POP3 instance
-  #
-  # Each mail object inherits the default set in Mail.delivery_method, however, on
-  # a per email basis, you can override the method:
-  #
-  #   mail.delivery_method :sendmail
-  # 
-  # Or you can override the method and pass in settings:
-  # 
-  #   mail.delivery_method :sendmail, { :address => 'some.host' }
-  # 
-  # You can also just modify the settings:
-  # 
-  #   mail.delivery_settings = { :address => 'some.host' }
-  # 
-  # The passed in hash is just merged against the defaults with +merge!+ and the result
-  # assigned the mail object.  So the above example will change only the :address value
-  # of the global smtp_settings to be 'some.host', keeping all other values
-  config :options, :validate => :hash, :default => {}
-  
-  # subject for email
-  config :subject, :validate => :string, :default => ""
-  
-  # body for email - just plain text 
-  config :body, :validate => :string, :default => ""
-  
-  # body for email - can contain html markup
-  config :htmlbody, :validate => :string, :default => ""
-  
-  # attachments - has of name of file and file location
-  config :attachments, :validate => :array, :default => []
-  
-  # contenttype : for multipart messages, set the content type and/or charset of the html part
-  config :contenttype, :validate => :string, :default => "text/html; charset=UTF-8"
-
-  public
-  def register
-    require "mail"
-    if @via == "smtp"
-      debug = @options.include?("debug")
-      if !debug
-        debug = false
-      else
-        debug = @options.fetch("debug")
-      end
-      smtpIporHost = @options.include?("smtpIporHost")
-      if !smtpIporHost 
-        smtpIporHost = "localhost"
-      else
-        smtpIporHost = @options.fetch("smtpIporHost")
-      end
-      domain = @options.include?("domain")
-      if !domain 
-        domain = "localhost"
-      else
-        domain = @options.fetch("domain")
-      end
-      port = @options.include?("port")
-      if !port 
-        port = 25
-      else
-        port = @options.fetch("port")
-      end
-      tls = @options.include?("starttls")
-      if !tls
-        tls = false
-      else
-        tls = @options.fetch("starttls")
-      end
-      pass = @options.include?("password")
-      if !pass
-        pass = ""
-      else
-        pass = @options.fetch("password")
-      end
-      userName = @options.include?("userName")
-      if !userName
-        userName = ""
-      else
-        userName = @options.fetch("userName")
-      end
-      authenticationType = @options.include?("authenticationType")
-      if !authenticationType
-        authenticationType = "plain"
-      else
-        authenticationType = @options.fetch("authenticationType")
-      end
-      Mail.defaults do                                                   
-        delivery_method :smtp , { :address   => smtpIporHost,
-                                  :port      => port,
-                                  :domain    => domain,
-                                  :user_name => userName,
-                                  :password  => pass,
-                                  :authentication => authenticationType,
-                                  :enable_starttls_auto => tls,
-                                  :debug => debug }  
-      end
-    else
-      Mail.defaults do                                                
-        delivery_method :@via, @options 
-      end
-    end # @via tests  
-    @logger.debug("Email Output Registered!", :config => @config)
-  end # def register
-
-  public
-  def receive(event)
-    return unless output?(event)
-      @logger.debug("Event being tested for Email", :tags => @tags, :event => event)
-      # Set Intersection - returns a new array with the items that are the same between the two
-      if !@tags.empty? && (event.tags & @tags).size == 0
-         # Skip events that have no tags in common with what we were configured
-         @logger.debug("No Tags match for Email Output!")
-         return
-      end
-	
-    @logger.debug("Match data for Email - ", :match => @match)
-    successful = false
-    matchName = ""
-    operator = ""
-    @match.each do |name, query|
-      if successful
-        break
-      else
-        matchName = name
-      end
-      # now loop over the csv query
-      queryArray = query.split(',')
-      index = 1
-      while index < queryArray.length
-        field = queryArray.at(index -1)
-        value = queryArray.at(index)
-        index = index + 2
-        if field == "" 
-          if value.downcase == "and" 
-            operator = "and"
-          elsif value.downcase == "or" 
-            operator = "or"
-          else
-            operator = "or"
-            @logger.error("Operator Provided Is Not Found, Currently We Only Support AND/OR Values! - defaulting to OR")
-          end
-        else   
-          hasField = event.fields.has_key?(field)
-          @logger.debug("Does Event Contain Field - ", :hasField => hasField) 
-          isValid = false   
-          # if we have maching field and value is wildcard - we have a success
-          if hasField
-            if value == "*"
-              isValid = true
-            else
-              # we get an array so we need to loop over the values and find if we have a match
-              eventFieldValues = event.fields.fetch(field)
-              @logger.debug("Event Field Values - ", :eventFieldValues => eventFieldValues) 
-              eventFieldValues.each do |eventFieldValue|
-                isValid = validateValue(eventFieldValue, value)
-                if isValid # no need to iterate any further
-                  @logger.debug("VALID CONDITION FOUND - ", :eventFieldValue => eventFieldValue, :value => value) 
-                  break
-                end
-              end # end eventFieldValues.each do
-            end # end value == "*"
-          end # end hasField
-          # if we have an AND operator and we have a successful == false break
-          if operator == "and" && !isValid
-            successful = false
-          elsif operator == "or" && (isValid || successful)
-            successful = true
-          else
-            successful = isValid
-          end
-        end
-      end
-    end # @match.each do
-
-    @logger.debug("Email Did we match any alerts for event : ", :successful => successful)
-	
-    if successful
-      # first add our custom field - matchName - so we can use it in the sprintf function
-      event["matchName"] = matchName
-      @logger.debug("Sending mail with these settings : ", :via => @via, :options => @options, :from => @from, :to => @to, :cc => @cc, :subject => @subject, :body => @body, :content_type => @contenttype, :htmlbody => @htmlbody, :attachments => @attachments, :to => to, :to => to)
-      formatedSubject = event.sprintf(@subject)
-      formattedBody = event.sprintf(@body)
-      formattedHtmlBody = event.sprintf(@htmlbody)
-    	# we have a match(s) - send email
-    	mail = Mail.new 
-    	mail.from = event.sprintf(@from)
-    	mail.to = event.sprintf(@to)
-    	mail.cc	= event.sprintf(@cc)
-    	mail.subject = formatedSubject
-    	if @htmlbody.empty?
-    	  mail.body = formattedBody
-    	else
-      	mail.text_part = Mail::Part.new do
-      	  content_type "text/plain; charset=UTF-8"
-      	  body formattedBody
-      	end
-      	mail.html_part = Mail::Part.new do
-      	  content_type "text/html; charset=UTF-8"
-      	  body formattedHtmlBody
-      	end
-    	end
-    	@attachments.each do |fileLocation|
-    	  mail.add_file(fileLocation)
-    	end # end @attachments.each
-    	mail.deliver!
-    end # end if successful
-  end # def receive
-  
-  private
-  def validateValue(eventFieldValue, value)
-    valid = false
-    # order of this if-else is important - please don't change it
-    if value.start_with?(">=")# greater than or equal
-      value.gsub!(">=","")
-      if eventFieldValue.to_i >= value.to_i
-        valid = true
-      end      
-    elsif value.start_with?("<=")# less than or equal
-      value.gsub!("<=","")
-      if eventFieldValue.to_i <= value.to_i
-        valid = true
-      end
-    elsif value.start_with?(">")# greater than
-      value.gsub!(">","")
-      if eventFieldValue.to_i > value.to_i
-        valid = true
-      end      
-    elsif value.start_with?("<")# less than
-      value.gsub!("<","")
-      if eventFieldValue.to_i < value.to_i
-        valid = true
-      end      
-    elsif value.start_with?("*")# contains
-      value.gsub!("*","")
-      if eventFieldValue.include?(value)
-        valid = true
-      end
-    elsif value.start_with?("!*")# does not contain
-      value.gsub!("!*","")
-      if !eventFieldValue.include?(value)
-        valid = true
-      end
-    elsif value.start_with?("!")# not equal 
-      value.gsub!("!","")
-      if eventFieldValue != value
-        valid = true
-      end
-    else # default equal
-      if eventFieldValue == value
-        valid = true
-      end
-    end
-    return valid
-  end # end validateValue()
-
+require "logstash/outputs/base"
+require "logstash/namespace"
+
+# https://github.com/mikel/mail
+# supports equal(default), not equal(!), greater than(>), less than(<), greater than or equal(>=), less than or equal(<=), contains(*), does not contain(!*)
+# you must provide a matchName - which is the key.  Then provide your query values - again in key value pairs, separated by a ',' in the value spot.
+# You can say this : 
+# [ "response errors", "response,501,,or,response,301" ] 
+# I hate making requirements like this but this is the format that is the most flexible for making fine selections over data. 
+# NOTE: In the above example we are using just an equality test - so the two values must be exact for matches to be made. You must provide an AND/OR block 
+# between conditions so we know how to deal with them.  Please see below for an example where you wanted an AND instead of the OR default - this would require both to be valid. 
+# [ "response errors", "response,501,,and,response,301" ] 
+# as you can see you can just seperate the Operator logic with a blank key and the operator of your liking - AND/OR 
+# IMPORTANT : you MUST provide a "matchName". This is so I can easily be able to provide a label of sorts for the alert.  
+# In addition, we break after we find  the first valid match. 
+#
+#   email {
+#        tags => [ "sometag" ]
+#        match => [ "response errors", "response,501,,or,response,301",
+#                   "multiple response errors", "response,501,,and,response,301" ] 
+#        to => "main.contact@domain.com"
+#        from => "alert.account@domain.com" # default: logstash.alert@nowhere.com
+#        cc => "" # provide additional recipients
+#        options => [ "smtpIporHost", "smtp.gmail.com",
+#                     "port", "587",
+#                     "domain", "yourDomain", # optional
+#                     "userName", "yourSMTPUsername", 
+#                     "password", "PASS", 
+#                     "starttls", "true",
+#                     "authenticationType", "plain",
+#                     "debug", "true" # optional
+#                   ]
+#        via => "smtp" # or pop or sendmail
+#        subject => "Found '%{matchName}' Alert on %{@source_host}"
+#        body => "Here is the event line %{@message}"
+#        htmlbody => "<h2>%{matchName}</h2><br/><br/><h3>Full Event</h3><br/><br/><div align='center'>%{@message}</div>"
+#    }
+class LogStash::Outputs::Email < LogStash::Outputs::Base
+
+  config_name "email"
+  plugin_status "beta"
+  
+  # the registered fields that we want to monitor
+  # A hash of matches of field => value
+  config :match, :validate => :hash, :required => true
+  
+  # the To address setting - fully qualified email address to send to
+  config :to, :validate => :string, :required => true
+  
+  # The From setting for email - fully qualified email address for the From:
+  config :from, :validate => :string, :default => "logstash.alert@nowhere.com"
+  
+  # cc - send to others
+  config :cc, :validate => :string, :default => ""
+  
+  # how to send email: either smtp or sendmail - default to 'smtp'
+  config :via, :validate => :string, :default => "smtp"
+
+  # the options to use:
+  # smtp: address, port, enable_starttls_auto, user_name, password, authentication(bool), domain
+  # sendmail: location, arguments
+  # If you do not specify anything, you will get the following equivalent code set in
+  # every new mail object:
+  # 
+  #   Mail.defaults do
+  #     delivery_method :smtp, { :address              => "localhost",
+  #                              :port                 => 25,
+  #                              :domain               => 'localhost.localdomain',
+  #                              :user_name            => nil,
+  #                              :password             => nil,
+  #                              :authentication       => nil,(plain, login and cram_md5)
+  #                              :enable_starttls_auto => true  }
+  # 
+  #     retriever_method :pop3, { :address             => "localhost",
+  #                               :port                => 995,
+  #                               :user_name           => nil,
+  #                               :password            => nil,
+  #                               :enable_ssl          => true }
+  #   end
+  # 
+  #   Mail.delivery_method.new  #=> Mail::SMTP instance
+  #   Mail.retriever_method.new #=> Mail::POP3 instance
+  #
+  # Each mail object inherits the default set in Mail.delivery_method, however, on
+  # a per email basis, you can override the method:
+  #
+  #   mail.delivery_method :sendmail
+  # 
+  # Or you can override the method and pass in settings:
+  # 
+  #   mail.delivery_method :sendmail, { :address => 'some.host' }
+  # 
+  # You can also just modify the settings:
+  # 
+  #   mail.delivery_settings = { :address => 'some.host' }
+  # 
+  # The passed in hash is just merged against the defaults with +merge!+ and the result
+  # assigned the mail object.  So the above example will change only the :address value
+  # of the global smtp_settings to be 'some.host', keeping all other values
+  config :options, :validate => :hash, :default => {}
+  
+  # subject for email
+  config :subject, :validate => :string, :default => ""
+  
+  # body for email - just plain text 
+  config :body, :validate => :string, :default => ""
+  
+  # body for email - can contain html markup
+  config :htmlbody, :validate => :string, :default => ""
+  
+  # attachments - has of name of file and file location
+  config :attachments, :validate => :array, :default => []
+  
+  # contenttype : for multipart messages, set the content type and/or charset of the html part
+  config :contenttype, :validate => :string, :default => "text/html; charset=UTF-8"
+
+  public
+  def register
+    require "mail"
+    if @via == "smtp"
+      debug = @options.include?("debug")
+      if !debug
+        debug = false
+      else
+        debug = @options.fetch("debug")
+      end
+      smtpIporHost = @options.include?("smtpIporHost")
+      if !smtpIporHost 
+        smtpIporHost = "localhost"
+      else
+        smtpIporHost = @options.fetch("smtpIporHost")
+      end
+      domain = @options.include?("domain")
+      if !domain 
+        domain = "localhost"
+      else
+        domain = @options.fetch("domain")
+      end
+      port = @options.include?("port")
+      if !port 
+        port = 25
+      else
+        port = @options.fetch("port")
+      end
+      tls = @options.include?("starttls")
+      if !tls
+        tls = false
+      else
+        tls = @options.fetch("starttls")
+      end
+      pass = @options.include?("password")
+      if !pass
+        pass = ""
+      else
+        pass = @options.fetch("password")
+      end
+      userName = @options.include?("userName")
+      if !userName
+        userName = ""
+      else
+        userName = @options.fetch("userName")
+      end
+      authenticationType = @options.include?("authenticationType")
+      if !authenticationType
+        authenticationType = "plain"
+      else
+        authenticationType = @options.fetch("authenticationType")
+      end
+      Mail.defaults do                                                   
+        delivery_method :smtp , { :address   => smtpIporHost,
+                                  :port      => port,
+                                  :domain    => domain,
+                                  :user_name => userName,
+                                  :password  => pass,
+                                  :authentication => authenticationType,
+                                  :enable_starttls_auto => tls,
+                                  :debug => debug }  
+      end
+    else
+      Mail.defaults do                                                
+        delivery_method :@via, @options 
+      end
+    end # @via tests  
+    @logger.debug("Email Output Registered!", :config => @config)
+  end # def register
+
+  public
+  def receive(event)
+    return unless output?(event)
+      @logger.debug("Event being tested for Email", :tags => @tags, :event => event)
+      # Set Intersection - returns a new array with the items that are the same between the two
+      if !@tags.empty? && (event.tags & @tags).size == 0
+         # Skip events that have no tags in common with what we were configured
+         @logger.debug("No Tags match for Email Output!")
+         return
+      end
+	
+    @logger.debug("Match data for Email - ", :match => @match)
+    successful = false
+    matchName = ""
+    operator = ""
+    @match.each do |name, query|
+      if successful
+        break
+      else
+        matchName = name
+      end
+      # now loop over the csv query
+      queryArray = query.split(',')
+      index = 1
+      while index < queryArray.length
+        field = queryArray.at(index -1)
+        value = queryArray.at(index)
+        index = index + 2
+        if field == "" 
+          if value.downcase == "and" 
+            operator = "and"
+          elsif value.downcase == "or" 
+            operator = "or"
+          else
+            operator = "or"
+            @logger.error("Operator Provided Is Not Found, Currently We Only Support AND/OR Values! - defaulting to OR")
+          end
+        else   
+          hasField = event.fields.has_key?(field)
+          @logger.debug("Does Event Contain Field - ", :hasField => hasField) 
+          isValid = false   
+          # if we have maching field and value is wildcard - we have a success
+          if hasField
+            if value == "*"
+              isValid = true
+            else
+              # we get an array so we need to loop over the values and find if we have a match
+              eventFieldValues = event.fields.fetch(field)
+              @logger.debug("Event Field Values - ", :eventFieldValues => eventFieldValues) 
+              eventFieldValues.each do |eventFieldValue|
+                isValid = validateValue(eventFieldValue, value)
+                if isValid # no need to iterate any further
+                  @logger.debug("VALID CONDITION FOUND - ", :eventFieldValue => eventFieldValue, :value => value) 
+                  break
+                end
+              end # end eventFieldValues.each do
+            end # end value == "*"
+          end # end hasField
+          # if we have an AND operator and we have a successful == false break
+          if operator == "and" && !isValid
+            successful = false
+          elsif operator == "or" && (isValid || successful)
+            successful = true
+          else
+            successful = isValid
+          end
+        end
+      end
+    end # @match.each do
+
+    @logger.debug("Email Did we match any alerts for event : ", :successful => successful)
+	
+    if successful
+      # first add our custom field - matchName - so we can use it in the sprintf function
+      event["matchName"] = matchName
+      @logger.debug("Sending mail with these settings : ", :via => @via, :options => @options, :from => @from, :to => @to, :cc => @cc, :subject => @subject, :body => @body, :content_type => @contenttype, :htmlbody => @htmlbody, :attachments => @attachments, :to => to, :to => to)
+      formatedSubject = event.sprintf(@subject)
+      formattedBody = event.sprintf(@body)
+      formattedHtmlBody = event.sprintf(@htmlbody)
+    	# we have a match(s) - send email
+    	mail = Mail.new 
+    	mail.from = event.sprintf(@from)
+    	mail.to = event.sprintf(@to)
+    	mail.cc	= event.sprintf(@cc)
+    	mail.subject = formatedSubject
+    	if @htmlbody.empty?
+    	  mail.body = formattedBody
+    	else
+      	mail.text_part = Mail::Part.new do
+      	  content_type "text/plain; charset=UTF-8"
+      	  body formattedBody
+      	end
+      	mail.html_part = Mail::Part.new do
+      	  content_type "text/html; charset=UTF-8"
+      	  body formattedHtmlBody
+      	end
+    	end
+    	@attachments.each do |fileLocation|
+    	  mail.add_file(fileLocation)
+    	end # end @attachments.each
+    	mail.deliver!
+    end # end if successful
+  end # def receive
+  
+  private
+  def validateValue(eventFieldValue, value)
+    valid = false
+    # order of this if-else is important - please don't change it
+    if value.start_with?(">=")# greater than or equal
+      value.gsub!(">=","")
+      if eventFieldValue.to_i >= value.to_i
+        valid = true
+      end      
+    elsif value.start_with?("<=")# less than or equal
+      value.gsub!("<=","")
+      if eventFieldValue.to_i <= value.to_i
+        valid = true
+      end
+    elsif value.start_with?(">")# greater than
+      value.gsub!(">","")
+      if eventFieldValue.to_i > value.to_i
+        valid = true
+      end      
+    elsif value.start_with?("<")# less than
+      value.gsub!("<","")
+      if eventFieldValue.to_i < value.to_i
+        valid = true
+      end      
+    elsif value.start_with?("*")# contains
+      value.gsub!("*","")
+      if eventFieldValue.include?(value)
+        valid = true
+      end
+    elsif value.start_with?("!*")# does not contain
+      value.gsub!("!*","")
+      if !eventFieldValue.include?(value)
+        valid = true
+      end
+    elsif value.start_with?("!")# not equal 
+      value.gsub!("!","")
+      if eventFieldValue != value
+        valid = true
+      end
+    else # default equal
+      if eventFieldValue == value
+        valid = true
+      end
+    end
+    return valid
+  end # end validateValue()
+
 end # class LogStash::Outputs::Email
\ No newline at end of file
diff --git a/logstash.gemspec b/logstash.gemspec
index 455bd8a6658..908be136018 100755
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -49,6 +49,7 @@ Gem::Specification.new do |spec|
   spec.add_dependency "uuidtools" # for naming amqp queues, License ???
   spec.add_dependency "xmpp4r", "~> 0.5" # outputs/xmpp, # License: As-Is
   spec.add_dependency "mail" #outputs/email, # License: MIT License
+  spec.add_dependency "jruby-win32ole" # License: JRuby
 
   spec.add_dependency("ffi-rzmq")
   spec.add_development_dependency 'mocha'
