diff --git a/lib/logstash/filters/grep.rb b/lib/logstash/filters/grep.rb
index 1a11bd089d6..c4afe4af432 100644
--- a/lib/logstash/filters/grep.rb
+++ b/lib/logstash/filters/grep.rb
@@ -25,6 +25,13 @@ class LogStash::Filters::Grep < LogStash::Filters::Base
   # through.
   config :negate, :validate => :boolean, :default => false
 
+  #Negate the entire expression
+  #
+  #If this is set to true the entire match expression is negated instead of
+  #the individual components.  This allows for dropping lines where all of the
+  #components are false insead of just one of them.
+  config :negate_expression, :validate => :boolean, :default => false
+
   # A hash of matches of field => regexp.  If multiple matches are specified,
   # all must match for the grep to be considered successful.  Normal regular
   # expressions are supported here.
@@ -135,7 +142,7 @@ def filter(event)
       end # match["match"].each
     end # @patterns.each
 
-    if matches == @patterns.length
+    if (matches == @patterns.length) ^ @negate_expression
       filter_matched(event)
     else
       if @drop == true
diff --git a/spec/filters/grep.rb b/spec/filters/grep.rb
index c04913591e0..6808ed5e5c3 100644
--- a/spec/filters/grep.rb
+++ b/spec/filters/grep.rb
@@ -325,6 +325,63 @@
     end
   end
 
+  describe "repeat a field in match config, negate the entire match expression not the individual components" do
+    config <<-CONFIG
+    filter {
+      grep {
+        match => ["message", "hello", "message", "world"]
+        negate_expression => true
+      }
+    }
+    CONFIG
+
+    #both match
+    sample "hello world" do
+      insist { subject }.nil?
+    end
+    #one match
+    sample "bye world" do
+      reject { subject }.nil?
+    end
+    #one match
+    sample "hello Jordan" do
+      reject { subject }.nil?
+    end
+    #no match
+    sample "WTF" do
+      reject { subject }.nil?
+    end
+  end
+
+  describe "repeat a field in match config, negate expression and components results in or" do
+    config <<-CONFIG
+    filter {
+      grep {
+        match => ["message", "hello", "message", "world"]
+        negate_expression => true
+        negate => true
+      }
+    }
+    CONFIG
+
+    #both match
+    sample "hello world" do
+      reject { subject }.nil?
+    end
+    #one match
+    sample "bye world" do
+      reject { subject }.nil?
+    end
+    #one match
+    sample "hello Jordan" do
+      reject { subject }.nil?
+    end
+    #no match
+    sample "WTF" do
+      insist { subject }.nil?
+    end
+  end
+
   describe "case-insensitive matching" do
     config <<-CONFIG
       filter {
