diff --git a/Guardfile b/Guardfile
new file mode 100644
index 00000000000..5608193b5b0
--- /dev/null
+++ b/Guardfile
@@ -0,0 +1,22 @@
+ignore %r{^ignored/path/}, %r{base\.rb}, %r{multiline\.rb}
+
+require 'asciidoctor'
+require 'erb'
+require "docs/asciidocgen"
+
+guard 'shell', :all_on_start => true do
+
+  #Build doc from logstash
+  watch(%r{^lib/logstash/filters/.+\.rb}) {|m|
+    puts "change detected on #{m[0]}"
+    gen = LogStashConfigAsciiDocGenerator.new
+    gen.generate(m[0], {:output => 'docs/asciidoc/generated'})
+  }
+
+  #Prepare preview
+  watch(%r{^docs/asciidoc/.*/.+\.asciidoc}) {|m|
+    puts "building asciidoc for #{m[0]}"
+    Asciidoctor.render_file(m[0], :in_place => true)
+  }
+
+end
\ No newline at end of file
diff --git a/docs/asciidocgen.rb b/docs/asciidocgen.rb
index ec7cbba5d51..8733d0c035c 100644
--- a/docs/asciidocgen.rb
+++ b/docs/asciidocgen.rb
@@ -1,7 +1,6 @@
 require "rubygems"
 require "erb"
 require "optparse"
-require "kramdown" # markdown parser
 
 $: << Dir.pwd
 $: << File.join(File.dirname(__FILE__), "..", "lib")
@@ -84,7 +83,7 @@ def add_config(code)
     # are gone from logstash.
     name = name.to_s unless name.is_a?(Regexp)
 
-    description = Kramdown::Document.new(@comments.join("\n")).to_kramdown
+    description = @comments.join("\n")
     @attributes[name][:description] = description
     clear_comments
   end # def add_config
@@ -202,7 +201,7 @@ def generate(file, settings)
     is_contrib_plugin = @contrib_list.include?(file)
 
     # descriptions are assumed to be markdown
-    description = Kramdown::Document.new(@class_description).to_kramdown
+    description = @class_description
 
     klass.get_config.each do |name, settings|
       @attributes[name].merge!(settings)
diff --git a/rakelib/contribute.rake b/rakelib/contribute.rake
new file mode 100644
index 00000000000..5a5d414b6e6
--- /dev/null
+++ b/rakelib/contribute.rake
@@ -0,0 +1,76 @@
+
+namespace "contribute" do
+  task "watch-all" do
+    Rake::Task["gem:require"].invoke("octokit", ">= 0", ENV["GEM_HOME"])
+    require 'octokit'
+    require 'io/console' #for password input
+    #Connect to Github
+    print "Please enter your github login: "
+    login = STDIN.gets.chomp
+    print "Please enter your github password: "
+    pass = STDIN.noecho(&:gets).chomp
+    puts ""
+    client=Octokit::Client.new(:login => login, :password => pass)
+    client.auto_paginate = true
+    client.organization_repositories("logstash-plugins").each do |plugin_repo|
+      success = client.update_subscription("logstash-plugins/#{plugin_repo.name}", {subscribed: true})
+      if success
+      	puts "Successfully added you as subscriber to logstash-plugins/#{plugin_repo.name}"
+      else
+      	puts "Failure in adding you as subscriber to logstash-plugins/#{plugin_repo.name}"
+      end
+    end
+  end
+
+  task "star-all" do
+    Rake::Task["gem:require"].invoke("octokit", ">= 0", ENV["GEM_HOME"])
+    require 'octokit'
+    #Connect to Github
+    print "Please enter your github login: "
+    login = STDIN.gets.chomp
+    print "Please enter your github password: "
+    pass = STDIN.noecho(&:gets).chomp
+    puts ""
+    client=Octokit::Client.new(:login => login, :password => pass)
+    client.auto_paginate = true
+    client.organization_repositories("logstash-plugins").each do |plugin_repo|
+      success = client.star("logstash-plugins/#{plugin_repo.name}")
+      if success
+      	puts "Successfully starred logstash-plugins/#{plugin_repo.name} for you"
+      else
+      	puts "Failure in starring logstash-plugins/#{plugin_repo.name} for you"
+      end
+    end
+  end
+
+  task "clone-all-logstash-plugins" do
+    Rake::Task["gem:require"].invoke("git", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("octokit", ">= 0", ENV["GEM_HOME"])
+    require 'octokit'
+    require 'git'
+    Octokit.auto_paginate = true
+    Octokit.organization_repositories("logstash-plugins").each do |plugin_repo|
+      puts "Cloning github.com/logstash-plugins/#{plugin_repo.name}"
+      Git.clone("https://github.com/logstash-plugins/#{plugin_repo.name}.git", "plugins/#{plugin_repo.name}")
+    end
+  end
+
+  task "documentation-live-reload" do  
+    Rake::Task["gem:require"].invoke("guard", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("guard-shell", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("rb-inotify", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("asciidoctor", ">= 0", ENV["GEM_HOME"])
+    # Necessary gems could depends on something else
+    Rake::Task["gem:require"].invoke("cabin", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("i18n", ">= 0", ENV["GEM_HOME"])
+    Rake::Task["gem:require"].invoke("oj", ">= 0", ENV["GEM_HOME"])
+    require 'guard'
+    ## add doc to path
+    $: << "#{Dir.pwd}"
+    
+    # Let's load Guard and process the Guardfile
+	Guard.setup
+	Guard.guards 'shell'
+	Guard.start :no_interactions => true
+  end
+end # namespace dependency
