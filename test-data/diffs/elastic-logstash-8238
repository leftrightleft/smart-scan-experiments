diff --git a/build.gradle b/build.gradle
index 908c2712259..19ceb1ba64b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,22 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'org.yaml:snakeyaml:1.17'
+    }
+}
+
+plugins {
+    id "de.undercouch.download" version "3.2.0"
+}
+
+apply plugin: 'de.undercouch.download'
+
+import de.undercouch.gradle.tasks.download.Download
+import de.undercouch.gradle.tasks.download.Verify
+import org.yaml.snakeyaml.Yaml
+
 allprojects {
   group = 'org.logstash'
 
@@ -8,7 +27,6 @@ allprojects {
   project.targetCompatibility = JavaVersion.VERSION_1_8
 
   tasks.withType(JavaCompile).all {
-
       def env = System.getenv()
       boolean ci = env['CI']
 
@@ -19,7 +37,7 @@ allprojects {
   }
 
   clean {
-    delete "${projectDir}/out/"
+      delete "${projectDir}/out/"
   }
 
   //https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
@@ -51,3 +69,54 @@ allprojects {
     }
   }
 }
+
+// fetch version from Logstash's master versions.yml file
+def versionMap = (Map) (new Yaml()).load(new File("${projectDir}/versions.yml").text)
+
+String jRubyURL
+String jRubyVersion
+String jRubySha1
+Boolean doChecksum
+
+if (versionMap["jruby-runtime-override"]) {
+    jRubyVersion = versionMap["jruby-runtime-override"]["version"]
+    jRubyURL = versionMap["jruby-runtime-override"]["url"]
+    doChecksum = false
+} else {
+    jRubyVersion = versionMap["jruby"]["version"]
+    jRubySha1 = versionMap["jruby"]["sha1"]
+    jRubyURL = "http://jruby.org.s3.amazonaws.com/downloads/${jRubyVersion}/jruby-bin-${jRubyVersion}.tar.gz"
+    doChecksum = true
+}
+
+// Tasks
+task bootstrap {}
+
+task downloadJRuby(type: Download) {
+    description "Download JRuby artifact from this specific URL: ${jRubyURL}"
+    src jRubyURL
+    onlyIfNewer true
+    dest new File("${projectDir}/vendor/_", "jruby-bin-${jRubyVersion}.tar.gz")
+}
+
+task verifyFile(dependsOn: downloadJRuby, type: Verify) {
+    description "Verify the SHA1 of the download JRuby artifact"
+    src new File("${projectDir}/vendor/_/jruby-bin-${jRubyVersion}.tar.gz")
+    algorithm 'SHA-1'
+    checksum jRubySha1
+}
+
+task downloadAndInstallJRuby(dependsOn: verifyFile, type: Copy) {
+    description "Install JRuby in the vendor directory"
+    from tarTree(downloadJRuby.dest)
+    eachFile { f ->
+      f.path = f.path.replaceFirst("^jruby-${jRubyVersion}", '')
+    }
+    exclude "**/stdlib/rdoc/**"
+    includeEmptyDirs = false
+    into "${projectDir}/vendor/jruby"
+}
+
+// If you are running a JRuby snapshot we will skip the integrity check.
+verifyFile.onlyIf { doChecksum }
+bootstrap.dependsOn downloadAndInstallJRuby
diff --git a/rakelib/fetch.rake b/rakelib/fetch.rake
deleted file mode 100644
index 1e5a49fea50..00000000000
--- a/rakelib/fetch.rake
+++ /dev/null
@@ -1,82 +0,0 @@
-require "net/http"
-require "uri"
-require "digest/sha1"
-
-directory "vendor/_" => ["vendor"] do |task, args|
-  mkdir task.name
-end
-
-def fetch(url, sha1, output)
-  puts "Downloading #{url}"
-  actual_sha1 = download(url, output)
-
-  if sha1 != "IGNORE" && actual_sha1 != sha1
-    fail "SHA1 does not match (expected '#{sha1}' but got '#{actual_sha1}')"
-  end
-end # def fetch
-
-def file_fetch(url, sha1)
-  filename = File.basename(URI(url).path)
-  output = "vendor/_/#{filename}"
-  task output => [ "vendor/_" ] do
-    begin
-      actual_sha1 = file_sha1(output)
-      if sha1 != "IGNORE" && actual_sha1 != sha1
-        fetch(url, sha1, output)
-      end
-    rescue Errno::ENOENT
-      fetch(url, sha1, output)
-    end
-  end.invoke
-
-  return output
-end
-
-def file_sha1(path)
-  digest = Digest::SHA1.new
-  fd = File.new(path, "rb")
-  while true
-    begin
-      digest << fd.sysread(16384)
-    rescue EOFError
-      break
-    end
-  end
-  return digest.hexdigest
-ensure
-  fd.close if fd
-end
-
-def download(url, output)
-  uri = URI(url)
-  digest = Digest::SHA1.new
-  tmp = "#{output}.tmp"
-  Net::HTTP.start(uri.host, uri.port, :use_ssl => (uri.scheme == "https")) do |http|
-    request = Net::HTTP::Get.new(uri.path)
-    http.request(request) do |response|
-      fail "HTTP fetch failed for #{url}. #{response}" if response.code != "200"
-      size = (response["content-length"].to_i || -1).to_f
-      count = 0
-      File.open(tmp, "wb") do |fd|
-        response.read_body do |chunk|
-          fd.write(chunk)
-          digest << chunk
-          if size > 0 && $stdout.tty?
-            count += chunk.bytesize
-            $stdout.write(sprintf("\r%0.2f%%", count/size * 100))
-          end
-        end
-      end
-      $stdout.write("\r      \r") if $stdout.tty?
-    end
-  end
-
-  File.rename(tmp, output)
-
-  return digest.hexdigest
-rescue SocketError => e
-  puts "Failure while downloading #{url}: #{e}"
-  raise
-ensure
-  File.unlink(tmp) if File.exist?(tmp)
-end # def download
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index 687a540d303..f3b38d50c11 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -1,94 +1,10 @@
 namespace "vendor" do
-  require "yaml"
-  VERSIONS = YAML.load(File.read(File.join(File.dirname(__FILE__), "..", "versions.yml")))
-
   def vendor(*args)
     return File.join("vendor", *args)
   end
 
-  # Untar any files from the given tarball file name.
-  #
-  # A tar entry is passed to the block. The block should should return
-  # * nil to skip this file
-  # * or, the desired string filename to write the file to.
-  def self.untar(tarball, &block)
-    Rake::Task["dependency:archive-tar-minitar"].invoke
-    require "archive/tar/minitar"
-    tgz = Zlib::GzipReader.new(File.open(tarball,"rb"))
-    tar = Archive::Tar::Minitar::Input.open(tgz)
-    tar.each do |entry|
-      path = block.call(entry)
-      next if path.nil?
-      parent = File.dirname(path)
-
-      FileUtils.mkdir_p(parent) unless File.directory?(parent)
-
-      # Skip this file if the output file is the same size
-      if entry.directory?
-        FileUtils.mkdir(path) unless File.directory?(path)
-      else
-        entry_mode = entry.instance_eval { @mode } & 0777
-        if File.exists?(path)
-          stat = File.stat(path)
-          # TODO(sissel): Submit a patch to archive-tar-minitar upstream to
-          # expose headers in the entry.
-          entry_size = entry.instance_eval { @size }
-          # If file sizes are same, skip writing.
-          if Gem.win_platform?
-            #Do not fight with windows permission scheme
-            next if stat.size == entry_size
-          else
-            next if stat.size == entry_size && (stat.mode & 0777) == entry_mode
-          end
-        end
-        puts "Extracting #{entry.full_name} from #{tarball} #{entry_mode.to_s(8)}" if ENV['DEBUG']
-        File.open(path, "wb") do |fd|
-          # eof? check lets us skip empty files. Necessary because the API provided by
-          # Archive::Tar::Minitar::Reader::EntryStream only mostly acts like an
-          # IO object. Something about empty files in this EntryStream causes
-          # IO.copy_stream to throw "can't convert nil into String" on JRuby
-          # TODO(sissel): File a bug about this.
-          while !entry.eof?
-            chunk = entry.read(16384)
-            fd.write(chunk)
-          end
-        end
-        File.chmod(entry_mode, path)
-      end
-    end
-    tar.close
-  end # def untar
-
   task "jruby" do |task, args|
-    JRUBY = "jruby"
-    JRUBY_RUNTIME = "jruby-runtime-override"
-
-    info = VERSIONS[JRUBY_RUNTIME] || VERSIONS[JRUBY]
-    version = info["version"]
-    url = info["url"] || "http://jruby.org.s3.amazonaws.com/downloads/#{version}/jruby-bin-#{version}.tar.gz"
-
-    discard_patterns = Regexp.union([
-      /^samples/,
-      /@LongLink/,
-      /lib\/ruby\/1.8/,
-      /lib\/ruby\/2.0/,
-      /lib\/ruby\/shared\/rdoc/,
-    ])
-
-    download = file_fetch(url, info["sha1"])
-
-    parent = vendor(JRUBY).gsub(/\/$/, "")
-    directory parent => "vendor" do
-      next if parent =~ discard_patterns
-      FileUtils.mkdir(parent)
-    end.invoke unless Rake::Task.task_defined?(parent)
-
-    prefix_re = /^#{Regexp.quote("jruby-#{version}/")}/
-    untar(download) do |entry|
-      out = entry.full_name.gsub(prefix_re, "")
-      next if out =~ discard_patterns
-      vendor(JRUBY, out)
-    end # untar
+    system('./gradlew bootstrap')
   end # jruby
 
   task "all" => "jruby"
