diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index 6db1af2961f..63a7935bedd 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -294,17 +294,24 @@ def configure_plugin_path(paths)
   end # def configure_plugin_path
 
   def load_config(path)
-
-    uri = URI.parse(path)
-    case uri.scheme
-    when nil then
+    begin
+      uri = URI.parse(path)
+
+      case uri.scheme
+      when nil then
+        local_config(path)
+      when /http/ then
+        fetch_config(uri)
+      when "file" then
+        local_config(uri.path)
+      else
+        fail(I18n.t("logstash.agent.configuration.scheme-not-supported", :path => path))
+      end
+    rescue URI::InvalidURIError
+      # fallback for windows.
+      # if the parsing of the file failed we assume we can reach it locally.
+      # some relative path on windows arent parsed correctly (.\logstash.conf)
       local_config(path)
-    when /http/ then
-      fetch_config(uri)
-    when "file" then
-      local_config(uri.path)
-    else
-      fail(I18n.t("logstash.agent.configuration.scheme-not-supported", :path => path))
     end
   end
 
diff --git a/spec/logstash/agent_spec.rb b/spec/logstash/agent_spec.rb
new file mode 100644
index 00000000000..71d29ee0aa2
--- /dev/null
+++ b/spec/logstash/agent_spec.rb
@@ -0,0 +1,37 @@
+require 'spec_helper'
+
+describe LogStash::Agent do
+  subject { LogStash::Agent.new('') }
+  let(:dummy_config) { 'input {}' }
+
+  context "when loading the configuration" do
+    context "when local" do
+      before { expect(subject).to receive(:local_config).with(path) }
+
+      context "unix" do
+        let(:path) { './test.conf' }
+        it 'works with relative path' do
+          subject.load_config(path)
+        end
+      end
+
+      context "windows" do
+        let(:path) { '.\test.conf' }
+        it 'work with relative windows path' do
+          subject.load_config(path)
+        end
+      end
+    end
+    
+    context "when remote" do
+      context 'supported scheme' do
+        let(:path) { "http://test.local/superconfig.conf" }
+
+        before { expect(Net::HTTP).to receive(:get) { dummy_config } }
+        it 'works with http' do
+          expect(subject.load_config(path)).to eq("#{dummy_config}\n")
+        end
+      end
+    end
+  end
+end
