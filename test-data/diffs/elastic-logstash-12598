diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 6880185184c..f3b75cc4324 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -296,10 +296,8 @@ def start_workers
           rescue => e
             # WorkerLoop.run() catches all Java Exception class and re-throws as IllegalStateException with the
             # original exception as the cause
-            @logger.error(
-              "Pipeline worker error, the pipeline will be stopped",
-              default_logging_keys(:error => e.cause.message, :exception => e.cause.class, :backtrace => e.cause.backtrace)
-            )
+            e = e.is_a?(java.lang.IllegalStateException) ? e.cause : e
+            @logger.error("Pipeline worker error, the pipeline will be stopped", error_logging_keys(e))
           end
         end
         @worker_threads << thread
@@ -407,10 +405,7 @@ def inputworker(plugin)
       if plugin.stop?
         @logger.debug(
           "Input plugin raised exception during shutdown, ignoring it.",
-           default_logging_keys(
-             :plugin => plugin.class.config_name,
-             :exception => e.message,
-             :backtrace => e.backtrace))
+          error_logging_keys(e, :plugin => plugin.class.config_name))
         return
       end
 
@@ -552,10 +547,7 @@ def close_plugin_and_ignore(plugin)
     rescue => e
       @logger.warn(
         "plugin raised exception while closing, ignoring",
-        default_logging_keys(
-          :plugin => plugin.class.config_name,
-          :exception => e.message,
-          :backtrace => e.backtrace))
+        error_logging_keys(e, :plugin => plugin.class.config_name))
     end
   end
 
@@ -573,9 +565,7 @@ def init_worker_loop
         @drain_queue,
         @preserve_event_order)
     rescue => e
-      @logger.error(
-        "Worker loop initialization error",
-        default_logging_keys(:error => e.message, :exception => e.class, :stacktrace => e.backtrace.join("\n")))
+      @logger.error("Worker loop initialization error", error_logging_keys(e))
       nil
     end
   end
@@ -588,11 +578,26 @@ def maybe_setup_out_plugins
   end
 
   def default_logging_keys(other_keys = {})
-    keys = {:pipeline_id => pipeline_id}.merge other_keys
+    keys = { :pipeline_id => pipeline_id }
+    keys.merge! other_keys
     keys[:thread] ||= thread.inspect if thread
     keys
   end
 
+  def error_logging_keys(e, other_keys = {})
+    keys = default_logging_keys(other_keys)
+    keys[:message] = e.message
+    keys[:exception] = e.class
+    keys[:backtrace] = e.backtrace
+    cause = e.cause
+    if cause && cause != e
+      cause_details = { message: cause.message, exception: cause.class }
+      cause_details[:backtrace] = cause.backtrace if @logger.debug?
+      keys[:cause] = cause_details
+    end
+    keys
+  end
+
   def preserve_event_order?(pipeline_workers)
     case settings.get("pipeline.ordered")
     when "auto"
