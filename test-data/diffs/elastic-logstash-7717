diff --git a/.ruby-version b/.ruby-version
new file mode 100644
index 00000000000..5d83b41620e
--- /dev/null
+++ b/.ruby-version
@@ -0,0 +1 @@
+jruby-1.7.27
diff --git a/ci/ci_test.bat b/ci/ci_test.bat
new file mode 100644
index 00000000000..e3a4467b9cf
--- /dev/null
+++ b/ci/ci_test.bat
@@ -0,0 +1,41 @@
+@echo off
+
+setlocal
+
+REM Since we are using the system jruby, we need to make sure our jvm process
+REM uses at least 1g of memory, If we don't do this we can get OOM issues when
+REM installing gems. See https://github.com/elastic/logstash/issues/5179
+
+SET JRUBY_OPTS="-J-Xmx1g"
+SET SELECTEDTESTSUITE=%1
+SET /p JRUBYVERSION=<.ruby-version
+
+IF NOT EXIST %JRUBYSRCDIR% (
+  echo "Variable JRUBYSRCDIR must be declared with a valid directory. Aborting.."
+  exit /B 1
+)
+
+SET JRUBYPATH=%JRUBYSRCDIR%\%JRUBYVERSION%
+
+IF NOT EXIST %JRUBYPATH% (
+  echo "Could not find JRuby in %JRUBYPATH%. Aborting.."
+  exit /B 1
+)
+
+SET RAKEPATH=%JRUBYPATH%\bin\rake
+
+IF "%SELECTEDTESTSUITE%"=="core-fail-fast" (
+  echo "Running core-fail-fast tests"
+  %RAKEPATH% test:install-core
+  %RAKEPATH% test:core-fail-fast
+) ELSE (
+  IF "%SELECTEDTESTSUITE%"=="all" (
+    echo "Running all plugins tests"
+    %RAKEPATH% test:install-all
+    %RAKEPATH% test:plugins
+  ) ELSE (
+    echo "Running core tests"
+    %RAKEPATH% test:install-core
+    %RAKEPATH% test:core
+  )
+)
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
index 081a09da27e..98238680de0 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
@@ -50,7 +50,8 @@ public void testStackTraceSizeOption(){
         Map<String, String> options = new HashMap<>();
         options.put("stacktrace_size", testStackSize);
         HotThreadsMonitor.detect(options).stream().filter(tr -> !tr.getThreadName().equals("Signal Dispatcher") &&
-                                                                      !tr.getThreadName().equals("Reference Handler"))
+                                                                      !tr.getThreadName().equals("Reference Handler") &&
+                                                                            !tr.getThreadName().equals("Attach Listener"))
                                                         .forEach(tr -> {
             List stackTrace = (List)tr.toMap().get("thread.stacktrace");
             assertThat(stackTrace.size(), is(Integer.valueOf(testStackSize)));
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
index 65a08773951..58a541f2133 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
@@ -8,6 +8,7 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assume.assumeTrue;
 
 public class ProcessMonitorTest {
 
@@ -15,6 +16,7 @@ public class ProcessMonitorTest {
     @Test
     public void testReportFDStats(){
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("open_file_descriptors", (Long)processStats.get("open_file_descriptors") > 0L, is(true));
         assertThat("max_file_descriptors", (Long)processStats.get("max_file_descriptors") > 0L, is(true));
     }
@@ -22,6 +24,7 @@ public void testReportFDStats(){
     @Test
     public void testReportCpuStats(){
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("cpu", processStats.get("cpu"), instanceOf(Map.class));
         Map cpuStats = ((Map)processStats.get("cpu"));
         assertThat("cpu.process_percent", (Short)cpuStats.get("process_percent") >= 0, is(true));
@@ -32,6 +35,7 @@ public void testReportCpuStats(){
     @Test
     public void testReportMemStats() {
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("mem", processStats.get("mem"), instanceOf(Map.class));
         Map memStats = ((Map)processStats.get("mem"));
         assertThat("mem.total_virtual_in_bytes", (Long)memStats.get("total_virtual_in_bytes") >= 0L, is(true));
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
index 54059a5e061..806649650a2 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
@@ -14,10 +14,12 @@ public class SystemMonitorTest {
     @Test
     public void systemMonitorTest(){
         Map<String, Object> map = new SystemMonitor().detect().toMap();
-        assertThat("system.load_average is missing", (Double)map.get("system.load_average") > 0, is(true));
+        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
+        if (!((String) map.get("os.name")).startsWith("Windows")) {
+            assertThat("system.load_average is missing", (Double) map.get("system.load_average") > 0, is(true));
+        }
         assertThat("system.available_processors is missing ", ((Integer)map.get("system.available_processors")) > 0, is(true));
         assertThat("os.version is missing", map.get("os.version"), allOf(notNullValue(), instanceOf(String.class)));
         assertThat("os.arch is missing", map.get("os.arch"), allOf(notNullValue(), instanceOf(String.class)));
-        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
     }
 }
