diff --git a/lib/pluginmanager/proxy_support.rb b/lib/pluginmanager/proxy_support.rb
index 88110153409..db49e2ce380 100644
--- a/lib/pluginmanager/proxy_support.rb
+++ b/lib/pluginmanager/proxy_support.rb
@@ -51,9 +51,8 @@ def get_binding
 
 # Apply HTTP_PROXY and HTTPS_PROXY to the current environment
 # this will be used by any JRUBY calls
-def apply_env_proxy_settings(settings)
-  $stderr.puts("Using proxy #{settings}") if ENV["DEBUG"]
-  scheme = settings[:protocol].downcase
+def apply_env_proxy_settings(scheme, settings)
+  $stderr.puts("Using proxy #{settings} for #{scheme}") if ENV["DEBUG"]
   java.lang.System.setProperty("#{scheme}.proxyHost", settings[:host])
   java.lang.System.setProperty("#{scheme}.proxyPort", settings[:port].to_s)
   java.lang.System.setProperty("#{scheme}.proxyUsername", settings[:username].to_s)
@@ -93,8 +92,7 @@ def configure_proxy
   if proxy_string_exists?(proxy)
     proxy_uri = parse_proxy_string(proxy)
     proxy_settings = extract_proxy_values_from_uri(proxy_uri)
-    proxy_settings[:protocol] = "http"
-    apply_env_proxy_settings(proxy_settings)
+    apply_env_proxy_settings("http", proxy_settings)
     proxies << proxy_settings
   end
 
@@ -102,8 +100,7 @@ def configure_proxy
   if proxy_string_exists?(proxy)
     proxy_uri = parse_proxy_string(proxy)
     proxy_settings = extract_proxy_values_from_uri(proxy_uri)
-    proxy_settings[:protocol] = "https"
-    apply_env_proxy_settings(proxy_settings)
+    apply_env_proxy_settings("https", proxy_settings)
     proxies << proxy_settings
   end
 
diff --git a/lib/pluginmanager/utils/http_client.rb b/lib/pluginmanager/utils/http_client.rb
index 79162c86f5b..a285609d32d 100644
--- a/lib/pluginmanager/utils/http_client.rb
+++ b/lib/pluginmanager/utils/http_client.rb
@@ -27,7 +27,10 @@ def self.start(uri)
       proxy_url = ENV["https_proxy"] || ENV["HTTPS_PROXY"] || ""
       proxy_uri = URI(proxy_url)
 
-      Net::HTTP.start(uri.host, uri.port, proxy_uri.host, proxy_uri.port, proxy_uri.user, proxy_uri.password, http_options(uri)) { |http| yield http }
+      proxy_uri_user = URI.unescape(proxy_uri.user)
+      proxy_uri_password = URI.unescape(proxy_uri.password)
+
+      Net::HTTP.start(uri.host, uri.port, proxy_uri.host, proxy_uri.port, proxy_uri_user, proxy_uri_password, http_options(uri)) { |http| yield http }
     end
 
     def self.http_options(uri)
