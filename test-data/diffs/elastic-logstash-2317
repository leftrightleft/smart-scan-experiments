diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 0ac1fc78ce5..4c4ba7e1e24 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -101,6 +101,7 @@ def metric
 
   # Look up a plugin by type and name.
   def self.lookup(type, name)
+    retried_once ||= false
     path = "logstash/#{type}s/#{name}"
 
     # first check if plugin already exists in namespace and continue to next step if not
@@ -116,7 +117,21 @@ def self.lookup(type, name)
     # check again if plugin is now defined in namespace after the require
     namespace_lookup(type, name)
   rescue LoadError, NameError => e
-    raise(LogStash::PluginLoadingError, I18n.t("logstash.pipeline.plugin-loading-error", :type => type, :name => name, :path => path, :error => e.to_s))
+    if !auto_download? || retried_once then
+      raise(LogStash::PluginLoadingError, I18n.t("logstash.pipeline.plugin-loading-error", :type => type, :name => name, :path => path, :error => e.to_s))
+    else
+      install(type, name)
+      retried_once = true
+      retry
+    end
+  end
+
+  def self.auto_download?
+    @auto_download
+  end
+
+  def self.auto_download=(bool)
+    @auto_download = bool
   end
 
   private
@@ -150,4 +165,9 @@ def self.is_a_plugin?(klass, name)
   def self.logger
     @logger ||= Cabin::Channel.get(LogStash)
   end
+
+  def self.install(type, name)
+    plugin_long_name = "logstash-#{type}-#{name.downcase}"
+    ::LogStash::PluginManager::Install.run(File.basename($0), [plugin_long_name])
+  end
 end # class LogStash::Plugin
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index a355fba4d42..5b642a3c10d 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -90,6 +90,10 @@ class LogStash::Runner < Clamp::Command
     I18n.t("logstash.web_api.flag.http_port"),
     :attribute_name => :web_api_http_port, :default => 9600
 
+  option ["--[no-]auto-download"], :flag,
+    I18n.t("logstash.agent.flag.autodownload"),
+    :default => false
+
   def pipeline_workers=(pipeline_workers_value)
     @pipeline_settings[:pipeline_workers] = validate_positive_integer(pipeline_workers_value)
   end
@@ -143,6 +147,8 @@ def execute
     LogStash::ShutdownWatcher.unsafe_shutdown = unsafe_shutdown?
     LogStash::ShutdownWatcher.logger = @logger
 
+    LogStash::Plugin.auto_download = auto_download?
+
     configure
 
     if version?
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 1bd4e874848..3ae36221639 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -24,6 +24,8 @@ en:
           Error: %{error}
           Exception: %{exception}
           Stack: %{stacktrace}
+      plugin-missing-error: >-
+        Detected missing plugin: '%{plugin}'. Installing..
       plugin-loading-error: >-
         Couldn't find any %{type} plugin named '%{name}'. Are you
         sure this is correct? Trying to load the %{name} %{type} plugin
@@ -186,6 +188,9 @@ en:
           Monitor configuration changes and reload
           whenever it is changed.
           NOTE: use SIGHUP to manually reload the config
+        autodownload: |+
+          Automatically download missing plugins from
+          Rubygems.
         log: |+
           Write logstash internal logs to the given
           file. Without this flag, logstash will emit
