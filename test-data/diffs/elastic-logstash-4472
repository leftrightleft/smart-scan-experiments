diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
index 4f8d0168416..602e6eedc9b 100644
--- a/Gemfile.jruby-1.9.lock
+++ b/Gemfile.jruby-1.9.lock
@@ -10,6 +10,7 @@ PATH
       gems (~> 0.8.3)
       i18n (= 0.6.9)
       jrjackson (~> 0.3.7)
+      jruby-monitoring (~> 0.1)
       jruby-openssl (= 0.9.13)
       logstash-core-event (~> 3.0.0.dev)
       minitar (~> 0.5.4)
@@ -48,7 +49,7 @@ GEM
     clamp (0.6.5)
     coderay (1.1.0)
     concurrent-ruby (1.0.0-java)
-    coveralls (0.8.9)
+    coveralls (0.8.10)
       json (~> 1.8)
       rest-client (>= 1.6.8, < 2)
       simplecov (~> 0.11.0)
@@ -57,7 +58,7 @@ GEM
       tins (~> 1.6.0)
     diff-lcs (1.2.5)
     docile (1.1.5)
-    docker-api (1.24.1)
+    docker-api (1.25.0)
       excon (>= 0.38.0)
       json
     domain_name (0.5.25)
@@ -98,9 +99,11 @@ GEM
     http_parser.rb (0.6.0-java)
     i18n (0.6.9)
     insist (1.0.0)
+    jar-dependencies (0.3.1)
     jls-grok (0.11.2)
       cabin (>= 0.6.0)
     jrjackson (0.3.8)
+    jruby-monitoring (0.2.0)
     jruby-openssl (0.9.13-java)
     json (1.8.3-java)
     kramdown (1.9.0)
@@ -146,27 +149,28 @@ GEM
       logstash-codec-line
       logstash-codec-plain
       logstash-core (>= 2.0.0.beta2, < 3.0.0)
-    logstash-input-tcp (3.0.0)
+    logstash-input-tcp (3.0.1)
       logstash-codec-json
       logstash-codec-json_lines
       logstash-codec-line
       logstash-codec-plain
       logstash-core (>= 2.0.0.beta2, < 3.0.0)
-    logstash-output-elasticsearch (2.2.0-java)
+    logstash-output-elasticsearch (2.4.0-java)
       cabin (~> 0.6)
       concurrent-ruby
       elasticsearch (~> 1.0, >= 1.0.13)
       logstash-core (>= 2.0.0, < 3.0.0)
-      manticore (~> 0.4.2)
+      manticore (>= 0.5.2, < 1.0.0)
       stud (~> 0.0, >= 0.0.17)
-    logstash-output-stdout (2.0.3)
+    logstash-output-stdout (2.0.4)
       logstash-codec-line
       logstash-core (>= 2.0.0.beta2, < 3.0.0)
     logstash-patterns-core (2.0.2)
       logstash-core (>= 2.0.0.beta2, < 3.0.0)
     longshoreman (0.0.7)
       docker-api (~> 1.0, >= 1.21.4)
-    manticore (0.4.4-java)
+    manticore (0.5.2-java)
+      jar-dependencies
     method_source (0.8.2)
     mime-types (2.99)
     minitar (0.5.4)
@@ -188,7 +192,7 @@ GEM
       rack
     rack-test (0.6.3)
       rack (>= 1.0)
-    rake (10.4.2)
+    rake (10.5.0)
     rest-client (1.8.0)
       http-cookie (>= 1.0.2, < 2.0)
       mime-types (>= 1.16, < 3.0)
diff --git a/logstash-core/api/lib/app.rb b/logstash-core/api/lib/app.rb
index b95582cdf15..82fa677c215 100644
--- a/logstash-core/api/lib/app.rb
+++ b/logstash-core/api/lib/app.rb
@@ -10,26 +10,7 @@ class BaseApp < ::Sinatra::Application
 
     attr_reader :factory
 
-    if settings.environment == :production
-
-      ::Cabin::Outputs::IO.class_eval { alias :write :'<<' }
-      ::Cabin::Outputs::StdlibLogger.class_eval { alias :write :'<<' }
-
-      access_logger = Cabin::Channel.get(LogStash::Api)
-      access_logger.subscribe(STDOUT)
-      access_logger.level = :debug
-
-      error_logger  = ::File.new(::File.join(::File.dirname(::File.expand_path(__FILE__)),'../../..','error.log'),"a+")
-      error_logger.sync = true
-
-      configure do
-        use ::Rack::CommonLogger, access_logger
-      end
-
-      before do
-        env["rack.errors"] =  error_logger
-      end
-    else
+    if settings.environment != :production
       set :show_exceptions, :after_handler
     end
 
diff --git a/logstash-core/api/lib/app/command.rb b/logstash-core/api/lib/app/command.rb
index bada3443174..4650dd9b888 100644
--- a/logstash-core/api/lib/app/command.rb
+++ b/logstash-core/api/lib/app/command.rb
@@ -6,7 +6,7 @@ class Command
 
     attr_reader :service
 
-    def initialize(service = LogStash::Api::Service.instane)
+    def initialize(service = LogStash::Api::Service.instance)
       @service = service
     end
 
diff --git a/logstash-core/api/lib/app/command_factory.rb b/logstash-core/api/lib/app/command_factory.rb
index 5b6328037f3..23c1c7d5f79 100644
--- a/logstash-core/api/lib/app/command_factory.rb
+++ b/logstash-core/api/lib/app/command_factory.rb
@@ -2,6 +2,8 @@
 require "app/service"
 require "app/system/basicinfo_command"
 require "app/stats/events_command"
+require "app/stats/hotthreads_command"
+require "app/stats/memory_command"
 
 module LogStash::Api
   class CommandFactory
@@ -12,7 +14,9 @@ def initialize(service)
       @service = service
       @factory = {}.merge(
         :system_basic_info => SystemBasicInfoCommand,
-        :events_command => StatsEventsCommand
+        :events_command => StatsEventsCommand,
+        :hot_threads_command => HotThreadsCommand,
+        :memory_command => JvmMemoryCommand
       )
     end
 
diff --git a/logstash-core/api/lib/app/service.rb b/logstash-core/api/lib/app/service.rb
index 409cfbd2028..dc076a01c89 100644
--- a/logstash-core/api/lib/app/service.rb
+++ b/logstash-core/api/lib/app/service.rb
@@ -27,10 +27,14 @@ def update(snapshot)
     end
   end
 
-  def get(key=:service_metrics)
+  def get(key)
     metric_store = @snapshot.metric_store
-    { :base => metric_store.get(:root, :base) }
-    rescue
+    if key == :jvm_memory_stats
+      metric_store.get(:root, :jvm, :memory)
+    else
+      { :base => metric_store.get(:root, :base) }
+    end
+  rescue
     {}
   end
 end
diff --git a/logstash-core/api/lib/app/stats.rb b/logstash-core/api/lib/app/stats.rb
index b9994e42fd2..2d3f9a4f08b 100644
--- a/logstash-core/api/lib/app/stats.rb
+++ b/logstash-core/api/lib/app/stats.rb
@@ -1,12 +1,26 @@
 # encoding: utf-8
 require "app"
 require "app/stats/events_command"
+require "app/stats/hotthreads_command"
 
 module LogStash::Api
   class Stats < BaseApp
 
     helpers AppHelpers
 
+
+    # Global _stats resource where all information is 
+    # retrieved and show
+    get "/" do
+      events_command = factory.build(:events_command)
+      memory_command = factory.build(:memory_command)
+      payload = {
+        :events => events_command.run,
+        :jvm => { :memory => memory_command.run }
+      }
+      respond_with payload
+    end
+
     # Show all events stats information
     # (for ingested, emitted, dropped)
     # - #events since startup
@@ -17,7 +31,25 @@ class Stats < BaseApp
     # - events in the pipeline
     get "/events" do
       command = factory.build(:events_command)
-      respond_with command.run
+      respond_with({ :events => command.run })
+    end
+
+    # return hot threads information
+    get "/jvm/hot_threads" do
+      top_threads_count = params["threads"] || 3
+      ignore_idle_threads = params["ignore_idle_threads"] || true
+      options = {
+        :threads => top_threads_count.to_i,
+        :ignore_idle_threads => as_boolean(ignore_idle_threads)
+      }
+      command = factory.build(:hot_threads_command)
+      respond_with(command.run(options), :string)
+    end
+
+    # return hot threads information
+    get "/jvm/memory" do
+      command = factory.build(:memory_command)
+      respond_with({ :memory => command.run })
     end
 
   end
diff --git a/logstash-core/api/lib/app/stats/events_command.rb b/logstash-core/api/lib/app/stats/events_command.rb
index 0352dfa2f2d..3c5fdaa2dd8 100644
--- a/logstash-core/api/lib/app/stats/events_command.rb
+++ b/logstash-core/api/lib/app/stats/events_command.rb
@@ -7,7 +7,11 @@ def run
     #return whatever is comming out of the snapshot event, this obvoiusly
     #need to be tailored to the right metrics for this command.
     stats = service.get(:events_stats)
-    { :in => stats[:base][:events_in].value, :filtered => stats[:base][:events_filtered].value } 
+    {
+      :in => stats[:base][:events_in].value,
+      :out => 0,
+      :dropped => stats[:base][:events_filtered].value
+    }
   rescue
     {}
   end
diff --git a/logstash-core/api/lib/app/stats/hotthreads_command.rb b/logstash-core/api/lib/app/stats/hotthreads_command.rb
new file mode 100644
index 00000000000..4e12253219a
--- /dev/null
+++ b/logstash-core/api/lib/app/stats/hotthreads_command.rb
@@ -0,0 +1,48 @@
+# encoding: utf-8
+require "app/command"
+require 'monitoring'
+require "socket"
+
+class LogStash::Api::HotThreadsCommand < LogStash::Api::Command
+
+  SKIPPED_THREADS = [ "Finalizer", "Reference Handler", "Signal Dispatcher" ].freeze
+
+  def run(options={})
+    top_count = options.fetch(:threads, 3)
+    ignore    = options.fetch(:ignore_idle_threads, true)
+    hash = JRMonitor.threads.generate
+    report = "::: {#{hostname}} \n Hot threads at #{Time.now}, busiestThreads=#{top_count}:\n"
+    i = 0
+    hash.each_pair do |thread_name, container|
+      break if i >= top_count
+      if ignore
+        next if SKIPPED_THREADS.include?(thread_name)
+        next if thread_name.match(/Ruby-\d+-JIT-\d+/)
+      end
+      report << "#{build_report(container)} \n"
+      i += 1
+    end
+    report
+  end
+
+  private
+
+  def build_report(hash)
+    thread_name, thread_path = hash["thread.name"].split(": ")
+    report = "\t #{cpu_time(hash)} micros of cpu usage by #{hash["thread.state"]} thread named '#{thread_name}'\n"
+    report << "\t\t #{thread_path}\n" if thread_path
+    hash["thread.stacktrace"].each do |trace|
+      report << "\t\t#{trace}\n"
+    end
+    report
+  end
+
+  def hostname
+    Socket.gethostname
+  end
+
+  def cpu_time(hash)
+    hash["cpu.time"] / 1000
+  end
+
+end
diff --git a/logstash-core/api/lib/app/stats/memory_command.rb b/logstash-core/api/lib/app/stats/memory_command.rb
new file mode 100644
index 00000000000..28d98d37c1f
--- /dev/null
+++ b/logstash-core/api/lib/app/stats/memory_command.rb
@@ -0,0 +1,30 @@
+# encoding: utf-8
+require "app/command"
+require 'monitoring'
+
+class LogStash::Api::JvmMemoryCommand < LogStash::Api::Command
+
+  def run
+    memory = service.get(:jvm_memory_stats)
+    {
+      :heap => dump(memory[:heap].marshal_dump),
+      :non_heap => dump(memory[:non_heap].marshal_dump),
+      :pools => memory[:pools].marshal_dump.inject({}) do |acc, (type, hash)|
+                  acc[type] = dump(hash.marshal_dump)
+                  acc
+                end
+    }
+  rescue
+    {} # Something happen, so we just return an empty hash.
+  end
+
+  private
+
+  def dump(hash)
+    hash.inject({}) do |h, (k,v)|
+      h[k] = v.value
+      h
+    end
+  end
+
+end
diff --git a/logstash-core/api/lib/app_helpers.rb b/logstash-core/api/lib/app_helpers.rb
index adaba94febe..c8900233e51 100644
--- a/logstash-core/api/lib/app_helpers.rb
+++ b/logstash-core/api/lib/app_helpers.rb
@@ -3,7 +3,19 @@
 
 module LogStash::Api::AppHelpers
 
-  def respond_with(data)
-    LogStash::Json.dump(data)
+  def respond_with(data, as=:json)
+    if as == :json
+      content_type "application/json"
+      LogStash::Json.dump(data)
+    else
+      content_type "text/plain"
+      data.to_s
+    end
+  end
+
+  def as_boolean(string)
+    return true   if string == true   || string =~ (/(true|t|yes|y|1)$/i)
+    return false  if string == false  || string.blank? || string =~ (/(false|f|no|n|0)$/i)
+    raise ArgumentError.new("invalid value for Boolean: \"#{string}\"")
   end
 end
diff --git a/logstash-core/api/spec/fixtures/memory.json b/logstash-core/api/spec/fixtures/memory.json
new file mode 100644
index 00000000000..2cd94aef053
--- /dev/null
+++ b/logstash-core/api/spec/fixtures/memory.json
@@ -0,0 +1,42 @@
+{
+	"heap": {
+		"used_in_bytes": 1,
+		"committed_in_bytes": 2,
+		"max_in_bytes": 3,
+		"peak_used_in_bytes": 4,
+		"peak_max_in_bytes": 5,
+		"used_percent": 7
+
+	},
+	"non_heap": {
+		"used_in_bytes": 1,
+		"committed_in_bytes": 2,
+		"max_in_bytes": 3,
+		"peak_used_in_bytes": 4,
+		"peak_max_in_bytes": 5
+
+	},
+	"pools": {
+		"young": {
+			"used_in_bytes": 1,
+			"committed_in_bytes": 2,
+			"max_in_bytes": 3,
+			"peak_used_in_bytes": 4,
+			"peak_max_in_bytes": 5
+		},
+		"old": {
+			"used_in_bytes": 1,
+			"committed_in_bytes": 2,
+			"max_in_bytes": 3,
+			"peak_used_in_bytes": 4,
+			"peak_max_in_bytes": 5
+		},
+		"survivor": {
+			"used_in_bytes": 1,
+			"committed_in_bytes": 2,
+			"max_in_bytes": 3,
+			"peak_used_in_bytes": 4,
+			"peak_max_in_bytes": 5
+		}
+	}
+}
diff --git a/logstash-core/api/spec/lib/api/stats_spec.rb b/logstash-core/api/spec/lib/api/stats_spec.rb
index 02c01be7631..284ecf79956 100644
--- a/logstash-core/api/spec/lib/api/stats_spec.rb
+++ b/logstash-core/api/spec/lib/api/stats_spec.rb
@@ -16,4 +16,19 @@ def app()
     expect(last_response).to be_ok
   end
 
+  context "jvm" do
+    let(:type) { "jvm" }
+
+    it "respond to the hot_threads resource" do
+      get "#{type}/hot_threads"
+      expect(last_response).to be_ok
+    end
+
+    it "respond to the memory resource" do
+      get "#{type}/memory"
+      expect(last_response).to be_ok
+    end
+
+  end
+
 end
diff --git a/logstash-core/api/spec/lib/commands/events_spec.rb b/logstash-core/api/spec/lib/commands/events_spec.rb
index f484abddb89..a2c3557b8a3 100644
--- a/logstash-core/api/spec/lib/commands/events_spec.rb
+++ b/logstash-core/api/spec/lib/commands/events_spec.rb
@@ -21,7 +21,7 @@
     let(:report) { subject.run }
 
     it "return events information" do
-      expect(report).to include({:in => 100, :filtered => 200 })
+      expect(report).to include({:in => 100, :dropped => 200 })
     end
 
   end
diff --git a/logstash-core/api/spec/lib/commands/jvm_spec.rb b/logstash-core/api/spec/lib/commands/jvm_spec.rb
new file mode 100644
index 00000000000..3f8dbb597e9
--- /dev/null
+++ b/logstash-core/api/spec/lib/commands/jvm_spec.rb
@@ -0,0 +1,58 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "app/stats/hotthreads_command"
+require "app/stats/memory_command"
+
+describe "JVM stats" do
+
+  describe LogStash::Api::HotThreadsCommand do
+
+    context "#schema" do
+      let(:report) { subject.run }
+
+      it "return hot threads information" do
+        expect(report).not_to be_empty
+      end
+
+    end
+  end
+
+  describe LogStash::Api::JvmMemoryCommand do
+
+
+    context "#schema" do
+
+      let(:service) { double("snapshot-service") }
+
+      subject { described_class.new(service) }
+
+      let(:stats) do
+        read_fixture("memory.json")
+      end
+
+      before(:each) do
+        allow(service).to receive(:get).with(:jvm_memory_stats).and_return(stats)
+      end
+
+
+      let(:report) do
+        subject.run
+      end
+
+      it "return hot threads information" do
+        expect(report).not_to be_empty
+      end
+
+      it "return heap information" do
+        expect(report.keys).to include(:heap)
+      end
+
+      it "return non heap information" do
+        expect(report.keys).to include(:non_heap)
+      end
+
+    end
+  end
+
+
+end
diff --git a/logstash-core/api/spec/spec_helper.rb b/logstash-core/api/spec/spec_helper.rb
index 9ffc5e88f8f..5398a66bfb5 100644
--- a/logstash-core/api/spec/spec_helper.rb
+++ b/logstash-core/api/spec/spec_helper.rb
@@ -7,5 +7,41 @@
 
 require 'rack/test'
 require 'rspec'
+require "json"
 
 ENV['RACK_ENV'] = 'test'
+
+def read_fixture(name)
+  path = File.join(File.dirname(__FILE__), "fixtures", name)
+  HashWithIndifferentAccess.new(JSON.parse(File.read(path)))
+end
+
+class HashWithIndifferentAccess
+
+  extend Forwardable
+  def_delegators :@hash, :inject, :keys
+
+  def initialize(hash)
+    @hash = hash
+  end
+
+  def [](key)
+    v = @hash[key.to_s]
+    if (v.is_a?(Hash))
+      return HashWithIndifferentAccess.new(v)
+    end
+    return OpenStruct.new(:value => v)
+  end
+
+  def marshal_dump
+    h = {}
+    @hash.each_pair do |k, v|
+      if (!v.is_a?(Hash))
+        h[k] = OpenStruct.new(:value => v)
+      else
+        h[k] = HashWithIndifferentAccess.new(v)
+      end
+    end
+    HashWithIndifferentAccess.new(h)
+  end
+end
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
index 031b11b1033..d6caed70d9d 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
@@ -1,13 +1,87 @@
 # encoding: utf-8
 require "logstash/instrument/periodic_poller/base"
+require 'monitoring'
 
 module LogStash module Instrument module PeriodicPoller
   class JVM < Base
+
+    attr_reader :heap_metrics, :non_heap_metrics, :pools_metrics
+
     def initialize(metric, options = {})
       super(metric, options)
+      jvm_metrics      = metric.namespace(:jvm)
+      memory_metrics   = jvm_metrics.namespace(:memory)
+      @heap_metrics     = memory_metrics.namespace(:heap)
+      @non_heap_metrics = memory_metrics.namespace(:non_heap)
+      @pools_metrics = memory_metrics.namespace(:pools)
     end
 
     def collect
+      raw = JRMonitor.memory.generate
+      collect_heap_metrics(raw)
+      collect_non_heap_metrics(raw)
+      collect_pools_metrics(raw)
     end
+
+    private
+
+    def collect_heap_metrics(data)
+      heap = aggregate_information_for(data["heap"].values)
+      heap[:used_percent] = (heap[:used_in_bytes] / heap[:max_in_bytes].to_f)*100.0
+
+      heap.each_pair do |key, value|
+        heap_metrics.gauge(key, value.to_i)
+      end
+    end
+
+    def collect_non_heap_metrics(data)
+      non_heap = aggregate_information_for(data["non_heap"].values)
+      non_heap.each_pair do |key, value|
+        non_heap_metrics.gauge(key, value.to_i)
+      end
+    end
+
+    def collect_pools_metrics(data)
+      metrics = build_pools_metrics(data)
+      metrics.each_pair do |key, hash|
+        metric = pools_metrics.namespace(key.to_sym)
+        hash.each_pair do |p,v|
+          metric.gauge(p, v)
+        end
+      end
+    end
+
+    def build_pools_metrics(data)
+      {
+        "young"    => aggregate_information_for(data["heap"]["Par Eden Space"]),
+        "old"      => aggregate_information_for(data["heap"]["CMS Old Gen"]),
+        "survivor" => aggregate_information_for(data["heap"]["Par Survivor Space"]),
+      }
+    end
+
+    def aggregate_information_for(collection)
+      collection.reduce(default_information_accumulator) do |m,e|
+        e = { e[0] => e[1] } if e.is_a?(Array)
+        e.each_pair do |k,v|
+          m[:used_in_bytes] += v       if k.include?("used")
+          m[:committed_in_bytes] += v  if k.include?("committed")
+          m[:max_in_bytes] += v        if k.include?("max")
+          m[:peak_max_in_bytes] += v   if k.include?("peak.max")
+          m[:peak_used_in_bytes] += v  if k.include?("peak.used")
+        end
+        m
+      end
+    end
+
+    def default_information_accumulator
+      {
+        :used_in_bytes => 0,
+        :committed_in_bytes => 0,
+        :max_in_bytes => 0,
+        :peak_used_in_bytes => 0,
+        :peak_max_in_bytes  => 0
+      }
+    end
+
   end
 end; end; end
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index e218bfeb584..40e38e43ce0 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -30,6 +30,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "puma", '~> 2.15', '>= 2.15.3'
   gem.add_runtime_dependency "jruby-openssl", "0.9.13" # Required to support TLSv1.2
   gem.add_runtime_dependency "chronic_duration", "0.10.6"
+  gem.add_runtime_dependency "jruby-monitoring", '~> 0.1'
 
   # TODO(sissel): Treetop 1.5.x doesn't seem to work well, but I haven't
   # investigated what the cause might be. -Jordan
