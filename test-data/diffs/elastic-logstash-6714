diff --git a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
index 7785a4d18c0..59887e4dda3 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
@@ -26,10 +26,16 @@ class CommandException < StandardError; end
     BUNDLER_CMD = "bundler install --jobs 8 --quiet --path /tmp/vendor"
     RAKE_VENDOR_CMD = "bundle exec rake vendor"
     RAKE_DOC_ASCIIDOC = "bundle exec rake doc:asciidoc"
+    DOCUMENT_SEPARATOR = "~~~ASCIIDOC_DOCUMENT~~~\n"
 
     # Content needed to inject to make the generator work
     GEMFILE_CHANGES = "gem 'logstash-docgen', :path => \"#{File.expand_path(File.join(File.dirname(__FILE__), "..", "..", ".."))}\""
-    RAKEFILE_CHANGES = "require 'logstash/docgen/plugin_doc'"
+
+    # require devutils to fix an issue when the logger is not found
+    RAKEFILE_CHANGES = "
+    require 'logstash/devutils/rspec/spec_helper'
+    puts '#{DOCUMENT_SEPARATOR}'
+    require 'logstash/docgen/plugin_doc'"
 
     attr_reader :path, :full_name
 
@@ -87,7 +93,8 @@ def generate_doc(destination)
       output = run_in_directory(RAKE_DOC_ASCIIDOC)
       destination = File.join(destination, "#{type}s")
       FileUtils.mkdir_p(destination)
-      IO.write(File.join(destination, "#{name}.asciidoc"), output.read)
+      content = output.read.split(DOCUMENT_SEPARATOR).last
+      IO.write(File.join(destination, "#{name}.asciidoc"), content)
     end
 
     def bundle_install
diff --git a/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb b/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
index 9c20e497a8a..fd263f04b3c 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/static_parser.rb
@@ -4,7 +4,10 @@ module LogStash::Docgen
   # his ancestors, the result would be the description of the plugin and the
   # actual documentation for each of the option.
   class StaticParser
-    COMMENTS_IGNORE = ["encoding: utf-8"]
+    COMMENTS_IGNORE = Regexp.union(
+      Regexp.new(/encoding: utf-8/i),
+      Regexp.new(/TODO:/)
+    )
 
     VALID_CLASS_NAME = /^LogStash::(Codecs|Inputs|Filters|Outputs)::(\w+)/
     COMMENT_RE = /^ *#(?: (.*)| *$)/
@@ -12,20 +15,20 @@ class StaticParser
     ENDLINES_RE = /\r\n|\n/
     CLASS_DEFINITION_RE = /^ *class\s(.*) < *(::)?LogStash::(Outputs|Filters|Inputs|Codecs)::(\w)/ 
     NEW_CLASS_DEFINITION_RE = /^module (\w+) module (\w+) class\s(.*) < *(::)?LogStash::(Outputs|Filters|Inputs|Codecs)::(\w)/
-    NEW_CLASS_DEFINITION_RE_ML = /module LogStash\n\s+module (Inputs|Codec|Outputs|Filters)\n.+\s+class (\w+) < *(::)?LogStash::(Inputs|Outputs|Filters|Codec)::/m
+    NEW_CLASS_DEFINITION_RE_ML = /^\s*class\s(.*) < *(::)?LogStash::(Outputs|Filters|Inputs|Codecs)::(\w+)/
     CONFIG_OPTION_RE = /^\s*((mod|base).)?config +[^=].*/
     CONFIG_NAME_RE = /^ *config_name .*/
-    RESET_DOCUMENTATION_BUFFER_RE = /^ *(class|def|module) /
+    RESET_BUFFER_RE = /^require\s("|')\w+("|')/
 
     def initialize(context)
-      @rules = {
-        COMMENT_RE => :parse_comment,
-        CLASS_DEFINITION_RE => :parse_class_description,
-        NEW_CLASS_DEFINITION_RE => :parse_new_class_description,
-        CONFIG_OPTION_RE => :parse_config,
-        CONFIG_NAME_RE => :parse_config_name,
-        RESET_DOCUMENTATION_BUFFER_RE => :update_description
-      }
+      @rules =  [
+        [ COMMENT_RE, :parse_comment ],
+        [ CLASS_DEFINITION_RE, :parse_class_description ],
+        [ NEW_CLASS_DEFINITION_RE_ML, :parse_new_class_description ],
+        [ CONFIG_OPTION_RE, :parse_config ],
+        [ CONFIG_NAME_RE, :parse_config_name ],
+        [ RESET_BUFFER_RE, :reset_buffer ]
+      ]
 
       @context = context
 
@@ -45,18 +48,21 @@ def parse_class_description(class_definition)
     end
 
     def parse_new_class_description(class_definition)
-      @context.section = class_definition[2].downcase.gsub(/s$/, '')
-      @context.name = "#{class_definition[1]}::#{class_definition[2]}::#{class_definition[3]}"
+      @context.section = class_definition[3].downcase.gsub(/s$/, '')
+      @context.name = "LogStash::#{class_definition[3]}::#{class_definition[2]}"
 
       update_description
     end
 
     # This is not obvious, but if the plugin define a class before the main class it can trip the buffer
     def update_description(match = nil)
+      return unless reading_header?
+
       description = flush_buffer
 
       # can only be change by the main file
       @context.description = description if !@context.has_description? && main?
+      transition_to_reading_attributes
     end
 
     def parse_config_name(match)
@@ -81,9 +87,25 @@ def parse_config(match)
 
     def parse(file, main = false)
       @main = main
+      main ? transition_to_reading_header() : transition_to_reading_attributes()
+
       reset_buffer
       string = read_file(file)
-      extract_lines(string).each { |line| parse_line(line) }
+      extract_lines(string).each do |line|
+        parse_line(line)
+      end
+    end
+
+    def transition_to_reading_attributes
+      @state = :reading_attributes
+    end
+
+    def transition_to_reading_header
+      @state = :reading_header
+    end
+
+    def reading_header?
+      @state == :reading_header
     end
 
     def main?
@@ -91,11 +113,13 @@ def main?
     end
 
     def parse_line(line)
-      @rules.each do |re, action|
+      @rules.each do |rule|
+        re, action = rule
         if match = re.match(line)
           send(action, match)
+          break
         end
-      end 
+      end
     end
 
     def extract_lines(string)
@@ -115,7 +139,7 @@ def extract_lines(string)
     end
 
     def ignore_comment?(comment)
-      COMMENTS_IGNORE.include?(comment)
+      COMMENTS_IGNORE.match(comment)
     end
 
     def comment?(line)
@@ -149,7 +173,7 @@ def read_file(file)
     #    ....
     #    module Inputs
     #    ...
-    #    class File
+    #    class File # new kid on the block
     def extract_class_name(file)
       content = read_file(file)
       legacy_definition = content.match(CLASS_DEFINITION_RE)
@@ -162,7 +186,7 @@ def extract_class_name(file)
           legacy_definition[1]
         else
           m = content.match(NEW_CLASS_DEFINITION_RE_ML)
-          "LogStash::#{m[1]}::#{m[2]}"
+          "LogStash::#{m[3]}::#{m[1]}"
         end
       end
     end
