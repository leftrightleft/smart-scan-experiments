diff --git a/config/logstash.yml b/config/logstash.yml
index 9fc2fbde02a..90643441cd7 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -214,8 +214,9 @@
 #
 # queue.type: memory
 #
-# If using queue.type: persisted, the directory path where the data files will be stored.
-# Default is path.data/queue
+# If `queue.type: persisted`, the directory path where the pipeline data files will be stored.
+# Each pipeline will group its PQ files in a subdirectory matching its `pipeline.id`.
+# Default is path.data/queue.
 #
 # path.queue:
 #
diff --git a/docs/static/persistent-queues.asciidoc b/docs/static/persistent-queues.asciidoc
index 6890fc0452d..255b43f0093 100644
--- a/docs/static/persistent-queues.asciidoc
+++ b/docs/static/persistent-queues.asciidoc
@@ -42,7 +42,7 @@ When you set values for capacity and sizing settings, remember that the value yo
 TIP: If you want to define values for a specific pipeline, use <<multiple-pipelines,`pipelines.yml`>>.
 
 `queue.type`:: Specify `persisted` to enable persistent queues. By default, persistent queues are disabled (default: `queue.type: memory`).
-`path.queue`:: The directory path where the data files will be stored. By default, the files are stored in `path.data/queue`. 
+`path.queue`:: The directory path where the data files will be stored. By default, the files are stored in `path.data/queue`.
 `queue.page_capacity`:: The queue data consists of append-only files called "pages." This value sets the maximum size of a queue page in bytes. 
 The default size of 64mb is a good value for most users, and changing this value is unlikely to have performance benefits. 
 If you change the page capacity of an existing queue, the new size applies only to the new page.
diff --git a/logstash-core/lib/logstash/persisted_queue_config_validator.rb b/logstash-core/lib/logstash/persisted_queue_config_validator.rb
index c61ecb66f2a..11f6c81b565 100644
--- a/logstash-core/lib/logstash/persisted_queue_config_validator.rb
+++ b/logstash-core/lib/logstash/persisted_queue_config_validator.rb
@@ -47,8 +47,9 @@ def check(running_pipelines, pipeline_configs)
         max_bytes = config.settings.get("queue.max_bytes").to_i
         page_capacity = config.settings.get("queue.page_capacity").to_i
         pipeline_id = config.settings.get("pipeline.id")
-        queue_path = config.settings.get("path.queue")
-        pq_page_glob = ::File.join(queue_path, pipeline_id, "page.*")
+        queue_path = ::File.join(config.settings.get("path.queue"), pipeline_id)
+        pq_page_glob = ::File.join(queue_path, "page.*")
+        create_dirs(queue_path)
         used_bytes = get_page_size(pq_page_glob)
         file_system = get_file_system(queue_path)
 
@@ -92,7 +93,7 @@ def check_disk_space(err_msg, queue_path_file_system, required_free_bytes)
     end
 
     def get_file_system(queue_path)
-      fs = Files.getFileStore(Paths.get(queue_path));
+      fs = Files.getFileStore(Paths.get(queue_path))
       fs.name
     end
 
@@ -125,5 +126,13 @@ def cache_check_fail?(pipeline_configs)
       queue_configs_update?(last_check_pipeline_configs, pipeline_configs) || !@last_check_pass
     end
 
+    # creates path directories if not exist
+    def create_dirs(queue_path)
+      path = Paths.get(queue_path)
+      # Files.createDirectories raises a FileAlreadyExistsException
+      # if pipeline path is a symlink
+      return if Files.exists(path)
+      Files.createDirectories(path)
+    end
   end
 end
\ No newline at end of file
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index efdb7e5c3b8..c223474f2e0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -93,7 +93,11 @@ public final class Queue implements Closeable {
     public Queue(Settings settings) {
         try {
             final Path queueDir = Paths.get(settings.getDirPath());
-            Files.createDirectories(queueDir);
+            // Files.createDirectories raises a FileAlreadyExistsException
+            // if queue dir is symlinked, so worth checking against Files.exists
+            if (Files.exists(queueDir) == false) {
+                Files.createDirectories(queueDir);
+            }
             this.dirPath = queueDir.toRealPath();
         } catch (final IOException ex) {
             throw new IllegalStateException(ex);
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/QueueFactoryExt.java b/logstash-core/src/main/java/org/logstash/ackedqueue/QueueFactoryExt.java
index 15b572d7da2..9aa468c3a08 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/QueueFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/QueueFactoryExt.java
@@ -57,7 +57,13 @@ public static AbstractWrappedQueueExt create(final ThreadContext context, final
                 getSetting(context, settings, "path.queue").asJavaString(),
                 getSetting(context, settings, "pipeline.id").asJavaString()
             );
-            Files.createDirectories(queuePath);
+
+            // Files.createDirectories raises a FileAlreadyExistsException
+            // if pipeline queue path is a symlink, so worth checking against Files.exists
+            if (Files.exists(queuePath) == false) {
+                Files.createDirectories(queuePath);
+            }
+
             return new JRubyWrappedAckedQueueExt(context.runtime, RubyUtil.WRAPPED_ACKED_QUEUE_CLASS)
                 .initialize(
                     context, new IRubyObject[]{
