diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index ade18c41933..618a575d4de 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -150,22 +150,55 @@ private static FieldReference parseToCache(final CharSequence reference) {
     private static FieldReference parse(final CharSequence reference) {
         final ArrayList<String> path = new ArrayList<>();
         final int length = reference.length();
+
         int splitPoint = 0;
-        for (int i = 0; i < length; ++i) {
-            final char seen = reference.charAt(i);
-            if (seen == '[' || seen == ']') {
-                if (i == 0) {
-                    splitPoint = 1;
-                }
-                if (i > splitPoint) {
-                    path.add(reference.subSequence(splitPoint, i).toString().intern());
-                }
-                splitPoint = i + 1;
+        int depth = 0;
+        scan: for (int i=0 ; i < length; i++) {
+            switch (reference.charAt(i)) {
+                case '[':
+                    if (depth == 0) {
+                        // when current depth is zero, we are beginning a new part; set the splitPoint
+                        splitPoint = i + 1;
+                    }
+                    depth++;
+                    continue scan;
+                case ']':
+                    depth--;
+                    if (depth == 0) {
+                        // when depth is zero, we have a valid part; emit it and move the splitPoint.
+                        path.add(reference.subSequence(splitPoint, i).toString().intern());
+                        splitPoint = i + 1;
+                    } else if (depth < 0) {
+                        // when depth is negative, we have an illegal field reference;
+                        // stop the scan and clear the path, allowing the string to be emitted verbatim.
+                        path.clear();
+                        splitPoint = 0;
+                        break scan;
+                    }
+                    continue scan;
+                default:
+                    if (depth == 0) {
+                        // when depth is zero and we encounter anything other than an open- or close-bracket,
+                        // stop the scan and clear the path, allowing the string to be emitted verbatim.
+                        path.clear();
+                        splitPoint = 0;
+                        break scan;
+                    }
             }
         }
+        // when we hit the end without depth being zero, we have an invalid field reference,
+        // but instead of throwing an exception, decrement the `splitPoint` to ensure that
+        // the whole invalid fragment is emitted as the final part.
+        if (depth > 0) {
+            path.clear();
+            splitPoint = 0;
+        }
+        // If we have anything remaining after our current splitPoint, or a zero-length input,
+        // emit the difference as one final part.
         if (splitPoint < length || length == 0) {
             path.add(reference.subSequence(splitPoint, length).toString().intern());
         }
+
         path.trimToSize();
         final String key = path.remove(path.size() - 1).intern();
         final boolean empty = path.isEmpty();
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index cd757efda65..b5dddbca43b 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -17,28 +17,98 @@ public final class FieldReferenceTest {
     public void testParseSingleBareField() throws Exception {
         FieldReference f = FieldReference.from("foo");
         assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
+        assertEquals("foo", f.getKey());
     }
 
     @Test
     public void testParseSingleFieldPath() throws Exception {
         FieldReference f = FieldReference.from("[foo]");
         assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
+        assertEquals("foo", f.getKey());
     }
 
     @Test
     public void testParse2FieldsPath() throws Exception {
         FieldReference f = FieldReference.from("[foo][bar]");
-        assertArrayEquals(f.getPath(), new String[]{"foo"});
-        assertEquals(f.getKey(), "bar");
+        assertArrayEquals(new String[]{"foo"}, f.getPath());
+        assertEquals("bar", f.getKey());
     }
 
     @Test
     public void testParse3FieldsPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo][bar]]baz]");
-        assertArrayEquals(f.getPath(), new String[]{"foo", "bar"});
-        assertEquals(f.getKey(), "baz");
+        FieldReference f = FieldReference.from("[foo][bar][baz]");
+        assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+        assertEquals("baz", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidNoCloseBracket() throws Exception {
+        FieldReference f = FieldReference.from("[foo][bar][baz");
+        assertEquals(0, f.getPath().length);
+        assertEquals("[foo][bar][baz", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidNoInitialOpenBracket() throws Exception {
+        FieldReference f = FieldReference.from("foo[bar][baz]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("foo[bar][baz]", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidMissingMiddleBracket() throws Exception {
+        FieldReference f = FieldReference.from("[foo]bar[baz]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("[foo]bar[baz]", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidOnlyOpenBracket() throws Exception {
+        FieldReference f = FieldReference.from("[");
+        assertEquals(0, f.getPath().length);
+        assertEquals("[", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidOnlyCloseBracket() throws Exception {
+        FieldReference f = FieldReference.from("]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("]", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidLotsOfOpenBrackets() throws Exception {
+        FieldReference f = FieldReference.from("[[[[[[[[[[[]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("[[[[[[[[[[[]", f.getKey());
+    }
+
+    @Test
+    public void testParseInvalidDoubleCloseBrackets() throws Exception {
+        FieldReference f = FieldReference.from("[foo]][bar]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("[foo]][bar]", f.getKey());
+    }
+
+    @Test
+    public void testParseNestingSquareBrackets() throws Exception {
+        FieldReference f = FieldReference.from("[this[is]terrible]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("this[is]terrible", f.getKey());
+    }
+
+    @Test
+    public void testParseChainedNestingSquareBrackets() throws Exception {
+        FieldReference f = FieldReference.from("[this[is]terrible][but][it[should[work]]]");
+        assertArrayEquals(new String[]{"this[is]terrible", "but"}, f.getPath());
+        assertEquals("it[should[work]]", f.getKey());
+    }
+
+    @Test
+    public void testParseLiteralSquareBrackets() throws Exception {
+        FieldReference f = FieldReference.from("this[index]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("this[index]", f.getKey());
     }
 
     @Test
