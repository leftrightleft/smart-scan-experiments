diff --git a/Gemfile.template b/Gemfile.template
index 8e6b8a418c5..c33ce74436f 100644
--- a/Gemfile.template
+++ b/Gemfile.template
@@ -4,7 +4,6 @@
 source "https://rubygems.org"
 gem "logstash-core", :path => "./logstash-core"
 gem "logstash-core-plugin-api", :path => "./logstash-core-plugin-api"
-gem "atomic", "~> 1"
 gem "builder", "~> 3"
 gem "json", "~> 1"
 gem "paquet", "~> 0.2"
@@ -12,7 +11,7 @@ gem "pleaserun", "~>0.0.28"
 gem "rake", "~> 12"
 gem "ruby-progressbar", "~> 1"
 gem "logstash-output-elasticsearch", ">= 10.4.2"
-gem "childprocess", "~> 0.9", :group => :build
+gem "childprocess", "~> 3.0", :group => :build
 gem "fpm", "~> 1.3.3", :group => :build
 gem "gems", "~> 1", :group => :build
 gem "octokit", "~> 4", :group => :build
@@ -23,7 +22,7 @@ gem "benchmark-ips", :group => :development
 gem "ci_reporter_rspec", "~> 1", :group => :development
 gem "flores", "~> 0.0.6", :group => :development
 gem "json-schema", "~> 2", :group => :development
-gem "logstash-devutils", "~> 1", :group => :development
+gem "logstash-devutils", "~> 2", :group => :development
 gem "rack-test", :require => "rack/test", :group => :development
 gem "rspec", "~> 3.5", :group => :development
 gem "webmock", "~> 3", :group => :development
diff --git a/logstash-core/spec/logstash/filters/base_spec.rb b/logstash-core/spec/logstash/filters/base_spec.rb
index f1d46bfe242..4f12d9c0afb 100644
--- a/logstash-core/spec/logstash/filters/base_spec.rb
+++ b/logstash-core/spec/logstash/filters/base_spec.rb
@@ -91,7 +91,7 @@ def filter(event)
     CONFIG
 
     sample_one("example") do
-      insist { subject.get("new_field") } == ["new_value", "new_value_2"]
+      expect( subject.get("new_field") ).to eql ["new_value", "new_value_2"]
     end
   end
 
@@ -105,7 +105,7 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop") do
-      insist { subject.get("tags") } == ["test"]
+      expect( subject.get("tags") ).to eql ["test"]
     end
   end
 
@@ -119,11 +119,11 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop") do
-      insist { subject.get("tags") } == ["test"]
+      expect( subject.get("tags") ).to eql ["test"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject.get("tags") } == ["t1", "t2", "test"]
+      expect( subject.get("tags") ).to eql ["t1", "t2", "test"]
     end
   end
 
@@ -137,11 +137,11 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop") do
-      insist { subject.get("tags") } == ["bar"]
+      expect( subject.get("tags") ).to eql ["bar"]
     end
 
     sample_one("type" => "noop", "tags" => "foo") do
-      insist { subject.get("tags") } == ["foo", "bar"]
+      expect( subject.get("tags") ).to eql ["foo", "bar"]
     end
   end
 
@@ -156,7 +156,7 @@ def filter(event)
 
     sample_one("type" => "noop", "tags" => "foo") do
       # this is completely weird but seems to be already expected in other specs
-      insist { subject.get("tags") } == ["foo", "foo"]
+      expect( subject.get("tags") ).to eql ["foo", "foo"]
     end
   end
 
@@ -170,19 +170,19 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop") do
-      insist { subject.get("tags") } == ["test"]
+      expect( subject.get("tags") ).to eql ["test"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1"]) do
-      insist { subject.get("tags") } == ["t1", "test"]
+      expect( subject.get("tags") ).to eql ["t1", "test"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject.get("tags") } == ["t1", "t2", "test"]
+      expect( subject.get("tags") ).to eql ["t1", "t2", "test"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1", "t2", "t3"]) do
-      insist { subject.get("tags") } == ["t1", "t2", "t3", "test"]
+      expect( subject.get("tags") ).to eql ["t1", "t2", "t3", "test"]
     end
   end
 
@@ -196,39 +196,39 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "tags" => "foo") do
-      insist { subject.get("tags") } == ["foo"]
+      expect( subject.get("tags") ).to eql ["foo"]
     end
 
     sample_one("type" => "noop", "tags" => "t2") do
-      insist { subject.get("tags") } == []
+      expect( subject.get("tags") ).to eql []
     end
 
     sample_one("type" => "noop", "tags" => ["t2"]) do
-      insist { subject.get("tags") } == []
+      expect( subject.get("tags") ).to eql []
     end
 
     sample_one("type" => "noop", "tags" => ["t4"]) do
-      insist { subject.get("tags") } == ["t4"]
+      expect( subject.get("tags") ).to eql ["t4"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1", "t2", "t3"]) do
-      insist { subject.get("tags") } == ["t1"]
+      expect( subject.get("tags") ).to eql ["t1"]
     end
 
     # also test from Json deserialized data to test the handling of native Java collections by JrJackson
     # see https://github.com/elastic/logstash/issues/2261
     sample_one(LogStash::Json.load("{\"type\":\"noop\", \"tags\":[\"t1\", \"t2\", \"t3\"]}")) do
-      insist { subject.get("tags") } == ["t1"]
+      expect( subject.get("tags") ).to eql ["t1"]
     end
 
     sample_one("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject.get("tags") } == ["t1"]
+      expect( subject.get("tags") ).to eql ["t1"]
     end
 
     # also test from Json deserialized data to test the handling of native Java collections by JrJackson
     # see https://github.com/elastic/logstash/issues/2261
     sample_one(LogStash::Json.load("{\"type\":\"noop\", \"tags\":[\"t1\", \"t2\"]}")) do
-      insist { subject.get("tags") } == ["t1"]
+      expect( subject.get("tags") ).to eql ["t1"]
     end
   end
 
@@ -242,13 +242,13 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "tags" => ["t1", "goaway", "t3"], "blackhole" => "goaway") do
-      insist { subject.get("tags") } == ["t1", "t3"]
+      expect( subject.get("tags") ).to eql ["t1", "t3"]
     end
 
     # also test from Json deserialized data to test the handling of native Java collections by JrJackson
     # see https://github.com/elastic/logstash/issues/2261
     sample_one(LogStash::Json.load("{\"type\":\"noop\", \"tags\":[\"t1\", \"goaway\", \"t3\"], \"blackhole\":\"goaway\"}")) do
-      insist { subject.get("tags") } == ["t1", "t3"]
+      expect( subject.get("tags") ).to eql ["t1", "t3"]
     end
   end
 
@@ -262,18 +262,18 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "t4" => "four") do
-      insist { subject }.include?("t4")
+      expect( subject ).to include "t4"
     end
 
     sample_one("type" => "noop", "t1" => "one", "t2" => "two", "t3" => "three") do
-      insist { subject }.include?("t1")
-      reject { subject }.include?("t2")
-      reject { subject }.include?("t3")
+      expect( subject ).to include "t1"
+      expect( subject ).to_not include "t2"
+      expect( subject ).to_not include "t3"
     end
 
     sample_one("type" => "noop", "t1" => "one", "t2" => "two") do
-      insist { subject }.include?("t1")
-      reject { subject }.include?("t2")
+      expect( subject ).to include "t1"
+      expect( subject ).to_not include "t2"
     end
   end
 
@@ -287,7 +287,7 @@ def filter(event)
     CONFIG
 
     sample_one("tags" => "foo") do
-      reject { subject }.include?("tags")
+      expect( subject ).to_not include "tags"
     end
   end
 
@@ -301,9 +301,9 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "t1" => {"t2" => "two", "t3" => "three"}) do
-      insist { subject }.include?("t1")
-      reject { subject }.include?("[t1][t2]")
-      insist { subject }.include?("[t1][t3]")
+      expect( subject ).to include "t1"
+      expect( subject ).to_not include "[t1][t2]"
+      expect( subject ).to include "[t1][t3]"
     end
   end
 
@@ -352,7 +352,7 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "t1" => ["t2", "t3"]) do
-      insist { subject }.include?("t1")
+      expect( subject ).to include "t1"
       insist { subject.get("[t1][0]") } == "t3"
     end
   end
@@ -367,8 +367,8 @@ def filter(event)
     CONFIG
 
     sample_one("type" => "noop", "blackhole" => "go", "go" => "away") do
-      insist { subject }.include?("blackhole")
-      reject { subject }.include?("go")
+      expect( subject ).to include "blackhole"
+      expect( subject ).to_not include "go"
     end
   end
 
diff --git a/x-pack/qa/integration/support/helpers.rb b/x-pack/qa/integration/support/helpers.rb
index b0f907157b4..c2992e94602 100644
--- a/x-pack/qa/integration/support/helpers.rb
+++ b/x-pack/qa/integration/support/helpers.rb
@@ -68,26 +68,23 @@ def start_es_xpack_trial
 
 def bootstrap_elastic_password
   # we can't use Belzebuth here since the library doesn't support STDIN injection
-  cmd = "bin/elasticsearch-keystore add bootstrap.password -f -x"
-  result = Dir.chdir(get_elasticsearch_path) do |dir|
-    _, status = Open3.capture2(cmd, :stdin_data => elastic_password)
-    status
-  end
-  unless result.success?
-    raise "Something went wrong when installing xpack,\ncmd: #{cmd}\nresponse: #{response}"
+  cmd = File.join(get_elasticsearch_path, 'bin/elasticsearch-keystore')
+  out_err, status = Open3.capture2e(cmd, 'add', 'bootstrap.password', '-f', '-x', :stdin_data => elastic_password)
+  unless status.success?
+    raise "Something went wrong when installing xpack,\ncmd: #{cmd}\nresult: #{status.inspect} - #{out_err}"
   end
 end
 
 def bootstrap_password_exists?
   cmd = "bin/elasticsearch-keystore list"
-  response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path })
+  response = Belzebuth.run(cmd, :directory => get_elasticsearch_path)
   response.successful? && response.stdout_lines.any? { |line| line =~ /^bootstrap.password$/ }
 end
 
 
 def elasticsearch_xpack_installed?
   cmd = "bin/elasticsearch-plugin list"
-  response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path })
+  response = Belzebuth.run(cmd, :directory => get_elasticsearch_path)
   response.stdout_lines.any? { |line| line =~ /x-pack/ }
 end
 
