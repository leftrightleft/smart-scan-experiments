diff --git a/logstash-core/lib/logstash/config/source/base.rb b/logstash-core/lib/logstash/config/source/base.rb
index 0db79bc474e..80f2c520b16 100644
--- a/logstash-core/lib/logstash/config/source/base.rb
+++ b/logstash-core/lib/logstash/config/source/base.rb
@@ -16,92 +16,5 @@
 # under the License.
 
 module LogStash module Config module Source
-  class Base
-    attr_reader :conflict_messages
-
-    def initialize(settings)
-      @settings = settings
-      @conflict_messages = []
-    end
-
-    def pipeline_configs
-      raise NotImplementedError, "`#pipeline_configs` must be implemented!"
-    end
-
-    def match?
-      raise NotImplementedError, "`match?` must be implemented!"
-    end
-
-    def config_conflict?
-      raise NotImplementedError, "`config_conflict?` must be implemented!"
-    end
-
-    def config_reload_automatic_setting
-      @settings.get_setting("config.reload.automatic")
-    end
-
-    def config_reload_automatic
-      config_reload_automatic_setting.value
-    end
-
-    def config_reload_automatic?
-      config_reload_automatic_setting.set?
-    end
-
-    def config_string_setting
-      @settings.get_setting("config.string")
-    end
-
-    def config_string
-      config_string_setting.value
-    end
-
-    def config_string?
-      !config_string.nil?
-    end
-
-    def config_path_setting
-      @settings.get_setting("path.config")
-    end
-
-    def config_path
-      config_path_setting.value
-    end
-
-    def config_path?
-      !(config_path.nil? || config_path.empty?)
-    end
-
-    def modules_cli_setting
-      @settings.get_setting("modules.cli")
-    end
-
-    def modules_cli
-      modules_cli_setting.value
-    end
-
-    def modules_cli?
-      !(modules_cli.nil? || modules_cli.empty?)
-    end
-
-    def modules_setting
-      @settings.get_setting("modules")
-    end
-
-    def modules
-      modules_setting.value
-    end
-
-    def modules?
-      !(modules.nil? || modules.empty?)
-    end
-
-    def both_module_configs?
-      modules_cli? && modules?
-    end
-
-    def modules_defined?
-      modules_cli? || modules?
-    end
-  end
+  java_import org.logstash.config.source.Base
 end end end
diff --git a/logstash-core/lib/logstash/config/source/local.rb b/logstash-core/lib/logstash/config/source/local.rb
index e9601c2b5f5..ac72a8dfb69 100644
--- a/logstash-core/lib/logstash/config/source/local.rb
+++ b/logstash-core/lib/logstash/config/source/local.rb
@@ -172,7 +172,7 @@ def self.read(uri)
 
     def pipeline_configs
       if config_conflict?
-        raise ConfigurationError, @conflict_messages.join(", ")
+        raise ConfigurationError, conflict_messages.join(", ")
       end
       local_pipeline_configs
     end
@@ -183,18 +183,18 @@ def match?
     end
 
     def config_conflict?
-      @conflict_messages.clear
+      conflict_messages.clear
 
       # Check if configuration auto-reload is used that -f is specified
       if automatic_reload_with_config_string?
-        @conflict_messages << I18n.t("logstash.runner.reload-with-config-string")
+        conflict_messages << I18n.t("logstash.runner.reload-with-config-string")
       end
       # Check if both -f and -e are present
       if config_string? && config_path?
-        @conflict_messages << I18n.t("logstash.runner.config-string-path-exclusive")
+        conflict_messages << I18n.t("logstash.runner.config-string-path-exclusive")
       end
 
-      @conflict_messages.any?
+      conflict_messages.any?
     end
 
     private
@@ -212,7 +212,7 @@ def local_pipeline_configs
 
       return [] if config_parts.empty?
 
-      [org.logstash.config.ir.PipelineConfig.new(self.class, @settings.get("pipeline.id").to_sym, config_parts, @settings)]
+      [org.logstash.config.ir.PipelineConfig.new(self.class, settings.get("pipeline.id").to_sym, config_parts, settings)]
     end
 
     def automatic_reload_with_config_string?
diff --git a/logstash-core/lib/logstash/config/source/modules.rb b/logstash-core/lib/logstash/config/source/modules.rb
index 47794465c54..392e32cda4e 100644
--- a/logstash-core/lib/logstash/config/source/modules.rb
+++ b/logstash-core/lib/logstash/config/source/modules.rb
@@ -23,10 +23,10 @@ class Modules < Base
     include LogStash::Util::Loggable
     def pipeline_configs
       if config_conflict? # double check
-        raise ConfigurationError, @conflict_messages.join(", ")
+        raise ConfigurationError, conflict_messages.join(", ")
       end
 
-      pipelines = LogStash::Config::ModulesCommon.pipeline_configs(@settings)
+      pipelines = LogStash::Config::ModulesCommon.pipeline_configs(settings)
       pipelines.map do |hash|
         org.logstash.config.ir.PipelineConfig.new(self.class, hash["pipeline_id"].to_sym,
           org.logstash.common.SourceWithMetadata.new("module", hash["alt_name"], 0, 0, hash["config_string"]),
@@ -40,7 +40,7 @@ def match?
     end
 
     def config_conflict?
-      @conflict_messages.clear
+      conflict_messages.clear
       # Make note that if modules are configured in both cli and logstash.yml that cli module
       # settings will overwrite the logstash.yml modules settings
       if modules_cli? && modules?
@@ -48,15 +48,15 @@ def config_conflict?
       end
 
       if automatic_reload_with_modules?
-        @conflict_messages << I18n.t("logstash.runner.reload-with-modules")
+        conflict_messages << I18n.t("logstash.runner.reload-with-modules")
       end
 
       # Check if config (-f or -e) and modules are configured
       if (modules_cli? || modules?) && (config_string? || config_path?)
-        @conflict_messages << I18n.t("logstash.runner.config-module-exclusive")
+        conflict_messages << I18n.t("logstash.runner.config-module-exclusive")
       end
 
-      @conflict_messages.any?
+      conflict_messages.any?
     end
 
     private
diff --git a/logstash-core/lib/logstash/config/source/multi_local.rb b/logstash-core/lib/logstash/config/source/multi_local.rb
index 39f72823463..e925f746959 100644
--- a/logstash-core/lib/logstash/config/source/multi_local.rb
+++ b/logstash-core/lib/logstash/config/source/multi_local.rb
@@ -37,13 +37,13 @@ def pipeline_configs
       end
       detect_duplicate_pipelines(pipelines_settings)
       pipeline_configs = pipelines_settings.map do |pipeline_settings|
-        @settings = pipeline_settings
+        update_settings(pipeline_settings)
         # this relies on instance variable @settings and the parent class' pipeline_configs
         # method. The alternative is to refactor most of the Local source methods to accept
         # a settings object instead of relying on @settings.
         local_pipeline_configs # create a PipelineConfig object based on @settings
       end.flatten
-      @settings = @original_settings
+      update_settings(@original_settings)
       pipeline_configs
     end
 
@@ -60,21 +60,21 @@ def invalid_pipelines_detected?
     end
 
     def config_conflict?
-      @conflict_messages.clear
+      conflict_messages.clear
       # are there any auto-reload conflicts?
       if !(modules_cli? || modules? || config_string? || config_path?)
         detect_pipelines if !@detect_pipelines_called
         if @detected_marker.nil?
-          @conflict_messages << I18n.t("logstash.runner.config-pipelines-failed-read", :path => pipelines_yaml_location)
+          conflict_messages << I18n.t("logstash.runner.config-pipelines-failed-read", :path => pipelines_yaml_location)
         elsif @detected_marker == false
-          @conflict_messages << I18n.t("logstash.runner.config-pipelines-empty", :path => pipelines_yaml_location)
+          conflict_messages << I18n.t("logstash.runner.config-pipelines-empty", :path => pipelines_yaml_location)
         elsif @detected_marker.is_a?(Class)
-          @conflict_messages << I18n.t("logstash.runner.config-pipelines-invalid", :invalid_class => @detected_marker, :path => pipelines_yaml_location)
+          conflict_messages << I18n.t("logstash.runner.config-pipelines-invalid", :invalid_class => @detected_marker, :path => pipelines_yaml_location)
         end
       else
         do_warning? && logger.warn("Ignoring the 'pipelines.yml' file because modules or command line options are specified")
       end
-      @conflict_messages.any?
+      conflict_messages.any?
     end
 
     def retrieve_yaml_pipelines
diff --git a/logstash-core/spec/logstash/config/source_loader_spec.rb b/logstash-core/spec/logstash/config/source_loader_spec.rb
index 87d812d9f02..ea041c48848 100644
--- a/logstash-core/spec/logstash/config/source_loader_spec.rb
+++ b/logstash-core/spec/logstash/config/source_loader_spec.rb
@@ -30,7 +30,7 @@ def pipeline_configs
   end
 
   def match?
-    @settings.get("path.config") =~ /dummy/
+    settings.get("path.config") =~ /dummy/
   end
 end
 
@@ -40,7 +40,7 @@ def pipeline_configs
   end
 
   def match?
-    @settings.get("path.config") =~ /another/
+    settings.get("path.config") =~ /another/
   end
 end
 
@@ -50,7 +50,7 @@ def pipeline_configs
   end
 
   def match?
-    @settings.get("path.config") =~ /fail/
+    settings.get("path.config") =~ /fail/
   end
 end
 
diff --git a/logstash-core/src/main/java/org/logstash/config/source/Base.java b/logstash-core/src/main/java/org/logstash/config/source/Base.java
new file mode 100644
index 00000000000..b6e9deea678
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/config/source/Base.java
@@ -0,0 +1,149 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.logstash.config.source;
+
+import org.jruby.RubyArray;
+import org.jruby.RubyObject;
+import org.jruby.RubyString;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.config.ir.PipelineConfig;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.logstash.RubyUtil.RUBY;
+
+public class Base {
+    protected RubyObject settings;
+    protected List<String> conflictMessages = new ArrayList<>();
+
+    public Base(RubyObject logstashSettings) {
+        settings = logstashSettings;
+    }
+
+    public List<String> getConflictMessages() {
+        return conflictMessages;
+    }
+
+    public RubyObject getSettings() {
+        return settings;
+    }
+
+    // this must be used when in Ruby code was @settings = <new value>
+    public void updateSettings(RubyObject settings) {
+        this.settings = settings;
+    }
+
+    public List<PipelineConfig> pipelineConfigs() {
+        throw new UnsupportedOperationException("`pipelineConfigs` must be implemented!");
+    }
+
+    public boolean isMatch() {
+        throw new UnsupportedOperationException("`isMatch` must be implemented!");
+    }
+
+    public boolean isConfigConflict() {
+        throw new UnsupportedOperationException("`isConfigConflict` must be implemented!");
+    }
+
+    //return subclass of LogStash::Setting
+    public IRubyObject configReloadAutomaticSetting() {
+        return this.settings.callMethod(RUBY.getCurrentContext(), "get_setting",
+                RubyString.newString(RUBY, "config.reload.automatic"));
+    }
+
+    public boolean configReloadAutomatic() {
+        final IRubyObject value = configReloadAutomaticSetting().callMethod(RUBY.getCurrentContext(), "value");
+        return value.toJava(Boolean.class);
+    }
+
+    public boolean isConfigReloadAutomatic() {
+        final IRubyObject valueIsSet = configReloadAutomaticSetting().callMethod(RUBY.getCurrentContext(), "set?");
+        return valueIsSet.toJava(Boolean.class);
+    }
+
+    //return subclass of LogStash::Setting
+    public IRubyObject configStringSetting() {
+        return this.settings.callMethod(RUBY.getCurrentContext(), "get_setting",
+                RubyString.newString(RUBY, "config.string"));
+    }
+
+    public String configString() {
+        final IRubyObject setting = configStringSetting();
+        final IRubyObject value = setting.callMethod(RUBY.getCurrentContext(), "value");
+        return value.toJava(String.class);
+    }
+
+    public boolean isConfigString() {
+        return configString() != null;
+    }
+
+    // return subclass of LogStash::Setting
+    public IRubyObject configPathSetting() {
+        return this.settings.callMethod(RUBY.getCurrentContext(), "get_setting",
+                RubyString.newString(RUBY, "path.config"));
+    }
+
+    public String configPath() {
+        return configPathSetting().callMethod(RUBY.getCurrentContext(), "value").toJava(String.class);
+    }
+
+    public boolean isConfigPath() {
+        return !(configPath() == null || configPath().isEmpty());
+    }
+
+    // return subclass of LogStash::Setting
+    public IRubyObject modulesCliSetting() {
+        return this.settings.callMethod(RUBY.getCurrentContext(), "get_setting",
+                RubyString.newString(RUBY, "modules.cli"));
+    }
+
+    @SuppressWarnings("rawtypes")
+    public RubyArray modulesCli() {
+        return modulesCliSetting().callMethod(RUBY.getCurrentContext(), "value").convertToArray();
+    }
+
+    public boolean isModulesCli() {
+        return !(modulesCli() == null || modulesCli().isEmpty());
+    }
+
+    // return subclass of LogStash::Setting
+    public IRubyObject modulesSetting() {
+        return this.settings.callMethod(RUBY.getCurrentContext(), "get_setting",
+                RubyString.newString(RUBY, "modules"));
+    }
+
+    @SuppressWarnings("rawtypes")
+    public RubyArray modules() {
+        return (RubyArray) modulesSetting().callMethod(RUBY.getCurrentContext(), "value");
+    }
+
+    public boolean isModules() {
+        return !(modules() == null || modules().isEmpty());
+    }
+
+    public boolean isBothModuleConfigs() {
+        return isModulesCli() && isModules();
+    }
+
+    public boolean isModulesDefined() {
+        return isModulesCli() || isModules();
+    }
+}
diff --git a/x-pack/lib/config_management/elasticsearch_source.rb b/x-pack/lib/config_management/elasticsearch_source.rb
index 84b56954112..fd4a0405adb 100644
--- a/x-pack/lib/config_management/elasticsearch_source.rb
+++ b/x-pack/lib/config_management/elasticsearch_source.rb
@@ -42,7 +42,7 @@ def initialize(settings)
       end
 
       def match?
-        @settings.get("xpack.management.enabled")
+        settings.get("xpack.management.enabled")
       end
 
       def config_conflict?
@@ -94,7 +94,7 @@ def get_pipeline(pipeline_id, fetcher)
         config_part = org.logstash.common.SourceWithMetadata.new("x-pack-config-management", pipeline_id.to_s, config_string, pipeline_metadata_str)
 
         # We don't support multiple pipelines, so use the global settings from the logstash.yml file
-        settings = @settings.clone
+        update_settings(settings.clone)
         settings.set("pipeline.id", pipeline_id)
 
         # override global settings with pipeline settings from ES, if any
@@ -175,7 +175,7 @@ def populate_license_state(xpack_info)
 
       private
       def pipeline_ids
-        @settings.get("xpack.management.pipeline.id")
+        settings.get("xpack.management.pipeline.id")
       end
 
       def client
