diff --git a/lib/logstash/filters/split_array.rb b/lib/logstash/filters/split_array.rb
new file mode 100644
index 00000000000..0cd0ea48d54
--- /dev/null
+++ b/lib/logstash/filters/split_array.rb
@@ -0,0 +1,49 @@
+# encoding: utf-8
+require "logstash/filters/base"
+require "logstash/namespace"
+
+# The split filter is for splitting arrays into separate events.
+#
+# An example use case of this filter is for taking input
+# such as {"events": [ {"id":"1"}, {"id":"2"} ] } 
+# and yielding each event.
+class LogStash::Filters::SplitArray < LogStash::Filters::Base
+
+  config_name "split_array"
+  milestone 1
+
+  # The field which value is split by the terminator
+  config :source, :validate => :string, :default => "message"
+  config :target, :validate => :string, :default => "message"
+
+  public
+  def register
+    # Nothing to do
+  end # def register
+
+  public
+  def filter(event)
+    return unless filter?(event)
+
+
+    original_value = event[@source]
+
+    # Skip filtering if field is not an array
+    return unless original_value.is_a?(Array)
+
+    original_value.each do |value|
+
+      new_event = event.clone
+      new_event[@target] = value
+      filter_matched(new_event)
+
+      #print new_event
+	
+      # Push this new event onto the stack at the LogStash::FilterWorker
+      yield new_event
+    end
+
+    # Cancel this event, we'll use the newly generated ones above.
+    event.cancel
+  end # def filter
+end # class LogStash::Filters::SplitArray
diff --git a/spec/filters/split_array_spec.rb b/spec/filters/split_array_spec.rb
new file mode 100644
index 00000000000..34683ec2743
--- /dev/null
+++ b/spec/filters/split_array_spec.rb
@@ -0,0 +1,65 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/filters/split_array"
+require 'json'
+
+describe LogStash::Filters::SplitArray do
+
+  describe "int array all defaults" do
+    config <<-CONFIG
+      filter {
+        split_array { }
+      }
+    CONFIG
+
+    sample JSON.parse('{"message": [ 1,2,3 ] }') do
+      insist { subject.length } == 3
+      insist { subject[0]["message"] } == 1
+      insist { subject[1]["message"] } == 2
+      insist { subject[2]["message"] } == 3
+    end
+  end
+
+  describe "object array field source" do
+    config <<-CONFIG
+      filter {
+        split_array { source => "events" target => "other" }
+      }
+    CONFIG
+
+    sample JSON.parse('{"events": [ {"id":"1"}, {"id":"2"} ] }') do
+      insist { subject.length } == 2
+      insist { subject[0]["other"]["id"] } == "1"
+      insist { subject[1]["other"]["id"] } == "2"
+    end
+  end
+
+  describe "not an array" do
+    config <<-CONFIG
+      filter {
+      }
+    CONFIG
+
+    sample JSON.parse('{"message": "NA" }') do
+      insist { subject["message"] } == "NA"
+    end
+  end
+  describe "clone remove" do
+    config <<-CONFIG
+      filter {
+        split_array { remove_field => "remove" }
+      }
+    CONFIG
+
+    sample JSON.parse('{"message": [ {"id":"1"}, {"id":"2"} ], "save":"save", "remove":"remove" }') do
+      insist { subject.length } == 2
+      insist { subject[0]["save"] } == "save"
+      insist { subject[0]["remove"] }.nil?
+      insist { subject[0]["message"]["id"] } == "1"
+      insist { subject[1]["save"] } == "save"
+      insist { subject[1]["remove"] }.nil?
+      insist { subject[0]["message"]["id"] } == "1"
+    end
+  end
+
+end
