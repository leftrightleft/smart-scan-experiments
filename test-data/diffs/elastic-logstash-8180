diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index 96ad8e5010f..9040482ddd4 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -44,9 +44,9 @@ def config_name
     def multi_filter(events)
       @metric_events_in.increment(events.size)
 
-      start_time = java.lang.System.current_time_millis
+      start_time = java.lang.System.nano_time
       new_events = @filter.multi_filter(events)
-      @metric_events_time.increment(java.lang.System.current_time_millis - start_time)
+      @metric_events_time.increment((java.lang.System.nano_time - start_time) / 1_000_000)
 
       # There is no guarantee in the context of filter
       # that EVENTS_IN == EVENTS_OUT, see the aggregates and
diff --git a/logstash-core/lib/logstash/instrument/wrapped_write_client.rb b/logstash-core/lib/logstash/instrument/wrapped_write_client.rb
index 82f0539e287..a350e84ff90 100644
--- a/logstash-core/lib/logstash/instrument/wrapped_write_client.rb
+++ b/logstash-core/lib/logstash/instrument/wrapped_write_client.rb
@@ -25,7 +25,7 @@ def get_new_batch
 
     def push(event)
       increment_counters(1)
-      start_time = java.lang.System.current_time_millis
+      start_time = java.lang.System.nano_time
       result = @write_client.push(event)
       report_execution_time(start_time)
       result
@@ -35,7 +35,7 @@ def push(event)
 
     def push_batch(batch)
       increment_counters(batch.size)
-      start_time = java.lang.System.current_time_millis
+      start_time = java.lang.System.nano_time
       result = @write_client.push_batch(batch)
       report_execution_time(start_time)
       result
@@ -50,7 +50,7 @@ def increment_counters(size)
     end
 
     def report_execution_time(start_time)
-      execution_time = java.lang.System.current_time_millis - start_time
+      execution_time = (java.lang.System.nano_time - start_time) / 1_000_000
       @events_metrics_time.increment(execution_time)
       @pipeline_metrics_time.increment(execution_time)
       @plugin_events_metrics_time.increment(execution_time)
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index dba5fbd013a..2ce8a8abaa0 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -45,9 +45,9 @@ def register
 
   def multi_receive(events)
     @in_counter.increment(events.length)
-    start_time = java.lang.System.current_time_millis
+    start_time = java.lang.System.nano_time
     @strategy.multi_receive(events)
-    @time_metric.increment(java.lang.System.current_time_millis - start_time)
+    @time_metric.increment((java.lang.System.nano_time - start_time) / 1_000_000)
     @out_counter.increment(events.length)
   end
 
diff --git a/logstash-core/lib/logstash/util/wrapped_acked_queue.rb b/logstash-core/lib/logstash/util/wrapped_acked_queue.rb
index 74b7f76ea1c..59a57e42ede 100644
--- a/logstash-core/lib/logstash/util/wrapped_acked_queue.rb
+++ b/logstash-core/lib/logstash/util/wrapped_acked_queue.rb
@@ -205,7 +205,7 @@ def close_batch(batch)
       end
 
       def start_clock
-        @inflight_clocks[Thread.current] = java.lang.System.current_time_millis
+        @inflight_clocks[Thread.current] = java.lang.System.nano_time
       end
 
       def stop_clock(batch)
@@ -214,7 +214,7 @@ def stop_clock(batch)
             # only stop (which also records) the metrics if the batch is non-empty.
             # start_clock is now called at empty batch creation and an empty batch could
             # stay empty all the way down to the close_batch call.
-            time_taken = java.lang.System.current_time_millis - @inflight_clocks[Thread.current]
+            time_taken = (java.lang.System.nano_time - @inflight_clocks[Thread.current]) / 1_000_000
             @event_metric.report_time(:duration_in_millis, time_taken)
             @pipeline_metric.report_time(:duration_in_millis, time_taken)
           end
diff --git a/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb b/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
index ebe0379a421..a7532cdf691 100644
--- a/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
+++ b/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
@@ -144,7 +144,7 @@ def close_batch(batch)
       end
 
       def start_clock
-        @inflight_clocks[Thread.current] = java.lang.System.current_time_millis
+        @inflight_clocks[Thread.current] = java.lang.System.nano_time
       end
 
       def stop_clock(batch)
@@ -153,7 +153,7 @@ def stop_clock(batch)
             # only stop (which also records) the metrics if the batch is non-empty.
             # start_clock is now called at empty batch creation and an empty batch could
             # stay empty all the way down to the close_batch call.
-            time_taken = java.lang.System.current_time_millis - @inflight_clocks[Thread.current]
+            time_taken = (java.lang.System.nano_time - @inflight_clocks[Thread.current]) / 1_000_000
             @event_metric_time.increment(time_taken)
             @pipeline_metric_time.increment(time_taken)
           end
