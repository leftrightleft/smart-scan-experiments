diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index b0da430a2a7..8e3524cfe3d 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -560,7 +560,6 @@ def coerce(password)
         if validatedResult.length() > 0
           if @password_policies.fetch(:mode).eql?("WARN")
             logger.warn("Password #{validatedResult}.")
-            deprecation_logger.deprecated("Password policies may become more restrictive in future releases. Set the 'api.auth.basic.password_policy.mode' to 'ERROR' to enforce stricter password requirements now.")
           else
             raise(ArgumentError, "Password #{validatedResult}.")
           end
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 6b2b843ac7c..54f93887140 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -25,6 +25,8 @@
 module LogStash
   class WebServer
 
+    include Util::Loggable
+
     attr_reader :logger, :config, :http_host, :http_ports, :http_environment, :agent, :port
 
     DEFAULT_HOST = "127.0.0.1".freeze
@@ -53,7 +55,7 @@ def self.from_settings(logger, agent, settings)
         auth_basic[:password] = required_setting(settings, 'api.auth.basic.password', "api.auth.type")
 
         password_policies = {}
-        password_policies[:mode] = required_setting(settings, 'api.auth.basic.password_policy.mode', "api.auth.type")
+        password_policies[:mode] = required_setting_with_changing_default(settings, 'api.auth.basic.password_policy.mode', "api.auth.type", "ERROR")
         password_policies[:length] = {}
         password_policies[:length][:minimum] = required_setting(settings, 'api.auth.basic.password_policy.length.minimum', "api.auth.type")
         if !password_policies[:length][:minimum].between?(8, 1024)
@@ -64,8 +66,8 @@ def self.from_settings(logger, agent, settings)
         password_policies[:include][:lower] = required_setting(settings, 'api.auth.basic.password_policy.include.lower', "api.auth.type")
         password_policies[:include][:digit] = required_setting(settings, 'api.auth.basic.password_policy.include.digit', "api.auth.type")
         password_policies[:include][:symbol] = required_setting(settings, 'api.auth.basic.password_policy.include.symbol', "api.auth.type")
+        Setting::ValidatedPassword.new("api.auth.basic.password", password, password_policies) # TODO: doesn't need to be a Setting, relies on `strict = true` force-validating the default
 
-        auth_basic[:password_policies] = password_policies
         options[:auth_basic] = auth_basic.freeze
       else
         warn_ignored(logger, settings, "api.auth.basic.", "api.auth.type")
@@ -105,6 +107,14 @@ def self.required_setting(settings, setting_name, trigger)
       settings.get(setting_name) || fail(ArgumentError, "Setting `#{setting_name}` is required when `#{trigger}` is set to `#{settings.get(trigger)}`. Please provide it in your `logstash.yml`")
     end
 
+    def self.required_setting_with_changing_default(settings, name, trigger, future_value)
+      effective_value = required_setting(settings, name, trigger)
+      if !settings.set?(name)
+        deprecation_logger.deprecated("The default value of `#{name}` will change to `#{future_value}` in a future release of Logstash. If you wish to lock-in the current behavior, please set `#{name}: #{effective_value}`")
+      end
+      effective_value
+    end
+
     ##
     # @param logger [Logger]
     # @param agent [Agent]
@@ -140,9 +150,7 @@ def initialize(logger, agent, options={})
       if options.include?(:auth_basic)
         username = options[:auth_basic].fetch(:username)
         password = options[:auth_basic].fetch(:password)
-        password_policies = options[:auth_basic].fetch(:password_policies)
-        validated_password = Setting::ValidatedPassword.new("api.auth.basic.password", password, password_policies).freeze
-        app = Rack::Auth::Basic.new(app, "logstash-api") { |u, p| u == username && p == validated_password.value.value }
+        app = Rack::Auth::Basic.new(app, "logstash-api") { |u, p| u == username && p == password.value }
       end
 
       @app = app
