diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index c606a4ffe0a..ebefa66931a 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -29,7 +29,7 @@ def push(*args)
     end
 
     def self.snapshot_rotation_time=(time)
-      @snapsho_rotation_time = ime
+      @snapshot_rotation_time = time
     end
 
     def self.snapshot_rotation_time
diff --git a/logstash-core/lib/logstash/instrument/metric.rb b/logstash-core/lib/logstash/instrument/metric.rb
index 6090f79f192..21d11650f99 100644
--- a/logstash-core/lib/logstash/instrument/metric.rb
+++ b/logstash-core/lib/logstash/instrument/metric.rb
@@ -4,36 +4,48 @@
 require "concurrent"
 
 module LogStash module Instrument
-  class MetricNoKeyProvided < Exception; end
-  class MetricNoBlockProvided < Exception; end
+  class MetricException < Exception; end
+  class MetricNoKeyProvided < MetricException; end
+  class MetricNoBlockProvided < MetricException; end
+  class MetricNoNamespaceProvided < MetricException; end
 
   class Metric
-    attr_reader :collector, :base_key
+    attr_reader :collector, :namespace_information
 
-    def initialize(collector, base_key = nil)
+    public
+    def initialize(collector, namespace = nil)
       @collector = collector
-      @base_key = base_key
+      @namespace_information = Array(namespace).map(&:to_sym)
     end
 
     def increment(key, value = 1)
-      collector.push(:counter, merge_keys(key), :increment, Concurrent.monotonic_time, value)
+      validate_key!(key)
+      collector.push(namespace_information, key, :counter, :increment, value)
     end
 
     def decrement(key, value = 1)
-      collector.push(:counter, merge_keys(key), :decrement, Concurrent.monotonic_time, value)
+      validate_key!(key)
+      collector.push(namespace_information, key, :counter, :decrement, value)
     end
 
     # might be worth to create a block interface for time based gauge
     def gauge(key, value)
-      collector.push(:gauge, merge_keys(key), Concurrent.monotonic_time, value)
+      validate_key!(key)
+      collector.push(namespace_information, key, :gauge, value)
     end
 
-    def namespace(key)
-      Metric.new(collector, merge_keys(key.to_sym))
+    def namespace(sub_namespace)
+      raise MetricNoNamespaceProvided if sub_namespace.nil? || sub_namespace.empty?
+
+      new_namespace = namespace_information.dup
+      new_namespace << sub_namespace
+
+      Metric.new(collector, new_namespace)
     end
 
     # I think this should have his own values.
     def time(key, &block)
+      validate_key!(key)
       if block_given?
         start_time = Concurrent.monotonic_time
         content = block.call
@@ -45,20 +57,14 @@ def time(key, &block)
       end
     end
 
-    # TODO
-    def self.create(name, collector = LogStash::Instrument::Collector.instance)
+    def self.create(namespace, collector = LogStash::Instrument::Collector.instance)
       reporter = LogStash::Instrument::Reporter::Stdout.new(collector)
-      Metric.new(collector, name)
+      Metric.new(collector, namespace)
     end
 
     private
-    def merge_keys(key)
-      valid_key!(key)
-      [@base_key, key.to_sym]
-    end
-    
-    def valid_key!(key)
-      raise MetricNoKeyProvided if key.nil? || key == ""
+    def validate_key!(key)
+      raise MetricNoKeyProvided if key.nil? || key.empty?
     end
   end
 end; end
diff --git a/logstash-core/lib/logstash/instrument/metric_type/counter.rb b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
index 64cf4940bb3..f4623766542 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/counter.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
@@ -22,7 +22,7 @@ def decrement(value = 1)
       @counter.decrement(value)
     end
 
-    def execute(type, key, action, time, value)
+    def execute(namespace, key, type, action, value)
       @counter.send(action, value)
     end
 
diff --git a/logstash-core/lib/logstash/instrument/null_metric.rb b/logstash-core/lib/logstash/instrument/null_metric.rb
index e65511b4c32..7ec33cc4c14 100644
--- a/logstash-core/lib/logstash/instrument/null_metric.rb
+++ b/logstash-core/lib/logstash/instrument/null_metric.rb
@@ -1,7 +1,7 @@
 # encoding: utf-8
 module LogStash module Instrument
  class NullMetric
-   attr_reader :collector, :base_key
+   attr_reader :collector, :namespace_information
    def initialize
    end
 
diff --git a/logstash-core/lib/logstash/instrument/probe/os.rb b/logstash-core/lib/logstash/instrument/probe/os.rb
index 059bd03481f..a776060a10c 100644
--- a/logstash-core/lib/logstash/instrument/probe/os.rb
+++ b/logstash-core/lib/logstash/instrument/probe/os.rb
@@ -59,7 +59,6 @@ def self.underscore(str)
         str.gsub!(/([a-z\d])([A-Z])/,'\1_\2')
         str.tr!("-", "_")
         str.downcase!
-        puts str
         str
       end
 
diff --git a/logstash-core/lib/logstash/instrument/snapshot.rb b/logstash-core/lib/logstash/instrument/snapshot.rb
index 45de3fbd8e1..365a7c4fec1 100644
--- a/logstash-core/lib/logstash/instrument/snapshot.rb
+++ b/logstash-core/lib/logstash/instrument/snapshot.rb
@@ -14,8 +14,8 @@ def initialize
     end
 
     def push(*args)
-      type, key, _ = args
-      metric = @metrics.fetch_or_store(key, concrete_class(type, key))
+      namespace, key, type, _ = args
+      metric = @metrics.fetch_or_store([namespace, key].join('-'), concrete_class(type, key))
       metric.execute(*args)
     end
 
diff --git a/logstash-core/spec/logstash/instrument/metric_spec.rb b/logstash-core/spec/logstash/instrument/metric_spec.rb
index f172186d3eb..0013152a66b 100644
--- a/logstash-core/spec/logstash/instrument/metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_spec.rb
@@ -5,19 +5,19 @@
 
 describe LogStash::Instrument::Metric do
   let(:collector) { [] }
-  let(:base_key) { :root }
+  let(:namespace) { :root }
 
-  subject { LogStash::Instrument::Metric.new(collector, base_key) }
+  subject { LogStash::Instrument::Metric.new(collector, namespace) }
 
   context "#increment" do
     it "a counter by 1" do
       metric = subject.increment(:error_rate)
-      expect(collector.pop).to be_a_metric_event(:counter_increment, [:root, :error_rate], 1)
+      expect(collector).to be_a_metric_event([:root, :error_rate], :counter, :increment, 1)
     end
 
     it "a counter by a provided value" do
       metric = subject.increment(:error_rate, 20)
-      expect(metric.pop).to be_a_metric_event(:counter_increment, [:root, :error_rate], 20)
+      expect(collector).to be_a_metric_event([:root, :error_rate], :counter, :increment, 20)
     end
 
     it "raises an exception if the key is an empty string" do
@@ -32,12 +32,12 @@
   context "#decrement" do
     it "a counter by 1" do
       metric = subject.decrement(:error_rate)
-      expect(collector.pop).to be_a_metric_event(:counter_decrement, [:root, :error_rate], 1)
+      expect(collector).to be_a_metric_event([:root, :error_rate], :counter, :decrement, 1)
     end
 
     it "a counter by a provided value" do
       metric = subject.decrement(:error_rate, 20)
-      expect(metric.pop).to be_a_metric_event(:counter_decrement, [:root, :error_rate], 20)
+      expect(collector).to be_a_metric_event([:root, :error_rate], :counter, :decrement, 20)
     end
 
     it "raises an exception if the key is an empty string" do
@@ -52,7 +52,7 @@
   context "#gauge" do
     it "set the value of a key" do
       metric = subject.gauge(:size_queue, 20)
-      expect(metric.pop).to be_a_metric_event(:gauge, [:root, :size_queue], 20)
+      expect(collector).to be_a_metric_event([:root, :size_queue], :gauge, 20)
     end
 
     it "raises an exception if the key is an empty string" do
@@ -68,7 +68,7 @@
     let(:sub_key) { :my_sub_key }
 
     it "creates a new metric object and append the `sub_key` to the `base_key`" do
-      expect(subject.namespace(sub_key).base_key).to eq([base_key, sub_key])
+      expect(subject.namespace(sub_key).namespace_information).to eq([namespace, sub_key])
     end
 
     it "uses the same collector as the creator class" do
diff --git a/logstash-core/spec/logstash/instrument/probe/os_spec.rb b/logstash-core/spec/logstash/instrument/probe/os_spec.rb
index 35e42c5b6a4..b5ace36e99b 100644
--- a/logstash-core/spec/logstash/instrument/probe/os_spec.rb
+++ b/logstash-core/spec/logstash/instrument/probe/os_spec.rb
@@ -5,8 +5,4 @@
   it "returns the load average" do
     expect(subject.system_load_average).to be > 0
   end
-
-  it "return the architecture" do
-    expect(subject.fs.total_physical_memory_size).to eq("")
-  end
 end
diff --git a/logstash-core/spec/logstash/instrument/size_queue_spec.rb b/logstash-core/spec/logstash/instrument/size_queue_spec.rb
deleted file mode 100644
index 8f183b42e19..00000000000
--- a/logstash-core/spec/logstash/instrument/size_queue_spec.rb
+++ /dev/null
@@ -1,48 +0,0 @@
-# encoding: utf-8
-require "logstash/instrument/size_queue"
-require "logstash/instrument/metric"
-require "logstash/event"
-require "spec_helper"
-require "thread"
-
-describe LogStash::Instrument::SizeQueue do
-  let(:event) { LogStash::Event.new }
-  let(:collector) { [] }
-  let(:queue) { Queue.new }
-  let(:base_key) { :size_queue }
-  let(:metric) { LogStash::Instrument::Metric.new(collector, base_key) }
-
-  subject { LogStash::Instrument::SizeQueue.new(queue, metric) }
-
-  context "collecting metrics" do
-    context "#push" do
-
-      [:push, :<<, :enq].each do |method|
-        it "collect metric when calling #{method}" do
-          subject.send(method, event)
-          expect(collector.pop).to be_a_metric_event(:counter_increment, [:size_queue, :in], 1)
-        end
-      end
-    end
-
-    context "#pop" do
-      before(:each) { queue.push(event) }
-
-      [:pop, :shift, :deq].each do |method|
-        it "collect metric when calling #{method}" do
-          expect(subject.send(method)).to eq(event)
-          expect(collector.pop).to be_a_metric_event(:counter_increment, [:size_queue, :out], 1)
-        end
-      end
-    end
-  end
-
-  context "delegating methods to the the original queue" do
-    [:clear, :size, :empty?, :length, :num_waiting].each do |method|
-      it "#{method} calls the proxied instance" do
-        expect(queue).to receive(method)
-        subject.send(method)
-      end
-    end
-  end
-end
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 913fb527947..c76fbe3e8c5 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -1,8 +1,7 @@
 # encoding: utf-8
 require 'spec_helper'
 
-
-
+require "logstash/output_delegator"
 describe LogStash::OutputDelegator do
   let(:logger) { double("logger") }
   let(:out_klass) { double("output klass") }
diff --git a/logstash-core/spec/support/matchers.rb b/logstash-core/spec/support/matchers.rb
index 31540efa28b..263ac7b3a43 100644
--- a/logstash-core/spec/support/matchers.rb
+++ b/logstash-core/spec/support/matchers.rb
@@ -2,15 +2,15 @@
 require "rspec"
 require "rspec/expectations"
 
-RSpec::Matchers.define :be_a_metric_event do |type, key, value|
+RSpec::Matchers.define :be_a_metric_event do |namespace, type, *args|
   match do
-    actual.first == type &&
-      actual[1].kind_of?(Time) &&
-      actual[2] == key &&
-      actual.last == value
+    namespace == actual[0] << actual[1] && 
+      type == actual[2] &&
+      args == actual[3..-1]
   end
 end
 
+# Match to test `NullObject` pattern
 RSpec::Matchers.define :implement_interface_of do |type, key, value|
   match do |actual|
     all_instance_methods_implemented?
