diff --git a/docs/static/security/es-security.asciidoc b/docs/static/security/es-security.asciidoc
new file mode 100644
index 00000000000..b6390b1ef03
--- /dev/null
+++ b/docs/static/security/es-security.asciidoc
@@ -0,0 +1,79 @@
+[discrete]
+[[es-security-on]]
+== {es} security on by default
+
+{es} {ref}/configuring-stack-security.html[security is on by default] starting in 8.0.
+{es} generates its own default self-signed Secure Sockets Layer (SSL) certificates at startup. 
+
+For an on-premise {es} cluster, {ls} must establish a secure connection using the self-signed SSL certificate before it can transfer data.  
+On the other hand, {ess} uses standard publicly trusted certificates, and therefore setting a cacert is not necessary.
+
+.Hosted {ess} simplifies security
+[NOTE]
+=====
+Our hosted {ess} on Elastic Cloud simplifies safe, secure communication between {ls} and {es}. 
+When you configure the elasticsearch output plugin to use <<plugins-outputs-elasticsearch-cloud_id,`cloud_id`>> with either the <<plugins-outputs-elasticsearch-cloud_auth,`cloud_auth` option>> or the <<plugins-outputs-elasticsearch-api_key,`api_key` option>>, no additional SSL configuration steps are needed.
+
+Examples:
+
+* `output {elasticsearch { cloud_id => "<cloud id>" cloud_auth => "<cloud auth>" } }`
+* `output {elasticsearch { cloud_id => "<cloud id>" api_key => "<api key>" } }``
+
+For more details, check out the
+{logstash-ref}/connecting-to-cloud.html[Logstash-to-Cloud documentation].
+
+{ess-leadin-short}
+=====
+
+[discrete]
+[[es-security-onprem]]
+=== Secure communication with an on-premise {es} cluster
+
+If you are running {es} on your own hardware and using the Elasticsearch cluster's default self-signed certificates, you need to complete a few more steps to establish secure communication between {ls} and {es}.
+
+You need to: 
+* Copy the self-signed CA certificate from {es} and save it to {ls}
+* Configure the elasticsearch-output plugin to use the certificate
+
+These steps are not necessary if your cluster is using public trusted certificates. 
+
+[discrete]
+[[es-sec-copy-cert]]
+==== Copy and save the certificate
+
+By default an on-premise {es} cluster generates a self-signed CA and creates its own SSL certificates when it starts. 
+Therefore {ls} needs its own copy of the self-signed CA from the {es} cluster in order for {ls} to validate the certificate presented by {es}.
+
+Copy the {ref}/configuring-stack-security.html#stack-security-certificates[self-signed CA certificate] from the {es} `config/certs` directory.
+
+Save it to a location that Logstash can access, such as `config/certs` on the {ls} instance. 
+
+/////
+ToDo: 
+Verify location. 
+I don't see an existing config/certs folder. 
+If this is the location we'd like users to use, we should stub out a folder in https://github.com/elastic/logstash/tree/main/config. 
+As always, there's a definite argument for consistency across deployments. 
+/////
+
+[discrete]
+[[es-sec-plugin]]
+==== Configure the elasticsearch output
+
+Use the <<plugins-outputs-elasticsearch,`elasticsearch output`'s>> <<plugins-outputs-elasticsearch-cacert,`cacert` option>> to point to the certificate's location. 
+
+**Example**
+
+[source,ruby] 
+-------
+output {
+  elasticsearch {
+    hosts => ["https://...] <1>
+    cacert => '/etc/logstash/config/certs/ca.crt' <2>
+  }
+}
+-------
+<1> Note that the `hosts` url must begin with `https` 
+<2> Path to the {ls} copy of the {es} certificate
+
+For more information about establishing secure communication with {es}, see {ref}/configuring-stack-security.html[security is on by default]. 
diff --git a/docs/static/security/logstash.asciidoc b/docs/static/security/logstash.asciidoc
index 119b763fe6a..20a7ed11b0a 100644
--- a/docs/static/security/logstash.asciidoc
+++ b/docs/static/security/logstash.asciidoc
@@ -1,35 +1,32 @@
 [[ls-security]]
-== Security
+== Secure your connection to {es} 
 [subs="attributes"]
 ++++
-<titleabbrev>Security</titleabbrev>
+<titleabbrev>Secure your connection</titleabbrev>
 ++++
 
-The Logstash {es} plugins ({logstash-ref}/plugins-outputs-elasticsearch.html[output],
-{logstash-ref}/plugins-inputs-elasticsearch.html[input],
-{logstash-ref}/plugins-filters-elasticsearch.html[filter]
-and {logstash-ref}/monitoring-logstash.html[monitoring])
+The Logstash {es} {logstash-ref}/plugins-outputs-elasticsearch.html[output],
+{logstash-ref}/plugins-inputs-elasticsearch.html[input], and
+{logstash-ref}/plugins-filters-elasticsearch.html[filter] plugins,  as well as
+{logstash-ref}/monitoring-logstash.html[monitoring] and central management,
 support authentication and encryption over HTTPS.
 
-To use Logstash with a secured cluster, you need to configure authentication
-credentials for Logstash. Logstash throws an exception and the processing
-pipeline is halted if authentication fails.
-
-If encryption is enabled on the cluster, you also need to enable TLS/SSL in the
-Logstash configuration.
-
-If you want to monitor your Logstash instance with {monitoring}, and store the
-monitoring data in a secured {es} cluster, you must configure Logstash
-with a username and password for a user with the appropriate permissions.
+{es} clusters are secured by default (starting in 8.0). 
+You need to configure authentication credentials for Logstash in order to
+establish communication.
+Logstash throws an exception and the processing pipeline is halted if authentication fails.
 
 In addition to configuring authentication credentials for Logstash, you need
 to grant authorized users permission to access the Logstash indices.
 
+Security is enabled by default on the {es} cluster (starting in 8.0).
+You must enable TLS/SSL in the {es} output section of the Logstash configuration in order to allow Logstash to communicate with the {es} cluster.
 
+include::es-security.asciidoc[]
 include::basic-auth.asciidoc[]
 include::grant-access.asciidoc[]
-include::pki-auth.asciidoc[]
 include::tls-encryption.asciidoc[]
+include::pki-auth.asciidoc[]
 include::ls-monitoring.asciidoc[]
 include::pipeline-mgmt.asciidoc[]
 include::api-keys.asciidoc[]
diff --git a/docs/static/security/ls-monitoring.asciidoc b/docs/static/security/ls-monitoring.asciidoc
index 09babb63482..8f4ebad8531 100644
--- a/docs/static/security/ls-monitoring.asciidoc
+++ b/docs/static/security/ls-monitoring.asciidoc
@@ -2,9 +2,9 @@
 [[ls-monitoring-user]]
 === Configuring credentials for {ls} monitoring
 
-If you plan to ship Logstash {logstash-ref}/configuring-logstash.html[monitoring]
-data to a secure cluster, you need to configure the username and password that
-Logstash uses to authenticate for shipping monitoring data.
+If you want to monitor your Logstash instance with {stack-monitor-features}, and
+store the monitoring data in a secured {es} cluster, you must configure Logstash
+with a username and password for a user with the appropriate permissions.
 
 The {security-features} come preconfigured with a
 {ref}/built-in-users.html[`logstash_system` built-in user]
diff --git a/docs/static/security/tls-encryption.asciidoc b/docs/static/security/tls-encryption.asciidoc
index 8cf4ada0a41..a8b9f29b8e1 100644
--- a/docs/static/security/tls-encryption.asciidoc
+++ b/docs/static/security/tls-encryption.asciidoc
@@ -1,8 +1,8 @@
 [discrete]
 [[ls-http-ssl]]
-=== Configuring Logstash to use TLS encryption
+=== Configuring Logstash to use TLS/SSL encryption
 
-If TLS encryption is enabled on the {es} cluster, you need to
+If TLS encryption is enabled on an on premise {es} cluster, you need to
 configure the `ssl` and `cacert` options in your Logstash `.conf` file:
 
 [source,js]
@@ -16,4 +16,8 @@ output {
 }
 --------------------------------------------------
 <1> The path to the local `.pem` file that contains the Certificate
-    Authority's certificate.
\ No newline at end of file
+    Authority's certificate.
+    
+NOTE: Hosted {ess} simplifies security. This configuration step is not necessary for hosted Elasticsearch Service on Elastic Cloud.
+{ess-leadin-short} 
+    
\ No newline at end of file
