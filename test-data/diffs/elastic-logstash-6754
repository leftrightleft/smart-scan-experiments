diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index cd4e054af26..27193110310 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -16,7 +16,7 @@ class LogstashService < Service
   SETTINGS_CLI_FLAG = "--path.settings"
 
   STDIN_CONFIG = "input {stdin {}} output { }"
-  RETRY_ATTEMPTS = 10
+  RETRY_ATTEMPTS = 60
 
   @process = nil
   
@@ -158,13 +158,11 @@ def monitoring_api
   def wait_for_logstash
     tries = RETRY_ATTEMPTS
     while tries > 0
-      if is_port_open?
-        break
-      else
-        sleep 1
-      end
+      return if is_port_open?
+      sleep 1
       tries -= 1
     end
+    raise RuntimeError.new("failed to start Logstash after #{RETRY_ATTEMPTS} seconds. aborting..")
   end
   
   # this method only overwrites existing config with new config
diff --git a/qa/integration/specs/01_logstash_bin_smoke_spec.rb b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
index cbda3b63fd5..c149b05faaa 100644
--- a/qa/integration/specs/01_logstash_bin_smoke_spec.rb
+++ b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
@@ -29,7 +29,7 @@
   let(:file_config2) { Stud::Temporary.file.path }
   let(:file_config3) { Stud::Temporary.file.path }
 
-  let(:num_retries) { 10 }
+  let(:num_retries) { 60 }
   let(:config1) { config_to_temp_file(@fixture.config("root", { :port => port1, :random_file => file_config1 })) }
   let(:config2) { config_to_temp_file(@fixture.config("root", { :port => port2 , :random_file => file_config2 })) }
   let(:config3) { config_to_temp_file(@fixture.config("root", { :port => port3, :random_file => file_config3 })) }
@@ -52,11 +52,9 @@
       tmp_data_path = File.join(tmp_path, "data")
       FileUtils.mkdir_p(tmp_data_path)
       @ls1.spawn_logstash("-f", config1, "--path.data", tmp_data_path)
-      sleep(0.1) until File.exist?(file_config1) && File.size(file_config1) > 0 # Everything is started succesfully at this point
-      expect(is_port_open?(9600)).to be true
-
+      @ls1.wait_for_logstash
       @ls2.spawn_logstash("-f", config2, "--path.data", tmp_data_path)
-      try(20) do
+      try(num_retries) do
         expect(@ls2.exited?).to be(true)
       end
       expect(@ls2.exit_code).to be(1)
@@ -70,56 +68,36 @@
       tmp_data_path_2 = File.join(tmp_path_2, "data")
       FileUtils.mkdir_p(tmp_data_path_2)
       @ls1.spawn_logstash("-f", config1, "--path.data", tmp_data_path_1)
-      sleep(0.1) until File.exist?(file_config1) && File.size(file_config1) > 0 # Everything is started succesfully at this point
-      expect(is_port_open?(9600)).to be true
-
+      @ls1.wait_for_logstash
       @ls2.spawn_logstash("-f", config2, "--path.data", tmp_data_path_2)
-      sleep(0.1) until File.exist?(file_config2) && File.size(file_config2) > 0 # Everything is started succesfully at this point
+      @ls2.wait_for_logstash
       expect(@ls2.exited?).to be(false)
     end
 
     it "can be started on the same box with automatically trying different ports for HTTP server" do
       if @ls2.settings.feature_flag != "persistent_queues"
         @ls1.spawn_logstash("-f", config1)
-        sleep(0.1) until File.exist?(file_config1) && File.size(file_config1) > 0 # Everything is started succesfully at this point
-        expect(is_port_open?(9600)).to be true
-
-        puts "will try to start the second LS instance on 9601"
-
-        # bring up new LS instance
-        tmp_path = Stud::Temporary.pathname
-        tmp_data_path = File.join(tmp_path, "data")
-        FileUtils.mkdir_p(tmp_data_path)
-        @ls2.spawn_logstash("-f", config2, "--path.data", tmp_data_path)
-        sleep(0.1) until File.exist?(file_config2) && File.size(file_config2) > 0 # Everything is started succesfully at this point
-        expect(is_port_open?(9601)).to be true
-        expect(@ls1.process_id).not_to eq(@ls2.process_id)
+        @ls1.wait_for_logstash
       else
         # Make sure that each instance use a different `path.data`
         path = Stud::Temporary.pathname
-        FileUtils.mkdir_p(File.join(path, "data"))
         data = File.join(path, "data")
-        settings = persistent_queue_settings.merge({ "path.data" => data })
-        IO.write(File.join(path, "logstash.yml"), YAML.dump(settings))
+        FileUtils.mkdir_p(path)
 
-        @ls1.spawn_logstash("--path.settings", path, "-f", config1)
-        sleep(0.1) until File.exist?(file_config1) && File.size(file_config1) > 0 # Everything is started succesfully at this point
-        expect(is_port_open?(9600)).to be true
-
-        puts "will try to start the second LS instance on 9601"
+        @ls1.spawn_logstash("--path.data", data, "-f", config1)
+        @ls1.wait_for_logstash
+      end
 
-        # bring up new LS instance
-        path = Stud::Temporary.pathname
-        FileUtils.mkdir_p(File.join(path, "data"))
-        data = File.join(path, "data")
-        settings = persistent_queue_settings.merge({ "path.data" => data })
-        IO.write(File.join(path, "logstash.yml"), YAML.dump(settings))
-        @ls2.spawn_logstash("--path.settings", path, "-f", config2)
-        sleep(0.1) until File.exist?(file_config2) && File.size(file_config2) > 0 # Everything is started succesfully at this point
-        expect(is_port_open?(9601)).to be true
+      puts "will try to start the second LS instance on 9601"
 
-        expect(@ls1.process_id).not_to eq(@ls2.process_id)
-      end
+      # bring up new LS instance
+      path = Stud::Temporary.pathname
+      data = File.join(path, "data")
+      FileUtils.mkdir_p(path)
+      @ls2.spawn_logstash("--path.data", path, "-f", config2)
+      @ls2.wait_for_logstash
+      expect(@ls2.exited?).to be(false)
+      expect(@ls1.process_id).not_to eq(@ls2.process_id)
     end
   end
 
diff --git a/qa/integration/specs/env_variables_config_spec.rb b/qa/integration/specs/env_variables_config_spec.rb
index 801ad5179b6..5754630b434 100644
--- a/qa/integration/specs/env_variables_config_spec.rb
+++ b/qa/integration/specs/env_variables_config_spec.rb
@@ -13,7 +13,7 @@
     @fixture.teardown
   }
   
-  let(:num_retries) { 10 }
+  let(:num_retries) { 60 }
   let(:test_tcp_port) { random_port }
   let(:test_tag) { "environment_variables_are_evil" }
   let(:test_path) { Stud::Temporary.directory }
diff --git a/qa/integration/specs/settings_spec.rb b/qa/integration/specs/settings_spec.rb
index b552a593eba..2e8f7e800ba 100644
--- a/qa/integration/specs/settings_spec.rb
+++ b/qa/integration/specs/settings_spec.rb
@@ -28,7 +28,7 @@
     FileUtils.mv("#{@logstash_service.application_settings_file}.original", @logstash_service.application_settings_file)
   }
 
-  let(:num_retries) { 15 }
+  let(:num_retries) { 60 }
   let(:test_port) { random_port }
   let(:temp_dir) { Stud::Temporary.directory("logstash-settings-test") }
   let(:tcp_config) { @fixture.config("root", { :port => test_port }) }
