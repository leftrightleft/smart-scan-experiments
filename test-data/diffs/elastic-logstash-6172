diff --git a/logstash-core/lib/logstash/logging/logger.rb b/logstash-core/lib/logstash/logging/logger.rb
index 8acac62ff1a..3ac46014210 100644
--- a/logstash-core/lib/logstash/logging/logger.rb
+++ b/logstash-core/lib/logstash/logging/logger.rb
@@ -1,4 +1,5 @@
 require "logstash/java_integration"
+require "uri"
 
 module LogStash
   module Logging
@@ -6,6 +7,7 @@ class Logger
       java_import org.apache.logging.log4j.Level
       java_import org.apache.logging.log4j.LogManager
       java_import org.apache.logging.log4j.core.config.Configurator
+      java_import org.apache.logging.log4j.core.config.DefaultConfiguration
       @@config_mutex = Mutex.new
       @@logging_context = nil
 
@@ -70,7 +72,16 @@ def self.configure_logging(level, path = LogManager::ROOT_LOGGER_NAME)
       def self.initialize(config_location)
         @@config_mutex.synchronize do
           if @@logging_context.nil?
-            @@logging_context = Configurator.initialize(nil, config_location)
+            file_path = URI(config_location).path
+            if ::File.exists?(file_path)
+              logs_location = java.lang.System.getProperty("ls.logs")
+              puts "Sending Logstash's logs to #{logs_location} which is now configured via log4j2.properties"
+              @@logging_context = Configurator.initialize(nil, config_location)
+            else
+              # fall back to default config
+              puts "Could not find log4j2 configuration at path #{file_path}. Using default config which logs to console"
+              @@logging_context = Configurator.initialize(DefaultConfiguration.new)
+            end
           end
         end
       end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 531a94a36ca..ebbd8bfdcdc 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -164,11 +164,8 @@ def run(args)
 
     begin
       LogStash::SETTINGS.from_yaml(LogStash::SETTINGS.get("path.settings"))
-    rescue Errno::ENOENT 
-      unless cli_help?(args)
-        $stderr.puts "ERROR: Logstash requires a setting file which is typically located in $LS_HOME/config or /etc/logstash. If you installed Logstash through a package and are starting it manually, please specify the location to this settings file by passing --path.settings /etc/logstash"
-        return 1
-      end   
+    rescue Errno::ENOENT
+      $stderr.puts "WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults"
     rescue => e
       # abort unless we're just looking for the help
       unless cli_help?(args)
@@ -196,12 +193,6 @@ def execute
     end
     # override log level that may have been introduced from a custom log4j config file
     LogStash::Logging::Logger::configure_logging(setting("log.level"))
-    
-    # Adding this here because a ton of LS users install LS via packages and try to manually 
-    # start Logstash using bin/logstash. See #5986. I think not logging to console is good for 
-    # services, but until LS users re-learn that logs end up in path.logs, we should keep this 
-    # message. Otherwise we'll be answering the same question again and again.
-    puts "Sending Logstash logs to #{setting("path.logs")} which is now configured via log4j2.properties."
 
     if setting("config.debug") && logger.debug?
       logger.warn("--config.debug was specified, but log.level was not set to \'debug\'! No config info will be logged.")
@@ -288,7 +279,12 @@ def execute
     show_short_help
     return 1
   rescue => e
-    logger.fatal(I18n.t("oops"), :error => e, :backtrace => e.backtrace)
+    # if logger itself is not initialized
+    if LogStash::Logging::Logger.get_logging_context.nil?
+      $stderr.puts "#{I18n.t("oops")} :error => #{e}, :backtrace => #{e.backtrace}"
+    else
+      logger.fatal(I18n.t("oops"), :error => e, :backtrace => e.backtrace)
+    end
     return 1
   ensure
     Stud::untrap("INT", sigint_id) unless sigint_id.nil?
@@ -421,6 +417,6 @@ def fetch_settings_path(cli_args)
   def cli_help?(args)
     # I know, double negative
     !(["--help", "-h"] & args).empty?
-  end  
+  end
 
 end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 00ff679e6d8..cab9dae268e 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -353,8 +353,8 @@ def run(args); end
     context "if does not exist" do
       let(:args) { ["--path.settings", "/tmp/a/a/a/a", "-e", "input {} output {}"] }
 
-      it "should terminate logstash" do
-        expect(subject.run(args)).to eq(1)
+      it "should not terminate logstash" do
+        expect(subject.run(args)).to eq(nil)
       end
 
       context "but if --help is passed" do
diff --git a/qa/integration/specs/settings_spec.rb b/qa/integration/specs/settings_spec.rb
index e817c1a5d03..d6ff9b5c357 100644
--- a/qa/integration/specs/settings_spec.rb
+++ b/qa/integration/specs/settings_spec.rb
@@ -9,6 +9,7 @@
   before(:all) {
     @fixture = Fixture.new(__FILE__)
     @logstash_service = @fixture.get_service("logstash")
+    @logstash_default_logs = File.join(@logstash_service.logstash_home, "logs", "logstash-plain.log")
   }
 
   after(:all) {
@@ -22,6 +23,7 @@
   
   after(:each) {
     @logstash_service.teardown
+    FileUtils.rm(@logstash_default_logs) if File.exists?(@logstash_default_logs)
     # restore the application settings file -- logstash.yml
     FileUtils.mv("#{@logstash_service.application_settings_file}.original", @logstash_service.application_settings_file)
   }
@@ -39,7 +41,7 @@ def change_setting(name, value)
   
   def overwrite_settings(settings)
     IO.write(@logstash_service.application_settings_file, settings.to_yaml)
-  end  
+  end
   
   it "should start with a new data dir" do
     change_setting("path.data", temp_dir)
@@ -96,7 +98,7 @@ def overwrite_settings(settings)
     end
     expect(@logstash_service.exit_code).to eq(1)
   end
-  
+
   it "change pipeline settings" do
     s = {}
     workers = 31
@@ -110,13 +112,13 @@ def overwrite_settings(settings)
     try do
       expect(is_port_open?(test_port)).to be true
     end
-    
+
     # now check monitoring API to validate
     node_info = @logstash_service.monitoring_api.node_info
     expect(node_info["pipeline"]["workers"]).to eq(workers)
     expect(node_info["pipeline"]["batch_size"]).to eq(batch_size)
   end
-  
+
   it "start on a different HTTP port" do
     # default in 9600
     http_port = random_port
@@ -131,9 +133,30 @@ def overwrite_settings(settings)
       expect(is_port_open?(test_port)).to be true
     end
     
+    expect(File.exists?(@logstash_default_logs)).to be true
+
     resp = Manticore.get("http://localhost:#{http_port}/_node").body
     node_info = JSON.parse(resp)
     # should be default
     expect(node_info["http_address"]).to eq("127.0.0.1:#{http_port}")
   end
-end  
\ No newline at end of file
+
+  it "start even without a settings file specified" do
+    @logstash_service.spawn_logstash("-e", tcp_config, "--path.settings", "/tmp/fooooobbaaar")
+    http_port = 9600
+    try(num_retries) do
+      expect(is_port_open?(http_port)).to be true
+    end
+
+    try(num_retries) do
+      expect(is_port_open?(test_port)).to be true
+    end
+
+    resp = Manticore.get("http://localhost:#{http_port}/_node").body
+    node_info = JSON.parse(resp)
+    expect(node_info["http_address"]).to eq("127.0.0.1:#{http_port}")
+
+    # make sure we log to console and not to any file
+    expect(File.exists?(@logstash_default_logs)).to be false
+  end
+end
