diff --git a/lib/logstash/config/config_ast.rb b/lib/logstash/config/config_ast.rb
index e43000175d4..83f3ea19495 100644
--- a/lib/logstash/config/config_ast.rb
+++ b/lib/logstash/config/config_ast.rb
@@ -272,13 +272,17 @@ def compile
       # Hack for compiling 'in' support.
       # This really belongs elsewhere, I think.
       cmp = recursive_select(LogStash::Config::AST::ComparisonOperator)
+
+      # Hack for '!' operator support.
+      not_op = text_value =~ /^!/ ? '!' : ''
+
       if cmp.count == 1 
         operator = cmp.first.text_value
         if operator == "in"
           # item 'in' list
           # technically anything that responds to #include? is accepted.
           item, list = recursive_select(LogStash::Config::AST::RValue)
-          return "(x = #{list.compile}; x.respond_to?(:include?) && x.include?(#{item.compile}))"
+          return "#{not_op}(x = #{list.compile}; x.respond_to?(:include?) && x.include?(#{item.compile}))"
           #return "#{list.compile}.include?(#{item.compile})"
         elsif ["=~", "!~"].include?(operator)
           item, regexp = recursive_select(LogStash::Config::AST::RValue)
@@ -287,10 +291,10 @@ def compile
           else
             regexp = regexp.compile
           end
-          return "(#{item.compile} #{operator} #{regexp})"
+          return "#{not_op}(#{item.compile} #{operator} #{regexp})"
         end
       end
-      return "(#{super})"
+      return "#{not_op}(#{super})"
     end
   end
   class MethodCall < Node
diff --git a/spec/conditionals/test.rb b/spec/conditionals/test.rb
index 7cd23fd91f4..cd1520bcdc3 100644
--- a/spec/conditionals/test.rb
+++ b/spec/conditionals/test.rb
@@ -36,6 +36,12 @@ def conditional(expression, &block)
         } else {
           mutate { add_field => { "free" => "hugs" } }
         }
+        if ![foo] != "bar" {
+          mutate { add_field => { "not" => "works" } }
+        }
+        if !([foo] != "bar") {
+          mutate { add_field => { "not2" => "works too" } }
+        }
       }
     CONFIG
 
@@ -44,6 +50,8 @@ def conditional(expression, &block)
       insist { subject["hello"] } == "world"
       insist { subject["fancy"] }.nil?
       insist { subject["free"] }.nil?
+      insist { subject["not"] } == "works"
+      insist { subject["not2"] } == "works too"
     end
 
     sample({"notfoo" => "bar"}) do
@@ -51,6 +59,8 @@ def conditional(expression, &block)
       insist { subject["hello"] }.nil?
       insist { subject["fancy"] }.nil?
       insist { subject["free"] } == "hugs"
+      insist { subject["not"] }.nil?
+      insist { subject["not2"] }.nil?
     end
 
     sample({"bar" => "baz"}) do
@@ -58,6 +68,8 @@ def conditional(expression, &block)
       insist { subject["hello"] }.nil?
       insist { subject["fancy"] } == "pants"
       insist { subject["free"] }.nil?
+      insist { subject["not"] }.nil?
+      insist { subject["not2"] }.nil?
     end
   end
 
@@ -132,6 +144,9 @@ def conditional(expression, &block)
         if "hello" in [greeting] {
           mutate { add_tag => "string in field" }
         }
+        if !("oink" in [greeting]) {
+          mutate { add_tag => "string not in field" }
+        }
         if [foo] in ["hello", "world", "foo"] {
           mutate { add_tag => "field in list" }
         }
@@ -145,6 +160,7 @@ def conditional(expression, &block)
       insist { subject["tags"] }.include?("field in field")
       insist { subject["tags"] }.include?("field in string")
       insist { subject["tags"] }.include?("string in field")
+      insist { subject["tags"] }.include?("string not in field")
       insist { subject["tags"] }.include?("field in list")
       reject { subject["tags"] }.include?("shouldnotexist")
     end
