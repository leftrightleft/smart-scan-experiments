diff --git a/lib/logstash/inputs/gelf.rb b/lib/logstash/inputs/gelf.rb
index 940914b8439..15cb2b6ffbd 100644
--- a/lib/logstash/inputs/gelf.rb
+++ b/lib/logstash/inputs/gelf.rb
@@ -86,7 +86,7 @@ def udp_listener(output_queue)
       # when all chunks are completed
       e = to_event(data, source) unless data.nil?
       if e
-        remap_gelf(e) if @remap
+        remap_gelf(e) if @remap 
         output_queue << e
       end
     end
@@ -101,7 +101,7 @@ def udp_listener(output_queue)
   def remap_gelf(event)
     event.message = event.fields["full_message"]
     event.timestamp = LogStash::Time.to_iso8601(
-      DateTime.strptime(event.fields["timestamp"].to_s, "%s.%L" ))
+      DateTime.strptime(event.fields["timestamp"].to_s, "%Q" ))
     event.source = "gelf://#{event.fields["host"]}#{event.fields["file"]}"
   end # def remap_gelf
 end # class LogStash::Inputs::Gelf
diff --git a/lib/logstash/outputs/gelf.rb b/lib/logstash/outputs/gelf.rb
index 7b12b5c0ffc..c5c8ddb6715 100644
--- a/lib/logstash/outputs/gelf.rb
+++ b/lib/logstash/outputs/gelf.rb
@@ -38,6 +38,12 @@ class LogStash::Outputs::Gelf < LogStash::Outputs::Base
   # is useful if you need to use a value from the event as the facility name.
   config :facility, :validate => :string, :default => "logstash-gelf"
 
+  # The GELF custom field mappings. GELF supports arbitrary attributes as custom
+  # fields. This exposes that. Exclude the `_` portion of the field name
+  # e.g. `custom_fields => ['foo_field', 'some_value']
+  # sets `_foo_field` = `some_value`
+  config :custom_fields, :validate => :hash, :default => {}
+
   public
   def register
     require "gelf" # rubygem 'gelf'
@@ -97,12 +103,19 @@ def receive(event)
       end
     end
 
+    if @custom_fields
+      @custom_fields.each do |field_name, field_value|
+        m["_#{field_name}"] = field_value unless field_name == 'id'
+      end
+    end
+
     # Allow 'INFO' 'I' or number. for 'level'
     level = event.sprintf(@level.to_s)
     m["level"] = (@level_map[level.downcase] || level).to_i
     m["facility"] = event.sprintf(@facility)
     m["timestamp"] = event.unix_timestamp.to_i
 
+    puts event
     @logger.debug("Sending GELF event", :event => m)
     @gelf.notify!(m)
   end # def receive
