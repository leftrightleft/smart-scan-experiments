diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index 1604ad60346..f91e153e6ec 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -41,6 +41,7 @@ def inspect
 #       "@version": "1",
 #       message: "hello world"
 #     }
+
 class LogStash::Event
   class DeprecatedMethod < StandardError; end
 
@@ -51,6 +52,7 @@ class DeprecatedMethod < StandardError; end
 
   public
   def initialize(data={})
+    @logger = Cabin::Channel.get(LogStash)
     @cancelled = false
 
     @data = data
@@ -65,6 +67,32 @@ def initialize(data={})
     else
       data[TIMESTAMP] = ::Time.now.utc
     end
+
+    # Used to store proc callbacks given to the event class
+    # event.on("some_event", &my_proc)
+    @change_listeners = {}
+
+    @default_change_listeners = {
+      # When an event has gone through all filters and are pretty much ready to be sent
+      "filter_processed" => [Proc.new {
+        trigger("output_send")
+      }],
+
+      # After an input has seen enough filter_processed events for a batch of messages to be 'ready'
+      "output_send" => [Proc.new {
+        trigger("output_sent")
+      }],
+
+      # After an output has confirmed the message has been sent to an HA store
+      "output_sent" => [Proc.new {
+        trigger("input_acknowledged")
+      }],
+
+      # After an input has acked back to a batch of messages
+      "input_acknowledged" => [Proc.new {
+        #@logger.debug "acked message"
+      }],
+    }
   end # def initialize
 
   public
@@ -251,4 +279,120 @@ def tag(value)
     self["tags"] ||= []
     self["tags"] << value unless self["tags"].include?(value)
   end
+
+  # State change notifications
+  def trigger(state_change)
+    callbacks = (
+      @change_listeners[state_change] or
+      @default_change_listeners[state_change]
+    )
+
+    callbacks.each do |callback|
+      callback.call(self)
+    end
+  end
+
+  def on(state_change, &callback)
+    # Initialize state_change if it's not set already
+    @change_listeners[state_change] ||= []
+    @change_listeners[state_change].push(callback)
+  end
 end # class LogStash::Event
+
+class LogStash::EventBundle
+  def initialize
+    @logger = Cabin::Channel.get(LogStash)
+    @events = []
+    @ready = false
+  end
+
+  def ready(ack_sequence)
+    ack_sequence.call
+    @ready = true
+  end
+
+  def add(event)
+    throw "Cannot add event to ready bundle" if @ready
+    @events.push(event)
+  end
+
+  def bail()
+    # Unless it's an HA output, we've already acked
+    # so do nothing here :)
+  end
+
+  class HA < LogStash::EventBundle
+    def initialize
+      super()
+      @processed_count = 0
+      @sent_count = 0
+      @semaphore = Mutex.new
+      @bailing = false
+    end
+
+    def ready(ack_sequence)
+      @ack_sequence = ack_sequence
+
+      all_processed = @semaphore.synchronize do
+        @ready = true
+        not @bailing and @processed_count == @events.size
+      end
+
+      broadcast "output_send" if all_processed
+    end
+
+    def bail()
+      @semaphore.synchronize do
+        @events.each do |e| e.cancel end
+        @bailing = true
+      end
+    end
+
+    def setup_callbacks(event)
+      event.on('filter_processed') do
+        all_processed = @semaphore.synchronize do
+          @processed_count += 1
+          not @bailing and @ready and @processed_count == @events.size
+        end
+
+        broadcast "output_send" if all_processed
+      end
+
+      event.on("output_sent") do
+        if not @ready
+          # Would be triggered in race condition
+          #   Make sure you added the event object to the bundle _before_ allowing it to be processed
+          #   Default actions inside the event may have triggered output_send sooner than add()
+          throw "Triggered output_send on bundled event when bundle is not ready"
+        end
+
+        ack_ready = @semaphore.synchronize do
+          @sent_count += 1
+          not @bailing and @sent_count == @events.size
+        end
+
+        if ack_ready
+          begin
+            # Try to ack sequence, but if this fails there's nothing we can do anyway
+            @ack_sequence.call
+            broadcast "input_acknowledged"
+          rescue
+            @logger.info "Failed to ack sequence, perhaps the connection is closing?"
+          end
+        end
+      end
+    end
+
+    def add(event)
+      setup_callbacks(event)
+      super(event) # add event to @events, et al
+    end
+
+    private
+    def broadcast(state)
+      @events.each do |e|
+        e.trigger state
+      end
+    end
+  end
+end
diff --git a/lib/logstash/inputs/lumberjack.rb b/lib/logstash/inputs/lumberjack.rb
index c4c5cfc1fcd..1eb27b3dd75 100644
--- a/lib/logstash/inputs/lumberjack.rb
+++ b/lib/logstash/inputs/lumberjack.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/inputs/base"
 require "logstash/namespace"
+require "logstash/event"
 
 # Receive events using the lumberjack protocol.
 #
@@ -29,6 +30,13 @@ class LogStash::Inputs::Lumberjack < LogStash::Inputs::Base
   # SSL key passphrase to use.
   config :ssl_key_passphrase, :validate => :password
 
+  # A flag to signal that we want messages to ack only when they've gone into an
+  # ha output.
+  #
+  # This only works if you flag an output with provides_ha
+  # e.g. elasticsearch with 3 nodes, and it's output declaring provides_ha => true
+  config :needs_ha, :validate => :boolean, :default => false
+
   # TODO(sissel): Add CA to authenticate clients with.
 
   public
@@ -42,13 +50,36 @@ def register
   end # def register
 
   public
-  def run(output_queue)
-    @lumberjack.run do |l|
-      @codec.decode(l.delete("line")) do |event|
-        decorate(event)
-        l.each { |k,v| event[k] = v; v.force_encoding(Encoding::UTF_8) }
-        output_queue << event
+  def run(output_queue)            # Run lumberjack with output queue
+    @lumberjack.run do |client|    # ...using lumberjack server (gem)
+      Thread.new(client) do |fd|   # ...then we wrap client connections inside threads
+        bundle_class = if @needs_ha then LogStash::EventBundle::HA else LogStash::EventBundle end
+        bundle = bundle_class.new
+
+        Lumberjack::Connection.new(fd).run() do |map, &ack_sequence|
+          @codec.decode(map.delete("line")) do |event|
+            # Add logstash required fields (type+tags) and re-add keys from map
+            decorate(event)
+            map.each { |k,v| event[k] = v; v.force_encoding(Encoding::UTF_8) }
+
+            # Process and record record events
+            bundle.add(event) # Register bundle callbacks before defaults get triggered.
+            output_queue << event
+
+            # Close bundle, bundle will ack when sequence has ended
+            if ack_sequence != nil
+              bundle.ready(ack_sequence)
+              bundle = bundle_class.new
+            end
+          end
+        end
+
+        # run loop only exits when the connection closes, tidyup time
+        if @needs_ha
+          @logger.info("Dropped connection, tidying up messages to avoid dups on resend")
+          bundle.bail()
+        end
       end
     end
-  end # def run
+  end
 end # class LogStash::Inputs::Lumberjack
diff --git a/lib/logstash/outputs/elasticsearch.rb b/lib/logstash/outputs/elasticsearch.rb
index 11852e4807b..d8272b0825f 100644
--- a/lib/logstash/outputs/elasticsearch.rb
+++ b/lib/logstash/outputs/elasticsearch.rb
@@ -173,6 +173,11 @@ class LogStash::Outputs::ElasticSearch < LogStash::Outputs::Base
   # For more details on actions, check out the [Elasticsearch bulk API documentation](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html)
   config :action, :validate => :string, :default => "index"
 
+  # A flag to signal that your Elasticsearch setup is Highly Available
+  #
+  # i.e. you have at least 3 nodes running
+  config :provides_ha, :validate => :boolean, :default => false
+
   public
   def register
     client_settings = {}
@@ -291,7 +296,12 @@ def start_local_elasticsearch
 
   public
   def receive(event)
-    return unless output?(event)
+    unless output?(event)
+      # Drop, but first let listening inputs know it got this far
+      # Defaults will handle the rest
+      event.trigger "filter_processed" if @provides_ha
+      return
+    end
 
     # Set the 'type' value for the index.
     if @index_type
@@ -303,11 +313,46 @@ def receive(event)
     index = event.sprintf(@index)
 
     document_id = @document_id ? event.sprintf(@document_id) : nil
-    buffer_receive([event.sprintf(@action), { :_id => document_id, :_index => index, :_type => type }, event.to_hash])
+
+    # Used to signal to the input that generated the message that
+    # it's been sent. Delay calling this till flush().
+    trigger_output_sent = Proc.new {
+      event.trigger "output_sent" if @provides_ha
+    }
+
+    # Used to delay putting this into the buffer till the input triggers
+    # output_send
+    save_to_elasticsearch = Proc.new {
+      buffer_receive({
+        :on_complete => trigger_output_sent,
+        :action => [
+          event.sprintf(@action),
+          { :_id => document_id, :_index => index, :_type => type },
+          event.to_hash,
+        ],
+      })
+    }
+
+    if @provides_ha
+      # Triggered by inputs or defaults
+      event.on("output_send", &save_to_elasticsearch)
+      event.trigger "filter_processed"
+    else
+      save_to_elasticsearch.call()
+    end
   end # def receive
 
-  def flush(actions, teardown=false)
-    @client.bulk(actions)
+  def flush(buff, teardown=false)
+    es_actions = buff.map { |b| b[:action] }
+    ack_callbacks = buff.map { |b| b[:on_complete] }
+
+    @client.bulk(es_actions)
+
+    # Ack all processed messages
+    ack_callbacks.each do |trigger_output_sent|
+       trigger_output_sent.call
+    end
+
     # TODO(sissel): Handle errors. Since bulk requests could mostly succeed
     # (aka partially fail), we need to figure out what documents need to be
     # retried.
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index 8ed9c7b5a52..f45e8926d14 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -30,6 +30,8 @@ def initialize(configstr)
       raise
     end
 
+    validate_ha
+
     @input_to_filter = SizedQueue.new(20)
 
     # If no filters, pipe inputs directly to outputs
@@ -51,6 +53,58 @@ def started?
     return @started
   end
 
+  # Validates that the plugins that have been configured for HA correctly
+  # Or that there is no HA configuration specified
+  #
+  # If there are multiple HA outputs, this raises an exception
+  # If there are HA inputs but no HA outputs, this raises an exception
+  # If there are HA outputs but no HA inputs, this prints a warning
+  def validate_ha
+    ha_inputs = @inputs.select do |input|
+      if input.class.method_defined? :needs_ha
+        input.needs_ha
+      else
+        false
+      end
+    end
+
+    ha_outputs = @outputs.select do |output|
+      if output.class.method_defined? :provides_ha
+        output.provides_ha
+      else
+        false
+      end
+    end
+
+    if ha_outputs.size > 1 # Can only have 1 critical path through
+      plugins = ha_outputs.map{|f|f.class.config_name}.join(', ')
+      raise LogStash::ConfigurationError,
+        "Configuration specifies more than one Highly Available output which is unsupported. " +
+        "Please choose _one_ of these: #{plugins}"
+
+    elsif ha_outputs.size == 0 and ha_inputs.size > 0 # Don't have an HA path but do have the need for one
+      plugins = ha_inputs.map{|f|f.class.config_name}.join(', ')
+      raise LogStash::ConfigurationError,
+        "Configuration specifies that you need Highly Available outputs for some of your " +
+        "inputs, but there are no HA outputs set. Please set provides_ha on an output, or " +
+        "remove needs_ha from these plugins: #{plugins}"
+
+    elsif ha_outputs.size == 1 and ha_inputs.size == 0
+      plugin = ha_outputs[0].class.config_name
+      @logger.warn(
+        "You have configured a Highly Available output (#{plugin}), but there are no HA " +
+        "inputs set (so you may still loose messages). If you have inputs that can't loose " +
+        "messages, please set needs_ha => true on them."
+      );
+
+    else
+      # Either
+      # 1. We have no HA setup (inputs or outputs)
+      # 2. We have HA in one place, and 1 to many needs for it
+      # ...and both are fine
+    end
+  end
+
   def configure(setting, value)
     if setting == "filter-workers"
       # Abort if we have any filters that aren't threadsafe
diff --git a/spec/event.rb b/spec/event.rb
index 17a283da038..8ae54f3d44b 100644
--- a/spec/event.rb
+++ b/spec/event.rb
@@ -247,4 +247,47 @@
       end
     end
   end
+
+  context LogStash::EventBundle::HA do
+    it "should acknowledge only when done" do
+      bundle_closed = false
+      bundle = LogStash::EventBundle::HA.new
+
+      20.times do
+        event = LogStash::Event.new
+        bundle.add(event)
+        event.trigger "filter_processed"
+      end
+
+      bundle_closed = true
+      bundle.close(Proc.new do
+        insist { bundle_closed } == true
+      end)
+    end
+    it "should be able to acknowledge after garbage collect" do
+      passed = false
+      bundle = LogStash::EventBundle::HA.new
+
+      event = LogStash::Event.new
+      bundle.add(event)
+      bundle.close(Proc.new do
+        passed = true
+      end)
+      bundle = nil
+      GC.start
+
+      event.trigger "filter_processed"
+      insist { passed } == true
+    end
+  end
+  context LogStash::EventBundle do
+    it "should acknowledge when closed" do
+      passed = false
+      bundle = LogStash::EventBundle.new
+      bundle.close(Proc.new do
+        passed = true
+      end)
+      insist { passed } == true
+    end
+  end
 end
diff --git a/spec/inputs/lumberjack.rb b/spec/inputs/lumberjack.rb
new file mode 100644
index 00000000000..53c82113173
--- /dev/null
+++ b/spec/inputs/lumberjack.rb
@@ -0,0 +1,160 @@
+# encoding: utf-8
+require "test_utils"
+require "tempfile"
+
+require "logstash/inputs/lumberjack"
+
+# Mocked Lumberjack::Connection
+module Lumberjack
+  class Connection
+    @@objects = []
+    def initialize(_)
+      @ack_queue = SizedQueue.new 1
+      @@objects.push self
+    end
+
+    def run(&block)
+      block.call({"line" => "fubar"}, nil)
+      block.call({"line" => "snafu"}, nil)
+      block.call({"line" => "hello world"}) do
+        @ack_queue.push true
+      end
+    end
+
+    def acked?
+      return @ack_queue.pop
+    end
+
+    def self.acked?
+      ret = @@objects.all? do |obj| obj.acked? end
+      @@objects.clear
+      return ret
+    end
+  end
+end
+
+describe LogStash::Inputs::Lumberjack do
+  extend LogStash::RSpec
+
+  describe "(non High Availability)" do
+    it "should acknowledge" do
+      cert = Tempfile.new "logstash-spec-input-lumberjack-cert"
+      key = Tempfile.new "logstash-spec-input-lumberjack-key"
+
+      # Mock lumberjack server so it doesn't connect to the network
+      mock_lumberjack = double()
+      expect(mock_lumberjack).to receive(:run) do |&block|
+        block.call nil
+      end
+
+      # setup input
+      input = LogStash::Inputs::Lumberjack.new "port" => 8000, "ssl_certificate" => cert.path, "ssl_key" => key.path
+      input.instance_variable_set :@lumberjack, mock_lumberjack
+
+      queue = SizedQueue.new 10
+      input_thread = Thread.new do input.run(queue) end
+
+      # check the acknowledged events got through
+      insist { queue.pop["message"] } == "fubar"
+      insist { queue.pop["message"] } == "snafu"
+      insist { queue.pop["message"] } == "hello world"
+
+      insist { Lumberjack::Connection.acked? } == true
+      input_thread.exit
+    end
+    it "should handle multiple connections" do
+      cert = Tempfile.new "logstash-spec-input-lumberjack-cert"
+      key = Tempfile.new "logstash-spec-input-lumberjack-key"
+
+      # Mock lumberjack server so it doesn't connect to the network
+      mock_lumberjack = double()
+      expect(mock_lumberjack).to receive(:run) do |&block|
+        3.times do block.call nil end
+      end
+
+      # setup input
+      input = LogStash::Inputs::Lumberjack.new "port" => 8000, "ssl_certificate" => cert.path, "ssl_key" => key.path
+      input.instance_variable_set :@lumberjack, mock_lumberjack
+
+      queue = SizedQueue.new(10)
+      input_thread = Thread.new do input.run(queue) end
+
+      # check we got nine events (3 connections, 3 messages each)
+      9.times do queue.pop end
+      insist { queue.length } == 0
+
+      insist { Lumberjack::Connection.acked? } == true
+      input_thread.exit
+    end
+  end
+
+  describe "(High Availability)" do
+    it "should acknowledge" do
+      cert = Tempfile.new "logstash-spec-input-lumberjack-cert"
+      key = Tempfile.new "logstash-spec-input-lumberjack-key"
+
+      # Mock lumberjack server so it doesn't connect to the network
+      mock_lumberjack = double()
+      expect(mock_lumberjack).to receive(:run) do |&block|
+        block.call nil
+      end
+
+      # setup input
+      input = LogStash::Inputs::Lumberjack.new "port" => 8000,
+        "ssl_certificate" => cert.path,
+        "ssl_key" => key.path,
+        "needs_ha" => true
+      input.instance_variable_set :@lumberjack, mock_lumberjack
+
+      queue = SizedQueue.new(10)
+      input_thread = Thread.new do input.run(queue) end
+
+      # check we got our events
+      event = queue.pop
+      event.trigger "filter_processed"
+      insist { event["message"] } == "fubar"
+      event = queue.pop
+      event.trigger "filter_processed"
+      insist { event["message"] } == "snafu"
+      event = queue.pop
+      event.trigger "filter_processed"
+      insist { event["message"] } == "hello world"
+
+      # input_thread may or may not have a bit more left to do now,
+      # but we can't join it since it's an infinite loop.
+      insist { Lumberjack::Connection.acked? } == true
+      input_thread.exit
+    end
+    it "should handle multiple connections" do
+      cert = Tempfile.new "logstash-spec-input-lumberjack-cert"
+      key = Tempfile.new "logstash-spec-input-lumberjack-key"
+
+      # Mock lumberjack server so it doesn't connect to the network
+      mock_lumberjack = double()
+      expect(mock_lumberjack).to receive(:run) do |&block|
+        3.times do block.call nil end
+      end
+
+      # setup input
+      input = LogStash::Inputs::Lumberjack.new "port" => 8000,
+        "ssl_certificate" => cert.path,
+        "ssl_key" => key.path,
+        "needs_ha" => true
+      input.instance_variable_set :@lumberjack, mock_lumberjack
+
+      queue = SizedQueue.new(10)
+      input_thread = Thread.new do input.run(queue) end
+
+      # wait then check and acknowledge the events.
+      9.times do
+        queue.pop.trigger "filter_processed"
+      end
+      insist { queue.length } == 0
+
+      # input_thread may or may not have a bit more left to do now,
+      # but we can't join it since it's an infinite loop.
+      insist { Lumberjack::Connection.acked? } == true
+      input_thread.exit
+    end
+  end
+end
