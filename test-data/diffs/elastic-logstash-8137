diff --git a/logstash-core/src/main/java/org/logstash/Accessors.java b/logstash-core/src/main/java/org/logstash/Accessors.java
index fb4826305cc..1d7ad5419a7 100644
--- a/logstash-core/src/main/java/org/logstash/Accessors.java
+++ b/logstash-core/src/main/java/org/logstash/Accessors.java
@@ -1,7 +1,5 @@
 package org.logstash;
 
-import java.util.Map;
-
 public final class Accessors {
 
     private Accessors() {
@@ -102,7 +100,7 @@ private static Object findCreateTarget(final ConvertedMap data, final FieldRefer
     }
 
     private static Object setChild(final Object target, final String key, final Object value) {
-        if (target instanceof Map) {
+        if (target instanceof ConvertedMap) {
             ((ConvertedMap) target).putInterned(key, value);
             return value;
         } else {
diff --git a/logstash-core/src/main/java/org/logstash/Cloner.java b/logstash-core/src/main/java/org/logstash/Cloner.java
index 25c1f1b8102..eba97b927b0 100644
--- a/logstash-core/src/main/java/org/logstash/Cloner.java
+++ b/logstash-core/src/main/java/org/logstash/Cloner.java
@@ -1,6 +1,13 @@
 package org.logstash;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
 
 public final class Cloner {
 
@@ -24,8 +31,6 @@ private static <E> List<E> deepList(final List<E> list) {
             clone = new LinkedList<>();
         } else if (list instanceof ArrayList<?>) {
             clone = new ArrayList<>();
-        } else if (list instanceof ConvertedList) {
-            clone = new ArrayList<>();
         } else {
             throw new ClassCastException("unexpected List type " + list.getClass());
         }
diff --git a/logstash-core/src/main/java/org/logstash/ConvertedMap.java b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
index 47f2ef37c24..822365b82d7 100644
--- a/logstash-core/src/main/java/org/logstash/ConvertedMap.java
+++ b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
@@ -42,9 +42,9 @@ public void visit(final ThreadContext context, final RubyHash self,
         super(size);
     }
 
-    public static ConvertedMap newFromMap(Map<Serializable, Object> o) {
+    public static ConvertedMap newFromMap(Map<? extends Serializable, Object> o) {
         ConvertedMap cm = new ConvertedMap(o.size());
-        for (final Map.Entry<Serializable, Object> entry : o.entrySet()) {
+        for (final Map.Entry<? extends Serializable, Object> entry : o.entrySet()) {
             final Serializable found = entry.getKey();
             if (found instanceof String) {
                 cm.put((String) found, Valuefier.convert(entry.getValue()));
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 51c6631996c..b7bedf08d9f 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -2,7 +2,9 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import java.io.IOException;
+import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
@@ -56,7 +58,7 @@ public Event()
      * @param data Map that is assumed to have either {@link String} or {@link RubyString}
      * keys and may contain Java and Ruby objects.
      */
-    public Event(Map data) {
+    public Event(final Map<? extends Serializable, Object> data) {
         this(ConvertedMap.newFromMap(data));
     }
 
@@ -72,7 +74,8 @@ public Event(ConvertedMap data) {
         }
 
         if (this.data.containsKey(METADATA)) {
-            this.metadata = ConvertedMap.newFromMap((Map) this.data.remove(METADATA));
+            this.metadata =
+                ConvertedMap.newFromMap((Map<String, Object>) this.data.remove(METADATA));
         } else {
             this.metadata = new ConvertedMap(10);
         }
@@ -150,7 +153,7 @@ public void setField(final String reference, final Object value) {
     public void setField(final FieldReference field, final Object value) {
         switch (field.type()) {
             case FieldReference.META_PARENT:
-                this.metadata = ConvertedMap.newFromMap((Map) value);
+                this.metadata = ConvertedMap.newFromMap((Map<String, Object>) value);
                 break;
             case FieldReference.META_CHILD:
                 Accessors.set(metadata, field, value);
@@ -209,15 +212,13 @@ public static Event[] fromJson(String json)
         Object o = JSON_MAPPER.readValue(json, Object.class);
         // we currently only support Map or Array json objects
         if (o instanceof Map) {
-            result = new Event[]{ new Event((Map)o) };
+            result = new Event[]{ new Event((Map<String, Object>)o) };
         } else if (o instanceof List) {
-            result = new Event[((List) o).size()];
+            final Collection<Map<String, Object>> list = (Collection<Map<String, Object>>) o; 
+            result = new Event[list.size()];
             int i = 0;
-            for (Object e : (List)o) {
-                if (!(e instanceof Map)) {
-                    throw new IOException("incompatible inner json array object type=" + e.getClass().getName() + " , only hash map is supported");
-                }
-                result[i++] = new Event((Map)e);
+            for (final Map<String, Object> e : list) {
+                result[i++] = new Event(e);
             }
         } else {
             throw new IOException("incompatible json object type=" + o.getClass().getName() + " , only hash map or arrays are supported");
@@ -226,13 +227,13 @@ public static Event[] fromJson(String json)
         return result;
     }
 
-    public Map toMap() {
+    public Map<String, Object> toMap() {
         return Cloner.deep(this.data);
     }
 
     public Event overwrite(Event e) {
-        this.data = e.getData();
-        this.cancelled = e.isCancelled();
+        this.data = e.data;
+        this.cancelled = e.cancelled;
         try {
             this.timestamp = e.getTimestamp();
         } catch (IOException exception) {
@@ -262,7 +263,7 @@ public String sprintf(String s) throws IOException {
 
     @Override
     public Event clone() {
-        return new Event(Cloner.<Map>deep(this.data));
+        return new Event(Cloner.<Map<String, Object>>deep(this.data));
     }
 
     public String toString() {
diff --git a/logstash-core/src/main/java/org/logstash/Javafier.java b/logstash-core/src/main/java/org/logstash/Javafier.java
index cdc1bb0cd60..b61423a583b 100644
--- a/logstash-core/src/main/java/org/logstash/Javafier.java
+++ b/logstash-core/src/main/java/org/logstash/Javafier.java
@@ -58,7 +58,7 @@ private static Object fallback(final Object o) {
         try {
             return BiValues.newBiValue(o).javaValue();
         } catch (IllegalArgumentException e) {
-            Class cls = o.getClass();
+            final Class<?> cls = o.getClass();
             throw new IllegalArgumentException(String.format(ERR_TEMPLATE, cls.getName(), cls.getSimpleName()));
         }
     }
diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index 78ca3cef169..a7e0f01274c 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -122,13 +122,15 @@ RubyUtil.RUBY, new Timestamp((DateTime) input)
             )
         );
         converters.put(RubyHash.class, input -> ConvertedMap.newFromRubyHash((RubyHash) input));
-        converters.put(Map.class, input -> ConvertedMap.newFromMap((Map) input));
+        converters.put(Map.class, input -> ConvertedMap.newFromMap((Map<String, Object>) input));
         converters.put(List.class, input -> ConvertedList.newFromList((List) input));
         converters.put(ArrayJavaProxy.class, JAVAPROXY_CONVERTER);
         converters.put(ConcreteJavaProxy.class, JAVAPROXY_CONVERTER);
         converters.put(
             MapJavaProxy.class,
-            input -> ConvertedMap.newFromMap((Map) ((MapJavaProxy) input).getObject())
+            input -> ConvertedMap.newFromMap(
+                (Map<String, Object>) ((MapJavaProxy) input).getObject()
+            )
         );
         converters.put(
             RubyArray.class, input -> ConvertedList.newFromRubyArray((RubyArray) input)
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValue.java
index 1e1a764ebcd..55e68952573 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValue.java
@@ -88,7 +88,7 @@ public String toString() {
         return String.valueOf(javaValue);
     }
 
-    protected static Object newProxy(BiValue instance) {
+    protected static Object newProxy(BiValue<?, ?> instance) {
         return new SerializationProxy(instance);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
index 0808f12a1ab..ad8dd0d1e6c 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
@@ -159,12 +159,12 @@ private void innerWriteEntry(DLQEntry entry) throws IOException {
      * @param event Logstash Event
      * @return boolean indicating whether the event is eligible to be added to the DLQ
      */
-    private boolean alreadyProcessed(final Event event) {
+    private static boolean alreadyProcessed(final Event event) {
         return event.getMetadata() != null && event.getMetadata().containsKey(DEAD_LETTER_QUEUE_METADATA_KEY);
     }
 
     @Override
-    public synchronized void close() throws IOException {
+    public synchronized void close() {
         if (currentWriter != null) {
             try {
                 currentWriter.close();
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/algorithms/GraphDiff.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/algorithms/GraphDiff.java
index 459caa90955..4651280b9b2 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/algorithms/GraphDiff.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/algorithms/GraphDiff.java
@@ -1,13 +1,13 @@
 package org.logstash.config.ir.graph.algorithms;
 
-import org.logstash.config.ir.graph.Edge;
-import org.logstash.config.ir.graph.Graph;
-import org.logstash.config.ir.graph.Vertex;
-
 import java.util.Collection;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import org.logstash.config.ir.SourceComponent;
+import org.logstash.config.ir.graph.Edge;
+import org.logstash.config.ir.graph.Graph;
+import org.logstash.config.ir.graph.Vertex;
 
 /**
  * Created by andrewvc on 1/5/17.
@@ -86,14 +86,15 @@ public String toString() {
             return output.toString();
         }
 
-        private static String detailedDiffFor(String name, Collection removed, Collection added) {
-            return (name + " GraphDiff: " + "\n") +
-                    "--------------------------\n" +
-                    Stream.concat(removed.stream().map(c -> "-" + c.toString()),
-                            added.stream().map(c -> "+" + c.toString())).
-                            map(Object::toString).
-                            collect(Collectors.joining("\n")) +
-                    "\n--------------------------";
+        private static String detailedDiffFor(final String name,
+            final Collection<? extends SourceComponent> removed,
+            final Collection<? extends SourceComponent> added) {
+            return name + " GraphDiff: \n--------------------------\n" +
+                Stream.concat(
+                    removed.stream().map(c -> '-' + c.toString()),
+                    added.stream().map(c -> '+' + c.toString())
+                ).map(Object::toString).collect(Collectors.joining("\n")) +
+                "\n--------------------------";
         }
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index f4288bb4e68..174f88defbe 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -219,8 +219,8 @@ public IRubyObject ruby_to_hash(ThreadContext context) {
 
         @JRubyMethod(name = "to_hash_with_metadata")
         public IRubyObject ruby_to_hash_with_metadata(ThreadContext context) {
-            Map data = this.event.toMap();
-            Map metadata = this.event.getMetadata();
+            Map<String, Object> data = this.event.toMap();
+            Map<String, Object> metadata = this.event.getMetadata();
 
             if (!metadata.isEmpty()) {
                 data.put(Event.METADATA, metadata);
@@ -323,7 +323,7 @@ private void initializeFallback(final ThreadContext context, final IRubyObject d
                 this.event = new Event();
             } else if (data instanceof MapJavaProxy) {
                 this.event = new Event(ConvertedMap.newFromMap(
-                    (Map)((MapJavaProxy)data).getObject())
+                    (Map<String, Object>)((MapJavaProxy)data).getObject())
                 );
             } else {
                 throw context.runtime.newTypeError("wrong argument type " + data.getMetaClass() + " (expected Hash)");
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
index 2794aced142..d51c015dc12 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
@@ -21,6 +21,7 @@ public interface Metric<T> {
      * @return This metric value
      * @deprecated
      */
+    @Deprecated
     default T get() {
         return getValue();
     }
@@ -45,6 +46,7 @@ default T get() {
      * @return A description of this Metric that can be used for logging.
      * @deprecated
      */
+    @Deprecated
     default String inspect() {
         return toString();
     }
@@ -55,6 +57,7 @@ default String inspect() {
      * @return The {@link String} version of the {@link MetricType}
      * @deprecated
      */
+    @Deprecated
     default String type() {
         return getType().asString();
     }
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/gauge/LazyDelegatingGauge.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/gauge/LazyDelegatingGauge.java
index 390e07385a4..b5525dd40f3 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/gauge/LazyDelegatingGauge.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/gauge/LazyDelegatingGauge.java
@@ -91,7 +91,7 @@ private synchronized void wakeMetric(Object value) {
             } else if (value instanceof RubyHash) {
                 lazyMetric = new RubyHashGauge(key, (RubyHash) value);
             } else if (value instanceof RubyTimestamp) {
-                lazyMetric = new RubyTimeStampGauge(key, ((RubyTimestamp) value));
+                lazyMetric = new RubyTimeStampGauge(key, (RubyTimestamp) value);
             } else {
                 LOGGER.warn("A gauge metric of an unknown type ({}) has been create for key: {}. This may result in invalid serialization.  It is recommended to " +
                         "log an issue to the responsible developer/development team.", value.getClass().getCanonicalName(), key);
diff --git a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/DeadLetterQueueWitness.java b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/DeadLetterQueueWitness.java
index a54e9c4ef58..cb458b2de99 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/DeadLetterQueueWitness.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/DeadLetterQueueWitness.java
@@ -94,7 +94,7 @@ static void innerSerialize(DeadLetterQueueWitness witness, JsonGenerator gen) th
     /**
      * The snitch for the dead letter queue. Used to retrieve discrete metric values.
      */
-    public class Snitch {
+    public static class Snitch {
         private final DeadLetterQueueWitness witness;
 
         private Snitch(DeadLetterQueueWitness witness) {
diff --git a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/PluginsWitness.java b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/PluginsWitness.java
index 35e3427be12..95def6ea1c9 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/PluginsWitness.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/PluginsWitness.java
@@ -89,8 +89,8 @@ public void forgetAll() {
      * @param id     the id of the plugin
      * @return existing or new {@link PluginWitness}
      */
-    private PluginWitness getPlugin(Map<String, PluginWitness> plugin, String id) {
-        return plugin.computeIfAbsent(id, k -> new PluginWitness(k));
+    private static PluginWitness getPlugin(Map<String, PluginWitness> plugin, String id) {
+        return plugin.computeIfAbsent(id, PluginWitness::new);
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/QueueWitness.java b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/QueueWitness.java
index 3b6d9ff225b..0dba5ec477f 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/QueueWitness.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/QueueWitness.java
@@ -84,13 +84,13 @@ public void type(String type) {
 
     @Override
     public void genJson(JsonGenerator gen, SerializerProvider provider) throws IOException {
-        SERIALIZER.innerSerialize(this, gen);
+        Serializer.innerSerialize(this, gen);
     }
 
     /**
      * Inner witness for the queue capacity
      */
-    public class CapacityWitness {
+    public static class CapacityWitness {
 
         private final NumberGauge queueSizeInBytes;
         private final NumberGauge pageCapacityInBytes;
@@ -156,7 +156,7 @@ public Snitch snitch() {
         /**
          * Snitch for queue capacity. Provides discrete metric values.
          */
-        public class Snitch {
+        public static class Snitch {
 
             private final CapacityWitness witness;
 
@@ -206,7 +206,7 @@ public Number maxUnreadEvents() {
     /**
      * Inner witness for the queue data
      */
-    public class DataWitness {
+    public static class DataWitness {
 
         private final TextGauge path;
         private final NumberGauge freeSpaceInBytes;
@@ -261,7 +261,7 @@ public Snitch snitch() {
         /**
          * Snitch for queue capacity. Provides discrete metric values.
          */
-        public class Snitch {
+        public static class Snitch {
 
             private final DataWitness witness;
 
@@ -329,7 +329,7 @@ public void serialize(QueueWitness witness, JsonGenerator gen, SerializerProvide
             gen.writeEndObject();
         }
 
-        void innerSerialize(QueueWitness witness, JsonGenerator gen) throws IOException {
+        static void innerSerialize(QueueWitness witness, JsonGenerator gen) throws IOException {
             gen.writeObjectFieldStart(KEY);
             MetricSerializer<Metric<Number>> numberSerializer = MetricSerializer.Get.numberSerializer(gen);
             MetricSerializer<Metric<String>> stringSerializer = MetricSerializer.Get.stringSerializer(gen);
diff --git a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
index fdcaacd9ee5..6bded78736a 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
@@ -116,7 +116,7 @@ public void lastFailureTimestamp(JrubyTimestampExtLibrary.RubyTimestamp timestam
 
     @Override
     public void genJson(JsonGenerator gen, SerializerProvider provider) throws IOException {
-        SERIALIZER.innerSerialize(this, gen, provider);
+        Serializer.innerSerialize(this, gen, provider);
     }
 
     /**
@@ -149,7 +149,8 @@ public void serialize(ReloadWitness witness, JsonGenerator gen, SerializerProvid
             gen.writeEndObject();
         }
 
-        void innerSerialize(ReloadWitness witness, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        static void innerSerialize(ReloadWitness witness, JsonGenerator gen,
+            SerializerProvider provider) throws IOException {
             gen.writeObjectFieldStart(ReloadWitness.KEY);
             witness.lastError.genJson(gen, provider);
             MetricSerializer<Metric<Long>> longSerializer = MetricSerializer.Get.longSerializer(gen);
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index 3cb54719f4c..2e156edc164 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -275,17 +275,17 @@ public void testFromJsonWithInvalidJsonString() throws Exception {
         Event.fromJson("gabeutch");
     }
 
-    @Test(expected=IOException.class)
+    @Test(expected=ClassCastException.class)
     public void testFromJsonWithInvalidJsonArray1() throws Exception {
         Event.fromJson("[1,2]");
     }
 
-    @Test(expected=IOException.class)
+    @Test(expected=ClassCastException.class)
     public void testFromJsonWithInvalidJsonArray2() throws Exception {
         Event.fromJson("[\"gabeutch\"]");
     }
 
-    @Test(expected=IOException.class)
+    @Test(expected=ClassCastException.class)
     public void testFromJsonWithPartialInvalidJsonArray() throws Exception {
         Event.fromJson("[{\"foo\":\"bar\"}, 1]");
     }
