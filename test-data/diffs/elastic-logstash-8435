diff --git a/lib/bootstrap/patches/remote_fetcher.rb b/lib/bootstrap/patches/remote_fetcher.rb
new file mode 100644
index 00000000000..d780d15c40f
--- /dev/null
+++ b/lib/bootstrap/patches/remote_fetcher.rb
@@ -0,0 +1,23 @@
+require 'rubygems/remote_fetcher' 
+
+class Gem::RemoteFetcher
+  def api_endpoint(uri)
+    host = uri.host
+
+    begin
+      res = @dns.getresource "_rubygems._tcp.#{host}",
+                             Resolv::DNS::Resource::IN::SRV
+    rescue Resolv::ResolvError, SocketError => e # patch adds SocketError to list of possible exceptions
+      verbose "Getting SRV record failed: #{e}"
+      uri
+    else
+      target = res.target.to_s.strip
+
+      if /\.#{Regexp.quote(host)}\z/ =~ target
+        return URI.parse "#{uri.scheme}://#{target}#{uri.path}"
+      end
+
+      uri
+    end
+  end
+end
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index a521f2bac6a..47c4376d3f9 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "rubygems/package"
+require_relative "../bootstrap/patches/remote_fetcher"
 
 module LogStash::PluginManager
 
diff --git a/lib/pluginmanager/utils/http_client.rb b/lib/pluginmanager/utils/http_client.rb
index c84bb7caa70..a8cb91cafdc 100644
--- a/lib/pluginmanager/utils/http_client.rb
+++ b/lib/pluginmanager/utils/http_client.rb
@@ -6,11 +6,12 @@ class RedirectionLimit < RuntimeError; end
     HTTPS_SCHEME = "https"
     REDIRECTION_LIMIT = 5
 
-    # Proxies should be handled by the library
-    # https://ruby-doc.org/stdlib-2.3.1/libdoc/net/http/rdoc/Net/HTTP.html#class-Net::HTTP-label-Proxies
     def self.start(uri)
       uri = URI(uri)
-      Net::HTTP.start(uri.host, uri.port, http_options(uri)) { |http| yield http }
+      proxy_url = ENV["https_proxy"] || ENV["HTTPS_PROXY"] || ""
+      proxy_uri = URI(proxy_url)
+
+      Net::HTTP.start(uri.host, uri.port, proxy_uri.host, proxy_uri.port, proxy_uri.user, proxy_uri.password, http_options(uri)) { |http| yield http }
     end
 
     def self.http_options(uri)
diff --git a/spec/unit/plugin_manager/utils/http_client_spec.rb b/spec/unit/plugin_manager/utils/http_client_spec.rb
index 7c922486c97..e0d6510bd32 100644
--- a/spec/unit/plugin_manager/utils/http_client_spec.rb
+++ b/spec/unit/plugin_manager/utils/http_client_spec.rb
@@ -10,7 +10,7 @@
       let(:uri) { URI.parse("https://localhost:8888") }
 
       it "requires ssl" do
-        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, hash_including(:use_ssl => true))
+        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, anything, anything, anything, anything, hash_including(:use_ssl => true))
         described_class.start(uri)
       end
     end
@@ -19,7 +19,35 @@
       let(:uri) { URI.parse("http://localhost:8888") }
 
       it "doesn't requires ssl" do
-        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, hash_including(:use_ssl => false))
+        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, anything, anything, anything, anything, hash_including(:use_ssl => false))
+        described_class.start(uri)
+      end
+    end
+
+    context "with a proxy" do
+      let(:uri) { URI.parse("http://localhost:8888") }
+      let(:proxy) { "http://user:pass@host.local:8080" }
+
+      before(:each) do
+        allow(ENV).to receive(:[]).with("https_proxy").and_return(proxy)
+      end
+
+      it "sets proxy arguments" do
+        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, "host.local", 8080, "user", "pass", hash_including(:use_ssl => false))
+        described_class.start(uri)
+      end
+    end
+
+    context "without a proxy" do
+      let(:uri) { URI.parse("http://localhost:8888") }
+
+      before(:each) do
+        allow(ENV).to receive(:[]).with("https_proxy").and_return(nil)
+        allow(ENV).to receive(:[]).with("HTTPS_PROXY").and_return(nil)
+      end
+
+      it "doesn't set proxy arguments" do
+        expect(Net::HTTP).to receive(:start).with(uri.host, uri.port, nil, nil, nil, nil, hash_including(:use_ssl => false))
         described_class.start(uri)
       end
     end
