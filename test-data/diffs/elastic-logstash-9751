diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index e80f57fb45d..13730558261 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -125,10 +125,6 @@ def flush(options)
   end
 end
 
-class JavaTestPipeline < LogStash::JavaPipeline
-  attr_reader :outputs, :settings
-end
-
 describe LogStash::JavaPipeline do
   let(:worker_thread_count)     { 5 }
   let(:safe_thread_count)       { 1 }
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index 20c26c007c8..12dd306e7e5 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -118,10 +118,6 @@ def flush(options)
   end
 end
 
-class TestPipeline < LogStash::Pipeline
-  attr_reader :outputs, :settings
-end
-
 describe LogStash::Pipeline do
   let(:worker_thread_count)     { 5 }
   let(:safe_thread_count)       { 1 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
index 2061f670eed..2e6c5516c11 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
@@ -25,17 +25,17 @@ public final class OutputDelegatorExt extends AbstractOutputDelegatorExt {
 
     private OutputStrategyExt.AbstractOutputStrategyExt strategy;
 
-    @JRubyMethod(name = "initialize", optional = 5)
+    @JRubyMethod(required = 5)
     public OutputDelegatorExt initialize(final ThreadContext context, final IRubyObject[] arguments) {
         return initialize(
-            context, (RubyHash) arguments[4], arguments[0], (AbstractMetricExt) arguments[1],
+            context, (RubyHash) arguments[4], (RubyClass) arguments[0], (AbstractMetricExt) arguments[1],
             (ExecutionContextExt) arguments[2],
             (OutputStrategyExt.OutputStrategyRegistryExt) arguments[3]
         );
     }
 
     public OutputDelegatorExt initialize(final ThreadContext context, final RubyHash args,
-        final IRubyObject outputClass, final AbstractMetricExt metric,
+        final RubyClass outputClass, final AbstractMetricExt metric,
         final ExecutionContextExt executionContext,
         final OutputStrategyExt.OutputStrategyRegistryExt strategyRegistry) {
         this.outputClass = outputClass;
@@ -58,7 +58,7 @@ public OutputDelegatorExt(final Ruby runtime, final RubyClass metaClass) {
 
     @JRubyMethod
     @VisibleForTesting
-    public IRubyObject strategy() {
+    public OutputStrategyExt.AbstractOutputStrategyExt strategy() {
         return strategy;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
index 9df9db38b1b..b5e6d83936a 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
@@ -11,6 +11,7 @@
 import org.jruby.RubyObject;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
+import org.jruby.internal.runtime.methods.DynamicMethod;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
@@ -51,12 +52,12 @@ public IRubyObject init(final ThreadContext context) {
         }
 
         @JRubyMethod
-        public IRubyObject classes(final ThreadContext context) {
+        public IRubyObject classes() {
             return map.rb_values();
         }
 
         @JRubyMethod
-        public IRubyObject types(final ThreadContext context) {
+        public IRubyObject types() {
             return map.keys();
         }
 
@@ -87,6 +88,10 @@ public RubyClass classFor(final ThreadContext context, final IRubyObject type) {
     @JRubyClass(name = "AbstractStrategy")
     public abstract static class AbstractOutputStrategyExt extends RubyObject {
 
+        private DynamicMethod outputMethod;
+
+        private RubyClass outputClass;
+
         public AbstractOutputStrategyExt(final Ruby runtime, final RubyClass metaClass) {
             super(runtime, metaClass);
         }
@@ -109,6 +114,16 @@ public final IRubyObject multiReceive(final ThreadContext context, final IRubyOb
             return output(context, events);
         }
 
+        protected final void initOutputCallsite(final RubyClass outputClass) {
+            outputMethod = outputClass.searchMethod("multi_receive");
+            this.outputClass = outputClass;
+        }
+
+        protected final void invokeOutput(final ThreadContext context, final IRubyObject batch,
+            final IRubyObject pluginInstance) {
+            outputMethod.call(context, pluginInstance, outputClass, "multi_receive", batch);
+        }
+
         protected abstract IRubyObject output(ThreadContext context, IRubyObject events)
             throws InterruptedException;
 
@@ -130,8 +145,8 @@ public LegacyOutputStrategyExt(final Ruby runtime, final RubyClass metaClass) {
             super(runtime, metaClass);
         }
 
-        @JRubyMethod(name = "initialize", optional = 4)
-        public IRubyObject init(final ThreadContext context, final IRubyObject[] args) {
+        @JRubyMethod(required = 4)
+        public IRubyObject initialize(final ThreadContext context, final IRubyObject[] args) {
             final RubyHash pluginArgs = (RubyHash) args[3];
             workerCount = pluginArgs.op_aref(context, context.runtime.newString("workers"));
             if (workerCount.isNil()) {
@@ -141,8 +156,10 @@ public IRubyObject init(final ThreadContext context, final IRubyObject[] args) {
             workerQueue = new ArrayBlockingQueue<>(count);
             workers = context.runtime.newArray(count);
             for (int i = 0; i < count; ++i) {
+                final RubyClass outputClass = (RubyClass) args[0];
                 // Calling "new" here manually to allow mocking the ctor in RSpec Tests
-                final IRubyObject output = args[0].callMethod(context, "new", pluginArgs);
+                final IRubyObject output = outputClass.callMethod(context, "new", pluginArgs);
+                initOutputCallsite(outputClass);
                 output.callMethod(context, "metric=", args[1]);
                 output.callMethod(context, "execution_context=", args[2]);
                 workers.append(output);
@@ -152,12 +169,12 @@ public IRubyObject init(final ThreadContext context, final IRubyObject[] args) {
         }
 
         @JRubyMethod(name = "worker_count")
-        public IRubyObject workerCount(final ThreadContext context) {
+        public IRubyObject workerCount() {
             return workerCount;
         }
 
         @JRubyMethod
-        public IRubyObject workers(final ThreadContext context) {
+        public IRubyObject workers() {
             return workers;
         }
 
@@ -165,7 +182,8 @@ public IRubyObject workers(final ThreadContext context) {
         protected IRubyObject output(final ThreadContext context, final IRubyObject events) throws InterruptedException {
             final IRubyObject worker = workerQueue.take();
             try {
-                return worker.callMethod(context, "multi_receive", events);
+                invokeOutput(context, events, worker);
+                return context.nil;
             } finally {
                 workerQueue.put(worker);
             }
@@ -196,10 +214,12 @@ protected SimpleAbstractOutputStrategyExt(final Ruby runtime, final RubyClass me
             super(runtime, metaClass);
         }
 
-        @JRubyMethod(name = "initialize", optional = 4)
-        public IRubyObject init(final ThreadContext context, final IRubyObject[] args) {
+        @JRubyMethod(required = 4)
+        public IRubyObject initialize(final ThreadContext context, final IRubyObject[] args) {
+            final RubyClass outputClass = (RubyClass) args[0];
             // Calling "new" here manually to allow mocking the ctor in RSpec Tests
             output = args[0].callMethod(context, "new", args[3]);
+            initOutputCallsite(outputClass);
             output.callMethod(context, "metric=", args[1]);
             output.callMethod(context, "execution_context=", args[2]);
             return this;
@@ -216,7 +236,8 @@ protected final IRubyObject reg(final ThreadContext context) {
         }
 
         protected final IRubyObject doOutput(final ThreadContext context, final IRubyObject events) {
-            return output.callMethod(context, "multi_receive", events);
+            invokeOutput(context, events, output);
+            return context.nil;
         }
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java
index e2c2b0e614d..961f96292d1 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java
@@ -32,7 +32,7 @@ public NamespacedMetricExt(final Ruby runtime, final RubyClass metaClass) {
     }
 
     @JRubyMethod(visibility = Visibility.PRIVATE)
-    public IRubyObject initialize(final ThreadContext context, final IRubyObject metric,
+    public NamespacedMetricExt initialize(final ThreadContext context, final IRubyObject metric,
         final IRubyObject namespaceName) {
         this.metric = (MetricExt) metric;
         if (namespaceName instanceof RubyArray) {
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/FakeOutClass.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/FakeOutClass.java
index 102828a71d5..ad119783714 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/FakeOutClass.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/FakeOutClass.java
@@ -13,17 +13,19 @@
 @JRubyClass(name = "FakeOutClass")
 public class FakeOutClass extends RubyObject {
 
+    public static FakeOutClass latestInstance;
+
+    private static IRubyObject OUT_STRATEGY = RUBY.newSymbol("single");
+
     private int multiReceiveDelay = 0;
     private int multiReceiveCallCount = 0;
     private int registerCallCount = 0;
     private int closeCallCount = 0;
     private IRubyObject multiReceiveArgs;
     private IRubyObject metricArgs;
-    private IRubyObject outStrategy;
 
     FakeOutClass(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
-        outStrategy = RUBY.newSymbol("single");
     }
 
     static FakeOutClass create() {
@@ -35,45 +37,41 @@ public IRubyObject name(final ThreadContext context) {
         return RUBY.newString("example");
     }
 
-    @JRubyMethod(name = "config_name")
-    public IRubyObject configName(final ThreadContext context) {
+    @JRubyMethod(name = "config_name", meta = true)
+    public static IRubyObject configName(final ThreadContext context, final IRubyObject recv) {
         return RUBY.newString("dummy_plugin");
     }
 
     @JRubyMethod
-    public IRubyObject initialize(final ThreadContext context) {
+    public IRubyObject initialize(final ThreadContext context, final IRubyObject args) {
+        latestInstance = this;
         return this;
     }
 
-    @JRubyMethod
-    public IRubyObject concurrency(final ThreadContext context) {
-        return outStrategy;
+    @JRubyMethod(meta = true)
+    public static IRubyObject concurrency(final ThreadContext context, final IRubyObject recv) {
+        return OUT_STRATEGY;
     }
 
     @JRubyMethod
-    public IRubyObject register(final ThreadContext context) {
+    public IRubyObject register() {
         registerCallCount++;
         return this;
     }
 
-    @JRubyMethod(name = "new")
-    public IRubyObject newMethod(final ThreadContext context, IRubyObject args) {
-        return this;
-    }
-
     @JRubyMethod(name = "metric=")
-    public IRubyObject metric(final ThreadContext context, IRubyObject args) {
+    public IRubyObject metric(final IRubyObject args) {
         this.metricArgs = args;
         return this;
     }
 
     @JRubyMethod(name = "execution_context=")
-    public IRubyObject executionContext(final ThreadContext context, IRubyObject args) {
+    public IRubyObject executionContext(IRubyObject args) {
         return this;
     }
 
     @JRubyMethod(name = "multi_receive")
-    public IRubyObject multiReceive(final ThreadContext context, IRubyObject args) {
+    public IRubyObject multiReceive(final IRubyObject args) {
         multiReceiveCallCount++;
         multiReceiveArgs = args;
         if (multiReceiveDelay > 0) {
@@ -93,9 +91,10 @@ public IRubyObject close(final ThreadContext context) {
     }
 
     @JRubyMethod(name = "set_out_strategy")
-    public IRubyObject setOutStrategy(final ThreadContext context, IRubyObject outStrategy) {
-        this.outStrategy = outStrategy;
-        return this;
+    public static IRubyObject setOutStrategy(final ThreadContext context, final IRubyObject recv,
+        final IRubyObject outStrategy) {
+        OUT_STRATEGY = outStrategy;
+        return context.nil;
     }
 
     public IRubyObject getMetricArgs() {
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
index f698c167e9f..b7877e8f770 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/OutputDelegatorTest.java
@@ -1,5 +1,6 @@
 package org.logstash.config.ir.compiler;
 
+import javax.annotation.concurrent.NotThreadSafe;
 import org.assertj.core.data.Percentage;
 import org.jruby.RubyArray;
 import org.jruby.RubyClass;
@@ -8,6 +9,7 @@
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
 import org.jruby.java.proxies.ConcreteJavaProxy;
+import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -20,18 +22,18 @@
 import static org.junit.Assert.assertEquals;
 import static org.logstash.RubyUtil.EXECUTION_CONTEXT_CLASS;
 import static org.logstash.RubyUtil.NAMESPACED_METRIC_CLASS;
-import static org.logstash.RubyUtil.RUBY_OUTPUT_DELEGATOR_CLASS;
 import static org.logstash.RubyUtil.RUBY;
+import static org.logstash.RubyUtil.RUBY_OUTPUT_DELEGATOR_CLASS;
 
+@NotThreadSafe
 public class OutputDelegatorTest extends RubyEnvTestCase {
 
-    private FakeOutClass fakeOutClass;
     private NamespacedMetricExt metric;
     private ExecutionContextExt executionContext;
     private RubyHash pluginArgs;
     private RubyArray events;
     private static final int EVENT_COUNT = 7;
-    static RubyClass FAKE_OUT_CLASS;
+    public static final RubyClass FAKE_OUT_CLASS;
 
     static {
         FAKE_OUT_CLASS = RUBY.defineClass("FakeOutClass", RUBY.getObject(), FakeOutClass::new);
@@ -44,15 +46,15 @@ public void setup() {
         for (int k = 0; k < EVENT_COUNT; k++) {
             events.add(k, new Event());
         }
-        fakeOutClass = FakeOutClass.create();
+        final ThreadContext context = RUBY.getCurrentContext();
         RubyArray namespaces = RubyArray.newArray(RUBY, 1);
         namespaces.add(0, RubySymbol.newSymbol(RUBY, "output"));
         IRubyObject metricWithCollector =
                 runRubyScript("require \"logstash/instrument/collector\"\n" +
                         "metricWithCollector = LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new)");
 
-        metric = (NamespacedMetricExt) new NamespacedMetricExt(RUBY, NAMESPACED_METRIC_CLASS)
-                .initialize(RUBY.getCurrentContext(), metricWithCollector, namespaces);
+        metric = new NamespacedMetricExt(RUBY, NAMESPACED_METRIC_CLASS)
+                .initialize(context, metricWithCollector, namespaces);
         executionContext = new ExecutionContextExt(RUBY, EXECUTION_CONTEXT_CLASS);
         pluginArgs = RubyHash.newHash(RUBY);
         pluginArgs.put("id", "foo");
@@ -61,24 +63,24 @@ public void setup() {
 
     @Test
     public void plainOutputPluginInitializesCleanly() {
-        OutputDelegatorExt outputDelegator = constructOutputDelegator();
+        constructOutputDelegator();
     }
 
     @Test
     public void plainOutputPluginPushesPluginNameToMetric() {
-        OutputDelegatorExt outputDelegator = constructOutputDelegator();
+        constructOutputDelegator();
         RubyHash metricStore = getMetricStore(new String[]{"output", "foo"});
         String pluginName = getMetricStringValue(metricStore, "name");
 
-        assertEquals(fakeOutClass.configName(RUBY.getCurrentContext()).asJavaString(), pluginName);
+        assertEquals(FakeOutClass.configName(RUBY.getCurrentContext(), null).asJavaString(), pluginName);
     }
 
     @Test
     public void multiReceivePassesBatch() {
         OutputDelegatorExt outputDelegator = constructOutputDelegator();
         outputDelegator.multiReceive(events);
-        assertEquals(events, fakeOutClass.getMultiReceiveArgs());
-        assertEquals(EVENT_COUNT, ((RubyArray) fakeOutClass.getMultiReceiveArgs()).size());
+        assertEquals(events, FakeOutClass.latestInstance.getMultiReceiveArgs());
+        assertEquals(EVENT_COUNT, ((RubyArray) FakeOutClass.latestInstance.getMultiReceiveArgs()).size());
     }
 
     @Test
@@ -92,15 +94,16 @@ public void multiReceiveIncrementsEventCount() {
 
     @Test
     public void multiReceiveRecordsDurationInMillis() {
-        int delay = 100;
-        long millis = 0;
+        final int delay = 100;
+        final long millis;
+        OutputDelegatorExt outputDelegator = constructOutputDelegator();
+        final FakeOutClass instance = FakeOutClass.latestInstance;
         try {
-            fakeOutClass.setMultiReceiveDelay(delay);
-            OutputDelegatorExt outputDelegator = constructOutputDelegator();
+            instance.setMultiReceiveDelay(delay);
             outputDelegator.multiReceive(events);
             millis = getMetricLongValue("duration_in_millis");
         } finally {
-            fakeOutClass.setMultiReceiveDelay(0);
+            instance.setMultiReceiveDelay(0);
         }
 
         assertThat(millis).isCloseTo((long)delay, Percentage.withPercentage(10));
@@ -111,7 +114,7 @@ public void registersOutputPlugin() {
         OutputDelegatorExt outputDelegator = constructOutputDelegator();
         outputDelegator.register(RUBY.getCurrentContext());
 
-        assertEquals(1, fakeOutClass.getRegisterCallCount());
+        assertEquals(1, FakeOutClass.latestInstance.getRegisterCallCount());
     }
 
     @Test
@@ -119,7 +122,7 @@ public void closesOutputPlugin() {
         OutputDelegatorExt outputDelegator = constructOutputDelegator();
         outputDelegator.doClose(RUBY.getCurrentContext());
 
-        assertEquals(1, fakeOutClass.getCloseCallCount());
+        assertEquals(1, FakeOutClass.latestInstance.getCloseCallCount());
     }
 
     @Test
@@ -138,7 +141,7 @@ public void outputStrategyTests() {
         };
 
         for (StrategyPair pair : outputStrategies) {
-            fakeOutClass.setOutStrategy(RUBY.getCurrentContext(), pair.symbol);
+            FakeOutClass.setOutStrategy(RUBY.getCurrentContext(), null, pair.symbol);
             OutputDelegatorExt outputDelegator = constructOutputDelegator();
 
             // test that output strategies are properly set
@@ -150,7 +153,7 @@ public void outputStrategyTests() {
             assertThat(strategyClass).isInstanceOf(pair.klazz);
 
             // test that metrics are properly set on the instance
-            assertEquals(outputDelegator.namespacedMetric(), fakeOutClass.getMetricArgs());
+            assertEquals(outputDelegator.namespacedMetric(), FakeOutClass.latestInstance.getMetricArgs());
         }
     }
 
@@ -161,19 +164,20 @@ public void outputStrategyMethodDelegationTests() {
                 RUBY.newSymbol("single"),
                 RUBY.newSymbol("legacy")
         };
-
+        final ThreadContext context = RUBY.getCurrentContext();
         for (RubySymbol symbol : outputStrategies) {
-            fakeOutClass = FakeOutClass.create();
-            fakeOutClass.setOutStrategy(RUBY.getCurrentContext(), symbol);
+            FakeOutClass.create().initialize(context);
+            FakeOutClass.setOutStrategy(RUBY.getCurrentContext(), null, symbol);
             OutputDelegatorExt outputDelegator = constructOutputDelegator();
             outputDelegator.register(RUBY.getCurrentContext());
-            assertEquals(1, fakeOutClass.getRegisterCallCount());
+            final FakeOutClass instance = FakeOutClass.latestInstance;
+            assertEquals(1, instance.getRegisterCallCount());
 
             outputDelegator.doClose(RUBY.getCurrentContext());
-            assertEquals(1, fakeOutClass.getCloseCallCount());
+            assertEquals(1, instance.getCloseCallCount());
 
             outputDelegator.multiReceive(RUBY.newArray(0));
-            assertEquals(1, fakeOutClass.getMultiReceiveCallCount());
+            assertEquals(1, instance.getMultiReceiveCallCount());
         }
 
     }
@@ -184,14 +188,13 @@ private static IRubyObject runRubyScript(String script) {
     }
 
     private OutputDelegatorExt constructOutputDelegator() {
-        OutputDelegatorExt outputDelegator = new OutputDelegatorExt(RUBY, RUBY_OUTPUT_DELEGATOR_CLASS).initialize(RUBY.getCurrentContext(), new IRubyObject[]{
-                fakeOutClass,
-                metric,
-                executionContext,
-                OutputStrategyExt.OutputStrategyRegistryExt.instance(RUBY.getCurrentContext(), null),
-                pluginArgs
+        return new OutputDelegatorExt(RUBY, RUBY_OUTPUT_DELEGATOR_CLASS).initialize(RUBY.getCurrentContext(), new IRubyObject[]{
+            FAKE_OUT_CLASS,
+            metric,
+            executionContext,
+            OutputStrategyExt.OutputStrategyRegistryExt.instance(RUBY.getCurrentContext(), null),
+            pluginArgs
         });
-        return outputDelegator;
     }
 
     private RubyHash getMetricStore() {
