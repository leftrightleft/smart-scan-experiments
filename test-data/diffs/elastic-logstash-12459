diff --git a/docs/static/configuration.asciidoc b/docs/static/configuration.asciidoc
index bc86f24ebd2..fd4c71af878 100644
--- a/docs/static/configuration.asciidoc
+++ b/docs/static/configuration.asciidoc
@@ -278,6 +278,14 @@ Example:
   name => 'It\'s a beautiful day'
 ----------------------------------
 
+[[field-reference]]
+[float]
+==== Field Reference
+
+A Field Reference is a special <<string>> value representing the path to a field in an event, such as `@timestamp` or `[@timestamp]` to reference a top-level field, or `[client][ip]` to access a nested field.
+The <<field-references-deepdive>> provides detailed information about the structure of Field References.
+When provided as a configuration option, Field References need to be quoted and special characters must be escaped following the same rules as <<string>>.
+
 [float]
 [[comments]]
 === Comments
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index 38ef99b9d8b..c4d204025b0 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -195,6 +195,15 @@ def milestone(m = nil)
     end
 
     # Define a new configuration setting
+    #
+    # @param name [String, Symbol, Regexp]
+    # @param opts [Hash]: the options for this config parameter
+    # @option opts [Array,Symbol] :validate
+    #   When `Array`, the expanded form of the given directive MUST exist in the Array.
+    #   When `Symbol`, the named validator matching the provided `Symbol` is used.
+    # @option opts [Boolean]      :list
+    # @option opts [Object]       :default
+    # @option opts [Boolean]      :required
     def config(name, opts={})
       @config ||= Hash.new
       # TODO(sissel): verify 'name' is of type String, Symbol, or Regexp
@@ -412,6 +421,32 @@ def validator_find(key)
       return nil
     end
 
+    ##
+    # Performs deep replacement of the provided value, then performs validation and coercion.
+    #
+    # The provided validator can be nil, an Array of acceptable values, or a Symbol
+    # representing a named validator, and is the result of a configuration parameter's `:validate` option (@see DSL#config)
+    #
+    # @overload validate_value(value, validator)
+    #   Validation occurs with the named validator.
+    #   @param value [Object]
+    #   @param validator [Symbol]
+    # @overload validate_value(value, validator)
+    #   The value must exist in the provided Array.
+    #   @param value [Object]
+    #   @param validator [Array]
+    # @overload validate_value(value, validator)
+    #   The value is always considered valid
+    #   @param value [Object]
+    #   @param validator [nil]
+    #
+    # @return [Array<(true, Object)>]: when value is valid, a tuple containing true and a coerced form of the value is returned
+    # @return [Array<(false, String)>]: when value is not valid, a tuple containing false and an error string is returned.
+    #
+    # @api private
+    #
+    # WARNING: validators added here must be back-ported to the Validation Support plugin mixin so that plugins
+    #          that use them are not constrained to the version of Logstash that introduced the validator.
     def validate_value(value, validator)
       # Validator comes from the 'config' pieces of plugins.
       # They look like this
@@ -578,6 +613,15 @@ def validate_value(value, validator)
             rescue ArgumentError
               return false, "Unparseable filesize: #{value.first}. possible units (KiB, MiB, ...) e.g. '10 KiB'. doc reference: http://www.elastic.co/guide/en/logstash/current/configuration.html#bytes"
             end
+          when :field_reference # @since 7.11
+            return [false, "Expected exactly one field reference, got `#{value.inspect}`"] unless value.kind_of?(Array) && value.size <= 1
+            return [true, nil] if value.empty? || value.first.nil? || value.first.empty?
+
+            candidate = value.first
+
+            return [false, "Expected a valid field reference, got `#{candidate.inspect}`"] unless org.logstash.FieldReference.isValid(candidate)
+
+            return [true, candidate]
           else
             return false, "Unknown validator symbol #{validator}"
         end # case validator
diff --git a/logstash-core/spec/logstash/config/mixin_spec.rb b/logstash-core/spec/logstash/config/mixin_spec.rb
index 60c2611363e..7928409bb5e 100644
--- a/logstash-core/spec/logstash/config/mixin_spec.rb
+++ b/logstash-core/spec/logstash/config/mixin_spec.rb
@@ -72,6 +72,41 @@
     end
   end
 
+  context "validating :field_reference" do
+    let(:plugin_class) do
+      Class.new(LogStash::Filters::Base) do
+        config :target, :validate => :field_reference
+      end
+    end
+    let(:params) do
+      { "target" => target_param }
+    end
+
+    before(:each) do
+      allow(plugin_class).to receive(:logger).and_return(double('Logger').as_null_object)
+    end
+
+    context "when input is valid" do
+      let(:target_param) { "[@metadata][target]" }
+      it 'successfully initializes the plugin' do
+        expect(plugin_class.new(params)).to be_a_kind_of plugin_class
+      end
+      it 'coerces the value' do
+        instance = plugin_class.new(params)
+        expect(instance.target).to_not be_nil
+        expect(instance.target).to eq(target_param)
+      end
+    end
+
+    context "when input is invalid" do
+      let(:target_param) { "][Nv@l][d" }
+      it 'does not initialize the plugin' do
+        expect { plugin_class.new(params) }.to raise_exception(LogStash::ConfigurationError)
+        expect(plugin_class.logger).to have_received(:error).with(/must be a field_reference/)
+      end
+    end
+  end
+
   context "when validating :bytes successfully" do
     subject do
       local_num_bytes = num_bytes # needs to be locally scoped :(
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index 03a476dd2dd..e7b58b074e4 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -127,6 +127,15 @@ public static FieldReference from(final String reference) {
         return parseToCache(reference);
     }
 
+    public static boolean isValid(final String reference) {
+        try {
+            FieldReference.from(reference);
+            return true;
+        } catch (IllegalSyntaxException ise) {
+            return false;
+        }
+    }
+
     /**
      * Returns the type of this instance to allow for fast switch operations in
      * {@link Event#getUnconvertedField(FieldReference)} and
