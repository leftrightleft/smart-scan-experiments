diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index 4ad068e97b3..e3fa4841dff 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -9,7 +9,7 @@ class LogStash::Filters::Base < LogStash::Plugin
 
   config_name "filter"
 
-  # Note that all of the specified routing options (type,tags.exclude_tags,include_fields,exclude_fields)
+  # Note that all of the specified routing options (type,tags.exclude\_tags,include\_fields,exclude\_fields)
   # must be met in order for the event to be handled by the filter.
 
   # The type to act on. If a type is given, then this filter will only
@@ -18,11 +18,11 @@ class LogStash::Filters::Base < LogStash::Plugin
   # Optional.
   config :type, :validate => :string, :default => "", :deprecated => "You can achieve this same behavior with the new conditionals, like: `if [type] == \"sometype\" { %PLUGIN% { ... } }`."
 
-  # Only handle events with all/any (controlled by include_any config option) of these tags.
+  # Only handle events with all/any (controlled by include\_any config option) of these tags.
   # Optional.
   config :tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if \"sometag\" in [tags] { %PLUGIN% { ... } }`"
 
-  # Only handle events without all/any (controlled by exclude_any config
+  # Only handle events without all/any (controlled by exclude\_any config
   # option) of these tags.
   # Optional.
   config :exclude_tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if !(\"sometag\" in [tags]) { %PLUGIN% { ... } }`"
diff --git a/lib/logstash/filters/geoip.rb b/lib/logstash/filters/geoip.rb
index f58dde1b4a0..eed6d4e3a74 100644
--- a/lib/logstash/filters/geoip.rb
+++ b/lib/logstash/filters/geoip.rb
@@ -8,18 +8,19 @@
 # GeoIP filter, adds information about the geographical location of IP addresses.
 #
 # Starting at version 1.3.0 of logstash, a [geoip][location] field is created if
-# the geoip lookup returns a latitude and longitude. the field is stored in
+# the GeoIP lookup returns a latitude and longitude. The field is stored in
 # [GeoJSON](http://geojson.org/geojson-spec.html) format. Additionally,
-# the default Elasticsearch template provided with the elasticsearch output
-# plugin maps the [geoip][location] field to a [geo_point](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html).
+# the default Elasticsearch template provided with the
+# [elasticsearch output](../outputs/elasticsearch.html)
+# maps the [geoip][location] field to a [geo_point](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html).
 #
-# As this field is a geo_point _and_ its still valid GeoJSON, you get
-# the awesomeness of elasticsearch's geospatial query, facet and filter functions
-# and the flexibility of having GeoJSON for all other applications (like
-# Kibana's bettermap panel).
+# As this field is a geo\_point _and_ it is still valid GeoJSON, you get
+# the awesomeness of Elasticsearch's geospatial query, facet and filter functions
+# and the flexibility of having GeoJSON for all other applications (like Kibana's
+# [bettermap panel](https://github.com/elasticsearch/kibana/tree/master/src/app/panels/bettermap)).
 #
 # Logstash releases ship with the GeoLiteCity database made available from
-# Maxmind with a CCA-ShareAlike 3.0 license. For more details on geolite, see
+# Maxmind with a CCA-ShareAlike 3.0 license. For more details on GeoLite, see
 # <http://www.maxmind.com/en/geolite>.
 class LogStash::Filters::GeoIP < LogStash::Filters::Base
   config_name "geoip"
@@ -51,11 +52,11 @@ class LogStash::Filters::GeoIP < LogStash::Filters::Base
   # information of both IP's.
   #
   # If you save the data to another target than "geoip" and want to use the
-  # geo_point related functions in elasticsearch, you need to alter the template
+  # geo\_point related functions in elasticsearch, you need to alter the template
   # provided with the elasticsearch output and configure the output to use the
   # new template.
   #
-  # Even if you don't use the geo_point mapping, the [target][location] field
+  # Even if you don't use the geo\_point mapping, the [target][location] field
   # is still valid GeoJSON.
   config :target, :validate => :string, :default => 'geoip'
 
