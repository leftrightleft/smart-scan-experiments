diff --git a/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java
index 7462a0716d1..cb6f0f80126 100644
--- a/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java
+++ b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java
@@ -4,6 +4,7 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringWriter;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -32,6 +33,7 @@ public static void main(String[] args) throws IOException {
         }
         FileWriter licenseCSVWriter = new FileWriter(args[2]);
         FileWriter noticeWriter = new FileWriter(args[3]);
+        StringWriter unusedLicenseWriter = new StringWriter();
 
         boolean reportResult = new ReportGenerator().generateReport(
                 getResourceAsStream(LICENSE_MAPPING_PATH),
@@ -39,12 +41,12 @@ public static void main(String[] args) throws IOException {
                 rubyDependenciesStream,
                 javaDependenciesStreams,
                 licenseCSVWriter,
-                noticeWriter
+                noticeWriter,
+                unusedLicenseWriter
         );
 
         // If there were unknown results in the report, exit with a non-zero status
-        //System.exit(reportResult ? 0 : 1);
-
+        System.exit(reportResult ? 0 : 1);
     }
 
     static InputStream getResourceAsStream(String resourcePath) {
diff --git a/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java b/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java
index 71fb9266a91..232cf157f5f 100644
--- a/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java
+++ b/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java
@@ -9,9 +9,6 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.Writer;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -31,23 +28,26 @@
 public class ReportGenerator {
 
     final String UNKNOWN_LICENSE = "UNKNOWN";
-    final Collection<Dependency> UNKNOWN_LICENSES = new ArrayList<Dependency>();
+    final Collection<Dependency> UNKNOWN_LICENSES = new ArrayList<>();
     final String[] CSV_HEADERS = {"name", "version", "revision", "url", "license", "copyright"};
-    public final Collection<Dependency> MISSING_NOTICE = new ArrayList<Dependency>();
+    final Collection<Dependency> MISSING_NOTICE = new ArrayList<>();
+    final HashMap<Dependency, Boolean> UNUSED_DEPENDENCIES = new HashMap<>();
 
-    public boolean generateReport(
+    boolean generateReport(
             InputStream licenseMappingStream,
             InputStream acceptableLicensesStream,
             InputStream rubyDependenciesStream,
             InputStream[] javaDependenciesStreams,
             Writer licenseOutput,
-            Writer noticeOutput) throws IOException {
+            Writer noticeOutput,
+            Writer unusedLicenseOutput) throws IOException {
         SortedSet<Dependency> dependencies = new TreeSet<>();
 
         Dependency.addDependenciesFromRubyReport(rubyDependenciesStream, dependencies);
         addJavaDependencies(javaDependenciesStreams, dependencies);
 
-        checkDependencyLicenses(licenseMappingStream, acceptableLicensesStream, dependencies);
+        Map<String, LicenseUrlPair> licenseMapping = new HashMap<>();
+        checkDependencyLicenses(licenseMappingStream, acceptableLicensesStream, licenseMapping, dependencies);
         checkDependencyNotices(noticeOutput, dependencies);
 
         writeLicenseCSV(licenseOutput, dependencies);
@@ -57,6 +57,7 @@ public boolean generateReport(
 
         reportUnknownLicenses();
         reportMissingNotices();
+        reportUnusedLicenseMappings(unusedLicenseOutput, licenseMapping);
 
         licenseOutput.close();
         noticeOutput.close();
@@ -70,8 +71,8 @@ private void checkDependencyNotices(Writer noticeOutput, SortedSet<Dependency> d
         }
     }
 
-    private void checkDependencyLicenses(InputStream licenseMappingStream, InputStream acceptableLicensesStream, SortedSet<Dependency> dependencies) throws IOException {
-        Map<String, LicenseUrlPair> licenseMapping = new HashMap<>();
+    private void checkDependencyLicenses(InputStream licenseMappingStream, InputStream acceptableLicensesStream,
+                                         Map<String, LicenseUrlPair> licenseMapping, SortedSet<Dependency> dependencies) throws IOException {
         readLicenseMapping(licenseMappingStream, licenseMapping);
         List<String> acceptableLicenses = new ArrayList<>();
         readAcceptableLicenses(acceptableLicensesStream, acceptableLicenses);
@@ -114,6 +115,27 @@ private void reportUnknownLicenses() {
         }
     }
 
+    private void reportUnusedLicenseMappings(Writer unusedLicenseWriter, Map<String, LicenseUrlPair> licenseMapping) throws IOException {
+        SortedSet<String> unusedDependencies = new TreeSet<>();
+
+        for (Map.Entry<String, LicenseUrlPair> entry : licenseMapping.entrySet()) {
+            if (entry.getValue().isUnused) {
+                unusedDependencies.add(entry.getKey());
+            }
+        }
+
+        if (unusedDependencies.size() > 0) {
+            String msg = String.format("The following %d license mappings were specified but unused:", unusedDependencies.size());
+            System.out.println(msg);
+            unusedLicenseWriter.write(msg + System.lineSeparator());
+
+            for (String dep : unusedDependencies) {
+                System.out.println(dep);
+                unusedLicenseWriter.write(dep + System.lineSeparator());
+            }
+        }
+    }
+
     private void addJavaDependencies(InputStream[] javaDependenciesStreams, SortedSet<Dependency> dependencies) throws IOException {
         for (InputStream stream : javaDependenciesStreams) {
             Dependency.addDependenciesFromJavaReport(stream, dependencies);
@@ -154,6 +176,7 @@ private void checkDependencyLicense(Map<String, LicenseUrlPair> licenseMapping,
             if (hasAcceptableLicense) {
                 dependency.spdxLicense = pair.license;
                 dependency.url = pair.url;
+                pair.isUnused = false;
             } else {
                 // unacceptable license or missing URL
                 UNKNOWN_LICENSES.add(dependency);
@@ -191,6 +214,7 @@ private void readLicenseMapping(InputStream stream, Map<String, LicenseUrlPair>
 class LicenseUrlPair {
     String license;
     String url;
+    boolean isUnused = true;
 
     LicenseUrlPair(String license, String url) {
         this.license = license;
diff --git a/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java b/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java
index 471a1446503..266f1fd2253 100644
--- a/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java
+++ b/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java
@@ -15,14 +15,16 @@
 import static org.logstash.dependencies.Main.ACCEPTABLE_LICENSES_PATH;
 
 public class ReportGeneratorTest {
-    StringWriter csvOutput;
-    StringWriter noticeOutput;
-    ReportGenerator rg;
+    private StringWriter csvOutput;
+    private StringWriter noticeOutput;
+    private StringWriter unusedLicenseWriter;
+    private ReportGenerator rg;
 
     @Before
     public void setup() {
         csvOutput = new StringWriter();
         noticeOutput = new StringWriter();
+        unusedLicenseWriter = new StringWriter();
     }
 
     @Test
@@ -32,7 +34,7 @@ public void testSuccessfulReport() throws IOException {
                 Main.getResourceAsStream("/expectedOutput.txt"));
         String expectedNoticeOutput = getStringFromStream(
                 Main.getResourceAsStream("/expectedNoticeOutput.txt"));
-        boolean result = runReportGenerator("/licenseMapping-good.csv", csvOutput, noticeOutput);
+        boolean result = runReportGenerator("/licenseMapping-good.csv", csvOutput, noticeOutput, unusedLicenseWriter);
 
         assertTrue(result);
         assertEquals(normalizeEol(expectedOutput), normalizeEol(csvOutput.toString()));
@@ -41,7 +43,7 @@ public void testSuccessfulReport() throws IOException {
 
     @Test
     public void testReportWithMissingLicenses() throws IOException {
-        boolean result = runReportGenerator("/licenseMapping-missing.csv", csvOutput, noticeOutput);
+        boolean result = runReportGenerator("/licenseMapping-missing.csv", csvOutput, noticeOutput, unusedLicenseWriter);
 
         assertFalse(result);
 
@@ -53,7 +55,7 @@ public void testReportWithMissingLicenses() throws IOException {
 
     @Test
     public void testReportWithUnacceptableLicenses() throws IOException {
-        boolean result = runReportGenerator("/licenseMapping-unacceptable.csv", csvOutput, noticeOutput);
+        boolean result = runReportGenerator("/licenseMapping-unacceptable.csv", csvOutput, noticeOutput, unusedLicenseWriter);
 
         assertFalse(result);
 
@@ -65,7 +67,7 @@ public void testReportWithUnacceptableLicenses() throws IOException {
 
     @Test
     public void testReportWithMissingUrls() throws IOException {
-        boolean result = runReportGenerator("/licenseMapping-missingUrls.csv", csvOutput, noticeOutput);
+        boolean result = runReportGenerator("/licenseMapping-missingUrls.csv", csvOutput, noticeOutput, unusedLicenseWriter);
 
         assertFalse(result);
 
@@ -78,10 +80,11 @@ public void testReportWithMissingUrls() throws IOException {
     @Test
     public void testReportWithMissingNotices() throws IOException {
         boolean result = runReportGenerator(
-                "/licenseMapping-missingNotices.csv",
+                "/licenseMapping-good.csv",
                 new InputStream[] {Main.getResourceAsStream("/javaLicensesMissingNotice.csv")},
                 csvOutput,
-                noticeOutput
+                noticeOutput,
+                unusedLicenseWriter
         );
 
         assertFalse(result);
@@ -91,7 +94,22 @@ public void testReportWithMissingNotices() throws IOException {
         assertTrue(found.isPresent());
     }
 
-    private boolean runReportGenerator(String licenseMappingPath, StringWriter csvOutput, StringWriter noticeOutput) throws IOException {
+    @Test
+    public void testReportWithUnusedLicenses() throws IOException {
+        boolean result = runReportGenerator(
+                "/licenseMapping-missingNotices.csv",
+                csvOutput,
+                noticeOutput,
+                unusedLicenseWriter
+        );
+
+        assertTrue("Unused licenses should not fail the license checker", result);
+
+        assertThat(unusedLicenseWriter.toString(), containsString("org.eclipse.core:org.eclipse.core.commands:3.6.0"));
+        assertThat(unusedLicenseWriter.toString(), not(containsString("junit:junit:4.12")));
+    }
+
+    private boolean runReportGenerator(String licenseMappingPath, StringWriter csvOutput, StringWriter noticeOutput, StringWriter unusedLicenseWriter) throws IOException {
        return runReportGenerator(
                licenseMappingPath,
                new InputStream[]{
@@ -99,12 +117,14 @@ private boolean runReportGenerator(String licenseMappingPath, StringWriter csvOu
                         Main.getResourceAsStream("/javaLicenses2.csv"),
                 },
                csvOutput,
-               noticeOutput
+               noticeOutput,
+               unusedLicenseWriter
        ) ;
     }
 
-    private boolean runReportGenerator(String licenseMappingPath, InputStream[] javaLicenses, StringWriter csvOutput, StringWriter noticeOutput)
-            throws IOException {
+    private boolean runReportGenerator(
+            String licenseMappingPath, InputStream[] javaLicenses, StringWriter csvOutput,
+            StringWriter noticeOutput, StringWriter unusedLicenseWriter) throws IOException {
         rg = new ReportGenerator();
         return rg.generateReport(
                 Main.getResourceAsStream(licenseMappingPath),
@@ -112,7 +132,8 @@ private boolean runReportGenerator(String licenseMappingPath, InputStream[] java
                 Main.getResourceAsStream("/rubyDependencies.csv"),
                 javaLicenses,
                 csvOutput,
-                noticeOutput
+                noticeOutput,
+                unusedLicenseWriter
         );
     }
 
