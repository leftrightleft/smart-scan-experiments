diff --git a/CHANGELOG b/CHANGELOG
index 33cb749e121..b022783c545 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,3 +1,17 @@
+1.1.1 (???, 2012)
+ ## Overview of this release:
+  * New output plugins: juggernaut, metricscatcher, nagios_ncsa, 
+  * New filter plugins: zeromq
+  * Fixes for gelf output
+  * Fixes for elasticsearch_river output
+
+ ## IMPORTANT CHANGES FOR UPGRADES FROM 1.1.0
+  - zeromq input and output rewritten
+      The previous zeromq support was an MVP. It has now been rewritten into
+      something more flexible. The configuration options have changed entirely.
+      While this is still listed as `experimental`, we don't predict any more
+      configuration syntax changes. The next release will bump this to beta.
+
 1.1.0 (January 30, 2012)
   ## Overview of this release:
     * New input plugins: zeromq, gelf
diff --git a/Gemfile.lock b/Gemfile.lock
index bf163a4de26..707e1705704 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,3 +1,9 @@
+GIT
+  remote: git://github.com/ruby-amqp/hot_bunnies.git
+  revision: a2d618680b10a8178849ba2bfdc4d41a46c297c3
+  specs:
+    hot_bunnies (1.4.0.pre1-java)
+
 GEM
   remote: http://rubygems.org/
   specs:
@@ -65,6 +71,7 @@ DEPENDENCIES
   gelfd (= 0.2.0)
   gmetric (= 0.1.3)
   haml
+  hot_bunnies!
   jls-grok (= 0.10.5)
   jruby-elasticsearch (= 0.0.11)
   jruby-openssl
diff --git a/docs/tutorials/zeromq.md b/docs/tutorials/zeromq.md
index b914bdd325b..6ebbb1df7ac 100644
--- a/docs/tutorials/zeromq.md
+++ b/docs/tutorials/zeromq.md
@@ -79,7 +79,7 @@ Use `pair` topology. On the output side, specify the ipaddress and port of the i
 
 ## broadcast
 Use `pubsub`
-If you need to broadcast ALL messages to multiple hosts that each need to see all events, use `pubsub`. Note that all events are broadcast to all subscribers.
+If you need to broadcast ALL messages to multiple hosts that each need to see all events, use `pubsub`. Note that all events are broadcast to all subscribers. When using `pubsub` you might also want to investigate the `topic` configuration option which allows subscribers to see only a subset of messages.
 
 ## Filter workers
 Use `pushpull`
@@ -95,25 +95,31 @@ ZeroMQ supports multiple types of transports:
 
 For pretty much all cases, you'll be using `tcp://` transports with Logstash.
 
-# sockopts
-Sockopts is not you choosing between blue or black socks. ZeroMQ supports setting various flags or options on sockets. In the interest of minimizing configuration syntax, these are _hidden_ behind a logstash configuration element called `sockopts`. You probably won't need to tune these for most cases. If you do need to tune them, you'll probably set the following:
-
-## ZMQ::SUBSCRIBE - applies to `pubsub`
+## Topic - applies to `pubsub`
 This opt mimics the routing keys functionality in AMQP. Imagine you have a network of receivers but only a subset of the messages need to be seen by a subset of the hosts. You can use this option as a routing key to facilite that:
 
 ```
 # This output is a PUB
 output {
-  zeromq { topology => "pubsub" sockopts => ["ZMQ::SUBSCRIBE", "logs.production.%{host}"] }
+  zeromq { topology => "pubsub" topic => "logs.production.%{host}" }
 }
 ```
 
 ```
-# This output is a SUB
+# This input is a SUB
 # I only care about db1 logs
-input { zeromq { type => "db1logs" address => "tcp://<ipaddress>:2120" sockopts => ["ZMQ::SUBSCRIBE","logs.production.db1"]}}
+input { zeromq { type => "db1logs" address => "tcp://<ipaddress>:2120" topic => "logs.production.db1"}}
 ```
 
+One thing important to note about 0mq PUBSUB and topics is that all filtering is done on the subscriber side. The subscriber will get ALL messages but discard any that don't match the topic.
+
+Also important to note is that 0mq doesn't do topic in the same sense as an AMQP broker might. When a SUB socket gets a message, it compares the first bytes of the message against the topic. However, this isn't always flexible depending on the format of your message. The common practice then, is to send a 0mq multipart message and make the first part the topic. The next parts become the actual message body.
+
+This is approach is how logstash handles this. When using PUBSUB, Logstash will send a multipart message where the first part is the name of the topic and the second part is the event. This is important to know if you are sending to a SUB input from sources other than Logstash.
+
+# sockopts
+Sockopts is not you choosing between blue or black socks. ZeroMQ supports setting various flags or options on sockets. In the interest of minimizing configuration syntax, these are _hidden_ behind a logstash configuration element called `sockopts`. You probably won't need to tune these for most cases. If you do need to tune them, you'll probably set the following:
+
 ## ZMQ::HWM - sets the high water mark
 The high water mark is the maximum number of messages a given socket pair can have in its internal queue. Use this to throttle essentially.
 
diff --git a/lib/logstash/inputs/syslog.rb b/lib/logstash/inputs/syslog.rb
index e3bb926c726..2d4dcf85bb1 100644
--- a/lib/logstash/inputs/syslog.rb
+++ b/lib/logstash/inputs/syslog.rb
@@ -20,7 +20,7 @@
 # Note: this input will start listeners on both TCP and UDP
 class LogStash::Inputs::Syslog < LogStash::Inputs::Base
   config_name "syslog"
-  plugin_status "beta"
+  plugin_status "experimental"
 
   # The address to listen on
   config :host, :validate => :string, :default => "0.0.0.0"
@@ -52,6 +52,7 @@ def initialize(params)
 
   public
   def register
+    @logger.warn("ATTENTION: THIS PLUGIN WILL BE REMOVED IN LOGSTASH 1.2.0")
     @grok_filter = LogStash::Filters::Grok.new({
       "type"    => [@config["type"]],
       "pattern" => ["<%{POSINT:priority}>%{SYSLOGLINE}"],
diff --git a/lib/logstash/outputs/elasticsearch_river.rb b/lib/logstash/outputs/elasticsearch_river.rb
index fb10dcf13ef..ebb85cbeb67 100644
--- a/lib/logstash/outputs/elasticsearch_river.rb
+++ b/lib/logstash/outputs/elasticsearch_river.rb
@@ -99,7 +99,7 @@ def prepare_river
       "user" => [@user],
       "password" => [@password],
       "exchange_type" => ["direct"],
-      "queue_name" => [@queue],
+      "queue_name" => [@name],
       "name" => [@exchange],
       "key" => [@key],
       "vhost" => [@vhost],
diff --git a/lib/logstash/outputs/gelf.rb b/lib/logstash/outputs/gelf.rb
index e509652d84f..158adf72122 100644
--- a/lib/logstash/outputs/gelf.rb
+++ b/lib/logstash/outputs/gelf.rb
@@ -37,7 +37,7 @@ class LogStash::Outputs::Gelf < LogStash::Outputs::Base
 
   # The GELF facility. Dynamic values like %{foo} are permitted here; this
   # is useful if you need to use a value from the event as the facility name.
-  config :facility, :validate => :array, :default => [ "%{facility}" , "logstash-gelf" ]
+  config :facility, :validate => :string, :default => "logstash-gelf"
 
   # Ship metadata within event object?
   config :ship_metadata, :validate => :boolean, :default => true
@@ -118,18 +118,8 @@ def receive(event)
     # Allow 'INFO' 'I' or number. for 'level'
     m["timestamp"] = event.unix_timestamp.to_i
 
-    # Probe facility array levels
-    if @facility.is_a?(Array)
-      @facility.each do |value|
-        parsed_value = event.sprintf(value)
-        if parsed_value
-          m["facility"] = parsed_value
-          break
-        end
-      end
-    else
-      m["facility"] = event.sprintf(@facility)
-    end
+    # set facility as defined
+    m["facility"] = event.sprintf(@facility)
 
     # Probe severity array levels
     level = nil
