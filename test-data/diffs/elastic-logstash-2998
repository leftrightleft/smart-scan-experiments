diff --git a/lib/logstash/timestamp.rb b/lib/logstash/timestamp.rb
index fb75c5f2538..fb3ad17e0a7 100644
--- a/lib/logstash/timestamp.rb
+++ b/lib/logstash/timestamp.rb
@@ -36,7 +36,11 @@ def self.now
     end
 
     # coerce tries different strategies based on the time object class to convert into a Timestamp.
-    # @param [String, Time, Timestamp] time the time object to try coerce
+    # Supports following types:
+    #   - String: ISO 8601 representations of timestamps.
+    #   - Numeric: Unix times in seconds
+    #   - Time: Standard Ruby time object
+    # @param [String, Time, Timestamp, Numeric] time the time object to try coerce
     # @return [Timestamp, nil] Timestamp will be returned if successful otherwise nil
     # @raise [TimestampParserError] on String with invalid format
     def self.coerce(time)
@@ -47,6 +51,8 @@ def self.coerce(time)
         time
       when Time
         LogStash::Timestamp.new(time)
+      when Numeric
+        Timestamp.new(::Time.at(time))
       else
         nil
       end
diff --git a/spec/core/timestamp_spec.rb b/spec/core/timestamp_spec.rb
index c8b70cd8efd..abcc510be65 100644
--- a/spec/core/timestamp_spec.rb
+++ b/spec/core/timestamp_spec.rb
@@ -25,6 +25,11 @@
     expect(LogStash::Timestamp.coerce(t).to_i).to eq(t.to_i)
   end
 
+  it "should coerce unix time" do
+    epoch_time = 1428713843 # ISO 8601: 2015-04-11T00:57:23Z
+    expect(LogStash::Timestamp.coerce(epoch_time).to_i).to eq(epoch_time)
+  end
+
   it "should raise on invalid string coerce" do
     expect{LogStash::Timestamp.coerce("foobar")}.to raise_error LogStash::TimestampParserError
   end
