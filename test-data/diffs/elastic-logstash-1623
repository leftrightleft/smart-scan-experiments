diff --git a/lib/logstash/inputs/rabbitmq.rb b/lib/logstash/inputs/rabbitmq.rb
index 41924738874..3d07449fe7e 100644
--- a/lib/logstash/inputs/rabbitmq.rb
+++ b/lib/logstash/inputs/rabbitmq.rb
@@ -79,6 +79,9 @@ class LogStash::Inputs::RabbitMQ < LogStash::Inputs::Threadable
   # Enable message acknowledgement
   config :ack, :validate => :boolean, :default => true
 
+  # Enable acknowledging multiple messages. The value of this config is number of messages to acknoledge
+  config :ack_multi, :validate => :number, :default => 0
+
   # Passive queue creation? Useful for checking queue existance without modifying server state
   config :passive, :validate => :boolean, :default => false
 
diff --git a/lib/logstash/inputs/rabbitmq/bunny.rb b/lib/logstash/inputs/rabbitmq/bunny.rb
index 4594143438a..26cc3334c5c 100644
--- a/lib/logstash/inputs/rabbitmq/bunny.rb
+++ b/lib/logstash/inputs/rabbitmq/bunny.rb
@@ -64,6 +64,10 @@ def run(output_queue)
 
     def teardown
       @consumer.cancel
+      begin
+        @ch.ack(@last_handled_msg, true)
+      rescue
+      end
       @q.delete unless @durable
 
       @ch.close   if @ch && @ch.open?
@@ -106,13 +110,24 @@ def consume
       # a reference to the consumer so that we can cancel it, so
       # a consumer manually. MK.
       @consumer = Bunny::Consumer.new(@ch, @q)
+      @last_ack = 0
       @q.subscribe(:manual_ack => @ack, :block => true) do |delivery_info, properties, data|
         @codec.decode(data) do |event|
           decorate(event)
           @output_queue << event
         end
 
-        @ch.acknowledge(delivery_info.delivery_tag) if @ack
+        if @ack
+          if @ack_multi > 1
+            @last_handled_msg = metadata.delivery_tag
+            if metadata.delivery_tag.to_i > @last_ack.to_i
+              @last_ack = metadata.delivery_tag
+              @ch.ack(metadata.delivery_tag, true)
+            end
+          else 
+            @ch.ack(metadata.delivery_tag)
+          end
+        end
       end
     end
   end # BunnyImpl
diff --git a/lib/logstash/inputs/rabbitmq/march_hare.rb b/lib/logstash/inputs/rabbitmq/march_hare.rb
index 6a80d4de2af..5e4377e003a 100644
--- a/lib/logstash/inputs/rabbitmq/march_hare.rb
+++ b/lib/logstash/inputs/rabbitmq/march_hare.rb
@@ -115,15 +115,30 @@ def consume
           decorate(event)
           @output_queue << event if event
         end
-        @ch.ack(metadata.delivery_tag) if @ack
+        if @ack
+          if @ack_multi > 1
+            @last_handled_msg = metadata.delivery_tag
+            if metadata.delivery_tag.to_i > @last_ack.to_i
+              @last_ack = metadata.delivery_tag
+              @ch.ack(metadata.delivery_tag, true)
+            end
+          else 
+            @ch.ack(metadata.delivery_tag)
+          end
+        end
       end
+      @last_ack = 0
       @q.subscribe_with(@consumer, :manual_ack => @ack, :block => true)
     end
 
     def shutdown_consumer
       @break_out_of_the_loop.set(true)
-
       @consumer.cancel
+      begin
+        @ch.ack(@last_handled_msg, true)
+      rescue
+      end
+
       @consumer.gracefully_shut_down
     end
   end # MarchHareImpl
