diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index 3d8673946f8..5eb40063bf2 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -253,23 +253,56 @@ def replace(event)
 
   def convert(event)
     @convert.each do |field, type|
-      next unless event.include?(field)
-      original = event[field]
-
-      # calls convert_{string,integer,float} depending on type requested.
-      converter = method("convert_" + type)
-      if original.nil?
-        next
-      elsif original.is_a?(Hash)
-        @logger.debug("I don't know how to type convert a hash, skipping",
-                      :field => field, :value => original)
-        next
-      elsif original.is_a?(Array)
-        value = original.map { |v| converter.call(v) }
+      selectors = field.scan(/(?<=\[).+?(?=\])/)
+      if selectors[-1] == "*"
+        field = selectors[-2]
+
+        event[field].each do |subfield, subvalue|
+          next unless event[field].include?(subfield)
+          original = event[field][subfield]
+
+          # calls convert_{string,integer,float} depending on type requested.
+          converter = method("convert_" + type)
+          if original.nil?
+            next
+          elsif original.is_a?(Hash)
+            if type == "string"
+              value = converter.call(JSON.generate(original))
+            else
+              @logger.debug("I don't know how to type convert a hash, skipping",
+                            :subfield => subfield, :value => original)
+              next
+            end
+          elsif original.is_a?(Array)
+            value = original.map { |v| converter.call(v) }
+          else
+            value = converter.call(original)
+          end
+          event[field][subfield] = value
+        end
       else
-        value = converter.call(original)
+        next unless event.include?(field)
+        original = event[field]
+
+        # calls convert_{string,integer,float} depending on type requested.
+        converter = method("convert_" + type)
+        if original.nil?
+          next
+        elsif original.is_a?(Hash)
+          if type == "string"
+            value = converter.call(JSON.generate(original))
+          else
+            @logger.debug("I don't know how to type convert a hash, skipping",
+                          :field => field, :value => original)
+            next
+          end
+        elsif original.is_a?(Array)
+          value = original.map { |v| converter.call(v) }
+        else
+          value = converter.call(original)
+        end
+        event[field] = value
       end
-      event[field] = value
     end
   end # def convert
 
diff --git a/spec/filters/mutate.rb b/spec/filters/mutate.rb
index 61f0c76e72a..99c33d3d1f0 100644
--- a/spec/filters/mutate.rb
+++ b/spec/filters/mutate.rb
@@ -176,5 +176,58 @@
       insist { subject["[foo][bar]"] }.is_a?(Fixnum)
     end
   end
+
+  describe "hash convert string should work on nested fields" do
+    config <<-CONFIG
+      filter {
+        mutate {
+          convert => [ "[foo][bar]", "string" ]
+        }
+      }
+    CONFIG
+
+    sample({ "foo" => { "bar" => {"1000" => "1000"} } }) do
+      insist { subject["[foo][bar]"] } == "{\"1000\":\"1000\"}"
+      insist { subject["[foo][bar]"] }.is_a?(String)
+    end
+  end
+
+  describe "convert should work on globbed nested fields" do
+    config <<-CONFIG
+      filter {
+        mutate {
+          convert => [ "[foo][*]", "integer" ]
+        }
+      }
+    CONFIG
+
+    sample({ "foo" => { "bar" => "1000", "baz" => "2000", "bee" => "3000" } }) do
+      insist { subject["[foo][bar]"] } == 1000
+      insist { subject["[foo][bar]"] }.is_a?(Fixnum)
+      insist { subject["[foo][baz]"] } == 2000
+      insist { subject["[foo][baz]"] }.is_a?(Fixnum)
+      insist { subject["[foo][bee]"] } == 3000
+      insist { subject["[foo][bee]"] }.is_a?(Fixnum)
+    end
+  end
+
+  describe "hash convert string should work on globbed nested fields" do
+    config <<-CONFIG
+      filter {
+        mutate {
+          convert => [ "[foo][*]", "string" ]
+        }
+      }
+    CONFIG
+
+    sample({ "foo" => { "bar" => {"1000" => "1000"}, "baz" => {"2000" => "2000"}, "bee" => {"3000" => "3000"} } }) do
+      insist { subject["[foo][bar]"] } == "{\"1000\":\"1000\"}"
+      insist { subject["[foo][bar]"] }.is_a?(String)
+      insist { subject["[foo][baz]"] } == "{\"2000\":\"2000\"}"
+      insist { subject["[foo][baz]"] }.is_a?(String)
+      insist { subject["[foo][bee]"] } == "{\"3000\":\"3000\"}"
+      insist { subject["[foo][bee]"] }.is_a?(String)
+    end
+  end
 end
 
