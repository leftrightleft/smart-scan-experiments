diff --git a/docsk8s/troubleshooting/ls-k8s-common-problems.asciidoc b/docsk8s/troubleshooting/ls-k8s-common-problems.asciidoc
index 8052602e102..8bd970ff4f5 100644
--- a/docsk8s/troubleshooting/ls-k8s-common-problems.asciidoc
+++ b/docsk8s/troubleshooting/ls-k8s-common-problems.asciidoc
@@ -1,25 +1,60 @@
 [[ls-k8s-common-problems]]
 === Common problems
 
-Following are some suggested resolutions to problems that you may encounter when running Logstash in a Kubernetes environment.
+Following are some suggested resolutions to problems that you may encounter when running {ls} in a Kubernetes environment.
 
-* <<problem-01>>
-* <<problem-02>>
+* <<problem-keep-restart>>
+* <<problem-oom>>
 
 [float]
-[[problem-01]]
+[[problem-keep-restart]]
 === Logstash keeps restarting
 When you check the running Kubernetes pods status, {ls} shows continual restarts. 
 
-This can be caused by...
+[source,bash]
+--
+NAMESPACE     NAME                                  READY   STATUS    RESTARTS      AGE
+default       logstash-f7768c66d-grzbj              0/1     Running   3 (55s ago)   6m32s
+--
 
-To resolve the problem...
+This can be caused by a few issues:
 
 [float]
-[[problem-02]]
-=== Logstash stops with an OOM errors
-The {ls} pod continues to stop running due to an out of memory (OOM) error.
+[[problem-nometric]]
+==== Metrics API not accessible to `readinessProbe`
 
-This can be caused by...
+If the `readinessProbe` is unable to access the health check endpoint, the {ls} process will be continuously stopped and restarted. To fix it, set the following in `logstash.yml` in `ConfigMap`.
 
-To resolve the problem...
+[source,bash]
+--
+api.http.host: 0.0.0.0
+--
+
+[float]
+[[problem-delay]]
+==== {ls} startup process takes longer than `initialDelaySeconds`
+
+Review the time constraints of `readinessProbe` and `livenessProbe` to ensure that {ls} has enough time to start up and expose the health check endpoint for the `readiness` and `liveness` probes to access.
+
+[float]
+[[problem-insufficient]]
+==== Insufficient CPU or memory to start {ls}
+
+Review CPU and memory usage using `kubectl top pods` (requires metrics server to be available for your Kubernetes implementation).
+
+* Set the values of `cpu` and `memory` in your `Deployment` or `StatefulSet` appropriately.
+* Ensure that the JVM memory settings are set appropriately. The default `Xmx` value is `1g`, and we recommend that heap size is set to no more than 50-75% of total memory.
+
+
+
+[float]
+[[problem-oom]]
+=== {ls} stops with OOM errors
+The status of {ls} shows `Ready,` but the pod repeatedly stops running.
+
+This situation can be caused by insufficient memory. If {ls} uses more memory than the declared resource, Kubernetes shutdowns the pod immediately and the {ls} log does not show any shutdown related message.
+
+Run `kubectl get event --watch` or `kubectl describe pod` if the event status shows `OOMKilled`.
+
+The resolution is similar to the remedy for the insufficient CPU or memory problem. 
+Review JVM and memory settings as shown in <<problem-insufficient>>.
diff --git a/docsk8s/troubleshooting/ls-k8s-troubleshooting-methods.asciidoc b/docsk8s/troubleshooting/ls-k8s-troubleshooting-methods.asciidoc
index 2517e3698ed..2775c8c8c8c 100644
--- a/docsk8s/troubleshooting/ls-k8s-troubleshooting-methods.asciidoc
+++ b/docsk8s/troubleshooting/ls-k8s-troubleshooting-methods.asciidoc
@@ -1,35 +1,95 @@
 [[ls-k8s-troubleshooting-methods]]
-=== Troubleshooting methods
+=== Troubleshooting tips and suggestions
 
-There are a number of methods that you can use to diagnose the state of your Logstash and Kubernetes system, both in the event of any problems, and as part of a day-to-day approach to ensuring that everything is running as expected.
+Here are some approaches that you can use to diagnose the state of your {ls} and Kubernetes system, both in the event of any problems, and as part of a day-to-day approach to ensuring that everything is running as expected.
 
-<<ls-k8s-checking-resources>>
-<<ls-k8s-viewing-logs>>
-<<ls-k8s-connecting-to-a-container>>
+* <<ls-k8s-checking-resources>>
+* <<ls-k8s-viewing-logs>>
+* <<ls-k8s-connecting-to-a-container>>
+* <<ls-k8s-diagnostics>>
 
 [float]
 [[ls-k8s-checking-resources]]
 === Checking resources
 
-You can use the standard Kubernetes `get` and `describe` commands to quickly gather details about any resources in your Logstash and Kubernetes environment.
+You can use the standard Kubernetes `get` and `describe` commands to quickly gather details about any resources in your {ls} and Kubernetes environment.
 
-Examples...
+[source,bash]
+--
+kubectl get pod logstash-7477d46bb7-4lcnv
 
+NAME                                    READY   STATUS        RESTARTS         AGE
+logstash-7477d46bb7-4lcnv               0/1     Pending       0                2m43s
+--
+
+If a Pod fails to reach the `Running` status after a few seconds, run this command to get more insights:
+
+[source,bash]
+--
+kubectl describe pod logstash-7477d46bb7-4lcnv
+
+(...)
+Events:
+  Type     Reason            Age                 From               Message
+  ----     ------            ----                ----               -------
+  Warning  FailedScheduling  34s (x2 over 115s)  default-scheduler  0/1 nodes are available: 1 Insufficient cpu.
+--
+
+You can check the CPU and memory resources by running this command:
+[source,bash]
+--
+kubectl top pod logstash-7477d46bb7-4lcnv
+
+NAME                        CPU(cores)   MEMORY(bytes)
+logstash-7d5b749899-tfg4f   37m          882Mi
+--
 
 [float]
 [[ls-k8s-viewing-logs]]
 === Viewing logs
 
-Following is a list of logs and locations that can be useful to monitor the health of your environment.
+{ls} Docker containers do not create log files by default. They log to standard output.
+
+To view the log, run:
 
-Log1::
-Description.
+[source,bash]
+--
+kubectl logs -f logstash-7477d46bb7-4lcnv
+--
 
-Log2::
-Description.
+To enable debug log, set `log.level: debug` in logstash.yml in `ConfigMap`.
 
 [float]
 [[ls-k8s-connecting-to-a-container]]
 === Connecting to a container
 
-At times, you may need to connect directly from your command shell into Logstash and other Kubernetes resources.
+At times, you may need to connect directly from your command shell into {ls} and other Kubernetes resources.
+
+[source,bash]
+--
+kubectl exec -it logstash-7477d46bb7-4lcnv -- bash
+--
+
+[float]
+[[ls-k8s-diagnostics]]
+=== Running diagnostics
+
+Thread dumps and heap dumps can be helpful when you are debugging hard problems. Connect to the container, and then run the commands to gather the diagnostics.
+
+==== Thread dump
+[source,bash]
+--
+jdk/bin/jstack -l 1 > /tmp/jstack_output.txt
+--
+
+==== Heap dump
+[source,bash]
+--
+jdk/bin/jcmd 1 GC.heap_dump /tmp/heap_dump.hprof
+--
+
+==== Extract file from the container
+[source,bash]
+--
+kubectl cp logstash-7477d46bb7-4lcnv:/tmp/heap_dump.hprof ./heap.hprof
+--
\ No newline at end of file
