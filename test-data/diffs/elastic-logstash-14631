diff --git a/logstash-core/src/main/java/org/logstash/Timestamp.java b/logstash-core/src/main/java/org/logstash/Timestamp.java
index be72e8c47d9..571609d5fa8 100644
--- a/logstash-core/src/main/java/org/logstash/Timestamp.java
+++ b/logstash-core/src/main/java/org/logstash/Timestamp.java
@@ -28,10 +28,16 @@
 import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DecimalStyle;
 import java.time.format.ResolverStyle;
 import java.time.temporal.ChronoField;
 import java.util.Date;
+import java.util.Locale;
+import java.util.Optional;
+import java.util.function.UnaryOperator;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 import org.logstash.ackedqueue.Queueable;
 
 /**
@@ -43,6 +49,8 @@
 @JsonDeserialize(using = ObjectMappers.TimestampDeserializer.class)
 public final class Timestamp implements Comparable<Timestamp>, Queueable {
 
+    private static final Logger LOGGER = LogManager.getLogger(Timestamp.class);
+
     private transient org.joda.time.DateTime time;
 
     private final Instant instant;
@@ -57,11 +65,11 @@ public Timestamp() {
     }
 
     public Timestamp(String iso8601) {
-        this(iso8601, Clock.systemDefaultZone());
+        this(iso8601, Clock.systemDefaultZone(), Locale.getDefault());
     }
 
-    Timestamp(final String iso8601, final Clock clock) {
-        this.instant = tryParse(iso8601, clock);
+    Timestamp(final String iso8601, final Clock clock, final Locale locale) {
+        this.instant = tryParse(iso8601, clock, locale);
     }
 
     Timestamp(final Clock clock) {
@@ -164,13 +172,47 @@ public byte[] serialize() {
             .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
             .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
             .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)
-            .toFormatter().withZone(ZoneId.systemDefault());
+            .toFormatter()
+            .withZone(ZoneId.systemDefault())
+            .withDecimalStyle(DecimalStyle.ofDefaultLocale());
 
-    private static Instant tryParse(final String iso8601, final Clock clock) {
+    private static Instant tryParse(final String iso8601, final Clock clock, final Locale locale) {
+        final DateTimeFormatter configuredFormatter = LENIENT_ISO_DATE_TIME_FORMATTER.withLocale(locale)
+                                                                                     .withDecimalStyle(DecimalStyle.of(locale))
+                                                                                     .withZone(clock.getZone());
+        return tryParse(iso8601, configuredFormatter)
+                .or(() -> tryFallbackParse(iso8601, configuredFormatter, (f) -> f.withDecimalStyle(DecimalStyle.STANDARD)))
+                .orElseThrow(() -> new IllegalArgumentException(String.format("Invalid ISO8601 input `%s`", iso8601)));
+    }
+
+    private static Optional<Instant> tryParse(final String iso8601,
+                                              final DateTimeFormatter configuredFormatter) {
         try {
-            return LENIENT_ISO_DATE_TIME_FORMATTER.withZone(clock.getZone()).parse(iso8601, Instant::from);
+            return Optional.of(configuredFormatter.parse(iso8601, Instant::from));
         } catch (java.time.format.DateTimeParseException e) {
-            throw new IllegalArgumentException(String.format("Invalid ISO8601 input `%s`", iso8601), e);
+            LOGGER.trace(String.format("Failed to parse `%s` with locale:`%s` and decimal_style:`%s`", iso8601, configuredFormatter.getLocale(), configuredFormatter.getDecimalStyle()), e);
+            return Optional.empty();
         }
     }
+
+    /**
+     * Attempts to parse the input if-and-only-if the provided {@code formatterTransformer}
+     * effectively transforms the provided {@code baseFormatter}. This is intended to be a
+     * fallback method for a maybe-modified formatter to prevent re-parsing the same input
+     * with the same formatter multiple times.
+     *
+     * @param iso8601 an ISO8601-ish string
+     * @param baseFormatter the base formatter
+     * @param formatterTransformer a transformation operator (such as using DateTimeFormat#withDecimalStyle)
+     * @return an {@code Optional}, which contains a value if-and-only-if the effective format is different
+     *         from the base format and successfully parsed the input
+     */
+    private static Optional<Instant> tryFallbackParse(final String iso8601,
+                                                      final DateTimeFormatter baseFormatter,
+                                                      final UnaryOperator<DateTimeFormatter> formatterTransformer) {
+        final DateTimeFormatter modifiedFormatter = formatterTransformer.apply(baseFormatter);
+        if (modifiedFormatter.equals(baseFormatter)) { return Optional.empty(); }
+
+        return tryParse(iso8601, modifiedFormatter);
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/TimestampTest.java b/logstash-core/src/test/java/org/logstash/TimestampTest.java
index f566f2dc820..d3bfd65ada9 100644
--- a/logstash-core/src/test/java/org/logstash/TimestampTest.java
+++ b/logstash-core/src/test/java/org/logstash/TimestampTest.java
@@ -28,6 +28,7 @@
 import java.time.Clock;
 import java.time.Instant;
 import java.time.ZoneId;
+import java.util.Locale;
 
 import static org.junit.Assert.*;
 
@@ -35,6 +36,7 @@ public class TimestampTest {
 
 
     static final Clock OFFSET_CLOCK = Clock.systemUTC().withZone(ZoneId.of("-08:00"));
+    static final Locale LOCALE = Locale.US;
 
     @Test
     @SuppressWarnings({"deprecation"})
@@ -48,39 +50,53 @@ public void testCircularIso8601() throws Exception {
 
     @Test
     public void testToString() throws Exception {
-        Timestamp t = new Timestamp("2014-09-23T12:34:56.789012345-0800", OFFSET_CLOCK);
+        Timestamp t = new Timestamp("2014-09-23T12:34:56.789012345-0800", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T20:34:56.789012345Z", t.toString());
     }
 
     @Test
     public void testToStringNoNanos() throws Exception {
-        Timestamp t = new Timestamp("2014-09-23T12:34:56.000000000-0800", OFFSET_CLOCK);
+        Timestamp t = new Timestamp("2014-09-23T12:34:56.000000000-0800", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T20:34:56.000Z", t.toString());
     }
 
     @Test
     public void testParsingDateTimeNoOffset() throws Exception {
-        final Timestamp t = new Timestamp("2014-09-23T12:34:56.789012345", OFFSET_CLOCK);
+        final Timestamp t = new Timestamp("2014-09-23T12:34:56.789012345", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T20:34:56.789012345Z", t.toString());
     }
     @Test
     public void testParsingDateNoOffset() throws Exception {
-        final Timestamp t = new Timestamp("2014-09-23", OFFSET_CLOCK);
+        final Timestamp t = new Timestamp("2014-09-23", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T08:00:00.000Z", t.toString());
     }
 
     @Test
     public void testParsingDateWithOffset() throws Exception {
-        final Timestamp t = new Timestamp("2014-09-23-08:00", OFFSET_CLOCK);
+        final Timestamp t = new Timestamp("2014-09-23-08:00", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T08:00:00.000Z", t.toString());
     }
 
     @Test
     public void testParsingDateTimeWithZOffset() throws Exception {
-        final Timestamp t = new Timestamp("2014-09-23T13:49:52.987654321Z", OFFSET_CLOCK);
+        final Timestamp t = new Timestamp("2014-09-23T13:49:52.987654321Z", OFFSET_CLOCK, LOCALE);
         assertEquals("2014-09-23T13:49:52.987654321Z", t.toString());
     }
 
+    @Test
+    public void testParsingDateTimeWithCommaDecimalStyleLocale() throws Exception {
+        final Locale germanLocale = Locale.GERMANY;
+        final Clock germanClock = Clock.systemUTC().withZone(ZoneId.of("+02:00")); // DST doesn't matter
+
+        // comma-decimal
+        final Timestamp t1 = new Timestamp("2014-09-23T13:49:52,987654321Z", germanClock, germanLocale);
+        assertEquals("2014-09-23T13:49:52.987654321Z", t1.toString());
+
+        // fallback to stop-decimal
+        final Timestamp t2 = new Timestamp("2014-09-23T13:49:52.987654321Z", germanClock, germanLocale);
+        assertEquals("2014-09-23T13:49:52.987654321Z", t2.toString());
+    }
+
     // Timestamp should always be in a UTC representation
     // TODO: remove spec, since `Instant` is UTC by default.
     @Test
