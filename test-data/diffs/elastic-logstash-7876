diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
index 04a65ad954a..5fa9f748cff 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
@@ -1,17 +1,18 @@
 package org.logstash.instrument.metrics.counter;
 
-
-import org.logstash.instrument.metrics.AbstractMetric;
-import org.logstash.instrument.metrics.MetricType;
-
 import java.util.List;
 import java.util.concurrent.atomic.LongAdder;
+import org.logstash.instrument.metrics.AbstractMetric;
+import org.logstash.instrument.metrics.MetricType;
 
 /**
  * A {@link CounterMetric} that is backed by a {@link Long} type.
  */
 public class LongCounter extends AbstractMetric<Long> implements CounterMetric<Long> {
 
+    private static final IllegalArgumentException NEG_COUNT_EX =
+        new IllegalArgumentException("Counters can not be incremented by negative values");
+
     private final LongAdder longAdder;
 
     /**
@@ -40,25 +41,21 @@ public void increment() {
         increment(1l);
     }
 
-    /**
-     * {@inheritDoc}
-     * throws {@link UnsupportedOperationException} if attempt is made to increment by a negative value
-     */
     @Override
     public void increment(Long by) {
         if (by < 0) {
-            throw new UnsupportedOperationException("Counters can not be incremented by negative values");
+            throw NEG_COUNT_EX;
         }
         longAdder.add(by);
     }
 
     /**
      * Optimized version of {@link #increment(Long)} to avoid auto-boxing.
-     * throws {@link UnsupportedOperationException} if attempt is made to increment by a negative value
+     * @param by Count to add
      */
     public void increment(long by) {
         if (by < 0) {
-            throw new UnsupportedOperationException("Counters can not be incremented by negative values");
+            throw NEG_COUNT_EX;
         }
         longAdder.add(by);
     }
diff --git a/logstash-core/src/test/java/org/logstash/instrument/metrics/counter/LongCounterTest.java b/logstash-core/src/test/java/org/logstash/instrument/metrics/counter/LongCounterTest.java
index 2aa46f31246..d133a61f654 100644
--- a/logstash-core/src/test/java/org/logstash/instrument/metrics/counter/LongCounterTest.java
+++ b/logstash-core/src/test/java/org/logstash/instrument/metrics/counter/LongCounterTest.java
@@ -34,7 +34,7 @@ public void increment() {
         assertThat(longCounter.getValue()).isEqualTo(INITIAL_VALUE + 1);
     }
 
-    @Test(expected = UnsupportedOperationException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void incrementByNegativeValue() {
         longCounter.increment(-100l);
     }
@@ -57,4 +57,4 @@ public void noInitialValue() {
     public void type() {
         assertThat(longCounter.type()).isEqualTo(MetricType.COUNTER_LONG.asString());
     }
-}
\ No newline at end of file
+}
