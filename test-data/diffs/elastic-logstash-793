diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index f4dde9c5b86..f5f84655996 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -51,6 +51,7 @@ class DeprecatedMethod < StandardError; end
   public
   def initialize(data={})
     @cancelled = false
+    @rerun_filters = false
 
     @data = data
     data[VERSION] = VERSION_ONE if !@data.include?(VERSION)
@@ -79,6 +80,16 @@ def cancelled?
     return @cancelled
   end # def cancelled?
 
+  public
+  def set_refilter(filter_setting)
+    @rerun_filters = filter_setting
+  end
+
+  public
+  def refilter?
+    return @rerun_filters
+  end
+
   # Create a deep-ish copy of this event.
   public
   def clone
diff --git a/lib/logstash/filters/advisor.rb b/lib/logstash/filters/advisor.rb
index 46f4d9e9b26..c00847a109d 100644
--- a/lib/logstash/filters/advisor.rb
+++ b/lib/logstash/filters/advisor.rb
@@ -167,6 +167,7 @@ def flush
           @carray = Array.new
           @sarray = Array.new
 
+          event.set_refilter(@refilter)
           # push the event
           return [event]
          end
diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index dba1848bdc1..77064661ffd 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -121,7 +121,13 @@ class LogStash::Filters::Base < LogStash::Plugin
   # example would remove an additional, non-dynamic field.
   config :remove_field, :validate => :array, :default => []
 
-  RESERVED = ["type", "tags", "exclude_tags", "include_fields", "exclude_fields", "add_tag", "remove_tag", "add_field", "remove_field", "include_any", "exclude_any"]
+  # If true, the results of the split are placed back into the filter stack, instead of the pipeline to output.
+  # This only applies to filters that create new events (e.g. split).
+  # It may be possible for this to cause an infinite filter loop. To prevent it, organize your filters with tags and conditionals.
+  # TODO(20goto10): throw a warning when refilter is used for a filter that does not create events.
+  config :refilter, :validate => :boolean, :default => false
+
+  RESERVED = ["type", "tags", "exclude_tags", "include_fields", "exclude_fields", "add_tag", "remove_tag", "add_field", "remove_field", "include_any", "exclude_any", "refilter"]
 
   public
   def initialize(params)
diff --git a/lib/logstash/filters/clone.rb b/lib/logstash/filters/clone.rb
index 162d18156e6..67bde0761f9 100644
--- a/lib/logstash/filters/clone.rb
+++ b/lib/logstash/filters/clone.rb
@@ -28,6 +28,7 @@ def filter(event)
       @logger.debug("Cloned event", :clone => clone, :event => event)
 
       # Push this new event onto the stack at the LogStash::FilterWorker
+      clone.set_refilter(@refilter)
       yield clone
     end
   end
diff --git a/lib/logstash/filters/collate.rb b/lib/logstash/filters/collate.rb
index 30afe0398a5..9932cd15201 100644
--- a/lib/logstash/filters/collate.rb
+++ b/lib/logstash/filters/collate.rb
@@ -77,6 +77,7 @@ def filter(event)
           collatedEvent["tags"] = Array.new if collatedEvent["tags"].nil?
           collatedEvent["tags"] << "collated"
           filter_matched(collatedEvent)
+          collatedEvent.set_refilter(@refilter)
           yield collatedEvent
         end # while @collatingArray.pop
         # reset collatingDone flag
diff --git a/lib/logstash/filters/elapsed.rb b/lib/logstash/filters/elapsed.rb
index 64881f5b95e..91d6def9cc6 100644
--- a/lib/logstash/filters/elapsed.rb
+++ b/lib/logstash/filters/elapsed.rb
@@ -1,3 +1,5 @@
+# encoding: utf-8
+
 # elapsed filter
 #
 # This filter tracks a pair of start/end events and calculates the elapsed
diff --git a/lib/logstash/filters/railsparallelrequest.rb b/lib/logstash/filters/railsparallelrequest.rb
index c2f54cabec8..9d4bd5a6b6c 100644
--- a/lib/logstash/filters/railsparallelrequest.rb
+++ b/lib/logstash/filters/railsparallelrequest.rb
@@ -1,4 +1,5 @@
 # encoding: utf-8
+#
 # parallel request filter
 #
 # This filter will separate out the parallel requests into separate events.
@@ -43,6 +44,7 @@ def filter(event)
           return
         else
           @recently_error.uncancel
+          @recently_error.set_refilter(@refilter)
           yield @recently_error
           @recently_error = nil
         end
diff --git a/lib/logstash/filters/split.rb b/lib/logstash/filters/split.rb
index 3524f0d6fa6..3611d748f4d 100644
--- a/lib/logstash/filters/split.rb
+++ b/lib/logstash/filters/split.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/filters/base"
 require "logstash/namespace"
+require "logstash/event"
 
 # The split filter is for splitting multiline messages into separate events.
 #
@@ -22,6 +23,10 @@ class LogStash::Filters::Split < LogStash::Filters::Base
   # The field which value is split by the terminator
   config :field, :validate => :string, :default => "message"
 
+  # If true, the array data will be passed forward as a single hash element with @field as the key.
+  # If false, treat the entire array element as a new event for further processing.
+  config :reuse_element, :validate => :boolean, :default => true
+
   public
   def register
     # Nothing to do
@@ -31,27 +36,32 @@ def register
   def filter(event)
     return unless filter?(event)
 
-    events = []
+    splits = []
 
     original_value = event[@field]
 
-    # If for some reason the field is an array of values, take the first only.
-    original_value = original_value.first if original_value.is_a?(Array)
-
-    # Using -1 for 'limit' on String#split makes ruby not drop trailing empty
-    # splits.
-    splits = original_value.split(@terminator, -1)
+    if original_value.is_a?(Array)
+      splits = original_value
+    else
+      # Using -1 for 'limit' on String#split makes ruby not drop trailing empty
+      # splits.
+      splits = original_value.split(@terminator, -1)
+    end
 
-    # Skip filtering if splitting this event resulted in only one thing found.
-    return if splits.length == 1
-    #or splits[1].empty?
+    # Skip filtering if splitting this event resulted in only one thing found
+    return if splits.length <= 1
 
     splits.each do |value|
       next if value.empty?
 
-      event_split = event.clone
-      @logger.debug("Split event", :value => value, :field => @field)
-      event_split[@field] = value
+      if @reuse_element
+        event_split = event.clone
+        @logger.debug("Split event", :value => value, :field => @field)
+        event_split[@field] = value
+      else
+        event_split = LogStash::Event.new(value)
+        event_split.set_refilter(@refilter)
+      end
       filter_matched(event_split)
 
       # Push this new event onto the stack at the LogStash::FilterWorker
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index 8ed9c7b5a52..c5055837430 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -194,14 +194,19 @@ def filterworker
           break
         end
 
-
         # TODO(sissel): we can avoid the extra array creation here
         # if we don't guarantee ordering of origin vs created events.
         # - origin event is one that comes in naturally to the filter worker.
         # - created events are emitted by filters like split or metrics
         events = [event]
-        filter(event) do |newevent|
-          events << newevent
+        done = false
+        while (!done)
+          filter(event) do |newevent|
+            events << newevent
+          end
+          remainder = events.select { |ev| ev.refilter? && !ev.cancelled? }
+          done = remainder.empty?
+          event = remainder.first unless done
         end
         events.each do |event|
           next if event.cancelled?
@@ -259,6 +264,7 @@ def plugin(plugin_type, name, *args)
   end
 
   def filter(event, &block)
+    event.set_refilter(false)
     @filter_func.call(event, &block)
   end
 
