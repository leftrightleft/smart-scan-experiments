diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index d1554408d5f..44a3bfe079b 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -69,7 +69,7 @@ def worker_setup
     else
       define_singleton_method(:handle, method(:handle_worker))
       @worker_queue = SizedQueue.new(20)
-      @worker_plugins = @workers.times.map { self.class.new(params.merge("workers" => 1, "codec" => @codec.clone)) }
+      @worker_plugins = @workers.times.map { self.class.new(@original_params.merge("workers" => 1)) }
       @worker_plugins.map.with_index do |plugin, i|
         Thread.new(original_params, @worker_queue) do |params, queue|
           LogStash::Util::set_thread_name(">#{self.class.config_name}.#{i}")
diff --git a/spec/outputs/base_spec.rb b/spec/outputs/base_spec.rb
index 50c517fdfdf..2702d9603ce 100644
--- a/spec/outputs/base_spec.rb
+++ b/spec/outputs/base_spec.rb
@@ -6,6 +6,8 @@ class LogStash::Outputs::NOOP < LogStash::Outputs::Base
   config_name "noop"
   milestone 2
 
+  config :dummy_option, :validate => :string
+
   def register; end
 
   def receive(event)
@@ -13,6 +15,16 @@ def receive(event)
   end
 end
 
+describe "LogStash::Outputs::Base#worker_setup" do
+  it "should create workers using original parameters except workers = 1" do
+    params = { "dummy_option" => "potatoes", "codec" => "json", "workers" => 2 }
+    worker_params = params.dup; worker_params["workers"] = 1
+    output = LogStash::Outputs::NOOP.new(params.dup)
+    expect(LogStash::Outputs::NOOP).to receive(:new).twice.with(worker_params).and_call_original
+    output.worker_setup
+  end
+end
+
 describe "LogStash::Outputs::Base#output?" do
   it "should filter by type" do
     output = LogStash::Outputs::NOOP.new("type" => "noop")
