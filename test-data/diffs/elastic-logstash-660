diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index d3c151da83e..ad2ff0c6dad 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -57,11 +57,6 @@ def initialize(data={})
     data["@version"] = "1" if !@data.include?("@version")
   end # def initialize
 
-  public
-  def self.from_json(json)
-    return self.new(JSON.parse(json))
-  end # def from_json
-
   public
   def cancel
     @cancelled = true
@@ -247,15 +242,6 @@ def sprintf(format)
     end # format.gsub...
   end # def sprintf
 
-  # Shims to remove after event v1 is the default.
-  def tags=(value); self["tags"] = value; end
-  def tags; return self["tags"]; end
-  def message=(value); self["message"] = value; end
-  def source=(value); self["source"] = value; end
-  def type=(value); self["type"] = value; end
-  def type; return self["type"]; end
-  def fields; return self.to_hash; end
-
   def tag(value)
     # Generalize this method for more usability
     self["tags"] ||= []
diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index ba7f670fad9..700f760092b 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -158,7 +158,7 @@ def filter_matched(event)
   protected
   def filter?(event)
     if !@type.empty?
-      if event.type != @type
+      if event["type"] != @type
         @logger.debug? and @logger.debug(["filters/#{self.class.name}: Skipping event because type doesn't match #{@type}", event])
         return false
       end
diff --git a/spec/examples/syslog.rb b/spec/examples/syslog.rb
index c69748deed3..885cf9467f7 100644
--- a/spec/examples/syslog.rb
+++ b/spec/examples/syslog.rb
@@ -33,15 +33,15 @@
   CONFIG
 
   sample("message" => "<164>Oct 26 15:19:25 1.2.3.4 %ASA-4-106023: Deny udp src DRAC:10.1.2.3/43434 dst outside:192.168.0.1/53 by access-group \"acl_drac\" [0x0, 0x0]", "type" => "syslog") do
-    insist { subject.type } == "syslog"
-    insist { subject.tags }.nil?
+    insist { subject["type"] } == "syslog"
+    insist { subject["tags"] }.nil?
     insist { subject["syslog_pri"] } == "164"
   end
 
   # Single digit day
   sample("message" => "<164>Oct  6 15:19:25 1.2.3.4 %ASA-4-106023: Deny udp src DRAC:10.1.2.3/43434 dst outside:192.168.0.1/53 by access-group \"acl_drac\" [0x0, 0x0]", "type" => "syslog") do
-    insist { subject.type } == "syslog"
-    insist { subject.tags }.nil?
+    insist { subject["type"] } == "syslog"
+    insist { subject["tags"] }.nil?
     insist { subject["syslog_pri"] } == "164"
     #insist { subject.timestamp } == "2012-10-26T15:19:25.000Z"
   end
diff --git a/spec/filters/clone.rb b/spec/filters/clone.rb
index d502534362f..83152f52c36 100644
--- a/spec/filters/clone.rb
+++ b/spec/filters/clone.rb
@@ -46,21 +46,21 @@
       insist { subject }.is_a? Array
       insist { subject.length } == 3
 
-      insist { subject[0].type } == "nginx-access"
+      insist { subject[0]["type"] } == "nginx-access"
       #Initial event remains unchanged
-      insist { subject[0].tags }.include? "TESTLOG"
-      reject { subject[0].tags }.include? "RABBIT"
-      reject { subject[0].tags }.include? "NO_ES"
+      insist { subject[0]["tags"] }.include? "TESTLOG"
+      reject { subject[0]["tags"] }.include? "RABBIT"
+      reject { subject[0]["tags"] }.include? "NO_ES"
       #All clones go through filter_matched
-      insist { subject[1].type } == "nginx-access-clone1"
-      reject { subject[1].tags }.include? "TESTLOG"
-      insist { subject[1].tags }.include? "RABBIT"
-      insist { subject[1].tags }.include? "NO_ES"
+      insist { subject[1]["type"] } == "nginx-access-clone1"
+      reject { subject[1]["tags"] }.include? "TESTLOG"
+      insist { subject[1]["tags"] }.include? "RABBIT"
+      insist { subject[1]["tags"] }.include? "NO_ES"
 
-      insist { subject[2].type } == "nginx-access-clone2"
-      reject { subject[2].tags }.include? "TESTLOG"
-      insist { subject[2].tags }.include? "RABBIT"
-      insist { subject[2].tags }.include? "NO_ES"
+      insist { subject[2]["type"] } == "nginx-access-clone2"
+      reject { subject[2]["tags"] }.include? "TESTLOG"
+      insist { subject[2]["tags"] }.include? "RABBIT"
+      insist { subject[2]["tags"] }.include? "NO_ES"
 
     end
   end
diff --git a/spec/filters/grep.rb b/spec/filters/grep.rb
index c04913591e0..dae37a3deb6 100644
--- a/spec/filters/grep.rb
+++ b/spec/filters/grep.rb
@@ -141,7 +141,7 @@
 
     sample("type" => "grepper", "str" => "test") do
       reject { subject }.nil?
-      insist { subject["new_field"]} == subject.type
+      insist { subject["new_field"]} == subject["type"]
     end
   end
 
@@ -180,7 +180,7 @@
 
     sample("tags" => ["tag"], "str" => "test") do
       reject { subject }.nil?
-      insist { subject.tags} == ["tag", "new_tag"]
+      insist { subject["tags"]} == ["tag", "new_tag"]
     end
   end
 
@@ -197,7 +197,7 @@
 
     sample("tags" => ["tag"], "str" => "test") do
       reject { subject }.nil?
-      insist { subject.tags} == ["tag", "new_tag"]
+      insist { subject["tags"]} == ["tag", "new_tag"]
     end
   end
 
@@ -214,7 +214,7 @@
 
     sample("tags" => ["tag"], "str" => "non-matching") do
       reject { subject }.nil?
-      insist { subject.tags} == ["tag"]
+      insist { subject["tags"]} == ["tag"]
     end
   end
 
@@ -230,7 +230,7 @@
 
     sample("tags" => ["tag"], "str" => "test") do
       reject { subject }.nil?
-      insist { subject.tags} == ["tag", subject["str"]]
+      insist { subject["tags"]} == ["tag", subject["str"]]
     end
   end
 
diff --git a/spec/filters/grok.rb b/spec/filters/grok.rb
index c4eee03af45..b23ec968d60 100644
--- a/spec/filters/grok.rb
+++ b/spec/filters/grok.rb
@@ -248,7 +248,7 @@
         }
       CONFIG
       sample "hello world" do
-        insist { subject.tags }.nil?
+        insist { subject["tags"] }.nil?
         insist { subject["foo"] } == "hello"
       end
     end
@@ -281,8 +281,8 @@
     CONFIG
 
     sample("status" => 403) do
-      reject { subject.tags }.include?("_grokparsefailure")
-      insist { subject.tags }.include?("four_oh_three")
+      reject { subject["tags"] }.include?("_grokparsefailure")
+      insist { subject["tags"] }.include?("four_oh_three")
     end
   end
 
@@ -298,7 +298,7 @@
 
     sample("version" => 1.0) do
       insist { subject["tags"] }.include?("one_point_oh")
-      insist { subject.tags }.include?("one_point_oh")
+      insist { subject["tags"] }.include?("one_point_oh")
     end
   end
 
diff --git a/spec/filters/json.rb b/spec/filters/json.rb
index 4634568ab4b..08005023773 100644
--- a/spec/filters/json.rb
+++ b/spec/filters/json.rb
@@ -51,7 +51,7 @@
     CONFIG
 
     sample "invalid json" do
-      insist { subject.tags }.include?("_jsonparsefailure")
+      insist { subject["tags"] }.include?("_jsonparsefailure")
     end
   end
 end
diff --git a/spec/filters/mutate.rb b/spec/filters/mutate.rb
index 2db302934cf..61f0c76e72a 100644
--- a/spec/filters/mutate.rb
+++ b/spec/filters/mutate.rb
@@ -157,8 +157,8 @@
     CONFIG
 
     sample "whatever" do
-      reject { subject.fields }.include?("nosuchfield")
-      reject { subject.fields }.include?("hello")
+      reject { subject }.include?("nosuchfield")
+      reject { subject }.include?("hello")
     end
   end
 
diff --git a/spec/filters/railsparallelrequest.rb b/spec/filters/railsparallelrequest.rb
index 0f247965f24..a43a926a9fd 100644
--- a/spec/filters/railsparallelrequest.rb
+++ b/spec/filters/railsparallelrequest.rb
@@ -8,11 +8,11 @@
     it "should not process same event twice" do
       filter = LogStash::Filters::Railsparallelrequest.new
       event = LogStash::Event.new({message: "hello world"})
-      event.tags=[]
+      event["tags"]=[]
       filter.filter event
-      insist { event.tags } == ["railsparallelrequest"]
+      insist { event["tags"] } == ["railsparallelrequest"]
       filter.filter event
-      insist { event.tags } == ["railsparallelrequest"]
+      insist { event["tags"] } == ["railsparallelrequest"]
     end
 
     it "should merge multiple events into single event based on unique UUID" do
@@ -106,7 +106,7 @@
 end
 def event data
   event = LogStash::Event.new(data)
-  event.tags=[]
+  event["tags"]=[]
   event
 end
 
