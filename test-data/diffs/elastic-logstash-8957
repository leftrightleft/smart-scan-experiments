diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index 9040482ddd4..ea2273967af 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -16,8 +16,7 @@ class FilterDelegator
 
     attr_reader :id
 
-    def initialize(logger, klass, metric, execution_context, plugin_args)
-      @logger = logger
+    def initialize(klass, metric, execution_context, plugin_args)
       @klass = klass
       @id = plugin_args["id"]
       @filter = klass.new(plugin_args)
diff --git a/logstash-core/lib/logstash/java_filter_delegator.rb b/logstash-core/lib/logstash/java_filter_delegator.rb
index ba7d42df972..9cf52a6b930 100644
--- a/logstash-core/lib/logstash/java_filter_delegator.rb
+++ b/logstash-core/lib/logstash/java_filter_delegator.rb
@@ -17,8 +17,7 @@ class JavaFilterDelegator
 
     attr_reader :id
 
-    def initialize(logger, klass, metric, execution_context, plugin_args)
-      @logger = logger
+    def initialize(klass, metric, execution_context, plugin_args)
       @klass = klass
       @id = plugin_args["id"]
       @filter = klass.new(plugin_args)
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 99f74387a7c..3ed9eeffb76 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -8,7 +8,6 @@ module LogStash class OutputDelegator
   attr_reader :metric, :metric_events, :strategy, :namespaced_metric, :metric_events, :id
 
   def initialize(logger, output_class, metric, execution_context, strategy_registry, plugin_args)
-    @logger = logger
     @output_class = output_class
     @metric = metric
     @id = plugin_args["id"]
@@ -24,7 +23,7 @@ def initialize(logger, output_class, metric, execution_context, strategy_registr
     @time_metric = @metric_events.counter(:duration_in_millis)
     @strategy = strategy_registry.
                   class_for(self.concurrency).
-                  new(@logger, @output_class, @namespaced_metric, execution_context, plugin_args)
+                  new(logger, @output_class, @namespaced_metric, execution_context, plugin_args)
   end
 
   def config_name
diff --git a/logstash-core/lib/logstash/plugins/plugin_factory.rb b/logstash-core/lib/logstash/plugins/plugin_factory.rb
index a9432b9d12e..78f7bb95ae5 100644
--- a/logstash-core/lib/logstash/plugins/plugin_factory.rb
+++ b/logstash-core/lib/logstash/plugins/plugin_factory.rb
@@ -85,7 +85,7 @@ def plugin(plugin_type, name, line, column, *args)
         if plugin_type == "output"
           OutputDelegator.new(@logger, klass, type_scoped_metric, execution_context, OutputDelegatorStrategyRegistry.instance, args)
         elsif plugin_type == "filter"
-          @filter_class.new(@logger, klass, type_scoped_metric, execution_context, args)
+          @filter_class.new(klass, type_scoped_metric, execution_context, args)
         else # input or codec plugin
           plugin_instance = klass.new(args)
           scoped_metric = type_scoped_metric.namespace(id.to_sym)
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index b64ac834e4a..5f5861e7507 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -14,8 +14,7 @@ def increment(_)
   end
 
   include_context "execution_context"
-  
-  let(:logger) { double(:logger) }
+
   let(:filter_id) { "my-filter" }
   let(:config) do
     { "host" => "127.0.0.1", "id" => filter_id }
@@ -43,11 +42,11 @@ def register; end
     end
   end
 
-  subject { described_class.new(logger, plugin_klass, metric, execution_context, config) }
+  subject { described_class.new(plugin_klass, metric, execution_context, config) }
 
   it "create a plugin with the passed options" do
     expect(plugin_klass).to receive(:new).with(config).and_return(plugin_klass.new(config))
-    described_class.new(logger, plugin_klass, metric, execution_context, config)
+    described_class.new(plugin_klass, metric, execution_context, config)
   end
 
   context "when the plugin support flush" do
diff --git a/logstash-core/spec/logstash/java_filter_delegator_spec.rb b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
index d3180f11c8e..4d8335a4035 100644
--- a/logstash-core/spec/logstash/java_filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
@@ -14,8 +14,7 @@ def increment(_)
   end
 
   include_context "execution_context"
-  
-  let(:logger) { double(:logger) }
+
   let(:filter_id) { "my-filter" }
   let(:config) do
     { "host" => "127.0.0.1", "id" => filter_id }
@@ -43,11 +42,11 @@ def register; end
     end
   end
 
-  subject { described_class.new(logger, plugin_klass, metric, execution_context, config) }
+  subject { described_class.new(plugin_klass, metric, execution_context, config) }
 
   it "create a plugin with the passed options" do
     expect(plugin_klass).to receive(:new).with(config).and_return(plugin_klass.new(config))
-    described_class.new(logger, plugin_klass, metric, execution_context, config)
+    described_class.new(plugin_klass, metric, execution_context, config)
   end
 
   context "when the plugin support flush" do
