diff --git a/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java b/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
index e382cba4172..233e7de92c9 100644
--- a/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
+++ b/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
@@ -1,25 +1,28 @@
 package org.logstash.execution;
 
+import org.logstash.execution.plugins.PluginConfigSpec;
+import org.logstash.execution.plugins.StringConfigValueConverter;
+
 import java.nio.file.Path;
 import java.util.Collection;
 import java.util.Map;
-import org.logstash.execution.plugins.PluginConfigSpec;
 
 /**
  * LS Configuration example. Should be implemented like Spark config or Hadoop job config classes.
  */
 public final class LsConfiguration {
 
+    private Map<String, String> rawSettings;
+
     /**
      * @param raw Configuration Settings Map. Values are serialized.
      */
     public LsConfiguration(final Map<String, String> raw) {
-
+        rawSettings = raw;
     }
 
     public <T> T get(final PluginConfigSpec<T> configSpec) {
-        // TODO: Implement
-        return null;
+        return configSpec.getValue(rawSettings.get(configSpec.name()));
     }
 
     public boolean contains(final PluginConfigSpec<?> configSpec) {
@@ -33,53 +36,50 @@ public Collection<String> allKeys() {
 
     public static PluginConfigSpec<String> stringSetting(final String name) {
         return new PluginConfigSpec<>(
-            name, String.class, null, false, false
+                name, String.class, null, new StringConfigValueConverter(), false, false
+        );
+    }
+
+    public static PluginConfigSpec<String> stringSetting(final String name, final String def) {
+        return new PluginConfigSpec<>(
+                name, String.class, def, new StringConfigValueConverter(), false, false
         );
     }
 
     public static PluginConfigSpec<String> requiredStringSetting(final String name) {
-        return new PluginConfigSpec<>(name, String.class, null, false, true);
+        return new PluginConfigSpec<>(name, String.class, null, new StringConfigValueConverter(), false, true);
     }
 
     public static PluginConfigSpec<Long> numSetting(final String name) {
         return new PluginConfigSpec<>(
-            name, Long.class, null, false, false
+                name, Long.class, null, null, false, false
         );
     }
 
     public static PluginConfigSpec<Long> numSetting(final String name, final long defaultValue) {
         return new PluginConfigSpec<>(
-            name, Long.class, defaultValue, false, false
+                name, Long.class, defaultValue, null, false, false
         );
     }
 
     public static PluginConfigSpec<Path> pathSetting(final String name) {
-        return new PluginConfigSpec<>(name, Path.class, null, false, false);
+        return new PluginConfigSpec<>(name, Path.class, null, null, false, false);
     }
 
     public static PluginConfigSpec<Boolean> booleanSetting(final String name) {
-        return new PluginConfigSpec<>(name, Boolean.class, null, false, false);
+        return new PluginConfigSpec<>(name, Boolean.class, null, null, false, false);
     }
 
     @SuppressWarnings("unchecked")
     public static PluginConfigSpec<Map<String, String>> hashSetting(final String name) {
-        return new PluginConfigSpec(name, Map.class, null, false, false);
-    }
-
-    @SuppressWarnings("unchecked")
-    public static <T> PluginConfigSpec<Map<String, T>> requiredFlatHashSetting(
-        final String name, Class<T> type) {
-        //TODO: enforce subtype
-        return new PluginConfigSpec(
-            name, Map.class, null, false, true
-        );
+        return new PluginConfigSpec(name, Map.class, null, null, false, false);
     }
 
     @SuppressWarnings("unchecked")
-    public static PluginConfigSpec<Map<String, LsConfiguration>> requiredNestedHashSetting(
-        final String name, final Collection<PluginConfigSpec<?>> spec) {
+    public static PluginConfigSpec<Map<String, LsConfiguration>> requiredHashSetting(
+            final String name, final Collection<PluginConfigSpec<?>> spec) {
         return new PluginConfigSpec(
-            name, Map.class, null, false, true, spec
+                name, Map.class, null, null, false, true
         );
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/execution/plugins/ConfigValueConverter.java b/logstash-core/src/main/java/org/logstash/execution/plugins/ConfigValueConverter.java
new file mode 100644
index 00000000000..649548ca897
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/execution/plugins/ConfigValueConverter.java
@@ -0,0 +1,5 @@
+package org.logstash.execution.plugins;
+
+public interface ConfigValueConverter<T> {
+    T convertValue(String rawValue);
+}
diff --git a/logstash-core/src/main/java/org/logstash/execution/plugins/PluginConfigSpec.java b/logstash-core/src/main/java/org/logstash/execution/plugins/PluginConfigSpec.java
index 006a708b97e..158c3a4b812 100644
--- a/logstash-core/src/main/java/org/logstash/execution/plugins/PluginConfigSpec.java
+++ b/logstash-core/src/main/java/org/logstash/execution/plugins/PluginConfigSpec.java
@@ -3,6 +3,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Map;
+import java.util.Objects;
 
 public final class PluginConfigSpec<T> {
 
@@ -10,6 +11,8 @@ public final class PluginConfigSpec<T> {
 
     private final Class<T> type;
 
+    private final ConfigValueConverter<T> valueConverter;
+
     private final boolean deprecated;
 
     private final boolean required;
@@ -19,15 +22,17 @@ public final class PluginConfigSpec<T> {
     private final Collection<PluginConfigSpec<?>> children;
 
     public PluginConfigSpec(final String name, final Class<T> type,
-        final T defaultValue, final boolean deprecated, final boolean required) {
-        this(name, type, defaultValue, deprecated, required, Collections.emptyList());
+                            final T defaultValue, final ConfigValueConverter<T> configValueConverter,
+                            final boolean deprecated, final boolean required) {
+        this(name, type, defaultValue, configValueConverter, deprecated, required, Collections.emptyList());
     }
 
-    public PluginConfigSpec(final String name, final Class<T> type,
-        final T defaultValue, final boolean deprecated, final boolean required,
-        final Collection<PluginConfigSpec<?>> children) {
+    public PluginConfigSpec(final String name, final Class<T> type, final T defaultValue,
+                            final ConfigValueConverter<T> configValueConverter, final boolean deprecated,
+                            final boolean required, final Collection<PluginConfigSpec<?>> children) {
         this.name = name;
         this.type = type;
+        this.valueConverter = configValueConverter;
         this.defaultValue = defaultValue;
         this.deprecated = deprecated;
         this.required = required;
@@ -61,4 +66,20 @@ public Class<T> type() {
         return type;
     }
 
+    public T getValue(String raw) {
+        return raw == null
+                ? defaultValue()
+                : valueConverter.convertValue(raw);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || !(o instanceof PluginConfigSpec)) {
+            return false;
+        }
+
+        PluginConfigSpec p = (PluginConfigSpec)o;
+        return Objects.equals(name, p.name);
+    }
+
 }
diff --git a/logstash-core/src/main/java/org/logstash/execution/plugins/StringConfigValueConverter.java b/logstash-core/src/main/java/org/logstash/execution/plugins/StringConfigValueConverter.java
new file mode 100644
index 00000000000..1abd56d8049
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/execution/plugins/StringConfigValueConverter.java
@@ -0,0 +1,8 @@
+package org.logstash.execution.plugins;
+
+public class StringConfigValueConverter implements ConfigValueConverter<String> {
+    @Override
+    public String convertValue(String rawValue) {
+        return rawValue;
+    }
+}
