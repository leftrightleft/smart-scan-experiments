diff --git a/lib/logstash/codecs/compress_spooler.rb b/lib/logstash/codecs/compress_spooler.rb
index 1e4f17bead8..d4a452777d3 100644
--- a/lib/logstash/codecs/compress_spooler.rb
+++ b/lib/logstash/codecs/compress_spooler.rb
@@ -21,8 +21,6 @@ def decode(data)
     z.finish
     z.close
     data.each do |event|
-      event = LogStash::Event.new(event)
-      event["@timestamp"] = Time.at(event["@timestamp"]).utc if event["@timestamp"].is_a? Float
       yield event
     end
   end # def decode
diff --git a/lib/logstash/codecs/edn.rb b/lib/logstash/codecs/edn.rb
index f5686db0bf1..c24e12933a1 100644
--- a/lib/logstash/codecs/edn.rb
+++ b/lib/logstash/codecs/edn.rb
@@ -13,10 +13,10 @@ def register
   public
   def decode(data)
     begin
-      yield LogStash::Event.new(EDN.read(data))
+      yield EDN.read(data)
     rescue
       @logger.info("EDN parse failure. Falling back to plain-text", :error => e, :data => data)
-      yield LogStash::Event.new("message" => data)
+      yield data
     end
   end
 
diff --git a/lib/logstash/codecs/edn_lines.rb b/lib/logstash/codecs/edn_lines.rb
index 8b6b490c239..04fb55e30e1 100644
--- a/lib/logstash/codecs/edn_lines.rb
+++ b/lib/logstash/codecs/edn_lines.rb
@@ -20,10 +20,10 @@ def initialize(params={})
   def decode(data)
     @lines.decode(data) do |event|
       begin
-        yield LogStash::Event.new(EDN.read(event["message"]))
+        yield EDN.read(event["message"])
       rescue => e
         @logger.info("EDN parse failure. Falling back to plain-text", :error => e, :data => data)
-        yield LogStash::Event.new("message" => data)
+        yield data
       end
     end
   end
diff --git a/lib/logstash/codecs/fluent.rb b/lib/logstash/codecs/fluent.rb
index d1e6acd336e..7780d19d5e8 100644
--- a/lib/logstash/codecs/fluent.rb
+++ b/lib/logstash/codecs/fluent.rb
@@ -37,10 +37,10 @@ def register
   def decode(data)
     @decoder.feed(data)
     @decoder.each do |tag, epochtime, map|
-      event = LogStash::Event.new(map.merge(
+      event = map.merge(
         "@timestamp" => Time.at(epochtime),
         "tags" => tag
-      ))
+      )
       yield event
     end
   end # def decode
diff --git a/lib/logstash/codecs/graphite.rb b/lib/logstash/codecs/graphite.rb
index 0c3cb4e362b..41050603f51 100644
--- a/lib/logstash/codecs/graphite.rb
+++ b/lib/logstash/codecs/graphite.rb
@@ -61,9 +61,11 @@ def initialize(params={})
   
   public
   def decode(data)
-    @lines.decode(data) do |event|
-      name, value, time = event["message"].split(" ")
-      yield LogStash::Event.new(name => value.to_f, "@timestamp" => Time.at(time.to_i).gmtime)
+    @lines.decode(data) do |event_input|
+      name, value, time = event_input["message"].split(" ")
+      event = { "name" => value.to_f,
+                "@timestamp" => Time.at(time.to_i).gmtime }
+      yield event
     end # @lines.decode
   end # def decode
 
diff --git a/lib/logstash/codecs/json.rb b/lib/logstash/codecs/json.rb
index 10b62adc8ed..805a3d13302 100644
--- a/lib/logstash/codecs/json.rb
+++ b/lib/logstash/codecs/json.rb
@@ -33,10 +33,10 @@ def register
   def decode(data)
     data = @converter.convert(data)
     begin
-      yield LogStash::Event.new(JSON.parse(data))
+      yield JSON.parse(data)
     rescue JSON::ParserError => e
       @logger.info("JSON parse failure. Falling back to plain-text", :error => e, :data => data)
-      yield LogStash::Event.new("message" => data)
+      yield data
     end
   end # def decode
 
diff --git a/lib/logstash/codecs/json_lines.rb b/lib/logstash/codecs/json_lines.rb
index 5ea37c5fdc1..f6716233dc9 100644
--- a/lib/logstash/codecs/json_lines.rb
+++ b/lib/logstash/codecs/json_lines.rb
@@ -34,10 +34,10 @@ def decode(data)
 
     @lines.decode(data) do |event|
       begin
-        yield LogStash::Event.new(JSON.parse(event["message"]))
+        yield JSON.parse(event["message"])
       rescue JSON::ParserError => e
         @logger.info("JSON parse failure. Falling back to plain-text", :error => e, :data => data)
-        yield LogStash::Event.new("message" => event["message"])
+        yield event["message"]
       end
     end
   end # def decode
diff --git a/lib/logstash/codecs/line.rb b/lib/logstash/codecs/line.rb
index 21ae47a892b..71f8b44e005 100644
--- a/lib/logstash/codecs/line.rb
+++ b/lib/logstash/codecs/line.rb
@@ -34,7 +34,7 @@ def register
   public
   def decode(data)
     @buffer.extract(data).each do |line|
-      yield LogStash::Event.new("message" => @converter.convert(line))
+      yield @converter.convert(line)
     end
   end # def decode
 
@@ -42,7 +42,7 @@ def decode(data)
   def flush(&block)
     remainder = @buffer.flush
     if !remainder.empty?
-      block.call(LogStash::Event.new({"message" => remainder}))
+      block.call(remainder)
     end
   end
 
diff --git a/lib/logstash/codecs/msgpack.rb b/lib/logstash/codecs/msgpack.rb
index 05dedf449c5..fbdb7be53d0 100644
--- a/lib/logstash/codecs/msgpack.rb
+++ b/lib/logstash/codecs/msgpack.rb
@@ -17,8 +17,10 @@ def register
   def decode(data)
     begin
       # Msgpack does not care about UTF-8
-      event = LogStash::Event.new(MessagePack.unpack(data))
-      event["@timestamp"] = Time.at(event["@timestamp"]).utc if event["@timestamp"].is_a? Float
+      event = MessagePack.unpack(data)
+      if !event.is_a? Hash
+          event = { "message" => event }
+      end
       event["tags"] ||= []
       if @format
         event["message"] ||= event.sprintf(@format)
@@ -27,6 +29,9 @@ def decode(data)
       # Treat as plain text and try to do the best we can with it?
       @logger.warn("Trouble parsing msgpack input, falling back to plain text",
                    :input => data, :exception => e)
+      if !event.is_a? Hash
+          event = { "message" => event }
+      end
       event["message"] = data
       event["tags"] ||= []
       event["tags"] << "_msgpackparsefailure"
diff --git a/lib/logstash/codecs/multiline.rb b/lib/logstash/codecs/multiline.rb
index 4509260ca2f..02106954736 100644
--- a/lib/logstash/codecs/multiline.rb
+++ b/lib/logstash/codecs/multiline.rb
@@ -161,9 +161,9 @@ def buffer(text)
 
   def flush(&block)
     if @buffer.any?
-      event = LogStash::Event.new("@timestamp" => @time, "message" => @buffer.join("\n"))
+      event = { "@timestamp" => @time, "message" => @buffer.join("\n") }
       # Tag multiline events
-      event.tag @multiline_tag if @multiline_tag && @buffer.size > 1
+      event["tag"] = @multiline_tag if @multiline_tag && @buffer.size > 1
 
       yield event
       @buffer = []
diff --git a/lib/logstash/codecs/netflow.rb b/lib/logstash/codecs/netflow.rb
index ce88c509dbf..f252f7a0e54 100644
--- a/lib/logstash/codecs/netflow.rb
+++ b/lib/logstash/codecs/netflow.rb
@@ -48,7 +48,7 @@ def decode(payload, &block)
 
     flowset.records.each do |record|
       if flowset.version == 5
-        event = LogStash::Event.new
+        event = {}
 
         # FIXME Probably not doing this right WRT JRuby?
         #
@@ -153,10 +153,10 @@ def decode(payload, &block)
           records = array.read(record.flowset_data)
 
           records.each do |r|
-            event = LogStash::Event.new(
+            event = {
               "@timestamp" => Time.at(flowset.unix_sec).utc,
               @target => {}
-            )
+            }
 
             # Fewer fields in the v9 header
             ['version', 'flow_seq_num'].each do |f|
diff --git a/lib/logstash/codecs/oldlogstashjson.rb b/lib/logstash/codecs/oldlogstashjson.rb
index 800c1891620..c52d0230fd9 100644
--- a/lib/logstash/codecs/oldlogstashjson.rb
+++ b/lib/logstash/codecs/oldlogstashjson.rb
@@ -17,7 +17,7 @@ def decode(data)
       obj = JSON.parse(data.force_encoding("UTF-8"))
     rescue JSON::ParserError => e
       @logger.info("JSON parse failure. Falling back to plain-text", :error => e, :data => data)
-      yield LogStash::Event.new("message" => data)
+      yield data
       return
     end
 
@@ -29,7 +29,7 @@ def decode(data)
     end
 
     h.merge!(obj["@fields"]) if obj["@fields"].is_a?(Hash)
-    yield LogStash::Event.new(h)
+    yield h
   end # def decode
 
   public
diff --git a/lib/logstash/codecs/plain.rb b/lib/logstash/codecs/plain.rb
index 40071f5addc..c6d1a9bee70 100644
--- a/lib/logstash/codecs/plain.rb
+++ b/lib/logstash/codecs/plain.rb
@@ -33,7 +33,7 @@ def register
 
   public
   def decode(data)
-    yield LogStash::Event.new("message" => @converter.convert(data))
+    yield @converter.convert(data)
   end # def decode
 
   public
diff --git a/lib/logstash/inputs/base.rb b/lib/logstash/inputs/base.rb
index 9cdc9773737..3dcdaab726d 100644
--- a/lib/logstash/inputs/base.rb
+++ b/lib/logstash/inputs/base.rb
@@ -107,6 +107,16 @@ def to_event(raw, source)
 
   protected
   def decorate(event)
+    # Create the event hash from the input
+    if event.instance_of? LogStash::Event
+        next
+    elsif event.is_a? Hash
+        event = LogStash::Event.new(event)
+    else
+        event = LogStash::Event.new("message" => event)
+    end
+    event["@timestamp"] = Time.at(event["@timestamp"]).utc if event["@timestamp"].is_a? Float
+
     # Only set 'type' if not already set. This is backwards-compatible behavior
     event["type"] = @type if @type && !event.include?("type")
 
