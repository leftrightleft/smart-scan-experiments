diff --git a/qa/integration/specs/01_logstash_bin_smoke_spec.rb b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
index 7e55432c3ea..545092c3852 100644
--- a/qa/integration/specs/01_logstash_bin_smoke_spec.rb
+++ b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
@@ -29,7 +29,7 @@
   let(:file_config2) { Stud::Temporary.file.path }
   let(:file_config3) { Stud::Temporary.file.path }
 
-  let(:num_retries) { 10 }
+  let(:num_retries) { 50 }
   let(:config1) { config_to_temp_file(@fixture.config("root", { :port => port1, :random_file => file_config1 })) }
   let(:config2) { config_to_temp_file(@fixture.config("root", { :port => port2 , :random_file => file_config2 })) }
   let(:config3) { config_to_temp_file(@fixture.config("root", { :port => port3, :random_file => file_config3 })) }
@@ -42,7 +42,7 @@
   it "can start the embedded http server on default port 9600" do
     @ls1.start_with_stdin
     try(num_retries) do
-      expect(is_port_open?(9600)).to be true
+      expect(is_port_open?(9600)).to be(true)
     end
   end
 
@@ -56,7 +56,7 @@
       expect(is_port_open?(9600)).to be true
 
       @ls2.spawn_logstash("-f", config2, "--path.data", tmp_data_path)
-      try(20) do
+      try(num_retries) do
         expect(@ls2.exited?).to be(true)
       end
       expect(@ls2.exit_code).to be(1)
@@ -131,7 +131,7 @@
   it "should abort if both -f and -e are specified" do
     config_string = "input { tcp { port => #{port1} } }"
     @ls1.spawn_logstash("-e", config_string, "-f", config2)
-    try(20) do
+    try(num_retries) do
       expect(@ls1.exited?).to be(true)
     end
     expect(@ls1.exit_code).to be(1)
diff --git a/qa/integration/specs/env_variables_config_spec.rb b/qa/integration/specs/env_variables_config_spec.rb
index 801ad5179b6..d7594c90166 100644
--- a/qa/integration/specs/env_variables_config_spec.rb
+++ b/qa/integration/specs/env_variables_config_spec.rb
@@ -13,7 +13,7 @@
     @fixture.teardown
   }
   
-  let(:num_retries) { 10 }
+  let(:num_retries) { 50 }
   let(:test_tcp_port) { random_port }
   let(:test_tag) { "environment_variables_are_evil" }
   let(:test_path) { Stud::Temporary.directory }
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 3bbc6a88c3e..1cc5dcf4211 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -23,14 +23,9 @@
   it "can retrieve event stats" do
     logstash_service = @fixture.get_service("logstash")
     logstash_service.start_with_stdin
+    logstash_service.wait_for_logstash
     number_of_events.times { logstash_service.write_to_stdin("Hello world") }
 
-    begin
-      sleep(1) while (result = logstash_service.monitoring_api.event_stats).nil?
-    rescue
-      retry
-    end
-
     Stud.try(max_retry.times, RSpec::Expectations::ExpectationNotMetError) do
        result = logstash_service.monitoring_api.event_stats
        expect(result["in"]).to eq(number_of_events)
diff --git a/qa/integration/specs/settings_spec.rb b/qa/integration/specs/settings_spec.rb
index b552a593eba..8e0972f1939 100644
--- a/qa/integration/specs/settings_spec.rb
+++ b/qa/integration/specs/settings_spec.rb
@@ -28,7 +28,7 @@
     FileUtils.mv("#{@logstash_service.application_settings_file}.original", @logstash_service.application_settings_file)
   }
 
-  let(:num_retries) { 15 }
+  let(:num_retries) { 50 }
   let(:test_port) { random_port }
   let(:temp_dir) { Stud::Temporary.directory("logstash-settings-test") }
   let(:tcp_config) { @fixture.config("root", { :port => test_port }) }
@@ -46,6 +46,7 @@ def overwrite_settings(settings)
   it "should start with a new data dir" do
     change_setting("path.data", temp_dir)
     @logstash_service.spawn_logstash("-e", tcp_config)
+    @logstash_service.wait_for_logstash
     # check LS is up and running with new data path
     try(num_retries) do
       expect(is_port_open?(test_port)).to be true
@@ -55,6 +56,7 @@ def overwrite_settings(settings)
   it "should write logs to a new dir" do
     change_setting("path.logs", temp_dir)
     @logstash_service.spawn_logstash("-e", tcp_config)
+    @logstash_service.wait_for_logstash
     # check LS is up and running with new data path
     try(num_retries) do
       expect(is_port_open?(test_port)).to be true
@@ -68,6 +70,7 @@ def overwrite_settings(settings)
     IO.write(test_config_path, tcp_config)
     expect(File.exists?(test_config_path)).to be true
     @logstash_service.spawn_logstash
+    @logstash_service.wait_for_logstash
     # check LS is up and running with new data path
     try(num_retries) do
       expect(is_port_open?(test_port)).to be true
@@ -102,14 +105,14 @@ def overwrite_settings(settings)
   it "change pipeline settings" do
     s = {}
     workers = 31
-    batch_size = 1250
+    batch_size = 1
     s["pipeline.workers"] = workers
     s["pipeline.batch.size"] = batch_size
     overwrite_settings(s)
     @logstash_service.spawn_logstash("-e", tcp_config)
     @logstash_service.wait_for_logstash
     # check LS is up and running with new data path
-    try do
+    try(num_retries) do
       expect(is_port_open?(test_port)).to be true
     end
 
@@ -124,6 +127,7 @@ def overwrite_settings(settings)
     http_port = random_port
     change_setting("http.port", http_port)
     @logstash_service.spawn_logstash("-e", tcp_config)
+    @logstash_service.wait_for_logstash
     
     try(num_retries) do
       expect(is_port_open?(http_port)).to be true
@@ -143,6 +147,7 @@ def overwrite_settings(settings)
 
   it "start even without a settings file specified" do
     @logstash_service.spawn_logstash("-e", tcp_config, "--path.settings", "/tmp/fooooobbaaar")
+    @logstash_service.wait_for_logstash
     http_port = 9600
     try(num_retries) do
       expect(is_port_open?(http_port)).to be true
