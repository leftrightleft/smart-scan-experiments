diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
index 0381435bd28..9f5500ad0d5 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
@@ -31,6 +31,8 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicLong;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
@@ -49,14 +51,16 @@ public final class ComputeStepSyntaxElement<T extends Dataset> {
 
     private static final Path SOURCE_DIR = debugDir();
 
-    private static final ISimpleCompiler COMPILER = new SimpleCompiler();
+    private static final ThreadLocal<ISimpleCompiler> COMPILER = ThreadLocal.withInitial(SimpleCompiler::new);
 
     /**
      * Global cache of runtime compiled classes to prevent duplicate classes being compiled.
      * across pipelines and workers.
      */
-    private static final Map<ComputeStepSyntaxElement<?>, Class<? extends Dataset>> CLASS_CACHE
-        = new HashMap<>(5000);
+    private static final ConcurrentHashMap<ComputeStepSyntaxElement<?>, Class<? extends Dataset>> CLASS_CACHE
+        = new ConcurrentHashMap<>(500);
+
+    private static final AtomicLong DATASET_CLASS_INDEX = new AtomicLong(0);
 
     /**
      * Pattern to remove redundant {@code ;} from formatted code since {@link Formatter} does not
@@ -108,39 +112,34 @@ public T instantiate() {
         }
     }
 
-    /**
-     * This method is NOT thread-safe, and must have exclusive access to `COMPILER`
-     * so that the resulting `ClassLoader` after each `SimpleCompiler#cook()` operation
-     * can be teed up as the parent for the next cook operation.
-     * Also note that synchronizing on `COMPILER` also protects the global CLASS_CACHE.
-     */
-
     @SuppressWarnings("unchecked")
+    /*
+     * Returns a {@link Class<? extends Dataset>} for this {@link ComputeStepSyntaxElement}, reusing an existing
+     * equivalent implementation from the global class cache when one is available, or otherwise compiling one.
+     *
+     * This method _is_ thread-safe, and uses the locking semantics of {@link ConcurrentHashMap#computeIfAbsent}.
+     * To do so, it relies on {@link #hashCode()} and {@link #equals(Object)}.
+     */
     private  Class<? extends Dataset> compile() {
-        try {
-            synchronized (COMPILER) {
-                Class<? extends Dataset> clazz = CLASS_CACHE.get(this);
-                if (clazz == null) {
-                    final String name = String.format("CompiledDataset%d", CLASS_CACHE.size());
-                    final String code = CLASS_NAME_PLACEHOLDER_REGEX.matcher(normalizedSource).replaceAll(name);
-                    if (SOURCE_DIR != null) {
-                        final Path sourceFile = SOURCE_DIR.resolve(String.format("%s.java", name));
-                        Files.write(sourceFile, code.getBytes(StandardCharsets.UTF_8));
-                        COMPILER.cookFile(sourceFile.toFile());
-                    } else {
-                        COMPILER.cook(code);
-                    }
-                    COMPILER.setParentClassLoader(COMPILER.getClassLoader());
-                    clazz = (Class<T>) COMPILER.getClassLoader().loadClass(
-                        String.format("org.logstash.generated.%s", name)
-                    );
-                    CLASS_CACHE.put(this, clazz);
+        return CLASS_CACHE.computeIfAbsent(this, (__)->{
+            try {
+                final ISimpleCompiler compiler = COMPILER.get();
+                final String name = String.format("CompiledDataset%d", DATASET_CLASS_INDEX.incrementAndGet());
+                final String code = CLASS_NAME_PLACEHOLDER_REGEX.matcher(normalizedSource).replaceAll(name);
+                if (SOURCE_DIR != null) {
+                    final Path sourceFile = SOURCE_DIR.resolve(String.format("%s.java", name));
+                    Files.write(sourceFile, code.getBytes(StandardCharsets.UTF_8));
+                    compiler.cookFile(sourceFile.toFile());
+                } else {
+                    compiler.cook(code);
                 }
-                return clazz;
+                return (Class<T>) compiler.getClassLoader().loadClass(
+                    String.format("org.logstash.generated.%s", name)
+                );
+            } catch (final CompileException | ClassNotFoundException | IOException ex) {
+                throw new IllegalStateException(ex);
             }
-        } catch (final CompileException | ClassNotFoundException | IOException ex) {
-            throw new IllegalStateException(ex);
-        }
+        });
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
index e6644cca623..83013003b7c 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
@@ -72,6 +72,8 @@ private static Class<?> safeType(final Class<?> clazz) {
             safe = EventCondition.class;
         } else if (DynamicMethod.class.isAssignableFrom(clazz)) {
             safe = DynamicMethod.class;
+        } else if (BaseDataset.class.isAssignableFrom(clazz)) {
+            safe = BaseDataset.class;
         } else {
             safe = clazz;
         }
