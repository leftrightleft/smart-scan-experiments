diff --git a/README.md b/README.md
index 077543706d7..92229c33dcb 100644
--- a/README.md
+++ b/README.md
@@ -113,9 +113,9 @@ You can install the default set of plugins included in the logstash package or a
     rake test:install-all
 
 ---
-Note that if a plugin is installed using the plugin manager `bin/plugin install ...` do not forget to also install the plugins development dependencies using the following command after the plugin installation:
+Note that if a plugin is installed using the plugin manager `bin/logstash-plugin install ...` do not forget to also install the plugins development dependencies using the following command after the plugin installation:
 
-    bin/plugin install --development
+    bin/logstash-plugin install --development
 
 ## Developing plugins
 
diff --git a/bin/plugin b/bin/logstash-plugin
similarity index 75%
rename from bin/plugin
rename to bin/logstash-plugin
index 39b19b8df30..b357c749a6f 100755
--- a/bin/plugin
+++ b/bin/logstash-plugin
@@ -4,7 +4,7 @@ unset CDPATH
 . "$(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
 setup
 
-# bin/plugin is a short lived ruby script thus we can use aggressive "faster starting JRuby options"
+# bin/logstash-plugin is a short lived ruby script thus we can use aggressive "faster starting JRuby options"
 # see https://github.com/jruby/jruby/wiki/Improving-startup-time
 export JRUBY_OPTS="$JRUBY_OPTS -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify -X-C -Xcompile.invokedynamic=false"
 
diff --git a/bin/plugin.bat b/bin/logstash-plugin.bat
similarity index 100%
rename from bin/plugin.bat
rename to bin/logstash-plugin.bat
diff --git a/docs/plugin-doc.asciidoc.erb b/docs/plugin-doc.asciidoc.erb
index e00319d537a..55fd81cff48 100644
--- a/docs/plugin-doc.asciidoc.erb
+++ b/docs/plugin-doc.asciidoc.erb
@@ -3,7 +3,7 @@
 === <%= name %>
 
 <% unless default_plugin %>
-NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/plugin install logstash-<%= section %>-<%= plugin_name %>`.
+NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-<%= section %>-<%= plugin_name %>`.
 <% end %>
 
 <%= description %>
diff --git a/docs/static/include/pluginbody.asciidoc b/docs/static/include/pluginbody.asciidoc
index 10f7dbd23cb..a51c4f74aa9 100644
--- a/docs/static/include/pluginbody.asciidoc
+++ b/docs/static/include/pluginbody.asciidoc
@@ -845,7 +845,7 @@ Gem::Specification.new do |s|
   s.version = '0.1.0'
   s.licenses = ['Apache License (2.0)']
   s.summary = "This {plugintype} does x, y, z in Logstash"
-  s.description = "This gem is a logstash plugin required to be installed on top of the Logstash core pipeline using $LS_HOME/bin/plugin install gemname. This gem is not a stand-alone program"
+  s.description = "This gem is a logstash plugin required to be installed on top of the Logstash core pipeline using $LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
   s.authors = ["Elastic"]
   s.email = 'info@elastic.co'
   s.homepage = "http://www.elastic.co/guide/en/logstash/current/index.html"
@@ -1051,7 +1051,7 @@ environment, and `0.1.0` with the correct version number from the gemspec file.
 [source,sh]
 [subs="attributes"]
 ----------------------------------
-bin/plugin install /my/logstash/plugins/logstash-{plugintype}-{pluginname}/logstash-{plugintype}-{pluginname}-0.1.0.gem
+bin/logstash-plugin install /my/logstash/plugins/logstash-{plugintype}-{pluginname}/logstash-{plugintype}-{pluginname}-0.1.0.gem
 ----------------------------------
 +
 * After running this, you should see feedback from Logstash that it was
@@ -1072,7 +1072,7 @@ currently available:
 
 [source,sh]
 ----------------------------------
-bin/plugin list
+bin/logstash-plugin list
 ----------------------------------
 Depending on what you have installed, you might see a short or long list of
 plugins: inputs, codecs, filters and outputs.
@@ -1275,7 +1275,7 @@ by running:
 [source,sh]
 [subs="attributes"]
 ----------------------------------
-bin/plugin install logstash-{plugintype}-mypluginname
+bin/logstash-plugin install logstash-{plugintype}-mypluginname
 ----------------------------------
 
 ==== Contributing your source code to https://github.com/logstash-plugins[logstash-plugins]
diff --git a/docs/static/monitoring-apis.asciidoc b/docs/static/monitoring-apis.asciidoc
index 846896370a8..97b2a57c3c4 100644
--- a/docs/static/monitoring-apis.asciidoc
+++ b/docs/static/monitoring-apis.asciidoc
@@ -45,7 +45,7 @@ consumption.  The default for the `human` flag is
 experimental[]
 
 The plugins API gets information about all Logstash plugins that are currently installed.
-This API basically returns the output of running the `bin/plugins list --verbose` command.
+This API basically returns the output of running the `bin/logstash-plugin list --verbose` command.
 
 [source,js]
 --------------------------------------------------
diff --git a/docs/static/offline-plugins.asciidoc b/docs/static/offline-plugins.asciidoc
index c5f20e29aea..e099faec8a8 100644
--- a/docs/static/offline-plugins.asciidoc
+++ b/docs/static/offline-plugins.asciidoc
@@ -20,18 +20,18 @@ all available plugins. You can distribute this bundle to all nodes without furth
 Working with offline plugins requires you to create an _offline package_, which is a compressed file that contains all of
 the plugins your offline Logstash installation requires, along with the dependencies for those plugins.
 
-. Create the offline package with the `bin/plugin pack` subcommand.
+. Create the offline package with the `bin/logstash-plugin pack` subcommand.
 +
-When you run the `bin/plugin pack` subcommand, Logstash creates a compressed bundle that contains all of the currently
+When you run the `bin/logstash-plugin pack` subcommand, Logstash creates a compressed bundle that contains all of the currently
 installed plugins and the dependencies for those plugins. By default, the compressed bundle is a GZipped TAR file when you
-run the `bin/plugin pack` subcommand on a UNIX machine. By default, when you run the `bin/plugin pack` subcommand on a
+run the `bin/logstash-plugin pack` subcommand on a UNIX machine. By default, when you run the `bin/logstash-plugin pack` subcommand on a
 Windows machine, the compressed bundle is a ZIP file. See <<managing-packs,Managing Plugin Packs>> for details on changing
 these default behaviors.
 +
 NOTE: Downloading all dependencies for the specified plugins may take some time, depending on the plugins listed.
 
 . Move the compressed bundle to the offline machines that are the source for offline plugin installation, then use the
-`bin/plugin unpack` subcommand to make the packaged plugins available.
+`bin/logstash-plugin unpack` subcommand to make the packaged plugins available.
 
 [float]
 === Install or Update a local plugin
@@ -41,24 +41,24 @@ examples:
 
 .Installing a local plugin
 ============
-`bin/plugin install --local logstash-input-jdbc`
+`bin/logstash-plugin install --local logstash-input-jdbc`
 ============
 
 .Updating a local plugin
 ============
-`bin/plugin update --local logstash-input-jdbc`
+`bin/logstash-plugin update --local logstash-input-jdbc`
 ============
 
 .Updating all local plugins in one command
 ============
-`bin/plugin update --local`
+`bin/logstash-plugin update --local`
 ============
 
 [float]
 [[managing-packs]]
 === Managing Plugin Packs
 
-The `pack` and `unpack` subcommands for `bin/plugin` take the following options:
+The `pack` and `unpack` subcommands for `bin/logstash-plugin` take the following options:
 
 [horizontal]
 `--tgz`:: Generate the offline package as a GZipped TAR file. The default behavior on UNIX systems.
diff --git a/docs/static/plugin-manager.asciidoc b/docs/static/plugin-manager.asciidoc
index de4587332b7..75d297f2a52 100644
--- a/docs/static/plugin-manager.asciidoc
+++ b/docs/static/plugin-manager.asciidoc
@@ -2,7 +2,7 @@
 == Working with plugins
 
 Logstash has a rich collection of input, filter, codec and output plugins. Plugins are available as self-contained
-packages called gems and hosted on RubyGems.org. The plugin manager accesed via `bin/plugin` script is used to manage the
+packages called gems and hosted on RubyGems.org. The plugin manager accesed via `bin/logstash-plugin` script is used to manage the
 lifecycle of plugins in your Logstash deployment. You can install, uninstall and upgrade plugins using these Command Line
 Interface (CLI) described below.
 
@@ -15,10 +15,10 @@ available in your deployment:
 
 [source,shell]
 ----------------------------------
-bin/plugin list <1>
-bin/plugin list --verbose <2>
-bin/plugin list *namefragment* <3>
-bin/plugin list --group output <4>
+bin/logstash-plugin list <1>
+bin/logstash-plugin list --verbose <2>
+bin/logstash-plugin list *namefragment* <3>
+bin/logstash-plugin list --group output <4>
 ----------------------------------
 <1> Will list all installed plugins
 
@@ -38,7 +38,7 @@ installation.
 
 [source,shell]
 ----------------------------------
-bin/plugin install logstash-output-kafka
+bin/logstash-plugin install logstash-output-kafka
 ----------------------------------
 
 Once the plugin is successfully installed, you can start using it in your configuration file.
@@ -52,7 +52,7 @@ provides you the option to install a locally built plugin which is packaged as a
 
 [source,shell]
 ----------------------------------
-bin/plugin install /path/to/logstash-output-kafka-1.0.0.gem
+bin/logstash-plugin install /path/to/logstash-output-kafka-1.0.0.gem
 ----------------------------------
 
 [[installing-local-plugins-path]]
@@ -76,8 +76,8 @@ subcommand you can get the latest or update to a particular version of the plugi
 
 [source,shell]
 ----------------------------------
-bin/plugin update <1>
-bin/plugin update logstash-output-kafka <2>
+bin/logstash-plugin update <1>
+bin/logstash-plugin update logstash-output-kafka <2>
 ----------------------------------
 <1> will update all installed plugins
 
@@ -91,7 +91,7 @@ If you need to remove plugins from your Logstash installation:
 
 [source,shell]
 ----------------------------------
-bin/plugin uninstall logstash-output-kafka
+bin/logstash-plugin uninstall logstash-output-kafka
 ----------------------------------
 
 [[proxy-plugins]]
@@ -106,7 +106,7 @@ Proxy is used to handle HTTP requests. Logstash Plugins can be installed and upd
 ----------------------------------
 export HTTP_PROXY=http://127.0.0.1:3128
 
-bin/plugin install logstash-output-kafka
+bin/logstash-plugin install logstash-output-kafka
 ----------------------------------
 
 Once set, plugin commands install, update can be used through this proxy.
diff --git a/docs/static/upgrading.asciidoc b/docs/static/upgrading.asciidoc
index 14495493223..6e2d8337347 100644
--- a/docs/static/upgrading.asciidoc
+++ b/docs/static/upgrading.asciidoc
@@ -69,7 +69,7 @@ These plugin updates are available for Logstash 2.0. To upgrade to the latest ve
 plugins, the command is:
 
 [source,shell]
-bin/plugin update <plugin_name>
+bin/logstash-plugin update <plugin_name>
 
 **Multiline Filter:** If you are using the Multiline Filter in your configuration and upgrade to Logstash 2.0,
 you will get an error. Make sure to explicitly set the number of filter workers (`-w`) to `1`. You can set the number
diff --git a/integration/logstash_config/file_input_to_file_output_spec.rb b/integration/logstash_config/file_input_to_file_output_spec.rb
index f857465b8ee..b9a4fcfd5c9 100644
--- a/integration/logstash_config/file_input_to_file_output_spec.rb
+++ b/integration/logstash_config/file_input_to_file_output_spec.rb
@@ -25,7 +25,7 @@
   }
 
   before :all do
-    command("bin/plugin install logstash-input-file logstash-output-file")
+    command("bin/logstash-plugin install logstash-input-file logstash-output-file")
   end
 
   it "writes events to file" do
diff --git a/integration/plugin_manager/plugin_install_spec.rb b/integration/plugin_manager/plugin_install_spec.rb
index 313fd1b1f73..db31bc95740 100644
--- a/integration/plugin_manager/plugin_install_spec.rb
+++ b/integration/plugin_manager/plugin_install_spec.rb
@@ -2,13 +2,13 @@
 require_relative "../spec_helper"
 require "fileutils"
 
-context "bin/plugin install" do
+context "bin/logstash-plugin install" do
   context "with a local gem" do
     let(:gem_name) { "logstash-input-wmi" }
     let(:local_gem) { gem_fetch(gem_name) }
 
     it "install the gem succesfully" do
-      result = command("bin/plugin install --no-verify #{local_gem}")
+      result = command("bin/logstash-plugin install --no-verify #{local_gem}")
       expect(result.exit_status).to eq(0)
       expect(result.stdout).to match(/^Installing\s#{gem_name}\nInstallation\ssuccessful$/)
     end
@@ -18,14 +18,14 @@
     let(:plugin_name) { "logstash-input-drupal_dblog" }
 
     it "sucessfully install" do
-      result = command("bin/plugin install #{plugin_name}")
+      result = command("bin/logstash-plugin install #{plugin_name}")
       expect(result.exit_status).to eq(0)
       expect(result.stdout).to match(/^Validating\s#{plugin_name}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
     end
 
     it "allow to install a specific version" do
       version = "2.0.2"
-      result = command("bin/plugin install --version 2.0.2 #{plugin_name}")
+      result = command("bin/logstash-plugin install --version 2.0.2 #{plugin_name}")
       expect(result.exit_status).to eq(0)
       expect(result.stdout).to match(/^Validating\s#{plugin_name}-#{version}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
     end
@@ -33,7 +33,7 @@
 
   context "when the plugin doesn't exist" do
     it "fails to install" do
-      result = command("bin/plugin install --no-verify logstash-output-impossible-plugin")
+      result = command("bin/logstash-plugin install --no-verify logstash-output-impossible-plugin")
       expect(result.exit_status).to eq(1)
       expect(result.stderr).to match(/Installation Aborted, message: Could not find gem/)
     end
diff --git a/integration/plugin_manager/plugin_list_spec.rb b/integration/plugin_manager/plugin_list_spec.rb
index a8a2b19e453..d2ae7807f1c 100644
--- a/integration/plugin_manager/plugin_list_spec.rb
+++ b/integration/plugin_manager/plugin_list_spec.rb
@@ -1,22 +1,22 @@
 # Encoding: utf-8
 require_relative "../spec_helper"
 
-describe "bin/plugin list" do
+describe "bin/logstash-plugin list" do
   context "without a specific plugin" do
     it "display a list of plugins" do
-      result = command("bin/plugin list")
+      result = command("bin/logstash-plugin list")
       expect(result.exit_status).to eq(0)
       expect(result.stdout.split("\n").size).to be > 1
     end
 
     it "display a list of installed plugins" do
-      result = command("bin/plugin list --installed")
+      result = command("bin/logstash-plugin list --installed")
       expect(result.exit_status).to eq(0)
       expect(result.stdout.split("\n").size).to be > 1
     end
 
     it "list the plugins with their versions" do
-      result = command("bin/plugin list --verbose")
+      result = command("bin/logstash-plugin list --verbose")
       result.stdout.split("\n").each do |plugin|
         expect(plugin).to match(/^logstash-\w+-\w+\s\(\d+\.\d+.\d+\)/)
       end
@@ -27,13 +27,13 @@
   context "with a specific plugin" do
     let(:plugin_name) { "logstash-input-stdin" }
     it "list the plugin and display the plugin name" do
-      result = command("bin/plugin list #{plugin_name}")
+      result = command("bin/logstash-plugin list #{plugin_name}")
       expect(result.stdout).to match(/^#{plugin_name}$/)
       expect(result.exit_status).to eq(0)
     end
 
     it "list the plugin with his version" do
-      result = command("bin/plugin list --verbose #{plugin_name}")
+      result = command("bin/logstash-plugin list --verbose #{plugin_name}")
       expect(result.stdout).to match(/^#{plugin_name} \(\d+\.\d+.\d+\)/)
       expect(result.exit_status).to eq(0)
     end
diff --git a/integration/plugin_manager/plugin_uninstall_spec.rb b/integration/plugin_manager/plugin_uninstall_spec.rb
index 87f2fd747e2..df3c6e4396e 100644
--- a/integration/plugin_manager/plugin_uninstall_spec.rb
+++ b/integration/plugin_manager/plugin_uninstall_spec.rb
@@ -1,10 +1,10 @@
 # Encoding: utf-8
 require_relative "../spec_helper"
 
-describe "bin/plugin uninstall" do
+describe "bin/logstash-plugin uninstall" do
   context "when the plugin isn't installed" do
     it "fails to uninstall it" do
-      result = command("bin/plugin uninstall logstash-filter-cidr")
+      result = command("bin/logstash-plugin uninstall logstash-filter-cidr")
       expect(result.stderr).to match(/ERROR: Uninstall Aborted, message: This plugin has not been previously installed, aborting/)
       expect(result.exit_status).to eq(1)
     end
@@ -13,9 +13,9 @@
   context "when the plugin is installed" do
       it "succesfully uninstall it" do
       # make sure we have the plugin installed.
-      command("bin/plugin install logstash-filter-ruby")
+      command("bin/logstash-plugin install logstash-filter-ruby")
 
-      result = command("bin/plugin uninstall logstash-filter-ruby")
+      result = command("bin/logstash-plugin uninstall logstash-filter-ruby")
 
       expect(result.stdout).to match(/^Uninstalling logstash-filter-ruby/)
       expect(result.exit_status).to eq(0)
diff --git a/integration/plugin_manager/plugin_update_spec.rb b/integration/plugin_manager/plugin_update_spec.rb
index d8b291739cc..549a9babc80 100644
--- a/integration/plugin_manager/plugin_update_spec.rb
+++ b/integration/plugin_manager/plugin_update_spec.rb
@@ -6,13 +6,13 @@
   let(:previous_version) { "2.0.1" }
 
   before do
-    command("bin/plugin install --version #{previous_version} #{plugin_name}")
-    cmd = command("bin/plugin list --verbose #{plugin_name}")
+    command("bin/logstash-plugin install --version #{previous_version} #{plugin_name}")
+    cmd = command("bin/logstash-plugin list --verbose #{plugin_name}")
     expect(cmd.stdout).to match(/#{plugin_name} \(#{previous_version}\)/)
   end
 
   context "update a specific plugin" do
-    subject { command("bin/plugin update #{plugin_name}") }
+    subject { command("bin/logstash-plugin update #{plugin_name}") }
 
     it "has executed succesfully" do
       expect(subject.exit_status).to eq(0)
@@ -21,11 +21,11 @@
   end
 
   context "update all the plugins" do
-    subject { command("bin/plugin update") }
+    subject { command("bin/logstash-plugin update") }
 
     it "has executed succesfully" do
       expect(subject.exit_status).to eq(0)
-      cmd = command("bin/plugin list --verbose #{plugin_name}").stdout
+      cmd = command("bin/logstash-plugin list --verbose #{plugin_name}").stdout
       expect(cmd).to match(/logstash-input-stdin \(#{LogStashTestHelpers.latest_version(plugin_name)}\)/)
     end
   end
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index 2316f993abe..66ed16093f0 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -57,7 +57,7 @@ def pattern_path(path)
 end
 
 
-# when launched as a script, not require'd, (currently from bin/logstash and bin/plugin) the first
+# when launched as a script, not require'd, (currently from bin/logstash and bin/logstash-plugin) the first
 # argument is the path of a Ruby file to require and a LogStash::Runner class is expected to be
 # defined and exposing the LogStash::Runner#main instance method which will be called with the current ARGV
 # currently lib/logstash/runner.rb and lib/pluginmanager/main.rb are called using this.
diff --git a/lib/pluginmanager/install.rb b/lib/pluginmanager/install.rb
index 27c865ca68e..dae85e3dfc5 100644
--- a/lib/pluginmanager/install.rb
+++ b/lib/pluginmanager/install.rb
@@ -10,7 +10,7 @@ class LogStash::PluginManager::Install < LogStash::PluginManager::Command
   option "--version", "VERSION", "version of the plugin to install"
   option "--[no-]verify", :flag, "verify plugin validity before installation", :default => true
   option "--development", :flag, "install all development dependencies of currently installed plugins", :default => false
-  option "--local", :flag, "force local-only plugin installation. see bin/plugin package|unpack", :default => false
+  option "--local", :flag, "force local-only plugin installation. see bin/logstash-plugin package|unpack", :default => false
 
   # the install logic below support installing multiple plugins with each a version specification
   # but the argument parsing does not support it for now so currently if specifying --version only
@@ -112,7 +112,7 @@ def install_gems_list!(install_list)
 
   # Extract the specified local gems in a predefined local path
   # Update the gemfile to use a relative path to this plugin and run
-  # Bundler, this will mark the gem not updatable by `bin/plugin update`
+  # Bundler, this will mark the gem not updatable by `bin/logstash-plugin update`
   # This is the most reliable way to make it work in bundler without
   # hacking with `how bundler works`
   #
diff --git a/lib/pluginmanager/list.rb b/lib/pluginmanager/list.rb
index b4b96cafbc3..65f28c31cc0 100644
--- a/lib/pluginmanager/list.rb
+++ b/lib/pluginmanager/list.rb
@@ -6,7 +6,7 @@ class LogStash::PluginManager::List < LogStash::PluginManager::Command
 
   parameter "[PLUGIN]", "Part of plugin name to search for, leave empty for all plugins"
 
-  option "--installed", :flag, "List only explicitly installed plugins using bin/plugin install ...", :default => false
+  option "--installed", :flag, "List only explicitly installed plugins using bin/logstash-plugin install ...", :default => false
   option "--verbose", :flag, "Also show plugin version number", :default => false
   option "--group", "NAME", "Filter plugins per group: input, output, filter or codec" do |arg|
     raise(ArgumentError, "should be one of: input, output, filter or codec") unless ['input', 'output', 'filter', 'codec'].include?(arg)
diff --git a/lib/pluginmanager/main.rb b/lib/pluginmanager/main.rb
index e14a131c84e..15841b107e3 100644
--- a/lib/pluginmanager/main.rb
+++ b/lib/pluginmanager/main.rb
@@ -38,7 +38,7 @@ class Main < Clamp::Command
 
 if $0 == __FILE__
   begin
-    LogStash::PluginManager::Main.run("bin/plugin", ARGV)
+    LogStash::PluginManager::Main.run("bin/logstash-plugin", ARGV)
   rescue LogStash::PluginManager::Error => e
     $stderr.puts(e.message)
     exit(1)
diff --git a/lib/pluginmanager/unpack.rb b/lib/pluginmanager/unpack.rb
index 4e7da6fb94e..7937e7d2e24 100644
--- a/lib/pluginmanager/unpack.rb
+++ b/lib/pluginmanager/unpack.rb
@@ -14,7 +14,7 @@ def execute
     validate_cache_location
     archive_manager.extract(package_file, LogStash::Environment::CACHE_PATH)
     puts("Unpacked at #{LogStash::Environment::CACHE_PATH}")
-    puts("The unpacked plugins can now be installed in local-only mode using bin/plugin install --local [plugin name]")
+    puts("The unpacked plugins can now be installed in local-only mode using bin/logstash-plugin install --local [plugin name]")
   end
 
   private
diff --git a/lib/pluginmanager/update.rb b/lib/pluginmanager/update.rb
index 64c9767ea57..fd840e91183 100644
--- a/lib/pluginmanager/update.rb
+++ b/lib/pluginmanager/update.rb
@@ -9,7 +9,7 @@ class LogStash::PluginManager::Update < LogStash::PluginManager::Command
 
   parameter "[PLUGIN] ...", "Plugin name(s) to upgrade to latest version", :attribute_name => :plugins_arg
   option "--[no-]verify", :flag, "verify plugin validity before installation", :default => true
-  option "--local", :flag, "force local-only plugin update. see bin/plugin package|unpack", :default => false
+  option "--local", :flag, "force local-only plugin update. see bin/logstash-plugin package|unpack", :default => false
 
   def execute
     local_gems = gemfile.locally_installed_gems
diff --git a/rakelib/package.rake b/rakelib/package.rake
index 96d06559844..56606c93136 100644
--- a/rakelib/package.rake
+++ b/rakelib/package.rake
@@ -1,7 +1,7 @@
 namespace "package" do
 
   task "bundle" do
-    system("bin/plugin", "package")
+    system("bin/logstash-plugin", "package")
     raise(RuntimeError, $!.to_s) unless $?.success?
   end
 
diff --git a/rakelib/plugin.rake b/rakelib/plugin.rake
index bff000fba83..5620def5315 100644
--- a/rakelib/plugin.rake
+++ b/rakelib/plugin.rake
@@ -3,7 +3,7 @@ require_relative "default_plugins"
 namespace "plugin" do
 
   def install_plugins(*args)
-    system("bin/plugin", "install", *args)
+    system("bin/logstash-plugin", "install", *args)
     raise(RuntimeError, $!.to_s) unless $?.success?
   end
 
