diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValueCommon.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValueCommon.java
index 0e8748f0be4..ceb59cc8dd1 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValueCommon.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValueCommon.java
@@ -1,17 +1,19 @@
 package org.logstash.bivalues;
 
 import com.fasterxml.jackson.annotation.JsonValue;
-import org.jruby.Ruby;
-import org.jruby.runtime.builtin.IRubyObject;
-
-import java.io.InvalidObjectException;
+import java.io.IOException;
 import java.io.ObjectInputStream;
-import java.io.ObjectStreamException;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import org.jruby.Ruby;
+import org.jruby.runtime.builtin.IRubyObject;
 
 public abstract class BiValueCommon<R extends IRubyObject, J> implements Serializable {
+
+    private static final long serialVersionUID = -5550024069165773235L;
+
     protected transient R rubyValue;
-    protected J javaValue;
+    protected transient J javaValue;
 
     public R rubyValue(Ruby runtime) {
         if (hasRubyValue()) {
@@ -86,25 +88,11 @@ public String toString() {
         return String.valueOf(javaValue);
     }
 
-    protected static Object newProxy(BiValue instance) {
-        return new SerializationProxy(instance);
-    }
-
-    private static class SerializationProxy implements Serializable {
-        private static final long serialVersionUID = -1749700725129586973L;
-
-        private final Object javaValue;
-
-        public SerializationProxy(BiValue o) {
-            javaValue = o.javaValue(); // ensure the javaValue is converted from a ruby one if it exists
-        }
-
-        private Object readResolve() throws ObjectStreamException {
-            return BiValues.newBiValue(javaValue);
-        }
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.writeObject(this.javaValue());
     }
 
-    private void readObject(ObjectInputStream stream) throws InvalidObjectException {
-        throw new InvalidObjectException("Proxy required");
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        this.javaValue = (J) in.readObject();
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BigDecimalBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/BigDecimalBiValue.java
index a4226a9dcd4..2aadf3e8dff 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BigDecimalBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BigDecimalBiValue.java
@@ -1,12 +1,13 @@
 package org.logstash.bivalues;
 
+import java.math.BigDecimal;
 import org.jruby.Ruby;
 import org.jruby.ext.bigdecimal.RubyBigDecimal;
 
-import java.io.ObjectStreamException;
-import java.math.BigDecimal;
+public final class BigDecimalBiValue extends BiValueCommon<RubyBigDecimal, BigDecimal> 
+    implements BiValue<RubyBigDecimal, BigDecimal> {
 
-public class BigDecimalBiValue extends BiValueCommon<RubyBigDecimal, BigDecimal> implements BiValue<RubyBigDecimal, BigDecimal> {
+    private static final long serialVersionUID = -3408830056779123333L;
 
     public BigDecimalBiValue(RubyBigDecimal rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public BigDecimalBiValue(BigDecimal javaValue) {
         rubyValue = null;
     }
 
-    private BigDecimalBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = new RubyBigDecimal(runtime, runtime.getClass("BigDecimal"), javaValue);
     }
@@ -28,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getBigDecimalValue();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BigIntegerBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/BigIntegerBiValue.java
index e2d04822448..26e117ef736 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BigIntegerBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BigIntegerBiValue.java
@@ -1,12 +1,13 @@
 package org.logstash.bivalues;
 
+import java.math.BigInteger;
 import org.jruby.Ruby;
 import org.jruby.RubyBignum;
 
-import java.io.ObjectStreamException;
-import java.math.BigInteger;
+public final class BigIntegerBiValue extends BiValueCommon<RubyBignum, BigInteger> 
+    implements BiValue<RubyBignum, BigInteger> {
 
-public class BigIntegerBiValue extends BiValueCommon<RubyBignum, BigInteger> implements BiValue<RubyBignum, BigInteger> {
+    private static final long serialVersionUID = -6779003043647264917L;
 
     public BigIntegerBiValue(RubyBignum rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public BigIntegerBiValue(BigInteger javaValue) {
         rubyValue = null;
     }
 
-    private BigIntegerBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = new RubyBignum(runtime, javaValue);
     }
@@ -28,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getValue();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BooleanBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/BooleanBiValue.java
index e50cee9cbd3..40c48c174a4 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BooleanBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BooleanBiValue.java
@@ -3,10 +3,10 @@
 import org.jruby.Ruby;
 import org.jruby.RubyBoolean;
 
-import java.io.ObjectStreamException;
+public final class BooleanBiValue extends BiValueCommon<RubyBoolean, Boolean> 
+    implements BiValue<RubyBoolean, Boolean> {
 
-
-public class BooleanBiValue extends BiValueCommon<RubyBoolean, Boolean> implements BiValue<RubyBoolean, Boolean> {
+    private static final long serialVersionUID = 126658646136243974L;
 
     public BooleanBiValue(RubyBoolean rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +18,6 @@ public BooleanBiValue(Boolean javaValue) {
         rubyValue = null;
     }
 
-    private BooleanBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyBoolean.newBoolean(runtime, javaValue);
     }
@@ -28,9 +25,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.isTrue();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/DoubleBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/DoubleBiValue.java
index 9185875f691..bce67debfc9 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/DoubleBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/DoubleBiValue.java
@@ -3,10 +3,10 @@
 import org.jruby.Ruby;
 import org.jruby.RubyFloat;
 
-import java.io.ObjectStreamException;
+public final class DoubleBiValue extends BiValueCommon<RubyFloat, Double> 
+    implements BiValue<RubyFloat, Double> {
 
-
-public class DoubleBiValue extends BiValueCommon<RubyFloat, Double> implements BiValue<RubyFloat, Double> {
+    private static final long serialVersionUID = 3434273761801429821L;
 
     public DoubleBiValue(RubyFloat rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +18,6 @@ public DoubleBiValue(Double javaValue) {
         rubyValue = null;
     }
 
-    private DoubleBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyFloat.newFloat(runtime, javaValue);
     }
@@ -28,9 +25,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getDoubleValue();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/FloatBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/FloatBiValue.java
index 95771b8b9ce..557434423ae 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/FloatBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/FloatBiValue.java
@@ -3,10 +3,10 @@
 import org.jruby.Ruby;
 import org.jruby.RubyFloat;
 
-import java.io.ObjectStreamException;
+public final class FloatBiValue extends BiValueCommon<RubyFloat, Float> 
+    implements BiValue<RubyFloat, Float> {
 
-
-public class FloatBiValue extends BiValueCommon<RubyFloat, Float> implements BiValue<RubyFloat, Float> {
+    private static final long serialVersionUID = 3076337527056049715L;
 
     public FloatBiValue(RubyFloat rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +18,6 @@ public FloatBiValue(Float javaValue) {
         rubyValue = null;
     }
 
-    private FloatBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyFloat.newFloat(runtime, (double)javaValue);
     }
@@ -32,9 +29,4 @@ protected void addJava() {
         }
         javaValue = (float) value;
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/IntegerBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/IntegerBiValue.java
index 92e6da9d28a..a040a628142 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/IntegerBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/IntegerBiValue.java
@@ -4,9 +4,10 @@
 import org.jruby.RubyInteger;
 import org.jruby.javasupport.JavaUtil;
 
-import java.io.ObjectStreamException;
+public final class IntegerBiValue extends BiValueCommon<RubyInteger, Integer> 
+    implements BiValue<RubyInteger, Integer> {
 
-public class IntegerBiValue extends BiValueCommon<RubyInteger, Integer> implements BiValue<RubyInteger, Integer> {
+    private static final long serialVersionUID = -3220011682769931400L;
 
     public IntegerBiValue(RubyInteger rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public IntegerBiValue(int javaValue) {
         rubyValue = null;
     }
 
-    private IntegerBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = (RubyInteger) JavaUtil.convertJavaToUsableRubyObject(runtime, javaValue);
     }
@@ -32,9 +30,4 @@ protected void addJava() {
         }
         javaValue = (int) value;
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java
index f8f3e8771ff..d2a12fdd407 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java
@@ -4,9 +4,10 @@
 import org.jruby.java.proxies.JavaProxy;
 import org.jruby.javasupport.JavaUtil;
 
-import java.io.ObjectStreamException;
+public final class JavaProxyBiValue extends BiValueCommon<JavaProxy, Object> 
+    implements BiValue<JavaProxy, Object> {
 
-public class JavaProxyBiValue extends BiValueCommon<JavaProxy, Object> implements BiValue<JavaProxy, Object> {
+    private static final long serialVersionUID = 9127622347449815350L;
 
     public JavaProxyBiValue(JavaProxy rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public JavaProxyBiValue(Object javaValue) {
         rubyValue = null;
     }
 
-    private JavaProxyBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = (JavaProxy) JavaUtil.convertJavaToUsableRubyObject(runtime, javaValue);
     }
@@ -28,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getObject();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/LongBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/LongBiValue.java
index 2b7c1cb8ef4..26a72e6f56d 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/LongBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/LongBiValue.java
@@ -4,9 +4,10 @@
 import org.jruby.RubyInteger;
 import org.jruby.javasupport.JavaUtil;
 
-import java.io.ObjectStreamException;
+public final class LongBiValue extends BiValueCommon<RubyInteger, Long>
+    implements BiValue<RubyInteger, Long> {
 
-public class LongBiValue extends BiValueCommon<RubyInteger, Long> implements BiValue<RubyInteger, Long> {
+    private static final long serialVersionUID = -6119062523375669671L;
 
     public LongBiValue(RubyInteger rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public LongBiValue(long javaValue) {
         rubyValue = null;
     }
 
-    private LongBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = (RubyInteger) JavaUtil.convertJavaToUsableRubyObject(runtime, javaValue);
     }
@@ -28,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getLongValue();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
index c2c4522673f..03a0da53cb5 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
@@ -1,7 +1,6 @@
 package org.logstash.bivalues;
 
 import com.fasterxml.jackson.annotation.JsonValue;
-import java.io.ObjectStreamException;
 import org.jruby.Ruby;
 import org.jruby.RubyNil;
 
@@ -11,7 +10,7 @@ public final class NullBiValue extends BiValueCommon<RubyNil, Object>
     private static final NullBiValue INSTANCE =
         new NullBiValue((RubyNil) Ruby.getGlobalRuntime().getNil());
 
-    private static final Object WRITE_PROXY = newProxy(INSTANCE);
+    private static final long serialVersionUID = 3324022424426763767L;
 
     public static NullBiValue newNullBiValue() {
         return INSTANCE;
@@ -43,9 +42,4 @@ protected void addRuby(Ruby runtime) {}
 
     @Override
     protected void addJava() {}
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return WRITE_PROXY;
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
index 97c4b054873..962a3928eff 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
@@ -1,13 +1,14 @@
 package org.logstash.bivalues;
 
 import com.fasterxml.jackson.annotation.JsonValue;
-import java.io.ObjectStreamException;
 import org.jruby.Ruby;
 import org.jruby.RubyString;
 
 public final class StringBiValue extends BiValueCommon<RubyString, String>
     implements BiValue<RubyString, String> {
 
+    private static final long serialVersionUID = -1059663228107569565L;
+
     public StringBiValue(RubyString rubyValue) {
         this.rubyValue = rubyValue;
     }
@@ -17,9 +18,6 @@ public StringBiValue(String javaValue) {
         rubyValue = null;
     }
 
-    private StringBiValue() {
-    }
-
     @Override
     @JsonValue
     public String javaValue() {
@@ -50,9 +48,4 @@ protected void addJava() {
     public boolean hasJavaValue() {
         return true;
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/SymbolBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/SymbolBiValue.java
index 3cbcde3871f..fc05989f181 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/SymbolBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/SymbolBiValue.java
@@ -3,9 +3,10 @@
 import org.jruby.Ruby;
 import org.jruby.RubySymbol;
 
-import java.io.ObjectStreamException;
+public final class SymbolBiValue extends BiValueCommon<RubySymbol, String> 
+    implements BiValue<RubySymbol, String> {
 
-public class SymbolBiValue extends BiValueCommon<RubySymbol, String> implements BiValue<RubySymbol, String> {
+    private static final long serialVersionUID = -2010627976505908822L;
 
     public SymbolBiValue(RubySymbol rubyValue) {
         this.rubyValue = rubyValue;
@@ -17,9 +18,6 @@ public SymbolBiValue(String javaValue) {
         rubyValue = null;
     }
 
-    private SymbolBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubySymbol.newSymbol(runtime, javaValue);
     }
@@ -27,9 +25,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.asJavaString();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/TimeBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/TimeBiValue.java
index bcced16503a..92f80ed4ec8 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/TimeBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/TimeBiValue.java
@@ -4,10 +4,10 @@
 import org.jruby.Ruby;
 import org.jruby.RubyTime;
 
-import java.io.ObjectStreamException;
+public final class TimeBiValue extends BiValueCommon<RubyTime, DateTime> 
+    implements BiValue<RubyTime, DateTime> {
 
-
-public class TimeBiValue extends BiValueCommon<RubyTime, DateTime> implements BiValue<RubyTime, DateTime> {
+    private static final long serialVersionUID = -8792359519343205099L;
 
     public TimeBiValue(RubyTime rubyValue) {
         this.rubyValue = rubyValue;
@@ -19,9 +19,6 @@ public TimeBiValue(DateTime javaValue) {
         rubyValue = null;
     }
 
-    private TimeBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyTime.newTime(runtime, javaValue);
     }
@@ -29,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getDateTime();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/TimestampBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/TimestampBiValue.java
index 9fc2858e25c..4f68d0ee591 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/TimestampBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/TimestampBiValue.java
@@ -1,12 +1,13 @@
 package org.logstash.bivalues;
 
+import org.jruby.Ruby;
 import org.logstash.Timestamp;
 import org.logstash.ext.JrubyTimestampExtLibrary.RubyTimestamp;
-import org.jruby.Ruby;
 
-import java.io.ObjectStreamException;
+public final class TimestampBiValue extends BiValueCommon<RubyTimestamp, Timestamp> 
+    implements BiValue<RubyTimestamp, Timestamp> {
 
-public class TimestampBiValue extends BiValueCommon<RubyTimestamp, Timestamp> implements BiValue<RubyTimestamp, Timestamp> {
+    private static final long serialVersionUID = -4868460704798452962L;
 
     public TimestampBiValue(RubyTimestamp rubyValue) {
         this.rubyValue = rubyValue;
@@ -18,9 +19,6 @@ public TimestampBiValue(Timestamp javaValue) {
         rubyValue = null;
     }
 
-    private TimestampBiValue() {
-    }
-
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyTimestamp.newRubyTimestamp(runtime, javaValue);
     }
@@ -28,9 +26,4 @@ protected void addRuby(Ruby runtime) {
     protected void addJava() {
         javaValue = rubyValue.getTimestamp();
     }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
 }
