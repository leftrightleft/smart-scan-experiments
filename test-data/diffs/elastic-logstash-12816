diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index c4d204025b0..79f1cb9d523 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -516,7 +516,7 @@ def validate_value(value, validator)
             if value.size > 1 # only one value wanted
               return false, "Expected string, got #{value.inspect}"
             end
-            result = value.first
+            result = value.first.to_s
           when :number
             if value.size > 1 # only one value wanted
               return false, "Expected number, got #{value.inspect} (type #{value.class})"
@@ -575,7 +575,7 @@ def validate_value(value, validator)
               return false, "Expected password (one value), got #{value.size} values?"
             end
 
-            result = value.first.is_a?(::LogStash::Util::Password) ? value.first : ::LogStash::Util::Password.new(value.first)
+            result = value.first.is_a?(::LogStash::Util::Password) ? value.first : ::LogStash::Util::Password.new(value.first.to_s)
           when :uri
             if value.size > 1
               return false, "Expected uri (one value), got #{value.size} values?"
diff --git a/logstash-core/spec/logstash/config/mixin_spec.rb b/logstash-core/spec/logstash/config/mixin_spec.rb
index 7928409bb5e..7b984c6c604 100644
--- a/logstash-core/spec/logstash/config/mixin_spec.rb
+++ b/logstash-core/spec/logstash/config/mixin_spec.rb
@@ -288,6 +288,53 @@
     end
   end
 
+  context "when validating :string" do
+    let(:plugin_class) do
+      Class.new(LogStash::Filters::Base) do
+        config "string_option", :validate => :string
+      end
+    end
+    let(:params) { {'string_option' => parameter_value} }
+
+    before(:each) do
+      allow(plugin_class).to receive(:logger).and_return(double('Logger').as_null_object)
+    end
+
+    context 'and input is a string' do
+      let(:parameter_value) { 'a string' }
+      it 'successfully initializes the plugin' do
+        expect(plugin_class.new(params)).to be_a_kind_of plugin_class
+      end
+      it 'holds the value' do
+        instance = plugin_class.new(params)
+        expect(instance.string_option).to_not be_nil
+        expect(instance.string_option).to eq(parameter_value)
+      end
+    end
+
+    context 'and input is multiple items' do
+      let(:parameter_value) { ['one string', 'another string'] }
+      it 'does not initialize the plugin' do
+        expect { plugin_class.new(params) }.to raise_exception(LogStash::ConfigurationError)
+        expect(plugin_class.logger).to have_received(:error).with(/Expected string/)
+      end
+    end
+
+    # Config AST favors Numeric to Bareword and handles unquoted number-like nodes as having a numeric value.
+    # We need to ensure that the config DSL maps these to their stringified counterpart
+    context 'and input is a number' do
+      let(:parameter_value) { 12345 }
+      it 'successfully initializes the plugin' do
+        expect(plugin_class.new(params)).to be_a_kind_of plugin_class
+      end
+      it 'holds a stringified value' do
+        instance = plugin_class.new(params)
+        expect(instance.string_option).to_not be_nil
+        expect(instance.string_option).to eq('12345')
+      end
+    end
+  end
+
   context "when validating :password" do
     shared_examples 'protected password' do
       let(:secret) { 'fancy pants' }
@@ -328,6 +375,16 @@
       end
     end
 
+    # Config AST handles number-like nodes as having a numeric value,
+    # and instantiates plugins without first converting them. We need to
+    # ensure that the config DSL maps these to their stringified counterpart
+    context 'when instantiated with a number literal password' do
+      it_behaves_like 'protected password' do
+        let(:secret) { '12345' }
+        let(:instance_params) { { 'password' => 12345 } }
+      end
+    end
+
     context 'when instantiated with an environment variable placeholder' do
       it_behaves_like 'protected password' do
         let(:instance_params) { { "password" => '${PLACEHOLDER}'} }
