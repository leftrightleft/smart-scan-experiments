diff --git a/lib/logstash/filters/date.rb b/lib/logstash/filters/date.rb
index 0465633374d..311a2f41f2e 100644
--- a/lib/logstash/filters/date.rb
+++ b/lib/logstash/filters/date.rb
@@ -40,11 +40,13 @@ class LogStash::Filters::Date < LogStash::Filters::Base
 
   # Specify a locale to be used for date parsing using either IETF-BCP47 or POSIX language tag.
   # Simple examples are `en`,`en-US` for BCP47 or `en_US` for POSIX.
-  # If not specified, the platform default will be used.
   #
   # The locale is mostly necessary to be set for parsing month names (pattern with MMM) and
   # weekday names (pattern with EEE).
   #
+  # If not specified, the platform default will be used but for non-english platform default
+  # an english parser will also be used as a fallback mechanism.
+  #
   config :locale, :validate => :string
 
   # The date formats allowed are anything allowed by Joda-Time (java time
@@ -89,6 +91,10 @@ class LogStash::Filters::Date < LogStash::Filters::Base
   # default to updating the @timestamp field of the event.
   config :target, :validate => :string, :default => "@timestamp"
 
+  # Append values to the 'tags' field when there has been no
+  # successful match
+  config :tag_on_failure, :validate => :array, :default => ["_dateparsefailure"]
+
   # LOGSTASH-34
   DATEPATTERNS = %w{ y d H m s S }
 
@@ -160,16 +166,30 @@ def setupMatcher(field, locale, value)
             return (date[1..15].hex * 1000 - 10000)+(date[16..23].hex/1000000)
           end
         else
-          joda_parser = org.joda.time.format.DateTimeFormat.forPattern(format).withDefaultYear(Time.new.year)
-          if @timezone
-            joda_parser = joda_parser.withZone(org.joda.time.DateTimeZone.forID(@timezone))
-          else
-            joda_parser = joda_parser.withOffsetParsed
-          end
-          if (locale != nil)
-            joda_parser = joda_parser.withLocale(locale)
+          begin
+            joda_parser = org.joda.time.format.DateTimeFormat.forPattern(format).withDefaultYear(Time.new.year)
+            if @timezone
+              joda_parser = joda_parser.withZone(org.joda.time.DateTimeZone.forID(@timezone))
+            else
+              joda_parser = joda_parser.withOffsetParsed
+            end
+            if locale
+              joda_parser = joda_parser.withLocale(locale)
+            end
+            parsers << lambda { |date| joda_parser.parseMillis(date) }
+
+            #Include a fallback parser to english when default locale is non-english
+            if !locale &&
+              "en" != java.util.Locale.getDefault().getLanguage() &&
+              (format.include?("MMM") || format.include?("E"))
+              en_joda_parser = joda_parser.withLocale(java.util.Locale.forLanguageTag('en-US'))
+              parsers << lambda { |date| en_joda_parser.parseMillis(date) }
+            end
+          rescue JavaException => e
+            raise LogStash::ConfigurationError, I18n.t("logstash.agent.configuration.invalid_plugin_register",
+              :plugin => "filter", :type => "date",
+              :error => "#{e.message} for pattern '#{format}'")
           end
-          parsers << lambda { |date| joda_parser.parseMillis(date) }
       end
 
       @logger.debug("Adding type with date config", :type => @type,
@@ -222,11 +242,16 @@ def filter(event)
           filter_matched(event)
         rescue StandardError, JavaException => e
           @logger.warn("Failed parsing date from field", :field => field,
-                       :value => value, :exception => e)
-          # Raising here will bubble all the way up and cause an exit.
-          # TODO(sissel): Maybe we shouldn't raise?
-          # TODO(sissel): What do we do on a failure? Tag it like grok does?
-          #raise e
+                       :value => value, :exception => e.message,
+                       :config_parsers => fieldparsers.collect {|x| x[:format]}.join(','),
+                       :config_locale => @locale ? @locale : "default="+java.util.Locale.getDefault().toString()
+                       )
+          # Tag this event if we can't parse it. We can use this later to
+          # reparse+reindex logs if we improve the patterns given.
+          @tag_on_failure.each do |tag|
+            event["tags"] ||= []
+            event["tags"] << tag unless event["tags"].include?(tag)
+          end
         end # begin
       end # fieldvalue.each
     end # @parsers.each
diff --git a/spec/filters/date.rb b/spec/filters/date.rb
index e9942e35649..e9ec4aa5467 100644
--- a/spec/filters/date.rb
+++ b/spec/filters/date.rb
@@ -5,20 +5,35 @@
 RUBY_ENGINE == "jruby" and describe LogStash::Filters::Date do
   extend LogStash::RSpec
 
-  describe "giving an invalid match config, raise a configuration error" do
-    config <<-CONFIG
-      filter {
-        date {
-          match => [ "mydate"]
-          locale => "en"
+  context "config validation" do
+    describe "giving an invalid match config, raise a configuration error" do
+      config <<-CONFIG
+        filter {
+          date {
+            match => [ "mydate"]
+            locale => "en"
+          }
         }
-      }
-    CONFIG
+      CONFIG
 
-    sample "not_really_important" do
-      insist {subject}.raises LogStash::ConfigurationError
+      sample "not_really_important" do
+        insist {subject}.raises LogStash::ConfigurationError
+      end
     end
 
+    describe "giving an invalid pattern, raise a configuration error" do
+      config <<-CONFIG
+        filter {
+          date {
+            match => [ "message", "hello world" ]
+          }
+        }
+      CONFIG
+
+      sample "not_really_important" do
+        insist {subject}.raises LogStash::ConfigurationError
+      end
+    end
   end
 
   describe "parsing with ISO8601" do
@@ -314,7 +329,23 @@
 
     sample("thedate" => "2013/Apr/21") do
       insist { subject["@timestamp"] } != "2013-04-21T00:00:00.000Z"
-      insist { subject["tags"] } == nil
+      reject { subject["tags"] }.include? "tagged"
+    end
+  end
+
+  describe "failing to parse should apply tag_on_failure" do
+    config <<-CONFIG
+      filter {
+        date {
+          match => [ "thedate", "yyyy/MM/dd" ]
+          tag_on_failure => ["date_failed"]
+        }
+      }
+    CONFIG
+
+    sample("thedate" => "2013/Apr/21") do
+      insist { subject["@timestamp"] } != "2013-04-21T00:00:00.000Z"
+      insist { subject["tags"] }.include? "date_failed"
     end
   end
 
@@ -404,4 +435,24 @@
       insist { subject["@timestamp"].time } == Time.iso8601("1789-07-14T00:00:00.000Z").utc
     end
   end
+
+  describe "Support fallback to english for non-english default locale" do
+    default_locale = java.util.Locale.getDefault()
+    #Override default locale with non-english
+    java.util.Locale.setDefault(java.util.Locale.forLanguageTag('fr-FR'))
+    config <<-CONFIG
+      filter {
+        date {
+          match => [ "message", "dd MMMM yyyy" ]
+          timezone => "UTC"
+        }
+      }
+    CONFIG
+
+    sample "01 September 2014" do
+      insist { subject["@timestamp"].time } == Time.iso8601("2014-09-01T00:00:00.000Z").utc
+    end
+    #Restore default locale
+    java.util.Locale.setDefault(default_locale)
+  end
 end
