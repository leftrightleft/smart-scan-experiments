diff --git a/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java b/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
index 2bc727ea393..24623ca8e2e 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
@@ -62,7 +62,7 @@ public String getOriginalSource() {
         return this.originalSource;
     }
 
-    public List<Vertex> getPostQueue() throws InvalidIRException {
+    public List<Vertex> getPostQueue() {
        return graph.getSortedVerticesAfter(queue);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
index ac3a9481eba..6762f7ba35d 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
@@ -330,14 +330,7 @@ public Set<Edge> getEdges() {
     }
 
     public String toString() {
-        Stream<Edge> edgesToFormat;
-        try {
-            edgesToFormat = sortedEdges();
-        } catch (InvalidIRException e) {
-            // Even if this isn't a valid graph we still need to print it
-            edgesToFormat = edges.stream();
-        }
-
+        final Stream<Edge> edgesToFormat = sortedEdges();
         String edgelessVerticesStr;
         if (this.isolatedVertices().count() > 0) {
             edgelessVerticesStr = "\n== Vertices Without Edges ==\n" +
@@ -362,20 +355,20 @@ public List<Vertex> getSortedVertices() {
         return this.sortedVertices;
     }
 
-    public Stream<Edge> sortedEdges() throws InvalidIRException {
+    public Stream<Edge> sortedEdges() {
         return getSortedVertices().stream().
                 flatMap(Vertex::outgoingEdges);
     }
 
-    public List<Vertex> getSortedVerticesBefore(Vertex end) throws InvalidIRException {
+    public List<Vertex> getSortedVerticesBefore(Vertex end) {
         return getSortedVerticesBetween(null, end);
     }
 
-    public List<Vertex> getSortedVerticesAfter(Vertex start) throws InvalidIRException {
+    public List<Vertex> getSortedVerticesAfter(Vertex start) {
         return getSortedVerticesBetween(start, null);
     }
 
-    public List<Vertex> getSortedVerticesBetween(Vertex start, Vertex end) throws InvalidIRException {
+    public List<Vertex> getSortedVerticesBetween(Vertex start, Vertex end) {
         List<Vertex> sortedVertices = getSortedVertices();
 
         int startIndex = start == null ? 0 : sortedVertices.indexOf(start);
