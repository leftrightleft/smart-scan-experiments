diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
index 3c7647dec1c..8b31b349f57 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
@@ -1,5 +1,6 @@
 package org.logstash.benchmark.cli;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -7,7 +8,12 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.CloseableHttpClient;
@@ -19,11 +25,14 @@ public final class LsMetricsMonitor implements Callable<EnumMap<LsMetricStats, L
 
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
+    private static final JavaType MAP_TYPE =
+        OBJECT_MAPPER.getTypeFactory().constructMapType(HashMap.class, String.class, Object.class);
+
     private final String metrics;
 
     private volatile boolean running = true;
 
-    public LsMetricsMonitor(final String metrics) {
+    LsMetricsMonitor(final String metrics) {
         this.metrics = metrics;
     }
 
@@ -77,14 +86,13 @@ private long[] getCounts() {
             } catch (final IOException ex) {
                 return new long[]{-1L, -1L};
             }
-            final Map<String, Object> data =
-                OBJECT_MAPPER.readValue(baos.toByteArray(), HashMap.class);
+            final Map<String, Object> data = OBJECT_MAPPER.readValue(baos.toByteArray(), MAP_TYPE);
             final long count;
             if (data.containsKey("pipeline")) {
-                count = getFiltered((Map<String, Object>) data.get("pipeline"));
+                count = readNestedLong(data, "pipeline", "events", "filtered");
 
             } else if (data.containsKey("events")) {
-                count = getFiltered(data);
+                count = readNestedLong(data, "events", "filtered");
             } else {
                 count = -1L;
             }
@@ -92,17 +100,59 @@ private long[] getCounts() {
             if (count == -1L) {
                 cpu = -1L;
             } else {
-                cpu = ((Number) ((Map<String, Object>) ((Map<String, Object>) data.get("process"))
-                    .get("cpu")).get("percent")).longValue();
+                cpu = readNestedLong(data, "process", "cpu", "percent");
             }
             return new long[]{count, cpu};
         } catch (final IOException ex) {
             throw new IllegalStateException(ex);
         }
     }
+    
+    private static long readNestedLong(final Map<String, Object> map, final String ... path) {
+        Map<String, Object> nested = map;
+        for (int i = 0; i < path.length - 1; ++i) {
+            nested = (Map<String, Object>) (nested).get(path[i]);
+        }
+        return ((Number) nested.get(path[path.length - 1])).longValue();
+    }
+
+    /**
+     * Runs a {@link LsMetricsMonitor} instance in a background thread.
+     */
+    public static final class MonitorExecution implements AutoCloseable {
+        
+        private final Future<EnumMap<LsMetricStats, ListStatistics>> future;
+
+        private final ExecutorService exec;
+
+        private final LsMetricsMonitor monitor;
 
-    private static long getFiltered(final Map<String, Object> data) {
-        return ((Number) ((Map<String, Object>) (data.get("events")))
-            .get("filtered")).longValue();
+        /**
+         * Ctor.
+         * @param metrics Logstash Metrics URL
+         */
+        public MonitorExecution(final String metrics) {
+            monitor = new LsMetricsMonitor(metrics);
+            exec = Executors.newSingleThreadExecutor();
+            future = exec.submit(monitor);
+        }
+
+        /**
+         * Stops metric collection and returns the collected results.
+         * @return Statistical results from metric collection
+         * @throws InterruptedException On Failure
+         * @throws ExecutionException On Failure
+         * @throws TimeoutException On Failure
+         */
+        public EnumMap<LsMetricStats, ListStatistics> stopAndGet()
+            throws InterruptedException, ExecutionException, TimeoutException {
+            monitor.stop();
+            return future.get(20L, TimeUnit.SECONDS);
+        }
+
+        @Override
+        public void close() {
+            exec.shutdownNow();
+        }
     }
 }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
index 1f8685c2d47..88c37ad02f6 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
@@ -9,10 +9,6 @@
 import java.util.EnumMap;
 import java.util.Properties;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import org.apache.commons.io.IOUtils;
 import org.logstash.benchmark.cli.LogstashInstallation;
@@ -45,10 +41,8 @@ public ApacheLogsComplex(final LogstashInstallation logstash, final Path cwd,
 
     @Override
     public EnumMap<LsMetricStats, ListStatistics> run() {
-        final LsMetricsMonitor monitor = new LsMetricsMonitor(logstash.metrics());
-        final ExecutorService exec = Executors.newSingleThreadExecutor();
-        final Future<EnumMap<LsMetricStats, ListStatistics>> future = exec.submit(monitor);
-        try {
+        try (final LsMetricsMonitor.MonitorExecution monitor =
+                 new LsMetricsMonitor.MonitorExecution(logstash.metrics())) {
             final String config;
             try (final InputStream cfg = ApacheLogsComplex.class
                 .getResourceAsStream("apache.cfg")) {
@@ -57,12 +51,9 @@ public EnumMap<LsMetricStats, ListStatistics> run() {
                 config = baos.toString();
             }
             logstash.execute(config, data);
-            monitor.stop();
-            return future.get(20L, TimeUnit.SECONDS);
+            return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
-        } finally {
-            exec.shutdownNow();
         }
     }
 
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
index 2716bf813bf..226c96a5af9 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
@@ -3,10 +3,6 @@
 import java.io.IOException;
 import java.util.EnumMap;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import org.logstash.benchmark.cli.LogstashInstallation;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
@@ -34,17 +30,12 @@ public GeneratorToStdout(final LogstashInstallation logstash) {
 
     @Override
     public EnumMap<LsMetricStats, ListStatistics> run() {
-        final LsMetricsMonitor monitor = new LsMetricsMonitor(logstash.metrics());
-        final ExecutorService exec = Executors.newSingleThreadExecutor();
-        final Future<EnumMap<LsMetricStats, ListStatistics>> future = exec.submit(monitor);
-        try {
+        try (final LsMetricsMonitor.MonitorExecution monitor =
+                 new LsMetricsMonitor.MonitorExecution(logstash.metrics())) {
             logstash.execute(GeneratorToStdout.CONFIGURATION);
-            monitor.stop();
-            return future.get(20L, TimeUnit.SECONDS);
+            return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
-        } finally {
-            exec.shutdownNow();
         }
     }
 }
