diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index f4dde9c5b86..ff30b018c44 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -4,19 +4,7 @@
 require "date"
 require "logstash/namespace"
 require "logstash/util/fieldreference"
-require "logstash/time_addon"
-
-# Use a custom serialization for jsonifying Time objects.
-# TODO(sissel): Put this in a separate file.
-class Time
-  def to_json(*args)
-    return iso8601(3).to_json(*args)
-  end
-
-  def inspect
-    return to_json
-  end
-end
+require "logstash/time"
 
 # the logstash event object.
 #
@@ -31,7 +19,7 @@ def inspect
 # * "@version" - the version of the schema. Currently "1"
 #
 # They are prefixed with an "@" symbol to avoid clashing with your
-# own custom fields. 
+# own custom fields.
 #
 # When serialized, this is represented in JSON. For example:
 #
@@ -43,10 +31,10 @@ def inspect
 class LogStash::Event
   class DeprecatedMethod < StandardError; end
 
-  CHAR_PLUS = "+"
-  TIMESTAMP = "@timestamp"
-  VERSION = "@version"
-  VERSION_ONE = "1"
+  CHAR_PLUS = "+".freeze
+  TIMESTAMP = "@timestamp".freeze
+  VERSION = "@version".freeze
+  VERSION_ONE = "1".freeze
 
   public
   def initialize(data={})
@@ -54,13 +42,13 @@ def initialize(data={})
 
     @data = data
     data[VERSION] = VERSION_ONE if !@data.include?(VERSION)
-    if data.include?(TIMESTAMP) 
+    if data.include?(TIMESTAMP)
       t = data[TIMESTAMP]
       if t.is_a?(String)
-        data[TIMESTAMP] = LogStash::Time.parse_iso8601(t)
+        data[TIMESTAMP] = ::LogStash::Time.parse_iso8601(t)
       end
     else
-      data[TIMESTAMP] = ::Time.now.utc
+      data[TIMESTAMP] = ::LogStash::Time.now.utc
     end
   end # def initialize
 
@@ -98,7 +86,7 @@ def to_s
   else
     public
     def to_s
-      return self.sprintf("#{self["@timestamp"].iso8601} %{host} %{message}")
+      return self.sprintf("#{self[TIMESTAMP].iso8601(3)} %{host} %{message}")
     end # def to_s
   end
 
@@ -113,7 +101,7 @@ def unix_timestamp
   def ruby_timestamp
     raise DeprecatedMethod
   end # def unix_timestamp
-  
+
   # field-related access
   public
   def [](str)
@@ -123,11 +111,11 @@ def [](str)
       return LogStash::Util::FieldReference.exec(str, @data)
     end
   end # def []
-  
+
   public
   def []=(str, value)
     if str == TIMESTAMP && !value.is_a?(Time)
-      raise TypeError, "The field '@timestamp' must be a Time, not a #{value.class} (#{value})"
+      raise TypeError, "The field '#{TIMESTAMP}' must be a Time, not a #{value.class} (#{value})"
     end
 
     r = LogStash::Util::FieldReference.exec(str, @data) do |obj, key|
@@ -162,10 +150,10 @@ def []=(str, value)
   def fields
     raise DeprecatedMethod
   end
-  
+
   public
   def to_json(*args)
-    return @data.to_json(*args) 
+    return JSON.dump(@data)
   end # def to_json
 
   def to_hash
@@ -199,7 +187,7 @@ def remove(str)
   end # def remove
 
   # sprintf. This could use a better method name.
-  # The idea is to take an event and convert it to a string based on 
+  # The idea is to take an event and convert it to a string based on
   # any format values, delimited by %{foo} where 'foo' is a field or
   # metadata member.
   #
@@ -212,7 +200,7 @@ def remove(str)
   # If a %{name} value is an array, then we will join by ','
   # If a %{name} value does not exist, then no substitution occurs.
   #
-  # TODO(sissel): It is not clear what the value of a field that 
+  # TODO(sissel): It is not clear what the value of a field that
   # is an array (or hash?) should be. Join by comma? Something else?
   public
   def sprintf(format)
@@ -227,9 +215,9 @@ def sprintf(format)
 
       if key == "+%s"
         # Got %{+%s}, support for unix epoch time
-        next @data["@timestamp"].to_i
+        next @data[TIMESTAMP].to_i
       elsif key[0,1] == "+"
-        t = @data["@timestamp"]
+        t = @data[TIMESTAMP]
         formatter = org.joda.time.format.DateTimeFormat.forPattern(key[1 .. -1])\
           .withZone(org.joda.time.DateTimeZone::UTC)
         #next org.joda.time.Instant.new(t.tv_sec * 1000 + t.tv_usec / 1000).toDateTime.toString(formatter)
diff --git a/lib/logstash/time_addon.rb b/lib/logstash/time.rb
similarity index 67%
rename from lib/logstash/time_addon.rb
rename to lib/logstash/time.rb
index a5970332dc3..92025bd2c86 100644
--- a/lib/logstash/time_addon.rb
+++ b/lib/logstash/time.rb
@@ -1,11 +1,8 @@
 # encoding: utf-8
 require "logstash/namespace"
 
-module LogStash::Time
+class ::LogStash::Time < ::Time
   ISO8601_STRFTIME = "%04d-%02d-%02dT%02d:%02d:%02d.%06d%+03d:00".freeze
-  def self.now
-    return Time.new.utc
-  end
 
   if RUBY_PLATFORM == "java"
     JODA_ISO8601_PARSER = org.joda.time.format.ISODateTimeFormat.dateTimeParser
@@ -13,13 +10,25 @@ def self.now
     UTC = org.joda.time.DateTimeZone.forID("UTC")
     def self.parse_iso8601(t)
       millis = JODA_ISO8601_PARSER.parseMillis(t)
-      return Time.at(millis / 1000, (millis % 1000) * 1000)
+      return ::LogStash::Time.at(millis / 1000, (millis % 1000) * 1000)
     end
   else
     def self.parse_iso8601(t)
       # Warning, ruby's Time.parse is *really* terrible and slow.
       return unless t.is_a?(String)
-      return Time.parse(t).gmtime
+      return ::LogStash::Time.parse(t).utc
     end
   end
-end # module LogStash::Time
+
+  def as_json(*)
+    iso8601(3)
+  end
+
+  def to_json(*args)
+    return as_json.to_json(*args)
+  end
+
+  def inspect
+    return to_json
+  end
+end # class LogStash::Time
