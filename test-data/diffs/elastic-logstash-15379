diff --git a/Gemfile.jruby-3.1.lock.release b/Gemfile.jruby-3.1.lock.release
index c5d16931590..4e675883d0e 100644
--- a/Gemfile.jruby-3.1.lock.release
+++ b/Gemfile.jruby-3.1.lock.release
@@ -2,12 +2,12 @@ PATH
   remote: logstash-core-plugin-api
   specs:
     logstash-core-plugin-api (2.1.16-java)
-      logstash-core (= 8.10.3)
+      logstash-core (= 8.11.0)
 
 PATH
   remote: logstash-core
   specs:
-    logstash-core (8.10.3-java)
+    logstash-core (8.11.0-java)
       cgi (~> 0.3.6)
       clamp (~> 1)
       concurrent-ruby (~> 1, < 1.1.10)
@@ -54,33 +54,33 @@ GEM
     avro (1.10.2)
       multi_json (~> 1)
     aws-eventstream (1.2.0)
-    aws-partitions (1.804.0)
-    aws-sdk-cloudfront (1.82.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-partitions (1.832.0)
+    aws-sdk-cloudfront (1.83.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-cloudwatch (1.78.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-sdk-cloudwatch (1.81.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-core (3.180.3)
+    aws-sdk-core (3.185.0)
       aws-eventstream (~> 1, >= 1.0.2)
       aws-partitions (~> 1, >= 1.651.0)
       aws-sigv4 (~> 1.5)
       jmespath (~> 1, >= 1.6.1)
-    aws-sdk-kms (1.71.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-sdk-kms (1.72.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-resourcegroups (1.53.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-sdk-resourcegroups (1.55.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-s3 (1.132.1)
-      aws-sdk-core (~> 3, >= 3.179.0)
+    aws-sdk-s3 (1.136.0)
+      aws-sdk-core (~> 3, >= 3.181.0)
       aws-sdk-kms (~> 1)
       aws-sigv4 (~> 1.6)
-    aws-sdk-sns (1.65.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-sdk-sns (1.67.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-sqs (1.62.0)
-      aws-sdk-core (~> 3, >= 3.177.0)
+    aws-sdk-sqs (1.64.0)
+      aws-sdk-core (~> 3, >= 3.184.0)
       aws-sigv4 (~> 1.1)
     aws-sigv4 (1.6.0)
       aws-eventstream (~> 1, >= 1.0.2)
@@ -90,6 +90,7 @@ GEM
     belzebuth (0.2.3)
       childprocess
     benchmark-ips (2.12.0)
+    bigdecimal (3.1.4-java)
     bindata (2.4.15)
     buftok (0.2.0)
     builder (3.2.4)
@@ -107,7 +108,7 @@ GEM
     concurrent-ruby (1.1.9)
     crack (0.4.5)
       rexml
-    dalli (3.2.5)
+    dalli (3.2.6)
     date (3.3.3-java)
     diff-lcs (1.5.0)
     domain_name (0.5.20190701)
@@ -123,12 +124,12 @@ GEM
       elasticsearch-transport (>= 7.11)
       jwt (>= 1.5, < 3.0)
     elastic-workplace-search (0.4.1)
-    elasticsearch (7.17.8)
-      elasticsearch-api (= 7.17.8)
-      elasticsearch-transport (= 7.17.8)
-    elasticsearch-api (7.17.8)
+    elasticsearch (7.17.9)
+      elasticsearch-api (= 7.17.9)
+      elasticsearch-transport (= 7.17.9)
+    elasticsearch-api (7.17.9)
       multi_json
-    elasticsearch-transport (7.17.8)
+    elasticsearch-transport (7.17.9)
       faraday (~> 1)
       multi_json
     equalizer (0.0.11)
@@ -329,8 +330,8 @@ GEM
       lru_redux (~> 1.1.0)
     logstash-filter-drop (3.0.5)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-    logstash-filter-elasticsearch (3.15.3)
-      elasticsearch (>= 7.14.0)
+    logstash-filter-elasticsearch (3.16.1)
+      elasticsearch (>= 7.14.9)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ca_trusted_fingerprint_support (~> 1.0)
       logstash-mixin-normalize_config_support (~> 1.0)
@@ -350,10 +351,10 @@ GEM
       logstash-mixin-ecs_compatibility_support (~> 1.0)
       logstash-patterns-core (>= 4.3.0, < 5)
       stud (~> 0.0.22)
-    logstash-filter-http (1.4.3)
+    logstash-filter-http (1.5.0)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ecs_compatibility_support (~> 1.2)
-      logstash-mixin-http_client (>= 7.2.0, < 9.0.0)
+      logstash-mixin-http_client (>= 7.3.0, < 8.0.0)
       logstash-mixin-validator_support (~> 1.0)
     logstash-filter-json (3.2.0)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
@@ -413,7 +414,7 @@ GEM
       logstash-codec-plain
       logstash-core-plugin-api (~> 2.0)
       stud (>= 0.0.22)
-    logstash-input-beats (6.6.4-java)
+    logstash-input-beats (6.7.0-java)
       concurrent-ruby (~> 1.0)
       jar-dependencies (~> 0.3, >= 0.3.4)
       logstash-codec-multiline (>= 2.0.5)
@@ -440,8 +441,8 @@ GEM
       logstash-mixin-ecs_compatibility_support (~> 1.2)
       logstash-mixin-normalize_config_support (~> 1.0)
       logstash-mixin-plugin_factory_support
-    logstash-input-elasticsearch (4.17.2)
-      elasticsearch (>= 7.17.1)
+    logstash-input-elasticsearch (4.18.0)
+      elasticsearch (>= 7.17.9)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ca_trusted_fingerprint_support (~> 1.0)
       logstash-mixin-ecs_compatibility_support (~> 1.3)
@@ -494,21 +495,20 @@ GEM
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ecs_compatibility_support (~> 1.2)
       logstash-mixin-normalize_config_support (~> 1.0)
-    logstash-input-http_poller (5.4.0)
+    logstash-input-http_poller (5.5.0)
       logstash-codec-plain
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ecs_compatibility_support (~> 1.3)
       logstash-mixin-event_support (~> 1.0, >= 1.0.1)
-      logstash-mixin-http_client (>= 7.2.0)
+      logstash-mixin-http_client (>= 7.3.0, < 8.0.0)
       logstash-mixin-scheduler (~> 1.0)
       logstash-mixin-validator_support (~> 1.0)
-    logstash-input-imap (3.2.0)
+    logstash-input-imap (3.2.1)
       logstash-codec-plain
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ecs_compatibility_support (~> 1.3)
       logstash-mixin-validator_support (~> 1.0)
-      mail (~> 2.6.3)
-      mime-types (= 2.6.2)
+      mail (~> 2.8)
       stud (~> 0.0.22)
     logstash-input-jms (3.2.2-java)
       jruby-jms (>= 1.2.0)
@@ -606,7 +606,7 @@ GEM
       logstash-codec-plain
       logstash-core-plugin-api (~> 2.0)
       logstash-mixin-deprecation_logger_support (~> 1.0)
-    logstash-integration-jdbc (5.4.5)
+    logstash-integration-jdbc (5.4.6)
       logstash-codec-plain
       logstash-core (>= 6.5.0)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
@@ -615,7 +615,7 @@ GEM
       logstash-mixin-scheduler (~> 1.0)
       logstash-mixin-validator_support (~> 1.0)
       lru_redux
-      sequel (< 5.72.0)
+      sequel (>= 5.73.0)
       tzinfo
       tzinfo-data
     logstash-integration-kafka (11.3.0-java)
@@ -626,6 +626,13 @@ GEM
       logstash-mixin-deprecation_logger_support (~> 1.0)
       manticore (>= 0.5.4, < 1.0.0)
       stud (>= 0.0.22, < 0.1.0)
+    logstash-integration-logstash (0.0.5-java)
+      logstash-codec-json_lines (~> 3.1)
+      logstash-core-plugin-api (>= 2.1.12, <= 2.99)
+      logstash-input-http (>= 3.7.0)
+      logstash-mixin-plugin_factory_support (~> 1.0)
+      logstash-mixin-validator_support (~> 1.1)
+      logstash-output-http (>= 5.6.0)
     logstash-integration-rabbitmq (7.3.3-java)
       back_pressure (~> 1.0)
       logstash-codec-json
@@ -641,9 +648,10 @@ GEM
       logstash-core (>= 6.0.0)
     logstash-mixin-event_support (1.0.1-java)
       logstash-core (>= 6.8)
-    logstash-mixin-http_client (7.2.0)
+    logstash-mixin-http_client (7.3.0)
       logstash-codec-plain
       logstash-core-plugin-api (>= 1.60, <= 2.99)
+      logstash-mixin-normalize_config_support (~> 1.0)
       manticore (>= 0.8.0, < 1.0.0)
     logstash-mixin-normalize_config_support (1.0.0-java)
       logstash-core (>= 6.8.0)
@@ -652,14 +660,14 @@ GEM
     logstash-mixin-scheduler (1.0.1-java)
       logstash-core (>= 7.16)
       rufus-scheduler (>= 3.0.9)
-    logstash-mixin-validator_support (1.0.2-java)
+    logstash-mixin-validator_support (1.1.0-java)
       logstash-core (>= 6.8)
     logstash-output-csv (3.0.9)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-filter-json
       logstash-input-generator
       logstash-output-file
-    logstash-output-elasticsearch (11.16.0-java)
+    logstash-output-elasticsearch (11.18.0-java)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
       logstash-mixin-ca_trusted_fingerprint_support (~> 1.0)
       logstash-mixin-deprecation_logger_support (~> 1.0)
@@ -667,10 +675,9 @@ GEM
       logstash-mixin-normalize_config_support (~> 1.0)
       manticore (>= 0.8.0, < 1.0.0)
       stud (~> 0.0, >= 0.0.17)
-    logstash-output-email (4.1.2)
+    logstash-output-email (4.1.3)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-      mail (~> 2.6.3)
-      mime-types (< 3)
+      mail (~> 2.8)
       mustache (>= 0.99.8)
     logstash-output-file (4.3.0)
       logstash-codec-json_lines
@@ -678,9 +685,9 @@ GEM
       logstash-core-plugin-api (>= 2.0.0, < 2.99)
     logstash-output-graphite (3.1.6)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-    logstash-output-http (5.5.0)
+    logstash-output-http (5.6.0)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-      logstash-mixin-http_client (>= 7.2.0, < 8.0.0)
+      logstash-mixin-http_client (>= 7.3.0, < 8.0.0)
     logstash-output-lumberjack (3.1.9)
       jls-lumberjack (>= 0.0.26)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
@@ -710,15 +717,17 @@ GEM
     logstash-output-udp (3.2.0)
       logstash-codec-json
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-    logstash-output-webhdfs (3.0.6)
+    logstash-output-webhdfs (3.1.0-java)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
-      snappy (= 0.0.12)
       webhdfs
     logstash-patterns-core (4.3.4)
       logstash-core-plugin-api (>= 1.60, <= 2.99)
     lru_redux (1.1.0)
-    mail (2.6.6)
-      mime-types (>= 1.16, < 4)
+    mail (2.8.1)
+      mini_mime (>= 0.1.1)
+      net-imap
+      net-pop
+      net-smtp
     manticore (0.9.1-java)
       openssl_pkcs8_pure
     march_hare (4.5.0-java)
@@ -729,7 +738,7 @@ GEM
       atomic (~> 1.0)
       avl_tree (~> 1.2.0)
       hitimes (~> 1.1)
-    mime-types (2.6.2)
+    mini_mime (0.1.4)
     minitar (0.9)
     msgpack (1.7.2-java)
     multi_json (1.15.0)
@@ -741,8 +750,15 @@ GEM
     naught (1.1.0)
     net-http (0.3.2)
       uri
+    net-imap (0.3.7)
+      date
+      net-protocol
+    net-pop (0.1.2)
+      net-protocol
     net-protocol (0.1.3)
       timeout
+    net-smtp (0.4.0)
+      net-protocol
     nio4r (2.5.9-java)
     nokogiri (1.15.4-java)
       racc (~> 1.4)
@@ -770,10 +786,10 @@ GEM
     psych (5.1.0-java)
       jar-dependencies (>= 0.1.7)
     public_suffix (3.1.1)
-    puma (6.3.1-java)
+    puma (6.4.0-java)
       nio4r (~> 2.0)
     raabro (1.4.0)
-    racc (1.5.2-java)
+    racc (1.7.1-java)
     rack (2.2.8)
     rack-protection (2.2.4)
       rack
@@ -783,7 +799,7 @@ GEM
     rake (13.0.6)
     redis (4.8.1)
     regexp_parser (2.8.1)
-    reline (0.3.8)
+    reline (0.3.9)
       io-console (~> 0.5)
     rexml (3.2.6)
     rspec (3.12.0)
@@ -801,7 +817,7 @@ GEM
     rspec-support (3.12.1)
     rspec-wait (0.0.9)
       rspec (>= 3, < 4)
-    rubocop (1.56.3)
+    rubocop (1.56.4)
       base64 (~> 0.1.1)
       json (~> 2.3)
       language_server-protocol (>= 3.17.0)
@@ -825,16 +841,14 @@ GEM
       faraday (>= 0.17.3, < 3)
     semantic_logger (3.4.1)
       concurrent-ruby (~> 1.0)
-    sequel (5.71.0)
+    sequel (5.73.0)
+      bigdecimal
     simple_oauth (0.3.1)
     sinatra (2.2.4)
       mustermann (~> 2.0)
       rack (~> 2.2)
       rack-protection (= 2.2.4)
       tilt (~> 2.0)
-    snappy (0.0.12-java)
-      snappy-jars (~> 1.1.0)
-    snappy-jars (1.1.0.1.2-java)
     snmp (1.3.2)
     spoon (0.0.6)
       ffi
@@ -842,7 +856,7 @@ GEM
     thread_safe (0.3.6-java)
     thwait (0.2.0)
       e2mmap
-    tilt (2.2.0)
+    tilt (2.3.0)
     time (0.2.2)
       date
     timeout (0.3.2)
@@ -864,11 +878,11 @@ GEM
     tzinfo-data (1.2023.3)
       tzinfo (>= 1.0.0)
     unf (0.1.4-java)
-    unicode-display_width (2.4.2)
+    unicode-display_width (2.5.0)
     uri (0.12.2)
     webhdfs (0.10.2)
       addressable
-    webmock (3.18.1)
+    webmock (3.19.1)
       addressable (>= 2.8.0)
       crack (>= 0.3.2)
       hashdiff (>= 0.4.0, < 2.0.0)
@@ -877,10 +891,12 @@ GEM
 
 PLATFORMS
   java
+  universal-java-11
 
 DEPENDENCIES
   belzebuth
   benchmark-ips
+  bigdecimal (~> 3.1)
   childprocess (~> 4)
   ci_reporter_rspec (~> 1)
   faraday (~> 1)
@@ -972,6 +988,7 @@ DEPENDENCIES
   logstash-integration-elastic_enterprise_search
   logstash-integration-jdbc
   logstash-integration-kafka
+  logstash-integration-logstash
   logstash-integration-rabbitmq
   logstash-output-csv
   logstash-output-elasticsearch (>= 11.14.0)
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
index 3b0dd0f9680..da90b24f63e 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
@@ -1,5 +1,6 @@
 # Autogenerated from a Treetop grammar. Edits may be lost.
 
+
 require "treetop/runtime"
 require "logstash/compiler/lscl.rb"
 
@@ -48,7 +49,7 @@ def _nt_config
         s2 << r4
       end
       if s2.last
-        r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
         r2.extend(Config0)
       else
         @index = i2
@@ -60,14 +61,14 @@ def _nt_config
         break
       end
     end
-    r1 = instantiate_node(SyntaxNode, input, i1...index, s1)
+    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
     s0 << r1
     if r1
       r5 = _nt_cs
       s0 << r5
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Config, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Config,input, i0...index, s0)
       r0.extend(Config1)
     else
       @index = i0
@@ -100,7 +101,7 @@ def _nt_comment
       if r3
         r2 = r3
       else
-        r2 = instantiate_node(SyntaxNode, input, index...index)
+        r2 = instantiate_node(SyntaxNode,input, index...index)
       end
       s1 << r2
       if r2
@@ -128,7 +129,7 @@ def _nt_comment
               break
             end
           end
-          r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
           s1 << r5
           if r5
             if (match_len = has_terminal?("\r", false, index))
@@ -141,7 +142,7 @@ def _nt_comment
             if r8
               r7 = r8
             else
-              r7 = instantiate_node(SyntaxNode, input, index...index)
+              r7 = instantiate_node(SyntaxNode,input, index...index)
             end
             s1 << r7
             if r7
@@ -158,7 +159,7 @@ def _nt_comment
         end
       end
       if s1.last
-        r1 = instantiate_node(SyntaxNode, input, i1...index, s1)
+        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
         r1.extend(Comment0)
       else
         @index = i1
@@ -174,7 +175,7 @@ def _nt_comment
       @index = i0
       r0 = nil
     else
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Comment, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Comment,input, i0...index, s0)
     end
 
     node_cache[:comment][start_index] = r0
@@ -198,12 +199,12 @@ def _nt_cs
       i1 = index
       r2 = _nt_comment
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r1 = r2
       else
         r3 = _nt_whitespace
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r1 = r3
         else
           @index = i1
@@ -216,7 +217,7 @@ def _nt_cs
         break
       end
     end
-    r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Whitespace, input, i0...index, s0)
+    r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Whitespace,input, i0...index, s0)
 
     node_cache[:cs][start_index] = r0
 
@@ -253,7 +254,7 @@ def _nt_whitespace
       @index = i0
       r0 = nil
     else
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Whitespace, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Whitespace,input, i0...index, s0)
     end
 
     node_cache[:whitespace][start_index] = r0
@@ -283,6 +284,7 @@ def cs1
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_plugin_section
@@ -325,7 +327,7 @@ def _nt_plugin_section
                 s6 << r8
               end
               if s6.last
-                r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                 r6.extend(PluginSection0)
               else
                 @index = i6
@@ -337,7 +339,7 @@ def _nt_plugin_section
                 break
               end
             end
-            r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             s0 << r5
             if r5
               if (match_len = has_terminal?("}", false, index))
@@ -354,7 +356,7 @@ def _nt_plugin_section
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::PluginSection, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::PluginSection,input, i0...index, s0)
       r0.extend(PluginSection1)
     else
       @index = i0
@@ -380,12 +382,12 @@ def _nt_branch_or_plugin
     i0 = index
     r1 = _nt_branch
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_plugin
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -411,36 +413,36 @@ def _nt_plugin_type
 
     i0 = index
     if (match_len = has_terminal?("input", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"input"')
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       if (match_len = has_terminal?("filter", false, index))
-        r2 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
         @index += match_len
       else
         terminal_parse_failure('"filter"')
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         if (match_len = has_terminal?("output", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"output"')
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
         else
           @index = i0
@@ -468,6 +470,7 @@ module Plugins1
     def plugin
       elements[0]
     end
+
   end
 
   def _nt_plugins
@@ -495,7 +498,7 @@ def _nt_plugins
           s4 << r6
         end
         if s4.last
-          r4 = instantiate_node(SyntaxNode, input, i4...index, s4)
+          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
           r4.extend(Plugins0)
         else
           @index = i4
@@ -507,11 +510,11 @@ def _nt_plugins
           break
         end
       end
-      r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
+      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
       s1 << r3
     end
     if s1.last
-      r1 = instantiate_node(SyntaxNode, input, i1...index, s1)
+      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
       r1.extend(Plugins1)
     else
       @index = i1
@@ -520,7 +523,7 @@ def _nt_plugins
     if r1
       r0 = r1
     else
-      r0 = instantiate_node(SyntaxNode, input, index...index)
+      r0 = instantiate_node(SyntaxNode,input, index...index)
     end
 
     node_cache[:plugins][start_index] = r0
@@ -546,6 +549,7 @@ module Plugin1
     def attribute
       elements[0]
     end
+
   end
 
   module Plugin2
@@ -568,6 +572,7 @@ def attributes
     def cs3
       elements[5]
     end
+
   end
 
   def _nt_plugin
@@ -618,7 +623,7 @@ def _nt_plugin
                   end
                 end
                 if s9.last
-                  r9 = instantiate_node(SyntaxNode, input, i9...index, s9)
+                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                   r9.extend(Plugin0)
                 else
                   @index = i9
@@ -630,11 +635,11 @@ def _nt_plugin
                   break
                 end
               end
-              r8 = instantiate_node(SyntaxNode, input, i8...index, s8)
+              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
               s6 << r8
             end
             if s6.last
-              r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
               r6.extend(Plugin1)
             else
               @index = i6
@@ -643,7 +648,7 @@ def _nt_plugin
             if r6
               r5 = r6
             else
-              r5 = instantiate_node(SyntaxNode, input, index...index)
+              r5 = instantiate_node(SyntaxNode,input, index...index)
             end
             s0 << r5
             if r5
@@ -665,7 +670,7 @@ def _nt_plugin
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Plugin, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Plugin,input, i0...index, s0)
       r0.extend(Plugin2)
     else
       @index = i0
@@ -708,15 +713,15 @@ def _nt_name
       @index = i1
       r1 = nil
     else
-      r1 = instantiate_node(LogStash::Compiler::LSCL::AST::Name, input, i1...index, s1)
+      r1 = instantiate_node(LogStash::Compiler::LSCL::AST::Name,input, i1...index, s1)
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r3 = _nt_string
       if r3
-        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
         r0 = r3
       else
         @index = i0
@@ -766,7 +771,7 @@ def _nt_attribute
       s0 << r2
       if r2
         if (match_len = has_terminal?("=>", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"=>"')
@@ -784,7 +789,7 @@ def _nt_attribute
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Attribute, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Attribute,input, i0...index, s0)
       r0.extend(Attribute0)
     else
       @index = i0
@@ -810,32 +815,32 @@ def _nt_value
     i0 = index
     r1 = _nt_plugin
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_bareword
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_string
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_number
           if r4
-            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_array
             if r5
-              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_hash
               if r6
-                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -866,27 +871,27 @@ def _nt_array_value
     i0 = index
     r1 = _nt_bareword
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_string
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_number
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_hash
             if r5
-              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
               r0 = r5
             else
               @index = i0
@@ -945,12 +950,12 @@ def _nt_bareword
         @index = i2
         r2 = nil
       else
-        r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       end
       s0 << r2
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Bareword, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Bareword,input, i0...index, s0)
       r0.extend(Bareword0)
     else
       @index = i0
@@ -993,14 +998,14 @@ def _nt_double_quoted_string
       loop do
         i3 = index
         if (match_len = has_terminal?('\"', false, index))
-          r4 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('\'\\"\'')
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1019,7 +1024,7 @@ def _nt_double_quoted_string
           else
             @terminal_failures.pop
             @index = i6
-            r6 = instantiate_node(SyntaxNode, input, index...index)
+            r6 = instantiate_node(SyntaxNode,input, index...index)
           end
           s5 << r6
           if r6
@@ -1033,14 +1038,14 @@ def _nt_double_quoted_string
             s5 << r8
           end
           if s5.last
-            r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             r5.extend(DoubleQuotedString0)
           else
             @index = i5
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1053,7 +1058,7 @@ def _nt_double_quoted_string
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         if (match_len = has_terminal?('"', false, index))
@@ -1067,7 +1072,7 @@ def _nt_double_quoted_string
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::String, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::String,input, i0...index, s0)
       r0.extend(DoubleQuotedString1)
     else
       @index = i0
@@ -1110,14 +1115,14 @@ def _nt_single_quoted_string
       loop do
         i3 = index
         if (match_len = has_terminal?("\\'", false, index))
-          r4 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"\\\\\'"')
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1136,7 +1141,7 @@ def _nt_single_quoted_string
           else
             @terminal_failures.pop
             @index = i6
-            r6 = instantiate_node(SyntaxNode, input, index...index)
+            r6 = instantiate_node(SyntaxNode,input, index...index)
           end
           s5 << r6
           if r6
@@ -1150,14 +1155,14 @@ def _nt_single_quoted_string
             s5 << r8
           end
           if s5.last
-            r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             r5.extend(SingleQuotedString0)
           else
             @index = i5
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1170,7 +1175,7 @@ def _nt_single_quoted_string
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         if (match_len = has_terminal?("'", false, index))
@@ -1184,7 +1189,7 @@ def _nt_single_quoted_string
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::String, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::String,input, i0...index, s0)
       r0.extend(SingleQuotedString1)
     else
       @index = i0
@@ -1210,12 +1215,12 @@ def _nt_string
     i0 = index
     r1 = _nt_double_quoted_string
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_single_quoted_string
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         @index = i0
@@ -1259,14 +1264,14 @@ def _nt_regexp
       loop do
         i3 = index
         if (match_len = has_terminal?('\/', false, index))
-          r4 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('\'\\/\'')
           r4 = nil
         end
         if r4
-          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
           r3 = r4
         else
           i5, s5 = index, []
@@ -1285,7 +1290,7 @@ def _nt_regexp
           else
             @terminal_failures.pop
             @index = i6
-            r6 = instantiate_node(SyntaxNode, input, index...index)
+            r6 = instantiate_node(SyntaxNode,input, index...index)
           end
           s5 << r6
           if r6
@@ -1299,14 +1304,14 @@ def _nt_regexp
             s5 << r8
           end
           if s5.last
-            r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             r5.extend(Regexp0)
           else
             @index = i5
             r5 = nil
           end
           if r5
-            r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
             r3 = r5
           else
             @index = i3
@@ -1319,7 +1324,7 @@ def _nt_regexp
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         if (match_len = has_terminal?('/', false, index))
@@ -1333,7 +1338,7 @@ def _nt_regexp
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::RegExp, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::RegExp,input, i0...index, s0)
       r0.extend(Regexp1)
     else
       @index = i0
@@ -1373,7 +1378,7 @@ def _nt_number
     if r2
       r1 = r2
     else
-      r1 = instantiate_node(SyntaxNode, input, index...index)
+      r1 = instantiate_node(SyntaxNode,input, index...index)
     end
     s0 << r1
     if r1
@@ -1396,7 +1401,7 @@ def _nt_number
         @index = i3
         r3 = nil
       else
-        r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
+        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
       end
       s0 << r3
       if r3
@@ -1425,11 +1430,11 @@ def _nt_number
               break
             end
           end
-          r8 = instantiate_node(SyntaxNode, input, i8...index, s8)
+          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
           s6 << r8
         end
         if s6.last
-          r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
           r6.extend(Number0)
         else
           @index = i6
@@ -1438,13 +1443,13 @@ def _nt_number
         if r6
           r5 = r6
         else
-          r5 = instantiate_node(SyntaxNode, input, index...index)
+          r5 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r5
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Number, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Number,input, i0...index, s0)
       r0.extend(Number1)
     else
       @index = i0
@@ -1474,6 +1479,7 @@ module Array1
     def value
       elements[0]
     end
+
   end
 
   module Array2
@@ -1484,6 +1490,7 @@ def cs1
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_array
@@ -1538,7 +1545,7 @@ def _nt_array
               end
             end
             if s7.last
-              r7 = instantiate_node(SyntaxNode, input, i7...index, s7)
+              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
               r7.extend(Array0)
             else
               @index = i7
@@ -1550,11 +1557,11 @@ def _nt_array
               break
             end
           end
-          r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
           s4 << r6
         end
         if s4.last
-          r4 = instantiate_node(SyntaxNode, input, i4...index, s4)
+          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
           r4.extend(Array1)
         else
           @index = i4
@@ -1563,7 +1570,7 @@ def _nt_array
         if r4
           r3 = r4
         else
-          r3 = instantiate_node(SyntaxNode, input, index...index)
+          r3 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r3
         if r3
@@ -1583,7 +1590,7 @@ def _nt_array
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Array, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Array,input, i0...index, s0)
       r0.extend(Array2)
     else
       @index = i0
@@ -1603,6 +1610,7 @@ def cs1
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_hash
@@ -1633,7 +1641,7 @@ def _nt_hash
         if r4
           r3 = r4
         else
-          r3 = instantiate_node(SyntaxNode, input, index...index)
+          r3 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r3
         if r3
@@ -1653,7 +1661,7 @@ def _nt_hash
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Hash, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Hash,input, i0...index, s0)
       r0.extend(Hash0)
     else
       @index = i0
@@ -1679,6 +1687,7 @@ module Hashentries1
     def hashentry
       elements[0]
     end
+
   end
 
   def _nt_hashentries
@@ -1706,7 +1715,7 @@ def _nt_hashentries
           s3 << r5
         end
         if s3.last
-          r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
+          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           r3.extend(Hashentries0)
         else
           @index = i3
@@ -1718,11 +1727,11 @@ def _nt_hashentries
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::HashEntries, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::HashEntries,input, i0...index, s0)
       r0.extend(Hashentries1)
     else
       @index = i0
@@ -1767,17 +1776,17 @@ def _nt_hashentry
     i1 = index
     r2 = _nt_number
     if r2
-      r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
       r1 = r2
     else
       r3 = _nt_bareword
       if r3
-        r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
         r1 = r3
       else
         r4 = _nt_string
         if r4
-          r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
           r1 = r4
         else
           @index = i1
@@ -1791,7 +1800,7 @@ def _nt_hashentry
       s0 << r5
       if r5
         if (match_len = has_terminal?("=>", false, index))
-          r6 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"=>"')
@@ -1809,7 +1818,7 @@ def _nt_hashentry
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::HashEntry, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::HashEntry,input, i0...index, s0)
       r0.extend(Hashentry0)
     else
       @index = i0
@@ -1845,6 +1854,7 @@ module Branch2
     def if
       elements[0]
     end
+
   end
 
   def _nt_branch
@@ -1872,7 +1882,7 @@ def _nt_branch
           s3 << r5
         end
         if s3.last
-          r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
+          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           r3.extend(Branch0)
         else
           @index = i3
@@ -1884,7 +1894,7 @@ def _nt_branch
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         i7, s7 = index, []
@@ -1895,7 +1905,7 @@ def _nt_branch
           s7 << r9
         end
         if s7.last
-          r7 = instantiate_node(SyntaxNode, input, i7...index, s7)
+          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
           r7.extend(Branch1)
         else
           @index = i7
@@ -1904,13 +1914,13 @@ def _nt_branch
         if r7
           r6 = r7
         else
-          r6 = instantiate_node(SyntaxNode, input, index...index)
+          r6 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r6
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Branch, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Branch,input, i0...index, s0)
       r0.extend(Branch2)
     else
       @index = i0
@@ -1948,6 +1958,7 @@ def cs2
     def cs3
       elements[5]
     end
+
   end
 
   def _nt_if
@@ -1963,7 +1974,7 @@ def _nt_if
 
     i0, s0 = index, []
     if (match_len = has_terminal?("if", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"if"')
@@ -2002,7 +2013,7 @@ def _nt_if
                     s8 << r10
                   end
                   if s8.last
-                    r8 = instantiate_node(SyntaxNode, input, i8...index, s8)
+                    r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                     r8.extend(If0)
                   else
                     @index = i8
@@ -2014,7 +2025,7 @@ def _nt_if
                     break
                   end
                 end
-                r7 = instantiate_node(SyntaxNode, input, i7...index, s7)
+                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                 s0 << r7
                 if r7
                   if (match_len = has_terminal?("}", false, index))
@@ -2033,7 +2044,7 @@ def _nt_if
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::If, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::If,input, i0...index, s0)
       r0.extend(If1)
     else
       @index = i0
@@ -2075,6 +2086,7 @@ def cs3
     def cs4
       elements[7]
     end
+
   end
 
   def _nt_else_if
@@ -2090,7 +2102,7 @@ def _nt_else_if
 
     i0, s0 = index, []
     if (match_len = has_terminal?("else", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"else"')
@@ -2102,7 +2114,7 @@ def _nt_else_if
       s0 << r2
       if r2
         if (match_len = has_terminal?("if", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"if"')
@@ -2141,7 +2153,7 @@ def _nt_else_if
                         s10 << r12
                       end
                       if s10.last
-                        r10 = instantiate_node(SyntaxNode, input, i10...index, s10)
+                        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                         r10.extend(ElseIf0)
                       else
                         @index = i10
@@ -2153,7 +2165,7 @@ def _nt_else_if
                         break
                       end
                     end
-                    r9 = instantiate_node(SyntaxNode, input, i9...index, s9)
+                    r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                     s0 << r9
                     if r9
                       if (match_len = has_terminal?("}", false, index))
@@ -2174,7 +2186,7 @@ def _nt_else_if
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Elsif, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Elsif,input, i0...index, s0)
       r0.extend(ElseIf1)
     else
       @index = i0
@@ -2204,6 +2216,7 @@ def cs1
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_else
@@ -2219,7 +2232,7 @@ def _nt_else
 
     i0, s0 = index, []
     if (match_len = has_terminal?("else", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"else"')
@@ -2252,7 +2265,7 @@ def _nt_else
                 s6 << r8
               end
               if s6.last
-                r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                 r6.extend(Else0)
               else
                 @index = i6
@@ -2264,7 +2277,7 @@ def _nt_else
                 break
               end
             end
-            r5 = instantiate_node(SyntaxNode, input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             s0 << r5
             if r5
               if (match_len = has_terminal?("}", false, index))
@@ -2281,7 +2294,7 @@ def _nt_else
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Else, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Else,input, i0...index, s0)
       r0.extend(Else1)
     else
       @index = i0
@@ -2315,6 +2328,7 @@ module Condition1
     def expression
       elements[0]
     end
+
   end
 
   def _nt_condition
@@ -2350,7 +2364,7 @@ def _nt_condition
           end
         end
         if s3.last
-          r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
+          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           r3.extend(Condition0)
         else
           @index = i3
@@ -2362,11 +2376,11 @@ def _nt_condition
           break
         end
       end
-      r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Condition, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Condition,input, i0...index, s0)
       r0.extend(Condition1)
     else
       @index = i0
@@ -2390,6 +2404,7 @@ def condition
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_expression
@@ -2436,50 +2451,50 @@ def _nt_expression
       end
     end
     if s1.last
-      r1 = instantiate_node(SyntaxNode, input, i1...index, s1)
+      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
       r1.extend(Expression0)
     else
       @index = i1
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::Expression)
     else
       r7 = _nt_negative_expression
       if r7
-        r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
+        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
         r0 = r7
         r0.extend(LogStash::Compiler::LSCL::AST::Expression)
       else
         r8 = _nt_in_expression
         if r8
-          r8 = SyntaxNode.new(input, (index - 1)...index) if r8 == true
+          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
           r0 = r8
           r0.extend(LogStash::Compiler::LSCL::AST::Expression)
         else
           r9 = _nt_not_in_expression
           if r9
-            r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
+            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
             r0 = r9
             r0.extend(LogStash::Compiler::LSCL::AST::Expression)
           else
             r10 = _nt_compare_expression
             if r10
-              r10 = SyntaxNode.new(input, (index - 1)...index) if r10 == true
+              r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
               r0 = r10
               r0.extend(LogStash::Compiler::LSCL::AST::Expression)
             else
               r11 = _nt_regexp_expression
               if r11
-                r11 = SyntaxNode.new(input, (index - 1)...index) if r11 == true
+                r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                 r0 = r11
                 r0.extend(LogStash::Compiler::LSCL::AST::Expression)
               else
                 r12 = _nt_rvalue
                 if r12
-                  r12 = SyntaxNode.new(input, (index - 1)...index) if r12 == true
+                  r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                   r0 = r12
                   r0.extend(LogStash::Compiler::LSCL::AST::Expression)
                 else
@@ -2514,6 +2529,7 @@ def condition
     def cs3
       elements[5]
     end
+
   end
 
   module NegativeExpression1
@@ -2584,14 +2600,14 @@ def _nt_negative_expression
       end
     end
     if s1.last
-      r1 = instantiate_node(SyntaxNode, input, i1...index, s1)
+      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
       r1.extend(NegativeExpression0)
     else
       @index = i1
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::NegativeExpression)
     else
@@ -2613,14 +2629,14 @@ def _nt_negative_expression
         end
       end
       if s9.last
-        r9 = instantiate_node(SyntaxNode, input, i9...index, s9)
+        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
         r9.extend(NegativeExpression1)
       else
         @index = i9
         r9 = nil
       end
       if r9
-        r9 = SyntaxNode.new(input, (index - 1)...index) if r9 == true
+        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
         r0 = r9
         r0.extend(LogStash::Compiler::LSCL::AST::NegativeExpression)
       else
@@ -2687,7 +2703,7 @@ def _nt_in_expression
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::InExpression, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::InExpression,input, i0...index, s0)
       r0.extend(InExpression0)
     else
       @index = i0
@@ -2752,7 +2768,7 @@ def _nt_not_in_expression
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::NotInExpression, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::NotInExpression,input, i0...index, s0)
       r0.extend(NotInExpression0)
     else
       @index = i0
@@ -2776,7 +2792,7 @@ def _nt_in_operator
     end
 
     if (match_len = has_terminal?("in", false, index))
-      r0 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"in"')
@@ -2792,6 +2808,7 @@ module NotInOperator0
     def cs
       elements[1]
     end
+
   end
 
   def _nt_not_in_operator
@@ -2807,7 +2824,7 @@ def _nt_not_in_operator
 
     i0, s0 = index, []
     if (match_len = has_terminal?("not ", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"not "')
@@ -2819,7 +2836,7 @@ def _nt_not_in_operator
       s0 << r2
       if r2
         if (match_len = has_terminal?("in", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"in"')
@@ -2829,7 +2846,7 @@ def _nt_not_in_operator
       end
     end
     if s0.last
-      r0 = instantiate_node(SyntaxNode, input, i0...index, s0)
+      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(NotInOperator0)
     else
       @index = i0
@@ -2855,32 +2872,32 @@ def _nt_rvalue
     i0 = index
     r1 = _nt_string
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
     else
       r2 = _nt_number
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
       else
         r3 = _nt_selector
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
         else
           r4 = _nt_array
           if r4
-            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
             r0 = r4
           else
             r5 = _nt_method_call
             if r5
-              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
               r0 = r5
             else
               r6 = _nt_regexp
               if r6
-                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                 r0 = r6
               else
                 @index = i0
@@ -2915,6 +2932,7 @@ module MethodCall1
     def rvalue
       elements[0]
     end
+
   end
 
   module MethodCall2
@@ -2933,6 +2951,7 @@ def cs2
     def cs3
       elements[5]
     end
+
   end
 
   def _nt_method_call
@@ -2993,7 +3012,7 @@ def _nt_method_call
                   end
                 end
                 if s9.last
-                  r9 = instantiate_node(SyntaxNode, input, i9...index, s9)
+                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                   r9.extend(MethodCall0)
                 else
                   @index = i9
@@ -3005,11 +3024,11 @@ def _nt_method_call
                   break
                 end
               end
-              r8 = instantiate_node(SyntaxNode, input, i8...index, s8)
+              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
               s6 << r8
             end
             if s6.last
-              r6 = instantiate_node(SyntaxNode, input, i6...index, s6)
+              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
               r6.extend(MethodCall1)
             else
               @index = i6
@@ -3018,7 +3037,7 @@ def _nt_method_call
             if r6
               r5 = r6
             else
-              r5 = instantiate_node(SyntaxNode, input, index...index)
+              r5 = instantiate_node(SyntaxNode,input, index...index)
             end
             s0 << r5
             if r5
@@ -3040,7 +3059,7 @@ def _nt_method_call
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::MethodCall, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::MethodCall,input, i0...index, s0)
       r0.extend(MethodCall2)
     else
       @index = i0
@@ -3123,7 +3142,7 @@ def _nt_compare_expression
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::ComparisonExpression, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::ComparisonExpression,input, i0...index, s0)
       r0.extend(CompareExpression0)
     else
       @index = i0
@@ -3148,50 +3167,50 @@ def _nt_compare_operator
 
     i0 = index
     if (match_len = has_terminal?("==", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"=="')
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
     else
       if (match_len = has_terminal?("!=", false, index))
-        r2 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
         @index += match_len
       else
         terminal_parse_failure('"!="')
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
       else
         if (match_len = has_terminal?("<=", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"<="')
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
         else
           if (match_len = has_terminal?(">=", false, index))
-            r4 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
             @index += match_len
           else
             terminal_parse_failure('">="')
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
           else
@@ -3203,7 +3222,7 @@ def _nt_compare_operator
               r5 = nil
             end
             if r5
-              r5 = SyntaxNode.new(input, (index - 1)...index) if r5 == true
+              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
               r0 = r5
               r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
             else
@@ -3215,7 +3234,7 @@ def _nt_compare_operator
                 r6 = nil
               end
               if r6
-                r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
+                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                 r0 = r6
                 r0.extend(LogStash::Compiler::LSCL::AST::ComparisonOperator)
               else
@@ -3249,6 +3268,7 @@ def regexp_operator
     def cs2
       elements[3]
     end
+
   end
 
   def _nt_regexp_expression
@@ -3278,12 +3298,12 @@ def _nt_regexp_expression
             i5 = index
             r6 = _nt_string
             if r6
-              r6 = SyntaxNode.new(input, (index - 1)...index) if r6 == true
+              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
               r5 = r6
             else
               r7 = _nt_regexp
               if r7
-                r7 = SyntaxNode.new(input, (index - 1)...index) if r7 == true
+                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                 r5 = r7
               else
                 @index = i5
@@ -3296,7 +3316,7 @@ def _nt_regexp_expression
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::RegexpExpression, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::RegexpExpression,input, i0...index, s0)
       r0.extend(RegexpExpression0)
     else
       @index = i0
@@ -3321,26 +3341,26 @@ def _nt_regexp_operator
 
     i0 = index
     if (match_len = has_terminal?("=~", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"=~"')
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::RegExpOperator)
     else
       if (match_len = has_terminal?("!~", false, index))
-        r2 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
         @index += match_len
       else
         terminal_parse_failure('"!~"')
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::RegExpOperator)
       else
@@ -3367,50 +3387,50 @@ def _nt_boolean_operator
 
     i0 = index
     if (match_len = has_terminal?("and", false, index))
-      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
       @index += match_len
     else
       terminal_parse_failure('"and"')
       r1 = nil
     end
     if r1
-      r1 = SyntaxNode.new(input, (index - 1)...index) if r1 == true
+      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
       r0 = r1
       r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
     else
       if (match_len = has_terminal?("or", false, index))
-        r2 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
         @index += match_len
       else
         terminal_parse_failure('"or"')
         r2 = nil
       end
       if r2
-        r2 = SyntaxNode.new(input, (index - 1)...index) if r2 == true
+        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
         r0 = r2
         r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
       else
         if (match_len = has_terminal?("xor", false, index))
-          r3 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
           @index += match_len
         else
           terminal_parse_failure('"xor"')
           r3 = nil
         end
         if r3
-          r3 = SyntaxNode.new(input, (index - 1)...index) if r3 == true
+          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
           r0 = r3
           r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
         else
           if (match_len = has_terminal?("nand", false, index))
-            r4 = instantiate_node(SyntaxNode, input, index...(index + match_len))
+            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
             @index += match_len
           else
             terminal_parse_failure('"nand"')
             r4 = nil
           end
           if r4
-            r4 = SyntaxNode.new(input, (index - 1)...index) if r4 == true
+            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
             r0 = r4
             r0.extend(LogStash::Compiler::LSCL::AST::BooleanOperator)
           else
@@ -3450,7 +3470,7 @@ def _nt_selector
       @index = i0
       r0 = nil
     else
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Selector, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::Selector,input, i0...index, s0)
     end
 
     node_cache[:selector][start_index] = r0
@@ -3501,7 +3521,7 @@ def _nt_selector_element
         @index = i2
         r2 = nil
       else
-        r2 = instantiate_node(SyntaxNode, input, i2...index, s2)
+        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       end
       s0 << r2
       if r2
@@ -3516,7 +3536,7 @@ def _nt_selector_element
       end
     end
     if s0.last
-      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::SelectorElement, input, i0...index, s0)
+      r0 = instantiate_node(LogStash::Compiler::LSCL::AST::SelectorElement,input, i0...index, s0)
       r0.extend(SelectorElement0)
     else
       @index = i0
@@ -3527,8 +3547,10 @@ def _nt_selector_element
 
     r0
   end
+
 end
 
 class LogStashCompilerLSCLGrammarParser < Treetop::Runtime::CompiledParser
   include LogStashCompilerLSCLGrammar
 end
+
