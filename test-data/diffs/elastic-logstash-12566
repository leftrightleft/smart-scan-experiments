diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 812d0a0b257..bcc5274f514 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -463,14 +463,65 @@ def validate(value)
 
     class String < Setting
       def initialize(name, default=nil, strict=true, possible_strings=[])
-        @possible_strings = possible_strings
-        super(name, ::String, default, strict)
+        @spec = Java::OrgLogstashSettings::StringSetting.spec(name, default, possible_strings)
+        @value_is_set = false
+      end
+
+      def value
+        @value_is_set ? @setting.getValue() : @spec.getDefaultValue()
+      end
+
+      def set?
+        @value_is_set
+      end
+
+      def strict?
+        @spec.isStrict()
+      end
+
+      def set(value)
+        begin
+          @setting = Java::OrgLogstashSettings::StringSetting.new(value, @spec)
+        rescue java.lang.IllegalArgumentException => e
+          raise ArgumentError.new(e.message)
+        end
+        @value_is_set = true
+        @setting.getValue()
+      end
+
+      def reset
+        @setting = nil
+        @value_is_set = false
+      end
+
+      def to_hash
+        {
+          "name" => @spec.getName(),
+          "klass" => @spec.getKlass(),
+          "value" => @setting.getValue(),
+          "value_is_set" => @value_is_set,
+          "default" => @spec.getDefaultValue(),
+          # Proc#== will only return true if it's the same obj
+          # so no there's no point in comparing it
+          # also thereÅ› no use case atm to return the proc
+          # so let's not expose it
+          #"validator_proc" => @validator_proc
+        }
+      end
+
+      def name
+        @spec.getName()
+      end
+
+      def default
+        @spec.getDefaultValue()
       end
 
       def validate(value)
-        super(value)
-        unless @possible_strings.empty? || @possible_strings.include?(value)
-          raise ArgumentError.new("Invalid value \"#{value}\". Options are: #{@possible_strings.inspect}")
+        begin
+          @spec.validate(value)
+        rescue java.lang.IllegalArgumentException => e
+          raise ArgumentError.new(e.message)
         end
       end
     end
diff --git a/logstash-core/src/main/java/org/logstash/settings/Setting.java b/logstash-core/src/main/java/org/logstash/settings/Setting.java
new file mode 100644
index 00000000000..02581c5fded
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/Setting.java
@@ -0,0 +1,20 @@
+package org.logstash.settings;
+
+public class Setting<T> {
+
+    private final T value;
+    private final SettingSpecification<T> settingSpecification;
+
+    public Setting(T value, SettingSpecification<T> specification) {
+        this.value = value;
+        this.settingSpecification = specification;
+
+        if (settingSpecification.isStrict()) {
+            settingSpecification.validate(getValue());
+        }
+    }
+
+    public T getValue() {
+        return value;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/settings/SettingSpecification.java b/logstash-core/src/main/java/org/logstash/settings/SettingSpecification.java
new file mode 100644
index 00000000000..6d36c12fbc2
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/SettingSpecification.java
@@ -0,0 +1,44 @@
+package org.logstash.settings;
+
+import java.util.function.Predicate;
+
+public class SettingSpecification<T> {
+
+    private final String name;
+    private final T defaultValue;
+    private final Predicate<T> validator;
+    private final boolean strict;
+
+    public SettingSpecification(String name, T defaultValue, Predicate<T> validator) {
+        this.name = name;
+        this.defaultValue = defaultValue;
+        this.validator = validator;
+        this.strict = true;
+
+        if (isStrict()) {
+            validate(getDefaultValue());
+        }
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public T getDefaultValue() {
+        return defaultValue;
+    }
+
+    public void validate(T value) {
+        if (!this.validator.test(value)) {
+            throw new IllegalArgumentException(String.format("Failed to validate setting \"%s\" with value: %s", name, value));
+        }
+    }
+
+    public boolean isStrict() {
+        return strict;
+    }
+    
+    public Class<?> getKlass() {
+        return defaultValue.getClass();
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/settings/StringSetting.java b/logstash-core/src/main/java/org/logstash/settings/StringSetting.java
new file mode 100644
index 00000000000..bd74fc30f2e
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/StringSetting.java
@@ -0,0 +1,14 @@
+package org.logstash.settings;
+
+import java.util.List;
+
+public final class StringSetting extends Setting<String> {
+
+    public StringSetting(String value, SettingSpecification<String> settingOption) {
+        super(value, settingOption);
+    }
+
+    public static SettingSpecification<String> spec(String name, String defaultValue, List<String> possibleStrings) {
+        return new SettingSpecification<>(name, defaultValue, value -> possibleStrings.isEmpty() || possibleStrings.contains(value));
+    }
+}
