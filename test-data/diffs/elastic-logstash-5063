diff --git a/lib/bootstrap/rspec.rb b/lib/bootstrap/rspec.rb
index f32057c7f9c..ebc137af9e8 100755
--- a/lib/bootstrap/rspec.rb
+++ b/lib/bootstrap/rspec.rb
@@ -8,5 +8,14 @@
 require "rspec/core"
 require "rspec"
 
+require_relative "../rake/rspec"
+gemfiles_helpers = GemfileHelpers.new.load
+puts "WARNING: You're running the test with the current set of logstash core gems"
+puts "---------------------------------------------------------------------------"
+gemfiles_helpers.find_core_gems.each do |core_gem|
+  puts gemfiles_helpers.gemfile.find(core_gem).inspect
+end
+puts "---------------------------------------------------------------------------"
+
 status = RSpec::Core::Runner.run(ARGV.empty? ? ["spec"] : ARGV).to_i
 exit status if status != 0
diff --git a/lib/rake/rspec.rb b/lib/rake/rspec.rb
new file mode 100644
index 00000000000..431a77134ae
--- /dev/null
+++ b/lib/rake/rspec.rb
@@ -0,0 +1,173 @@
+# encoding: utf-8
+require_relative "../bootstrap/environment"
+require 'pathname'
+require_relative "../pluginmanager/gemfile"
+
+class GemfileHelpers
+
+  attr_accessor :gemfile, :gemfile_lock, :default_lockfile
+
+  def load
+    @gemfile      = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, 'r+')).load
+    @gemfile_lock = File.read(default_lockfile)
+    self
+  end
+
+  def restore
+    gemfile.save
+    File.write(default_lockfile, gemfile_lock)
+  end
+
+  def point_to_local_core_gems
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, 'r+')).load
+    find_core_gems.each do |core_gem_name|
+        update_gem(gemfile, core_gem_name, {:path => "./#{core_gem_name}" })
+    end
+    gemfile.save
+  end
+
+  def point_to_released_core_gems
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, 'r+')).load
+    find_core_gems.each do |core_gem_name|
+      update_gem(gemfile, core_gem_name, {})
+    end
+    gemfile.save
+  end
+
+  def find_core_gems
+    gemfile = File.readlines(LogStash::Environment::GEMFILE_PATH)
+    regexp  = /^gem\s+"(logstash-core[a-z|-]*)"/
+    gemfile.map do |line|
+      match = regexp.match(line)
+      next if match.nil?
+      match[1]
+    end.compact!
+  end
+
+  def update_gem(gemfile, core_gem_name, options)
+    gem = gemfile.find(core_gem_name)
+    new_gem = LogStash::Gem.new(core_gem_name, gem.requirements, {:path => "./#{core_gem_name}" })
+    gemfile.gemset.update_gem(new_gem)
+  end
+
+  private
+
+  def default_lockfile
+    ruby = "#{LogStash::Environment.ruby_engine}-#{LogStash::Environment.ruby_abi_version}"
+    Pathname.new("Gemfile.#{ruby}.lock")
+  end
+end
+
+module LogStash
+  module BundlerHelpers
+    def self.update
+      puts("Invoking bundler update...")
+      output, exception = LogStash::Bundler.invoke!
+      puts(output)
+      raise(exception) if exception
+    end
+  end
+end
+
+
+module LogStash
+
+  class RSpec
+
+    attr_reader :gemfiles_cache
+
+    def self.setup
+      # Need to be run here as because if run aftewarse (after the bundler.setup task) then the report got wrong
+      # numbers and misses files. There is an issue with our setup! method as this does not happen with the regular
+      # bundler.setup used in regular bundler flows.
+      self.setup_coverage_report if ENV['COVERAGE']
+      require "bootstrap/environment"
+      LogStash::Bundler.setup!({:without => [:build]})
+      require "rspec/core/runner"
+      require "rspec"
+      require 'ci/reporter/rake/rspec_loader'
+    end
+
+    def self.setup_coverage_report
+      SimpleCov.start do
+        # Skip non core related directories and files.
+        ["vendor/", "spec/", "bootstrap/rspec", "Gemfile", "gemspec"].each do |pattern|
+          add_filter pattern
+        end
+
+        add_group "bootstrap", "bootstrap/" # This module is used during bootstraping of LS
+        add_group "plugin manager", "pluginmanager/" # Code related to the plugin manager
+        add_group "core" do |src_file| # The LS core codebase
+          /logstash\/\w+.rb/.match(src_file.filename)
+        end
+        add_group "core-util", "logstash/util" # Set of LS utils module
+        add_group "core-config", "logstash/config" # LS Configuration modules
+        add_group "core-patches", "logstash/patches" # Patches used to overcome known issues in dependencies.
+        # LS Core plugins code base.
+        add_group "core-plugins", [ "logstash/codecs", "logstash/filters", "logstash/outputs", "logstash/inputs" ]
+      end
+    end
+
+    def cache_gemfiles
+      @gemfiles_cache = GemfileHelpers.new.load
+      self
+    end
+
+    def point_to_released_core_gems
+      gemfiles_cache.point_to_released_core_gems
+    end
+
+    def point_to_local_core_gems
+      gemfiles_cache.point_to_local_core_gems
+    end
+
+    def restore_gemfiles
+      gemfiles_cache.restore
+    end
+
+    def run(specs)
+      self.class.setup
+      ::RSpec::Core::Runner.run(specs)
+    end
+
+    def run_with_local_core_gems(specs)
+      cache_gemfiles
+      point_to_local_core_gems
+      LogStash::BundlerHelpers.update
+      exit_code = run(specs)
+    rescue
+      exit_code = 1 # Something when wrong
+    ensure
+      restore_gemfiles
+      exit_code
+    end
+
+    def self.run(specs)
+      self.new.run(specs)
+    end
+
+    def self.run_with_local_core_gems(specs)
+      rspec = self.new
+      rspec.run_with_local_core_gems(specs)
+    end
+
+    def self.core_specs
+      # note that regardless if which logstash-core-event-* gem is live, we will always run the
+      # logstash-core-event specs since currently this is the most complete Event and Timestamp specs
+      # which actually defines the Event contract and should pass regardless of the actuall underlying
+      # implementation.
+      specs = ["spec/**/*_spec.rb", "logstash-core/spec/**/*_spec.rb", "logstash-core-event/spec/**/*_spec.rb"]
+
+      # figure if the logstash-core-event-java gem is loaded and if so add its specific specs in the core specs to run
+      begin
+        require "logstash-core-event-java/version"
+        specs << "logstash-core-event-java/spec/**/*_spec.rb"
+      rescue LoadError
+        # logstash-core-event-java gem is not live, ignore and skip specs
+      end
+      require "rake"
+      ::Rake::FileList[*specs]
+    end
+
+  end
+end
diff --git a/logstash-core/spec/api/spec_helper.rb b/logstash-core/spec/api/spec_helper.rb
index 90a1bb1e378..2660cae858a 100644
--- a/logstash-core/spec/api/spec_helper.rb
+++ b/logstash-core/spec/api/spec_helper.rb
@@ -97,7 +97,7 @@ def do_request(&block)
 # this could be just included in the test and the runner will be
 # started managed for all tests.
 ##
-module LogStash; module RSpec; module RunnerConfig
+module LogStash; module Rspec; module RunnerConfig
   def self.included(klass)
     klass.before(:all) do
       LogStashRunner.instance.start
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 8c0d16ff4ef..671122d0f14 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -2,74 +2,61 @@
 # most common CI systems can not know whats up with this tests.
 
 require "pluginmanager/util"
+require "rake/rspec"
 
 namespace "test" do
 
-  task "setup" do
-    # Need to be run here as because if run aftewarse (after the bundler.setup task) then the report got wrong
-    # numbers and misses files. There is an issue with our setup! method as this does not happen with the regular
-    # bundler.setup used in regular bundler flows.
-    Rake::Task["test:setup-simplecov"].invoke if ENV['COVERAGE']
-
-    require "bootstrap/environment"
-    LogStash::Bundler.setup!({:without => [:build]})
-
-    require "rspec/core/runner"
-    require "rspec"
-    require 'ci/reporter/rake/rspec_loader'
+  desc "run core specs, using the local logstash-core gems"
+  task "core" do
+    exit(LogStash::RSpec.run_with_local_core_gems([LogStash::RSpec.core_specs]))
   end
 
-  def core_specs
-    # note that regardless if which logstash-core-event-* gem is live, we will always run the
-    # logstash-core-event specs since currently this is the most complete Event and Timestamp specs
-    # which actually defines the Event contract and should pass regardless of the actuall underlying
-    # implementation.
-    specs = ["spec/**/*_spec.rb", "logstash-core/spec/**/*_spec.rb", "logstash-core-event/spec/**/*_spec.rb"]
-
-    # figure if the logstash-core-event-java gem is loaded and if so add its specific specs in the core specs to run
-    begin
-      require "logstash-core-event-java/version"
-      specs << "logstash-core-event-java/spec/**/*_spec.rb"
-    rescue LoadError
-      # logstash-core-event-java gem is not live, ignore and skip specs
-    end
-
-    Rake::FileList[*specs]
+  desc "run core specs in fail-fast mode, using the local logstash-core gems"
+  task "core-fail-fast" do
+    exit(LogStash::RSpec.run_with_local_core_gems(["--fail-fast", LogStash::RSpec.core_specs]))
   end
 
-  desc "run core specs"
-  task "core" => ["setup"] do
-    exit(RSpec::Core::Runner.run([core_specs]))
+  desc "run core specs on a single file, using the local logstash-core gems"
+  task "core-single-file", [:specfile] do |t, args|
+    exit(LogStash::RSpec.run_with_local_core_gems([Rake::FileList[args.specfile]]))
   end
 
-  desc "run core specs in fail-fast mode"
-  task "core-fail-fast" => ["setup"] do
-    exit(RSpec::Core::Runner.run(["--fail-fast", core_specs]))
-  end
+  namespace "released" do
 
-  desc "run core specs on a single file"
-  task "core-single-file", [:specfile] => ["setup"] do |t, args|
-    exit(RSpec::Core::Runner.run([Rake::FileList[args.specfile]]))
-  end
+    desc "run core specs, using the released logstash-core gem"
+    task "core" do
+      exit(LogStash::RSpec.run([LogStash::RSpec.core_specs]))
+    end
 
-  desc "run all installed plugins specs"
-  task "plugins" => ["setup"] do
-    plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
-    # grab all spec files using the live plugins gem specs. this allows correclty also running the specs
-    # of a local plugin dir added using the Gemfile :path option. before this, any local plugin spec would
-    # not be run because they were not under the vendor/bundle/jruby/1.9/gems path
-    test_files = LogStash::PluginManager.find_plugins_gem_specs.map do |spec|
-      if plugins_to_exclude.size > 0
-        if !plugins_to_exclude.include?(Pathname.new(spec.gem_dir).basename.to_s)
+    desc "run core specs in fail-fast mode, using the released logstash-core gem"
+    task "core-fail-fast" do
+      exit(LogStash::RSpec.run(["--fail-fast", LogStash::RSpec.core_specs]))
+    end
+
+    desc "run core specs on a single file, using the released logstash-core gem"
+    task "core-single-file", [:specfile] => ["setup"] do |t, args|
+      exit(LogStash::RSpec.run([Rake::FileList[args.specfile]]))
+    end
+
+    desc "run all installed plugins specs, using the released logstash-code gem"
+    task "plugins" do
+      plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
+      # grab all spec files using the live plugins gem specs. this allows correclty also running the specs
+      # of a local plugin dir added using the Gemfile :path option. before this, any local plugin spec would
+      # not be run because they were not under the vendor/bundle/jruby/1.9/gems path
+      test_files = LogStash::PluginManager.find_plugins_gem_specs.map do |spec|
+        if plugins_to_exclude.size > 0
+          if !plugins_to_exclude.include?(Pathname.new(spec.gem_dir).basename.to_s)
+            Rake::FileList[File.join(spec.gem_dir, "spec/{input,filter,codec,output}s/*_spec.rb")]
+          end
+        else
           Rake::FileList[File.join(spec.gem_dir, "spec/{input,filter,codec,output}s/*_spec.rb")]
         end
-      else
-        Rake::FileList[File.join(spec.gem_dir, "spec/{input,filter,codec,output}s/*_spec.rb")]
-      end
-    end.flatten.compact
+      end.flatten.compact
 
-    # "--format=documentation"
-    exit(RSpec::Core::Runner.run(["--order", "rand", test_files]))
+      # "--format=documentation"
+      exit(LogStash::RSpec.run(["--order", "rand", test_files]))
+    end
   end
 
   task "install-core" => ["bootstrap", "plugin:install-core", "plugin:install-development-dependencies"]
@@ -85,23 +72,7 @@ namespace "test" do
   # Setup simplecov to group files per functional modules, like this is easier to spot places with small coverage
   task "setup-simplecov" do
     require "simplecov"
-    SimpleCov.start do
-      # Skip non core related directories and files.
-      ["vendor/", "spec/", "bootstrap/rspec", "Gemfile", "gemspec"].each do |pattern|
-        add_filter pattern
-      end
-
-      add_group "bootstrap", "bootstrap/" # This module is used during bootstraping of LS
-      add_group "plugin manager", "pluginmanager/" # Code related to the plugin manager
-      add_group "core" do |src_file| # The LS core codebase
-        /logstash\/\w+.rb/.match(src_file.filename)
-      end
-      add_group "core-util", "logstash/util" # Set of LS utils module
-      add_group "core-config", "logstash/config" # LS Configuration modules
-      add_group "core-patches", "logstash/patches" # Patches used to overcome known issues in dependencies.
-      # LS Core plugins code base.
-      add_group "core-plugins", [ "logstash/codecs", "logstash/filters", "logstash/outputs", "logstash/inputs" ]
-    end
+ 
     task.reenable
   end
 
@@ -112,7 +83,7 @@ namespace "test" do
     integration_path = File.join(source, "integration_run")
     FileUtils.rm_rf(integration_path)
 
-    exit(RSpec::Core::Runner.run([Rake::FileList["integration/**/*_spec.rb"]]))
+    exit(LogStash::RSpec.run([Rake::FileList["integration/**/*_spec.rb"]]))
   end
 
   namespace "integration" do
@@ -124,7 +95,7 @@ namespace "test" do
       FileUtils.mkdir_p(integration_path)
 
       puts "[integration_spec] configuring local environment for running test in #{integration_path}, if you want to change this behavior delete the directory."
-      exit(RSpec::Core::Runner.run([Rake::FileList["integration/**/*_spec.rb"]]))
+      exit(LogStash::RSpec.run([Rake::FileList["integration/**/*_spec.rb"]]))
     end
   end
 end
diff --git a/spec/plugin_manager/install_spec.rb b/spec/pluginmanager/install_spec.rb
similarity index 100%
rename from spec/plugin_manager/install_spec.rb
rename to spec/pluginmanager/install_spec.rb
diff --git a/spec/plugin_manager/update_spec.rb b/spec/pluginmanager/update_spec.rb
similarity index 100%
rename from spec/plugin_manager/update_spec.rb
rename to spec/pluginmanager/update_spec.rb
diff --git a/spec/plugin_manager/util_spec.rb b/spec/pluginmanager/util_spec.rb
similarity index 100%
rename from spec/plugin_manager/util_spec.rb
rename to spec/pluginmanager/util_spec.rb
diff --git a/spec/rake/rspec_spec.rb b/spec/rake/rspec_spec.rb
new file mode 100644
index 00000000000..5c8428da2e3
--- /dev/null
+++ b/spec/rake/rspec_spec.rb
@@ -0,0 +1,63 @@
+# encoding: utf-8
+require "spec_helper"
+require "rake/rspec"
+
+describe LogStash::RSpec do
+
+  context "when running with local core gems" do
+
+    let(:specs) { [LogStash::RSpec.core_specs] }
+
+    before(:each) do
+      allow(subject).to  receive(:run)
+      allow(LogStash::BundlerHelpers).to receive(:update)
+    end
+
+    it "should cache gemfiles" do
+      expect(subject).to receive(:cache_gemfiles).and_call_original
+      subject.run_with_local_core_gems(specs)
+    end
+
+    it "shuold point the Gemfile to local path" do
+      expect(subject).to receive(:point_to_local_core_gems).and_call_original
+      subject.run_with_local_core_gems(specs)
+    end
+
+    it "should restore the gemfile at the end of the process" do
+      expect(subject).to receive(:restore_gemfiles).and_call_original
+      subject.run_with_local_core_gems(specs)
+    end
+  end
+end
+
+describe GemfileHelpers do
+
+  let(:core_gems_list) do
+    [ "logstash-core", "logstash-core-event-java", "logstash-core-plugin-api" ]
+  end
+
+  let(:gem_wrapper_double) { double("gem-wrapper") }
+  let(:gemfile)            { double("gemfile") }
+  let(:gemset)             { double("gemset") }
+
+  it "should find all core gems" do
+    expect(subject.find_core_gems).to eq(core_gems_list)
+  end
+
+  describe "Gemfile manipulation" do
+
+    it "should point core gems to local path" do
+      core_gems_list.each do |core_gem_name|
+        expect(subject).to receive(:update_gem).with(any_args, core_gem_name, {:path => "./#{core_gem_name}" })
+      end
+      subject.point_to_local_core_gems
+    end
+
+    it "should point core released gems" do
+      core_gems_list.each do |core_gem_name|
+        expect(subject).to receive(:update_gem).with(any_args, core_gem_name, {})
+      end
+      subject.point_to_released_core_gems
+    end
+  end
+end
