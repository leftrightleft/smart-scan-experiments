diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 36160e16149..e89b1f1d7f9 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -72,13 +72,15 @@ configurations.archives {
 
 task javaTests(type: Test) {
     exclude '/org/logstash/RSpecTests.class'
-    exclude 'org/logstash/config/ir/ConfigCompilerTest.class'
+    exclude '/org/logstash/config/ir/ConfigCompilerTest.class'
+    exclude '/org/logstash/config/ir/CompiledPipelineTest.class'
 }
 
 task rubyTests(type: Test) {
     systemProperty 'logstash.core.root.dir', projectDir.absolutePath
     include '/org/logstash/RSpecTests.class'
-    include 'org/logstash/config/ir/ConfigCompilerTest.class'
+    include '/org/logstash/config/ir/ConfigCompilerTest.class'
+    include '/org/logstash/config/ir/CompiledPipelineTest.class'
 }
 
 artifacts {
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
new file mode 100644
index 00000000000..24f567157ea
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -0,0 +1,27 @@
+package org.logstash.config.ir;
+
+import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
+import org.jruby.RubyArray;
+import org.junit.Test;
+import org.logstash.RubyUtil;
+
+/**
+ * Tests for {@link CompiledPipeline}.
+ */
+public class CompiledPipelineTest {
+
+    @Test
+    public void basicInputOutput() throws Exception {
+        final CompiledPipeline pipeline = new CompiledPipeline(
+            ConfigCompiler.configToPipelineIR("input {stdin{}} output{stdout{}}", false),
+            new RubyPipelineMocks.MockPipeline()
+        );
+        final RubyArray batch = RubyUtil.RUBY.newArray();
+        MatcherAssert.assertThat(
+            pipeline.buildExecution().compute(batch, false, false),
+            CoreMatchers.nullValue()
+        );
+    }
+
+}
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/RubyPipelineMocks.java b/logstash-core/src/test/java/org/logstash/config/ir/RubyPipelineMocks.java
new file mode 100644
index 00000000000..0590a3ac23a
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/config/ir/RubyPipelineMocks.java
@@ -0,0 +1,74 @@
+package org.logstash.config.ir;
+
+import org.jruby.Ruby;
+import org.jruby.RubyClass;
+import org.jruby.RubyInteger;
+import org.jruby.RubyObject;
+import org.jruby.RubyString;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
+import org.logstash.config.ir.compiler.RubyIntegration;
+
+public final class RubyPipelineMocks {
+
+    private static final String MOCK_OUTPUT_CLASSNAME = "MockOutput";
+
+    private static final RubyClass MOCK_OUTPUT;
+
+    static {
+        MOCK_OUTPUT = RubyUtil.RUBY.defineClassUnder(
+            MOCK_OUTPUT_CLASSNAME, RubyUtil.RUBY.getObject(), RubyPipelineMocks.MockOutput::new,
+            RubyUtil.LOGSTASH_MODULE
+        );
+        MOCK_OUTPUT.defineAnnotatedMethods(RubyPipelineMocks.MockOutput.class);
+    }
+
+    public static final class MockPipeline implements RubyIntegration.Pipeline {
+        @Override
+        public IRubyObject buildInput(final RubyString name, final RubyInteger line,
+            final RubyInteger column,
+            final IRubyObject args) {
+            return null;
+        }
+
+        @Override
+        public IRubyObject buildOutput(final RubyString name, final RubyInteger line,
+            final RubyInteger column,
+            final IRubyObject args) {
+            final IRubyObject output = MOCK_OUTPUT.newInstance(
+                RubyUtil.RUBY.getCurrentContext(), Block.NULL_BLOCK
+            );
+            return output;
+        }
+
+        @Override
+        public RubyIntegration.Filter buildFilter(final RubyString name,
+            final RubyInteger line, final RubyInteger column,
+            final IRubyObject args) {
+            return null;
+        }
+
+        @Override
+        public RubyIntegration.Filter buildCodec(final RubyString name,
+            final IRubyObject args) {
+            return null;
+        }
+    }
+
+    @JRubyClass(name = MOCK_OUTPUT_CLASSNAME)
+    public static final class MockOutput extends RubyObject {
+
+        public MockOutput(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+
+        @JRubyMethod(name = "multi_receive", required = 1)
+        public IRubyObject multiReceive(final ThreadContext threadContext, final IRubyObject events) {
+            return threadContext.nil;
+        }
+    }
+}
