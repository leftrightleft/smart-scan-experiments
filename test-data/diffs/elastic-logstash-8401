diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index ca78035ef05..7a3265ee94c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradlew b/gradlew
index 27309d92314..cccdd3d517f 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e72f..e95643d6a2c 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
index d51c015dc12..72b9f414d24 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/Metric.java
@@ -1,12 +1,14 @@
 package org.logstash.instrument.metrics;
 
+import java.io.Serializable;
+
 /**
  * Top level contract for metrics within Logstash.
  *
  * @param <T> The underlying type for this metric. For example {@link Long} for Counter, or {@link String} for Gauge.
  * @since 6.0
  */
-public interface Metric<T> {
+public interface Metric<T extends Serializable> {
 
     /**
      * This metric's name. May be used for display purposes.
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Output.java b/logstash-core/src/main/java/org/logstash/plugin/Output.java
new file mode 100644
index 00000000000..b2e35e67461
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Output.java
@@ -0,0 +1,37 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Iterator;
+
+public interface Output {
+    /**
+     * Process a batch with the intent of sending the event externally.
+     *
+     * @param events the events to output.
+     */
+    void process(Batch batch);
+
+    interface Batch extends Iterator<Event> {
+        boolean hasNext();
+
+        Event next();
+
+        /**
+         * Drop an event from the batch
+         *
+         * @param event
+         */
+        void drop(Event event);
+
+        /**
+         * Write an event to the dead letter queue.
+         *
+         * @param event
+         * @param cause
+         */
+        void dlq(Event event, String cause);
+
+    }
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Processor.java b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
new file mode 100644
index 00000000000..8b2efbcd529
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
@@ -0,0 +1,15 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+
+public interface Processor {
+    /**
+     * Process events. In the past, this was called a `filter` in Logstash.
+     *
+     * @param events The events to be processed
+     * @return Any new events created by this processor.
+     */
+    void process(Collection<Event> events);
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/UsesDLQ.java b/logstash-core/src/main/java/org/logstash/plugin/UsesDLQ.java
new file mode 100644
index 00000000000..cb17524e56d
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/UsesDLQ.java
@@ -0,0 +1,7 @@
+package org.logstash.plugin;
+
+import org.logstash.common.io.DeadLetterQueueWriter;
+
+public interface UsesDLQ {
+    void setDLQ(DeadLetterQueueWriter dlq);
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Witnessable.java b/logstash-core/src/main/java/org/logstash/plugin/Witnessable.java
new file mode 100644
index 00000000000..cd40171f2f7
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Witnessable.java
@@ -0,0 +1,9 @@
+package org.logstash.plugin;
+
+import org.logstash.instrument.metrics.Metric;
+
+import java.util.List;
+
+public interface Witnessable {
+    List<Metric<?>> witness();
+}
diff --git a/logstash-core/src/test/java/org/logstash/TestUtil.java b/logstash-core/src/test/java/org/logstash/TestUtil.java
new file mode 100644
index 00000000000..6d21168af0c
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/TestUtil.java
@@ -0,0 +1,10 @@
+package org.logstash;
+
+import java.util.Random;
+
+public class TestUtil {
+    /**
+     * A random instance to share in the test suite.
+     */
+    public static final Random random = new Random();
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
new file mode 100644
index 00000000000..e3d6f723288
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
@@ -0,0 +1,49 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.TestUtil;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedList;
+
+import static org.junit.Assert.assertEquals;
+
+public class ProcessorTest {
+    static Collection<Event> generateEvents(int count) {
+        Collection<Event> events = new LinkedList<>();
+        for (long i = 0; i < count; i++) {
+            Event event = new Event();
+            event.setField("message", "hello world");
+            event.setField("i", i);
+            events.add(event);
+        }
+        return Collections.unmodifiableCollection(events);
+    }
+
+    @Test
+    public void testFilter() {
+        processor.process(events);
+
+        long i = 0;
+        for (Event event : events) {
+            assertEquals(i, event.getField("i"));
+            i++;
+        }
+    }
+
+    private Processor processor = new TestFilter();
+    private int eventCount = TestUtil.random.nextInt(100);
+    private Collection<Event> events = generateEvents(eventCount);
+
+    private class TestFilter implements Processor {
+
+        @Override
+        public void process(Collection<Event> events) {
+            for (Event e : events) {
+                e.setField("visited", "testFilter");
+            }
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/SSLContextThingy.java b/logstash-core/src/test/java/org/logstash/plugin/SSLContextThingy.java
new file mode 100644
index 00000000000..d5444750f8e
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/SSLContextThingy.java
@@ -0,0 +1,18 @@
+package org.logstash.plugin;
+
+import org.logstash.common.parser.Field;
+import org.logstash.common.parser.ObjectFactory;
+
+import javax.net.ssl.SSLContext;
+
+public class SSLContextThingy {
+    final static ObjectFactory<SSLContext> SSL_CONTEXT_OBJECT_FACTORY = new ObjectFactory<>(SSLContextThingy::initSSLContext,
+            Field.declareString("certificate-authorities")
+    );
+
+
+    private static SSLContext initSSLContext(String capath) {
+        return null;
+    }
+
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/SampleOutput.java b/logstash-core/src/test/java/org/logstash/plugin/SampleOutput.java
new file mode 100644
index 00000000000..1f59c866efb
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/SampleOutput.java
@@ -0,0 +1,62 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+import org.logstash.common.io.DeadLetterQueueWriter;
+import org.logstash.instrument.metrics.Metric;
+import org.logstash.instrument.metrics.counter.LongCounter;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+public class SampleOutput implements Output, Witnessable {
+    /**
+     * This is how plugins would declare metrics:
+     * 1) Define their own internal private metric fields
+     * 2) implement `HasMetrics`
+     */
+    private final LongCounter eventCounter = new LongCounter("events");
+    private final LongCounter batchCounter = new LongCounter("batches");
+
+    private final List<Metric<?>> metrics = Arrays.asList(
+            batchCounter, eventCounter
+    );
+
+    /**
+     * The metrics system would invoke this.
+     * <p>
+     * The plugin would return a list of metrics and the metrics system would be expected to wrap this up
+     * with serialization.
+     * <p>
+     * XXX: As an alternative, if we change Witness to be an interface, this could be `implements Witness`
+     * with a method of `List&lt;Metric&lt;?&gt;&gt; witness()`
+     *
+     * @return a list of metrics to export from this plugin
+     */
+    @Override /* HasMetrics interface, but maybe we refactor Witness to be an interface. */
+    public List<Metric<?>> witness() {
+        return metrics;
+    }
+
+    // All outputs would have this method.
+    @Override /* output interface */
+    public void process(Collection<Event> events, DeadLetterQueueWriter dlq) {
+        batchCounter.increment();
+
+        for (Event event : events) {
+            eventCounter.increment();
+
+            // do something with the event
+
+            /**
+             * DLQ support is optional for filters and outputs. It would only be enabled if the plugin
+             * implements `UsesDLQ`.
+             */
+            if (dlq == null) {
+                // no dlq enabled
+            } else {
+                // dlq
+            }
+        }
+    }
+}
