diff --git a/.rubocop.yml b/.rubocop.yml
index 8630d0425a9..21e75173bdc 100644
--- a/.rubocop.yml
+++ b/.rubocop.yml
@@ -30,7 +30,33 @@ Lint/BigDecimalNew:
   Enabled: true
 
 #################### Layout ###########################
-##### Enabled Cops #####
+##### Enabled/Disabled Cops #####
+Layout/EmptyLineAfterGuardClause:
+  Enabled: false
+Layout/EmptyLineAfterMagicComment:
+  Enabled: true
+Layout/EmptyLineAfterMultilineCondition:
+  Enabled: false
+Layout/EmptyLineBetweenDefs:
+  EnabLEd: true
+Layout/EmptyLines:
+  Enabled: true
+Layout/EmptyLinesAroundAccessModifier:
+  Enabled: false
+Layout/EmptyLinesAroundArguments:
+  Enabled: true
+Layout/EmptyLinesAroundAttributeAccessor:
+  Enabled: true
+Layout/EmptyLinesAroundBeginBody:
+  Enabled: true
+Layout/EmptyLinesAroundBlockBody:
+  Enabled: true
+Layout/EmptyLinesAroundExceptionHandlingKeywords:
+  Enabled: true
+Layout/EmptyLinesAroundMethodBody:
+  Enabled: true
+Layout/EmptyLinesAroundModuleBody:
+  Enabled: true
 Layout/TrailingWhitespace:
   Enabled: true
 Layout/TrailingEmptyLines:
@@ -77,34 +103,8 @@ Layout/ElseAlignment:
   Enabled: false
 Layout/EmptyComment:
   Enabled: false
-Layout/EmptyLineAfterGuardClause:
-  Enabled: false
-Layout/EmptyLineAfterMagicComment:
-  Enabled: false
-Layout/EmptyLineAfterMultilineCondition:
-  Enabled: false
-Layout/EmptyLineBetweenDefs:
-  Enabled: false
-Layout/EmptyLines:
-  Enabled: false
-Layout/EmptyLinesAroundAccessModifier:
-  Enabled: false
-Layout/EmptyLinesAroundArguments:
-  Enabled: false
-Layout/EmptyLinesAroundAttributeAccessor:
-  Enabled: false
-Layout/EmptyLinesAroundBeginBody:
-  Enabled: false
-Layout/EmptyLinesAroundBlockBody:
-  Enabled: false
 Layout/EmptyLinesAroundClassBody:
   Enabled: false
-Layout/EmptyLinesAroundExceptionHandlingKeywords:
-  Enabled: false
-Layout/EmptyLinesAroundMethodBody:
-  Enabled: false
-Layout/EmptyLinesAroundModuleBody:
-  Enabled: false
 Layout/EndAlignment:
   Enabled: false
 Layout/EndOfLine:
diff --git a/ci/test_supported_plugins.rb b/ci/test_supported_plugins.rb
index 4d9fb7c713b..f9b615de194 100644
--- a/ci/test_supported_plugins.rb
+++ b/ci/test_supported_plugins.rb
@@ -1,7 +1,7 @@
 # encoding: utf-8
 
-# Test the 
-# - build (rspec), 
+# Test the
+# - build (rspec),
 # - packaging (gem build)
 # - and deploy (bin/logstash-plugin install)
 # of a plugins inside the current Logstash, using its JRuby
@@ -104,7 +104,6 @@ def install_gem(gem_file)
   end
 end
 
-
 # reason could be a symbol, describing the phase that broke:
 # :unit_test, :gem_build, :gem_install
 FailureDetail = Struct.new(:plugin_name, :reason)
@@ -267,5 +266,3 @@ def setup_logstash_for_development
 else
   puts "NO ERROR ON PLUGINS!"
 end
-
-
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index 156e12830f3..0e8d1306507 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -143,7 +143,6 @@ def invoke!(options = {})
                 "BUNDLE_GEMFILE" => LogStash::Environment::GEMFILE_PATH,
                 "BUNDLE_SILENCE_ROOT_WARNING" => "true",
                 "BUNDLE_WITHOUT" => options[:without].join(":")}) do
-
         if !debug?
           # Will deal with transient network errors
           execute_bundler_with_retry(options)
@@ -311,6 +310,5 @@ def capture_stdout(&block); require 'stringio'
     ensure
       $stdout = old_stdout
     end
-
   end
 end
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index 1ae44f7f5f0..d7f8c90c5a8 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -72,7 +72,6 @@ def vendor_path(path)
     def pattern_path(path)
       return ::File.join(LOGSTASH_HOME, "patterns", path)
     end
-
   end
 end
 
diff --git a/lib/bootstrap/rubygems.rb b/lib/bootstrap/rubygems.rb
index 433e9fc46f8..34a05ff7da0 100644
--- a/lib/bootstrap/rubygems.rb
+++ b/lib/bootstrap/rubygems.rb
@@ -29,6 +29,7 @@ def versions(plugin)
       require_relative "patches/gems"
       Gems.versions(plugin)
     end
+
     # Take a gem package and extract it to a specific target
     # @param [String] Gem file, this must be a path
     # @param [String, String] Return a Gem::Package and the installed path
@@ -51,6 +52,5 @@ def unpack(file, path)
 
       return [package, target_path]
     end
-
   end
 end
diff --git a/lib/bootstrap/util/compress.rb b/lib/bootstrap/util/compress.rb
index d7ad13e0730..7bac73812a8 100644
--- a/lib/bootstrap/util/compress.rb
+++ b/lib/bootstrap/util/compress.rb
@@ -22,12 +22,10 @@
 require "stud/temporary"
 
 module LogStash
-
   class CompressError < StandardError; end
 
   module Util
     module Zip
-
       extend self
 
       # Extract a zip file into a destination directory.
@@ -61,7 +59,6 @@ def compress(dir, target)
     end
 
     module Tar
-
       extend self
 
       # Extract a tar.gz file into a destination directory.
diff --git a/lib/pluginmanager/bundler/logstash_injector.rb b/lib/pluginmanager/bundler/logstash_injector.rb
index d9d5a7ad8e8..2b059707437 100644
--- a/lib/pluginmanager/bundler/logstash_injector.rb
+++ b/lib/pluginmanager/bundler/logstash_injector.rb
@@ -26,7 +26,6 @@
 require "rubygems/specification"
 require "pathname"
 
-
 # This class cannot be in the logstash namespace, because of the way the DSL
 # class interact with the other libraries
 module Bundler
diff --git a/lib/pluginmanager/bundler/logstash_uninstall.rb b/lib/pluginmanager/bundler/logstash_uninstall.rb
index 2ab4168e47d..2dbee48cce9 100644
--- a/lib/pluginmanager/bundler/logstash_uninstall.rb
+++ b/lib/pluginmanager/bundler/logstash_uninstall.rb
@@ -47,7 +47,6 @@ def dependants_gems(gem_name)
 
     def uninstall!(gem_name)
       unfreeze_gemfile do
-
         dependencies_from = dependants_gems(gem_name)
 
         if dependencies_from.size > 0
diff --git a/lib/pluginmanager/errors.rb b/lib/pluginmanager/errors.rb
index 7a10957ffd5..f506cfb689d 100644
--- a/lib/pluginmanager/errors.rb
+++ b/lib/pluginmanager/errors.rb
@@ -21,6 +21,7 @@ class PluginNotFoundError < PluginManagerError; end
     class UnpackablePluginError < PluginManagerError; end
     class FileNotFoundError < PluginManagerError; end
     class InvalidPackError < PluginManagerError; end
+
     class InstallError < PluginManagerError
       attr_reader :original_exception
 
diff --git a/lib/pluginmanager/proxy_support.rb b/lib/pluginmanager/proxy_support.rb
index 4102d58ce11..fa2ad11f96f 100644
--- a/lib/pluginmanager/proxy_support.rb
+++ b/lib/pluginmanager/proxy_support.rb
@@ -23,7 +23,6 @@
 require "stud/temporary"
 require "jar-dependencies"
 
-
 # This is a bit of a hack, to make sure that all of our call pass to a specific proxies.
 # We do this before any jar-dependences check is done, meaning we have to silence him.
 module Jars
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index 638ff734d75..ccf0aa73665 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -19,7 +19,6 @@
 require "yaml"
 
 module LogStash::PluginManager
-
   def self.load_aliases_definitions(path = File.expand_path('plugin_aliases.yml', __dir__))
     content = IO.read(path)
 
@@ -58,7 +57,6 @@ class ValidationError < StandardError; end
   # @option options [Array<String>] :rubygems_source Gem sources to lookup for the verification
   # @return [Boolean] true if valid logstash plugin gem name & version or a .gem file
   def self.logstash_plugin?(plugin, version = nil, options={})
-
     if plugin_file?(plugin)
       begin
         return logstash_plugin_gem_spec?(plugin_file_spec(plugin))
@@ -174,7 +172,6 @@ def self.which_integration_plugin_provides(name, gemfile)
   # @param plugin_list [Array] array of [plugin name, version] tuples
   # @return [Array] array of [plugin name, version, ...] tuples when duplicate names have been merged and non duplicate version requirements added
   def self.merge_duplicates(plugin_list)
-
     # quick & dirty naive dedup for now
     # TODO: properly merge versions requirements
     plugin_list.uniq(&:first)
diff --git a/lib/pluginmanager/x_pack_interceptor.rb b/lib/pluginmanager/x_pack_interceptor.rb
index f850cd3ae86..a25b288abc9 100644
--- a/lib/pluginmanager/x_pack_interceptor.rb
+++ b/lib/pluginmanager/x_pack_interceptor.rb
@@ -16,11 +16,9 @@
 # under the License.
 
 module LogStash; module PluginManager
-
   # Centralised messaging about installing and removing x-pack, which is no longer a plugin, but
   # part of the distribution.
   module XPackInterceptor
-
     module Install
       extend self
 
diff --git a/logstash-core-plugin-api/logstash-core-plugin-api.gemspec b/logstash-core-plugin-api/logstash-core-plugin-api.gemspec
index 59ce4471434..db1e79c7935 100644
--- a/logstash-core-plugin-api/logstash-core-plugin-api.gemspec
+++ b/logstash-core-plugin-api/logstash-core-plugin-api.gemspec
@@ -1,4 +1,5 @@
 # -*- encoding: utf-8 -*-
+
 lib = File.expand_path('../lib', __FILE__)
 $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
 
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 3971d41738d..6cdb2b0a694 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -488,7 +488,6 @@ def shutdown_pipelines
     resolve_actions_and_converge_state([]) # We stop all the pipeline, so we converge to a empty state
   end
 
-
   def setting(key)
     @settings.get(key)
   end
diff --git a/logstash-core/lib/logstash/api/command_factory.rb b/logstash-core/lib/logstash/api/command_factory.rb
index 592833ad534..6ed9e570142 100644
--- a/logstash-core/lib/logstash/api/command_factory.rb
+++ b/logstash-core/lib/logstash/api/command_factory.rb
@@ -22,7 +22,6 @@
 require "logstash/api/commands/node"
 require "logstash/api/commands/default_metadata"
 
-
 module LogStash
   module Api
     class CommandFactory
diff --git a/logstash-core/lib/logstash/codecs/base.rb b/logstash-core/lib/logstash/codecs/base.rb
index e6f48b871f2..9479c40af85 100644
--- a/logstash-core/lib/logstash/codecs/base.rb
+++ b/logstash-core/lib/logstash/codecs/base.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require "logstash/plugin"
 
 # This is the base class for logstash codecs.
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 4a6063d2823..c476431a2e0 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -87,6 +87,7 @@ def expr
   end
 
   class Plugins < Node; end
+
   class Plugin < Node
     def expr
       expr_attributes = self.map_expr_attributes
@@ -337,7 +338,6 @@ def expr
 
       all_elements = [first_element, *rest_elements]
 
-
       res = if all_elements.size == 1
         elem = all_elements.first
         if elem.is_a?(Selector)
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
index 8d2487f6c0a..8dd50b34c9e 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
@@ -1,6 +1,5 @@
 # Autogenerated from a Treetop grammar. Edits may be lost.
 
-
 require "treetop/runtime"
 require "logstash/compiler/lscl.rb"
 
@@ -284,7 +283,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_plugin_section
@@ -470,7 +468,6 @@ module Plugins1
     def plugin
       elements[0]
     end
-
   end
 
   def _nt_plugins
@@ -549,7 +546,6 @@ module Plugin1
     def attribute
       elements[0]
     end
-
   end
 
   module Plugin2
@@ -572,7 +568,6 @@ def attributes
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_plugin
@@ -1479,7 +1474,6 @@ module Array1
     def value
       elements[0]
     end
-
   end
 
   module Array2
@@ -1490,7 +1484,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_array
@@ -1610,7 +1603,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_hash
@@ -1687,7 +1679,6 @@ module Hashentries1
     def hashentry
       elements[0]
     end
-
   end
 
   def _nt_hashentries
@@ -1854,7 +1845,6 @@ module Branch2
     def if
       elements[0]
     end
-
   end
 
   def _nt_branch
@@ -1958,7 +1948,6 @@ def cs2
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_if
@@ -2086,7 +2075,6 @@ def cs3
     def cs4
       elements[7]
     end
-
   end
 
   def _nt_else_if
@@ -2216,7 +2204,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_else
@@ -2328,7 +2315,6 @@ module Condition1
     def expression
       elements[0]
     end
-
   end
 
   def _nt_condition
@@ -2404,7 +2390,6 @@ def condition
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_expression
@@ -2529,7 +2514,6 @@ def condition
     def cs3
       elements[5]
     end
-
   end
 
   module NegativeExpression1
@@ -2808,7 +2792,6 @@ module NotInOperator0
     def cs
       elements[1]
     end
-
   end
 
   def _nt_not_in_operator
@@ -2932,7 +2915,6 @@ module MethodCall1
     def rvalue
       elements[0]
     end
-
   end
 
   module MethodCall2
@@ -2951,7 +2933,6 @@ def cs2
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_method_call
@@ -3268,7 +3249,6 @@ def regexp_operator
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_regexp_expression
@@ -3547,7 +3527,6 @@ def _nt_selector_element
 
     r0
   end
-
 end
 
 class LogStashCompilerLSCLGrammarParser < Treetop::Runtime::CompiledParser
diff --git a/logstash-core/lib/logstash/config/config_ast.rb b/logstash-core/lib/logstash/config/config_ast.rb
index 385edc77fe3..f011fac8515 100644
--- a/logstash-core/lib/logstash/config/config_ast.rb
+++ b/logstash-core/lib/logstash/config/config_ast.rb
@@ -92,7 +92,6 @@ def process_escape_sequences=(val)
       set_meta(PROCESS_ESCAPE_SEQUENCES, val)
     end
 
-
     def compile
       LogStash::Config::AST.exclusive { do_compile }
     end
@@ -156,6 +155,7 @@ def do_compile
 
   class Comment < Node; end
   class Whitespace < Node; end
+
   class PluginSection < Node
     # Global plugin numbering for the janky instance variable naming we use
     # like @filter_<name>_1
@@ -168,8 +168,6 @@ def compile_initializer
       generate_variables
       code = []
       @variables.each do |plugin, name|
-
-
         code << <<-CODE
           @generated_objects[:#{name}] = #{plugin.compile_initializer}
           @#{plugin.plugin_type}s << @generated_objects[:#{name}]
@@ -228,6 +226,7 @@ def generate_variables
   end
 
   class Plugins < Node; end
+
   class Plugin < Node
     def plugin_type
       if recursive_select_parent(Plugin).any?
@@ -324,11 +323,13 @@ def compile
       return text_value.inspect
     end
   end
+
   class Attribute < Node
     def compile
       return %Q(#{name.compile} => #{value.compile})
     end
   end
+
   class RValue < Node; end
   class Value < RValue; end
 
@@ -343,6 +344,7 @@ def compile
       return Unicode.wrap(text_value)
     end
   end
+
   class String < Value
     def compile
       if get_meta(PROCESS_ESCAPE_SEQUENCES)
@@ -352,21 +354,25 @@ def compile
       end
     end
   end
+
   class RegExp < Value
     def compile
       return "Regexp.new(" + Unicode.wrap(text_value[1...-1]) + ")"
     end
   end
+
   class Number < Value
     def compile
       return text_value
     end
   end
+
   class Array < Value
     def compile
       return "[" << recursive_select(Value).collect(&:compile).reject(&:empty?).join(", ") << "]"
     end
   end
+
   class Hash < Value
     def validate!
       duplicate_values = find_duplicate_keys
@@ -408,7 +414,6 @@ class BranchOrPlugin < Node; end
 
   class Branch < Node
     def compile
-
       # this construct is non obvious. we need to loop through each event and apply the conditional.
       # each branch of a conditional will contain a construct (a filter for example) that also loops through
       # the events variable so we have to initialize it to [event] for the branch code.
@@ -454,6 +459,7 @@ def compile
         << children.collect(&:compile).map { |s| s.split("\n", -1).map { |l| "  " + l }.join("\n") }.join("") << "\n"
     end
   end
+
   class Elsif < BranchEntry
     def compile
       children = recursive_inject { |e| e.is_a?(Branch) || e.is_a?(Plugin) }
@@ -461,6 +467,7 @@ def compile
         << children.collect(&:compile).map { |s| s.split("\n", -1).map { |l| "  " + l }.join("\n") }.join("") << "\n"
     end
   end
+
   class Else < BranchEntry
     def compile
       children = recursive_inject { |e| e.is_a?(Branch) || e.is_a?(Plugin) }
@@ -529,26 +536,28 @@ def compile
       return " #{text_value} "
     end
   end
+
   module RegExpOperator
     def compile
       return " #{text_value} "
     end
   end
+
   module BooleanOperator
     def compile
       return " #{text_value} "
     end
   end
+
   class Selector < RValue
     def compile
       return "event.get(#{text_value.inspect})"
     end
   end
+
   class SelectorElement < Node; end
 end; end; end
 
-
-
 # Monkeypatch Treetop::Runtime::SyntaxNode's inspect method to skip
 # any Whitespace or SyntaxNodes with no children.
 class Treetop::Runtime::SyntaxNode
diff --git a/logstash-core/lib/logstash/config/cpu_core_strategy.rb b/logstash-core/lib/logstash/config/cpu_core_strategy.rb
index a0280b4da9c..0f8adbf3b78 100644
--- a/logstash-core/lib/logstash/config/cpu_core_strategy.rb
+++ b/logstash-core/lib/logstash/config/cpu_core_strategy.rb
@@ -18,7 +18,6 @@
 require "logstash/config/defaults"
 
 module LogStash module Config module CpuCoreStrategy
-
   extend self
 
   def maximum
diff --git a/logstash-core/lib/logstash/config/defaults.rb b/logstash-core/lib/logstash/config/defaults.rb
index abb1c374915..0018d8ae474 100644
--- a/logstash-core/lib/logstash/config/defaults.rb
+++ b/logstash-core/lib/logstash/config/defaults.rb
@@ -18,7 +18,6 @@
 require "concurrent"
 
 module LogStash module Config module Defaults
-
   extend self
 
   def input
diff --git a/logstash-core/lib/logstash/config/grammar.rb b/logstash-core/lib/logstash/config/grammar.rb
index 23d0cd012a3..6ee61e4e23b 100644
--- a/logstash-core/lib/logstash/config/grammar.rb
+++ b/logstash-core/lib/logstash/config/grammar.rb
@@ -1,6 +1,5 @@
 # Autogenerated from a Treetop grammar. Edits may be lost.
 
-
 require "treetop/runtime"
 require "logstash/config/config_ast"
 
@@ -308,7 +307,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_plugin_section
@@ -494,7 +492,6 @@ module Plugins1
     def plugin
       elements[0]
     end
-
   end
 
   def _nt_plugins
@@ -573,7 +570,6 @@ module Plugin1
     def attribute
       elements[0]
     end
-
   end
 
   module Plugin2
@@ -596,7 +592,6 @@ def attributes
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_plugin
@@ -1503,7 +1498,6 @@ module Array1
     def value
       elements[0]
     end
-
   end
 
   module Array2
@@ -1514,7 +1508,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_array
@@ -1634,7 +1627,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_hash
@@ -1711,7 +1703,6 @@ module Hashentries1
     def hashentry
       elements[0]
     end
-
   end
 
   def _nt_hashentries
@@ -1878,7 +1869,6 @@ module Branch2
     def if
       elements[0]
     end
-
   end
 
   def _nt_branch
@@ -1982,7 +1972,6 @@ def cs2
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_if
@@ -2110,7 +2099,6 @@ def cs3
     def cs4
       elements[7]
     end
-
   end
 
   def _nt_else_if
@@ -2240,7 +2228,6 @@ def cs1
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_else
@@ -2352,7 +2339,6 @@ module Condition1
     def expression
       elements[0]
     end
-
   end
 
   def _nt_condition
@@ -2428,7 +2414,6 @@ def condition
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_expression
@@ -2553,7 +2538,6 @@ def condition
     def cs3
       elements[5]
     end
-
   end
 
   module NegativeExpression1
@@ -2832,7 +2816,6 @@ module NotInOperator0
     def cs
       elements[1]
     end
-
   end
 
   def _nt_not_in_operator
@@ -2956,7 +2939,6 @@ module MethodCall1
     def rvalue
       elements[0]
     end
-
   end
 
   module MethodCall2
@@ -2975,7 +2957,6 @@ def cs2
     def cs3
       elements[5]
     end
-
   end
 
   def _nt_method_call
@@ -3292,7 +3273,6 @@ def regexp_operator
     def cs2
       elements[3]
     end
-
   end
 
   def _nt_regexp_expression
@@ -3571,7 +3551,6 @@ def _nt_selector_element
 
     r0
   end
-
 end
 
 class LogStashConfigParser < Treetop::Runtime::CompiledParser
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index bcf60c3ba39..e034c9223eb 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -47,7 +47,6 @@
 # }
 #
 module LogStash::Config::Mixin
-
   include LogStash::Util::SubstitutionVariables
   include LogStash::Util::Loggable
 
@@ -166,7 +165,6 @@ def config_init(params)
   end # def config_init
 
   module DSL
-
     include LogStash::Util::SubstitutionVariables
 
     attr_accessor :flags
diff --git a/logstash-core/lib/logstash/config/modules_common.rb b/logstash-core/lib/logstash/config/modules_common.rb
index 5d5db1b878d..157ead21b04 100644
--- a/logstash-core/lib/logstash/config/modules_common.rb
+++ b/logstash-core/lib/logstash/config/modules_common.rb
@@ -81,7 +81,6 @@ def self.pipeline_configs(settings)
             next
           end
 
-
           alt_name = "module-#{module_name}"
           pipeline_id = alt_name
           module_settings.set("pipeline.id", pipeline_id)
diff --git a/logstash-core/lib/logstash/dependency_report.rb b/logstash-core/lib/logstash/dependency_report.rb
index a56a9ef58a9..7f827ec028c 100644
--- a/logstash-core/lib/logstash/dependency_report.rb
+++ b/logstash-core/lib/logstash/dependency_report.rb
@@ -80,7 +80,6 @@ def jars
     #   Look at META-INF/MANIFEST.MF for any jars in each gem
     #   Note any important details.
     Gem::Specification.select { |g| g.requirements && g.requirements.any? { |r| r =~ /^jar / } }.collect do |gem|
-
       # Where is the gem installed
       root = gem.full_gem_path
 
diff --git a/logstash-core/lib/logstash/elasticsearch_client.rb b/logstash-core/lib/logstash/elasticsearch_client.rb
index a59d72e3c8b..1fde69a8c0a 100644
--- a/logstash-core/lib/logstash/elasticsearch_client.rb
+++ b/logstash-core/lib/logstash/elasticsearch_client.rb
@@ -27,6 +27,7 @@ class Response
     # duplicated here from Elasticsearch::Transport::Transport::Response
     # to create a normalised response across different client IMPL
     attr_reader :status, :body, :headers
+
     def initialize(status, body, headers={})
       @status, @body, @headers = status, body, headers
       @body = body.force_encoding('UTF-8') if body.respond_to?(:force_encoding)
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index f461d3b81c3..3a26b1b255d 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -113,8 +113,6 @@ module Environment
   # post_process
   ].each {|setting| SETTINGS.register(setting) }
 
-
-
   # Compute the default queue path based on `path.data`
   default_queue_file_path = ::File.join(SETTINGS.get("path.data"), "queue")
   SETTINGS.register Setting::WritableDirectory.new("path.queue", default_queue_file_path)
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index 49d56423723..41ddbbd35da 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "logstash/util/decorators"
@@ -160,7 +159,6 @@ def do_filter(event, &block)
     @slow_logger.on_event("event processing time", @original_params, event, java.lang.System.nanoTime - time)
   end
 
-
   # in 1.5.0 multi_filter is meant to be used in the generated filter function in LogStash::Config::AST::Plugin only
   # and is temporary until we refactor the filter method interface to accept events list and return events list,
   # just list in multi_filter see https://github.com/elastic/logstash/issues/2872.
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 7cf05e50d40..0465403a90e 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "logstash/codecs/base"
diff --git a/logstash-core/lib/logstash/instrument/metric_store.rb b/logstash-core/lib/logstash/instrument/metric_store.rb
index c2d23bc2942..f31b149a771 100644
--- a/logstash-core/lib/logstash/instrument/metric_store.rb
+++ b/logstash-core/lib/logstash/instrument/metric_store.rb
@@ -66,7 +66,6 @@ def initialize
     #                         to the provided default_value_generator block will be stored.
     #   @return [Metric] the value as it exists in the tree after this operation
     def fetch_or_store(namespaces, key, default_value = nil)
-
       # We first check in the `@fast_lookup` store to see if we have already see that metrics before,
       # This give us a `o(1)` access, which is faster than searching through the structured
       # data store (Which is a `o(n)` operation where `n` is the number of element in the namespace and
@@ -134,7 +133,6 @@ def get_shallow(*key_paths)
       key_paths.reduce(get(*key_paths)) {|acc, p| acc[p]}
     end
 
-
     # Return a hash including the values of the keys given at the path given
     #
     # Example Usage:
diff --git a/logstash-core/lib/logstash/instrument/metric_type/counter.rb b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
index 21f101b91fd..9c22a78315f 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/counter.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
@@ -22,7 +22,6 @@ class Counter < LongCounter
 
     def initialize(namespaces, key)
       super(key.to_s)
-
     end
 
     def execute(action, value = 1)
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb b/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
index c84b6cbbec0..c9de321ffa9 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
@@ -22,6 +22,7 @@ class Cgroup
     include LogStash::Util::Loggable
     class Override
       attr_reader :key, :value
+
       def initialize(key)
         @key = key
         @value = java.lang.System.getProperty(@key)
@@ -89,6 +90,7 @@ def controller_groups
 
     module ControllerResource
       attr_reader :base_path, :override, :offset_path
+
       def implemented?
         true
       end
@@ -102,6 +104,7 @@ def common_initialize(base, override_key, original_path)
         @procs[:read_int] = lambda {|path| IO.readlines(path).first.to_i }
         @procs[:read_lines] = lambda {|path| IO.readlines(path) }
       end
+
       def call_if_file_exists(call_key, file, not_found_value)
         path = ::File.join(@base_path, @offset_path, file)
         if ::File.exist?(path)
@@ -125,6 +128,7 @@ class CpuAcctResource
       def initialize(original_path)
         common_initialize(CPUACCT_DIR, "ls.cgroup.cpuacct.path.override", original_path)
       end
+
       def to_hash
         {:control_group => offset_path, :usage_nanos => cpuacct_usage}
       end
@@ -140,6 +144,7 @@ class CpuResource
       def initialize(original_path)
         common_initialize(CPU_DIR, "ls.cgroup.cpu.path.override", original_path)
       end
+
       def to_hash
         {
           :control_group => offset_path,
@@ -152,9 +157,11 @@ def to_hash
       def cfs_period_us
         call_if_file_exists(:read_int, "cpu.cfs_period_us", -1)
       end
+
       def cfs_quota_us
         call_if_file_exists(:read_int, "cpu.cfs_quota_us", -1)
       end
+
       def build_cpu_stats_hash
         stats = CpuStats.new
         lines = call_if_file_exists(:read_lines, "cpu.stat", [])
@@ -165,9 +172,11 @@ def build_cpu_stats_hash
 
     class UnimplementedResource
       attr_reader :controller, :original_path
+
       def initialize(controller, original_path)
         @controller, @original_path = controller, original_path
       end
+
       def implemented?
         false
       end
@@ -179,6 +188,7 @@ def initialize
         @number_of_times_throttled = -1
         @time_throttled_nanos = -1
       end
+
       def update(lines)
         lines.each do |line|
           fields = line.split(/\s+/)
@@ -190,6 +200,7 @@ def update(lines)
           end
         end
       end
+
       def to_hash
         {
           :number_of_elapsed_periods => @number_of_elapsed_periods,
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
index 2fb38d000aa..f7f2fcfe191 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
@@ -32,7 +32,6 @@
 java_import 'org.logstash.instrument.reports.MemoryReport'
 java_import 'org.logstash.instrument.reports.ProcessReport'
 
-
 module LogStash module Instrument module PeriodicPoller
   class JVM < Base
     class GarbageCollectorName
@@ -118,7 +117,6 @@ def collect_process_metrics
       metric.gauge(cpu_path, :total_in_millis, cpu_metrics["total_in_millis"])
 
       metric.gauge(path + [:mem], :total_virtual_in_bytes, process_metrics["mem"]["total_virtual_in_bytes"])
-
     end
 
     def collect_load_average
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 079be843224..b0542b5b6c5 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -645,5 +645,4 @@ def wait_input_threads_termination(timeout_seconds, &block)
   def inputs_running?
     @input_threads.any?(&:alive?)
   end
-
 end; end
diff --git a/logstash-core/lib/logstash/json.rb b/logstash-core/lib/logstash/json.rb
index 9df87f64a98..b5d137f6cb6 100644
--- a/logstash-core/lib/logstash/json.rb
+++ b/logstash-core/lib/logstash/json.rb
@@ -27,7 +27,6 @@ def jruby_load(data, options = {})
       # options[:symbolize_keys] ? JrJackson::Raw.parse_sym(data) : JrJackson::Raw.parse_raw(data)
 
       JrJackson::Ruby.parse(data, options)
-
     rescue JrJackson::ParseError => e
       raise LogStash::Json::ParserError.new(e.message)
     end
@@ -38,13 +37,11 @@ def jruby_dump(o, options={})
       # also look for Java::JavaUtil::ArrayList, see TODO submit issue
       # o.is_a?(Enumerable) ? JrJackson::Raw.generate(o) : JrJackson::Json.dump(o)
       JrJackson::Base.generate(o, options)
-
     rescue => e
       raise LogStash::Json::GeneratorError.new(e.message)
     end
 
     alias_method :load, "jruby_load".to_sym
     alias_method :dump, "jruby_dump".to_sym
-
   end
 end
diff --git a/logstash-core/lib/logstash/modules/cli_parser.rb b/logstash-core/lib/logstash/modules/cli_parser.rb
index e75b3c04125..f69d0884fd3 100644
--- a/logstash-core/lib/logstash/modules/cli_parser.rb
+++ b/logstash-core/lib/logstash/modules/cli_parser.rb
@@ -19,6 +19,7 @@ module LogStash module Modules class CLIParser
   include LogStash::Util::Loggable
 
   attr_reader :output
+
   def initialize(module_names, module_variables)
     @output = []
     # The #compact here catches instances when module_variables may be nil or
diff --git a/logstash-core/lib/logstash/modules/elasticsearch_importer.rb b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
index 2a27f22ddd2..07c68cea796 100644
--- a/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
+++ b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
@@ -46,5 +46,4 @@ def content_exists?(path)
     response = @client.head(path)
     response.status >= 200 && response.status < 300
   end
-
 end end end # class LogStash::Modules::Importer
diff --git a/logstash-core/lib/logstash/modules/kibana_client.rb b/logstash-core/lib/logstash/modules/kibana_client.rb
index c4b624cc420..812dc3264ed 100644
--- a/logstash-core/lib/logstash/modules/kibana_client.rb
+++ b/logstash-core/lib/logstash/modules/kibana_client.rb
@@ -28,6 +28,7 @@ module LogStash module Modules class KibanaClient
   class Response
     # to create a custom response with body as an Object (Hash or Array)
     attr_reader :status, :body, :headers
+
     def initialize(status, body, headers={})
       @status, @body, @headers = status, body, headers
       @body = body.is_a?(String) ? LogStash::Json.load(body) : body
@@ -130,7 +131,6 @@ def get(relative_path)
 
   # content will be converted to a json string
   def post(relative_path, content, headers = nil)
-
     body = content.is_a?(String) ? content : LogStash::Json.dump(content)
     options = {:body => body}.merge(headers || @http_options)
     safely(:post, relative_path, options)
diff --git a/logstash-core/lib/logstash/modules/kibana_settings.rb b/logstash-core/lib/logstash/modules/kibana_settings.rb
index 0fd5d3cf98a..d2ed4f24be1 100644
--- a/logstash-core/lib/logstash/modules/kibana_settings.rb
+++ b/logstash-core/lib/logstash/modules/kibana_settings.rb
@@ -22,6 +22,7 @@ module LogStash module Modules class KibanaSettings < KibanaBase
 
   class Setting
     attr_reader :name, :value
+
     def initialize(name, value)
       @name, @value = name, value
     end
diff --git a/logstash-core/lib/logstash/modules/scaffold.rb b/logstash-core/lib/logstash/modules/scaffold.rb
index 05bbc4de065..548825be651 100644
--- a/logstash-core/lib/logstash/modules/scaffold.rb
+++ b/logstash-core/lib/logstash/modules/scaffold.rb
@@ -66,5 +66,4 @@ def config_string()
   def is_enabled?(settings)
     true
   end
-
 end end end # class LogStash::Modules::Scaffold
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 231d19f1e52..750fb626df3 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "concurrent/atomic/atomic_fixnum"
diff --git a/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb b/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
index 05458a037bc..b01049e4cb9 100644
--- a/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
+++ b/logstash-core/lib/logstash/patches/bugfix_jruby_2558.rb
@@ -44,6 +44,7 @@ class TCPSocket
     alias_method :orig_peeraddr, :peeraddr
     include JRubyBug2558SocketPeerAddrBugFix
   end
+
   class UDPSocket
     alias_method :orig_peeraddr, :peeraddr
     include JRubyBug2558SocketPeerAddrBugFix
diff --git a/logstash-core/lib/logstash/patches/clamp.rb b/logstash-core/lib/logstash/patches/clamp.rb
index 80a9dcbe36d..149d2f02c46 100644
--- a/logstash-core/lib/logstash/patches/clamp.rb
+++ b/logstash-core/lib/logstash/patches/clamp.rb
@@ -33,7 +33,6 @@ def default_from_environment
   end
 
   module Option
-
     module Declaration
       def deprecated_option(switches, type, description, opts = {})
         Option::Definition.new(switches, type, description, opts).tap do |option|
@@ -45,7 +44,6 @@ def deprecated_option(switches, type, description, opts = {})
     end
 
     module StrictDeclaration
-
       include Clamp::Attribute::Declaration
       include LogStash::Util::Loggable
 
diff --git a/logstash-core/lib/logstash/pipeline_action/create.rb b/logstash-core/lib/logstash/pipeline_action/create.rb
index d6ae384ea57..ffd09777733 100644
--- a/logstash-core/lib/logstash/pipeline_action/create.rb
+++ b/logstash-core/lib/logstash/pipeline_action/create.rb
@@ -18,7 +18,6 @@
 require "logstash/pipeline_action/base"
 require "logstash/java_pipeline"
 
-
 module LogStash module PipelineAction
   class Create < Base
     include LogStash::Util::Loggable
diff --git a/logstash-core/lib/logstash/pipelines_registry.rb b/logstash-core/lib/logstash/pipelines_registry.rb
index 6032387ce3a..9361e95ace7 100644
--- a/logstash-core/lib/logstash/pipelines_registry.rb
+++ b/logstash-core/lib/logstash/pipelines_registry.rb
@@ -122,9 +122,9 @@ def get_lock(pipeline_id)
     end
   end
 
-
   class PipelinesRegistry
     attr_reader :states
+
     include LogStash::Util::Loggable
 
     def initialize
diff --git a/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb b/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
index fc0cc629e5d..e4fdc658d85 100644
--- a/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
+++ b/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
@@ -36,7 +36,6 @@ def register
     end
     # add address to the plugin stats
     metric.gauge(:address, address)
-
   end
 
   def run(queue)
@@ -85,5 +84,4 @@ def stop
   def isRunning
     @running.get
   end
-
 end; end; end; end; end
diff --git a/logstash-core/lib/logstash/plugins/event_factory_support.rb b/logstash-core/lib/logstash/plugins/event_factory_support.rb
index 007218858ab..5f1d9b2ee8c 100644
--- a/logstash-core/lib/logstash/plugins/event_factory_support.rb
+++ b/logstash-core/lib/logstash/plugins/event_factory_support.rb
@@ -3,7 +3,6 @@
 module LogStash
   module Plugins
     module EventFactorySupport
-
       extend LogStash::Util::ThreadSafeAttributes
 
       # The event_factory method is effectively final and should not be re-defined by plugins.
@@ -62,7 +61,6 @@ def new_event(payload = {})
 
       end
       private_constant :TargetedEventFactory
-
     end
   end
 end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 9352ef725f1..ee8436e91fe 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -368,7 +368,6 @@ def execute
 
     configure_plugin_paths(setting("path.plugins"))
 
-
     @settings.format_settings.each {|line| logger.debug(line) }
 
     # Check for absence of any configuration
@@ -441,7 +440,6 @@ def execute
     org.apache.logging.log4j.LogManager.shutdown
 
     agent_return
-
   rescue org.logstash.LockException => e
     logger.fatal(I18n.t("logstash.runner.locked-data-path", :path => setting("path.data")))
     return 1
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index d1df037cda7..47fd481f88e 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -24,7 +24,6 @@
 require "i18n"
 
 module LogStash
-
   class Settings
 
     include LogStash::Util::SubstitutionVariables
@@ -77,7 +76,6 @@ def self.included(base)
       "queue.type",
     ]
 
-
     def initialize
       @settings = {}
       # Theses settings were loaded from the yaml file
diff --git a/logstash-core/lib/logstash/util.rb b/logstash-core/lib/logstash/util.rb
index 614ea50a5b8..be839342a88 100644
--- a/logstash-core/lib/logstash/util.rb
+++ b/logstash-core/lib/logstash/util.rb
@@ -74,7 +74,6 @@ def self.thread_info(thread)
     }
   end
 
-
   # Merge hash 'src' into 'dst' nondestructively
   #
   # Duplicate keys will become array values
@@ -156,7 +155,6 @@ def self.hash_merge_many(*hashes)
     return dst
   end # def hash_merge_many
 
-
   # normalize method definition based on platform.
   # normalize is used to convert an object create through
   # json deserialization from JrJackson in :raw mode to pure Ruby
@@ -234,5 +232,4 @@ def self.blank?(value)
       value.respond_to?(:empty?) ? value.empty? : !value
     end
   end
-
 end # module LogStash::Util
diff --git a/logstash-core/lib/logstash/util/decorators.rb b/logstash-core/lib/logstash/util/decorators.rb
index 9fce4875cac..989484f6d37 100644
--- a/logstash-core/lib/logstash/util/decorators.rb
+++ b/logstash-core/lib/logstash/util/decorators.rb
@@ -18,7 +18,6 @@
 require "logstash/util"
 
 module LogStash::Util
-
   # Decorators provides common manipulation on the event data.
   module Decorators
     include LogStash::Util::Loggable
@@ -64,7 +63,5 @@ def add_tags(new_tags, event, pluginname)
 
       event.set("tags", tags)
     end
-
   end # module LogStash::Util::Decorators
-
 end # module LogStash::Util
diff --git a/logstash-core/lib/logstash/util/safe_uri.rb b/logstash-core/lib/logstash/util/safe_uri.rb
index 7b88cdaea10..d568bba3183 100644
--- a/logstash-core/lib/logstash/util/safe_uri.rb
+++ b/logstash-core/lib/logstash/util/safe_uri.rb
@@ -26,7 +26,6 @@ class LogStash::Util::SafeURI
 
   extend Forwardable
 
-
   attr_reader :uri
 
   public
diff --git a/logstash-core/lib/logstash/util/settings_helper.rb b/logstash-core/lib/logstash/util/settings_helper.rb
index 59fe9ab6b4d..b319d84b920 100644
--- a/logstash-core/lib/logstash/util/settings_helper.rb
+++ b/logstash-core/lib/logstash/util/settings_helper.rb
@@ -30,7 +30,6 @@
 # The methods should be called in the above order before the settings are ready to be used.
 ########################
 module LogStash::Util::SettingsHelper
-
   # The `path.settings` and `path.logs` can not be defined in "logstash/environment" since the `Environment::LOGSTASH_HOME` doesn't
   # exist unless launched via "bootstrap/environment"
   def self.pre_process
@@ -93,5 +92,4 @@ def self.cli_help?(args)
     # I know, double negative
     !(["--help", "-h"] & args).empty?
   end
-
 end
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index baa47f3318e..58876ff4054 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -21,7 +21,6 @@
 require_relative 'password'
 
 module ::LogStash::Util::SubstitutionVariables
-
   include LogStash::Util::Loggable
 
   SUBSTITUTION_PLACEHOLDER_REGEX = /\${(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?}/
diff --git a/logstash-core/lib/logstash/util/thread_safe_attributes.rb b/logstash-core/lib/logstash/util/thread_safe_attributes.rb
index fddd3bc71c8..1a525881530 100644
--- a/logstash-core/lib/logstash/util/thread_safe_attributes.rb
+++ b/logstash-core/lib/logstash/util/thread_safe_attributes.rb
@@ -19,7 +19,6 @@ module LogStash
   module Util
     # @api internal
     module ThreadSafeAttributes
-
       # Thread-safe lazy initialized attribute with a given (variable) name.
       def lazy_init_attr(attribute, variable: "@#{attribute}".to_sym, &block)
         raise ArgumentError.new("invalid attribute name: #{attribute}") unless attribute.match? /^[_A-Za-z]\w*$/
@@ -38,7 +37,6 @@ def lazy_init_attr(attribute, variable: "@#{attribute}".to_sym, &block)
           end
         end
       end
-
     end
   end
 end
diff --git a/logstash-core/lib/logstash/util/unicode_trimmer.rb b/logstash-core/lib/logstash/util/unicode_trimmer.rb
index b8bb1c0d365..9169ecccac9 100644
--- a/logstash-core/lib/logstash/util/unicode_trimmer.rb
+++ b/logstash-core/lib/logstash/util/unicode_trimmer.rb
@@ -1,4 +1,5 @@
 # encoding: utf-8
+
 module LogStash::Util::UnicodeTrimmer
   # The largest possible unicode chars are 4 bytes
   # http://stackoverflow.com/questions/9533258/what-is-the-maximum-number-of-bytes-for-a-utf-8-encoded-character
diff --git a/logstash-core/lib/logstash/util/worker_threads_default_printer.rb b/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
index a45184cc172..c27ffdfae2c 100644
--- a/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
+++ b/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
@@ -19,7 +19,6 @@
 
 # This class exists to format the settings for default worker threads
 module LogStash module Util class WorkerThreadsDefaultPrinter
-
   def initialize(settings)
     @setting = settings.fetch('pipeline.workers', 0)
     @default = settings.fetch('default-pipeline-workers', 0)
@@ -39,5 +38,4 @@ def visit_default(collector)
     return if @default == 0
     collector.push "Default pipeline workers: #{@default}"
   end
-
 end end end
diff --git a/logstash-core/spec/conditionals_spec.rb b/logstash-core/spec/conditionals_spec.rb
index 6621b128f9a..41e6bb2724d 100644
--- a/logstash-core/spec/conditionals_spec.rb
+++ b/logstash-core/spec/conditionals_spec.rb
@@ -47,6 +47,7 @@ class DummyNullOutput < LogStash::Outputs::Base
 
     def register
     end
+
     def multi_receive(events)
     end
   end
@@ -366,7 +367,6 @@ def multi_receive(events)
       sample_one("sample") { expect(subject.get("tags")).to include("failure") }
       sample_one("some sample") { expect(subject.get("tags")).to include("failure") }
     end
-
   end
 
   describe "negated expressions" do
@@ -413,7 +413,6 @@ def multi_receive(events)
       sample_one("sample") { expect(subject.get("tags")).not_to include("failure") }
       sample_one("some sample") { expect(subject.get("tags")).not_to include("failure") }
     end
-
   end
 
   describe "value as an expression" do
diff --git a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
index 9352748551b..156d554c8a3 100644
--- a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
+++ b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require "logstash/instrument/namespaced_metric"
 
 describe LogStash::WrappedAckedQueue, :stress_test => true do
diff --git a/logstash-core/spec/logstash/agent/converge_spec.rb b/logstash-core/spec/logstash/agent/converge_spec.rb
index 91a752f6a85..d1ba2f58716 100644
--- a/logstash-core/spec/logstash/agent/converge_spec.rb
+++ b/logstash-core/spec/logstash/agent/converge_spec.rb
@@ -64,11 +64,9 @@
     end
 
     context "system pipeline" do
-
       let(:system_pipeline_config) { mock_pipeline_config(:system_pipeline, "input { dummyblockinginput { } } output { null {} }", { "pipeline.system" => true }) }
 
       context "when we have a finite pipeline and a system pipeline running" do
-
         let(:finite_pipeline_config) { mock_pipeline_config(:main, "input { generator { count => 1000 } } output { null {} }") }
 
         let(:source_loader) do
diff --git a/logstash-core/spec/logstash/agent/metrics_spec.rb b/logstash-core/spec/logstash/agent/metrics_spec.rb
index 04ce55352f5..ad3b9e73bcf 100644
--- a/logstash-core/spec/logstash/agent/metrics_spec.rb
+++ b/logstash-core/spec/logstash/agent/metrics_spec.rb
@@ -81,7 +81,6 @@ def mhash(*path_elements)
       expect(mval(:stats, :flow, :queue_backpressure)).to be_a_kind_of(java.util.Map)
       expect(mval(:stats, :flow, :worker_concurrency)).to be_a_kind_of(java.util.Map)
     end
-
   end
 
   context "when we try to start one pipeline" do
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 776c0ed290c..7efb61e85a0 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -28,9 +28,7 @@
 java_import org.logstash.Timestamp
 
 describe LogStash::Agent do
-
   shared_examples "all Agent tests" do
-
     let(:agent_settings) { mock_settings({}) }
     let(:agent_args) { {} }
     let(:pipeline_settings) { agent_settings.clone }
@@ -194,7 +192,6 @@
               t.join
             end
           end
-
         end
         context "when calling reload_state!" do
           context "with a pipeline with auto reloading turned off" do
@@ -286,7 +283,6 @@
       end
 
       context "referenced environment variable does not exist" do
-
         it "does not converge the pipeline" do
           expect(subject.converge_state_and_update).not_to be_a_successful_converge
         end
@@ -393,7 +389,6 @@
     end
 
     context "metrics after config reloading" do
-
       let(:initial_generator_threshold) { 1000 }
       let(:original_config_output) { Stud::Temporary.pathname }
       let(:new_config_output) { Stud::Temporary.pathname }
diff --git a/logstash-core/spec/logstash/api/modules/logging_spec.rb b/logstash-core/spec/logstash/api/modules/logging_spec.rb
index 9efb290c6be..5fc138b87f0 100644
--- a/logstash-core/spec/logstash/api/modules/logging_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/logging_spec.rb
@@ -24,7 +24,6 @@
   include_context "api setup"
 
   describe "#logging" do
-
     context "when setting a logger's log level" do
       it "should return a positive acknowledgement on success" do
         put '/', '{"logger.logstash": "ERROR"}'
diff --git a/logstash-core/spec/logstash/api/modules/node_spec.rb b/logstash-core/spec/logstash/api/modules/node_spec.rb
index bf34e365c52..a514ed660ba 100644
--- a/logstash-core/spec/logstash/api/modules/node_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/node_spec.rb
@@ -25,7 +25,6 @@
   include_examples "not found"
 
   describe "#hot threads" do
-
     before(:all) do
       get "/hot_threads"
     end
@@ -39,7 +38,6 @@
     end
 
     context "#threads count" do
-
       before(:all) do
         get "/hot_threads?threads=5"
       end
@@ -63,7 +61,6 @@
     end
 
     context "broken params in URL" do
-
       before(:all) do
         get "/hot_threads?human=?threads=5"
       end
@@ -80,7 +77,6 @@
         "/hot_threads?human=1",
         "/hot_threads?human=t",
       ].each do |path|
-
         before(:all) do
           get path
         end
diff --git a/logstash-core/spec/logstash/api/modules/plugins_spec.rb b/logstash-core/spec/logstash/api/modules/plugins_spec.rb
index 0ac158c194a..84a4c075f3e 100644
--- a/logstash-core/spec/logstash/api/modules/plugins_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/plugins_spec.rb
@@ -61,7 +61,6 @@
   end
 
   context "#values" do
-
     let(:payload) { LogStash::Json.load(last_response.body) }
 
     it "return totals of plugins" do
diff --git a/logstash-core/spec/logstash/codecs/base_spec.rb b/logstash-core/spec/logstash/codecs/base_spec.rb
index f216d5a89dc..a325e17d98f 100644
--- a/logstash-core/spec/logstash/codecs/base_spec.rb
+++ b/logstash-core/spec/logstash/codecs/base_spec.rb
@@ -22,6 +22,7 @@
 # use a dummy NOOP output to test Outputs::Base
 class LogStash::Codecs::NOOPAsync < LogStash::Codecs::Base
   attr_reader :last_result
+
   config_name "noop_async"
 
   def encode(event)
@@ -31,6 +32,7 @@ def encode(event)
 
 class LogStash::Codecs::NOOPSync < LogStash::Codecs::Base
   attr_reader :last_result
+
   config_name "noop_sync"
 
   def encode_sync(event)
@@ -40,6 +42,7 @@ def encode_sync(event)
 
 class LogStash::Codecs::NOOPMulti < LogStash::Codecs::Base
   attr_reader :last_result
+
   config_name "noop_multi"
 
   def encode_sync(event)
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 3bb464bf019..526e04e8b30 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -298,7 +298,6 @@ def rand_meta
           it "should merge the values of the duplicate keys into an array" do
             expect(c_plugin).to ir_eql(j.iPlugin(rand_meta, FILTER, "grok", expected_plugin_args))
           end
-
         end
 
         describe "a filter plugin that has nested Hash directives" do
@@ -428,7 +427,6 @@ def compose(*statements)
           EOS
         end
 
-
         it "should contain both section declarations, in order" do
           expect(compiled_section).to ir_eql(compose(
                                       splugin("aplugin", {"count" => 1}),
diff --git a/logstash-core/spec/logstash/config/config_ast_spec.rb b/logstash-core/spec/logstash/config/config_ast_spec.rb
index 97302021e25..b08152e6d9e 100644
--- a/logstash-core/spec/logstash/config/config_ast_spec.rb
+++ b/logstash-core/spec/logstash/config/config_ast_spec.rb
@@ -102,7 +102,6 @@
       end
     end
 
-
     context "invalid configuration" do
       it "rejects duplicate hash key" do
         parser = LogStashConfigParser.new
@@ -223,6 +222,7 @@ def initialize(config, settings)
           @code = @config.compile
           eval(@code)
         end
+
         def plugin(*args); end
         def line_to_source(*args); end
       end
@@ -235,7 +235,6 @@ def line_to_source(*args); end
          output { output1 { } }"
       }
 
-
       it "should create a pipeline with both sections" do
         generated_objects = pipeline_klass.new(config_string, settings).instance_variable_get("@generated_objects")
         filters = generated_objects.keys.map(&:to_s).select {|obj_name| obj_name.match(/^filter.+?_\d+$/) }
@@ -250,7 +249,6 @@ def line_to_source(*args); end
          output { output1 { } }"
       }
 
-
       it "should create a pipeline with both sections" do
         generated_objects = pipeline_klass.new(config_string, settings).instance_variable_get("@generated_objects")
         outputs = generated_objects.keys.map(&:to_s).select {|obj_name| obj_name.match(/^output.+?_\d+$/) }
@@ -277,6 +275,7 @@ def initialize(config, settings)
           @code = @config.compile
           eval(@code)
         end
+
         def plugin(*args); end
         def line_to_source(*args); end
       end
diff --git a/logstash-core/spec/logstash/config/cpu_core_strategy_spec.rb b/logstash-core/spec/logstash/config/cpu_core_strategy_spec.rb
index 8c6608e11ed..8f158d0a22a 100644
--- a/logstash-core/spec/logstash/config/cpu_core_strategy_spec.rb
+++ b/logstash-core/spec/logstash/config/cpu_core_strategy_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/config/cpu_core_strategy"
 
 describe LogStash::Config::CpuCoreStrategy do
-
   before do
     allow(LogStash::Config::Defaults).to receive(:cpu_cores).and_return(cores)
   end
@@ -135,5 +134,4 @@
       expect(described_class.max_minus_two).to eq(1)
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/converge_result_spec.rb b/logstash-core/spec/logstash/converge_result_spec.rb
index bd590e6adcc..c084efccf90 100644
--- a/logstash-core/spec/logstash/converge_result_spec.rb
+++ b/logstash-core/spec/logstash/converge_result_spec.rb
@@ -24,7 +24,6 @@
 
   subject { described_class.new(expected_actions_count) }
 
-
   context "When the action was executed" do
     it "returns the time of execution" do
       expect(LogStash::ConvergeResult::FailedAction.new("testing").executed_at.class).to eq(LogStash::Timestamp)
diff --git a/logstash-core/spec/logstash/environment_spec.rb b/logstash-core/spec/logstash/environment_spec.rb
index 4b46deddc98..2544491b76e 100644
--- a/logstash-core/spec/logstash/environment_spec.rb
+++ b/logstash-core/spec/logstash/environment_spec.rb
@@ -19,9 +19,7 @@
 require "logstash/environment"
 
 describe LogStash::Environment do
-
   context "when loading jars dependencies" do
-
     let(:default_jars_location)    { File.join("vendor", "jar-dependencies") }
     let(:default_runtime_location) { File.join(default_jars_location, "runtime-jars", "*.jar") }
     let(:default_test_location)    { File.join(default_jars_location, "test-jars", "*.jar") }
@@ -37,7 +35,6 @@
     end
 
     context "when loading a jar file" do
-
       let(:dummy_jar_file) { File.join(default_jars_location, "runtime-jars", "elasticsearch.jar") }
 
       it "requires the jar files if there are jars to load" do
@@ -65,7 +62,6 @@
     end
   end
 
-
   describe "OS detection" do
     windows_host_os = %w(bccwin cygwin mingw mswin wince)
     linux_host_os = %w(linux)
diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index 4b9cfbd1def..50f9a646acd 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -247,7 +247,6 @@
     end
   end
 
-
   # TODO(talevy): migrate tests to Java. no reason to test logging logic in ruby when it is being
   #               done in java land.
 
@@ -343,7 +342,6 @@
   end
 
   context "initialize" do
-
     it "should accept Ruby Hash" do
       e = LogStash::Event.new({"foo" => 1, TIMESTAMP => "2015-05-28T23:02:05.350Z"})
       expect(e.get("foo")).to eq(1)
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index 37fda51511f..6aa7fc46bab 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -21,7 +21,6 @@
 require "support/shared_contexts"
 
 describe LogStash::FilterDelegator do
-
   include_context "execution_context"
 
   let(:filter_id) { "my-filter" }
@@ -57,6 +56,7 @@ def register; end
         config :host, :validate => :string
         def register; end
         def flush(options = {}); @events ; end
+
         def filter(event)
           @events ||= []
           @events << event
@@ -85,7 +85,6 @@ def filter(event)
     end
 
     context "when the filter buffer events" do
-
       it "has incremented :in" do
         subject.multi_filter(events)
         expect(collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events][:in].value).to eq(events.size)
@@ -132,6 +131,7 @@ def filter(event)
         config_name "super_plugin"
         config :host, :validate => :string
         def register; end
+
         def filter(event)
           event
         end
@@ -159,5 +159,4 @@ def filter(event)
       expect(subject.config_name).to eq("super_plugin")
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/filters/base_spec.rb b/logstash-core/spec/logstash/filters/base_spec.rb
index ee390691b4e..2885c77bebf 100644
--- a/logstash-core/spec/logstash/filters/base_spec.rb
+++ b/logstash-core/spec/logstash/filters/base_spec.rb
@@ -382,7 +382,6 @@ def filter(event)
     sample_one("type" => "noop", "go" => "away", "tags" => "blackhole") do
       expect(subject.get("[tags]")).to eq("blackhole")
     end
-
   end
 
   describe "when metrics are disabled" do
diff --git a/logstash-core/spec/logstash/instrument/metric_type/counter_spec.rb b/logstash-core/spec/logstash/instrument/metric_type/counter_spec.rb
index 2cbb8bf034a..da4953f7f12 100644
--- a/logstash-core/spec/logstash/instrument/metric_type/counter_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_type/counter_spec.rb
@@ -35,5 +35,4 @@
       expect(LogStash::Json.dump(subject)).to eq("0")
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb b/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb
index 4aab9db4d00..8c0a5a95e95 100644
--- a/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb
@@ -41,6 +41,4 @@
       expect(LogStash::Json.dump(subject)).to eq("\"#{value}\"")
     end
   end
-
-
 end
diff --git a/logstash-core/spec/logstash/instrument/namespaced_null_metric_spec.rb b/logstash-core/spec/logstash/instrument/namespaced_null_metric_spec.rb
index 991e956470c..b6f35f342ae 100644
--- a/logstash-core/spec/logstash/instrument/namespaced_null_metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/namespaced_null_metric_spec.rb
@@ -43,5 +43,4 @@
     expect(subject.namespace_name).to eq([namespace])
     expect(new_namespace.namespace_name).to eq([:root, :wally])
   end
-
 end
diff --git a/logstash-core/spec/logstash/instrument/null_metric_spec.rb b/logstash-core/spec/logstash/instrument/null_metric_spec.rb
index 382fc408d14..9b491e5734e 100644
--- a/logstash-core/spec/logstash/instrument/null_metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/null_metric_spec.rb
@@ -20,7 +20,6 @@
 require "spec_helper"
 
 describe LogStash::Instrument::NullMetric do
-
   let(:key) { "test" }
   subject { LogStash::Instrument::NullMetric.new(nil) }
 
diff --git a/logstash-core/spec/logstash/instrument/periodic_poller/jvm_spec.rb b/logstash-core/spec/logstash/instrument/periodic_poller/jvm_spec.rb
index 54f71c6f619..1479c20ae9c 100644
--- a/logstash-core/spec/logstash/instrument/periodic_poller/jvm_spec.rb
+++ b/logstash-core/spec/logstash/instrument/periodic_poller/jvm_spec.rb
@@ -44,7 +44,6 @@
   end
 end
 
-
 describe LogStash::Instrument::PeriodicPoller::JVM do
   let(:metric) { LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new) }
   let(:options) { {} }
diff --git a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
index 23301abae57..762943f350e 100644
--- a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
+++ b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
@@ -15,7 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-
 require_relative "../../support/mocks_classes"
 require "spec_helper"
 require "java"
@@ -139,5 +138,4 @@ def threaded_read_client
 
     include_examples "queue tests"
   end
-
 end
diff --git a/logstash-core/spec/logstash/java_filter_delegator_spec.rb b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
index 75bfca54b37..9f39da5dcec 100644
--- a/logstash-core/spec/logstash/java_filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
@@ -22,7 +22,6 @@
 java_import org.logstash.RubyUtil
 
 describe LogStash::FilterDelegator do
-
   class MockGauge
     def increment(_)
     end
@@ -81,6 +80,7 @@ def register; end
         config :host, :validate => :string
         def register; end
         def flush(options = {}); @events ; end
+
         def filter(event)
           @events ||= []
           @events << event
@@ -116,7 +116,6 @@ def filter(event)
     end
 
     context "when the filter buffer events" do
-
       it "has incremented :in" do
         subject.to_java.multiFilter(events)
         expect(
@@ -167,6 +166,7 @@ def filter(event)
         config_name "super_plugin"
         config :host, :validate => :string
         def register; end
+
         def filter(event)
           event
         end
@@ -196,5 +196,4 @@ def filter(event)
       expect(subject.config_name).to eq("super_plugin")
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/java_integration_spec.rb b/logstash-core/spec/logstash/java_integration_spec.rb
index 097b2869ffe..31c0393f5f7 100644
--- a/logstash-core/spec/logstash/java_integration_spec.rb
+++ b/logstash-core/spec/logstash/java_integration_spec.rb
@@ -18,15 +18,12 @@
 require "spec_helper"
 
 describe "Java integration" do
-
   context "type equivalence" do
-
     # here we test for both is_a? and case/when usage of the Java types
     # because these are the specific use-cases in our code and the expected
     # behaviour.
 
     context "Java::JavaUtil::ArrayList" do
-
       it "should report to be a Ruby Array" do
         expect(Java::JavaUtil::ArrayList.new.is_a?(Array)).to eq(true)
       end
@@ -178,7 +175,6 @@
     end
 
     context "when intersecting with a Ruby Array" do
-
       context "using string collection with duplicates and single result" do
         let(:initial_array) {["foo", "bar", "foo"]}
 
@@ -214,7 +210,6 @@
     end
 
     context "when unioning with a Ruby Array" do
-
       context "using string collection with duplicates" do
         let(:initial_array) {["foo", "bar", "foo"]}
 
@@ -271,7 +266,6 @@
 
   context "Enumerable implementation" do
     context "Java Map interface should report key with nil value as included" do
-
       it "should support include? method" do
         expect(Java::JavaUtil::LinkedHashMap.new({"foo" => nil}).include?("foo")).to eq(true)
       end
@@ -290,7 +284,6 @@
     end
 
     context "Java Map interface should report key with a value as included" do
-
       it "should support include? method" do
         expect(Java::JavaUtil::LinkedHashMap.new({"foo" => 1}).include?("foo")).to eq(true)
       end
@@ -309,7 +302,6 @@
     end
 
     context "Java Map interface should report non existing key as not included" do
-
       it "should support include? method" do
         expect(Java::JavaUtil::LinkedHashMap.new({"foo" => 1})).not_to include("bar")
       end
diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index f8c559cbfbb..a5320ded6d0 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -155,12 +155,15 @@ class DummyFlushingFilter < LogStash::Filters::Base
 
   def register() end
   def filter(event) end
+
   def periodic_flush
     true
   end
+
   def flush(options)
     [::LogStash::Event.new("message" => "dummy_flush")]
   end
+
   def close() end
 end
 
@@ -544,7 +547,6 @@ def flush(options)
       allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput").and_return(::LogStash::Outputs::DummyOutput)
     end
 
-
     let(:test_config_without_output_workers) {
       <<-eos
       input {
@@ -784,7 +786,6 @@ def flush(options)
     end
   end
 
-
   describe "max inflight warning" do
     let(:config) { "input { dummyinput {} } output { dummyoutput {} }" }
     let(:batch_size) { 1 }
@@ -984,7 +985,6 @@ def flush(options)
 
         pipeline.shutdown
       end
-
     end
 
     it_behaves_like 'it flushes correctly'
@@ -1315,7 +1315,6 @@ def flush(options)
           collect_stats
           expect(collected_stats).to be_nil
         end
-
       end
 
       context 'when dlq is enabled' do
diff --git a/logstash-core/spec/logstash/json_spec.rb b/logstash-core/spec/logstash/json_spec.rb
index 45c79b12b04..384b9f2cc9f 100644
--- a/logstash-core/spec/logstash/json_spec.rb
+++ b/logstash-core/spec/logstash/json_spec.rb
@@ -21,7 +21,6 @@
 require "logstash/util"
 
 describe "LogStash::Json" do
-
   let(:hash)   {{"a" => 1}}
   let(:json_hash)   {"{\"a\":1}"}
 
@@ -73,7 +72,6 @@
     end
 
     context "pretty print" do
-
       let(:hash) { { "foo" => "bar", :zoo => 2 } }
 
       it "should serialize with pretty print" do
diff --git a/logstash-core/spec/logstash/modules/cli_parser_spec.rb b/logstash-core/spec/logstash/modules/cli_parser_spec.rb
index fcd4dafa71a..df57f67a3d0 100644
--- a/logstash-core/spec/logstash/modules/cli_parser_spec.rb
+++ b/logstash-core/spec/logstash/modules/cli_parser_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/modules/cli_parser"
 
 describe LogStash::Modules::CLIParser do
-
   subject { LogStash::Modules::CLIParser.new(module_names, module_variables) }
   let(:logger) { double("logger") }
   let(:module_name) { "foo" }
@@ -140,5 +139,4 @@
       end
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/modules/kibana_client_spec.rb b/logstash-core/spec/logstash/modules/kibana_client_spec.rb
index f2ed11ae893..54016272ce9 100644
--- a/logstash-core/spec/logstash/modules/kibana_client_spec.rb
+++ b/logstash-core/spec/logstash/modules/kibana_client_spec.rb
@@ -23,6 +23,7 @@ class KibanaTestClient
     def http(method, endpoint, options)
       self
     end
+
     def call
       KibanaTestResponse.new(200, '{"version":{"number":"1.2.3","build_snapshot":false}}', {})
     end
diff --git a/logstash-core/spec/logstash/modules/settings_merger_spec.rb b/logstash-core/spec/logstash/modules/settings_merger_spec.rb
index 5c9429eab2a..c0f65f27433 100644
--- a/logstash-core/spec/logstash/modules/settings_merger_spec.rb
+++ b/logstash-core/spec/logstash/modules/settings_merger_spec.rb
@@ -46,7 +46,6 @@ def get(key) @hash[key]; end
   end
 
   describe "#merge_kibana_auth" do
-
     before do
       described_class.merge_kibana_auth!(mod_settings)
     end
@@ -72,7 +71,6 @@ def get(key) @hash[key]; end
         expect(mod_settings["var.kibana.password"]).to eq("stott")
       end
     end
-
   end
 
   describe "#merge_cloud_settings" do
diff --git a/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb b/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
index d291904cef1..6faba307268 100644
--- a/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
+++ b/logstash-core/spec/logstash/persisted_queue_config_validator_spec.rb
@@ -22,7 +22,6 @@
 require_relative '../support/helpers'
 
 describe LogStash::PersistedQueueConfigValidator do
-
   context("when persisted queues are enabled") do
     let(:input_block) { "input { generator {} }" }
     let(:config_path) { temporary_file(input_block) }
@@ -212,6 +211,5 @@
         end
       end
     end
-
   end
 end
diff --git a/logstash-core/spec/logstash/pipeline_action/create_spec.rb b/logstash-core/spec/logstash/pipeline_action/create_spec.rb
index 1aadf7dc051..771681153f0 100644
--- a/logstash-core/spec/logstash/pipeline_action/create_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_action/create_spec.rb
@@ -45,7 +45,6 @@
     expect(subject.pipeline_id).to eq(:main)
   end
 
-
   context "when we have really short lived pipeline" do
     let(:pipeline_config) { mock_pipeline_config(:main, "input { generator { count => 1 } } output { null {} }") }
 
diff --git a/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb b/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
index 3ef961afb7e..8069f984edf 100644
--- a/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
@@ -115,5 +115,4 @@ def close() end
       subject.shutdown
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/pipelines_registry_spec.rb b/logstash-core/spec/logstash/pipelines_registry_spec.rb
index 286eeffb30a..ac3806311c6 100644
--- a/logstash-core/spec/logstash/pipelines_registry_spec.rb
+++ b/logstash-core/spec/logstash/pipelines_registry_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/pipelines_registry"
 
 describe LogStash::PipelinesRegistry do
-
   let(:pipeline_id) { "test".to_sym }
   let(:pipeline) { double("Pipeline") }
   let(:logger) { double("Logger") }
@@ -109,7 +108,6 @@
       let (:pipeline2) { double("pipeline2") }
 
       it "should create a loading state before calling the create block" do
-
         # create a thread which calls create_pipeline and wait in the create
         # block so we can controle the pipeline initialization phase
         t = Thread.new do
@@ -198,7 +196,6 @@
         # 2nd call: finished_execution? is true
         expect(subject.running_pipelines).to be_empty
 
-
         queue = Queue.new # threadsafe queue
         in_block = Concurrent::AtomicBoolean.new(false)
 
@@ -343,6 +340,5 @@
         expect(subject.running_user_defined_pipelines).to be_empty
       end
     end
-
   end
 end
diff --git a/logstash-core/spec/logstash/plugin_spec.rb b/logstash-core/spec/logstash/plugin_spec.rb
index fbf3d70d6c3..f3d8ee48cbb 100644
--- a/logstash-core/spec/logstash/plugin_spec.rb
+++ b/logstash-core/spec/logstash/plugin_spec.rb
@@ -191,7 +191,6 @@ class LogStash::Filters::Stromae < LogStash::Filters::Base
         config :foo_tag, :validate => :string, :default => "bar"
       end
     ].each do |klass|
-
       it "subclass #{klass.name} does not modify params" do
         klass.new(args)
         expect(args).to be_empty
@@ -199,7 +198,6 @@ class LogStash::Filters::Stromae < LogStash::Filters::Base
     end
 
     context "codec initialization" do
-
       class LogStash::Codecs::Noop < LogStash::Codecs::Base
         config_name "noop"
 
@@ -212,7 +210,6 @@ def register; end
         expect_any_instance_of(LogStash::Codecs::Noop).to receive(:register).once
         LogStash::Plugin.new(args)
       end
-
     end
   end
 
@@ -304,8 +301,6 @@ def register; end
             'when there is not ID configured for the plugin' => {},
             'when a user provide an ID for the plugin' => { 'id' => 'ABC' },
         }.each do |desc, config_override|
-
-
           context(desc) do
             let(:config) { super().merge(config_override) }
 
@@ -428,7 +423,6 @@ def register; end
         end
       end
     end
-
   end
 
   describe "deprecation logger" do
diff --git a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
index 7adc7a91f93..81ecd83d5dd 100644
--- a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
+++ b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
@@ -120,7 +120,6 @@ def stop_input
           )[:filter]
           expect(event_metrics[:send_to].value).to eq([address])
         end
-
       end
 
       after(:each) do
diff --git a/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb b/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
index fd40c5cd7e3..43f76c962b9 100644
--- a/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
+++ b/logstash-core/spec/logstash/plugins/ca_trusted_fingerprint_support_spec.rb
@@ -9,7 +9,6 @@
 java_import "org.logstash.util.CATrustedFingerprintTrustStrategy"
 
 describe LogStash::Plugins::CATrustedFingerprintSupport do
-
   let(:ca_trusted_fingerprint_support) { described_class }
 
   [
@@ -18,9 +17,7 @@
       LogStash::Codecs::Base,
       LogStash::Outputs::Base
   ].each do |base_class|
-
     context "that inherits from `#{base_class}`" do
-
       let(:plugin_base_class) { base_class }
 
       subject(:plugin_class) do
@@ -39,7 +36,6 @@
       let(:plugin) { plugin_class.new(options) }
 
       context '#initialize' do
-
         shared_examples 'normalizes fingerprints' do
           context '#ca_trusted_fingerprint' do
             it "normalizes to an array of capital hex fingerprints" do
@@ -109,5 +105,4 @@
       end
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/plugins/event_factory_support_spec.rb b/logstash-core/spec/logstash/plugins/event_factory_support_spec.rb
index 07005c576dc..20cc2e47128 100644
--- a/logstash-core/spec/logstash/plugins/event_factory_support_spec.rb
+++ b/logstash-core/spec/logstash/plugins/event_factory_support_spec.rb
@@ -8,7 +8,6 @@
 require 'logstash/outputs/base'
 
 describe LogStash::Plugins::EventFactorySupport do
-
   let(:event_factory_support) { described_class }
 
   [
@@ -17,9 +16,7 @@
       LogStash::Codecs::Base,
       LogStash::Outputs::Base
   ].each do |base_class|
-
     context "that inherits from `#{base_class}`" do
-
       let(:plugin_base_class) { base_class }
 
       subject(:plugin_class) do
@@ -40,17 +37,14 @@
       let(:plugin) { plugin_class.new(options) }
 
       shared_examples 'an event factory' do
-
         it 'returns an event' do
           expect( event_factory.new_event ).to be_a LogStash::Event
           expect( event = event_factory.new_event('foo' => 'bar') ).to be_a LogStash::Event
           expect( event.get('foo') ).to eql 'bar'
         end
-
       end
 
       describe 'event_factory' do
-
         subject(:event_factory) { plugin.send(:event_factory) }
 
         it_behaves_like 'an event factory'
@@ -58,19 +52,15 @@
         it 'memoizes the factory instance' do
           expect( event_factory ).to be plugin.send(:event_factory)
         end
-
       end
 
       describe 'targeted_event_factory (no config :target option)' do
-
         it 'raises an error' do
           expect { plugin.send(:targeted_event_factory) }.to raise_error(ArgumentError, /target/)
         end
-
       end
 
       describe 'targeted_event_factory' do
-
         subject(:plugin_class) do
           Class.new(plugin_base_class) do
             config_name 'sample'
@@ -94,7 +84,6 @@
         end
 
         context 'with target' do
-
           let(:options) { super().merge('target' => '[the][baz]') }
 
           it 'returns an event' do
@@ -111,11 +100,9 @@
           it 'uses a different factory from the basic one' do
             expect( targeted_event_factory ).not_to be plugin.send(:event_factory)
           end
-
         end
 
         context 'from_json (integration)' do
-
           let(:json) { '[ {"foo": "bar"}, { "baz": { "a": 1 } } ]' }
 
           let(:options) { super().merge('target' => 'internal') }
@@ -126,11 +113,8 @@
             expect( events[0].get('[internal]') ).to eql 'foo' => 'bar'
             expect( events[1].get('[internal]') ).to eql 'baz' => { 'a' => 1 }
           end
-
         end
       end
-
     end
   end
-
 end
diff --git a/logstash-core/spec/logstash/plugins/registry_spec.rb b/logstash-core/spec/logstash/plugins/registry_spec.rb
index 659bb4b49e3..c90f1575b34 100644
--- a/logstash-core/spec/logstash/plugins/registry_spec.rb
+++ b/logstash-core/spec/logstash/plugins/registry_spec.rb
@@ -26,7 +26,6 @@ class LogStash::Inputs::Dummy < LogStash::Inputs::Base
   def register; end
 end
 
-
 class LogStash::Inputs::NewPlugin < LogStash::Inputs::Base
   config_name "new_plugin"
 
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index c4454bd807a..59c62ebe57d 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -31,7 +31,6 @@
 require_relative "../support/matchers"
 
 describe LogStash::Runner do
-
   subject(:runner) { LogStash::Runner }
   let(:logger) { double("logger") }
   let(:agent) { double("agent") }
@@ -87,7 +86,6 @@
     subject { LogStash::Runner.new("") }
 
     context "when -e is given" do
-
       let(:args) { ["-e", "input {} output {}"] }
       let(:agent) { double("agent") }
 
@@ -134,7 +132,6 @@
   context "--auto-reload" do
     subject { LogStash::Runner.new("") }
     context "when -e is given" do
-
       let(:args) { ["-r", "-e", "input {} output {}"] }
 
       it "should exit immediately" do
@@ -212,8 +209,6 @@
             expect(settings.get("path.queue")).to eq(queue_override_path)
           end
 
-
-
           args = ["--path.data", test_data_path, "-e", pipeline_string]
           subject.run("bin/logstash", args)
         end
diff --git a/logstash-core/spec/logstash/settings/bytes_spec.rb b/logstash-core/spec/logstash/settings/bytes_spec.rb
index 3095736b3bd..241215db6eb 100644
--- a/logstash-core/spec/logstash/settings/bytes_spec.rb
+++ b/logstash-core/spec/logstash/settings/bytes_spec.rb
@@ -37,7 +37,6 @@
   subject { described_class.new("a byte value", default, false) }
 
   describe "#set" do
-
     # Hard-coded test just to make sure at least one known case is working
     context "when given '10mb'" do
       it "returns 10485760" do
diff --git a/logstash-core/spec/logstash/settings/port_range_spec.rb b/logstash-core/spec/logstash/settings/port_range_spec.rb
index a5117378edc..367b558ab1a 100644
--- a/logstash-core/spec/logstash/settings/port_range_spec.rb
+++ b/logstash-core/spec/logstash/settings/port_range_spec.rb
@@ -19,7 +19,6 @@
 require "spec_helper"
 
 describe LogStash::Setting::PortRange do
-
   context "When the value is an Integer" do
     subject { LogStash::Setting::PortRange.new("mynewtest", 9000) }
 
@@ -65,7 +64,6 @@
       expect { subject }.to raise_error
     end
 
-
     it "raises an exception on update" do
       expect { LogStash::Setting::PortRange.new("mynewtest", 10000).set("dsfnsdknfksdnfjksdnfjns") }.to raise_error
     end
@@ -74,12 +72,10 @@
   context "when the value is an unknown type" do
     subject { LogStash::Setting::PortRange.new("mynewtest", 0.1) }
 
-
     it "raises an argument error" do
       expect { subject }.to raise_error
     end
 
-
     it "raises an exception on update" do
       expect { LogStash::Setting::PortRange.new("mynewtest", 10000).set(0.1) }.to raise_error
     end
diff --git a/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb b/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb
index 85dee75f88c..9ddd87a783c 100644
--- a/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb
+++ b/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/settings"
 
 describe LogStash::Setting::SettingWithDeprecatedAlias do
-
   let(:canonical_setting_name) { "canonical.setting" }
   let(:deprecated_setting_name) { "legacy.setting" }
 
@@ -56,7 +55,6 @@
   end
 
   context "when only the deprecated alias is set" do
-
     let(:value) { "crusty_value" }
 
     before(:each) do
@@ -78,7 +76,6 @@
     end
 
     context 'using a boolean setting' do
-
       let(:value) { true }
       let(:default_value) { false }
 
@@ -93,7 +90,6 @@
       it 'validates deprecated alias' do
         expect { settings.get_setting(canonical_setting_name).deprecated_alias.validate_value }.to_not raise_error
       end
-
     end
   end
 
diff --git a/logstash-core/spec/logstash/settings/writable_directory_spec.rb b/logstash-core/spec/logstash/settings/writable_directory_spec.rb
index ca2ada2af78..41346544948 100644
--- a/logstash-core/spec/logstash/settings/writable_directory_spec.rb
+++ b/logstash-core/spec/logstash/settings/writable_directory_spec.rb
@@ -48,7 +48,6 @@
     before { subject.set(path) }
 
     context "when the directory is missing" do
-
       context "and the parent is writable" do
         after {
           Dir.unlink(path)
@@ -104,7 +103,6 @@
         it_behaves_like "failure"
       end unless LogStash::Environment.windows?
 
-
       context "but is a symlink" do
         before { FileUtils.symlink("whatever", path) }
         it_behaves_like "failure"
diff --git a/logstash-core/spec/logstash/settings_spec.rb b/logstash-core/spec/logstash/settings_spec.rb
index b3962322f4a..ce29817cbec 100644
--- a/logstash-core/spec/logstash/settings_spec.rb
+++ b/logstash-core/spec/logstash/settings_spec.rb
@@ -21,7 +21,6 @@
 require "fileutils"
 
 describe LogStash::Settings do
-
   let(:numeric_setting_name) { "number" }
   let(:numeric_setting) { LogStash::Setting.new(numeric_setting_name, Numeric, 1) }
 
@@ -186,7 +185,6 @@
   end
 
   describe "#from_yaml" do
-
     before :each do
       LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../src/test/resources/logstash.keystore.with.default.pass"))
       LogStash::Util::SubstitutionVariables.send(:reset_secret_store)
@@ -197,8 +195,6 @@
     end
 
     context "placeholders in flat logstash.yml" do
-
-
       after do
         ENV.delete('SOME_LOGSTASH_SPEC_ENV_VAR')
         ENV.delete('some.logstash.spec.env.var')
@@ -251,7 +247,6 @@
     } }
 
     context "when running PasswordValidator coerce" do
-
       it "raises an error when supplied value is not LogStash::Util::Password" do
         expect {
           LogStash::Setting::ValidatedPassword.new("test.validated.password", "testPassword", password_policies)
@@ -273,7 +268,6 @@
   end
 
   context "placeholders in nested logstash.yml" do
-
     before :each do
       LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../src/test/resources/logstash.keystore.with.default.pass"))
       LogStash::Util::SubstitutionVariables.send(:reset_secret_store)
diff --git a/logstash-core/spec/logstash/shutdown_watcher_spec.rb b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
index 00182ea5c45..1526126ea96 100644
--- a/logstash-core/spec/logstash/shutdown_watcher_spec.rb
+++ b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
@@ -41,7 +41,6 @@
     end
 
     describe ".unsafe_shutdown = false" do
-
       before :each do
         subject.class.unsafe_shutdown = false
       end
@@ -64,7 +63,6 @@
     end
 
     describe ".unsafe_shutdown = true" do
-
       before :each do
         subject.class.unsafe_shutdown = true
       end
@@ -79,7 +77,6 @@
     end
 
     describe ".unsafe_shutdown = false" do
-
       before :each do
         subject.class.unsafe_shutdown = false
       end
diff --git a/logstash-core/spec/logstash/state_resolver_spec.rb b/logstash-core/spec/logstash/state_resolver_spec.rb
index e99ccab87cb..3c2ffc4b732 100644
--- a/logstash-core/spec/logstash/state_resolver_spec.rb
+++ b/logstash-core/spec/logstash/state_resolver_spec.rb
@@ -210,6 +210,5 @@
         end
       end
     end
-
   end
 end
diff --git a/logstash-core/spec/logstash/util/accessors_spec.rb b/logstash-core/spec/logstash/util/accessors_spec.rb
index fe61fcd9a93..61aedaabb82 100644
--- a/logstash-core/spec/logstash/util/accessors_spec.rb
+++ b/logstash-core/spec/logstash/util/accessors_spec.rb
@@ -28,9 +28,7 @@
 end
 
 describe "LogStash::Util::Accessors", :if => class_exists do
-
   context "using simple field" do
-
     it "should get value of word key" do
       str = "hello"
       data = { "hello" => "world" }
@@ -89,7 +87,6 @@
   end
 
   context "using field path" do
-
     it "should get shallow string value of word key" do
       str = "[hello]"
       data = { "hello" =>  "world" }
diff --git a/logstash-core/spec/logstash/util/buftok_spec.rb b/logstash-core/spec/logstash/util/buftok_spec.rb
index a7116046ac8..cccb9c476e0 100644
--- a/logstash-core/spec/logstash/util/buftok_spec.rb
+++ b/logstash-core/spec/logstash/util/buftok_spec.rb
@@ -18,7 +18,6 @@
 require "spec_helper"
 
 describe  FileWatch::BufferedTokenizer  do
-
   subject { FileWatch::BufferedTokenizer.new }
 
   it "should tokenize a single token" do
@@ -45,7 +44,6 @@
   end
 
   context 'with delimiter' do
-
     subject { FileWatch::BufferedTokenizer.new(delimiter) }
 
     let(:delimiter) { "||" }
@@ -58,7 +56,5 @@
       expect(subject.extract("")).to eq([])
       expect(subject.extract("foo||bar")).to eq(["foo"])
     end
-
   end
-
 end
diff --git a/logstash-core/spec/logstash/util/charset_spec.rb b/logstash-core/spec/logstash/util/charset_spec.rb
index 061e665348e..c4cfe0b0aef 100644
--- a/logstash-core/spec/logstash/util/charset_spec.rb
+++ b/logstash-core/spec/logstash/util/charset_spec.rb
@@ -50,7 +50,6 @@
         expect(subject.convert(data).encoding.name).to eq("UTF-8")
       end
     end
-
   end
 
   context "with valid non UTF-8 source encoding" do
diff --git a/logstash-core/spec/logstash/util/java_version_spec.rb b/logstash-core/spec/logstash/util/java_version_spec.rb
index a33d502d144..8e835d289b8 100644
--- a/logstash-core/spec/logstash/util/java_version_spec.rb
+++ b/logstash-core/spec/logstash/util/java_version_spec.rb
@@ -84,7 +84,6 @@
       # Not sure this is what is being returned, but it doesn't match the
       # regex, which is the point
       expect(mod.parse_java_version("JCL - 20140103_01 based on Oracle 7u51-b11
-
 ")).to be_nil
     end
 
@@ -119,5 +118,4 @@
     include_examples("version parsing", "a build", "1.4.0-beta", 1, 4, 0, 0, "beta")
     include_examples("version parsing", "an update+build", "1.4.0_03-beta", 1, 4, 0, 3, "beta")
   end
-
 end
diff --git a/logstash-core/spec/logstash/util/plugin_version_spec.rb b/logstash-core/spec/logstash/util/plugin_version_spec.rb
index 589292d7c0b..5079dde4f61 100644
--- a/logstash-core/spec/logstash/util/plugin_version_spec.rb
+++ b/logstash-core/spec/logstash/util/plugin_version_spec.rb
@@ -19,11 +19,9 @@
 require "logstash/util/plugin_version"
 
 describe "LogStash::Util::PluginVersion" do
-
   subject { LogStash::Util::PluginVersion }
 
   context "#find_version!" do
-
     let(:gem)     { "bundler" }
 
     it 'raises an PluginNoVersionError if we cant find the plugin in the gem path' do
@@ -36,7 +34,6 @@
     end
 
     context "with a pre release gem" do
-
       it 'return the version of the gem' do
         # Gem::Specification.find_by_name return nil if the gem is not activated, as for
         # example the pre release ones.
@@ -44,7 +41,6 @@
         expect { subject.find_version!(gem) }.not_to raise_error
       end
     end
-
   end
 
   context "#new" do
diff --git a/logstash-core/spec/logstash/util/secretstore_spec.rb b/logstash-core/spec/logstash/util/secretstore_spec.rb
index 4283297ae4f..8912d94c125 100644
--- a/logstash-core/spec/logstash/util/secretstore_spec.rb
+++ b/logstash-core/spec/logstash/util/secretstore_spec.rb
@@ -20,7 +20,6 @@
 java_import "org.logstash.secret.store.SecretStoreExt"
 
 describe SecretStoreExt do
-
   subject {SecretStoreExt}
   let(:settings) { LogStash::SETTINGS.clone }
 
diff --git a/logstash-core/spec/logstash/util/time_value_spec.rb b/logstash-core/spec/logstash/util/time_value_spec.rb
index 312a91ec67b..bd6d6bb8198 100644
--- a/logstash-core/spec/logstash/util/time_value_spec.rb
+++ b/logstash-core/spec/logstash/util/time_value_spec.rb
@@ -26,7 +26,6 @@
   end
 end
 
-
 module LogStash module Util
 describe TimeValue do
     it_behaves_like "coercion example", TimeValue.new(100, :hour), TimeValue.new(100, :hour)
diff --git a/logstash-core/spec/logstash/util/unicode_trimmer_spec.rb b/logstash-core/spec/logstash/util/unicode_trimmer_spec.rb
index 963cc4f2b8c..77646f4c0e2 100644
--- a/logstash-core/spec/logstash/util/unicode_trimmer_spec.rb
+++ b/logstash-core/spec/logstash/util/unicode_trimmer_spec.rb
@@ -1,4 +1,5 @@
 # encoding: utf-8
+
 require "spec_helper"
 require "logstash/util/unicode_trimmer"
 require "flores/rspec"
diff --git a/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb b/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb
index f1b21d93943..9e644195806 100644
--- a/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb
+++ b/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/instrument/collector"
 
 describe LogStash::WrappedSynchronousQueue do
-
   subject {LogStash::WrappedSynchronousQueue.new(5)}
 
   describe "queue clients" do
diff --git a/logstash-core/spec/logstash/util_spec.rb b/logstash-core/spec/logstash/util_spec.rb
index 9123f3e7fde..145686e4c5a 100644
--- a/logstash-core/spec/logstash/util_spec.rb
+++ b/logstash-core/spec/logstash/util_spec.rb
@@ -28,7 +28,6 @@ class TestKlass
 end
 
 describe LogStash::Util do
-
   subject { described_class }
 
   context "stringify_keys" do
diff --git a/logstash-core/spec/plugin_metadata_spec.rb b/logstash-core/spec/plugin_metadata_spec.rb
index 16d66afa539..97205c35541 100644
--- a/logstash-core/spec/plugin_metadata_spec.rb
+++ b/logstash-core/spec/plugin_metadata_spec.rb
@@ -20,7 +20,6 @@
 require 'securerandom'
 
 describe LogStash::PluginMetadata do
-
   let(:registry) { described_class }
   before(:each) { registry.reset! }
 
@@ -61,7 +60,6 @@
         expect(plugin_registry.set?(:foo)).to be false
       end
     end
-
   end
 
   describe 'instance' do
diff --git a/logstash-core/spec/static/i18n_spec.rb b/logstash-core/spec/static/i18n_spec.rb
index 4df6e65f78d..b71ca4f4aa4 100644
--- a/logstash-core/spec/static/i18n_spec.rb
+++ b/logstash-core/spec/static/i18n_spec.rb
@@ -25,7 +25,6 @@
     glob_path = File.join(LogStash::Environment::LOGSTASH_HOME, "logstash-*", "lib", "**", "*.rb")
 
     Dir.glob(glob_path).each do |file_name|
-
       context "in file \"#{file_name}\"" do
         File.foreach(file_name) do |line|
           next unless (match = line.match(I18N_T_REGEX))
diff --git a/logstash-core/spec/support/mocks_classes.rb b/logstash-core/spec/support/mocks_classes.rb
index 251dd63a2b4..9759dcc2552 100644
--- a/logstash-core/spec/support/mocks_classes.rb
+++ b/logstash-core/spec/support/mocks_classes.rb
@@ -154,7 +154,6 @@ def close
     end
 end end
 
-
 # A Test Source loader will return the same configuration on every fetch call
 class TestSourceLoader
   FailedFetch = LogStash::Config::SourceLoader::FailedFetch
diff --git a/logstash-core/spec/support/shared_contexts.rb b/logstash-core/spec/support/shared_contexts.rb
index c47cc753f48..c15f7e74074 100644
--- a/logstash-core/spec/support/shared_contexts.rb
+++ b/logstash-core/spec/support/shared_contexts.rb
@@ -36,7 +36,6 @@
 end
 
 shared_context "api setup" do |settings_overrides={}|
-
   ##
   # blocks until the condition returns true, or the limit has passed
   # @return [true] if the condition was met
diff --git a/logstash-core/spec/support/shared_examples.rb b/logstash-core/spec/support/shared_examples.rb
index c782fba5508..edb029c10af 100644
--- a/logstash-core/spec/support/shared_examples.rb
+++ b/logstash-core/spec/support/shared_examples.rb
@@ -60,7 +60,6 @@
       expect { subject.gauge(key, "pluto") }.not_to raise_error
     end
 
-
     it "raises an exception if the key is an empty string" do
       expect { subject.gauge("", 20) }.to raise_error(LogStash::Instrument::MetricNoKeyProvided)
     end
diff --git a/qa/Rakefile b/qa/Rakefile
index ffdd10f48fd..a3f61c5ff41 100644
--- a/qa/Rakefile
+++ b/qa/Rakefile
@@ -28,9 +28,7 @@ task :spec    => 'spec:all'
 task :default => :spec
 
 namespace :qa do
-
   namespace :vm do
-
     def user_feedback_string_for(action, platform, machines, options={})
       experimental_string = options["experimental"] ? "experimental" : "non experimental"
       message  = "#{action} all #{experimental_string} VM's defined in acceptance/Vagrantfile"
diff --git a/qa/acceptance/spec/config_helper.rb b/qa/acceptance/spec/config_helper.rb
index 6641d5c9e84..1b3a5b95ccb 100644
--- a/qa/acceptance/spec/config_helper.rb
+++ b/qa/acceptance/spec/config_helper.rb
@@ -18,7 +18,6 @@
 require "json"
 
 module SpecsHelper
-
   def self.configure(vagrant_boxes)
     setup_config = JSON.parse(File.read(File.join(File.dirname(__FILE__), "..", "..", ".vm_ssh_config")))
     boxes        = vagrant_boxes.inject({}) do |acc, v|
diff --git a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/generate.rb b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/generate.rb
index f0d254aef1f..0e6ae670850 100644
--- a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/generate.rb
+++ b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/generate.rb
@@ -29,7 +29,6 @@
   end
 
   describe "on #{logstash.hostname}" do
-
     GENERATE_TYPES = ["input", "filter", "codec", "output"]
     GENERATE_TYPES.each do |type|
       context "with type #{type}" do
diff --git a/qa/acceptance/spec/shared_examples/installed.rb b/qa/acceptance/spec/shared_examples/installed.rb
index 70c7e53e96e..55a34c5ea48 100644
--- a/qa/acceptance/spec/shared_examples/installed.rb
+++ b/qa/acceptance/spec/shared_examples/installed.rb
@@ -20,7 +20,6 @@
 
 # This test checks if a package is possible to be installed without errors.
 RSpec.shared_examples "installable" do |logstash|
-
   before(:each) do
     logstash.uninstall
     logstash.install({:version => LOGSTASH_VERSION})
diff --git a/qa/acceptance/spec/shared_examples/installed_with_jdk.rb b/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
index 7cf01980a81..ed790eda8b1 100644
--- a/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
+++ b/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
@@ -20,7 +20,6 @@
 
 # This test checks if a package is possible to be installed without errors.
 RSpec.shared_examples "installable_with_jdk" do |logstash|
-
   before(:all) do
     #unset to force it using bundled JDK to run LS
     logstash.run_command("unset LS_JAVA_HOME")
diff --git a/qa/acceptance/spec/shared_examples/running.rb b/qa/acceptance/spec/shared_examples/running.rb
index f6f0a42faa3..9cd9eb22d0a 100644
--- a/qa/acceptance/spec/shared_examples/running.rb
+++ b/qa/acceptance/spec/shared_examples/running.rb
@@ -20,7 +20,6 @@
 
 # Test if an installed package can actually be started and runs OK.
 RSpec.shared_examples "runnable" do |logstash|
-
   before(:each) do
     logstash.install({:version => LOGSTASH_VERSION})
   end
diff --git a/qa/acceptance/spec/shared_examples/updated.rb b/qa/acceptance/spec/shared_examples/updated.rb
index 96e1fd02741..e915aef4938 100644
--- a/qa/acceptance/spec/shared_examples/updated.rb
+++ b/qa/acceptance/spec/shared_examples/updated.rb
@@ -20,7 +20,6 @@
 
 # This test checks if the current package could used to update from the latest version released.
 RSpec.shared_examples "updated" do |logstash|
-
   before(:all) {
     #unset to force it using bundled JDK to run LS
     logstash.run_command("unset LS_JAVA_HOME")
diff --git a/qa/acceptance/spec/spec_helper.rb b/qa/acceptance/spec/spec_helper.rb
index 20efaa98588..71a741279bb 100644
--- a/qa/acceptance/spec/spec_helper.rb
+++ b/qa/acceptance/spec/spec_helper.rb
@@ -21,7 +21,6 @@
 require_relative 'config_helper'
 require_relative "../../platform_config"
 
-
 # This is a non obvious hack,
 # EllipticalCurve are not completely implemented in JRuby 9k and the new version of SSH from the standard library
 # use them.
diff --git a/qa/docker/patches/excon/unix_socket.rb b/qa/docker/patches/excon/unix_socket.rb
index 63d97311439..a666033ddb6 100644
--- a/qa/docker/patches/excon/unix_socket.rb
+++ b/qa/docker/patches/excon/unix_socket.rb
@@ -1,4 +1,5 @@
 # frozen_string_literal: true
+
 module Excon
   class UnixSocket < Excon::Socket
     private
diff --git a/qa/docker/shared_examples/container.rb b/qa/docker/shared_examples/container.rb
index 68658755f9c..c0503eb92a7 100644
--- a/qa/docker/shared_examples/container.rb
+++ b/qa/docker/shared_examples/container.rb
@@ -1,5 +1,4 @@
 shared_examples_for 'the container is configured correctly' do |flavor|
-
   before do
     @image = find_image(flavor)
     @container = create_container(@image, {})
diff --git a/qa/docker/shared_examples/container_config.rb b/qa/docker/shared_examples/container_config.rb
index 8b090a20e12..08108e5bb5a 100644
--- a/qa/docker/shared_examples/container_config.rb
+++ b/qa/docker/shared_examples/container_config.rb
@@ -1,5 +1,4 @@
 shared_examples_for 'it runs with different configurations' do |flavor|
-
   before do
     @image = find_image(flavor)
     @container = start_container(@image, options)
diff --git a/qa/docker/shared_examples/container_options.rb b/qa/docker/shared_examples/container_options.rb
index bb9e018a507..1d5108bff94 100644
--- a/qa/docker/shared_examples/container_options.rb
+++ b/qa/docker/shared_examples/container_options.rb
@@ -1,5 +1,4 @@
 shared_examples_for 'it applies settings correctly' do |flavor|
-
   before do
     @image = find_image(flavor)
     @container = start_container(@image, options)
diff --git a/qa/docker/spec/spec_helper.rb b/qa/docker/spec/spec_helper.rb
index 7c36edfffc1..babef10dcbd 100644
--- a/qa/docker/spec/spec_helper.rb
+++ b/qa/docker/spec/spec_helper.rb
@@ -157,7 +157,6 @@ def normalized_architecture(cpu)
   end
 end
 
-
 RSpec::Matchers.define :have_correct_license_label do |expected|
   match do |actual|
     values_match? license_label_for_flavor(expected), actual
diff --git a/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec b/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
index 1bd925aff06..ef895343e0b 100644
--- a/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
+++ b/qa/integration/fixtures/logstash-dummy-pack/logstash-output-secret.gemspec
@@ -22,12 +22,10 @@ This plugins will require the configuration of XXXXX in the logstash.yml
 Make sure you double check your configuration
 eos
 
-
   # Gem dependencies
   s.add_runtime_dependency "manticore"
   s.add_runtime_dependency "gemoji", "< 2.0"
 
-
   s.add_development_dependency "paquet"
   s.add_development_dependency "rake"
 end
diff --git a/qa/integration/fixtures/logstash-dummy-pack/spec/outputs/secret_spec.rb b/qa/integration/fixtures/logstash-dummy-pack/spec/outputs/secret_spec.rb
index 512ecc91090..0997fb6ed1d 100644
--- a/qa/integration/fixtures/logstash-dummy-pack/spec/outputs/secret_spec.rb
+++ b/qa/integration/fixtures/logstash-dummy-pack/spec/outputs/secret_spec.rb
@@ -19,7 +19,6 @@
 require "logstash/outputs/secret"
 require "logstash/codecs/plain"
 
-
 describe LogStash::Outputs::Secret do
   let(:sample_event) { LogStash::Event.new }
   let(:output) { LogStash::Outputs::Secret.new }
diff --git a/qa/integration/rspec.rb b/qa/integration/rspec.rb
index 9da9e231599..247ef9b4cf1 100644
--- a/qa/integration/rspec.rb
+++ b/qa/integration/rspec.rb
@@ -33,5 +33,4 @@
 
 RSpec.clear_examples
 
-
 return RSpec::Core::Runner.run($JUNIT_ARGV).to_i
diff --git a/qa/integration/specs/beats_input_spec.rb b/qa/integration/specs/beats_input_spec.rb
index d87e2c248b3..be6ecf96717 100644
--- a/qa/integration/specs/beats_input_spec.rb
+++ b/qa/integration/specs/beats_input_spec.rb
@@ -59,7 +59,6 @@
       file.path
     end
 
-
     it "successfully send events" do
       logstash_service.start_background(logstash_config)
       process = filebeat_service.run(filebeat_config_path)
diff --git a/qa/integration/specs/cli/install_spec.rb b/qa/integration/specs/cli/install_spec.rb
index 06ba4d42efc..2dce0ba0557 100644
--- a/qa/integration/specs/cli/install_spec.rb
+++ b/qa/integration/specs/cli/install_spec.rb
@@ -30,7 +30,6 @@ def gem_in_lock_file?(pattern, lock_file)
 end
 
 describe "CLI > logstash-plugin install" do
-
   before(:all) do
     @fixture = Fixture.new(__FILE__)
     @logstash = @fixture.get_service("logstash")
@@ -46,7 +45,6 @@ def gem_in_lock_file?(pattern, lock_file)
     # When you are on anything by linux we won't disable the internet with seccomp
     if RbConfig::CONFIG["host_os"] == "linux"
       context "without internet connection (linux seccomp wrapper)" do
-
         let(:offline_wrapper_path) { File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "fixtures", "offline_wrapper")) }
 
         before do
@@ -149,7 +147,6 @@ def gem_in_lock_file?(pattern, lock_file)
         installed = @logstash_plugin.list(plugin_name)
         expect(installed.stderr_and_stdout).to match(/#{plugin_name}/)
       end
-
     end
   end
 end
diff --git a/qa/integration/specs/cli/keystore_spec.rb b/qa/integration/specs/cli/keystore_spec.rb
index 714d93b5d1d..aca64285eb3 100644
--- a/qa/integration/specs/cli/keystore_spec.rb
+++ b/qa/integration/specs/cli/keystore_spec.rb
@@ -25,7 +25,6 @@
 require "open3"
 
 describe "CLI > logstash-keystore" do
-
   before(:all) do
     @fixture = Fixture.new(__FILE__)
     @logstash = @fixture.get_service("logstash")
@@ -36,7 +35,6 @@
   end
 
   context 'create' do
-
     before do
       FileUtils.rm_f File.join(@logstash.logstash_home, 'config', 'logstash.keystore')
     end
@@ -50,11 +48,9 @@
       expect(keystore_list.stderr_and_stdout).to_not match(/ERROR/)
       expect(keystore_list.stderr_and_stdout).to include('Created Logstash keystore')
     end
-
   end
 
   context 'list' do
-
     before do
       keystore = File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "fixtures", "logstash.keystore"))
       FileUtils.cp keystore, File.join(@logstash.logstash_home, 'config')
@@ -69,7 +65,5 @@
       expect(keystore_list.stderr_and_stdout).to_not match(/ERROR/)
       expect(keystore_list.stderr_and_stdout).to include('foo') # contains foo: bar
     end
-
   end
-
 end
diff --git a/qa/integration/specs/cli/prepare_offline_pack_spec.rb b/qa/integration/specs/cli/prepare_offline_pack_spec.rb
index d675645e14a..22e5b423264 100644
--- a/qa/integration/specs/cli/prepare_offline_pack_spec.rb
+++ b/qa/integration/specs/cli/prepare_offline_pack_spec.rb
@@ -54,7 +54,6 @@
   context "creating a pack for integration plugins" do
     let(:plugin_to_pack) { "logstash-integration-jdbc" }
 
-
     it "successfully create a pack" do
       execute = @logstash_plugin.prepare_offline_pack(plugin_to_pack, temporary_zip_file)
 
@@ -70,7 +69,6 @@
     end
   end
 
-
   context "create a pack from a wildcard" do
     let(:plugins_to_pack) { %w(logstash-filter-*) }
 
diff --git a/qa/integration/specs/cli/remove_spec.rb b/qa/integration/specs/cli/remove_spec.rb
index 351d3dbeafc..91aba8cf74a 100644
--- a/qa/integration/specs/cli/remove_spec.rb
+++ b/qa/integration/specs/cli/remove_spec.rb
@@ -29,7 +29,6 @@
 
     if RbConfig::CONFIG["host_os"] == "linux"
       context "without internet connection (linux seccomp wrapper)" do
-
         let(:offline_wrapper_path) { File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "fixtures", "offline_wrapper")) }
         let(:offline_wrapper_cmd) { File.join(offline_wrapper_path, "offline") }
 
@@ -74,7 +73,6 @@
             expect(presence_check.stderr_and_stdout).to match(/logstash-codec-json/)
           end
         end
-
       end
     else
       context "when no other plugins depends on this plugin" do
diff --git a/qa/integration/specs/command_line_spec.rb b/qa/integration/specs/command_line_spec.rb
index 87d96cc1e6c..5e5aa9b8b65 100644
--- a/qa/integration/specs/command_line_spec.rb
+++ b/qa/integration/specs/command_line_spec.rb
@@ -20,7 +20,6 @@
 require_relative "../framework/helpers"
 
 describe "CLI >" do
-
   before(:all) do
     @fixture = Fixture.new(__FILE__)
     @logstash = @fixture.get_service("logstash")
diff --git a/qa/integration/specs/dlq_spec.rb b/qa/integration/specs/dlq_spec.rb
index adae9b8699e..2bacfd9247f 100644
--- a/qa/integration/specs/dlq_spec.rb
+++ b/qa/integration/specs/dlq_spec.rb
@@ -24,7 +24,6 @@
 require "logstash/devutils/rspec/spec_helper"
 
 describe "Test Dead Letter Queue" do
-
   # template with an ip field
   let(:template) { { "index_patterns": ["te*"], "mappings": { "properties": { "ip": { "type": "ip" }}}} }
   # a message that is incompatible with the template
@@ -47,7 +46,6 @@
     es_client.perform_request("PUT", "_template/ip-template", {}, template)
   }
 
-
   after(:each) do
     logstash_service.teardown
   end
diff --git a/qa/integration/specs/es_output_how_spec.rb b/qa/integration/specs/es_output_how_spec.rb
index d0fb054d22d..8b42ce0b629 100644
--- a/qa/integration/specs/es_output_how_spec.rb
+++ b/qa/integration/specs/es_output_how_spec.rb
@@ -21,7 +21,6 @@
 require_relative 'spec_helper.rb'
 
 describe "Test Elasticsearch output" do
-
   before(:all) {
     @fixture = Fixture.new(__FILE__)
     es_allow_wildcard_deletes(@fixture.get_service("elasticsearch").get_client)
diff --git a/qa/integration/specs/fatal_error_spec.rb b/qa/integration/specs/fatal_error_spec.rb
index 2ba0ccad8ce..680a644b389 100644
--- a/qa/integration/specs/fatal_error_spec.rb
+++ b/qa/integration/specs/fatal_error_spec.rb
@@ -22,7 +22,6 @@
 require "logstash/devutils/rspec/spec_helper"
 
 describe "uncaught exception" do
-
   before(:all) do
     @fixture = Fixture.new(__FILE__)
     @logstash = @fixture.get_service("logstash")
@@ -82,5 +81,4 @@ def spawn_logstash_and_wait_for_exit!(config, timeout)
     end
     raise 'LS process did not exit!' unless @logstash.exited?
   end
-
 end
diff --git a/qa/integration/specs/install_java_plugin_spec.rb b/qa/integration/specs/install_java_plugin_spec.rb
index 03f4d5bcf41..1447280931b 100644
--- a/qa/integration/specs/install_java_plugin_spec.rb
+++ b/qa/integration/specs/install_java_plugin_spec.rb
@@ -22,7 +22,6 @@
 require "stud/temporary"
 
 describe "Install and run java plugin" do
-
   before(:all) do
     @fixture = Fixture.new(__FILE__)
     @logstash = @fixture.get_service("logstash")
@@ -75,6 +74,5 @@
       result = @logstash.monitoring_api.event_stats
       expect(result["in"]).to eq(4)
     end
-
   end
 end
diff --git a/qa/integration/specs/java_api_spec.rb b/qa/integration/specs/java_api_spec.rb
index ff21afccd2a..8152e89592b 100644
--- a/qa/integration/specs/java_api_spec.rb
+++ b/qa/integration/specs/java_api_spec.rb
@@ -45,7 +45,6 @@
   let!(:settings_dir) { Stud::Temporary.directory }
 
   it "successfully sends events through Java plugins" do
-
     @logstash.start_background_with_config_settings(config_to_temp_file(@fixture.config), settings_dir)
 
     # wait for Logstash to start
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 71bb5be6cad..33856ad3187 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -343,5 +343,4 @@ def logging_get_assert(logstash_service, logstash_level, slowlog_level, skip: ''
   def logging_put_assert(result)
     expect(result['acknowledged']).to be(true), "result not acknowledged, got: #{result.inspect}"
   end
-
 end
diff --git a/qa/integration/specs/multiple_pipeline_spec.rb b/qa/integration/specs/multiple_pipeline_spec.rb
index ce519ae21ac..31496336610 100644
--- a/qa/integration/specs/multiple_pipeline_spec.rb
+++ b/qa/integration/specs/multiple_pipeline_spec.rb
@@ -105,7 +105,6 @@
   end
 
   context 'readable pipelines.yml with invalid YAML contents' do
-
     let!(:pipelines_yaml) do
       <<~EOYAML
          - pipeline.id: my_id
diff --git a/qa/integration/specs/reload_config_spec.rb b/qa/integration/specs/reload_config_spec.rb
index b210def0bcf..86c59ac038e 100644
--- a/qa/integration/specs/reload_config_spec.rb
+++ b/qa/integration/specs/reload_config_spec.rb
@@ -25,7 +25,6 @@
 require "logstash/util"
 
 describe "Test Logstash service when config reload is enabled" do
-
   define_negated_matcher :exclude, :include
 
   before(:all) {
diff --git a/qa/integration/specs/reserved_tags_field_spec.rb b/qa/integration/specs/reserved_tags_field_spec.rb
index 999ecf14107..a9e99d95e39 100644
--- a/qa/integration/specs/reserved_tags_field_spec.rb
+++ b/qa/integration/specs/reserved_tags_field_spec.rb
@@ -48,7 +48,6 @@
   }
   let(:settings_dir) { Stud::Temporary.directory }
 
-
   shared_examples_for 'assign illegal value to tags' do |mode, pipeline_fixture, tags_match, fail_tags_match|
     it "[#{mode}] update tags and _tags successfully" do
       @logstash.env_variables = test_env
diff --git a/qa/rspec/commands.rb b/qa/rspec/commands.rb
index c2eaa63678a..adfc41f66e2 100644
--- a/qa/rspec/commands.rb
+++ b/qa/rspec/commands.rb
@@ -26,7 +26,6 @@
 require "forwardable"
 
 module ServiceTester
-
   # An artifact is the component being tested, it's able to interact with
   # a destination machine by holding a client and is basically provides all
   # necessary abstractions to make the test simple.
diff --git a/qa/rspec/commands/base.rb b/qa/rspec/commands/base.rb
index 4759f01ef7a..781ddc050d4 100644
--- a/qa/rspec/commands/base.rb
+++ b/qa/rspec/commands/base.rb
@@ -20,7 +20,6 @@
 require_relative "system_helpers"
 
 module ServiceTester
-
   class InstallException < Exception; end
 
   class Base
diff --git a/qa/rspec/helpers.rb b/qa/rspec/helpers.rb
index 3a457bc7746..0aa52c6eec0 100644
--- a/qa/rspec/helpers.rb
+++ b/qa/rspec/helpers.rb
@@ -18,9 +18,9 @@
 require_relative "commands"
 
 module ServiceTester
-
   class Configuration
     attr_accessor :servers, :lookup
+
     def initialize
       @servers  = []
       @lookup   = {}
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index ecf3ccb6b08..237cae90e12 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -16,7 +16,6 @@
 # under the License.
 
 namespace "artifact" do
-
   SNAPSHOT_BUILD = ENV["RELEASE"] != "1"
   VERSION_QUALIFIER = ENV["VERSION_QUALIFIER"]
   if VERSION_QUALIFIER
@@ -183,7 +182,6 @@ namespace "artifact" do
     safe_system("./gradlew deleteLocalJdk") if bundle_jdk
   end
 
-
   desc "Build a not JDK bundled tar.gz of default logstash plugins with all dependencies"
   task "no_bundle_jdk_tar" => ["prepare", "generate_build_metadata"] do
     create_local_archive_pack(false)
@@ -241,7 +239,6 @@ namespace "artifact" do
     package("centos", :oss)
   end
 
-
   desc "Build a DEB of logstash with all dependencies"
   task "deb" => ["prepare", "generate_build_metadata"] do
     #with bundled JDKs
@@ -457,7 +454,6 @@ namespace "artifact" do
     end
   end
 
-
   def build_tar(license, tar_suffix = nil, exclude_paths=default_exclude_paths, platform: '')
     require "zlib"
     require 'rubygems'
@@ -487,7 +483,6 @@ namespace "artifact" do
     gz.close
   end
 
-
   def write_to_tar(tar, path, path_in_tar)
     stat = File.lstat(path)
     if stat.directory?
@@ -556,7 +551,6 @@ namespace "artifact" do
     metadata_source_file_path = BUILD_METADATA_FILE.path
     dir.input("#{metadata_source_file_path}=/usr/share/logstash/#{metadata_file_path}")
 
-
     suffix = ""
     if oss
       suffix= "-oss"
diff --git a/rakelib/default_plugins.rb b/rakelib/default_plugins.rb
index 08d10e7e917..2ca0364d1db 100644
--- a/rakelib/default_plugins.rb
+++ b/rakelib/default_plugins.rb
@@ -17,7 +17,6 @@
 
 module LogStash
   module RakeLib
-
     # @return [Array<String>] list of all plugin names as defined in the logstash-plugins github organization, minus names that matches the ALL_PLUGINS_SKIP_LIST
     def self.fetch_all_plugins
       require 'octokit'
diff --git a/rakelib/lint.rake b/rakelib/lint.rake
index b21351948f8..c3aa4df45f0 100644
--- a/rakelib/lint.rake
+++ b/rakelib/lint.rake
@@ -16,7 +16,6 @@
 # under the License.
 
 namespace "lint" do
-
   module RuboCLI
     def self.run!(*args)
       require "rubocop"
diff --git a/rakelib/modules.rake b/rakelib/modules.rake
index adf00ad9b41..6b292fd9c2b 100644
--- a/rakelib/modules.rake
+++ b/rakelib/modules.rake
@@ -16,7 +16,6 @@
 # under the License.
 
 namespace "modules" do
-
   def unpacker(src_file, dest_dir)
     puts "Reading #{src_file}"
     array = JSON.parse(IO.read(src_file))
diff --git a/rakelib/plugin.rake b/rakelib/plugin.rake
index fc7f025b430..d52c0eb98fc 100644
--- a/rakelib/plugin.rake
+++ b/rakelib/plugin.rake
@@ -19,7 +19,6 @@ require_relative "default_plugins"
 require 'rubygems'
 
 namespace "plugin" do
-
   def install_plugins(*args)
     require_relative "../lib/pluginmanager/main"
     LogStash::PluginManager::Main.run("bin/logstash-plugin", ["install"] + args)
@@ -105,5 +104,4 @@ namespace "plugin" do
 
     task.reenable # Allow this task to be run again
   end
-
 end # namespace "plugin"
diff --git a/rakelib/plugins_docs_dependencies.rake b/rakelib/plugins_docs_dependencies.rake
index 6aa6f4513ed..5b1a6211fb1 100644
--- a/rakelib/plugins_docs_dependencies.rake
+++ b/rakelib/plugins_docs_dependencies.rake
@@ -79,7 +79,6 @@ class PluginVersionWorking
     end
   end
 
-
   # We us a brute force strategy to get the highest version possible for all the community plugins.
   # We take each plugin and we add it to the current dependencies and we try to resolve the tree, if it work we
   # record the version installed.
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 2ba4c9f12e9..8795c29e503 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -21,7 +21,6 @@
 require 'pathname'
 
 namespace "test" do
-
   desc "run the java unit tests"
   task "core-java" do
     exit(1) unless system('./gradlew clean javaTests')
diff --git a/rakelib/version.rake b/rakelib/version.rake
index 8734112adca..72de1af05f2 100644
--- a/rakelib/version.rake
+++ b/rakelib/version.rake
@@ -121,5 +121,4 @@ namespace :version do
       abort("Invalid version argument: \"#{args[:version]}\". Aborting...")
     end
   end
-
 end
diff --git a/spec/compliance/license_spec.rb b/spec/compliance/license_spec.rb
index 7d32e969339..1d94a6a9f86 100644
--- a/spec/compliance/license_spec.rb
+++ b/spec/compliance/license_spec.rb
@@ -19,7 +19,6 @@
 require_relative '../../rakelib/default_plugins'
 
 describe "Project licenses" do
-
   let(:expected_licenses) {
     ##
     # Expected licenses are Apache License 2.0, BSD license, MIT license and the ruby one,
@@ -54,7 +53,6 @@
   end
 
   shared_examples "runtime license test" do
-
     subject(:gem_name) do |example|
       example.metadata[:example_group][:parent_example_group][:description]
     end
@@ -89,5 +87,4 @@
       it_behaves_like "runtime license test"
     end
   end
-
 end
diff --git a/spec/support/pack/valid-pack/logstash/valid-pack/dependencies/logstash-input-packtestdep.gemspec b/spec/support/pack/valid-pack/logstash/valid-pack/dependencies/logstash-input-packtestdep.gemspec
index c0d175e51e1..ea563bd0bc1 100644
--- a/spec/support/pack/valid-pack/logstash/valid-pack/dependencies/logstash-input-packtestdep.gemspec
+++ b/spec/support/pack/valid-pack/logstash/valid-pack/dependencies/logstash-input-packtestdep.gemspec
@@ -1,4 +1,5 @@
 # coding: utf-8
+
 Gem::Specification.new do |spec|
   spec.name          = "logstash-input-packtestdep"
   spec.version       = "0.0.1"
diff --git a/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest.gemspec b/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest.gemspec
index 49d8922c074..4a9ab0b4d94 100644
--- a/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest.gemspec
+++ b/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest.gemspec
@@ -1,4 +1,5 @@
 # coding: utf-8
+
 Gem::Specification.new do |spec|
   spec.name          = "logstash-input-packtest"
   spec.version       = "0.0.1"
diff --git a/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest_pim.gemspec b/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest_pim.gemspec
index fbb1c92cb4d..dd65d883151 100644
--- a/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest_pim.gemspec
+++ b/spec/support/pack/valid-pack/logstash/valid-pack/logstash-input-packtest_pim.gemspec
@@ -1,4 +1,5 @@
 # coding: utf-8
+
 Gem::Specification.new do |spec|
   spec.name                 = "logstash-input-packtest_pim"
   spec.version              = "0.0.1"
diff --git a/spec/support/resource_dsl_methods.rb b/spec/support/resource_dsl_methods.rb
index 939289e26e0..4ffec5c6f7c 100644
--- a/spec/support/resource_dsl_methods.rb
+++ b/spec/support/resource_dsl_methods.rb
@@ -18,9 +18,11 @@
 # Ruby doesn't have common class for boolean,
 # And to simplify the ResourceDSLMethods check it make sense to have it.
 module Boolean; end
+
 class TrueClass
   include Boolean
 end
+
 class FalseClass
   include Boolean
 end
@@ -51,7 +53,6 @@ def test_api(expected, path)
         expect(last_response).to be_ok
       end
 
-
       describe "the default metadata" do
         it "should include the host" do
           expect(payload["host"]).to eql(Socket.gethostname)
diff --git a/spec/unit/plugin_manager/gemfile_spec.rb b/spec/unit/plugin_manager/gemfile_spec.rb
index 26e946be11c..e2b76cda77e 100644
--- a/spec/unit/plugin_manager/gemfile_spec.rb
+++ b/spec/unit/plugin_manager/gemfile_spec.rb
@@ -19,11 +19,8 @@
 require "pluginmanager/gemfile"
 
 describe "logstash Gemfile Manager" do
-
   context LogStash::Gemfile do
-
     context "load" do
-
       it "should load and return self" do
         file = <<-END
           source "https://rubygems.org"
@@ -184,7 +181,6 @@
       end
 
       context "keep a backup of the original file" do
-
       end
     end
 
diff --git a/spec/unit/plugin_manager/install_spec.rb b/spec/unit/plugin_manager/install_spec.rb
index cf17306409e..23acae1ce5a 100644
--- a/spec/unit/plugin_manager/install_spec.rb
+++ b/spec/unit/plugin_manager/install_spec.rb
@@ -42,7 +42,6 @@
   end
 
   context "when installs alias plugin" do
-
     before(:each) do
       # mocked to avoid validation of options
       expect(cmd).to receive(:validate_cli_options!).and_return(nil)
diff --git a/spec/unit/plugin_manager/prepare_offline_pack_spec.rb b/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
index e4f02f45e02..a26bc30f0d2 100644
--- a/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
+++ b/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
@@ -86,7 +86,6 @@
       end
     end
 
-
     context "if the output is directory" do
       let(:tmp_zip_file) { f = Stud::Temporary.pathname; FileUtils.mkdir_p(f); f }
       let(:cmd) { "prepare-offline-pack" }
diff --git a/spec/unit/plugin_manager/proxy_support_spec.rb b/spec/unit/plugin_manager/proxy_support_spec.rb
index 9c2beb99557..4345b91608d 100644
--- a/spec/unit/plugin_manager/proxy_support_spec.rb
+++ b/spec/unit/plugin_manager/proxy_support_spec.rb
@@ -139,7 +139,6 @@
       }
     }
 
-
     it "doesn't raise an exception" do
       expect { configure_proxy }.not_to raise_exception
     end
@@ -153,7 +152,6 @@
       }
     }
 
-
     it "raises an exception" do
       expect { configure_proxy }.to raise_error(RuntimeError)
     end
diff --git a/spec/unit/plugin_manager/util_spec.rb b/spec/unit/plugin_manager/util_spec.rb
index 57428cbc698..38dece461b2 100644
--- a/spec/unit/plugin_manager/util_spec.rb
+++ b/spec/unit/plugin_manager/util_spec.rb
@@ -20,7 +20,6 @@
 require 'gems'
 
 describe LogStash::PluginManager do
-
   describe "fetching plugin information" do
     let(:plugin_name) { "logstash-output-elasticsearch" }
 
@@ -49,7 +48,6 @@
         expect(version_info["number"]).to eq("1.0.7")
       end
 
-
       it "should search for the last version information with prerelease" do
         version_info = LogStash::PluginManager.fetch_latest_version_info(plugin_name, :pre => true)
         expect(version_info["number"]).to eq("2.0.0.pre")
diff --git a/spec/unit/util/compress_spec.rb b/spec/unit/util/compress_spec.rb
index 98b031037a4..d7a59faa952 100644
--- a/spec/unit/util/compress_spec.rb
+++ b/spec/unit/util/compress_spec.rb
@@ -54,11 +54,9 @@ def list_files(target)
 end
 
 describe LogStash::Util::Zip do
-
   subject { Class.new { extend LogStash::Util::Zip } }
 
   context "#extraction" do
-
     let(:source) { File.join(File.expand_path("."), "source_file.zip") }
     let(:target) { File.expand_path("target_dir") }
 
@@ -151,7 +149,6 @@ def list_files(target)
 end
 
 describe LogStash::Util::Tar do
-
   subject { Class.new { extend LogStash::Util::Tar } }
 
   context "#extraction" do
@@ -183,7 +180,6 @@ def list_files(target)
   end
 
   context "#compression" do
-
     let(:target) { File.join(File.expand_path("."), "target_file.tar.gz") }
     let(:source) { File.expand_path("source_dir") }
 
diff --git a/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb b/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
index 35579007027..465aa0b1fdb 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
@@ -28,7 +28,6 @@ class AsciidocFormat
       /%PLUGIN%/ => :config_name
     }
 
-
     def initialize(options = {})
       @options = options
       @template = read_template(TEMPLATE_FILE)
diff --git a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
index 80841c97b6d..6acab42414e 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
@@ -132,7 +132,6 @@ def run_in_directory(cmd = nil, &block)
     end
   end
 
-
   # This class orchestrate all the operation between the `logstash-plugins` organization and the
   # doc build for each plugin.
   class DocumentationGenerator
diff --git a/tools/logstash-docgen/lib/logstash/docgen/plugin_doc.rb b/tools/logstash-docgen/lib/logstash/docgen/plugin_doc.rb
index 71ac86a83cb..13ae227b9dd 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/plugin_doc.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/plugin_doc.rb
@@ -32,7 +32,6 @@
 
 task :doc => "doc:html"
 
-
 def generate_preview(options = {})
   LogStash::Docgen.generate_for_plugin(Dir.pwd, options).output
 end
diff --git a/tools/logstash-docgen/logstash-docgen.gemspec b/tools/logstash-docgen/logstash-docgen.gemspec
index 91d6b693126..a93f2e4b515 100644
--- a/tools/logstash-docgen/logstash-docgen.gemspec
+++ b/tools/logstash-docgen/logstash-docgen.gemspec
@@ -1,4 +1,5 @@
 # coding: utf-8
+
 lib = File.expand_path('../lib', __FILE__)
 $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
 require "logstash/docgen/version"
diff --git a/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb b/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
index f14c28ac860..32e88bfd058 100644
--- a/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
+++ b/tools/logstash-docgen/spec/logstash/docgen/task_runner_spec.rb
@@ -125,7 +125,6 @@
       expect(output).to match(/FAILURE: #{name}/)
       expect(output).to match(/Exception:/)
 
-
       expect(output).to match(/FAILURE: not_working_bob/)
     end
   end
diff --git a/tools/logstash-docgen/spec/logstash/docgen/util_spec.rb b/tools/logstash-docgen/spec/logstash/docgen/util_spec.rb
index 5c3765fa306..622c931559c 100644
--- a/tools/logstash-docgen/spec/logstash/docgen/util_spec.rb
+++ b/tools/logstash-docgen/spec/logstash/docgen/util_spec.rb
@@ -23,7 +23,6 @@
 
   context "time_execution" do
     it "prints the execution time to stdout" do
-
       output = capture do
         subject.time_execution do
           sleep(0.1)
diff --git a/tools/paquet/lib/paquet/shell_ui.rb b/tools/paquet/lib/paquet/shell_ui.rb
index e44290caa41..ed534e38db2 100644
--- a/tools/paquet/lib/paquet/shell_ui.rb
+++ b/tools/paquet/lib/paquet/shell_ui.rb
@@ -20,6 +20,7 @@ class SilentUI
     class << self
       def debug(message)
       end
+
       def info(message)
       end
     end
diff --git a/tools/paquet/paquet.gemspec b/tools/paquet/paquet.gemspec
index b195778d0ee..d9172971d59 100644
--- a/tools/paquet/paquet.gemspec
+++ b/tools/paquet/paquet.gemspec
@@ -1,4 +1,5 @@
 # coding: utf-8
+
 lib = File.expand_path('../lib', __FILE__)
 $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
 require 'paquet/version'
@@ -14,7 +15,6 @@ Gem::Specification.new do |spec|
   spec.description   = %q{This gem add a few rake tasks to create a uber gems that will be shipped as a zip}
   spec.homepage      = "https://github.com/elastic/logstash"
 
-
   spec.files         = Dir.glob(File.join(File.dirname(__FILE__), "lib", "**", "*.rb"))
 
   spec.bindir        = "exe"
diff --git a/tools/release/generate_release_notes.rb b/tools/release/generate_release_notes.rb
index 345a65a6aa3..a6cb1f573aa 100755
--- a/tools/release/generate_release_notes.rb
+++ b/tools/release/generate_release_notes.rb
@@ -120,7 +120,6 @@
 `git checkout -b #{branch_name}`
 `git commit docs/static/releasenotes.asciidoc -m "Update release notes for #{current_release}"`
 
-
 puts "Pushing commit.."
 `git remote set-url origin https://x-access-token:#{token}@github.com/elastic/logstash.git`
 `git push origin #{branch_name}`
diff --git a/x-pack/lib/config_management/bootstrap_check.rb b/x-pack/lib/config_management/bootstrap_check.rb
index 1729873e03b..780c28ec6cb 100644
--- a/x-pack/lib/config_management/bootstrap_check.rb
+++ b/x-pack/lib/config_management/bootstrap_check.rb
@@ -39,7 +39,6 @@ def self.check(settings)
         settings.set("config.reload.automatic", true)
         settings.set("config.reload.interval", interval)
 
-
         pipeline_ids = settings.get("xpack.management.pipeline.id")
 
         if pipeline_ids.reject { |id| id.strip.empty? }.empty?
@@ -59,7 +58,6 @@ def self.check(settings)
         logger.info("Using Elasticsearch as config store", :pipeline_id => pipeline_ids, :poll_interval => "#{interval}ns")
       end
 
-
       def self.check_path_config(settings)
         path_config = settings.get("path.config")
         return if (path_config.nil? || path_config.empty?)
diff --git a/x-pack/lib/config_management/elasticsearch_source.rb b/x-pack/lib/config_management/elasticsearch_source.rb
index f3fe2c2227b..0320a996ecf 100644
--- a/x-pack/lib/config_management/elasticsearch_source.rb
+++ b/x-pack/lib/config_management/elasticsearch_source.rb
@@ -10,7 +10,6 @@
 require 'helpers/loggable_try'
 require "license_checker/licensed"
 
-
 module LogStash
   module ConfigManagement
     class ElasticsearchSource < LogStash::Config::Source::Base
@@ -316,6 +315,5 @@ def log_wildcard_unsupported(pipeline_ids)
         end
       end
     end
-
   end
 end
diff --git a/x-pack/lib/config_management/hooks.rb b/x-pack/lib/config_management/hooks.rb
index 17de6bab5b7..d09e3af2b20 100644
--- a/x-pack/lib/config_management/hooks.rb
+++ b/x-pack/lib/config_management/hooks.rb
@@ -9,7 +9,6 @@
 require "logstash/config/source/multi_local"
 require "logstash/config/source/modules"
 
-
 module LogStash
   module ConfigManagement
     class Hooks
diff --git a/x-pack/lib/filters/geoip/database_metadata.rb b/x-pack/lib/filters/geoip/database_metadata.rb
index 3e037de0506..62f6c3b19e1 100644
--- a/x-pack/lib/filters/geoip/database_metadata.rb
+++ b/x-pack/lib/filters/geoip/database_metadata.rb
@@ -105,5 +105,4 @@ class Column
     DIRNAME       = 3
     IS_EULA       = 4
   end
-
 end end end end
diff --git a/x-pack/lib/filters/geoip/database_metric.rb b/x-pack/lib/filters/geoip/database_metric.rb
index 6a720095f5c..73f3f320a55 100644
--- a/x-pack/lib/filters/geoip/database_metric.rb
+++ b/x-pack/lib/filters/geoip/database_metric.rb
@@ -70,5 +70,4 @@ def update_database_status(database_type, database_status, metadata, days_withou
       n.gauge(:fail_check_in_days, days_without_update)
     end
   end
-
 end end end end
diff --git a/x-pack/lib/filters/geoip/download_manager.rb b/x-pack/lib/filters/geoip/download_manager.rb
index 4c8e7febfd5..7d4b437e1ff 100644
--- a/x-pack/lib/filters/geoip/download_manager.rb
+++ b/x-pack/lib/filters/geoip/download_manager.rb
@@ -150,5 +150,4 @@ def download_url(url)
     download_uri.path = "/#{url}"
     download_uri.to_s
   end
-
 end end end end
diff --git a/x-pack/lib/helpers/elasticsearch_options.rb b/x-pack/lib/helpers/elasticsearch_options.rb
index 5f6c5e5a2df..1cbd89a7991 100644
--- a/x-pack/lib/helpers/elasticsearch_options.rb
+++ b/x-pack/lib/helpers/elasticsearch_options.rb
@@ -155,7 +155,6 @@ def es_options_from_modules(settings)
       opts
     end
 
-
     # Determine whether only modules have been configured, and not monitoring
     # @param String feature to be checked
     # @param Logstash::Settings Logstash settings
diff --git a/x-pack/lib/license_checker/license_manager.rb b/x-pack/lib/license_checker/license_manager.rb
index 1cfc43e3915..2377ef7d136 100644
--- a/x-pack/lib/license_checker/license_manager.rb
+++ b/x-pack/lib/license_checker/license_manager.rb
@@ -10,7 +10,6 @@
 
 module LogStash
   module LicenseChecker
-
     class LicenseError < StandardError; end
 
     class LicenseManager
diff --git a/x-pack/lib/license_checker/licensed.rb b/x-pack/lib/license_checker/licensed.rb
index e9ed04a7e73..5f3bb005a6b 100644
--- a/x-pack/lib/license_checker/licensed.rb
+++ b/x-pack/lib/license_checker/licensed.rb
@@ -8,7 +8,6 @@
 require 'license_checker/license_reader'
 java_import java.util.concurrent.TimeUnit
 
-
 # Mixin to add License Checking functionality to a feature:
 # To add license checking:
 # - Include the Licensed mixin to the class under license
@@ -84,7 +83,6 @@ def update_license_state(xpack_info)
       def get_current_license_state
         @license_state.dup
       end
-
     end
   end
 end
diff --git a/x-pack/lib/monitoring/inputs/metrics.rb b/x-pack/lib/monitoring/inputs/metrics.rb
index fffa1445713..3b820283531 100644
--- a/x-pack/lib/monitoring/inputs/metrics.rb
+++ b/x-pack/lib/monitoring/inputs/metrics.rb
@@ -2,7 +2,6 @@
 # or more contributor license agreements. Licensed under the Elastic License;
 # you may not use this file except in compliance with the Elastic License.
 
-
 require "logstash/inputs/base"
 require "logstash/instrument/collector"
 require 'helpers/elasticsearch_options'
diff --git a/x-pack/lib/monitoring/monitoring.rb b/x-pack/lib/monitoring/monitoring.rb
index 293f1b4c429..e06b5f12958 100644
--- a/x-pack/lib/monitoring/monitoring.rb
+++ b/x-pack/lib/monitoring/monitoring.rb
@@ -45,7 +45,6 @@ def initialize(node_uuid,
         @ssl_key = es_settings['ssl_key']
         @ssl_cipher_suites = es_settings['ssl_cipher_suites']
         @sniffing = es_settings['sniffing']
-
       end
 
       attr_accessor :system_api_version, :es_hosts, :user, :password, :node_uuid, :cloud_id, :cloud_auth, :api_key
@@ -136,7 +135,6 @@ def initialize
       end
 
       def after_agent(runner)
-
         return unless monitoring_enabled?(runner.settings)
 
         deprecation_logger.deprecated(
diff --git a/x-pack/qa/integration/management/multiple_pipelines_spec.rb b/x-pack/qa/integration/management/multiple_pipelines_spec.rb
index a9c885f7098..0511da0bfac 100644
--- a/x-pack/qa/integration/management/multiple_pipelines_spec.rb
+++ b/x-pack/qa/integration/management/multiple_pipelines_spec.rb
@@ -74,7 +74,6 @@
       count_hashes(@pipelines.keys)
     end.to eq(2)
 
-
     pipelines = {
       "super_generator" => "input { generator { count => 100 } tcp { port => 6005 } } output { file { path => '#{@temporary_directory}/super_generator_new' }}",
       "another_generator" => "input { generator { count => 100 } tcp { port => 6006 } } output { file { path => '#{@temporary_directory}/another_generator_new' }}"
@@ -157,7 +156,6 @@ def count_hashes(pipelines)
     end
   end
 
-
   it "reloads the configuration when its different from the running pipeline" do
     pipelines = {
       "super_generator" => "input { generator { count => 100 } tcp { port => 6005 } } output { file { path => '#{@temporary_directory}/super_generator_new' }}",
diff --git a/x-pack/qa/integration/monitoring/direct_shipping_spec.rb b/x-pack/qa/integration/monitoring/direct_shipping_spec.rb
index 336592423f8..bded6b36100 100644
--- a/x-pack/qa/integration/monitoring/direct_shipping_spec.rb
+++ b/x-pack/qa/integration/monitoring/direct_shipping_spec.rb
@@ -6,7 +6,6 @@
 require 'securerandom'
 
 describe "Direct shipping" do
-
   before :all do
     @elasticsearch_service = elasticsearch
 
diff --git a/x-pack/qa/integration/monitoring/es_documents_structure_validation_spec.rb b/x-pack/qa/integration/monitoring/es_documents_structure_validation_spec.rb
index 782e1ecef2d..9b3c31057cb 100644
--- a/x-pack/qa/integration/monitoring/es_documents_structure_validation_spec.rb
+++ b/x-pack/qa/integration/monitoring/es_documents_structure_validation_spec.rb
@@ -5,7 +5,6 @@
 require_relative "../spec_helper"
 
 describe "Monitoring internal collector documents" do
-
   before :all do
     @elasticsearch_service = elasticsearch
 
diff --git a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
index 96a5569886e..e8cc3e82315 100644
--- a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
+++ b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
@@ -5,7 +5,6 @@
 module Elasticsearch
   module API
     module Actions
-
       # Update the password of the specified user
       def update_password(arguments={})
         method = HTTP_PUT
diff --git a/x-pack/qa/integration/support/helpers.rb b/x-pack/qa/integration/support/helpers.rb
index a450ca7b1b6..f4b4af8e5f1 100644
--- a/x-pack/qa/integration/support/helpers.rb
+++ b/x-pack/qa/integration/support/helpers.rb
@@ -85,7 +85,6 @@ def bootstrap_password_exists?
   response.successful? && response.stdout_lines.any? { |line| line =~ /^bootstrap.password$/ }
 end
 
-
 def elasticsearch_xpack_installed?
   cmd = "bin/elasticsearch-plugin list"
   response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path })
diff --git a/x-pack/spec/config_management/bootstrap_check_spec.rb b/x-pack/spec/config_management/bootstrap_check_spec.rb
index ba0ea22cbbb..681b9bc6ace 100644
--- a/x-pack/spec/config_management/bootstrap_check_spec.rb
+++ b/x-pack/spec/config_management/bootstrap_check_spec.rb
@@ -43,7 +43,6 @@
         .to change { settings.get_value("config.reload.interval").to_nanos }.to(interval * 1_000_000_000)
     end
 
-
     context "when `config.string` is given" do
       let(:settings) do
         apply_settings(
diff --git a/x-pack/spec/config_management/elasticsearch_source_spec.rb b/x-pack/spec/config_management/elasticsearch_source_spec.rb
index 3245b2389dd..55083b06407 100644
--- a/x-pack/spec/config_management/elasticsearch_source_spec.rb
+++ b/x-pack/spec/config_management/elasticsearch_source_spec.rb
@@ -612,7 +612,6 @@
             end
           end
 
-
           context "With an invalid basic license, it should raise an error [#{es_version}]" do
             let(:license_type) { 'basic' }
 
@@ -709,7 +708,6 @@
             expect { subject.pipeline_configs }.to raise_error LogStash::ConfigManagement::ElasticsearchSource::RemoteConfigError
           end
         end
-
       }
     end
 
@@ -740,14 +738,12 @@
         expect { subject.pipeline_configs }.to raise_error /Something bad/
       end
 
-
       it "raises the exception upstream in [7.9]" do
         allow(mock_client).to receive(:get).with("/").and_return(es_version_7_9_response)
         expect(mock_client).to receive(:post).with(es_path, {}, request_body_string).and_raise("Something bad")
         expect { subject.pipeline_configs }.to raise_error /Something bad/
       end
     end
-
   end
 
   describe "#get_es_version" do
diff --git a/x-pack/spec/filters/geoip/database_manager_spec.rb b/x-pack/spec/filters/geoip/database_manager_spec.rb
index c850f73a086..e39014aa120 100644
--- a/x-pack/spec/filters/geoip/database_manager_spec.rb
+++ b/x-pack/spec/filters/geoip/database_manager_spec.rb
@@ -7,7 +7,6 @@
 require "filters/geoip/database_metric"
 
 describe LogStash::Filters::Geoip do
-
   describe 'DatabaseManager', :aggregate_failures do
     let(:mock_geoip_plugin)  { double("geoip_plugin") }
     let(:mock_metadata)  { double("database_metadata") }
@@ -329,7 +328,6 @@ def expect_healthy_database_metric(c)
       let(:asn02) { get_file_path(dirname2, default_asn_db_name) }
       let(:city02) { get_file_path(dirname2, default_city_db_name) }
 
-
       before(:each) do
         FileUtils.mkdir_p [dir_path, dir_path2]
       end
diff --git a/x-pack/spec/filters/geoip/database_metadata_spec.rb b/x-pack/spec/filters/geoip/database_metadata_spec.rb
index ec6a75f6d62..ab168382e99 100644
--- a/x-pack/spec/filters/geoip/database_metadata_spec.rb
+++ b/x-pack/spec/filters/geoip/database_metadata_spec.rb
@@ -9,7 +9,6 @@
 require "fileutils"
 
 describe LogStash::Filters::Geoip do
-
   describe 'DatabaseMetadata', :aggregate_failures do
     let(:database_type) { LogStash::Filters::Geoip::CITY }
     let(:dbm) do
diff --git a/x-pack/spec/filters/geoip/download_manager_spec.rb b/x-pack/spec/filters/geoip/download_manager_spec.rb
index a245eb847d8..487916e8323 100644
--- a/x-pack/spec/filters/geoip/download_manager_spec.rb
+++ b/x-pack/spec/filters/geoip/download_manager_spec.rb
@@ -8,7 +8,6 @@
 require "filters/geoip/database_manager"
 
 describe LogStash::Filters::Geoip do
-
   describe 'DownloadManager', :aggregate_failures do
     let(:mock_metadata)  { double("database_metadata") }
     let(:download_manager) do
@@ -27,7 +26,6 @@
 
     # this is disabled until https://github.com/elastic/logstash/issues/13261 is solved
     context "rest client" do
-
       it "can call endpoint" do
         conn = download_manager.send(:rest_client)
         res = conn.get("#{GEOIP_STAGING_ENDPOINT}?key=#{SecureRandom.uuid}&elastic_geoip_service_tos=agree")
@@ -92,7 +90,6 @@
         updated_db = download_manager.send(:check_update)
         expect(updated_db.size).to eql(0)
       end
-
     end
 
     context "download database" do
diff --git a/x-pack/spec/helpers/elasticsearch_options_spec.rb b/x-pack/spec/helpers/elasticsearch_options_spec.rb
index 1b42c6fdfd7..73333c68c96 100644
--- a/x-pack/spec/helpers/elasticsearch_options_spec.rb
+++ b/x-pack/spec/helpers/elasticsearch_options_spec.rb
@@ -168,7 +168,6 @@
   end
 
   describe "es_options_from_settings" do
-
     context "with implicit username" do
       let(:settings) do
         {
@@ -202,7 +201,6 @@
         end
       end
 
-
       context "with api_key" do
         let(:settings) do
           super().merge(
@@ -292,7 +290,6 @@
       it_behaves_like 'elasticsearch options hash is populated with secure options'
     end
 
-
     context 'when cloud_id' do
       let(:cloud_name) { 'thebigone'}
       let(:cloud_domain) { 'elastic.co'}
@@ -521,7 +518,6 @@
         it_behaves_like 'elasticsearch options hash is populated without security'
       end
 
-
       context 'when everything is set' do
         let(:cloud_name) { 'thebigone'}
         let(:cloud_domain) { 'elastic.co'}
diff --git a/x-pack/spec/license_checker/license_info_spec.rb b/x-pack/spec/license_checker/license_info_spec.rb
index 6c0a31e97da..8d2009bcfcf 100644
--- a/x-pack/spec/license_checker/license_info_spec.rb
+++ b/x-pack/spec/license_checker/license_info_spec.rb
@@ -9,6 +9,7 @@
 
 class Observer
   attr_reader :license
+
   def initialize
     @license = nil
   end
@@ -47,7 +48,6 @@ def update(license)
     }
   end
 
-
   let(:license) do
       {
           "status" => status,
@@ -87,7 +87,6 @@ def update(license)
     end
   end
 
-
   context "when the license type is valid" do
     context 'the license has expired' do
       let(:expiry_date) { Time.now - ONE_HOUR }
diff --git a/x-pack/spec/modules/arcsight/arcsight_module_config_helper_spec.rb b/x-pack/spec/modules/arcsight/arcsight_module_config_helper_spec.rb
index 4f84f97ac25..2d4d4549402 100644
--- a/x-pack/spec/modules/arcsight/arcsight_module_config_helper_spec.rb
+++ b/x-pack/spec/modules/arcsight/arcsight_module_config_helper_spec.rb
@@ -10,7 +10,6 @@
 require 'arcsight_module_config_helper'
 
 describe LogStash::Arcsight::ConfigHelper do
-
   let(:sample_yaml_folder) { ::File.join(File.dirname(__FILE__), "yaml") }
   let(:settings) { settings = LogStash::SETTINGS.clone }
   let(:module_name) { "arcsight" }
diff --git a/x-pack/spec/modules/azure/azure_module_config_generator_spec.rb b/x-pack/spec/modules/azure/azure_module_config_generator_spec.rb
index dc489050649..7bd3fb6d847 100644
--- a/x-pack/spec/modules/azure/azure_module_config_generator_spec.rb
+++ b/x-pack/spec/modules/azure/azure_module_config_generator_spec.rb
@@ -10,7 +10,6 @@
 require 'azure_module_config_generator'
 
 describe LogStash::Azure::ConfigGenerator do
-
   # always clone and work with the clone since settings are global and can bleed between tests
   let(:settings) {settings = LogStash::SETTINGS.clone}
 
@@ -140,7 +139,5 @@
       module_config = LogStash::Modules::LogStashConfig.new(scaffolding, module_hash)
       expect {module_config.config_string}.to raise_error(/'var.input.azure_event_hubs.event_hub_connections' must be set./)
     end
-
   end
-
 end
diff --git a/x-pack/spec/modules/azure/filters/azure_event_spec.rb b/x-pack/spec/modules/azure/filters/azure_event_spec.rb
index fa739118c06..fbdb12e2bd2 100644
--- a/x-pack/spec/modules/azure/filters/azure_event_spec.rb
+++ b/x-pack/spec/modules/azure/filters/azure_event_spec.rb
@@ -45,7 +45,6 @@
       expect(subject).not_to include("properties")
     end
 
-
     describe "with default" do
       let(:config) do
         <<-CONFIG
@@ -71,7 +70,6 @@
         expect(subject).not_to include("properties")
       end
 
-
       # as observed, missing the resource group, type, and name
       file = File.read(File.join(File.dirname(__FILE__), '../samples/activity_log/administrative3.json'))
       sample_one(LogStash::Json.load(file)) do
@@ -87,7 +85,6 @@
         expect(subject).not_to include("properties")
       end
     end
-
   end
 
   describe "Parses the service health activity log" do
@@ -212,7 +209,6 @@ def assert
       expect(subject).to include("activity_log_Autoscale_properties")
       expect(subject).not_to include("properties")
     end
-
   end
 
   describe "Parses the Alert activity log" do
@@ -256,7 +252,6 @@ def assert
       expect(subject).to include("activity_log_Alert_properties")
       expect(subject).not_to include("properties")
     end
-
   end
 
   describe "Parses database wait stats logs" do
@@ -289,9 +284,7 @@ def assert
       expect(subject.get("[azure][category]")).to eq("DatabaseWaitStatistics")
       expect(subject).to include("sql_diagnostics_DatabaseWaitStatistics_properties")
       expect(subject).not_to include("properties")
-
     end
-
   end
   describe "Parses database block logs" do
     let(:config) do
@@ -500,5 +493,4 @@ def assert
       expect(subject.get("[tags][0]")).to eq("_azure_event_failure")
     end
   end
-
 end
diff --git a/x-pack/spec/modules/module_license_checker_spec.rb b/x-pack/spec/modules/module_license_checker_spec.rb
index f9e6b35ffe4..55e1446a156 100644
--- a/x-pack/spec/modules/module_license_checker_spec.rb
+++ b/x-pack/spec/modules/module_license_checker_spec.rb
@@ -7,18 +7,14 @@
 require 'license_checker/x_pack_info'
 
 describe LogStash::LicenseChecker::ModuleLicenseChecker do
-
   let(:license_types) { LogStash::LicenseChecker::LICENSE_TYPES }
 
   let(:settings) { LogStash::Runner::SYSTEM_SETTINGS }
 
-
   shared_examples "can not get a license" do
-
     before(:each) {
       expect(subject).to receive(:license_reader).and_return(mock_reader)
       expect(mock_reader).to receive(:fetch_xpack_info).and_return(LogStash::LicenseChecker::XPackInfo.failed_to_fetch)
-
     }
     let(:mock_reader) {double("reader")}
 
@@ -113,5 +109,4 @@
     end
     include_examples "can not get a license"
   end
-
 end
diff --git a/x-pack/spec/monitoring/inputs/metrics/state_event_factory_spec.rb b/x-pack/spec/monitoring/inputs/metrics/state_event_factory_spec.rb
index 4a3ed5720b1..f79dcc8e095 100644
--- a/x-pack/spec/monitoring/inputs/metrics/state_event_factory_spec.rb
+++ b/x-pack/spec/monitoring/inputs/metrics/state_event_factory_spec.rb
@@ -9,7 +9,6 @@
 require 'json'
 
 describe LogStash::Inputs::Metrics::StateEventFactory do
-
   let(:schemas_path) { File.join(File.dirname(__FILE__), "..", "..", "..", "..", "spec", "monitoring", "schemas") }
 
   let(:config) {
diff --git a/x-pack/spec/monitoring/inputs/metrics_spec.rb b/x-pack/spec/monitoring/inputs/metrics_spec.rb
index 65d7aecd1e7..4f669cf4c2b 100644
--- a/x-pack/spec/monitoring/inputs/metrics_spec.rb
+++ b/x-pack/spec/monitoring/inputs/metrics_spec.rb
@@ -20,7 +20,6 @@
   let(:elasticsearch_username) { nil }
   let(:elasticsearch_password) { nil }
 
-
   subject(:metrics_input) { described_class.new(options) }
   let(:settings) do
     {
@@ -40,7 +39,6 @@
   end
 
   context "integration" do
-
     let(:schemas_path) { File.join(File.dirname(__FILE__), "..", "..", "..", "spec", "monitoring", "schemas") }
     let(:queue) { Concurrent::Array.new }
 
@@ -71,7 +69,6 @@ def state_events
     end
 
     context "with pipeline execution" do
-
       before :each do
         allow(metrics_input).to receive(:fetch_global_stats).and_return({"uuid" => "00001" })
         allow(metrics_input).to receive(:exec_timer_task)
diff --git a/x-pack/spec/monitoring/internal_pipeline_source_spec.rb b/x-pack/spec/monitoring/internal_pipeline_source_spec.rb
index 4a23e9f9c1d..2689f23a498 100644
--- a/x-pack/spec/monitoring/internal_pipeline_source_spec.rb
+++ b/x-pack/spec/monitoring/internal_pipeline_source_spec.rb
@@ -15,7 +15,6 @@
 require 'license_checker/x_pack_info'
 require 'monitoring/monitoring'
 
-
 describe LogStash::Monitoring::InternalPipelineSource do
   context 'license testing' do
     let(:xpack_monitoring_interval) { 1 }
diff --git a/x-pack/spec/monitoring/pipeline_register_hook_spec.rb b/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
index 7b71e053fac..98723413e81 100644
--- a/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
+++ b/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
@@ -5,7 +5,6 @@
 require 'monitoring/monitoring'
 
 describe LogStash::MonitoringExtension::PipelineRegisterHook do
-
   subject(:monitoring_extension) { described_class.new }
 
   let(:settings) {
