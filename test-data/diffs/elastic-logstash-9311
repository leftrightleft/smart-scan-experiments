diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
deleted file mode 100644
index 8a94389380d..00000000000
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
+++ /dev/null
@@ -1,289 +0,0 @@
-package org.logstash.ackedqueue.io.wip;
-
-import java.util.Collections;
-import org.logstash.ackedqueue.Checkpoint;
-import org.logstash.ackedqueue.SequencedList;
-import org.logstash.ackedqueue.io.LongVector;
-import org.logstash.common.io.BufferedChecksumStreamInput;
-import org.logstash.common.io.BufferedChecksumStreamOutput;
-import org.logstash.common.io.ByteArrayStreamOutput;
-import org.logstash.common.io.ByteBufferStreamInput;
-import org.logstash.ackedqueue.io.PageIO;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.List;
-
-public class MemoryPageIOStream implements PageIO {
-    static final int CHECKSUM_SIZE = Integer.BYTES;
-    static final int LENGTH_SIZE = Integer.BYTES;
-    static final int SEQNUM_SIZE = Long.BYTES;
-    static final int MIN_RECORD_SIZE = SEQNUM_SIZE + LENGTH_SIZE + CHECKSUM_SIZE;
-    static final int VERSION_SIZE = Integer.BYTES;
-
-    private final byte[] buffer;
-    private final int capacity;
-    private int writePosition;
-    private int readPosition;
-    private int elementCount;
-    private long minSeqNum;
-    private ByteBufferStreamInput streamedInput;
-    private ByteArrayStreamOutput streamedOutput;
-    private BufferedChecksumStreamOutput crcWrappedOutput;
-    private final List<Integer> offsetMap;
-    private String dirPath = "";
-    private String headerDetails = "";
-
-    public int persistedByteCount(byte[] data) {
-        return persistedByteCount(data.length);
-    }
-
-    @Override
-    public int persistedByteCount(int length) {
-        return MIN_RECORD_SIZE + length;
-    }
-
-    public MemoryPageIOStream(int pageNum, int capacity, String dirPath) throws IOException {
-        this(capacity, new byte[capacity]);
-        this.dirPath = dirPath;
-    }
-
-    public MemoryPageIOStream(int capacity, String dirPath) throws IOException {
-        this(capacity, new byte[capacity]);
-        this.dirPath = dirPath;
-    }
-
-    public MemoryPageIOStream(int capacity) throws IOException {
-        this(capacity, new byte[capacity]);
-    }
-
-    public MemoryPageIOStream(int capacity, byte[] initialBytes) throws IOException {
-        this.capacity = capacity;
-        if (initialBytes.length > capacity) {
-            throw new IOException("initial bytes greater than capacity");
-        }
-        buffer = initialBytes;
-        offsetMap = new ArrayList<>();
-        streamedInput = new ByteBufferStreamInput(ByteBuffer.wrap(buffer));
-        streamedOutput = new ByteArrayStreamOutput(buffer);
-        crcWrappedOutput = new BufferedChecksumStreamOutput(streamedOutput);
-    }
-
-    @Override
-    public void recover() throws IOException {
-        throw new UnsupportedOperationException("recover() is not supported");
-    }
-
-    @Override
-    public void open(long minSeqNum, int elementCount) throws IOException {
-        this.minSeqNum = minSeqNum;
-        this.elementCount = elementCount;
-        writePosition = verifyHeader();
-        readPosition = writePosition;
-        if (elementCount > 0) {
-            long seqNumRead;
-            BufferedChecksumStreamInput in = new BufferedChecksumStreamInput(streamedInput);
-            for (int i = 0; i < this.elementCount; i++) {
-                if (writePosition + SEQNUM_SIZE + LENGTH_SIZE > capacity) {
-                    throw new IOException(String.format("cannot read seqNum and length bytes past buffer capacity"));
-                }
-
-                seqNumRead = in.readLong();
-
-                //verify that the buffer starts with the min sequence number
-                if (i == 0 && seqNumRead != this.minSeqNum) {
-                    String msg = String.format("Page minSeqNum mismatch, expected: %d, actual: %d", this.minSeqNum, seqNumRead);
-                    throw new IOException(msg);
-                }
-
-                in.resetDigest();
-                byte[] bytes = in.readByteArray();
-                int actualChecksum = (int) in.getChecksum();
-                int expectedChecksum = in.readInt();
-
-                if (actualChecksum != expectedChecksum) {
-                    // explode with tragic error
-                }
-
-                offsetMap.add(writePosition);
-                writePosition += persistedByteCount(bytes);
-            }
-            setReadPoint(this.minSeqNum);
-        }
-    }
-
-    @Override
-    public void create() throws IOException {
-        writePosition = addHeader();
-        readPosition = writePosition;
-        this.minSeqNum = 1L;
-        this.elementCount = 0;
-    }
-
-    @Override
-    public boolean hasSpace(int byteSize) {
-        return this.capacity >= writePosition + persistedByteCount(byteSize);
-    }
-
-    @Override
-    public void write(byte[] bytes, long seqNum) throws IOException {
-        int pos = this.writePosition;
-        int writeLength = persistedByteCount(bytes);
-        writeToBuffer(seqNum, bytes, writeLength);
-        writePosition += writeLength;
-        assert writePosition == streamedOutput.getPosition() :
-                String.format("writePosition=%d != streamedOutput position=%d", writePosition, streamedOutput.getPosition());
-        if (elementCount <= 0) {
-            this.minSeqNum = seqNum;
-        }
-        this.offsetMap.add(pos);
-        elementCount++;
-    }
-
-    @Override
-    public SequencedList<byte[]> read(long seqNum, int limit) throws IOException {
-        if (elementCount == 0) {
-            return new SequencedList<>(Collections.emptyList(), new LongVector(0));
-        }
-        setReadPoint(seqNum);
-        return read(limit);
-    }
-
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-
-    @Override
-    public int getHead() {
-        return writePosition;
-    }
-
-    @Override
-    public void deactivate() {
-        // do nothing
-    }
-
-    @Override
-    public void activate() {
-        // do nothing
-    }
-
-    @Override
-    public void ensurePersisted() {
-        // do nothing
-    }
-
-    @Override
-    public void purge() throws IOException {
-        // do nothing
-    }
-
-    @Override
-    public void close() throws IOException {
-        // TBD
-    }
-
-    //@Override
-    public void setPageHeaderDetails(String details) {
-        headerDetails = details;
-    }
-
-    public int getWritePosition() {
-        return writePosition;
-    }
-
-    public int getElementCount() {
-        return elementCount;
-    }
-
-    public long getMinSeqNum() {
-        return minSeqNum;
-    }
-
-    // used in tests
-    public byte[] getBuffer() {
-        return buffer;
-    }
-
-    // used in tests
-    public String readHeaderDetails() throws IOException {
-        int tempPosition = readPosition;
-        streamedInput.movePosition(0);
-        int ver = streamedInput.readInt();
-        String details = new String(streamedInput.readByteArray());
-        streamedInput.movePosition(tempPosition);
-        return details;
-    }
-
-    private void setReadPoint(long seqNum) {
-        int readPosition = offsetMap.get(calcRelativeSeqNum(seqNum));
-        streamedInput.movePosition(readPosition);
-    }
-
-    private int calcRelativeSeqNum(long seqNum) {
-        return (int) (seqNum - minSeqNum);
-    }
-
-    private int addHeader() throws IOException {
-        streamedOutput.writeInt(Checkpoint.VERSION);
-        byte[] details = headerDetails.getBytes();
-        streamedOutput.writeByteArray(details);
-        return VERSION_SIZE + LENGTH_SIZE + details.length;
-    }
-
-    private int verifyHeader() throws IOException {
-        int ver = streamedInput.readInt();
-        if (ver != Checkpoint.VERSION) {
-            String msg = String.format("Page version mismatch, expecting: %d, this version: %d", Checkpoint.VERSION, ver);
-            throw new IOException(msg);
-        }
-        int len = streamedInput.readInt();
-        streamedInput.skip(len);
-        return VERSION_SIZE + LENGTH_SIZE + len;
-    }
-
-    private void writeToBuffer(long seqNum, byte[] data, int len) throws IOException {
-        streamedOutput.setWriteWindow(writePosition, len);
-        crcWrappedOutput.writeLong(seqNum);
-        crcWrappedOutput.resetDigest();
-        crcWrappedOutput.writeByteArray(data);
-        long checksum = crcWrappedOutput.getChecksum();
-        crcWrappedOutput.writeInt((int) checksum);
-        crcWrappedOutput.flush();
-        crcWrappedOutput.close();
-    }
-
-    private SequencedList<byte[]> read(int limit) throws IOException {
-        int upto = available(limit);
-        List<byte[]> elements = new ArrayList<>(upto);
-        final LongVector seqNums = new LongVector(upto);
-        for (int i = 0; i < upto; i++) {
-            long seqNum = readSeqNum();
-            byte[] data = readData();
-            skipChecksum();
-            elements.add(data);
-            seqNums.add(seqNum);
-        }
-        return new SequencedList<>(elements, seqNums);
-    }
-
-    private long readSeqNum() throws IOException {
-        return streamedInput.readLong();
-    }
-
-    private byte[] readData() throws IOException {
-        return streamedInput.readByteArray();
-    }
-
-    private void skipChecksum() {
-        streamedInput.skip(CHECKSUM_SIZE);
-    }
-
-    private int available(int sought) {
-        if (elementCount < 1) return 0;
-        if (elementCount < sought) return elementCount;
-        return sought;
-    }
-}
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStreamTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStreamTest.java
deleted file mode 100644
index 5e07a8a6d78..00000000000
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStreamTest.java
+++ /dev/null
@@ -1,187 +0,0 @@
-package org.logstash.ackedqueue.io.wip;
-
-import org.junit.Test;
-import org.logstash.ackedqueue.Queueable;
-import org.logstash.ackedqueue.SequencedList;
-import org.logstash.ackedqueue.StringElement;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-
-public class MemoryPageIOStreamTest {
-
-    private final int CAPACITY = 1024;
-    private final int EMPTY_HEADER_SIZE = Integer.BYTES + Integer.BYTES;
-
-    private byte[] empty_page_with_header() {
-        byte[] result = new byte[CAPACITY];
-        // version = 1, details = ABC
-        ByteBuffer.wrap(result).put(new byte[]{0, 0, 0, 1, 0, 0, 0, 3, 65, 66, 67});
-        return result;
-    }
-
-    private MemoryPageIOStream subject() throws IOException {
-        return subject(CAPACITY);
-    }
-
-    private MemoryPageIOStream subject(int size) throws IOException {
-        MemoryPageIOStream io = new MemoryPageIOStream(size);
-        io.create();
-        return io;
-    }
-
-    private MemoryPageIOStream subject(byte[] bytes, long seqNum, int count) throws IOException {
-        MemoryPageIOStream io = new MemoryPageIOStream(bytes.length, bytes);
-        io.open(seqNum, count);
-        return io;
-    }
-
-    private Queueable buildStringElement(String str) {
-        return new StringElement(str);
-    }
-
-    @Test
-    public void getWritePosition() throws Exception {
-        assertThat(subject().getWritePosition(), is(equalTo(EMPTY_HEADER_SIZE)));
-        assertThat(subject(empty_page_with_header(), 1L, 0).getWritePosition(), is(equalTo(EMPTY_HEADER_SIZE + 3)));
-    }
-
-    @Test
-    public void getElementCount() throws Exception {
-        assertThat(subject().getElementCount(), is(equalTo(0)));
-        assertThat(subject(empty_page_with_header(), 1L, 0).getElementCount(), is(equalTo(0)));
-    }
-
-    @Test
-    public void getStartSeqNum() throws Exception {
-        assertThat(subject().getMinSeqNum(), is(equalTo(1L)));
-        assertThat(subject(empty_page_with_header(), 1L, 0).getMinSeqNum(), is(equalTo(1L)));
-    }
-
-    @Test
-    public void readHeaderDetails() throws Exception {
-        MemoryPageIOStream io = new MemoryPageIOStream(CAPACITY);
-        io.setPageHeaderDetails("ABC");
-        io.create();
-        assertThat(io.readHeaderDetails(), is(equalTo("ABC")));
-        assertThat(io.getWritePosition(), is(equalTo(EMPTY_HEADER_SIZE + 3)));
-    }
-
-    @Test
-    public void hasSpace() throws Exception {
-        assertThat(subject().hasSpace(10), is(true));
-    }
-
-    @Test
-    public void write() throws Exception {
-        long seqNum = 42L;
-        Queueable element = new StringElement("foobarbaz");
-        MemoryPageIOStream subj = subject();
-        subj.write(element.serialize(), seqNum);
-        assertThat(subj.getElementCount(), is(equalTo(1)));
-        assertThat(subj.getMinSeqNum(), is(equalTo(seqNum)));
-    }
-
-    @Test
-    public void writeUntilFull() throws Exception {
-        long seqNum = 42L;
-        Queueable element = new StringElement("foobarbaz");
-        byte[] data = element.serialize();
-        int bufferSize = 120;
-        MemoryPageIOStream subj = subject(bufferSize);
-        while (subj.hasSpace(data.length)) {
-            subj.write(data, seqNum);
-            seqNum++;
-        }
-        int recordSize = subj.persistedByteCount(data.length);
-        int remains = bufferSize - subj.getWritePosition();
-        assertThat(recordSize, is(equalTo(25))); // element=9 + seqnum=8 + length=4 + crc=4
-        assertThat(subj.getElementCount(), is(equalTo(4)));
-        boolean noSpaceLeft = remains < recordSize;
-        assertThat(noSpaceLeft, is(true));
-    }
-
-    @Test
-    public void read() throws Exception {
-        MemoryPageIOStream subj = subject();
-        SequencedList<byte[]> result = subj.read(1L, 1);
-        assertThat(result.getElements().isEmpty(), is(true));
-    }
-
-    @Test
-    public void writeRead() throws Exception {
-        long seqNum = 42L;
-        Queueable element = buildStringElement("foobarbaz");
-        MemoryPageIOStream subj = subject();
-        subj.write(element.serialize(), seqNum);
-        SequencedList<byte[]> result = subj.read(seqNum, 1);
-        assertThat(result.getElements().size(), is(equalTo(1)));
-        Queueable readElement = StringElement.deserialize(result.getElements().get(0));
-        assertThat(result.getSeqNums().get(0), is(equalTo(seqNum)));
-        assertThat(readElement.toString(), is(equalTo(element.toString())));
-    }
-
-    @Test
-    public void writeReadEmptyElement() throws Exception {
-        long seqNum = 1L;
-        Queueable element = buildStringElement("");
-        MemoryPageIOStream subj = subject();
-        subj.write(element.serialize(), seqNum);
-        SequencedList<byte[]> result = subj.read(seqNum, 1);
-        assertThat(result.getElements().size(), is(equalTo(1)));
-        Queueable readElement = StringElement.deserialize(result.getElements().get(0));
-        assertThat(result.getSeqNums().get(0), is(equalTo(seqNum)));
-        assertThat(readElement.toString(), is(equalTo(element.toString())));
-    }
-
-    @Test
-    public void writeReadMulti() throws Exception {
-        Queueable element1 = buildStringElement("foo");
-        Queueable element2 = buildStringElement("bar");
-        Queueable element3 = buildStringElement("baz");
-        Queueable element4 = buildStringElement("quux");
-        MemoryPageIOStream subj = subject();
-        subj.write(element1.serialize(), 40L);
-        subj.write(element2.serialize(), 42L);
-        subj.write(element3.serialize(), 44L);
-        subj.write(element4.serialize(), 46L);
-        int batchSize = 11;
-        SequencedList<byte[]> result = subj.read(40L, batchSize);
-        assertThat(result.getElements().size(), is(equalTo(4)));
-
-        assertThat(result.getSeqNums().get(0), is(equalTo(40L)));
-        assertThat(result.getSeqNums().get(1), is(equalTo(42L)));
-        assertThat(result.getSeqNums().get(2), is(equalTo(44L)));
-        assertThat(result.getSeqNums().get(3), is(equalTo(46L)));
-
-        assertThat(StringElement.deserialize(result.getElements().get(0)).toString(), is(equalTo(element1.toString())));
-        assertThat(StringElement.deserialize(result.getElements().get(1)).toString(), is(equalTo(element2.toString())));
-        assertThat(StringElement.deserialize(result.getElements().get(2)).toString(), is(equalTo(element3.toString())));
-        assertThat(StringElement.deserialize(result.getElements().get(3)).toString(), is(equalTo(element4.toString())));
-    }
-
-    @Test
-    public void readFromFirstUnackedSeqNum() throws Exception {
-        long seqNum = 10L;
-        String[] values = new String[]{"aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj"};
-        MemoryPageIOStream stream = subject(300);
-        for (String val : values) {
-            Queueable element = buildStringElement(val);
-            stream.write(element.serialize(), seqNum);
-            seqNum++;
-        }
-        MemoryPageIOStream subj = subject(stream.getBuffer(), 10L, 10);
-        int batchSize = 3;
-        seqNum = 13L;
-        SequencedList<byte[]> result = subj.read(seqNum, batchSize);
-        for (int i = 0; i < 3; i++) {
-            Queueable ele = StringElement.deserialize(result.getElements().get(i));
-            assertThat(result.getSeqNums().get(i), is(equalTo(seqNum + i)));
-            assertThat(ele.toString(), is(equalTo(values[i + 3])));
-        }
-    }
-}
