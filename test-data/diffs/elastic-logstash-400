diff --git a/lib/logstash/inputs/rabbitmq.rb b/lib/logstash/inputs/rabbitmq.rb
index ade38c47424..ec916568741 100644
--- a/lib/logstash/inputs/rabbitmq.rb
+++ b/lib/logstash/inputs/rabbitmq.rb
@@ -82,6 +82,9 @@ class LogStash::Inputs::RabbitMQ < LogStash::Inputs::Threadable
   # Maximum permissible size of a frame (in bytes) to negotiate with clients
   config :frame_max, :validate => :number, :default => 131072
 
+  # Array of headers (in messages' metadata) to add to fields in the event
+  config :headers_fields, :validate => :array, :default => {}
+  
   public
   def initialize(params)
     super
@@ -135,12 +138,24 @@ def run(queue)
       @bunnyqueue = @bunny.queue(@queue, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive, :arguments => @arguments_hash })
       @bunnyqueue.bind(@exchange, :key => @key)
 
-      @bunnyqueue.subscribe({:ack => @ack}) do |data|
-        e = to_event(data[:payload], @rabbitmq_url)
-        if e
+      # need to get metadata from data
+      @bunnyqueue.subscribe({:ack => @ack, :block => true}) do |delivery_info, metadata, data|
+        
+        e = to_event(data, @rabbitmq_url)
+        if e          
+          if !@headers_fields.empty?
+            # constructing the hash array of headers to add
+            # select headers from properties if they are in the array @headers_fields
+            headers_add = metadata.headers.select {|k, v| @headers_fields.include?(k)}          
+            @logger.debug("Headers to insert in fields : ", :headers => headers_add)
+             
+            headers_add.each do |added_field, added_value|
+              e[added_field] = added_value              
+            end # headers_add.each do
+          end # if !@headers_fields.empty?
           queue << e
-        end
-      end # @bunnyqueue.subscribe
+        end # if e
+      end # @bunnyqueue.subscribe do
 
     rescue *[Bunny::ConnectionError, Bunny::ServerDownError] => e
       @logger.error("RabbitMQ connection error, will reconnect: #{e}")
diff --git a/lib/logstash/outputs/rabbitmq.rb b/lib/logstash/outputs/rabbitmq.rb
index 9c0355f77f3..c45aab6c72d 100644
--- a/lib/logstash/outputs/rabbitmq.rb
+++ b/lib/logstash/outputs/rabbitmq.rb
@@ -59,6 +59,9 @@ class LogStash::Outputs::RabbitMQ < LogStash::Outputs::Base
   # Maximum permissible size of a frame (in bytes) to negotiate with clients
   config :frame_max, :validate => :number, :default => 131072
 
+  # Array of fields to add to headers in messages' metadata
+  config :fields_headers, :validate => :array, :default => {}
+  
   public
   def register
     require "bunny"
@@ -112,6 +115,24 @@ def receive(event)
     @logger.debug("Sending event", :destination => to_s, :event => event,
                   :key => key)
     key = event.sprintf(@key) if @key
+    
+   
+    # Adding headers from fields' attribute
+    @headers_add = event.fields.select {|k, v| @fields_headers.include?(k)}
+    @logger.debug("Adding headers from Fields attributes : #{@headers_add.inspect}")
+            
+    # Adding headers from "original" attributes 
+    # Iteration on each field name specified in fields_headers
+    @fields_headers.each do |added_field|
+      # Verify if added_field is in the list of tags     
+      if event.include?(added_field)
+        @headers_add[added_field] = event[added_field]
+        @logger.debug("Adding native field #{added_field} to headers")
+      else
+        @logger.debug("Not Adding tag #{added_field} to headers because missing")
+      end # if event.include?(added_field)
+    end # :fields_headers.each do |added_field|
+    
     begin
       receive_raw(event.to_json, key)
     rescue JSON::GeneratorError => e
@@ -125,22 +146,30 @@ def receive(event)
   def receive_raw(message, key=@key)
     begin
       if @bunnyexchange
-        @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key }])
-        @bunnyexchange.publish(message, :persistent => @persistent, :key => key)
+        if @headers_add.empty?
+          #tags2headers is empty, so we send the message normally
+          @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key }])
+          @bunnyexchange.publish(message, :persistent => @persistent, :key => key)
+        else
+          #publishing messages WITH headers, that are stored in "headers_add"
+          @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key , :headers => @headers_add.inspect}])
+          @bunnyexchange.publish(message, :persistent => @persistent, :key => key, :headers => @headers_add)
+          
+        end # if @headers2headers.empty?
       else
         @logger.warn("Tried to send message, but not connected to rabbitmq yet.")
-      end
+      end  # if @bunnyexchange
     rescue *[Bunny::ServerDownError, Errno::ECONNRESET] => e
       @logger.error("RabbitMQ connection error (during publish), will reconnect: #{e}")
       connect
       retry
-    end
-  end
+    end # begin
+  end # def receive_raw
 
   public
   def to_s
     return "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@exchange}\##{@key}"
-  end
+  end # def to_s
 
   public
   def teardown
