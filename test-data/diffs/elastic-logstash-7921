diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 6a1614326f5..145d20507fb 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -284,7 +284,7 @@ public String toString() {
 
         try {
             // getTimestamp throws an IOException if there is no @timestamp field, see #7613
-            return getTimestamp().toIso8601() + " " + hostMessageString;
+            return getTimestamp().toString() + " " + hostMessageString;
         } catch (IOException e) {
             return hostMessageString;
         }
diff --git a/logstash-core/src/main/java/org/logstash/ObjectMappers.java b/logstash-core/src/main/java/org/logstash/ObjectMappers.java
index 65cd098ca86..4f96db322ae 100644
--- a/logstash-core/src/main/java/org/logstash/ObjectMappers.java
+++ b/logstash-core/src/main/java/org/logstash/ObjectMappers.java
@@ -13,16 +13,25 @@
 
 public final class ObjectMappers {
 
+    /**
+     * We are using {@link AfterburnerModule} to improve the performance serialization performance.
+     * It is important that it is registered after our custom serializers when setting up
+     * {@link ObjectMappers#JSON_MAPPER} and {@link ObjectMappers#CBOR_MAPPER} to prevent it from
+     * overriding them.
+     */
+    private static final AfterburnerModule AFTERBURNER_MODULE = new AfterburnerModule();
+
     private static final SimpleModule RUBY_STRING_SERIALIZER =
         new SimpleModule("RubyStringSerializer")
-            .addSerializer(RubyString.class, new RubyStringSerializer());
+            .addSerializer(RubyString.class, new RubyStringSerializer())
+            .addSerializer(Timestamp.class, new TimestampSerializer());
 
     public static final ObjectMapper JSON_MAPPER = new ObjectMapper()
-        .registerModule(new AfterburnerModule()).registerModule(RUBY_STRING_SERIALIZER);
+        .registerModule(RUBY_STRING_SERIALIZER).registerModule(AFTERBURNER_MODULE);
 
     public static final ObjectMapper CBOR_MAPPER = new ObjectMapper(
         new CBORFactory().configure(CBORGenerator.Feature.WRITE_MINIMAL_INTS, false)
-    ).registerModule(new AfterburnerModule()).registerModule(RUBY_STRING_SERIALIZER);
+    ).registerModule(RUBY_STRING_SERIALIZER).registerModule(AFTERBURNER_MODULE);
 
     private ObjectMappers() {
     }
@@ -46,4 +55,21 @@ public void serialize(final RubyString value, final JsonGenerator generator,
         }
 
     }
+
+    /**
+     * Serializer for {@link Timestamp} since Jackson can't handle that type natively, so we
+     * simply serialize it as if it were a {@link String} by formatting it according to ISO-8601.
+     */
+    private static final class TimestampSerializer extends NonTypedScalarSerializerBase<Timestamp> {
+
+        TimestampSerializer() {
+            super(Timestamp.class, true);
+        }
+
+        @Override
+        public void serialize(final Timestamp value, final JsonGenerator generator,
+            final SerializerProvider provider) throws IOException {
+            generator.writeString(value.toString());
+        }
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/Timestamp.java b/logstash-core/src/main/java/org/logstash/Timestamp.java
index c56a5e33f48..8e3c202552c 100644
--- a/logstash-core/src/main/java/org/logstash/Timestamp.java
+++ b/logstash-core/src/main/java/org/logstash/Timestamp.java
@@ -1,22 +1,17 @@
 package org.logstash;
 
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import java.util.Date;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
-import org.joda.time.Duration;
-import org.joda.time.LocalDateTime;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
 import org.logstash.ackedqueue.Queueable;
-import org.logstash.json.TimestampSerializer;
 
 /**
  * Wrapper around a {@link DateTime} with Logstash specific serialization behaviour.
  * This class is immutable and thread-safe since its only state is held in a final {@link DateTime}
  * reference and {@link DateTime} which itself is immutable and thread-safe.
  */
-@JsonSerialize(using = TimestampSerializer.class)
 public final class Timestamp implements Comparable<Timestamp>, Queueable {
 
     // all methods setting the time object must set it in the UTC timezone
@@ -24,8 +19,6 @@ public final class Timestamp implements Comparable<Timestamp>, Queueable {
 
     private static final DateTimeFormatter iso8601Formatter = ISODateTimeFormat.dateTime();
 
-    private static final LocalDateTime JAN_1_1970 = new LocalDateTime(1970, 1, 1, 0, 0);
-
     public Timestamp() {
         this.time = new DateTime(DateTimeZone.UTC);
     }
@@ -54,18 +47,14 @@ public static Timestamp now() {
         return new Timestamp();
     }
 
-    public String toIso8601() {
-        return iso8601Formatter.print(this.time);
-    }
-
     public String toString() {
-        return toIso8601();
+        return iso8601Formatter.print(time);
     }
 
     public long usec() {
         // JodaTime only supports milliseconds precision we can only return usec at millisec precision.
         // note that getMillis() return millis since epoch
-        return (new Duration(JAN_1_1970.toDateTime(DateTimeZone.UTC), this.time).getMillis() % 1000) * 1000;
+        return time.getMillis() % 1000L * 1000L;
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
index 58a58eaad93..06684b30661 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
@@ -144,7 +144,7 @@ public IRubyObject ruby_inspect(ThreadContext context)
         @JRubyMethod(name = "to_iso8601")
         public IRubyObject ruby_to_iso8601(ThreadContext context)
         {
-            return RubyString.newString(context.runtime, this.timestamp.toIso8601());
+            return RubyString.newString(context.runtime, this.timestamp.toString());
         }
 
         @JRubyMethod(name = "to_java")
@@ -156,7 +156,7 @@ public IRubyObject ruby_to_java(ThreadContext context)
         @JRubyMethod(name = "to_json", rest = true)
         public IRubyObject ruby_to_json(ThreadContext context, IRubyObject[] args)
         {
-            return RubyString.newString(context.runtime,  "\"" + this.timestamp.toIso8601() + "\"");
+            return RubyString.newString(context.runtime,  "\"" + this.timestamp.toString() + "\"");
         }
 
         @JRubyMethod(name = "coerce", required = 1, meta = true)
diff --git a/logstash-core/src/main/java/org/logstash/json/TimestampSerializer.java b/logstash-core/src/main/java/org/logstash/json/TimestampSerializer.java
deleted file mode 100644
index cc61e45c6e1..00000000000
--- a/logstash-core/src/main/java/org/logstash/json/TimestampSerializer.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.logstash.json;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import org.logstash.Timestamp;
-
-import java.io.IOException;
-
-public class TimestampSerializer extends JsonSerializer<Timestamp> {
-
-    @Override
-    public void serialize(Timestamp value, JsonGenerator jgen, SerializerProvider provider)
-            throws IOException
-    {
-        jgen.writeString(value.toIso8601());
-    }
-}
diff --git a/logstash-core/src/test/java/org/logstash/DLQEntryTest.java b/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
index 2ad35b4669b..f56dec1d75f 100644
--- a/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
+++ b/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
@@ -47,7 +47,7 @@ public void testSerDe() throws Exception {
         byte[] bytes = expected.serialize();
         DLQEntry actual = DLQEntry.deserialize(bytes);
         assertJsonEquals(actual.getEvent().toJson(), event.toJson());
-        assertThat(actual.getEntryTime().toIso8601(), equalTo(expected.getEntryTime().toIso8601()));
+        assertThat(actual.getEntryTime().toString(), equalTo(expected.getEntryTime().toString()));
         assertThat(actual.getPluginType(), equalTo("type"));
         assertThat(actual.getPluginId(), equalTo("id"));
         assertThat(actual.getReason(), equalTo("reason"));
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index f056777b29c..798a1bb5467 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -32,7 +32,7 @@ public void queueableInterfaceRoundTrip() throws Exception {
         assertEquals(42.42, er.getField("[baz][innerQuux]"));
         assertEquals(42L, er.getField("[@metadata][foo]"));
 
-        assertEquals(e.getTimestamp().toIso8601(), er.getTimestamp().toIso8601());
+        assertEquals(e.getTimestamp().toString(), er.getTimestamp().toString());
     }
 
     @Test
@@ -52,13 +52,13 @@ public void toBinaryRoundtrip() throws Exception {
         assertEquals(42.42, er.getField("[baz][innerQuux]"));
         assertEquals(42L, er.getField("[@metadata][foo]"));
 
-        assertEquals(e.getTimestamp().toIso8601(), er.getTimestamp().toIso8601());
+        assertEquals(e.getTimestamp().toString(), er.getTimestamp().toString());
     }
 
     @Test
     public void testBareToJson() throws Exception {
         Event e = new Event();
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -66,7 +66,7 @@ public void testSimpleStringFieldToJson() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("foo", "bar");
         Event e = new Event(data);
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":\"bar\",\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":\"bar\",\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -74,7 +74,7 @@ public void testSimpleIntegerFieldToJson() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("foo", 1);
         Event e = new Event(data);
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1,\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":1,\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -82,7 +82,7 @@ public void testSimpleDecimalFieldToJson() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("foo", 1.0);
         Event e = new Event(data);
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":1.0,\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -92,18 +92,18 @@ public void testSimpleMultipleFieldToJson() throws Exception {
         data.put("bar", "bar");
         data.put("baz", 1);
         Event e = new Event(data);
-        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", e.toJson());
+        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", e.toJson());
     }
 
     @Test
     public void testDeepMapFieldToJson() throws Exception {
         Event e = new Event();
         e.setField("[foo][bar][baz]", 1);
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"bar\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":{\"bar\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
 
         e = new Event();
         e.setField("[foo][0][baz]", 1);
-        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"0\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"foo\":{\"0\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -147,7 +147,7 @@ public void testClone() throws Exception {
 
         Event f = e.clone();
 
-        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"array\":[{\"foo\":\"bar\"}],\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", f.toJson());
+        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toString() + "\",\"array\":[{\"foo\":\"bar\"}],\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", f.toJson());
         assertJsonEquals(f.toJson(), e.toJson());
     }
 
@@ -219,7 +219,7 @@ public void testFromJsonWithValidJsonMap() throws Exception {
         Event e = Event.fromJson("{\"@timestamp\":\"2015-05-28T23:02:05.350Z\",\"foo\":\"bar\"}")[0];
 
         assertEquals("bar", e.getField("[foo]"));
-        assertEquals("2015-05-28T23:02:05.350Z", e.getTimestamp().toIso8601());
+        assertEquals("2015-05-28T23:02:05.350Z", e.getTimestamp().toString());
     }
 
     @Test
@@ -228,7 +228,7 @@ public void testFromJsonWithValidJsonArrayOfMap() throws Exception {
 
         assertEquals(1, l.length);
         assertEquals("bar", l[0].getField("[foo]"));
-        assertEquals("2015-05-28T23:02:05.350Z", l[0].getTimestamp().toIso8601());
+        assertEquals("2015-05-28T23:02:05.350Z", l[0].getTimestamp().toString());
 
         l = Event.fromJson("[{}]");
 
@@ -239,9 +239,9 @@ public void testFromJsonWithValidJsonArrayOfMap() throws Exception {
 
         assertEquals(2, l.length);
         assertEquals("bar", l[0].getField("[foo]"));
-        assertEquals("2015-05-28T23:02:05.350Z", l[0].getTimestamp().toIso8601());
+        assertEquals("2015-05-28T23:02:05.350Z", l[0].getTimestamp().toString());
         assertEquals("baz", l[1].getField("[foo]"));
-        assertEquals("2016-05-28T23:02:05.350Z", l[1].getTimestamp().toIso8601());
+        assertEquals("2016-05-28T23:02:05.350Z", l[1].getTimestamp().toString());
     }
 
     @Test(expected=IOException.class)
@@ -293,7 +293,7 @@ public void toStringwithTimestamp() throws Exception {
         data.put("host", "foo");
         data.put("message", "bar");
         Event e = new Event(data);
-        assertEquals(e.toString(), e.getTimestamp().toIso8601() + " foo bar");
+        assertEquals(e.toString(), e.getTimestamp().toString() + " foo bar");
     }
 
     @Test
diff --git a/logstash-core/src/test/java/org/logstash/TimestampTest.java b/logstash-core/src/test/java/org/logstash/TimestampTest.java
index 0207eeb0844..0d3b311f640 100644
--- a/logstash-core/src/test/java/org/logstash/TimestampTest.java
+++ b/logstash-core/src/test/java/org/logstash/TimestampTest.java
@@ -12,14 +12,14 @@ public class TimestampTest {
     @Test
     public void testCircularIso8601() throws Exception {
         Timestamp t1 = new Timestamp();
-        Timestamp t2 = new Timestamp(t1.toIso8601());
+        Timestamp t2 = new Timestamp(t1.toString());
         assertEquals(t1.getTime(), t2.getTime());
     }
 
     @Test
     public void testToIso8601() throws Exception {
         Timestamp t = new Timestamp("2014-09-23T00:00:00-0800");
-        assertEquals("2014-09-23T08:00:00.000Z", t.toIso8601());
+        assertEquals("2014-09-23T08:00:00.000Z", t.toString());
     }
 
     // Timestamp should always be in a UTC representation
diff --git a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
index c69a1f36a80..5764094d987 100644
--- a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
@@ -310,7 +310,7 @@ private void seekReadAndVerify(final Timestamp seekTarget, final String expected
             readManager.seekToNextEvent(seekTarget);
             DLQEntry readEntry = readManager.pollEntry(100);
             assertThat(readEntry.getReason(), equalTo(expectedValue));
-            assertThat(readEntry.getEntryTime().toIso8601(), equalTo(seekTarget.toIso8601()));
+            assertThat(readEntry.getEntryTime().toString(), equalTo(seekTarget.toString()));
         }
     }
 
