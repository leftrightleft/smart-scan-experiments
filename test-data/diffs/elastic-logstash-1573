diff --git a/lib/logstash/codecs/base.rb b/lib/logstash/codecs/base.rb
index e5041704d52..3af55f969ec 100644
--- a/lib/logstash/codecs/base.rb
+++ b/lib/logstash/codecs/base.rb
@@ -23,13 +23,14 @@ def decode(data)
   alias_method :<<, :decode
 
   public
-  def encode(data)
+  def encode(event)
     raise "#{self.class}#encode must be overidden"
   end # def encode
 
-  public 
+  public
   def teardown; end;
 
+  # @param block [Proc(event, data)] the callback proc passing the original event and the encoded event
   public
   def on_event(&block)
     @on_event = block
diff --git a/lib/logstash/codecs/dots.rb b/lib/logstash/codecs/dots.rb
index 471e60dfbea..77bc58dde06 100644
--- a/lib/logstash/codecs/dots.rb
+++ b/lib/logstash/codecs/dots.rb
@@ -11,8 +11,8 @@ def decode(data)
   end # def decode
 
   public
-  def encode(data)
-    @on_event.call(".")
+  def encode(event)
+    @on_event.call(event, ".")
   end # def encode
 
 end # class LogStash::Codecs::Dots
diff --git a/lib/logstash/codecs/edn.rb b/lib/logstash/codecs/edn.rb
index 449b7cec40c..9a2e13340d2 100644
--- a/lib/logstash/codecs/edn.rb
+++ b/lib/logstash/codecs/edn.rb
@@ -28,7 +28,7 @@ def encode(event)
     data = LogStash::Util.normalize(event.to_hash)
     # timestamp is serialized as a iso8601 string
     # merge to avoid modifying data which could have side effects if multiple outputs
-    @on_event.call(data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601).to_edn)
+    @on_event.call(event, data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601).to_edn)
   end
 
 end
diff --git a/lib/logstash/codecs/edn_lines.rb b/lib/logstash/codecs/edn_lines.rb
index 3c4a0a38b84..97137c6ea8f 100644
--- a/lib/logstash/codecs/edn_lines.rb
+++ b/lib/logstash/codecs/edn_lines.rb
@@ -36,7 +36,7 @@ def encode(event)
     data = LogStash::Util.normalize(event.to_hash)
     # timestamp is serialized as a iso8601 string
     # merge to avoid modifying data which could have side effects if multiple outputs
-    @on_event.call(data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601).to_edn + NL)
+    @on_event.call(event, data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601).to_edn + NL)
   end
 
 end
diff --git a/lib/logstash/codecs/fluent.rb b/lib/logstash/codecs/fluent.rb
index cbcaf3ebe46..54832f19508 100644
--- a/lib/logstash/codecs/fluent.rb
+++ b/lib/logstash/codecs/fluent.rb
@@ -57,7 +57,7 @@ def encode(event)
     data = LogStash::Util.normalize(event.to_hash)
     # timestamp is serialized as a iso8601 string
     # merge to avoid modifying data which could have side effects if multiple outputs
-    @on_event.call(MessagePack.pack([tag, epochtime, data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601)]))
+    @on_event.call(event, MessagePack.pack([tag, epochtime, data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601)]))
   end # def encode
 
 end # class LogStash::Codecs::Fluent
diff --git a/lib/logstash/codecs/graphite.rb b/lib/logstash/codecs/graphite.rb
index 4471df9aa59..8e465fd6ba5 100644
--- a/lib/logstash/codecs/graphite.rb
+++ b/lib/logstash/codecs/graphite.rb
@@ -96,7 +96,7 @@ def encode(event)
       message = messages.join(NL) + NL
       @logger.debug("Emiting carbon messages", :messages => messages)
 
-      @on_event.call(message)
+      @on_event.call(event, message)
     end # if messages.empty?
   end # def encode
 
diff --git a/lib/logstash/codecs/json.rb b/lib/logstash/codecs/json.rb
index 1ba0163f8d8..c9f8c27d6f1 100644
--- a/lib/logstash/codecs/json.rb
+++ b/lib/logstash/codecs/json.rb
@@ -42,7 +42,7 @@ def decode(data)
 
   public
   def encode(event)
-    @on_event.call(event.to_json)
+    @on_event.call(event, event.to_json)
   end # def encode
 
 end # class LogStash::Codecs::JSON
diff --git a/lib/logstash/codecs/json_lines.rb b/lib/logstash/codecs/json_lines.rb
index f319340f7f7..871798e64d3 100644
--- a/lib/logstash/codecs/json_lines.rb
+++ b/lib/logstash/codecs/json_lines.rb
@@ -47,7 +47,7 @@ def decode(data)
   def encode(event)
     # Tack on a \n for now because previously most of logstash's JSON
     # outputs emitted one per line, and whitespace is OK in json.
-    @on_event.call(event.to_json + NL)
+    @on_event.call(event, event.to_json + NL)
   end # def encode
 
 end # class LogStash::Codecs::JSON
diff --git a/lib/logstash/codecs/line.rb b/lib/logstash/codecs/line.rb
index 12107e569eb..0bd3e2d1d31 100644
--- a/lib/logstash/codecs/line.rb
+++ b/lib/logstash/codecs/line.rb
@@ -49,9 +49,9 @@ def flush(&block)
   public
   def encode(event)
     if event.is_a? LogStash::Event and @format
-      @on_event.call(event.sprintf(@format) + NL)
+      @on_event.call(event, event.sprintf(@format) + NL)
     else
-      @on_event.call(event.to_s + NL)
+      @on_event.call(event, event.to_s + NL)
     end
   end # def encode
 
diff --git a/lib/logstash/codecs/msgpack.rb b/lib/logstash/codecs/msgpack.rb
index b2f45e28a7f..64ef524c1f9 100644
--- a/lib/logstash/codecs/msgpack.rb
+++ b/lib/logstash/codecs/msgpack.rb
@@ -42,7 +42,7 @@ def encode(event)
     data = LogStash::Util.normalize(event.to_hash)
     # timestamp is serialized as a iso8601 string
     # merge to avoid modifying data which could have side effects if multiple outputs
-    @on_event.call(MessagePack.pack(data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601)))
+    @on_event.call(event, MessagePack.pack(data.merge(LogStash::Event::TIMESTAMP => event.timestamp.to_iso8601)))
   end # def encode
 
 end # class LogStash::Codecs::Msgpack
diff --git a/lib/logstash/codecs/multiline.rb b/lib/logstash/codecs/multiline.rb
index 4815ffa960f..16d654392e1 100644
--- a/lib/logstash/codecs/multiline.rb
+++ b/lib/logstash/codecs/multiline.rb
@@ -188,7 +188,7 @@ def do_previous(text, matched, &block)
   public
   def encode(event)
     # Nothing to do.
-    @on_event.call(event)
+    @on_event.call(event, event)
   end # def encode
 
 end # class LogStash::Codecs::Plain
diff --git a/lib/logstash/codecs/noop.rb b/lib/logstash/codecs/noop.rb
index ed74a685f2d..c21412f57ab 100644
--- a/lib/logstash/codecs/noop.rb
+++ b/lib/logstash/codecs/noop.rb
@@ -13,7 +13,7 @@ def decode(data)
 
   public
   def encode(event)
-    @on_event.call event
+    @on_event.call(event, event)
   end # def encode
 
 end # class LogStash::Codecs::Noop
diff --git a/lib/logstash/codecs/oldlogstashjson.rb b/lib/logstash/codecs/oldlogstashjson.rb
index 0cd5ce74973..31f16b85a80 100644
--- a/lib/logstash/codecs/oldlogstashjson.rb
+++ b/lib/logstash/codecs/oldlogstashjson.rb
@@ -51,7 +51,7 @@ def encode(event)
     end
 
     # Tack on a \n because JSON outputs 1.1.x had them.
-    @on_event.call(LogStash::Json.dump(h) + NL)
+    @on_event.call(event, LogStash::Json.dump(h) + NL)
   end # def encode
 
 end # class LogStash::Codecs::OldLogStashJSON
diff --git a/lib/logstash/codecs/plain.rb b/lib/logstash/codecs/plain.rb
index 5fe86aacd28..afde796898d 100644
--- a/lib/logstash/codecs/plain.rb
+++ b/lib/logstash/codecs/plain.rb
@@ -39,9 +39,9 @@ def decode(data)
   public
   def encode(event)
     if event.is_a?(LogStash::Event) and @format
-      @on_event.call(event.sprintf(@format))
+      @on_event.call(event, event.sprintf(@format))
     else
-      @on_event.call(event.to_s)
+      @on_event.call(event, event.to_s)
     end
   end # def encode
 
diff --git a/lib/logstash/codecs/rubydebug.rb b/lib/logstash/codecs/rubydebug.rb
index fa53a5ec6a4..3a901823dd4 100644
--- a/lib/logstash/codecs/rubydebug.rb
+++ b/lib/logstash/codecs/rubydebug.rb
@@ -19,7 +19,7 @@ def decode(data)
 
   public
   def encode(event)
-    @on_event.call(event.to_hash.awesome_inspect + NL)
+    @on_event.call(event, event.to_hash.awesome_inspect + NL)
   end # def encode
 
 end # class LogStash::Codecs::Dots
diff --git a/lib/logstash/outputs/lumberjack.rb b/lib/logstash/outputs/lumberjack.rb
index 4e92c6a0d82..a5c1efcadc4 100644
--- a/lib/logstash/outputs/lumberjack.rb
+++ b/lib/logstash/outputs/lumberjack.rb
@@ -21,7 +21,7 @@ def register
     require 'lumberjack/client'
     connect
 
-    @codec.on_event do |payload|
+    @codec.on_event do |event, payload|
       begin
         @client.write({ 'line' => payload })
       rescue Exception => e
@@ -42,18 +42,18 @@ def receive(event)
     @codec.encode(event)
   end # def receive
 
-  private 
+  private
   def connect
     require 'resolv'
-    @logger.info("Connecting to lumberjack server.", :addresses => @hosts, :port => @port, 
+    @logger.info("Connecting to lumberjack server.", :addresses => @hosts, :port => @port,
         :ssl_certificate => @ssl_certificate, :window_size => @window_size)
     begin
       ips = []
       @hosts.each { |host| ips += Resolv.getaddresses host }
-      @client = Lumberjack::Client.new(:addresses => ips.uniq, :port => @port, 
+      @client = Lumberjack::Client.new(:addresses => ips.uniq, :port => @port,
         :ssl_certificate => @ssl_certificate, :window_size => @window_size)
     rescue Exception => e
-      @logger.error("All hosts unavailable, sleeping", :hosts => ips.uniq, :e => e, 
+      @logger.error("All hosts unavailable, sleeping", :hosts => ips.uniq, :e => e,
         :backtrace => e.backtrace)
       sleep(10)
       retry
diff --git a/lib/logstash/outputs/rabbitmq/march_hare.rb b/lib/logstash/outputs/rabbitmq/march_hare.rb
index cdee3cf4bd9..84bc62e50c4 100644
--- a/lib/logstash/outputs/rabbitmq/march_hare.rb
+++ b/lib/logstash/outputs/rabbitmq/march_hare.rb
@@ -16,7 +16,7 @@ def register
       @connected = java.util.concurrent.atomic.AtomicBoolean.new
 
       connect
-      declare_exchange
+      @x = declare_exchange
 
       @connected.set(true)
 
@@ -29,18 +29,15 @@ def receive(event)
 
       begin
         @codec.encode(event)
-      rescue JSON::GeneratorError => e
-        @logger.warn("Trouble converting event to JSON", :exception => e,
-                     :event => event)
+      rescue => e
+        @logger.warn("Error encoding event", :exception => e, :event => event)
       end
     end
 
-    def publish_serialized(message)
+    def publish_serialized(event, message)
       begin
         if @connected.get
-          @x.publish(message, :routing_key => @key, :properties => {
-            :persistent => @persistent
-          })
+          @x.publish(message, :routing_key => event.sprintf(@key), :properties => { :persistent => @persistent })
         else
           @logger.warn("Tried to send a message, but not connected to RabbitMQ.")
         end
@@ -131,12 +128,12 @@ def connect
     def declare_exchange
       @logger.debug("Declaring an exchange", :name => @exchange, :type => @exchange_type,
                     :durable => @durable)
-      @x = @ch.exchange(@exchange, :type => @exchange_type.to_sym, :durable => @durable)
+      x = @ch.exchange(@exchange, :type => @exchange_type.to_sym, :durable => @durable)
 
       # sets @connected to true during recovery. MK.
       @connected.set(true)
 
-      @x
+      x
     end
 
   end # MarchHareImpl
diff --git a/lib/logstash/outputs/stdout.rb b/lib/logstash/outputs/stdout.rb
index 76c71426722..370af785eaf 100644
--- a/lib/logstash/outputs/stdout.rb
+++ b/lib/logstash/outputs/stdout.rb
@@ -9,12 +9,12 @@
 #
 # For example, the following output configuration, in conjunction with the
 # Logstash `-e` command-line flag, will allow you to see the results
-# of your event pipeline for quick iteration. 
-# 
+# of your event pipeline for quick iteration.
+#
 #     output {
 #       stdout {}
 #     }
-# 
+#
 # Useful codecs include:
 #
 # `rubydebug`: outputs event data using the ruby "awesome_print"
@@ -38,13 +38,13 @@ class LogStash::Outputs::Stdout < LogStash::Outputs::Base
 
   config_name "stdout"
   milestone 3
-  
+
   default :codec, "line"
 
   public
   def register
-    @codec.on_event do |event|
-      $stdout.write(event)
+    @codec.on_event do |event, data|
+      $stdout.write(data)
     end
   end
 
diff --git a/lib/logstash/outputs/tcp.rb b/lib/logstash/outputs/tcp.rb
index 5176de967b0..61f155c8cf8 100644
--- a/lib/logstash/outputs/tcp.rb
+++ b/lib/logstash/outputs/tcp.rb
@@ -23,7 +23,7 @@ class LogStash::Outputs::Tcp < LogStash::Outputs::Base
   # When mode is `server`, the port to listen on.
   # When mode is `client`, the port to connect to.
   config :port, :validate => :number, :required => true
-  
+
   # When connect failed,retry interval in sec.
   config :reconnect_interval, :validate => :number, :default => 10
 
@@ -87,7 +87,7 @@ def register
         end
       end
 
-      @codec.on_event do |payload|
+      @codec.on_event do |event, payload|
         @client_threads.each do |client_thread|
           client_thread[:client].write(payload)
         end
@@ -95,7 +95,7 @@ def register
       end
     else
       client_socket = nil
-      @codec.on_event do |payload|
+      @codec.on_event do |event, payload|
         begin
           client_socket = connect unless client_socket
           r,w,e = IO.select([client_socket], [client_socket], [client_socket], nil)
@@ -139,7 +139,7 @@ def receive(event)
     #else
       #output = event.to_hash.to_json + "\n"
     #end
-    
+
     @codec.encode(event)
   end # def receive
 end # class LogStash::Outputs::Tcp
diff --git a/lib/logstash/outputs/udp.rb b/lib/logstash/outputs/udp.rb
index 1469017e647..8272a6234ed 100644
--- a/lib/logstash/outputs/udp.rb
+++ b/lib/logstash/outputs/udp.rb
@@ -9,7 +9,7 @@
 class LogStash::Outputs::UDP < LogStash::Outputs::Base
   config_name "udp"
   milestone 1
-  
+
   default :codec, "json"
 
   # The address to send messages to
@@ -21,7 +21,7 @@ class LogStash::Outputs::UDP < LogStash::Outputs::Base
   public
   def register
     @socket = UDPSocket.new
-    @codec.on_event do |payload|
+    @codec.on_event do |event, payload|
       @socket.send(payload, 0, @host, @port)
     end
   end
diff --git a/lib/logstash/outputs/zeromq.rb b/lib/logstash/outputs/zeromq.rb
index c4b088fc236..7cc34df2ac7 100644
--- a/lib/logstash/outputs/zeromq.rb
+++ b/lib/logstash/outputs/zeromq.rb
@@ -110,7 +110,7 @@ def receive(event)
     @codec.encode(event)
   end # def receive
 
-  def publish(payload)
+  def publish(event, payload)
     @logger.debug? && @logger.debug("0mq: sending", :event => payload)
     if @topology == "pubsub"
       # TODO(sissel): Need to figure out how to fit this into the codecs system.
diff --git a/spec/codecs/edn.rb b/spec/codecs/edn.rb
index 5fa49e58151..9f8ba78fbd7 100644
--- a/spec/codecs/edn.rb
+++ b/spec/codecs/edn.rb
@@ -27,7 +27,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}, "@timestamp" => "2014-05-30T02:52:17.929Z"}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { EDN.read(d)["foo"] } == data["foo"]
         insist { EDN.read(d)["baz"] } == data["baz"]
         insist { EDN.read(d)["bah"] } == data["bah"]
@@ -45,7 +45,7 @@
       data = LogStash::Json.load('{"foo": "bar", "baz": {"bah": ["a","b","c"]}, "@timestamp": "2014-05-30T02:52:17.929Z"}')
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { EDN.read(d)["foo"] } == data["foo"]
         insist { EDN.read(d)["baz"] } == data["baz"]
         insist { EDN.read(d)["bah"] } == data["bah"]
diff --git a/spec/codecs/edn_lines.rb b/spec/codecs/edn_lines.rb
index 79a25ba84a2..f278ec50d4d 100644
--- a/spec/codecs/edn_lines.rb
+++ b/spec/codecs/edn_lines.rb
@@ -41,7 +41,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}, "@timestamp" => "2014-05-30T02:52:17.929Z"}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { EDN.read(d)["foo"] } == data["foo"]
         insist { EDN.read(d)["baz"] } == data["baz"]
         insist { EDN.read(d)["bah"] } == data["bah"]
@@ -57,7 +57,7 @@
       data = LogStash::Json.load('{"foo": "bar", "baz": {"bah": ["a","b","c"]}, "@timestamp": "2014-05-30T02:52:17.929Z"}')
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { EDN.read(d)["foo"] } == data["foo"]
         insist { EDN.read(d)["baz"] } == data["baz"]
         insist { EDN.read(d)["bah"] } == data["bah"]
diff --git a/spec/codecs/graphite.rb b/spec/codecs/graphite.rb
index 8be9ef0af00..23375767643 100644
--- a/spec/codecs/graphite.rb
+++ b/spec/codecs/graphite.rb
@@ -57,9 +57,9 @@
       value = Random.rand*1000
       timestamp = Time.now.gmtime
       subject.metrics = {name => value}
-      subject.on_event do |event|
-        insist { event.is_a? String }
-        insist { event } == "#{name} #{value} #{timestamp.to_i}\n"
+      subject.on_event do |event, data|
+        insist { data.is_a? String }
+        insist { data } == "#{name} #{value} #{timestamp.to_i}\n"
       end
       subject.encode(LogStash::Event.new("@timestamp" => timestamp))
     end
@@ -69,9 +69,9 @@
       value = Random.rand*1000
       timestamp = Time.now.gmtime
       subject.fields_are_metrics = true
-      subject.on_event do |event|
-        insist { event.is_a? String }
-        insist { event } == "#{name} #{value} #{timestamp.to_i}\n"
+      subject.on_event do |event, data|
+        insist { data.is_a? String }
+        insist { data } == "#{name} #{value} #{timestamp.to_i}\n"
       end
       subject.encode(LogStash::Event.new({name => value, "@timestamp" => timestamp}))
 
@@ -86,9 +86,9 @@
       timestamp = Time.now.gmtime
       subject.metrics = {name => value}
       subject.metrics_format = "foo.bar.*.baz"
-      subject.on_event do |event|
-        insist { event.is_a? String }
-        insist { event } == "foo.bar.#{name}.baz #{value} #{timestamp.to_i}\n"
+      subject.on_event do |event, data|
+        insist { data.is_a? String }
+        insist { data } == "foo.bar.#{name}.baz #{value} #{timestamp.to_i}\n"
       end
       subject.encode(LogStash::Event.new("@timestamp" => timestamp))
     end
diff --git a/spec/codecs/json.rb b/spec/codecs/json.rb
index 4cb128534c8..5c8c09a0bd1 100644
--- a/spec/codecs/json.rb
+++ b/spec/codecs/json.rb
@@ -69,7 +69,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { d.chomp } == LogStash::Event.new(data).to_json
         insist { LogStash::Json.load(d)["foo"] } == data["foo"]
         insist { LogStash::Json.load(d)["baz"] } == data["baz"]
diff --git a/spec/codecs/json_lines.rb b/spec/codecs/json_lines.rb
index 630e3fa7b6b..afb29665257 100644
--- a/spec/codecs/json_lines.rb
+++ b/spec/codecs/json_lines.rb
@@ -64,7 +64,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { d } == "#{LogStash::Event.new(data).to_json}\n"
         insist { LogStash::Json.load(d)["foo"] } == data["foo"]
         insist { LogStash::Json.load(d)["baz"] } == data["baz"]
diff --git a/spec/codecs/json_spooler.rb b/spec/codecs/json_spooler.rb
index 20aef79b596..31ea7a3b57b 100644
--- a/spec/codecs/json_spooler.rb
+++ b/spec/codecs/json_spooler.rb
@@ -28,7 +28,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
       subject.spool_size = 3
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |event, d|
         events = LogStash::Json.load(d)
         insist { events.is_a? Array }
         insist { events[0].is_a? LogStash::Event }
diff --git a/spec/codecs/line.rb b/spec/codecs/line.rb
index e53a128b88b..f20af24585f 100644
--- a/spec/codecs/line.rb
+++ b/spec/codecs/line.rb
@@ -13,7 +13,7 @@
 
     it "should return a default date formatted line" do
       expect(subject).to receive(:on_event).once.and_call_original
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist {d} == event.to_s + "\n"
       end
       subject.encode(event)
@@ -23,7 +23,7 @@
       format = "%{host}"
       subject.format = format
       expect(subject).to receive(:on_event).once.and_call_original
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist {d} == event.sprintf(format) + "\n"
       end
       subject.encode(event)
diff --git a/spec/codecs/msgpack.rb b/spec/codecs/msgpack.rb
index ba0c451bd14..2a931879157 100644
--- a/spec/codecs/msgpack.rb
+++ b/spec/codecs/msgpack.rb
@@ -25,7 +25,7 @@
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}, "@timestamp" => "2014-05-30T02:52:17.929Z"}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { MessagePack.unpack(d)["foo"] } == data["foo"]
         insist { MessagePack.unpack(d)["baz"] } == data["baz"]
         insist { MessagePack.unpack(d)["bah"] } == data["bah"]
@@ -41,7 +41,7 @@
       data = LogStash::Json.load('{"foo": "bar", "baz": {"bah": ["a","b","c"]}, "@timestamp": "2014-05-30T02:52:17.929Z"}')
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { MessagePack.unpack(d)["foo"] } == data["foo"]
         insist { MessagePack.unpack(d)["baz"] } == data["baz"]
         insist { MessagePack.unpack(d)["bah"] } == data["bah"]
diff --git a/spec/codecs/oldlogstashjson.rb b/spec/codecs/oldlogstashjson.rb
index 3bb037b1a3b..5a9c09e6dba 100644
--- a/spec/codecs/oldlogstashjson.rb
+++ b/spec/codecs/oldlogstashjson.rb
@@ -38,7 +38,7 @@
               "bah" => "baz"}
       event = LogStash::Event.new(data)
       got_event = false
-      subject.on_event do |d|
+      subject.on_event do |e, d|
         insist { LogStash::Json.load(d)["@timestamp"] } != nil
         insist { LogStash::Json.load(d)["@type"] } == data["type"]
         insist { LogStash::Json.load(d)["@message"] } == data["message"]
diff --git a/spec/codecs/plain.rb b/spec/codecs/plain.rb
index c7b555585a1..bba5bd83509 100644
--- a/spec/codecs/plain.rb
+++ b/spec/codecs/plain.rb
@@ -87,7 +87,7 @@
     it "should return a plain text encoding" do
       event = LogStash::Event.new
       event["message"] = "Hello World."
-      subject.on_event do |data|
+      subject.on_event do |e, data|
         insist { data } == event.to_s
       end
       subject.encode(event)
@@ -97,7 +97,7 @@
       format = "%{[hello]} %{[something][fancy]}"
       codec = LogStash::Codecs::Plain.new("format" => format)
       event = LogStash::Event.new("hello" => "world", "something" => { "fancy" => 123 })
-      codec.on_event do |data|
+      codec.on_event do |e, data|
         insist { data } == event.sprintf(format)
       end
       codec.encode(event)
diff --git a/spec/codecs/spool.rb b/spec/codecs/spool.rb
index 5bdd6ee856b..de32620df83 100644
--- a/spec/codecs/spool.rb
+++ b/spec/codecs/spool.rb
@@ -23,7 +23,7 @@
       spool_size = Random.rand(10)
       subject.spool_size = spool_size
       got_event = false
-      subject.on_event do |data|
+      subject.on_event do |event, data|
         got_event = true
       end
       spool_size.times do
diff --git a/spec/outputs/rabbitmq.rb b/spec/outputs/rabbitmq.rb
new file mode 100644
index 00000000000..2619ec055e6
--- /dev/null
+++ b/spec/outputs/rabbitmq.rb
@@ -0,0 +1,72 @@
+require "test_utils"
+require "logstash/pipeline"
+require "logstash/outputs/rabbitmq"
+
+describe LogStash::Outputs::RabbitMQ do
+  extend LogStash::RSpec
+
+  describe "rabbitmq static key" do
+    config <<-END
+      input {
+        generator {
+          count => 1
+        }
+      }
+      output {
+        rabbitmq {
+          host => "localhost"
+          exchange_type => "topic"
+          exchange => "foo"
+          key => "bar"
+        }
+      }
+    END
+
+    it "should use defined key" do
+      exchange = double("exchange")
+      expect_any_instance_of(LogStash::Outputs::RabbitMQ).to receive(:connect).and_return(nil)
+      expect_any_instance_of(LogStash::Outputs::RabbitMQ).to receive(:declare_exchange).and_return(exchange)
+
+      expect(exchange).to receive(:publish).with(an_instance_of(String), {:routing_key => "bar", :properties => {:persistent => true}})
+
+      # we need to set expectations before running the pipeline, this is why we cannot use the
+      # "agent" spec construct here so we do it manually
+      pipeline = LogStash::Pipeline.new(config)
+      pipeline.run
+    end
+
+  end
+
+  describe "rabbitmq key with dynamic field" do
+    config <<-END
+      input {
+        generator {
+          count => 1
+          add_field => ["foo", "bar"]
+        }
+      }
+      output {
+        rabbitmq {
+          host => "localhost"
+          exchange_type => "topic"
+          exchange => "foo"
+          key => "%{foo}"
+        }
+      }
+    END
+
+    it "should populate the key with the content of the event foo field" do
+      exchange = double("exchange")
+      expect_any_instance_of(LogStash::Outputs::RabbitMQ).to receive(:connect).and_return(nil)
+      expect_any_instance_of(LogStash::Outputs::RabbitMQ).to receive(:declare_exchange).and_return(exchange)
+
+      expect(exchange).to receive(:publish).with(an_instance_of(String), {:routing_key => "bar", :properties => {:persistent => true}})
+
+      # we need to set expectations before running the pipeline, this is why we cannot use the
+      # "agent" spec construct here so we do it manually
+      pipeline = LogStash::Pipeline.new(config)
+      pipeline.run
+    end
+
+  end
+end
