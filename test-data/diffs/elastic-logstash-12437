diff --git a/tools/benchmark-cli/README.md b/tools/benchmark-cli/README.md
index d9d012e0a6b..e2c2edd5ed9 100644
--- a/tools/benchmark-cli/README.md
+++ b/tools/benchmark-cli/README.md
@@ -14,33 +14,38 @@ which will create the output jar under `build/libs/benchmark-cli.jar`.
 
 ```bash
 $ java -cp 'benchmark-cli.jar:*' org.logstash.benchmark.cli.Main --help
-Option                           Description                                    
-------                           -----------                                    
---distribution-version <String>  The version of a Logstash build to download    
-                                   from elastic.co.                             
---elasticsearch-export <String>  Optional Elasticsearch host URL to store       
-                                   detailed results at. (default: )                       
---git-hash <String>              Either a git tree (tag/branch or commit hash), 
-                                   optionally prefixed by a Github username,    
-                                 if ran against forks.                          
-                                 E.g.                                           
-                                   'ab1cfe8cf7e20114df58bcc6c996abcb2b0650d7',  
-                                 'user-                                         
+Option                           Description
+------                           -----------
+--config <File>                  Path to custom logstash config. Required if
+                                   testcase is set to 'custom'
+--data <File>                    Path to custom logstash data. Only if testcase
+                                   is set to 'custom'
+--distribution-version <String>  The version of a Logstash build to download
+                                   from elastic.co.
+--elasticsearch-export <String>  Optional Elasticsearch host URL to store
+                                   detailed results at. (default: )
+--git-hash <String>              Either a git tree (tag/branch or commit hash),
+                                   optionally prefixed by a Github username,
+                                 if ran against forks.
+                                 E.g.
+                                   'ab1cfe8cf7e20114df58bcc6c996abcb2b0650d7',
+                                 'user-
                                    name#ab1cfe8cf7e20114df58bcc6c996abcb2b0650d7'
-                                   or 'master'                                  
---local-path <String>            Path to the root of a local Logstash           
-                                   distribution.                                
-                                  E.g. `/opt/logstash`                          
---ls-batch-size <Integer>        Logstash batch size (-b argument) to           
-                                   configure. (default: 128)                    
---ls-workers <Integer>           Number of Logstash worker threads (-w          
-                                   argument) to configure. (default: 2)         
---repeat-data <Integer>          Sets how often the test's dataset should be    
-                                   run. (default: 1)                            
---testcase <String>              Currently available test cases are 'baseline'  
-                                   and 'apache'. (default: baseline)            
---workdir <File>                 Working directory to store cached files in.    
-                                   (default: ~/.logstash-benchmarks)  
+                                   or 'master'
+--local-path <String>            Path to the root of a local Logstash
+                                   distribution.
+                                  E.g. `/opt/logstash`
+--ls-batch-size <Integer>        Logstash batch size (-b argument) to
+                                   configure. (default: 128)
+--ls-workers <Integer>           Number of Logstash worker threads (-w
+                                   argument) to configure. (default: 2)
+--repeat-data <Integer>          Sets how often the test's dataset should be
+                                   run. (default: 1)
+--testcase <String>              Currently available test cases are 'baseline',
+                                   'apache' and 'custom'. (default: baseline)
+--workdir <File>                 Working directory to store cached files in.
+                                   (default: /Users/d059176/.logstash-
+                                   benchmarks) 
 ```
 
 ##### Example
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
index fb00107ea37..edc8886d161 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
@@ -35,6 +35,8 @@ public final class BenchmarkMeta {
 
     private final Path configpath;
 
+    private final Path datapath;
+
     private final String version;
 
     private final LsVersionType vtype;
@@ -43,10 +45,11 @@ public final class BenchmarkMeta {
 
     private final int batchsize;
 
-    BenchmarkMeta(final String testcase, final Path configpath, final String version, final LsVersionType vtype,
+    BenchmarkMeta(final String testcase, final Path configpath, final Path datapath, final String version, final LsVersionType vtype,
                   final int workers, final int batchsize) {
         this.testcase = testcase;
         this.configpath = configpath;
+        this.datapath = datapath;
         this.version = version;
         this.vtype = vtype;
         this.workers = workers;
@@ -62,7 +65,13 @@ public String getTestcase() {
         return testcase;
     }
 
-    public Path getConfigPath() { return configpath; }
+    public Path getConfigPath() { 
+        return configpath; 
+    }
+
+    public Path getDataPath() { 
+        return datapath; 
+    }
 
     public LsVersionType getVtype() {
         return vtype;
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
index a61085ae750..63f961ee22d 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
@@ -91,6 +91,9 @@ public static void main(final String... args) throws IOException, NoSuchAlgorith
         final OptionSpec<File> testcaseconfig = parser.accepts(
                 UserInput.TEST_CASE_CONFIG_PARAM, UserInput.TEST_CASE_CONFIG_HELP
         ).withRequiredArg().ofType(File.class).forHelp();
+        final OptionSpec<File> testcasedata = parser.accepts(
+            UserInput.TEST_CASE_DATA_PARAM, UserInput.TEST_CASE_DATA_HELP
+            ).withRequiredArg().ofType(File.class).forHelp();
         final OptionSpec<File> pwd = parser.accepts(
             UserInput.WORKING_DIRECTORY_PARAM, UserInput.WORKING_DIRECTORY_HELP
         ).withRequiredArg().ofType(File.class).defaultsTo(UserInput.WORKING_DIRECTORY_DEFAULT)
@@ -134,6 +137,7 @@ public static void main(final String... args) throws IOException, NoSuchAlgorith
         );
 
         Path testCaseConfigPath = null;
+        Path testCaseDataPath = null;
         if (options.valueOf(testcase).equals("custom")) {
             if (options.has(testcaseconfig)) {
                 testCaseConfigPath = options.valueOf(testcaseconfig).toPath();
@@ -141,10 +145,17 @@ public static void main(final String... args) throws IOException, NoSuchAlgorith
             else {
                 throw new IllegalArgumentException("Path to Test Case Config must be provided");
             }
+            if (options.has(testcasedata)) {
+                testCaseDataPath = options.valueOf(testcasedata).toPath();
+            }
+        } else {
+            if (options.has(testcaseconfig) || options.has(testcasedata)) {
+                throw new IllegalArgumentException("Path to Test Case Config or Data can only be used with Custom Test Case");
         }
+    }
 
         final BenchmarkMeta runConfig = new BenchmarkMeta(
-            options.valueOf(testcase), testCaseConfigPath, version, type, options.valueOf(workers),
+            options.valueOf(testcase), testCaseConfigPath, testCaseDataPath, version, type, options.valueOf(workers),
             options.valueOf(batchsize)
         );
         execute(
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java
index 12a53d23787..ce713831b59 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java
@@ -17,7 +17,6 @@
  * under the License.
  */
 
-
 package org.logstash.benchmark.cli.cases;
 
 import org.apache.commons.io.IOUtils;
@@ -40,24 +39,37 @@ public class CustomTestCase implements Case {
     private final LogstashInstallation logstash;
     private final DataStore store;
     private final Path configpath;
+    private final File data;
+    private final int repeats;
 
-    public CustomTestCase(DataStore store, LogstashInstallation logstash, Path cwd, Properties settings, UserOutput output, BenchmarkMeta runConfig) {
+    public CustomTestCase(DataStore store, LogstashInstallation logstash, Path cwd, Properties settings,
+            UserOutput output, BenchmarkMeta runConfig) {
         this.logstash = logstash;
         logstash.configure(runConfig);
+        if (runConfig.getDataPath() != null) {
+            data = runConfig.getDataPath().toFile();
+        } else {
+            data = null;
+        }
         this.store = store;
         this.configpath = runConfig.getConfigPath();
+        this.repeats = Integer.parseInt(settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT));
     }
 
     @Override
     public AbstractMap<LsMetricStats, ListStatistics> run() {
-        try (final LsMetricsMonitor.MonitorExecution monitor =
-                     new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
+        try (final LsMetricsMonitor.MonitorExecution monitor = new LsMetricsMonitor.MonitorExecution(logstash.metrics(),
+                store)) {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
 
-            try (final InputStream cfg = Files.newInputStream(configpath)){
+            try (final InputStream cfg = Files.newInputStream(configpath)) {
                 IOUtils.copy(cfg, baos);
             }
-            logstash.execute(baos.toString());
+            if (data != null) {
+                logstash.execute(baos.toString(), data, repeats);
+            } else {
+                logstash.execute(baos.toString());
+            }
             return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
index 7cecdcdc515..799bf36c363 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
@@ -103,6 +103,10 @@ public final class UserInput {
     public static final String TEST_CASE_CONFIG_HELP =
             "Path to custom logstash config. Required if testcase is set to 'custom'";
 
+    public static final String TEST_CASE_DATA_PARAM = "data";
+    public static final String TEST_CASE_DATA_HELP =
+            "Path to custom logstash data. Only if testcase is set to 'custom'";
+
     /**
      * Constructor.
      */
