diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index 92d03b5de5d..3cc3e029682 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -304,6 +304,32 @@ def run(args, &block)
       run_with_config(config, &block)
     end
 
+    @monitor_thread = Thread.new do
+      #Hopefully this is never the thread that runs out of memory
+      while sleep 5
+        has_thread_died = false
+        @plugins_mutex.synchronize do
+          @plugins.each do |p, thread|
+            if(!thread.alive?)
+              @logger.warn("Thread died unexpectedly, assuming the worst and restarting everything")
+            end
+            while @reloading || @is_shutting_down
+              @logger.warn("Waiting to stop shutting down and reloading")
+              @logger.warn("@reloading = #{@reloading}")
+              @logger.warn("@is_shutting_down = #{@is_shutting_down}")
+              sleep 1
+            end
+            has_thread_died = true
+          end
+        end
+        if(has_thread_died)
+          #@TODO(jbarciauskas) Maybe stop everything and reload instead of shutting down?
+          shutdown_and_reload
+        end
+      end
+      @logger.warn("Monitor thread has died")
+    end
+
     return remaining
   end # def run
 
@@ -436,6 +462,22 @@ def shutdown
     exit(0)
   end # def shutdown
 
+  def shutdown_and_reload
+    @logger.info("Shutting down before reloading...")
+    shutdown_plugins(@plugins)
+    while @is_shutting_down
+      sleep 1
+    end
+    #should result in an empty set
+    @plugins = @plugins.select { |p, thread| p.running? }
+    @inputs = []
+    @filters = []
+    @outputs = []
+    @logger.info("Starting to reload...")
+    reload
+    @logger.info("Reloading complete!")
+  end
+
   def shutdown_plugins(plugins)
     return if @is_shutting_down
 
@@ -475,8 +517,8 @@ def shutdown_plugins(plugins)
                         :remaining => remaining.map(&:first))
         end
       end # while remaining.size > 0
+      @is_shutting_down = false
     end
-    @is_shutting_down = false
   end
 
 
@@ -571,6 +613,7 @@ def reload
         while wait_count > 0 and @ready_queue.pop
           wait_count -= 1
         end
+        @reloading = false
       rescue Exception => e
         @reloading = false
         raise e
@@ -673,7 +716,7 @@ def run_output(output, queue)
         @logger.debug("Sending event", :target => output)
         output.handle(event)
       end
-    rescue Exception => e
+    rescue => e
       @logger.warn("Output thread exception", :plugin => output,
                    :exception => e, :backtrace => e.backtrace)
       # TODO(sissel): should we abort after too many failures?
