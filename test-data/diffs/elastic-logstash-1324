diff --git a/lib/logstash/environment.rb b/lib/logstash/environment.rb
index 8768d8c154d..024d5e78aff 100644
--- a/lib/logstash/environment.rb
+++ b/lib/logstash/environment.rb
@@ -27,5 +27,13 @@ def load_elasticsearch_jars!
     def jruby?
       RUBY_PLATFORM == "java"
     end
+    
+    def vendor_path(relative_path)
+      return ::File.join(LOGSTASH_HOME, "vendor", relative_path)
+    end
+    
+    def path(base_path, file)
+      return ::File.join(dir, base_path, file)
+    end
   end
 end
diff --git a/lib/logstash/filters/geoip.rb b/lib/logstash/filters/geoip.rb
index 88887d74494..71fa8128e02 100644
--- a/lib/logstash/filters/geoip.rb
+++ b/lib/logstash/filters/geoip.rb
@@ -1,4 +1,5 @@
 # encoding: utf-8
+require "logstash/environment"
 require "logstash/filters/base"
 require "logstash/namespace"
 require "tempfile"
@@ -59,30 +60,19 @@ class LogStash::Filters::GeoIP < LogStash::Filters::Base
   # Even if you don't use the geo\_point mapping, the [target][location] field
   # is still valid GeoJSON.
   config :target, :validate => :string, :default => 'geoip'
-
+  
+  GEOIPDB = ::File.join(LogStash::Environment.vendor_path("geoip/GeoLiteCity.dat"))
+  
   public
   def register
     require "geoip"
     if @database.nil?
-      if __FILE__ =~ /^(jar:)?file:\/.+!.+/
-        begin
-          # Running from a jar, assume GeoLiteCity.dat is at the root.
-          jar_path = [__FILE__.split("!").first, "/GeoLiteCity.dat"].join("!")
-          tmp_file = Tempfile.new('logstash-geoip')
-          tmp_file.write(File.read(jar_path))
-          tmp_file.close # this file is reaped when ruby exits
-          @database = tmp_file.path
-        rescue => ex
-          raise "Failed to cache, due to: #{ex}\n#{ex.backtrace}"
-        end
+      if File.exists?("GeoLiteCity.dat")
+        @database = "GeoLiteCity.dat"
+      elsif File.exists?(GEOIPDB)
+        @database = GEOIPDB
       else
-        if File.exists?("GeoLiteCity.dat")
-          @database = "GeoLiteCity.dat"
-        elsif File.exists?("vendor/geoip/GeoLiteCity.dat")
-          @database = "vendor/geoip/GeoLiteCity.dat"
-        else
-          raise "You must specify 'database => ...' in your geoip filter"
-        end
+        raise "You must specify 'database => ...' in your geoip filter"
       end
     end
     @logger.info("Using geoip database", :path => @database)
