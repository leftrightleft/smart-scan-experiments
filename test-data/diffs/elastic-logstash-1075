diff --git a/lib/logstash/outputs/redis.rb b/lib/logstash/outputs/redis.rb
index 6bde3e3667d..57113071c20 100644
--- a/lib/logstash/outputs/redis.rb
+++ b/lib/logstash/outputs/redis.rb
@@ -3,14 +3,15 @@
 require "logstash/namespace"
 require "stud/buffer"
 
-# send events to a redis database using RPUSH
-# The RPUSH command is supported in redis v0.0.7+ 
-# To PUBLISH to a channel requires at least v1.3.8+
-# While you may be able to make these redis versions workcool the best performance
-# and stability will be found in more recent stable versions.  Versions 2.6.0+
-# are recommended.
+# This output will send events to a Redis queue using RPUSH.
+# The RPUSH command is supported in Redis v0.0.7+. Using
+# PUBLISH to a channel requires at least v1.3.8+.
+# While you may be able to make these Redis versions work,
+# the best performance and stability will be found in more 
+# recent stable versions.  Versions 2.6.0+ are recommended.
+#
+# For more information about Redis, see <http://redis.io/>
 #
-# For more information about redis, see <http://redis.io/>
 class LogStash::Outputs::Redis < LogStash::Outputs::Base
 
   include Stud::Buffer
@@ -23,7 +24,7 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   config :name, :validate => :string, :default => 'default',
     :deprecated => true
 
-  # The hostname(s) of your redis server(s). Ports may be specified on any
+  # The hostname(s) of your Redis server(s). Ports may be specified on any
   # hostname, which will override the global port config.
   #
   # For example:
@@ -33,13 +34,13 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   #     ["127.0.0.1:6380", "127.0.0.1"]
   config :host, :validate => :array, :default => ["127.0.0.1"]
 
-  # Shuffle the host list during logstash startup.
+  # Shuffle the host list during Logstash startup.
   config :shuffle_hosts, :validate => :boolean, :default => true
 
   # The default port to connect on. Can be overridden on any hostname.
   config :port, :validate => :number, :default => 6379
 
-  # The redis database number.
+  # The Redis database number.
   config :db, :validate => :number, :default => 0
 
   # Redis initial connection timeout in seconds.
@@ -48,28 +49,29 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # Password to authenticate with.  There is no authentication by default.
   config :password, :validate => :password
 
-  # The name of the redis queue (we'll use RPUSH on this). Dynamic names are
+  # The name of the Redis queue (we'll use RPUSH on this). Dynamic names are
   # valid here, for example "logstash-%{type}"
   # TODO: delete
   config :queue, :validate => :string, :deprecated => true
 
-  # The name of a redis list or channel. Dynamic names are
+  # The name of a Redis list or channel. Dynamic names are
   # valid here, for example "logstash-%{type}".
   # TODO set required true
   config :key, :validate => :string, :required => false
+require "../inputs/redis"
 
-  # Either list or channel.  If redis_type is list, then we will RPUSH to key.
-  # If redis_type is channel, then we will PUBLISH to key.
+  # Either list or channel.  If `redis_type` is list, then we will set
+  # RPUSH to key. If `redis_type` is channel, then we will PUBLISH to `key`.
   # TODO set required true
   config :data_type, :validate => [ "list", "channel" ], :required => false
 
-  # Set to true if you want redis to batch up values and send 1 RPUSH command
+  # Set to true if you want Redis to batch up values and send 1 RPUSH command
   # instead of one command per value to push on the list.  Note that this only
-  # works with data_type="list" mode right now.
+  # works with `data_type="list"` mode right now.
   #
   # If true, we send an RPUSH every "batch_events" events or
   # "batch_timeout" seconds (whichever comes first).
-  # Only supported for list redis data_type.
+  # Only supported for `data_type` is "list".
   config :batch, :validate => :boolean, :default => false
 
   # If batch is set to true, the number of events we queue up for an RPUSH.
@@ -79,18 +81,19 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # when there are pending events to flush.
   config :batch_timeout, :validate => :number, :default => 5
 
-  # Interval for reconnecting to failed redis connections
+  # Interval for reconnecting to failed Redis connections
   config :reconnect_interval, :validate => :number, :default => 1
 
-  # In case redis data_type is list and has more than @congestion_threshold items, block until someone consumes them and reduces
-  # congestion, otherwise if there are no consumers redis will run out of memory, unless it was configured with OOM protection.
-  # But even with OOM protection single redis list can block all other users of redis, as well redis cpu consumption
-  # becomes bad then it reaches the max allowed ram size.
-  # Default value of 0 means that this limit is disabled.
-  # Only supported for list redis data_type.
+  # In case Redis `data_type` is "list" and has more than @congestion_threshold items,
+  # block until someone consumes them and reduces congestion, otherwise if there are
+  # no consumers Redis will run out of memory, unless it was configured with OOM protection.
+  # But even with OOM protection, a single Redis list can block all other users of Redis,
+  # until Redis CPU consumption reaches the max allowed RAM size.
+  # A default value of 0 means that this limit is disabled.
+  # Only supported for `list` Redis `data_type`.
   config :congestion_threshold, :validate => :number, :default => 0
 
-  # How often to check for congestion, defaults to 1 second.
+  # How often to check for congestion. Default is one second.
   # Zero means to check on every event.
   config :congestion_interval, :validate => :number, :default => 1
 
@@ -170,7 +173,7 @@ def receive(event)
         @redis.publish(key, payload)
       end
     rescue => e
-      @logger.warn("Failed to send event to redis", :event => event,
+      @logger.warn("Failed to send event to Redis", :event => event,
                    :identity => identity, :exception => e,
                    :backtrace => e.backtrace)
       sleep @reconnect_interval
@@ -182,7 +185,7 @@ def receive(event)
   def congestion_check(key)
     return if @congestion_threshold == 0
     if (Time.now.to_i - @congestion_check_times[key]) >= @congestion_interval # Check congestion only if enough time has passed since last check.
-      while @redis.llen(key) > @congestion_threshold # Don't push event to redis key which has reached @congestion_threshold.
+      while @redis.llen(key) > @congestion_threshold # Don't push event to Redis key which has reached @congestion_threshold.
         @logger.warn? and @logger.warn("Redis key size has hit a congestion threshold #{@congestion_threshold} suspending output for #{@congestion_interval} seconds")
         sleep @congestion_interval
       end
@@ -200,7 +203,7 @@ def flush(events, key, teardown=false)
   end
   # called from Stud::Buffer#buffer_flush when an error occurs
   def on_flush_error(e)
-    @logger.warn("Failed to send backlog of events to redis",
+    @logger.warn("Failed to send backlog of events to Redis",
       :identity => identity,
       :exception => e,
       :backtrace => e.backtrace
@@ -242,7 +245,7 @@ def connect
     Redis.new(params)
   end # def connect
 
-  # A string used to identify a redis instance in log messages
+  # A string used to identify a Redis instance in log messages
   def identity
     @name || "redis://#{@password}@#{@current_host}:#{@current_port}/#{@db} #{@data_type}:#{@key}"
   end
