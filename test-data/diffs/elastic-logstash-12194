diff --git a/bin/logstash-keystore-experimental b/bin/logstash-keystore-experimental
new file mode 100755
index 00000000000..3b578b840a8
--- /dev/null
+++ b/bin/logstash-keystore-experimental
@@ -0,0 +1,66 @@
+#!/bin/bash
+# Run logstash from source
+#
+# This is most useful when done from a git checkout.
+#
+# Usage:
+#   bin/logstash <command> [arguments]
+#
+# See 'bin/logstash --help' for a list of commands.
+#
+# Supported environment variables:
+#   LS_JAVA_OPTS="xxx" to append extra options to the JVM options provided by logstash
+#
+# Development environment variables:
+#   DEBUG=1 to output debugging information
+
+unset CDPATH
+# This unwieldy bit of scripting is to try to catch instances where Logstash
+# was launched from a symlink, rather than a full path to the Logstash binary
+if [ -L "$0" ]; then
+  # Launched from a symlink
+  # --Test for the readlink binary
+  RL="$(command -v readlink)"
+  if [ $? -eq 0 ]; then
+    # readlink exists
+    SOURCEPATH="$(${RL} $0)"
+  else
+    # readlink not found, attempt to parse the output of stat
+    SOURCEPATH="$(stat -c %N $0 | awk '{print $3}' | sed -e 's/\‘//' -e 's/\’//')"
+    if [ $? -ne 0 ]; then
+      # Failed to execute or parse stat
+      echo "Failed to find source library at path $(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
+      echo "You may need to launch Logstash with a full path instead of a symlink."
+      exit 1
+    fi
+  fi
+else
+  # Not a symlink
+  SOURCEPATH="$0"
+fi
+
+. "$(cd `dirname ${SOURCEPATH}`/..; pwd)/bin/logstash.lib.sh"
+setup
+
+if [ "$1" = "-V" ] || [ "$1" = "--version" ]; then
+  LOGSTASH_VERSION_FILE1="${LOGSTASH_HOME}/logstash-core/versions-gem-copy.yml"
+  LOGSTASH_VERSION_FILE2="${LOGSTASH_HOME}/versions.yml"
+  if [ -f ${LOGSTASH_VERSION_FILE1} ]; then
+    # this file is present in zip, deb and rpm artifacts and after bundle install
+    # but might not be for a git checkout type install
+    LOGSTASH_VERSION="$(sed -ne 's/^logstash: \([^*]*\)$/\1/p' ${LOGSTASH_VERSION_FILE1})"
+  elif [ -f ${LOGSTASH_VERSION_FILE2} ]; then
+    # this file is present for a git checkout type install
+    # but its not in zip, deb and rpm artifacts (and in integration tests)
+    LOGSTASH_VERSION="$(sed -ne 's/^logstash: \([^*]*\)$/\1/p' ${LOGSTASH_VERSION_FILE2})"
+  else
+    LOGSTASH_VERSION="Version not detected"
+  fi
+  echo "logstash $LOGSTASH_VERSION"
+else
+  unset CLASSPATH
+  for J in $(cd "${LOGSTASH_JARS}"; ls *.jar); do
+    CLASSPATH=${CLASSPATH}${CLASSPATH:+:}${LOGSTASH_JARS}/${J}
+  done
+  exec "${JAVACMD}" ${JAVA_OPTS} -cp "${CLASSPATH}" org.logstash.secret.store.SecretStoreMain "$@"
+fi
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 5c837b2e6de..9bf1d4ca581 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -168,6 +168,7 @@ dependencies {
     // Jackson version moved to versions.yml in the project root (the JrJackson version is there too)
     implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
     api "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
+    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
     api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
     implementation 'org.codehaus.janino:janino:3.1.0'
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreMain.java b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreMain.java
new file mode 100644
index 00000000000..3a072874996
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreMain.java
@@ -0,0 +1,39 @@
+package org.logstash.secret.store;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
+import org.logstash.secret.cli.SecretStoreCli;
+import org.logstash.secret.cli.Terminal;
+
+import java.io.File;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Map;
+
+public class SecretStoreMain {
+    @SuppressWarnings("unchecked")
+    public static void main(String[] args) throws Exception {
+        SecretStoreCli cli = new SecretStoreCli(new Terminal());
+        int pos = 0;
+        int foundPos = -1;
+        for(String arg : args){
+            if (arg.equals("--path.settings")){
+                foundPos = pos;
+                break;
+            }
+            pos++;
+        }
+        Path filePath = Paths.get(System.getenv("LOGSTASH_HOME")).resolve("config");
+        if (foundPos != -1) {
+            filePath = Paths.get(args[foundPos + 1]).resolve("config");
+        }
+
+        Path pathToConfig = filePath.resolve("logstash.yml");
+        ObjectMapper om = new ObjectMapper(new YAMLFactory());
+        Map<String, String> settings = om.readValue(pathToConfig.toFile(), Map.class);
+        String keystoreFile = settings.getOrDefault("keystore.file", filePath.resolve("logstash.keystore").toString());
+        String keystoreClass = settings.getOrDefault("keystore.class", "org.logstash.secret.store.backend.JavaKeyStore");
+        SecureConfig secureConfig = SecretStoreExt.getConfig(keystoreFile, keystoreClass);
+        cli.command(args[0], secureConfig, args.length > 1 ? args[1] : null);
+    }
+}
