diff --git a/bin/benchmark.sh b/bin/benchmark.sh
new file mode 100755
index 00000000000..af5aacb8b7b
--- /dev/null
+++ b/bin/benchmark.sh
@@ -0,0 +1,4 @@
+#!/usr/bin/env bash
+
+java -cp "$(cd `dirname $0`/..; pwd)"'/tools/benchmark-cli/build/libs/benchmark-cli.jar:*' \
+ org.logstash.benchmark.cli.Main "$@"
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java
index cfa0c3c7135..872993fbff2 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java
@@ -59,7 +59,7 @@ final class ElasticSearch implements DataStore {
         ElasticSearch(final String host, final int port, final String schema,
             final Map<String, Object> meta) {
             client = RestClient.builder(new HttpHost(host, port, schema)).build();
-            this.meta = meta;
+            this.meta = Collections.unmodifiableMap(meta);
         }
 
         @Override
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/JRubyInstallation.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/JRubyInstallation.java
index 2e59235de19..044dc312f05 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/JRubyInstallation.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/JRubyInstallation.java
@@ -41,8 +41,7 @@ public static JRubyInstallation bootstrapJruby(final Path pwd)
             String.format(
                 "http://jruby.org.s3.amazonaws.com/downloads/%s/jruby-bin-%s.tar.gz",
                 JRUBY_DEFAULT_VERSION, JRUBY_DEFAULT_VERSION
-            ),
-            false
+            )
         );
         return new JRubyInstallation(
             pwd.resolve("jruby").resolve(String.format("jruby-%s", JRUBY_DEFAULT_VERSION))
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
index 94150ce83eb..fcaf8a383b1 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
@@ -13,6 +13,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Map;
 import org.apache.commons.io.IOUtils;
+import org.logstash.benchmark.cli.ui.UserOutput;
 import org.logstash.benchmark.cli.util.LsBenchDownloader;
 import org.logstash.benchmark.cli.util.LsBenchFileUtil;
 
@@ -46,12 +47,17 @@ final class FromRelease implements LogstashInstallation {
 
         private final LogstashInstallation base;
 
-        public FromRelease(final File pwd, final String version) {
+        public FromRelease(final File pwd, final String version, final UserOutput output) {
             try {
-                LogstashInstallation.FromRelease.download(pwd, version);
-                this.base = LogstashInstallation.FromRelease.setup(
-                    pwd.toPath().resolve(String.format("logstash-%s", version))
-                );
+                final Path basedir = pwd.toPath().resolve(String.format("logstash-%s", version));
+                if (basedir.toFile().exists()) {
+                    output.blue(String.format("Using Logstash %s from cache.", version));
+                } else {
+                    output.blue(String.format("Downloading Logstash %s.", version));
+                    LogstashInstallation.FromRelease.download(pwd, version);
+                    output.blue("Finished downloading Logstash.");
+                }
+                this.base = LogstashInstallation.FromRelease.setup(basedir);
             } catch (IOException | NoSuchAlgorithmException ex) {
                 throw new IllegalStateException(ex);
             }
@@ -78,9 +84,8 @@ private static void download(final File pwd, final String version)
             LsBenchDownloader.downloadDecompress(
                 pwd,
                 String.format(
-                    "https://artifacts.elastic.co/downloads/logstash/logstash-%s.zip",
-                    version
-                ), true
+                    "https://artifacts.elastic.co/downloads/logstash/logstash-%s.zip", version
+                )
             );
         }
 
@@ -207,8 +212,7 @@ public String metrics() {
         private static void download(final File pwd, final String user, final String hash)
             throws IOException, NoSuchAlgorithmException {
             LsBenchDownloader.downloadDecompress(
-                pwd, String.format("https://github.com/%s/logstash/archive/%s.zip", user, hash),
-                true
+                pwd, String.format("https://github.com/%s/logstash/archive/%s.zip", user, hash)
             );
         }
 
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
index 09499b2ec54..3bf842282b5 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
@@ -106,10 +106,11 @@ private long[] getCounts() {
         }
     }
 
+    @SuppressWarnings("unchecked")
     private static long readNestedLong(final Map<String, Object> map, final String ... path) {
         Map<String, Object> nested = map;
         for (int i = 0; i < path.length - 1; ++i) {
-            nested = (Map<String, Object>) (nested).get(path[i]);
+            nested = (Map<String, Object>) nested.get(path[i]);
         }
         return ((Number) nested.get(path[path.length - 1])).longValue();
     }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
index a8bb6e51242..34da475fd3a 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
@@ -143,10 +143,11 @@ public static void execute(final UserOutput output, final Properties settings,
                 cwd.toAbsolutePath().toString(), version, JRubyInstallation.bootstrapJruby(cwd)
             );
         } else {
-            logstash = LsBenchLsSetup.setupLS(cwd.toAbsolutePath().toString(), version, type);
+            logstash =
+                LsBenchLsSetup.setupLS(cwd.toAbsolutePath().toString(), version, type, output);
         }
         try (final DataStore store = setupDataStore(esout, test, version, type)) {
-            final Case testcase = setupTestCase(store, logstash, cwd, settings, test);
+            final Case testcase = setupTestCase(store, logstash, cwd, settings, test, output);
             output.printStartTime();
             final long start = System.currentTimeMillis();
             final AbstractMap<LsMetricStats, ListStatistics> stats = testcase.run();
@@ -162,13 +163,13 @@ public static void execute(final UserOutput output, final Properties settings,
     }
 
     private static Case setupTestCase(final DataStore store, final LogstashInstallation logstash,
-        final Path cwd, final Properties settings, final String test)
+        final Path cwd, final Properties settings, final String test, final UserOutput output)
         throws IOException, NoSuchAlgorithmException {
         final Case testcase;
         if (GeneratorToStdout.IDENTIFIER.equalsIgnoreCase(test)) {
             testcase = new GeneratorToStdout(store, logstash, settings);
         } else if (ApacheLogsComplex.IDENTIFIER.equalsIgnoreCase(test)) {
-            testcase = new ApacheLogsComplex(store, logstash, cwd, settings);
+            testcase = new ApacheLogsComplex(store, logstash, cwd, settings, output);
         } else {
             throw new IllegalArgumentException(String.format("Unknown test case %s", test));
         }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
index 79a0833b3fd..32caa890ade 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
@@ -16,6 +16,7 @@
 import org.logstash.benchmark.cli.LsBenchSettings;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
+import org.logstash.benchmark.cli.ui.UserOutput;
 import org.logstash.benchmark.cli.util.LsBenchDownloader;
 import org.openjdk.jmh.util.ListStatistics;
 
@@ -32,16 +33,26 @@ public final class ApacheLogsComplex implements Case {
 
     private final LogstashInstallation logstash;
 
+    /**
+     * File containing example Apache web-server logs.
+     */
     private final File data;
 
+    /**
+     * {@link DataStore} to save benchmark run results to.
+     */
     private final DataStore store;
 
     private final int repeats;
-    
+
     public ApacheLogsComplex(final DataStore store, final LogstashInstallation logstash,
-        final Path cwd, final Properties settings) throws IOException, NoSuchAlgorithmException {
-        this.data = cwd.resolve("data_apache").resolve("apache_access_logs").toFile();
-        ensureDatafile(data.toPath().getParent().toFile(), settings);
+        final Path cwd, final Properties settings, final UserOutput output)
+        throws IOException, NoSuchAlgorithmException {
+        data = cwd.resolve("data_apache").resolve("apache_access_logs").toFile();
+        ensureDatafile(
+            data.toPath().getParent().toFile(),
+            settings.getProperty(LsBenchSettings.APACHE_DATASET_URL), output
+        );
         this.logstash = logstash;
         this.store = store;
         repeats = Integer.parseInt(settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT));
@@ -51,24 +62,26 @@ public ApacheLogsComplex(final DataStore store, final LogstashInstallation logst
     public EnumMap<LsMetricStats, ListStatistics> run() {
         try (final LsMetricsMonitor.MonitorExecution monitor =
                  new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
-            final String config;
+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
             try (final InputStream cfg = ApacheLogsComplex.class
                 .getResourceAsStream("apache.cfg")) {
-                final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                 IOUtils.copy(cfg, baos);
-                config = baos.toString();
             }
-            logstash.execute(config, data, repeats);
+            logstash.execute(baos.toString(), data, repeats);
             return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
         }
     }
 
-    private static void ensureDatafile(final File file, final Properties settings)
+    private static void ensureDatafile(final File file, final String url, final UserOutput output)
         throws IOException, NoSuchAlgorithmException {
-        LsBenchDownloader.downloadDecompress(
-            file, settings.getProperty(LsBenchSettings.APACHE_DATASET_URL), false
-        );
+        if (file.exists()) {
+            output.blue("Using example Apache web-server logs from cache.");
+        } else {
+            output.blue("Downloading example Apache web-server logs.");
+            LsBenchDownloader.downloadDecompress(file, url);
+            output.blue("Finished downloading example Apache web-server logs.");
+        }
     }
 }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
index 6e11dddadc7..a67a3ff8952 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
@@ -15,6 +15,11 @@ public final class UserOutput {
      */
     private static final String GREEN_ANSI_OPEN = SystemUtils.IS_OS_UNIX ? "\u001B[32m" : "";
 
+    /**
+     * ANSI colorized blue section open sequence(On Unix platform only).
+     */
+    private static final String BLUE_ANSI_OPEN = SystemUtils.IS_OS_UNIX ? "\u001B[34m" : "";
+
     /**
      * ANSI colorized section close sequence(On Unix platform only).
      */
@@ -56,6 +61,10 @@ public void green(final String line) {
         target.println(colorize(line, GREEN_ANSI_OPEN));
     }
 
+    public void blue(final String line) {
+        target.println(colorize(line, BLUE_ANSI_OPEN));
+    }
+
     public void printStatistics(final Map<LsMetricStats, ListStatistics> stats) {
         green(
             String.format("Num Events: %d", (long) stats.get(LsMetricStats.COUNT).getMax())
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchDownloader.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchDownloader.java
index 8c4ab400efa..7fd115691ef 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchDownloader.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchDownloader.java
@@ -15,9 +15,9 @@
 
 public final class LsBenchDownloader {
     
-    public static void downloadDecompress(final File file, final String url, final boolean force)
+    public static void downloadDecompress(final File file, final String url)
         throws IOException, NoSuchAlgorithmException {
-        if (force && file.exists()) {
+        if (file.exists()) {
             LsBenchFileUtil.ensureDeleted(file);
         }
         if (!file.exists()) {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchLsSetup.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchLsSetup.java
index 305beb46fb9..3064f42d658 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchLsSetup.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchLsSetup.java
@@ -5,6 +5,7 @@
 import org.logstash.benchmark.cli.JRubyInstallation;
 import org.logstash.benchmark.cli.LogstashInstallation;
 import org.logstash.benchmark.cli.ui.LsVersionType;
+import org.logstash.benchmark.cli.ui.UserOutput;
 
 public final class LsBenchLsSetup {
 
@@ -25,13 +26,13 @@ public static LogstashInstallation logstashFromGit(final String pwd, final Strin
     }
 
     public static LogstashInstallation setupLS(final String pwd, final String version,
-        final LsVersionType type) {
+        final LsVersionType type, final UserOutput output) {
         final LogstashInstallation logstash;
         if (type == LsVersionType.LOCAL) {
             logstash = new LogstashInstallation.FromLocalPath(version);
         } else {
             logstash = new LogstashInstallation.FromRelease(
-                Paths.get(pwd, String.format("ls-release-%s", version)).toFile(), version
+                Paths.get(pwd, String.format("ls-release-%s", version)).toFile(), version, output
             );
         }
         return logstash;
