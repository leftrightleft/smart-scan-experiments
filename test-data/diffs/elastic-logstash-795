diff --git a/lib/logstash/codecs/oldlogstashjson.rb b/lib/logstash/codecs/oldlogstashjson.rb
index 80083e25860..3ffe3e64dc6 100644
--- a/lib/logstash/codecs/oldlogstashjson.rb
+++ b/lib/logstash/codecs/oldlogstashjson.rb
@@ -5,6 +5,12 @@ class LogStash::Codecs::OldLogStashJSON < LogStash::Codecs::Base
   config_name "oldlogstashjson"
   milestone 1
 
+  # Map from v0 name to v1 name.
+  # Note: @source is gone and has no similar field.
+  V0_TO_V1 = {"@timestamp" => "@timestamp", "@message" => "message",
+              "@tags" => "tags", "@type" => "type",
+              "@source_host" => "host", "@source_path" => "path"}
+
   public
   def decode(data)
     obj = JSON.parse(data.force_encoding("UTF-8"))
@@ -12,19 +18,10 @@ def decode(data)
     h  = {}
 
     # Convert the old logstash schema to the new one.
-    basics = %w(@message @tags @type)
-    basics.each do |key|
-      # Convert '@message' to 'message', etc
-      h[key[1..-1]] = obj[key] if obj.include?(key)
+    V0_TO_V1.each do |key, val|
+      h[val] = obj[key] if obj.include?(key)
     end
 
-    # fix other mappings
-    h["host"] = obj["@source_host"]
-    h["path"] = obj["@source_path"]
-    # Note: @source is gone and has no similar field.
-
-    h["@timestamp"] = obj["@timestamp"] if obj.include?("@timestamp")
-
     h.merge!(obj["@fields"]) if obj["@fields"].is_a?(Hash)
     yield LogStash::Event.new(h)
   end # def decode
@@ -33,18 +30,21 @@ def decode(data)
   def encode(data)
     h  = {}
 
-    h["@timestamp"] = data["@timestamp"]
-    h["@message"] = data["message"] if data.include?("message")
-    h["@source_host"] = data["source_host"] if data.include?("source_host")
-    # Convert the old logstash schema to the new one.
-    basics = %w(@timestamp @message @source_host @source_path @source
-                @tags @type)
-    basics.each do |key|
-      h[key] = data[key] if data.include?(key)
+    # Convert the new logstash schema to the old one.
+    V0_TO_V1.each do |key, val|
+      h[key] = data[val] if data.include?(val)
+    end
+
+    data.to_hash.each do |field, val|
+      # TODO: might be better to V1_TO_V0 = V0_TO_V1.invert during
+      # initialization than V0_TO_V1.has_value? within loop
+      next if field == "@version" or V0_TO_V1.has_value?(field)
+      h["@fields"] = {} if h["@fields"].nil?
+      h["@fields"][field] = val
     end
 
-    h.merge!(data["@fields"]) if data["@fields"].is_a?(Hash)
-    @on_event.call(h.to_json)
+    # Tack on a \n because JSON outputs 1.1.x had them.
+    @on_event.call(h.to_json + "\n")
   end # def encode
 
 end # class LogStash::Codecs::OldLogStashJSON
diff --git a/spec/codecs/oldlogstashjson.rb b/spec/codecs/oldlogstashjson.rb
index b945c1ce851..5b952ac9f8a 100644
--- a/spec/codecs/oldlogstashjson.rb
+++ b/spec/codecs/oldlogstashjson.rb
@@ -18,6 +18,7 @@
         insist { event["message"] } == data["@message"]
         insist { event["host"] } == data["@source_host"]
         insist { event["tags"] } == data["@tags"]
+        insist { event["path"] } == nil # @source_path not in v0 test data
       end
     end
   end
@@ -26,12 +27,19 @@
     it "should return old (v0) json data" do
       data = {"type" => "t", "message" => "wat!?",
               "host" => "localhost", "path" => "/foo",
-              "tags" => ["a","b","c"]}
+              "tags" => ["a","b","c"],
+              "bah" => "baz"}
       event = LogStash::Event.new(data)
       got_event = false
       subject.on_event do |d|
         insist { JSON.parse(d)["@timestamp"] } != nil
+        insist { JSON.parse(d)["@type"] } == data["type"]
         insist { JSON.parse(d)["@message"] } == data["message"]
+        insist { JSON.parse(d)["@source_host"] } == data["host"]
+        insist { JSON.parse(d)["@source_path"] } == data["path"]
+        insist { JSON.parse(d)["@tags"] } == data["tags"]
+        insist { JSON.parse(d)["@fields"]["bah"] } == "baz"
+        insist { JSON.parse(d)["@fields"]["@version"] } == nil
         got_event = true
       end
       subject.encode(event)
