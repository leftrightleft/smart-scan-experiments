diff --git a/logstash-core/src/main/java/org/logstash/ConvertedMap.java b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
index 2313a127e19..6f08f1b6068 100644
--- a/logstash-core/src/main/java/org/logstash/ConvertedMap.java
+++ b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
@@ -16,9 +16,9 @@
  * <p>The {@code put} method will work with any {@link String} key but is only intended for use in
  * situations where {@link ConvertedMap#putInterned(String, Object)} would require manually
  * interning the {@link String} key. This is due to the fact that we use our internal
- * {@link PathCache} to get an interned version of the given key instead of JDKs
+ * {@link FieldReference} cache to get an interned version of the given key instead of JDKs
  * {@link String#intern()}, which is faster since it works from a much smaller and hotter cache
- * in {@link PathCache} than using String interning directly.</p>
+ * in {@link FieldReference#CACHE} than using String interning directly.</p>
  */
 public final class ConvertedMap extends IdentityHashMap<String, Object> {
 
@@ -71,7 +71,7 @@ public static ConvertedMap newFromRubyHash(final ThreadContext context, final Ru
 
     @Override
     public Object put(final String key, final Object value) {
-        return super.put(PathCache.cache(key).getKey(), value);
+        return super.put(FieldReference.from(key).getKey(), value);
     }
 
     /**
@@ -98,6 +98,6 @@ public Object unconvert() {
      * @return Interned String
      */
     private static String convertKey(final RubyString key) {
-        return PathCache.cache(key.getByteList()).getKey();
+        return FieldReference.from(key.getByteList()).getKey();
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 24aa8e6dba7..1cda5eee31f 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -37,7 +37,7 @@ public final class Event implements Cloneable, Queueable {
     private static final String DATA_MAP_KEY = "DATA";
     private static final String META_MAP_KEY = "META";
 
-    private static final FieldReference TAGS_FIELD = PathCache.cache("tags");
+    private static final FieldReference TAGS_FIELD = FieldReference.from("tags");
     
     private static final Logger logger = LogManager.getLogger(Event.class);
 
@@ -127,12 +127,12 @@ public void setTimestamp(Timestamp t) {
     }
 
     public Object getField(final String reference) {
-        final Object unconverted = getUnconvertedField(PathCache.cache(reference));
+        final Object unconverted = getUnconvertedField(FieldReference.from(reference));
         return unconverted == null ? null : Javafier.deep(unconverted);
     }
 
     public Object getUnconvertedField(final String reference) {
-        return getUnconvertedField(PathCache.cache(reference));
+        return getUnconvertedField(FieldReference.from(reference));
     }
 
     public Object getUnconvertedField(final FieldReference field) {
@@ -147,7 +147,7 @@ public Object getUnconvertedField(final FieldReference field) {
     }
 
     public void setField(final String reference, final Object value) {
-        setField(PathCache.cache(reference), value);
+        setField(FieldReference.from(reference), value);
     }
 
     public void setField(final FieldReference field, final Object value) {
@@ -164,7 +164,7 @@ public void setField(final FieldReference field, final Object value) {
     }
 
     public boolean includes(final String field) {
-        return includes(PathCache.cache(field));
+        return includes(FieldReference.from(field));
     }
 
     public boolean includes(final FieldReference field) {
@@ -250,7 +250,7 @@ public Event append(Event e) {
     }
 
     public Object remove(final String path) {
-        return remove(PathCache.cache(path));
+        return remove(FieldReference.from(path));
     }
 
     public Object remove(final FieldReference field) {
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index a43d7ffdef5..5cd3fc3a2ea 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 
 public final class FieldReference {
@@ -43,12 +44,18 @@ public final class FieldReference {
     private static final FieldReference METADATA_PARENT_REFERENCE =
         new FieldReference(EMPTY_STRING_ARRAY, Event.METADATA, META_PARENT);
 
+    /**
+     * Cache of all existing {@link FieldReference}.
+     */
+    private static final Map<CharSequence, FieldReference> CACHE =
+        new ConcurrentHashMap<>(64, 0.2F, 1);
+
     private final String[] path;
 
     private final String key;
 
     private final int hash;
-    
+
     /**
      * Either {@link FieldReference#META_PARENT}, {@link FieldReference#META_CHILD} or
      * {@link FieldReference#DATA_CHILD}.
@@ -62,25 +69,13 @@ private FieldReference(final String[] path, final String key, final int type) {
         hash = calculateHash(this.key, this.path, this.type);
     }
 
-    public static FieldReference parse(final CharSequence reference) {
-        final String[] parts = SPLIT_PATTERN.split(reference);
-        final List<String> path = new ArrayList<>(parts.length);
-        for (final String part : parts) {
-            if (!part.isEmpty()) {
-                path.add(part.intern());
-            }
-        }
-        final String key = path.remove(path.size() - 1).intern();
-        final boolean empty = path.isEmpty();
-        if (empty && key.equals(Event.METADATA)) {
-            return METADATA_PARENT_REFERENCE;
-        } else if (!empty && path.get(0).equals(Event.METADATA)) {
-            return deduplicate(new FieldReference(
-                path.subList(1, path.size()).toArray(EMPTY_STRING_ARRAY), key, META_CHILD));
-        } else {
-            return deduplicate(
-                new FieldReference(path.toArray(EMPTY_STRING_ARRAY), key, DATA_CHILD));
+    public static FieldReference from(final CharSequence reference) {
+        // atomicity between the get and put is not important
+        final FieldReference result = CACHE.get(reference);
+        if (result != null) {
+            return result;
         }
+        return parseToCache(reference);
     }
 
     /**
@@ -113,7 +108,7 @@ public boolean equals(final Object that) {
     public int hashCode() {
         return hash;
     }
-    
+
     /**
      * De-duplicates instances using {@link FieldReference#DEDUP}. This method must be
      * {@code synchronized} since we are running non-atomic get-put sequence on
@@ -146,4 +141,31 @@ private static int calculateHash(final String key, final String[] path, final in
         hash = prime * hash + key.hashCode();
         return prime * hash + type;
     }
+
+    private static FieldReference parseToCache(final CharSequence reference) {
+        final FieldReference result = parse(reference);
+        CACHE.put(reference, result);
+        return result;
+    }
+
+    private static FieldReference parse(final CharSequence reference) {
+        final String[] parts = SPLIT_PATTERN.split(reference);
+        final List<String> path = new ArrayList<>(parts.length);
+        for (final String part : parts) {
+            if (!part.isEmpty()) {
+                path.add(part.intern());
+            }
+        }
+        final String key = path.remove(path.size() - 1).intern();
+        final boolean empty = path.isEmpty();
+        if (empty && key.equals(Event.METADATA)) {
+            return METADATA_PARENT_REFERENCE;
+        } else if (!empty && path.get(0).equals(Event.METADATA)) {
+            return deduplicate(new FieldReference(
+                path.subList(1, path.size()).toArray(EMPTY_STRING_ARRAY), key, META_CHILD));
+        } else {
+            return deduplicate(
+                new FieldReference(path.toArray(EMPTY_STRING_ARRAY), key, DATA_CHILD));
+        }
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/PathCache.java b/logstash-core/src/main/java/org/logstash/PathCache.java
deleted file mode 100644
index c54c4a66991..00000000000
--- a/logstash-core/src/main/java/org/logstash/PathCache.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.logstash;
-
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-public final class PathCache {
-
-    private static final Map<CharSequence, FieldReference> CACHE =
-        new ConcurrentHashMap<>(64, 0.2F, 1);
-
-    private PathCache() {
-    }
-
-    public static FieldReference cache(final CharSequence reference) {
-        // atomicity between the get and put is not important
-        final FieldReference result = CACHE.get(reference);
-        if (result != null) {
-            return result;
-        }
-        return parseToCache(reference);
-    }
-
-    private static FieldReference parseToCache(final CharSequence reference) {
-        final FieldReference result = FieldReference.parse(reference);
-        CACHE.put(reference, result);
-        return result;
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
index d58b9e106db..d80804f3731 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
@@ -34,7 +34,6 @@
 import org.logstash.Event;
 import org.logstash.FieldReference;
 import org.logstash.FileLockFactory;
-import org.logstash.PathCache;
 import org.logstash.Timestamp;
 
 import static org.logstash.common.io.RecordIOWriter.RECORD_HEADER_SIZE;
@@ -47,7 +46,7 @@ public final class DeadLetterQueueWriter implements Closeable {
     static final String SEGMENT_FILE_PATTERN = "%d.log";
     static final String LOCK_FILE = ".lock";
     private static final FieldReference DEAD_LETTER_QUEUE_METADATA_KEY =
-        PathCache.cache(String.format("%s[dead_letter_queue]", Event.METADATA_BRACKETS));
+        FieldReference.from(String.format("%s[dead_letter_queue]", Event.METADATA_BRACKETS));
     private final long maxSegmentSize;
     private final long maxQueueSize;
     private LongAdder currentQueueSize;
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
index 2253a631710..e385dc43755 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
@@ -12,7 +12,6 @@
 import org.logstash.ConvertedList;
 import org.logstash.ConvertedMap;
 import org.logstash.FieldReference;
-import org.logstash.PathCache;
 import org.logstash.RubyUtil;
 import org.logstash.Valuefier;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
@@ -246,13 +245,13 @@ private static EventCondition in(final In in) {
             final EventCondition condition;
             if (eAndV(in) && isScalar((ValueExpression) in.getRight())) {
                 condition = new EventCondition.Compiler.FieldInConstantScalar(
-                    PathCache.cache(((EventValueExpression) left).getFieldName()),
+                    FieldReference.from(((EventValueExpression) left).getFieldName()),
                     ((ValueExpression) right).get().toString()
                 );
             } else if (vAndE(in) && isScalar((ValueExpression) in.getLeft())) {
                 final Object leftv = ((ValueExpression) left).get();
                 final FieldReference rfield =
-                    PathCache.cache(((EventValueExpression) right).getFieldName());
+                    FieldReference.from(((EventValueExpression) right).getFieldName());
                 if (leftv instanceof String) {
                     condition = new EventCondition.Compiler.ConstantStringInField(
                         rfield, (String) leftv
@@ -276,7 +275,7 @@ private static EventCondition in(final In in) {
 
         private static EventCondition in(final EventValueExpression left, final List<?> right) {
             return new EventCondition.Compiler.FieldInConstantList(
-                PathCache.cache(left.getFieldName()), right
+                FieldReference.from(left.getFieldName()), right
             );
         }
 
@@ -317,7 +316,7 @@ private static boolean isScalar(final ValueExpression expression) {
         private static EventCondition in(final EventValueExpression left,
             final EventValueExpression right) {
             return new EventCondition.Compiler.FieldInField(
-                PathCache.cache(left.getFieldName()), PathCache.cache(right.getFieldName())
+                FieldReference.from(left.getFieldName()), FieldReference.from(right.getFieldName())
             );
         }
 
@@ -358,7 +357,7 @@ private static EventCondition eq(final Eq equals) {
         private static EventCondition eq(final EventValueExpression first,
             final EventValueExpression second) {
             return new EventCondition.Compiler.FieldEqualsField(
-                PathCache.cache(first.getFieldName()), PathCache.cache(second.getFieldName())
+                FieldReference.from(first.getFieldName()), FieldReference.from(second.getFieldName())
             );
         }
 
@@ -390,7 +389,7 @@ private static EventCondition gt(final EventValueExpression left,
         }
 
         private static EventCondition truthy(final EventValueExpression evalE) {
-            return new EventCondition.Compiler.FieldTruthy(PathCache.cache(evalE.getFieldName()));
+            return new EventCondition.Compiler.FieldTruthy(FieldReference.from(evalE.getFieldName()));
         }
 
         private static EventCondition[] booleanPair(final BinaryBooleanExpression expression) {
@@ -499,7 +498,7 @@ private static final class FieldGreaterThanString implements EventCondition {
             private final RubyString value;
 
             private FieldGreaterThanString(final String field, final String value) {
-                this.field = PathCache.cache(field);
+                this.field = FieldReference.from(field);
                 this.value = RubyUtil.RUBY.newString(value);
             }
 
@@ -518,7 +517,7 @@ private static final class FieldGreaterThanNumber implements EventCondition {
             private final RubyNumeric value;
 
             private FieldGreaterThanNumber(final String field, final RubyNumeric value) {
-                this.field = PathCache.cache(field);
+                this.field = FieldReference.from(field);
                 this.value = value;
             }
 
@@ -537,7 +536,7 @@ private static final class FieldEqualsString implements EventCondition {
             private final RubyString value;
 
             private FieldEqualsString(final String field, final String value) {
-                this.field = PathCache.cache(field);
+                this.field = FieldReference.from(field);
                 this.value = RubyUtil.RUBY.newString(value);
             }
 
@@ -555,7 +554,7 @@ private static final class FieldEqualsLong implements EventCondition {
             private final long value;
 
             private FieldEqualsLong(final String field, final long value) {
-                this.field = PathCache.cache(field);
+                this.field = FieldReference.from(field);
                 this.value = value;
             }
 
@@ -591,7 +590,7 @@ private static final class FieldMatches implements EventCondition {
             private final RubyString regex;
 
             private FieldMatches(final String field, final String regex) {
-                this.field = PathCache.cache(field);
+                this.field = FieldReference.from(field);
                 this.regex = RubyUtil.RUBY.newString(regex);
             }
 
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 0342182b305..aaa169fb03b 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -22,7 +22,6 @@
 import org.logstash.ConvertedMap;
 import org.logstash.Event;
 import org.logstash.FieldReference;
-import org.logstash.PathCache;
 import org.logstash.RubyUtil;
 import org.logstash.Rubyfier;
 import org.logstash.Valuefier;
@@ -117,14 +116,14 @@ public IRubyObject ruby_get_field(ThreadContext context, RubyString reference)
         {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.getUnconvertedField(PathCache.cache(reference.getByteList()))
+                this.event.getUnconvertedField(FieldReference.from(reference.getByteList()))
             );
         }
 
         @JRubyMethod(name = "set", required = 2)
         public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, IRubyObject value)
         {
-            final FieldReference r = PathCache.cache(reference.getByteList());
+            final FieldReference r = FieldReference.from(reference.getByteList());
             if (r  == FieldReference.TIMESTAMP_REFERENCE) {
                 if (!(value instanceof JrubyTimestampExtLibrary.RubyTimestamp)) {
                     throw context.runtime.newTypeError("wrong argument type " + value.getMetaClass() + " (expected LogStash::Timestamp)");
@@ -159,7 +158,7 @@ public IRubyObject ruby_cancelled(ThreadContext context)
         @JRubyMethod(name = "include?", required = 1)
         public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
             return RubyBoolean.newBoolean(
-                context.runtime, this.event.includes(PathCache.cache(reference.getByteList()))
+                context.runtime, this.event.includes(FieldReference.from(reference.getByteList()))
             );
         }
 
@@ -167,7 +166,7 @@ public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
         public IRubyObject ruby_remove(ThreadContext context, RubyString reference) {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.remove(PathCache.cache(reference.getByteList()))
+                this.event.remove(FieldReference.from(reference.getByteList()))
             );
         }
 
diff --git a/logstash-core/src/test/java/org/logstash/AccessorsTest.java b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
index c517da040cd..9906b9e741b 100644
--- a/logstash-core/src/test/java/org/logstash/AccessorsTest.java
+++ b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
@@ -188,19 +188,19 @@ public void testListIndexOutOfBounds() {
     }
 
     private static Object get(final ConvertedMap data, final CharSequence reference) {
-        return Accessors.get(data, PathCache.cache(reference));
+        return Accessors.get(data, FieldReference.from(reference));
     }
 
     private static Object set(final ConvertedMap data, final CharSequence reference,
         final Object value) {
-        return Accessors.set(data, PathCache.cache(reference), value);
+        return Accessors.set(data, FieldReference.from(reference), value);
     }
 
     private static Object del(final ConvertedMap data, final CharSequence reference) {
-        return Accessors.del(data, PathCache.cache(reference));
+        return Accessors.del(data, FieldReference.from(reference));
     }
 
     private static boolean includes(final ConvertedMap data, final CharSequence reference) {
-        return Accessors.includes(data, PathCache.cache(reference));
+        return Accessors.includes(data, FieldReference.from(reference));
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index 68d1527b3c4..d3769b69629 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -10,34 +10,34 @@ public final class FieldReferenceTest {
 
     @Test
     public void testParseSingleBareField() throws Exception {
-        FieldReference f = FieldReference.parse("foo");
+        FieldReference f = FieldReference.from("foo");
         assertEquals(0, f.getPath().length);
         assertEquals(f.getKey(), "foo");
     }
 
     @Test
     public void testParseSingleFieldPath() throws Exception {
-        FieldReference f = FieldReference.parse("[foo]");
+        FieldReference f = FieldReference.from("[foo]");
         assertEquals(0, f.getPath().length);
         assertEquals(f.getKey(), "foo");
     }
 
     @Test
     public void testParse2FieldsPath() throws Exception {
-        FieldReference f = FieldReference.parse("[foo][bar]");
+        FieldReference f = FieldReference.from("[foo][bar]");
         assertArrayEquals(f.getPath(), new String[]{"foo"});
         assertEquals(f.getKey(), "bar");
     }
 
     @Test
     public void testParse3FieldsPath() throws Exception {
-        FieldReference f = FieldReference.parse("[foo][bar]]baz]");
+        FieldReference f = FieldReference.from("[foo][bar]]baz]");
         assertArrayEquals(f.getPath(), new String[]{"foo", "bar"});
         assertEquals(f.getKey(), "baz");
     }
 
     @Test
     public void deduplicatesTimestamp() throws Exception {
-        assertTrue(FieldReference.parse("@timestamp") == FieldReference.parse("[@timestamp]"));
+        assertTrue(FieldReference.from("@timestamp") == FieldReference.from("[@timestamp]"));
     }
 }
