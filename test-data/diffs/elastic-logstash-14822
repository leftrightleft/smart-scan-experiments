diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.go
index 09484a36502..dcb3a3432fe 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.go
@@ -3,16 +3,15 @@
 // Merge environment variables into logstash.yml.
 // For example, running Docker with:
 //
-//   docker run -e pipeline.workers=6
+//	docker run -e pipeline.workers=6
 //
 // or
 //
-//   docker run -e PIPELINE_WORKERS=6
+//	docker run -e PIPELINE_WORKERS=6
 //
 // will cause logstash.yml to contain the line:
 //
-//   pipeline.workers: 6
-//
+//	pipeline.workers: 6
 package main
 
 import (
@@ -72,6 +71,7 @@ func normalizeSetting(setting string) (string, error) {
 		"config.debug",
 		"config.support_escapes",
 		"config.field_reference.escape_style",
+		"event_api.tags.illegal",
 		"queue.type",
 		"path.queue",
 		"queue.page_capacity",
diff --git a/docs/static/settings-file.asciidoc b/docs/static/settings-file.asciidoc
index b4770e92771..af3c21a91b8 100644
--- a/docs/static/settings-file.asciidoc
+++ b/docs/static/settings-file.asciidoc
@@ -346,4 +346,10 @@ separating each log lines per pipeline could be helpful in case you need to trou
 | `allow_superuser`
 | Setting to `true` to allow or `false` to block running Logstash as a superuser.
 | `true`
+
+| `event_api.tags.illegal`
+| When set to `warn`, allow illegal value assignment to the reserved `tags` field.
+When set to `rename`, Logstash events can't be created with an illegal value in `tags`. This value will be moved to `_tags` and a `_tagsparsefailure` tag is added to indicate the illegal operation. Doing `set` operation with illegal value will throw exception.
+Setting this flag to `warn` is deprecated and will be removed in a future release.
+| `rename`
 |=======================================================================
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 648bf1df138..829c64b597a 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -51,6 +51,7 @@ module Environment
          Setting::TimeValue.new("config.reload.interval", "3s"), # in seconds
            Setting::Boolean.new("config.support_escapes", false),
             Setting::String.new("config.field_reference.escape_style", "none", true, %w(none percent ampersand)),
+            Setting::String.new("event_api.tags.illegal", "rename", true, %w(rename warn)),
            Setting::Boolean.new("metric.collect", true),
             Setting::String.new("metric.timers", "delayed", true, %w(delayed live)),
             Setting::String.new("pipeline.id", "main"),
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 14541c728a0..77a60208059 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -91,6 +91,11 @@ class LogStash::Runner < Clamp::StrictCommand
          :default => LogStash::SETTINGS.get_default("config.field_reference.escape_style"),
          :attribute_name => "config.field_reference.escape_style"
 
+  option ["--event_api.tags.illegal"], "STRING",
+         I18n.t("logstash.runner.flag.event_api.tags.illegal"),
+         :default => LogStash::SETTINGS.get_default("event_api.tags.illegal"),
+         :attribute_name => "event_api.tags.illegal"
+
   # Module settings
   option ["--modules"], "MODULES",
     I18n.t("logstash.runner.flag.modules"),
@@ -337,6 +342,12 @@ def execute
     logger.debug("Setting global FieldReference escape style: #{field_reference_escape_style}")
     org.logstash.FieldReference::set_escape_style(field_reference_escape_style)
 
+    tags_illegal_setting = settings.get_setting('event_api.tags.illegal').value
+    if tags_illegal_setting == 'warn'
+      deprecation_logger.deprecated(I18n.t("logstash.runner.tags-illegal-warning"))
+      org.logstash.Event::set_illegal_tags_action(tags_illegal_setting)
+    end
+
     return start_shell(setting("interactive"), binding) if setting("interactive")
 
     module_parser = LogStash::Modules::CLIParser.new(setting("modules_list"), setting("modules_variable_list"))
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 7be72b006e5..a801bab56cb 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -147,6 +147,9 @@ en:
       configtest-flag-information: |-
         You may be interested in the '--configtest' flag which you can use to validate
         logstash's configuration before you choose to restart a running system.
+      tags-illegal-warning: >-
+        Setting `event_api.tags.illegal` to `warn` allows illegal values in the reserved `tags` field, which may crash pipeline unexpectedly.
+        This flag value is deprecated and may be removed in a future release.
       # YAML named reference to the logstash.runner.configuration
       # so we can later alias it from logstash.agent.configuration
       configuration: &runner_configuration
@@ -252,6 +255,23 @@ en:
              HTML-style ampersand-hash encoding notation
              representing decimal unicode codepoints
              (`[` is `&#91;`; `]` is `&#93;`).
+        event_api:
+          tags:
+            illegal: |+
+              The top-level `tags` field is reserved, and may only contain a
+              single `string` or an array of `string`s -- other values will cause
+              subsequent access of the `tags` field to crash the pipeline.
+              This flag controls how the Event API handles a `tags` field that is
+              an illegal shape, such as a key-value map.
+              
+              Available options are:
+               - `rename`: illegal value in `tags` will be moved to `_tags`.
+                 A tag `_tagsparsefailure` is added to `tags` field to 
+                 indicate the illegal assignment. Doing `set` operation with 
+                 illegal value will throw exception. This is the default option.
+               - `warn`: allow illegal value assignment and print warning
+                 at startup. This option is deprecated and slated
+                 for removal.
         modules: |+
           Load Logstash modules.
           Modules can be defined using multiple instances
diff --git a/logstash-core/spec/logstash/filters/base_spec.rb b/logstash-core/spec/logstash/filters/base_spec.rb
index c30f703db00..ee390691b4e 100644
--- a/logstash-core/spec/logstash/filters/base_spec.rb
+++ b/logstash-core/spec/logstash/filters/base_spec.rb
@@ -379,8 +379,8 @@ def filter(event)
     }
     CONFIG
 
-    sample_one("type" => "noop", "go" => "away", "tags" => {"blackhole" => "go"}) do
-      expect(subject.get("[tags][blackhole]")).to eq("go")
+    sample_one("type" => "noop", "go" => "away", "tags" => "blackhole") do
+      expect(subject.get("[tags]")).to eq("blackhole")
     end
 
   end
@@ -393,8 +393,8 @@ def filter(event)
         }
       CONFIG
 
-      sample_one("type" => "noop", "tags" => {"blackhole" => "go"}) do
-        expect(subject.get("[tags][blackhole]")).to eq("go")
+      sample_one("type" => "noop", "tags" => "blackhole") do
+        expect(subject.get("[tags]")).to eq("blackhole")
       end
     end
   end
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index a991563db99..0621fb94c7a 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -40,6 +40,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 import static org.logstash.ObjectMappers.CBOR_MAPPER;
 import static org.logstash.ObjectMappers.JSON_MAPPER;
@@ -62,9 +63,16 @@ public final class Event implements Cloneable, Queueable, co.elastic.logstash.ap
     public static final String VERSION_ONE = "1";
     private static final String DATA_MAP_KEY = "DATA";
     private static final String META_MAP_KEY = "META";
+    public static final String TAGS = "tags";
+    public static final String TAGS_FAILURE_TAG = "_tagsparsefailure";
+    public static final String TAGS_FAILURE = "_tags";
+
+    enum IllegalTagsAction { RENAME, WARN }
+    private static IllegalTagsAction ILLEGAL_TAGS_ACTION = IllegalTagsAction.RENAME;
+
+    private static final FieldReference TAGS_FIELD = FieldReference.from(TAGS);
+    private static final FieldReference TAGS_FAILURE_FIELD = FieldReference.from(TAGS_FAILURE);
 
-    private static final FieldReference TAGS_FIELD = FieldReference.from("tags");
-    
     private static final Logger logger = LogManager.getLogger(Event.class);
 
     public Event()
@@ -106,6 +114,15 @@ public Event(ConvertedMap data) {
         }
         this.cancelled = false;
 
+        // guard tags field from key/value map, only string or list is allowed
+        if (ILLEGAL_TAGS_ACTION == IllegalTagsAction.RENAME) {
+            final Object tags = Accessors.get(data, TAGS_FIELD);
+            if (!isLegalTagValue(tags)) {
+                initFailTag(tags);
+                initTag(TAGS_FAILURE_TAG);
+            }
+        }
+
         Object providedTimestamp = data.get(TIMESTAMP);
         // keep reference to the parsedTimestamp for tagging below
         Timestamp parsedTimestamp = initTimestamp(providedTimestamp);
@@ -200,6 +217,13 @@ public void setField(final String reference, final Object value) {
 
     @SuppressWarnings("unchecked")
     public void setField(final FieldReference field, final Object value) {
+        if (ILLEGAL_TAGS_ACTION == IllegalTagsAction.RENAME) {
+            if ((field.equals(TAGS_FIELD) && !isLegalTagValue(value)) ||
+                    isTagsWithMap(field)) {
+                throw new InvalidTagsTypeException(field, value);
+            }
+        }
+
         switch (field.type()) {
             case FieldReference.META_PARENT:
                 // ConvertedMap.newFromMap already does valuefication
@@ -213,6 +237,25 @@ public void setField(final FieldReference field, final Object value) {
         }
     }
 
+    private boolean isTagsWithMap(final FieldReference field) {
+        return field.getPath() != null && field.getPath().length > 0 && field.getPath()[0].equals(TAGS);
+    }
+
+    private boolean isLegalTagValue(final Object value) {
+        if (value instanceof String || value instanceof RubyString || value == null) {
+            return true;
+        } else if (value instanceof List) {
+            for (Object item: (List) value) {
+                if (!(item instanceof String) && !(item instanceof RubyString)) {
+                    return false;
+                }
+            }
+            return true;
+        }
+
+        return false;
+    }
+
     @Override
     public boolean includes(final String field) {
         return includes(FieldReference.from(field));
@@ -483,6 +526,12 @@ private void appendTag(final List<String> tags, final String tag) {
         }
     }
 
+    private void initFailTag(final Object tag) {
+        final ConvertedList list = new ConvertedList(1);
+        list.add(tag);
+        Accessors.set(data, TAGS_FAILURE_FIELD, list);
+    }
+
     /**
      * Fallback for {@link Event#tag(String)} in case "tags" was populated by just a String value
      * and needs to be converted to a list before appending to it.
@@ -495,6 +544,14 @@ private void scalarTagFallback(final String existing, final String tag) {
         appendTag(tags, tag);
     }
 
+    public static void setIllegalTagsAction(final String action) {
+        ILLEGAL_TAGS_ACTION = IllegalTagsAction.valueOf(action.toUpperCase());
+    }
+
+    public static IllegalTagsAction getIllegalTagsAction() {
+        return ILLEGAL_TAGS_ACTION;
+    }
+
     @Override
     public byte[] serialize() throws JsonProcessingException {
         final Map<String, Map<String, Object>> map = new HashMap<>(2, 1.0F);
@@ -509,4 +566,21 @@ public static Event deserialize(byte[] data) throws IOException {
         }
         return fromSerializableMap(data);
     }
+
+    public static class InvalidTagsTypeException extends RuntimeException {
+        private static final long serialVersionUID = 1L;
+
+        public InvalidTagsTypeException(final FieldReference field, final Object value) {
+            super(String.format("Could not set the reserved tags field '%s' to value '%s'. " +
+                            "The tags field only accepts string or array of string.",
+                    getCanonicalFieldReference(field), value
+            ));
+        }
+
+        private static String getCanonicalFieldReference(final FieldReference field) {
+            List<String> path = new ArrayList<>(List.of(field.getPath()));
+            path.add(field.getKey());
+            return path.stream().collect(Collectors.joining("][", "[", "]"));
+        }
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index ff121413a79..2df3122dd41 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -245,13 +245,17 @@ private static FieldReference parse(final CharSequence reference) {
                 .map(ESCAPE_HANDLER::unescape)
                 .collect(Collectors.toList());
 
+        return fromTokens(path);
+    }
+
+    private static FieldReference fromTokens(final List<String> path) {
         final String key = path.remove(path.size() - 1);
         final boolean empty = path.isEmpty();
         if (empty && key.equals(Event.METADATA)) {
             return new FieldReference(EMPTY_STRING_ARRAY, key, META_PARENT);
         } else if (!empty && path.get(0).equals(Event.METADATA)) {
             return new FieldReference(
-                path.subList(1, path.size()).toArray(EMPTY_STRING_ARRAY), key, META_CHILD
+                    path.subList(1, path.size()).toArray(EMPTY_STRING_ARRAY), key, META_CHILD
             );
         } else {
             return new FieldReference(path.toArray(EMPTY_STRING_ARRAY), key, DATA_CHILD);
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index 9d7348d07e1..d326e7a4432 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -43,6 +43,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.logstash.Event.getIllegalTagsAction;
 
 public final class EventTest extends RubyTestBase {
 
@@ -516,4 +517,87 @@ public void removeMetadata() {
         assertTrue(event.getMetadata().isEmpty());
         assertFalse(event.includes("[@metadata][foo]"));
     }
+
+    @Test(expected = Event.InvalidTagsTypeException.class)
+    public void setTagsWithMapShouldThrow() {
+        final Event event = new Event();
+        event.setField("[tags][foo]", "bar");
+    }
+
+    @Test
+    public void createEventWithTagsWithMapShouldRename() {
+        final Event event = new Event(Map.of("tags", Map.of("poison", "true")));
+
+        assertEquals(event.getField(Event.TAGS), Collections.singletonList(Event.TAGS_FAILURE_TAG));
+        assertEquals(event.getField("[_tags][0][poison]"), "true");
+    }
+
+    @Test(expected = Event.InvalidTagsTypeException.class)
+    public void setTagsWithNumberShouldThrow() {
+        final Event event = new Event();
+        event.setField("[tags]", 123L);
+    }
+
+    @Test
+    public void allowTopLevelTagsString() {
+        final Event event = new Event();
+        event.setField("[tags]", "bar");
+
+        assertNull(event.getField(Event.TAGS_FAILURE));
+        assertEquals(event.getField("[tags]"), "bar");
+        
+        event.setField("[tags]", "foo");
+        assertEquals(event.getField("[tags]"), "foo");
+    }
+
+    @Test
+    public void createEventWithoutTagShouldHaveEmptyTags() {
+        final Event event = new Event(Map.of("world", "cup"));
+        assertNull(event.getField(Event.TAGS));
+        assertNull(event.getField(Event.TAGS_FAILURE));
+    }
+    
+    @Test
+    public void allowTopLevelTagsListOfStrings() {
+        final Event event = new Event();
+        event.setField("[tags]", List.of("foo", "bar"));
+
+        assertNull(event.getField(Event.TAGS_FAILURE));
+        assertEquals(event.getField("[tags]"), List.of("foo", "bar"));
+    }
+
+    @Test
+    public void allowTopLevelTagsWithMap() {
+        withIllegalTagsAction(Event.IllegalTagsAction.WARN, () -> {
+            final Event event = new Event();
+            event.setField("[tags][foo]", "bar");
+
+            assertNull(event.getField(Event.TAGS_FAILURE));
+            assertEquals(event.getField("[tags][foo]"), "bar");
+        });
+    }
+
+    @Test
+    public void allowCreatingEventWithTopLevelTagsWithMap() {
+        withIllegalTagsAction(Event.IllegalTagsAction.WARN, () -> {
+            Map<String, Object> inner = new HashMap<>();
+            inner.put("poison", "true");
+            Map<String, Object> data = new HashMap<>();
+            data.put("tags", inner);
+            final Event event = new Event(data);
+
+            assertNull(event.getField(Event.TAGS_FAILURE));
+            assertEquals(event.getField("[tags][poison]"), "true");
+        });
+    }
+    
+    private void withIllegalTagsAction(final Event.IllegalTagsAction temporaryIllegalTagsAction, final Runnable runnable) {
+        final Event.IllegalTagsAction previous = getIllegalTagsAction();
+        try {
+            Event.setIllegalTagsAction(temporaryIllegalTagsAction.toString());
+            runnable.run();
+        } finally {
+            Event.setIllegalTagsAction(previous.toString());
+        }
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index eda9d9627e7..652051b02c7 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -21,6 +21,7 @@
 package org.logstash;
 
 import java.lang.reflect.Field;
+import java.util.List;
 import java.util.Map;
 import org.hamcrest.CoreMatchers;
 import org.jruby.RubyString;
@@ -141,6 +142,22 @@ public void testEmbeddedDeepReference() throws Exception {
             assertEquals("baz", f.getKey());
         }
 
+        @Test
+        public void testParseMetadataParent() throws Exception {
+            FieldReference f = FieldReference.from("[@metadata]");
+            assertEquals(0, f.getPath().length);
+            assertEquals("@metadata", f.getKey());
+            assertEquals(FieldReference.META_PARENT, f.type());
+        }
+
+        @Test
+        public void testParseMetadataChild() throws Exception {
+            FieldReference f = FieldReference.from("[@metadata][nested][field]");
+            assertEquals(1, f.getPath().length);
+            assertEquals("field", f.getKey());
+            assertEquals(FieldReference.META_CHILD, f.type());
+        }
+
         @Test(expected = FieldReference.IllegalSyntaxException.class)
         public void testParseInvalidEmbeddedDeepReference() throws Exception {
             FieldReference f = FieldReference.from("[[foo][bar]nope][baz]");
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/CommonActionsTest.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/CommonActionsTest.java
index e43234facbc..aa24028edbf 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/CommonActionsTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/CommonActionsTest.java
@@ -245,11 +245,16 @@ public void testRemoveTag() {
         // remove tags when "tags" fields isn't tags
         e = new Event();
         Long nonTagValue = 42L;
-        e.setField(TAGS, nonTagValue);
+        try {
+            e.setField(TAGS, nonTagValue);
+        } catch (Event.InvalidTagsTypeException ex) {
+
+        }
+
         CommonActions.removeTag(e, Collections.singletonList(testTag));
         o = e.getField(TAGS);
         Assert.assertFalse(o instanceof List);
-        Assert.assertEquals(nonTagValue, o);
+        Assert.assertNull(o);
 
         // remove dynamically-named tag
         e = new Event();
diff --git a/qa/integration/fixtures/reserved_tags_field_spec.yml b/qa/integration/fixtures/reserved_tags_field_spec.yml
new file mode 100644
index 00000000000..02348fe41e9
--- /dev/null
+++ b/qa/integration/fixtures/reserved_tags_field_spec.yml
@@ -0,0 +1,54 @@
+---
+services:
+  - logstash
+config:
+  create_tags_map: |-
+    input {
+      generator {
+        message => '{"tags": {"poison":true} }'
+        codec => json
+        count => 1
+      }
+    }
+    output {
+      file {
+        path => "${TEMP_PATH}/create_tags_map.log"
+        flush_interval => 0
+        codec => json
+      }
+    }
+  create_tags_number: |-
+    input {
+      generator {
+        message => '{"tags": [1,2,3] }'
+        codec => json
+        count => 1
+      }
+    }
+    output {
+      file {
+        path => "${TEMP_PATH}/create_tags_number.log"
+        flush_interval => 0
+        codec => json
+      }
+    }
+  set_illegal_tags: |-
+    input {
+      generator {
+        message => '{"greeting": "hello"}'
+        codec => json
+        count => 1
+      }
+    }
+    filter {
+      ruby { code => "event.set('[tags]' , 123);" }
+      ruby { code => "event.set('[tags][poison]' , 'true');" }
+    }
+    output {
+      file {
+        path => "${TEMP_PATH}/set_illegal_tags.log"
+        flush_interval => 0
+        codec => json
+      }
+    }
+teardown_script:
diff --git a/qa/integration/specs/reserved_tags_field_spec.rb b/qa/integration/specs/reserved_tags_field_spec.rb
new file mode 100644
index 00000000000..c480f1ba9e1
--- /dev/null
+++ b/qa/integration/specs/reserved_tags_field_spec.rb
@@ -0,0 +1,83 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require_relative '../services/logstash_service'
+require_relative '../framework/helpers'
+require "logstash/devutils/rspec/spec_helper"
+
+# reserved tags should accept string and array of string only in rename mode
+describe "Guard reserved tags field against incorrect use" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+  }
+
+  before(:each) {
+    @logstash = @fixture.get_service("logstash")
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+
+  after(:each) {
+    @logstash.teardown
+  }
+
+  let(:num_retries) { 50 }
+  let(:test_path) { Stud::Temporary.directory }
+  let(:test_env) {
+    env = Hash.new
+    env["TEMP_PATH"] = test_path
+    env
+  }
+  let(:settings_dir) { Stud::Temporary.directory }
+
+
+  shared_examples_for 'assign illegal value to tags' do |mode, pipeline_fixture, tags_match, fail_tags_match|
+    it "[#{mode}] update tags and _tags successfully" do
+      @logstash.env_variables = test_env
+      @logstash.spawn_logstash("-f", config_to_temp_file(@fixture.config(pipeline_fixture)),
+                               "--event_api.tags.illegal", "#{mode}",
+                               "--path.settings", settings_dir)
+
+      Stud.try(num_retries.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
+        output = IO.read(File.join(test_path, "#{pipeline_fixture}.log"))
+        puts output
+        expect(output).to match tags_match
+        expect(output).to match fail_tags_match
+      end
+    end
+  end
+
+  describe 'create event' do
+    it_behaves_like 'assign illegal value to tags', 'rename', 'create_tags_map', /"tags":\["_tagsparsefailure"\]/, /"_tags":\[{"poison":true}\]/
+    it_behaves_like 'assign illegal value to tags', 'warn',  'create_tags_map', /"tags":{"poison":true}/, /(?!_tags)/
+    it_behaves_like 'assign illegal value to tags', 'rename', 'create_tags_number', /"tags":\["_tagsparsefailure"\]/, /"_tags":\[\[1,2,3\]\]/
+    it_behaves_like 'assign illegal value to tags', 'warn', 'create_tags_number', /"tags":\[1,2,3\]/, /(?!_tags)/
+  end
+
+  it "should throw exception when assigning two illegal values" do
+    ['rename', 'warn'].each do |mode|
+      logstash = @logstash.run_cmd(["bin/logstash","-e", @fixture.config('set_illegal_tags').gsub("\n", ""),
+                                    "--path.settings", settings_dir, "--event_api.tags.illegal", mode],
+                                   true, test_env)
+      expect(logstash.stderr_and_stdout).to match(/Ruby exception occurred/)
+    end
+  end
+end
\ No newline at end of file
