diff --git a/lib/logstash/filters/unique.rb b/lib/logstash/filters/unique.rb
new file mode 100644
index 00000000000..22e06c72c7c
--- /dev/null
+++ b/lib/logstash/filters/unique.rb
@@ -0,0 +1,28 @@
+require "logstash/filters/base"
+require "logstash/namespace"
+
+class LogStash::Filters::Unique < LogStash::Filters::Base
+
+  config_name "unique"
+  milestone 1
+
+  # The fields on which to run the unique filter.
+  config :fields, :validate => :array, :required => true
+
+  public
+  def register
+    # Nothing to do
+  end # def register
+
+  public
+  def filter(event)
+    return unless filter?(event)
+
+    @fields.each do |field|
+      next unless event[field].class == Array
+
+      event[field] = event[field].uniq
+    end
+  end # def filter
+
+end # class Logstash::Filters::Unique
diff --git a/spec/filters/unique.rb b/spec/filters/unique.rb
new file mode 100644
index 00000000000..6d9d42f9dfd
--- /dev/null
+++ b/spec/filters/unique.rb
@@ -0,0 +1,25 @@
+require "test_utils"
+require "logstash/filters/unique"
+
+describe LogStash::Filters::Unique do
+  extend LogStash::RSpec
+
+  describe "unique when field is array" do
+    config <<-CONFIG
+    filter {
+      unique {
+        fields => ["noisy_field", "not_an_array"]
+      }
+    }
+    CONFIG
+
+    sample("noisy_field" => %w(cat dog cat cat)) do
+      insist { subject["noisy_field"] } == %w(cat dog)
+    end
+
+    sample("not_an_array" => "Hello, world!") do
+      insist { subject["not_an_array"] } == "Hello, world!"
+    end
+
+  end
+end
