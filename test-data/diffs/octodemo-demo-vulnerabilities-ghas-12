diff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml
index 307d181c..aa343263 100644
--- a/.github/workflows/codeql.yml
+++ b/.github/workflows/codeql.yml
@@ -1,13 +1,27 @@
-name: CodeQL
+name: "CodeQL"
 
 on:
   push:
-    
-jobs:
-  build:
+    branches: [ main ]
+  pull_request:
+    # The branches below must be a subset of the branches above
+    branches: [ main ]
+  schedule:
+    - cron: '17 19 * * 6'
 
+jobs:
+  analyze:
+    name: Analyze
     runs-on: ubuntu-latest
 
+    strategy:
+      fail-fast: false
+      matrix:
+        language: [ 'java', 'javascript' ]
+        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
+        # Learn more:
+        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
+
     steps:
     - name: Checkout repository
       uses: actions/checkout@v2
@@ -15,7 +29,7 @@ jobs:
     - name: Initialize CodeQL
       uses: github/codeql-action/init@v1
       with:
-        languages: javascript, java
+        languages: ${{ matrix.language }}
 
 #   This repo fails to use the Autobuild from CodeQL
 #    - name: Autobuild
diff --git a/README.md b/README.md
index 78b6ba95..7b481222 100755
--- a/README.md
+++ b/README.md
@@ -35,4 +35,4 @@ You can check the results of its runs on the [Security Tab](https://github.com/o
 #### `dependencies.yml`
 Workflow that checks every new PR that changes dependencies files. If the PR introduces dependencies with known vulnerabilities, it fails. PRs that don't change dependencies are not checked.
 
-Uses [this Action](https://github.com/marketplace/actions/scan-a-pr-for-vulnerable-dependencies) to perform the analysis on non-default branches. The Action uses GitHub's [SecurityVulnerability API](https://developer.github.com/v4/object/securityvulnerability/)
+Uses [this Action](https://github.com/marketplace/actions/scan-a-pr-for-vulnerable-dependencies) to perform the analysis on non-default branches. The Action uses GitHub's [SecurityVulnerability API](https://developer.github.com/v4/object/securityvulnerability/) 
diff --git a/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java b/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
index b47254b6..a30f1abd 100644
--- a/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
+++ b/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
@@ -76,6 +76,12 @@ public void runTests() {
         params.put("action_string", sql_13);
         checkAssignment(url("/WebGoat/SqlInjection/attack10"), params, true);
 
+        params.clear();
+        params.put("name", sql_12_a);
+        params.put("auth_tan", sql_12_b);
+        checkAssignment(url("/WebGoat/SqlInjection/attack11"), params, true);
+
+        
         checkResults("/SqlInjection/");
 
     }
diff --git a/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson11.java b/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson11.java
new file mode 100644
index 00000000..e6a36b26
--- /dev/null
+++ b/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson11.java
@@ -0,0 +1,113 @@
+
+/*
+ * This file is part of WebGoat, an Open Web Application Security Project utility. For details, please see http://www.owasp.org/
+ *
+ * Copyright (c) 2002 - 2019 Bruce Mayhew
+ *
+ * This program is free software; you can redistribute it and/or modify it under the terms of the
+ * GNU General Public License as published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with this program; if
+ * not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Getting Source ==============
+ *
+ * Source for this application is maintained at https://github.com/WebGoat/WebGoat, a repository for free software projects.
+ */
+
+package org.owasp.webgoat.sql_injection.introduction;
+
+import org.owasp.webgoat.assignments.AssignmentEndpoint;
+import org.owasp.webgoat.assignments.AssignmentHints;
+import org.owasp.webgoat.assignments.AttackResult;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.RestController;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import static org.hsqldb.jdbc.JDBCResultSet.CONCUR_UPDATABLE;
+import static org.hsqldb.jdbc.JDBCResultSet.TYPE_SCROLL_SENSITIVE;
+
+@RestController
+@AssignmentHints(value = {"SqlStringInjectionHint.11.1", "SqlStringInjectionHint.11.2", "SqlStringInjectionHint.11.3", "SqlStringInjectionHint.11.4", "SqlStringInjectionHint.11.5"})
+public class SqlInjectionLesson11 extends AssignmentEndpoint {
+
+    private final DataSource dataSource;
+
+    public SqlInjectionLesson11(DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    @PostMapping("/SqlInjection/attack11")
+    @ResponseBody
+    public AttackResult completed(@RequestParam String name, @RequestParam String auth_tan) {
+        return injectableQueryIntegrity(name, auth_tan);
+    }
+
+    protected AttackResult injectableQueryIntegrity(String name, String auth_tan) {
+        StringBuffer output = new StringBuffer();
+        String query = "SELECT * FROM employees WHERE last_name = '" + name + "' AND auth_tan = '" + auth_tan + "'";
+        try (Connection connection = dataSource.getConnection()) {
+            try {
+                Statement statement = connection.createStatement(TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);
+                SqlInjectionLesson8.log(connection, query);
+                ResultSet results = statement.executeQuery(query);
+                var test = results.getRow() != 0;
+                if (results.getStatement() != null) {
+                    if (results.first()) {
+                        output.append(SqlInjectionLesson8.generateTable(results));
+                    } else {
+                        // no results
+                        return failed(this).feedback("sql-injection.8.no.results").build();
+                    }
+                }
+            } catch (SQLException e) {
+                System.err.println(e.getMessage());
+                return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+            }
+
+            return checkSalaryRanking(connection, output);
+
+        } catch (Exception e) {
+            System.err.println(e.getMessage());
+            return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+        }
+    }
+
+    private AttackResult checkSalaryRanking(Connection connection, StringBuffer output) {
+        try {
+            String query = "SELECT * FROM employees ORDER BY salary DESC";
+            try (Statement statement = connection.createStatement(TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);
+            ) {
+                ResultSet results = statement.executeQuery(query);
+
+                results.first();
+                // user completes lesson if John Smith is the first in the list
+                if ((results.getString(2).equals("John")) && (results.getString(3).equals("Smith"))) {
+                    output.append(SqlInjectionLesson8.generateTable(results));
+                    return success(this).feedback("sql-injection.11.success").output(output.toString()).build();
+                } else {
+                    return failed(this).feedback("sql-injection.11.one").output(output.toString()).build();
+                }
+            }
+        } catch (SQLException e) {
+            return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+        }
+    }
+
+}
+
+
+/** Re-run checks **/
diff --git a/webgoat-lessons/sql-injection/src/main/resources/html/SqlInjection.html b/webgoat-lessons/sql-injection/src/main/resources/html/SqlInjection.html
index faf82430..b71a3857 100644
--- a/webgoat-lessons/sql-injection/src/main/resources/html/SqlInjection.html
+++ b/webgoat-lessons/sql-injection/src/main/resources/html/SqlInjection.html
@@ -299,4 +299,33 @@
     </div>
 </div>
 
+<!--Page 11-->
+<div class="lesson-page-wrapper">
+    <div class="adoc-content" th:replace="doc:SqlInjection_introduction_content9.adoc"></div>
+    <div class="attack-container">
+        <div class="assignment-success"><i class="fa fa-2 fa-check hidden" aria-hidden="true"></i></div>
+        <form class="attack-form" accept-charset="UNKNOWN"
+              method="POST" name="form"
+              action="/WebGoat/SqlInjection/attack11"
+              enctype="application/json;charset=UTF-8"
+              autocomplete="off">
+            <table>
+                <tr>
+                    <td><label>Employee Name:</label></td>
+                    <td><input name="name" value="" type="TEXT" placeholder="Lastname"/></td>
+                </tr>
+                <tr>
+                    <td><label>Authentication TAN:</label></td>
+                    <td><input name="auth_tan" value="" type="TEXT" placeholder="TAN"/></td>
+                </tr>
+                <tr>
+                    <td><button type="SUBMIT">Get department</button></td>
+                </tr>
+            </table>
+        </form>
+        <div class="attack-feedback"></div>
+        <div class="attack-output"></div>
+    </div>
+</div>
+
 </html>
diff --git a/webgoat-lessons/sql-injection/src/main/resources/i18n/WebGoatLabels.properties b/webgoat-lessons/sql-injection/src/main/resources/i18n/WebGoatLabels.properties
index b2544c04..437f1dae 100644
--- a/webgoat-lessons/sql-injection/src/main/resources/i18n/WebGoatLabels.properties
+++ b/webgoat-lessons/sql-injection/src/main/resources/i18n/WebGoatLabels.properties
@@ -69,6 +69,15 @@ SqlStringInjectionHint.9.3=Make use of DML to change your salary.
 SqlStringInjectionHint.9.4=Make sure that the resulting query is syntactically correct.
 SqlStringInjectionHint.9.5=How about something like '; UPDATE employees....
 
+sql-injection.11.success=<span class='feedback-positive'>Well done! Now you are earning the most money. And at the same time you successfully compromised the integrity of data by changing the salary!</span>
+sql-injection.11.one=<span class='feedback-negative'>Still not earning enough! Better try again and change that.</span>
+SqlStringInjectionHint.11.1=Try to find a way, to chain another query to the end of the existing one.
+SqlStringInjectionHint.11.2=Use the ; metacharacter to do so.
+SqlStringInjectionHint.11.3=Make use of DML to change your salary.
+SqlStringInjectionHint.11.4=Make sure that the resulting query is syntactically correct.
+SqlStringInjectionHint.11.5=How about something like '; UPDATE employees....
+
+
 sql-injection.10.success=<span class='feedback-positive'>Success! You successfully deleted the access_log table and that way compromised the availability of the data.</span>
 sql-injection.10.entries=<span class='feedback-negative'>There is still evidence of what you did. Better remove the whole table.</span>
 
