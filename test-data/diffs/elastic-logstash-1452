diff --git a/lib/logstash/codecs/line.rb b/lib/logstash/codecs/line.rb
index f673708a568..12107e569eb 100644
--- a/lib/logstash/codecs/line.rb
+++ b/lib/logstash/codecs/line.rb
@@ -48,7 +48,7 @@ def flush(&block)
 
   public
   def encode(event)
-    if data.is_a? LogStash::Event and @format
+    if event.is_a? LogStash::Event and @format
       @on_event.call(event.sprintf(@format) + NL)
     else
       @on_event.call(event.to_s + NL)
diff --git a/spec/codecs/line.rb b/spec/codecs/line.rb
new file mode 100644
index 00000000000..e53a128b88b
--- /dev/null
+++ b/spec/codecs/line.rb
@@ -0,0 +1,51 @@
+# encoding: utf-8
+
+require "logstash/codecs/line"
+require "logstash/event"
+
+describe LogStash::Codecs::Line do
+  subject do
+    next LogStash::Codecs::Line.new
+  end
+
+  context "#encode" do
+    let (:event) {LogStash::Event.new({"message" => "hello world", "host" => "test"})}
+
+    it "should return a default date formatted line" do
+      expect(subject).to receive(:on_event).once.and_call_original
+      subject.on_event do |d|
+        insist {d} == event.to_s + "\n"
+      end
+      subject.encode(event)
+    end
+
+    it "should respect the supplied format" do
+      format = "%{host}"
+      subject.format = format
+      expect(subject).to receive(:on_event).once.and_call_original
+      subject.on_event do |d|
+        insist {d} == event.sprintf(format) + "\n"
+      end
+      subject.encode(event)
+    end
+  end
+
+  context "#decode" do
+    it "should return an event from an ascii string" do
+      decoded = false
+      subject.decode("hello world\n") do |e|
+        decoded = true
+        insist { e.is_a?(LogStash::Event) }
+        insist { e["message"] } == "hello world"
+      end
+      insist { decoded } == true
+    end
+
+    it "should return an event from a valid utf-8 string" do
+      subject.decode("München\n") do |e|
+        insist { e.is_a?(LogStash::Event) }
+        insist { e["message"] } == "München"
+      end
+    end
+  end
+end
