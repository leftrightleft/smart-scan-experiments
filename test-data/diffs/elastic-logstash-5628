diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index f3f95e4f479..1412cfa9ea7 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -210,12 +210,6 @@ def set(value)
       end
     end
 
-    class String < Setting
-      def initialize(name, default=nil, strict=true)
-        super(name, ::String, default, strict)
-      end
-    end
-
     class Numeric < Setting
       def initialize(name, default=nil, strict=true)
         super(name, ::Numeric, default, strict)
@@ -241,11 +235,15 @@ def validate(value)
 
     class String < Setting
       def initialize(name, default=nil, strict=true, possible_strings=[])
+        @possible_strings = possible_strings
         super(name, ::String, default, strict)
       end
 
       def validate(value)
-        super(value) && possible_strings.include?(value)
+        super(value)
+        unless @possible_strings.empty? || @possible_strings.include?(value)
+          raise ArgumentError.new("invalid value \"#{value}\". Options are: #{@possible_strings.inspect}")
+        end
       end
     end
 
diff --git a/logstash-core/spec/logstash/settings/string_spec.rb b/logstash-core/spec/logstash/settings/string_spec.rb
new file mode 100644
index 00000000000..edd4dc4057c
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/string_spec.rb
@@ -0,0 +1,21 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/settings"
+
+describe LogStash::Setting::String do
+  let(:possible_values) { ["a", "b", "c"] }
+  subject { described_class.new("mytext", nil, false, possible_values) }
+  describe "#set" do
+    context "when a value is given outside of possible_values" do
+      it "should raise an ArgumentError" do
+        expect { subject.set("d") }.to raise_error(ArgumentError)
+      end
+    end
+    context "when a value is given within possible_values" do
+      it "should set the value" do
+        expect { subject.set("a") }.to_not raise_error
+        expect(subject.value).to eq("a")
+      end
+    end
+  end
+end
