diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 3f59cc0e715..b3f15dc911a 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -27,6 +27,22 @@ class LogStash::Outputs::Base < LogStash::Plugin
 
   attr_reader :worker_plugins, :available_workers, :workers, :worker_plugins, :workers_not_supported
 
+    # Set or return concurrency type
+  def self.concurrency(type=nil)
+    if type
+      @concurrency = type
+      
+      if type == :shared
+        declare_threadsafe!
+      elsif type == :single
+        declare_workers_not_supported!("This plugin only supports one worker!")
+      end
+      
+    else
+      @concurrency || :legacy # default is :legacyo
+    end
+  end
+
   def self.declare_threadsafe!
     declare_workers_not_supported!
     @threadsafe = true
@@ -77,6 +93,11 @@ def receive(event)
     raise "#{self.class}#receive must be overidden"
   end # def receive
 
+  public
+  def concurrency
+    self.class.concurrency
+  end
+
   public
   # To be overriden in implementations
   def multi_receive(events)
diff --git a/logstash-core/spec/logstash/outputs/base_spec.rb b/logstash-core/spec/logstash/outputs/base_spec.rb
index 44d49a60b99..786cbcaee22 100644
--- a/logstash-core/spec/logstash/outputs/base_spec.rb
+++ b/logstash-core/spec/logstash/outputs/base_spec.rb
@@ -15,6 +15,31 @@ def receive(event)
   end
 end
 
+
+# use a dummy NOOP output to test Outputs::Base
+class LogStash::Outputs::NOOPSingle < LogStash::Outputs::Base
+  config_name "noop single"
+  concurrency :single
+
+  config :dummy_option, :validate => :string
+
+  def register; end
+
+  def receive(event)
+    return output?(event)
+  end
+end
+
+class LogStash::Outputs::NOOPShared < ::LogStash::Outputs::Base
+  concurrency :shared
+  
+  def register; end
+end
+
+class LogStash::Outputs::NOOPLegacy < ::LogStash::Outputs::Base
+  def register; end
+end
+
 class LogStash::Outputs::NOOPLegacyNoWorkers < ::LogStash::Outputs::Base
   LEGACY_WORKERS_NOT_SUPPORTED_REASON = "legacy reason"
 
@@ -24,6 +49,42 @@ def register
 end
 
 describe "LogStash::Outputs::Base#new" do
+  describe "concurrency" do
+    subject { klass.new({}) }
+    
+    context "single" do   
+      let(:klass) { LogStash::Outputs::NOOPSingle }
+
+      it "should set concurrency correctly" do
+        expect(subject.concurrency).to eq(:single)
+      end
+    end
+
+    context "shared" do
+      let(:klass) { LogStash::Outputs::NOOPShared }
+      
+      it "should set concurrency correctly" do
+        expect(subject.concurrency).to eq(:shared)
+      end
+    end
+
+    context "legacy" do
+      let(:klass) { LogStash::Outputs::NOOPLegacy }
+      
+      it "should set concurrency correctly" do
+        expect(subject.concurrency).to eq(:legacy)
+      end
+
+      it "should default the # of workers to 1" do
+        expect(subject.workers).to eq(1)
+      end
+
+      it "should default concurrency to :legacy" do
+        expect(subject.concurrency).to eq(:legacy)
+      end
+    end
+  end
+  
   it "should instantiate cleanly" do
     params = { "dummy_option" => "potatoes", "codec" => "json", "workers" => 2 }
     worker_params = params.dup; worker_params["workers"] = 1
