diff --git a/logstash-core/lib/logstash/shutdown_watcher.rb b/logstash-core/lib/logstash/shutdown_watcher.rb
index 10de81db1b6..abce111eeef 100644
--- a/logstash-core/lib/logstash/shutdown_watcher.rb
+++ b/logstash-core/lib/logstash/shutdown_watcher.rb
@@ -1,4 +1,6 @@
 # encoding: utf-8
+require "concurrent/atomic/atomic_fixnum"
+require "concurrent/atomic/atomic_boolean"
 
 module LogStash
   class ShutdownWatcher
@@ -16,6 +18,8 @@ def initialize(pipeline, cycle_period=CHECK_EVERY, report_every=REPORT_EVERY, ab
       @report_every = report_every
       @abort_threshold = abort_threshold
       @reports = []
+      @attempts_count = Concurrent::AtomicFixnum.new(0)
+      @running = Concurrent::AtomicBoolean.new(false)
     end
 
     def self.unsafe_shutdown=(boolean)
@@ -35,11 +39,26 @@ def logger
       self.class.logger
     end
 
+    def attempts_count
+      @attempts_count.value
+    end
+
+    def stop!
+      @running.make_false
+    end
+
+    def stopped?
+      @running.false?
+    end
+
     def start
       sleep(@cycle_period)
       cycle_number = 0
       stalled_count = 0
+      running!
       Stud.interval(@cycle_period) do
+        @attempts_count.increment
+        break if stopped?
         break unless @pipeline.thread.alive?
         @reports << pipeline_report_snapshot
         @reports.delete_at(0) if @reports.size > @report_every # expire old report
@@ -61,6 +80,8 @@ def start
         end
         cycle_number = (cycle_number + 1) % @report_every
       end
+    ensure
+      stop!
     end
 
     def pipeline_report_snapshot
@@ -90,5 +111,10 @@ def shutdown_stalled?
     def force_exit
       exit(-1)
     end
+
+    private
+    def running!
+      @running.make_true
+    end
   end
 end
diff --git a/logstash-core/spec/logstash/shutdown_watcher_spec.rb b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
index 2f934f59b77..480eb769e82 100644
--- a/logstash-core/spec/logstash/shutdown_watcher_spec.rb
+++ b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
@@ -9,22 +9,12 @@
   let(:pipeline) { double("pipeline") }
   let(:reporter) { double("reporter") }
   let(:reporter_snapshot) { double("reporter snapshot") }
-  report_count = 0
 
   before :each do
     allow(pipeline).to receive(:reporter).and_return(reporter)
     allow(pipeline).to receive(:thread).and_return(Thread.current)
     allow(reporter).to receive(:snapshot).and_return(reporter_snapshot)
     allow(reporter_snapshot).to receive(:o_simple_hash).and_return({})
-
-    allow(subject).to receive(:pipeline_report_snapshot).and_wrap_original do |m, *args|
-      report_count += 1
-      m.call(*args)
-    end
-  end
-
-  after :each do
-    report_count = 0
   end
 
   context "when pipeline is stalled" do
@@ -69,8 +59,9 @@
       it "shouldn't force the shutdown" do
         expect(subject).to_not receive(:force_exit)
         thread = Thread.new(subject) {|subject| subject.start }
-        sleep 0.1 until report_count > check_threshold
-        thread.kill
+        sleep 0.1 until subject.attempts_count > check_threshold
+        subject.stop!
+        expect(thread.join(60)).to_not be_nil
       end
     end
   end
@@ -91,8 +82,9 @@
       it "should force the shutdown" do
         expect(subject).to_not receive(:force_exit)
         thread = Thread.new(subject) {|subject| subject.start }
-        sleep 0.1 until report_count > check_threshold
-        thread.kill
+        sleep 0.1 until subject.attempts_count > check_threshold
+        subject.stop!
+        expect(thread.join(60)).to_not be_nil
       end
     end
 
@@ -105,8 +97,10 @@
       it "shouldn't force the shutdown" do
         expect(subject).to_not receive(:force_exit)
         thread = Thread.new(subject) {|subject| subject.start }
-        sleep 0.1 until report_count > check_threshold
-        thread.kill
+        sleep 0.1 until subject.attempts_count > check_threshold
+        subject.stop!
+        thread.join
+        expect(thread.join(60)).to_not be_nil
       end
     end
   end
