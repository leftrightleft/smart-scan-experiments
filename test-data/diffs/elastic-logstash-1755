diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index 4bf4e5194ea..ef1b2a40980 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -73,6 +73,7 @@ Contributors:
 * Bernd Ahlers (bernd)
 * Andrea Forni (andreaforni)
 * Leandro Moreira (leandromoreira)
+* Ryan O'Keeffe (danielredoak)
 
 Note: If you've sent me patches, bug reports, or otherwise contributed to
 logstash, and you aren't on the list above and want to be, please let me know
diff --git a/lib/logstash/inputs/s3.rb b/lib/logstash/inputs/s3.rb
index 403aaebd349..7c60e071d91 100644
--- a/lib/logstash/inputs/s3.rb
+++ b/lib/logstash/inputs/s3.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/inputs/base"
 require "logstash/namespace"
+require "logstash/plugin_mixins/aws_config"
 
 require "time"
 require "tmpdir"
@@ -10,6 +11,7 @@
 # Each line from each file generates an event.
 # Files ending in '.gz' are handled as gzip'ed files.
 class LogStash::Inputs::S3 < LogStash::Inputs::Base
+  include LogStash::PluginMixins::AwsConfig
   config_name "s3"
   milestone 1
 
@@ -17,26 +19,20 @@ class LogStash::Inputs::S3 < LogStash::Inputs::Base
   # support and readline usage). Support gzip through a gzip codec! ;)
   default :codec, "plain"
 
-  # The credentials of the AWS account used to access the bucket.
+  # DEPRECATED: The credentials of the AWS account used to access the bucket.
   # Credentials can be specified:
   # - As an ["id","secret"] array
   # - As a path to a file containing AWS_ACCESS_KEY_ID=... and AWS_SECRET_ACCESS_KEY=...
   # - In the environment, if not set (using variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY)
-  config :credentials, :validate => :array, :default => []
+  config :credentials, :validate => :array, :default => [], :deprecated => "This only exists to be backwards compatible. This plugin now uses the AwsConfig from PluginMixins"
 
   # The name of the S3 bucket.
   config :bucket, :validate => :string, :required => true
 
-  # The AWS region for your bucket.
-  config :region, :validate => ["us-east-1", "us-west-1", "us-west-2",
-                                "eu-west-1", "ap-southeast-1", "ap-southeast-2",
-                                "ap-northeast-1", "sa-east-1", "us-gov-west-1"],
-                                :deprecated => "'region' has been deprecated in favor of 'region_endpoint'"
-
   # The AWS region for your bucket.
   config :region_endpoint, :validate => ["us-east-1", "us-west-1", "us-west-2",
                                 "eu-west-1", "ap-southeast-1", "ap-southeast-2",
-                                "ap-northeast-1", "sa-east-1", "us-gov-west-1"], :default => "us-east-1"
+                                "ap-northeast-1", "sa-east-1", "us-gov-west-1"], :default => "us-east-1", :deprecated => "This only exists to be backwards compatible. This plugin now uses the AwsConfig from PluginMixins"
 
   # If specified, the prefix the filenames in the bucket must match (not a regexp)
   config :prefix, :validate => :string, :default => nil
@@ -49,6 +45,11 @@ class LogStash::Inputs::S3 < LogStash::Inputs::Base
   # Name of a S3 bucket to backup processed files to.
   config :backup_to_bucket, :validate => :string, :default => nil
 
+  # Append a prefix to the key (full path including file name in s3) after processing.
+  # If backing up to another (or the same) bucket, this effectively lets you
+  # choose a new 'folder' to place the files in
+  config :backup_add_prefix, :validate => :string, :default => nil
+
   # Path of a local directory to backup processed files to.
   config :backup_to_dir, :validate => :string, :default => nil
 
@@ -59,19 +60,20 @@ class LogStash::Inputs::S3 < LogStash::Inputs::Base
   # Value is in seconds.
   config :interval, :validate => :number, :default => 60
 
+  # Ruby style regexp of keys to exclude from the bucket
+  config :exclude_pattern, :validate => :string, :default => nil
+
   public
   def register
     require "digest/md5"
     require "aws-sdk"
 
-    @region_endpoint = @region if @region && !@region.empty?
+    @region = @region_endpoint if @region_endpoint && !@region_endpoint.empty? && !@region
 
-    @logger.info("Registering s3 input", :bucket => @bucket, :region_endpoint => @region_endpoint)
+    @logger.info("Registering s3 input", :bucket => @bucket, :region => @region)
 
-    if @credentials.length == 0
-      @access_key_id = ENV['AWS_ACCESS_KEY_ID']
-      @secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
-    elsif @credentials.length == 1
+    # Deprecated
+    if @credentials.length == 1
       File.open(@credentials[0]) { |f| f.each do |line|
         unless (/^\#/.match(line))
           if(/\s*=\s*/.match(line))
@@ -90,12 +92,6 @@ def register
     elsif @credentials.length == 2
       @access_key_id = @credentials[0]
       @secret_access_key = @credentials[1]
-    else
-      raise ArgumentError.new('Credentials must be of the form "/path/to/file" or ["id", "secret"]')
-    end
-
-    if @access_key_id.nil? or @secret_access_key.nil?
-      raise ArgumentError.new('Missing AWS credentials')
     end
 
     if @bucket.nil?
@@ -109,11 +105,15 @@ def register
       @sincedb_path = File.join(ENV["HOME"], ".sincedb_" + Digest::MD5.hexdigest("#{@bucket}+#{@prefix}"))
     end
 
-    s3 = AWS::S3.new(
+    if @credentials
+      s3 = AWS::S3.new(
       :access_key_id => @access_key_id,
       :secret_access_key => @secret_access_key,
-      :region => @region_endpoint
-    )
+      :region => @region
+      )
+    else
+      s3 = AWS::S3.new(aws_options_hash)
+    end
 
     @s3bucket = s3.buckets[@bucket]
 
@@ -165,8 +165,12 @@ def list_new(since=nil)
 
     objects = {}
     @s3bucket.objects.with_prefix(@prefix).each do |log|
-      if log.last_modified > since
-        objects[log.key] = log.last_modified
+      @logger.debug("Found key: #{log.key}")
+      unless log.key =~ Regexp.new(@exclude_pattern) || (@backup_add_prefix && @backup_to_bucket == @bucket && log.key =~ /^#{backup_add_prefix}/)
+        @logger.debug("Adding to objects[]: #{log.key}")
+        if log.last_modified > since
+          objects[log.key] = log.last_modified
+        end
       end
     end
 
@@ -188,13 +192,17 @@ def process_log(queue, key)
       end
       process_local_log(queue, filename)
       unless @backup_to_bucket.nil?
-        backup_object = @backup_bucket.objects[key]
-        backup_object.write(Pathname.new(filename))
+        backup_key = "#{@backup_add_prefix}#{key}"
+        if @delete
+          object.move_to(backup_key, :bucket => @backup_bucket)
+        else
+          object.copy_to(backup_key, :bucket => @backup_bucket)
+        end
       end
       unless @backup_to_dir.nil?
         FileUtils.cp(filename, @backup_to_dir)
       end
-      if @delete
+      if @delete and @backup_to_bucket.nil?
         object.delete()
       end
     end
