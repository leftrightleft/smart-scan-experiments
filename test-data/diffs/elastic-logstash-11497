diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaCodecDelegator.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaCodecDelegator.java
index afa91d5389b..3a55a626843 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaCodecDelegator.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaCodecDelegator.java
@@ -4,15 +4,12 @@
 import co.elastic.logstash.api.Context;
 import co.elastic.logstash.api.CounterMetric;
 import co.elastic.logstash.api.Event;
-import co.elastic.logstash.api.Metric;
 import co.elastic.logstash.api.NamespacedMetric;
 import co.elastic.logstash.api.PluginConfigSpec;
-import org.jruby.RubySymbol;
-import org.jruby.runtime.ThreadContext;
 import org.logstash.RubyUtil;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
-import org.logstash.instrument.metrics.counter.LongCounter;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -41,13 +38,24 @@ public class JavaCodecDelegator implements Codec {
     protected final CounterMetric decodeMetricTime;
 
 
-    public JavaCodecDelegator(final Context context, final Codec codec) {
+    /**
+     * @param context plugin's context to pass through.
+     * @param codec the codec plugin's instance.
+     * @param source is optional, it's not used when no codec are specified and fallback to default one.
+     * */
+    public JavaCodecDelegator(final Context context, final Codec codec, SourceWithMetadata source) {
         this.codec = codec;
 
         final NamespacedMetric metric = context.getMetric(codec);
 
         synchronized(metric.root()) {
             metric.gauge(MetricKeys.NAME_KEY.asJavaString(), codec.getName());
+            if (source != null) {
+                NamespacedMetric metricConfigReference = metric.namespace(MetricKeys.CONFIG_REF_KEY.asJavaString());
+                metricConfigReference.gauge(MetricKeys.CONFIG_SOURCE_KEY.asJavaString(), RubyUtil.RUBY.newString(source.getId()));
+                metricConfigReference.gauge(MetricKeys.CONFIG_LINE_KEY.asJavaString(), RubyUtil.RUBY.newFixnum(source.getLine()));
+                metricConfigReference.gauge(MetricKeys.CONFIG_COLUMN_KEY.asJavaString(), RubyUtil.RUBY.newFixnum(source.getColumn()));
+            }
 
             final NamespacedMetric encodeMetric = metric.namespace(ENCODE_KEY);
             encodeMetricIn = encodeMetric.counter(IN_KEY);
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
index 6134a69d215..8bb14d21f01 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
@@ -9,6 +9,7 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.execution.JavaBasePipelineExt;
 import org.logstash.execution.queue.QueueWriter;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
@@ -37,12 +38,19 @@ public JavaInputDelegatorExt(Ruby runtime, RubyClass metaClass) {
 
     public static JavaInputDelegatorExt create(final JavaBasePipelineExt pipeline,
                                                final AbstractNamespacedMetricExt metric, final Input input,
-                                               final Map<String, Object> pluginArgs) {
+                                               final Map<String, Object> pluginArgs, SourceWithMetadata source) {
         final JavaInputDelegatorExt instance =
                 new JavaInputDelegatorExt(RubyUtil.RUBY, RubyUtil.JAVA_INPUT_DELEGATOR_CLASS);
-        AbstractNamespacedMetricExt scopedMetric = metric.namespace(RubyUtil.RUBY.getCurrentContext(), RubyUtil.RUBY.newSymbol(input.getId()));
-        scopedMetric.gauge(RubyUtil.RUBY.getCurrentContext(), MetricKeys.NAME_KEY, RubyUtil.RUBY.newString(input.getName()));
-        instance.setMetric(RubyUtil.RUBY.getCurrentContext(), scopedMetric);
+        ThreadContext context = RubyUtil.RUBY.getCurrentContext();
+        AbstractNamespacedMetricExt scopedMetric = metric.namespace(context, RubyUtil.RUBY.newSymbol(input.getId()));
+        scopedMetric.gauge(context, MetricKeys.NAME_KEY, RubyUtil.RUBY.newString(input.getName()));
+
+        AbstractNamespacedMetricExt metricConfigReference = scopedMetric.namespace(context, MetricKeys.CONFIG_REF_KEY);
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_SOURCE_KEY, RubyUtil.RUBY.newString(source.getId()));
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_LINE_KEY, RubyUtil.RUBY.newFixnum(source.getLine()));
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_COLUMN_KEY, RubyUtil.RUBY.newFixnum(source.getColumn()));
+
+        instance.setMetric(context, scopedMetric);
         instance.input = input;
         instance.pipeline = pipeline;
         instance.initializeQueueWriter(pluginArgs);
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java
index 501d9425560..bedeb0514e4 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java
@@ -13,6 +13,14 @@ private MetricKeys() {
 
     public static final RubySymbol NAME_KEY = RubyUtil.RUBY.newSymbol("name");
 
+    public static final RubySymbol CONFIG_REF_KEY = RubyUtil.RUBY.newSymbol("config-ref");
+
+    public static final RubySymbol CONFIG_SOURCE_KEY = RubyUtil.RUBY.newSymbol("source");
+
+    public static final RubySymbol CONFIG_LINE_KEY = RubyUtil.RUBY.newSymbol("line");
+
+    public static final RubySymbol CONFIG_COLUMN_KEY = RubyUtil.RUBY.newSymbol("column");
+
     public static final RubySymbol EVENTS_KEY = RubyUtil.RUBY.newSymbol("events");
 
     public static final RubySymbol OUT_KEY = RubyUtil.RUBY.newSymbol("out");
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
index 7f36421fa16..05413784703 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
@@ -236,6 +236,7 @@ private IRubyObject plugin(final ThreadContext context, final PluginLookup.Plugi
                     final IRubyObject pluginInstance = klass.callMethod(context, "new", rubyArgs);
                     final AbstractNamespacedMetricExt scopedMetric = typeScopedMetric.namespace(context, RubyUtil.RUBY.newSymbol(id));
                     scopedMetric.gauge(context, MetricKeys.NAME_KEY, pluginInstance.callMethod(context, "config_name"));
+                    initConfigMetrics(context, source, scopedMetric);
                     pluginInstance.callMethod(context, "metric=", scopedMetric);
                     pluginInstance.callMethod(context, "execution_context=", executionCntx);
                     return pluginInstance;
@@ -309,7 +310,8 @@ private IRubyObject plugin(final ThreadContext context, final PluginLookup.Plugi
                     }
 
                     if (input != null) {
-                        return JavaInputDelegatorExt.create((JavaBasePipelineExt) executionContext.pipeline, typeScopedMetric, input, pluginArgs);
+                        return JavaInputDelegatorExt.create((JavaBasePipelineExt) executionContext.pipeline,
+                                typeScopedMetric, input, pluginArgs, source);
                     } else {
                         throw new IllegalStateException("Unable to instantiate input: " + pluginClass);
                     }
@@ -322,7 +324,7 @@ private IRubyObject plugin(final ThreadContext context, final PluginLookup.Plugi
                             final Context pluginContext = executionContext.toContext(type, metrics.getRoot(context));
                             final Codec codec = ctor.newInstance(config, pluginContext);
                             PluginUtil.validateConfig(codec, config);
-                            return JavaUtil.convertJavaToRuby(RubyUtil.RUBY, new JavaCodecDelegator(pluginContext, codec));
+                            return JavaUtil.convertJavaToRuby(RubyUtil.RUBY, new JavaCodecDelegator(pluginContext, codec, source));
                         } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
                             if (ex instanceof InvocationTargetException && ex.getCause() != null) {
                                 throw new IllegalStateException((ex).getCause());
@@ -340,6 +342,14 @@ private IRubyObject plugin(final ThreadContext context, final PluginLookup.Plugi
         }
     }
 
+    private static void initConfigMetrics(ThreadContext context, SourceWithMetadata source,
+                                          AbstractNamespacedMetricExt scopedMetric) {
+        AbstractNamespacedMetricExt metricConfigReference = scopedMetric.namespace(context, MetricKeys.CONFIG_REF_KEY);
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_SOURCE_KEY, RubyUtil.RUBY.newString(source.getId()));
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_LINE_KEY, RubyUtil.RUBY.newFixnum(source.getLine()));
+        metricConfigReference.gauge(context, MetricKeys.CONFIG_COLUMN_KEY, RubyUtil.RUBY.newFixnum(source.getColumn()));
+    }
+
     @JRubyClass(name = "ExecutionContextFactory")
     public static final class ExecutionContext extends RubyBasicObject {
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/JavaCodecDelegatorTest.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/JavaCodecDelegatorTest.java
index 7da86c699d0..a574c5ac30f 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/JavaCodecDelegatorTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/JavaCodecDelegatorTest.java
@@ -2,7 +2,6 @@
 
 import co.elastic.logstash.api.Codec;
 import co.elastic.logstash.api.Event;
-import co.elastic.logstash.api.Metric;
 import co.elastic.logstash.api.PluginConfigSpec;
 import com.google.common.collect.ImmutableMap;
 import org.jruby.RubyHash;
@@ -198,7 +197,7 @@ private long getMetricLongValue(final String type, final String symbolName) {
     }
 
     private JavaCodecDelegator constructCodecDelegator() {
-        return new JavaCodecDelegator(new ContextImpl(null, this.getInstance()), codec);
+        return new JavaCodecDelegator(new ContextImpl(null, this.getInstance()), codec, null);
     }
 
     private abstract class AbstractCodec implements Codec {
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 426263010f1..a211e805cd0 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -145,6 +145,87 @@
     end
   end
 
+  it "can retrieve pipeline metrics stats - config string" do
+    logstash_service = @fixture.get_service("logstash")
+    logstash_service.start_with_stdin
+    logstash_service.wait_for_logstash
+
+    Stud.try(max_retry.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
+      # event_stats can fail if the stats subsystem isn't ready
+      result = logstash_service.monitoring_api.pipeline_stats("main") rescue nil
+      expect(result).not_to be_nil
+
+      # we use fetch here since we want failed fetches to raise an exception
+      # and trigger the retry block
+      inputs_stats = result.fetch("plugins").fetch("inputs")[0]
+      config_ref = inputs_stats.fetch("config-ref")
+      expect_source_reference(config_ref, "config_string", 1, 8)
+    end
+  end
+
+  describe "multifile pipelines" do
+
+    let!(:settings_dir) { Stud::Temporary.directory("logstash-splitted-pipeline-config-test") }
+
+    it "can retrieve pipeline metrics stats - multiple files" do
+      IO.write(settings_dir + "/pipeline_1_piece.conf", """
+      input {
+      	stdin {
+      	  codec => json {
+      	    charset => \"UTF-8\"
+      	  }
+      	}
+      }
+      filter {
+      	sleep {
+      		time => 1
+      	}
+      }
+      """)
+
+      IO.write(settings_dir + "/pipeline_2_piece.conf", """
+      output {
+       	stdout {
+       	  codec => rubydebug
+       	}
+      }
+      """)
+
+      logstash_service = @fixture.get_service("logstash")
+      logstash_service.spawn_logstash("--path.config", settings_dir)
+      logstash_service.wait_for_logstash
+
+      Stud.try(max_retry.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
+        # event_stats can fail if the stats subsystem isn't ready
+        result = logstash_service.monitoring_api.pipeline_stats("main") rescue nil
+        expect(result).not_to be_nil
+
+        inputs_stats = result.fetch("plugins").fetch("inputs")[0]
+        config_ref = inputs_stats.fetch("config-ref")
+        expect_source_reference_file(config_ref, "pipeline_1_piece.conf", 3, 8)
+
+        input_codec_stats = result.fetch("plugins").fetch("codecs").select { |c| c["name"] == "json"}.first
+        expect(input_codec_stats).not_to be_nil
+        config_ref = input_codec_stats.fetch("config-ref")
+        expect_source_reference_file(config_ref, "pipeline_1_piece.conf", 4, 19)
+
+#TODO enable this after the filter and output plugins exposes the metrics!
+        #filters_stats = result.fetch("plugins").fetch("filters")[0]
+        #config_ref = filters_stats.fetch("config-ref")
+        #expect_source_reference_file(config_ref, "pipeline_1_piece.conf", 11, 8)
+        #
+        #outputs_stats = result.fetch("plugins").fetch("outputs")[0]
+        #config_ref = outputs_stats.fetch("config-ref")
+        #expect_source_reference_file(config_ref, "pipeline_2_piece.conf", 3, 9)
+        #
+        #output_codec_stats = result.fetch("plugins").fetch("codecs").select { |c| c["name"] == "rubydebug"}.first
+        #expect(output_codec_stats).not_to be_nil
+        #config_ref = output_codec_stats.fetch("parent-config-ref")
+        #expect_source_reference_file(config_ref, "pipeline_2_piece.conf", 3, 9)
+      end
+    end
+  end
+
   private
 
   def logging_get_assert(logstash_service, logstash_level, slowlog_level)
@@ -162,4 +243,16 @@ def logging_put_assert(result)
     expect(result["acknowledged"]).to be(true)
   end
 
+  def expect_source_reference(config_ref, source, line, column)
+    expect(config_ref.fetch("source")).to eq(source)
+    expect(config_ref.fetch("line")).to eq(line)
+    expect(config_ref.fetch("column")).to eq(column)
+  end
+
+  def expect_source_reference_file(config_ref, filename, line, column)
+    expect(config_ref.fetch("source")).to match(".*#{filename}")
+    expect(config_ref.fetch("line")).to eq(line)
+    expect(config_ref.fetch("column")).to eq(column)
+  end
+
 end
