diff --git a/docs/index.asciidoc b/docs/index.asciidoc
index 64c84d5c531..a91da6cba34 100644
--- a/docs/index.asciidoc
+++ b/docs/index.asciidoc
@@ -106,10 +106,12 @@ include::static/upgrading.asciidoc[]
 include::static/configuration.asciidoc[]
 
 :edit_url!:
-include::static/security/logstash.asciidoc[]
+include::static/ls-to-cloud.asciidoc[]
+
+// Security
 
 :edit_url!:
-include::static/ls-to-cloud.asciidoc[]
+include::static/security/logstash.asciidoc[]
 
 // Advanced Logstash Configuration
 
diff --git a/docs/static/security/api-keys.asciidoc b/docs/static/security/api-keys.asciidoc
index 596d31250ce..98f6496724f 100644
--- a/docs/static/security/api-keys.asciidoc
+++ b/docs/static/security/api-keys.asciidoc
@@ -1,6 +1,6 @@
-[float]
+[discrete]
 [[ls-api-keys]]
-==== Grant access using API keys
+=== Grant access using API keys
 
 Instead of using usernames and passwords, you can use API keys to grant
 access to {es} resources. You can set API keys to expire at a certain time,
@@ -25,9 +25,9 @@ NOTE: For security reasons, we recommend using a unique API key per {ls} instanc
 You can create as many API keys per user as necessary.
 
 
-[float]
+[discrete]
 [[ls-create-api-key]]
-===== Create an API key 
+==== Create an API key 
 
 You can create API keys using either the
 {ref}/security-api-create-api-key.html[Create API key API] or the
@@ -74,9 +74,9 @@ The return value should look similar to this:
 <2> Generated API key
 
 
-[float]
+[discrete]
 [[ls-api-key-publish]]
-====== Create an API key for publishing
+===== Create an API key for publishing
 
 You're in luck! The example we used in the <<ls-create-api-key>> section creates
 an API key for publishing to {es} using the
@@ -112,9 +112,9 @@ output {
 <1> Format is `id:api_key` (as returned by
 {ref}/security-api-create-api-key.html[Create API key])
 
-[float]
+[discrete]
 [[ls-api-key-input]]
-====== Create an API key for reading
+===== Create an API key for reading
 
 Creating an API key to use for reading data from {es} is similar to creating an
 API key for publishing described earlier. You can use the example in the
@@ -149,9 +149,9 @@ input {
 {ref}/security-api-create-api-key.html[Create API key])s
 
 
-[float]
+[discrete]
 [[ls-api-key-filter]]
-====== Create an API key for filtering
+===== Create an API key for filtering
 
 Creating an API key to use for processing data from {es} is similar to creating
 an API key for publishing described earlier. You can use the example in the
@@ -186,9 +186,9 @@ filter {
 <1> Format is `id:api_key` (as returned by {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
+[discrete]
 [[ls-api-key-monitor]]
-====== Create an API key for monitoring
+===== Create an API key for monitoring
 
 To create an API key to use for sending monitoring data to {es}, use the
 {ref}/security-api-create-api-key.html[Create API key API]. For example:
@@ -235,9 +235,9 @@ xpack.monitoring.elasticsearch.api_key: TiNAGG4BaaMdaH1tRfuU:KnR6yE41RrSowb0kQ0H
 <1> Format is `id:api_key` (as returned by {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
+[discrete]
 [[ls-api-key-man]]
-====== Create an API key for central management
+===== Create an API key for central management
 
 To create an API key to use for central management, use the
 {ref}/security-api-create-api-key.html[Create API key API]. For example:
@@ -280,9 +280,9 @@ xpack.management.elasticsearch.api_key: TiNAGG4BaaMdaH1tRfuU:KnR6yE41RrSowb0kQ0H
 {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
+[discrete]
 [[learn-more-api-keys]]
-===== Learn more about API keys
+==== Learn more about API keys
 
 See the {es} API key documentation for more information:
 
diff --git a/docs/static/security/basic-auth.asciidoc b/docs/static/security/basic-auth.asciidoc
new file mode 100644
index 00000000000..25fda83645c
--- /dev/null
+++ b/docs/static/security/basic-auth.asciidoc
@@ -0,0 +1,82 @@
+[discrete]
+[[ls-http-auth-basic]]
+=== Configuring Logstash to use basic authentication
+
+Logstash needs to be able to manage index templates, create indices,
+and write and delete documents in the indices it creates.
+
+To set up authentication credentials for Logstash:
+
+. Use the the **Management > Roles** UI in {kib} or the `role` API to create a
+`logstash_writer` role. For *cluster* privileges, add `manage_index_templates` and `monitor`. 
+For *indices* privileges, add `write`, `create`, and `create_index`.
++
+Add `manage_ilm` for cluster and `manage` and `manage_ilm` for indices if you
+plan to use {ref}/getting-started-index-lifecycle-management.html[index
+lifecycle management].
++
+[source, sh]
+---------------------------------------------------------------
+POST _security/role/logstash_writer
+{
+  "cluster": ["manage_index_templates", "monitor", "manage_ilm"], <1>
+  "indices": [
+    {
+      "names": [ "logstash-*" ], <2>
+      "privileges": ["write","create","create_index","manage","manage_ilm"]  <3>
+    }
+  ]
+}
+---------------------------------------------------------------
+<1> The cluster needs the `manage_ilm` privilege if 
+{ref}/getting-started-index-lifecycle-management.html[index lifecycle management]
+is enabled.
+<2> If you use a custom Logstash index pattern, specify your custom pattern
+instead of the default `logstash-*` pattern.
+<3> If {ref}/getting-started-index-lifecycle-management.html[index lifecycle
+management] is enabled, the role requires the `manage` and `manage_ilm`
+privileges to load index lifecycle policies, create rollover aliases, and create
+and manage rollover indices.
+
+. Create a `logstash_internal` user and assign it the `logstash_writer` role.
+You can create users from the **Management > Users** UI in {kib} or through
+the `user` API:
++
+[source, sh]
+---------------------------------------------------------------
+POST _security/user/logstash_internal
+{
+  "password" : "x-pack-test-password",
+  "roles" : [ "logstash_writer"],
+  "full_name" : "Internal Logstash User"
+}
+---------------------------------------------------------------
+
+. Configure Logstash to authenticate as the `logstash_internal` user you just
+created. You configure credentials separately for each of the {es} plugins in
+your Logstash `.conf` file. For example:
++
+[source,js]
+--------------------------------------------------
+input {
+  elasticsearch {
+    ...
+    user => logstash_internal
+    password => x-pack-test-password
+  }
+}
+filter {
+  elasticsearch {
+    ...
+    user => logstash_internal
+    password => x-pack-test-password
+  }
+}
+output {
+  elasticsearch {
+    ...
+    user => logstash_internal
+    password => x-pack-test-password
+  }
+}
+--------------------------------------------------
diff --git a/docs/static/security/grant-access.asciidoc b/docs/static/security/grant-access.asciidoc
new file mode 100644
index 00000000000..0f6ec42274b
--- /dev/null
+++ b/docs/static/security/grant-access.asciidoc
@@ -0,0 +1,36 @@
+[discrete]
+[[ls-user-access]]
+=== Granting access to the Logstash indices
+
+To access the indices Logstash creates, users need the `read` and
+`view_index_metadata` privileges:
+
+. Create a `logstash_reader` role that has the `read` and `view_index_metadata`
+privileges  for the Logstash indices. You can create roles from the
+**Management > Roles** UI in {kib} or through the `role` API:
++
+[source, sh]
+---------------------------------------------------------------
+POST _security/role/logstash_reader
+{
+  "cluster": ["manage_logstash_pipelines"]
+}
+---------------------------------------------------------------
+
+. Assign your Logstash users the `logstash_reader` role. If the Logstash user
+will be using
+{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
+also assign the `logstash_admin` role. You can create and manage users from the
+**Management > Users** UI in {kib} or through the `user` API:
++
+[source, sh]
+---------------------------------------------------------------
+POST _security/user/logstash_user
+{
+  "password" : "x-pack-test-password",
+  "roles" : [ "logstash_reader", "logstash_admin"], <1>
+  "full_name" : "Kibana User for Logstash"
+}
+---------------------------------------------------------------
+<1> `logstash_admin` is a built-in role that provides access to system
+indices for managing configurations.
\ No newline at end of file
diff --git a/docs/static/security/logstash.asciidoc b/docs/static/security/logstash.asciidoc
index 20cd1eb34fb..119b763fe6a 100644
--- a/docs/static/security/logstash.asciidoc
+++ b/docs/static/security/logstash.asciidoc
@@ -1,9 +1,8 @@
-[role="xpack"]
 [[ls-security]]
-=== Configuring Security in Logstash
+== Security
 [subs="attributes"]
 ++++
-<titleabbrev>Configuring Security</titleabbrev>
+<titleabbrev>Security</titleabbrev>
 ++++
 
 The Logstash {es} plugins ({logstash-ref}/plugins-outputs-elasticsearch.html[output],
@@ -26,225 +25,11 @@ with a username and password for a user with the appropriate permissions.
 In addition to configuring authentication credentials for Logstash, you need
 to grant authorized users permission to access the Logstash indices.
 
-[float]
-[[ls-http-auth-basic]]
-==== Configuring Logstash to use Basic Authentication
-
-Logstash needs to be able to manage index templates, create indices,
-and write and delete documents in the indices it creates.
-
-To set up authentication credentials for Logstash:
-
-. Use the the **Management > Roles** UI in {kib} or the `role` API to create a
-`logstash_writer` role. For *cluster* privileges, add `manage_index_templates` and `monitor`. 
-For *indices* privileges, add `write`, `create`, and `create_index`.
-+
-Add `manage_ilm` for cluster and `manage` and `manage_ilm` for indices if you
-plan to use {ref}/getting-started-index-lifecycle-management.html[index
-lifecycle management].
-+
-[source, sh]
----------------------------------------------------------------
-POST _security/role/logstash_writer
-{
-  "cluster": ["manage_index_templates", "monitor", "manage_ilm"], <1>
-  "indices": [
-    {
-      "names": [ "logstash-*" ], <2>
-      "privileges": ["write","create","create_index","manage","manage_ilm"]  <3>
-    }
-  ]
-}
----------------------------------------------------------------
-<1> The cluster needs the `manage_ilm` privilege if 
-{ref}/getting-started-index-lifecycle-management.html[index lifecycle management]
-is enabled.
-<2> If you use a custom Logstash index pattern, specify your custom pattern
-instead of the default `logstash-*` pattern.
-<3> If {ref}/getting-started-index-lifecycle-management.html[index lifecycle
-management] is enabled, the role requires the `manage` and `manage_ilm`
-privileges to load index lifecycle policies, create rollover aliases, and create
-and manage rollover indices.
-
-. Create a `logstash_internal` user and assign it the `logstash_writer` role.
-You can create users from the **Management > Users** UI in {kib} or through
-the `user` API:
-+
-[source, sh]
----------------------------------------------------------------
-POST _security/user/logstash_internal
-{
-  "password" : "x-pack-test-password",
-  "roles" : [ "logstash_writer"],
-  "full_name" : "Internal Logstash User"
-}
----------------------------------------------------------------
-
-. Configure Logstash to authenticate as the `logstash_internal` user you just
-created. You configure credentials separately for each of the {es} plugins in
-your Logstash `.conf` file. For example:
-+
-[source,js]
---------------------------------------------------
-input {
-  elasticsearch {
-    ...
-    user => logstash_internal
-    password => x-pack-test-password
-  }
-}
-filter {
-  elasticsearch {
-    ...
-    user => logstash_internal
-    password => x-pack-test-password
-  }
-}
-output {
-  elasticsearch {
-    ...
-    user => logstash_internal
-    password => x-pack-test-password
-  }
-}
---------------------------------------------------
-
-[float]
-[[ls-user-access]]
-==== Granting Users Access to the Logstash Indices
-
-To access the indices Logstash creates, users need the `read` and
-`view_index_metadata` privileges:
-
-. Create a `logstash_reader` role that has the `read` and `view_index_metadata`
-privileges  for the Logstash indices. You can create roles from the
-**Management > Roles** UI in {kib} or through the `role` API:
-+
-[source, sh]
----------------------------------------------------------------
-POST _security/role/logstash_reader
-{
-  "cluster": ["manage_logstash_pipelines"]
-}
----------------------------------------------------------------
-
-. Assign your Logstash users the `logstash_reader` role. If the Logstash user
-will be using
-{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
-also assign the `logstash_admin` role. You can create and manage users from the
-**Management > Users** UI in {kib} or through the `user` API:
-+
-[source, sh]
----------------------------------------------------------------
-POST _security/user/logstash_user
-{
-  "password" : "x-pack-test-password",
-  "roles" : [ "logstash_reader", "logstash_admin"], <1>
-  "full_name" : "Kibana User for Logstash"
-}
----------------------------------------------------------------
-<1> `logstash_admin` is a built-in role that provides access to system
-indices for managing configurations.
-
-[float]
-[[ls-http-auth-pki]]
-==== Configuring the {es} Output to use PKI Authentication
-
-The `elasticsearch` output supports PKI authentication. To use an X.509
-client-certificate for authentication, you configure the `keystore` and
-`keystore_password` options in your Logstash `.conf` file:
-
-[source,js]
---------------------------------------------------
-output {
-  elasticsearch {
-    ...
-    keystore => /path/to/keystore.jks
-    keystore_password => realpassword
-    truststore =>  /path/to/truststore.jks <1>
-    truststore_password =>  realpassword
-  }
-}
---------------------------------------------------
-<1> If you use a separate truststore, the truststore path and password are
-also required.
-
-[float]
-[[ls-http-ssl]]
-==== Configuring Logstash to use TLS Encryption
-
-If TLS encryption is enabled on the {es} cluster, you need to
-configure the `ssl` and `cacert` options in your Logstash `.conf` file:
-
-[source,js]
---------------------------------------------------
-output {
-  elasticsearch {
-    ...
-    ssl => true
-    cacert => '/path/to/cert.pem' <1>
-  }
-}
---------------------------------------------------
-<1> The path to the local `.pem` file that contains the Certificate
-    Authority's certificate.
-
-[float]
-[role="xpack"]
-[[ls-monitoring-user]]
-==== Configuring Credentials for Logstash Monitoring
-
-If you plan to ship Logstash {logstash-ref}/configuring-logstash.html[monitoring]
-data to a secure cluster, you need to configure the username and password that
-Logstash uses to authenticate for shipping monitoring data.
-
-The {security-features} come preconfigured with a
-{ref}/built-in-users.html[`logstash_system` built-in user]
-for this purpose. This user has the minimum permissions necessary for the
-monitoring function, and _should not_ be used for any other purpose - it is
-specifically _not intended_ for use within a Logstash pipeline.
-
-By default, the `logstash_system` user does not have a password. The user will
-not be enabled until you set a password. See
-{ref}/built-in-users.html#set-built-in-user-passwords[Setting built-in user passwords].
-
-Then configure the user and password in the `logstash.yml` configuration file:
-
-[source,yaml]
-----------------------------------------------------------
-xpack.monitoring.elasticsearch.username: logstash_system
-xpack.monitoring.elasticsearch.password: t0p.s3cr3t
-----------------------------------------------------------
-
-If you initially installed an older version of {xpack} and then upgraded, the
-`logstash_system` user may have defaulted to `disabled` for security reasons.
-You can enable the user through the `user` API:
-
-[source,js]
----------------------------------------------------------------------
-PUT _security/user/logstash_system/_enable
----------------------------------------------------------------------
-// CONSOLE
-
-[float]
-[role="xpack"]
-[[ls-pipeline-management-user]]
-==== Configuring Credentials for Centralized Pipeline Management
-
-If you plan to use Logstash
-{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
-you need to configure the username and password that Logstash uses for managing
-configurations.
-
-You configure the user and password in the `logstash.yml` configuration file:
-
-[source,yaml]
-----------------------------------------------------------
-xpack.management.elasticsearch.username: logstash_admin_user <1>
-xpack.management.elasticsearch.password: t0p.s3cr3t
-----------------------------------------------------------
-<1> The user you specify here must have the built-in `logstash_admin` role as
-well as the `logstash_writer` role that you created earlier.
 
+include::basic-auth.asciidoc[]
+include::grant-access.asciidoc[]
+include::pki-auth.asciidoc[]
+include::tls-encryption.asciidoc[]
+include::ls-monitoring.asciidoc[]
+include::pipeline-mgmt.asciidoc[]
 include::api-keys.asciidoc[]
-
diff --git a/docs/static/security/ls-monitoring.asciidoc b/docs/static/security/ls-monitoring.asciidoc
new file mode 100644
index 00000000000..09babb63482
--- /dev/null
+++ b/docs/static/security/ls-monitoring.asciidoc
@@ -0,0 +1,35 @@
+[discrete]
+[[ls-monitoring-user]]
+=== Configuring credentials for {ls} monitoring
+
+If you plan to ship Logstash {logstash-ref}/configuring-logstash.html[monitoring]
+data to a secure cluster, you need to configure the username and password that
+Logstash uses to authenticate for shipping monitoring data.
+
+The {security-features} come preconfigured with a
+{ref}/built-in-users.html[`logstash_system` built-in user]
+for this purpose. This user has the minimum permissions necessary for the
+monitoring function, and _should not_ be used for any other purpose - it is
+specifically _not intended_ for use within a Logstash pipeline.
+
+By default, the `logstash_system` user does not have a password. The user will
+not be enabled until you set a password. See
+{ref}/built-in-users.html#set-built-in-user-passwords[Setting built-in user passwords].
+
+Then configure the user and password in the `logstash.yml` configuration file:
+
+[source,yaml]
+----------------------------------------------------------
+xpack.monitoring.elasticsearch.username: logstash_system
+xpack.monitoring.elasticsearch.password: t0p.s3cr3t
+----------------------------------------------------------
+
+If you initially installed an older version of {xpack} and then upgraded, the
+`logstash_system` user may have defaulted to `disabled` for security reasons.
+You can enable the user through the `user` API:
+
+[source,js]
+---------------------------------------------------------------------
+PUT _security/user/logstash_system/_enable
+---------------------------------------------------------------------
+// CONSOLE
diff --git a/docs/static/security/pipeline-mgmt.asciidoc b/docs/static/security/pipeline-mgmt.asciidoc
new file mode 100644
index 00000000000..97d05730f28
--- /dev/null
+++ b/docs/static/security/pipeline-mgmt.asciidoc
@@ -0,0 +1,18 @@
+[discrete]
+[[ls-pipeline-management-user]]
+=== Configuring credentials for Centralized Pipeline Management
+
+If you plan to use Logstash
+{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
+you need to configure the username and password that Logstash uses for managing
+configurations.
+
+You configure the user and password in the `logstash.yml` configuration file:
+
+[source,yaml]
+----------------------------------------------------------
+xpack.management.elasticsearch.username: logstash_admin_user <1>
+xpack.management.elasticsearch.password: t0p.s3cr3t
+----------------------------------------------------------
+<1> The user you specify here must have the built-in `logstash_admin` role as
+well as the `logstash_writer` role that you created earlier.
diff --git a/docs/static/security/pki-auth.asciidoc b/docs/static/security/pki-auth.asciidoc
new file mode 100644
index 00000000000..7b3b8c87e6f
--- /dev/null
+++ b/docs/static/security/pki-auth.asciidoc
@@ -0,0 +1,22 @@
+[discrete]
+[[ls-http-auth-pki]]
+=== Configuring the {es} output to use PKI authentication
+
+The `elasticsearch` output supports PKI authentication. To use an X.509
+client-certificate for authentication, you configure the `keystore` and
+`keystore_password` options in your Logstash `.conf` file:
+
+[source,js]
+--------------------------------------------------
+output {
+  elasticsearch {
+    ...
+    keystore => /path/to/keystore.jks
+    keystore_password => realpassword
+    truststore =>  /path/to/truststore.jks <1>
+    truststore_password =>  realpassword
+  }
+}
+--------------------------------------------------
+<1> If you use a separate truststore, the truststore path and password are
+also required.
\ No newline at end of file
diff --git a/docs/static/security/tls-encryption.asciidoc b/docs/static/security/tls-encryption.asciidoc
new file mode 100644
index 00000000000..8cf4ada0a41
--- /dev/null
+++ b/docs/static/security/tls-encryption.asciidoc
@@ -0,0 +1,19 @@
+[discrete]
+[[ls-http-ssl]]
+=== Configuring Logstash to use TLS encryption
+
+If TLS encryption is enabled on the {es} cluster, you need to
+configure the `ssl` and `cacert` options in your Logstash `.conf` file:
+
+[source,js]
+--------------------------------------------------
+output {
+  elasticsearch {
+    ...
+    ssl => true
+    cacert => '/path/to/cert.pem' <1>
+  }
+}
+--------------------------------------------------
+<1> The path to the local `.pem` file that contains the Certificate
+    Authority's certificate.
\ No newline at end of file
