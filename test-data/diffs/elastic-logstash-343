diff --git a/lib/logstash/outputs/redis.rb b/lib/logstash/outputs/redis.rb
index 5394f28d3bd..b115c088e07 100644
--- a/lib/logstash/outputs/redis.rb
+++ b/lib/logstash/outputs/redis.rb
@@ -25,8 +25,12 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   config :host, :validate => :array, :default => ["127.0.0.1"]
 
   # Shuffle the host list during logstash startup.
+  # Deprecated, does nothing.
   config :shuffle_hosts, :validate => :boolean, :default => true
 
+  # Load balance between the redis hosts
+  config :balance_hosts, :validate => :boolean, :default => true
+
   # The default port to connect on. Can be overridden on any hostname.
   config :port, :validate => :number, :default => 6379
 
@@ -54,6 +58,9 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # TODO set required true
   config :data_type, :validate => [ "list", "channel" ], :required => false
 
+  # Interval for reconnecting to failed redis connections
+  config :reconnect_interval, :validate => :number, :default => 1
+
   # Set to true if you want redis to batch up values and send 1 RPUSH command
   # instead of one command per value to push on the list.  Note that this only
   # works with data_type="list" mode right now.
@@ -69,6 +76,14 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # when there are pending events to flush.
   config :batch_timeout, :validate => :number, :default => 5
 
+  # In case redis has more than @max_redis_events in the key, wait until someone consumes them, otherwise
+  # if there are no consumers redis will run out of memory. Default value of 0 means that this limit is disabled.
+  config :max_redis_events, :validate => :number, :default => 0
+
+  # The limit of max events that can be buffered without blocking.
+  # This does not include events which were dispatched to @batch_thread
+  config :max_buffered_events, :validate => :number, :default => 10000
+
   public
   def register
     require 'redis'
@@ -91,6 +106,7 @@ def register
     end
     # end TODO
 
+    @pending_count = 0
     @pending = Hash.new { |h, k| h[k] = [] }
     @last_pending_flush = Time.now.to_f
     if @batch and @data_type != "list"
@@ -99,123 +115,193 @@ def register
       )
     end
 
+    @main_thread = Thread.current
+    
+    # List of blocked threads
+    @blocked_threads = []
+    # Mutex to syncronize threads access to @blocked_threads
+    @blocked_mutex = Mutex.new
+
+    # Mutex to syncronize main plugin and @batch_thread threads on access to @pending beatch events buffer.
+    @events_mutex = Mutex.new
+    
+    # List of active load balanced redis servers.
+    @active_servers = []
+    # Mutex to syncronize threads access to @active_servers.
+    @lb_mutex = Mutex.new
+
+    @redis_pool = {}
+    @host.each {|uri| @redis_pool[uri] = nil}
+
+    connect
+
+    # Dedicated reconnect thread
+    @reconnect_thread = Thread.new do
+      while sleep(@reconnect_interval) do
+        connect unless @redis_pool.length == @active_servers.length
+      end
+    end
+
     if @batch
-      @flush_thread = Thread.new do
+      @batch_thread = Thread.new do
+        while true do
+          Thread.stop
+          process_pending
+        end
+      end
+      @batch_sched_thread = Thread.new do
         while sleep(@batch_timeout) do
-          process_pending(true)
+           @batch_thread.run if @batch_thread.status == "sleep"
         end
       end
     end
-
-    @redis = nil
-    if @shuffle_hosts
-        @host.shuffle!
-    end
-    @host_idx = 0
-    @pending_mutex = Mutex.new
   end # def register
 
   private
   def connect
-    @current_host, @current_port = @host[@host_idx].split(':')
-    @host_idx = @host_idx + 1 >= @host.length ? 0 : @host_idx + 1
-
-    if not @current_port
-        @current_port = @port
-    end
-
-    params = {
-      :host => @current_host,
-      :port => @current_port,
-      :timeout => @timeout,
-      :db => @db
-    }
-    @logger.debug(params)
-
-    if @password
-      params[:password] = @password.value
+    @redis_pool.each_key do |uri|
+      active = false
+      @lb_mutex.synchronize { active = @active_servers.index(uri) }
+      unless active
+        begin
+          @logger.debug("Connecting to redis", :uri => uri)
+          host, port = uri.split(':')
+          port = @port unless port
+          @redis_pool[uri] = Redis.new(:host => host, :port => port,
+                                       :timeout => @timeout, :db => @db,
+                                       :password => @password.nil? ? nil : @password.value)
+          @lb_mutex.synchronize { @active_servers << uri }
+          @blocked_mutex.synchronize { @blocked_threads.shift.run while !@blocked_threads.empty? }
+        rescue => e
+          @logger.info("Failed connecting to redis", :host => uri, :exception => e, :backtrace => e.backtrace)
+        end
+      end
     end
-
-    Redis.new(params)
   end # def connect
 
-  # A string used to identify a redis instance in log messages
-  private
-  def identity
-    @name || "redis://#{@password}@#{@current_host}:#{@current_port}/#{@db} #{@data_type}:#{@key}"
-  end
-
   public
   def receive(event)
     return unless output?(event)
 
     if @batch
-      @pending[event.sprintf(@key)] << event.to_json
-      process_pending
+      @events_mutex.synchronize do
+        @pending[event.sprintf(@key)] << event.to_json
+        @pending_count += 1
+      end
+      if @pending_count >= @max_buffered_events
+        @logger.debug("Max redis output buffered events", :max_buffered_events => @max_buffered_events, :pending_count => @pending_count)
+        @batch_thread.run if @batch_thread.status == "sleep"
+        Thread.stop #Block until @batch_thread wakeup us once events have been pushed to redis.
+      else
+        if @pending_count >= @batch_events and !@active_servers.empty?
+          @logger.debug("Batch thread invoke", :batch_events => @batch_events, :pending_count => @pending_count)
+          @batch_thread.run if @batch_thread.status == "sleep"
+        end
+      end
       return
     end
-
+ 
     event_key_and_payload = [event.sprintf(@key), event.to_json]
 
     begin
-      @redis ||= connect
+      while @active_servers.empty? 
+        @logger.debug("Could not connect to any of the redis servers")
+        @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+        Thread.stop
+      end
       if @data_type == 'list'
-        @redis.rpush *event_key_and_payload
+        while @redis_pool[@active_servers[0]].llen(@key) > @max_redis_events # Don't push event to redis key which has reached @max_redis_events
+          @logger.info("Redis server has max allowed unconsumed events", :max_redis_events => @max_redis_events,
+                       :events_in_redis => @redis_pool[@active_servers[0]].llen(@key), :host => @active_servers[0])
+          @lb_mutex.synchronize { @active_servers.shift }
+          while @active_servers.empty? # If all redis servers are full or inactive then sleep and try again
+            @logger.warn("All redis servers are full or inactive")
+            @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+            Thread.stop
+          end
+        end
+        @redis_pool[@active_servers[0]].rpush *event_key_and_payload
       else
-        @redis.publish *event_key_and_payload
+        @redis_pool[@active_servers[0]].publish *event_key_and_payload
       end
+      @lb_mutex.synchronize { @active_servers << @active_servers.shift if @balance_hosts and @active_servers.length > 1 }
     rescue => e
-      @logger.warn("Failed to send event to redis", :event => event,
-                   :identity => identity, :exception => e,
-                   :backtrace => e.backtrace)
-      sleep 1
-      @redis = nil
+      @logger.error("Failed to send event to redis", :event => event,
+                   :host => @active_servers[0], :exception => e, :backtrace => e.backtrace)
+      @lb_mutex.synchronize { @active_servers.shift }
+      if @active_servers.empty? # If all redis servers are full or inactive then sleep and try again
+        @logger.warn("Sending to all redis servers failed")
+        @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+        Thread.stop
+      end
       retry
     end
   end # def receive
 
   private
-  def process_pending(force=false)
-    if !@pending_mutex.try_lock # failed to get lock
-      return
-    end
+  def process_pending
+    time_since_last_flush = Time.now.to_f - @last_pending_flush
 
+    pending_events = nil
     pending_count = 0
-    @pending.each { |k, v| pending_count += v.length }
-    time_since_last_flush = Time.now.to_f - @last_pending_flush
+    @events_mutex.synchronize do
+      if @pending_count > 0
+        pending_events, @pending = @pending, Hash.new { |h, k| h[k] = [] }
+        pending_count ,@pending_count = @pending_count, 0
+      end
+    end
 
-    if (force && pending_count > 0) ||
-       (pending_count >= @batch_events) ||
-       (time_since_last_flush >= @batch_timeout && pending_count > 0)
+    if pending_events
       @logger.debug("Flushing redis output",
                     :pending_count => pending_count,
                     :time_since_last_flush => time_since_last_flush,
                     :batch_events => @batch_events,
-                    :batch_timeout => @batch_timeout,
-                    :force => force)
+                    :batch_timeout => @batch_timeout)
       begin
-        @redis ||= connect
-        @pending.each do |k, v|
-          @redis.rpush(k, v)
-          @pending.delete(k)
+        while @active_servers.empty?
+          @logger.warn("Could not connect to any of the redis servers")
+          @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+          Thread.stop
+        end
+        while pending_events.length > 0
+          pending_events.each do |k, v|
+            if @redis_pool[@active_servers[0]].llen(k) < @max_redis_events # Don't push event to redis key which has reached @max_redis_events
+              @redis_pool[@active_servers[0]].rpush(k, v)
+              pending_events.delete(k)
+            else
+              @logger.info("Redis server has max allowed unconsumed events", :max_redis_events => @max_redis_events,
+                          :events_in_redis => @redis_pool[@active_servers[0]].llen(k), :host => @active_servers[0])
+            end
+          end
+          if pending_events.length > 0
+            @lb_mutex.synchronize { @active_servers.shift }
+            while @active_servers.empty? # If all redis servers are full or inactive then sleep and try again
+              @logger.warn("All redis servers are full or inactive")
+              @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+              Thread.stop
+            end
+          end
         end
         @last_pending_flush = Time.now.to_f
+        @main_thread.run if @main_thread.status == "sleep" # Wakeup main thread in case it blocked itself due to @max_buffered_events
+        @lb_mutex.synchronize { @active_servers << @active_servers.shift if @balance_hosts and @active_servers.length > 1 }
       rescue => e
-        @logger.warn("Failed to send backlog of events to redis",
-                     :pending_count => pending_count,
-                     :identity => identity, :exception => e,
-                     :backtrace => e.backtrace)
-        sleep 1
+        @logger.error("Failed to send backlog of events to redis", :pending_count => @pending_count,
+                     :host => @active_servers[0], :exception => e, :backtrace => e.backtrace)
+        @lb_mutex.synchronize { @active_servers.shift }
+        if @active_servers.empty? # If all redis servers are full or inactive then sleep and try again
+          @logger.warn("Sending to all redis servers failed")
+          @blocked_mutex.synchronize { @blocked_threads << Thread.current unless @blocked_threads.index(Thread.current) }
+          Thread.stop
+        end
         retry
       end
     end
-
-    @pending_mutex.unlock
   end
 
   public
   def teardown
-    process_pending(true)
+    process_pending
     if @data_type == 'channel' and @redis
       @redis.quit
       @redis = nil
