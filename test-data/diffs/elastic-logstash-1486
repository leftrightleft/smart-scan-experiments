diff --git a/lib/logstash/filters/kv.rb b/lib/logstash/filters/kv.rb
index 4535df04527..4e9e07431fc 100644
--- a/lib/logstash/filters/kv.rb
+++ b/lib/logstash/filters/kv.rb
@@ -157,10 +157,49 @@ class LogStash::Filters::KV < LogStash::Filters::Base
   #     }
   config :default_keys, :validate => :hash, :default => {}
 
+  # A boolean specifying whether to include brackets as value 'wrappers'
+  # (the default is true)
+  #
+  #     filter {
+  #       kv {
+  #         include_brackets => true
+  #       }
+  #     }
+  #
+  # For example, the result of this line:
+  # 'bracketsone=(hello world) bracketstwo=[hello world]'
+  #
+  # will be:
+  # * bracketsone: hello world
+  # * bracketstwo: hello world
+  #
+  # instead of:
+  # * bracketsone: (hello
+  # * bracketstwo: [hello
+  config :include_brackets, :validate => :boolean, :default => true
+
+  # A boolean specifying whether to drill down into values 
+  # and recursively get more key-value pairs from it.
+  # The extra key-value pairs will be stored as subkeys of the root key.
+  #
+  # Default is not to recursive values.
+  #
+  #     filter {
+  #       kv {
+  #         recursive => 'true'
+  #       }
+  #     }
+  #
+  config :recursive, :validate => :boolean, :default => false
+
   def register
     @trim_re = Regexp.new("[#{@trim}]") if !@trim.nil?
     @trimkey_re = Regexp.new("[#{@trimkey}]") if !@trimkey.nil?
-    @scan_re = Regexp.new("((?:\\\\ |[^"+@field_split+@value_split+"])+)["+@value_split+"](?:\"([^\"]+)\"|'([^']+)'|((?:\\\\ |[^"+@field_split+"])+))")
+
+    valueRxString = "(?:\"([^\"]+)\"|'([^']+)'"
+    valueRxString += "|\\(([^\\)]+)\\)|\\[([^\\]]+)\\]" if @include_brackets
+    valueRxString += "|((?:\\\\ |[^"+@field_split+"])+))"
+    @scan_re = Regexp.new("((?:\\\\ |[^"+@field_split+@value_split+"])+)\\s*["+@value_split+"]\\s*"+valueRxString)
   end # def register
 
   def filter(event)
@@ -203,11 +242,11 @@ def filter(event)
 
   private
   def parse(text, event, kv_keys)
-    if !event =~ /[@field_split]/
+    if !event =~ /[@value_split]/
       return kv_keys
     end
-    text.scan(@scan_re) do |key, v1, v2, v3|
-      value = v1 || v2 || v3
+    text.scan(@scan_re) do |key, v1, v2, v3, v4, v5|
+      value = v1 || v2 || v3 || v4 || v5
       key = @trimkey.nil? ? key : key.gsub(@trimkey_re, "")
 
       # Bail out as per the values of @include_keys and @exclude_keys
@@ -217,6 +256,16 @@ def parse(text, event, kv_keys)
       key = event.sprintf(@prefix) + key
 
       value = @trim.nil? ? value : value.gsub(@trim_re, "")
+
+      # recursively get more kv pairs from the value
+      if @recursive and value =~ /[@value_split]/
+        innerKv = Hash.new
+        innerKv = parse(value, event, innerKv) 
+        if innerKv.length > 0
+          value = innerKv
+        end
+      end
+
       if kv_keys.has_key?(key)
         if kv_keys[key].is_a? Array
           kv_keys[key].push(value)
diff --git a/spec/filters/kv.rb b/spec/filters/kv.rb
index 1da201a7b95..52f5391917e 100644
--- a/spec/filters/kv.rb
+++ b/spec/filters/kv.rb
@@ -13,14 +13,32 @@
       }
     CONFIG
 
-    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world'" do
+    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world' bracketsone=(hello world) bracketstwo=[hello world]" do
       insist { subject["hello"] } == "world"
       insist { subject["foo"] } == "bar"
       insist { subject["baz"] } == "fizz"
       insist { subject["doublequoted"] } == "hello world"
       insist { subject["singlequoted"] } == "hello world"
+      insist { subject["bracketsone"] } == "hello world"
+      insist { subject["bracketstwo"] } == "hello world"
     end
+  end
+
+  describe  "test spaces attached to the field_split" do
+    config <<-CONFIG
+      filter {
+        kv { }
+      }
+    CONFIG
 
+    sample "hello = world foo =bar baz= fizz doublequoted = \"hello world\" singlequoted= 'hello world' brackets =(hello world)" do
+      insist { subject["hello"] } == "world"
+      insist { subject["foo"] } == "bar"
+      insist { subject["baz"] } == "fizz"
+      insist { subject["doublequoted"] } == "hello world"
+      insist { subject["singlequoted"] } == "hello world"
+      insist { subject["brackets"] } == "hello world"
+    end
   end
 
    describe "LOGSTASH-624: allow escaped space in key or value " do
@@ -43,14 +61,14 @@
       }
     CONFIG
 
-    sample "hello:=world foo:bar baz=:fizz doublequoted:\"hello world\" singlequoted:'hello world'" do
+    sample "hello:=world foo:bar baz=:fizz doublequoted:\"hello world\" singlequoted:'hello world' brackets:(hello world)" do
       insist { subject["hello"] } == "=world"
       insist { subject["foo"] } == "bar"
       insist { subject["baz="] } == "fizz"
       insist { subject["doublequoted"] } == "hello world"
       insist { subject["singlequoted"] } == "hello world"
+      insist { subject["brackets"] } == "hello world"
     end
-
   end
 
   describe "test field_split" do
@@ -68,7 +86,36 @@
       insist { subject["singlequoted"] } == "hello world"
       insist { subject["foo12"] } == "bar12"
     end
+  end
+
+  describe "test include_brackets is false" do
+    config <<-CONFIG
+      filter {
+        kv { include_brackets => "false" }
+      }
+    CONFIG
 
+    sample "bracketsone=(hello world) bracketstwo=[hello world]" do
+      insist { subject["bracketsone"] } == "(hello"
+      insist { subject["bracketstwo"] } == "[hello"
+    end
+  end
+
+  describe "test recursive" do
+    config <<-CONFIG
+      filter {
+        kv { 
+          recursive => 'true'
+        }
+      }
+    CONFIG
+  
+    sample 'IKE="Quick Mode completion" IKE\ IDs = (subnet= x.x.x.x mask= 255.255.255.254 and host=y.y.y.y)' do
+      insist { subject["IKE"] } == 'Quick Mode completion'
+      insist { subject['IKE\ IDs']['subnet'] } == 'x.x.x.x'
+      insist { subject['IKE\ IDs']['mask'] } == '255.255.255.254'
+      insist { subject['IKE\ IDs']['host'] } == 'y.y.y.y'
+    end
   end
 
   describe  "delimited fields should override space default (reported by LOGSTASH-733)" do
