diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index e6eecdfd706..7e3dcc88ddd 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -337,12 +337,13 @@ def converge_state(pipeline_actions)
 
           unless action_result.successful?
             logger.error("Failed to execute action", :id => action.pipeline_id,
-                        :action_type => action_result.class, :message => action_result.message)
+                        :action_type => action_result.class, :message => action_result.message,
+                        :backtrace => action_result.backtrace)
           end
         rescue SystemExit => e
           converge_result.add(action, e)
         rescue Exception => e
-          logger.error("Failed to execute action", :action => action, :exception => e.class.name, :message => e.message)
+          logger.error("Failed to execute action", :action => action, :exception => e.class.name, :message => e.message, :backtrace => e.backtrace)
           converge_result.add(action, e)
         end
       end
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 07da11a85b7..9b1671b9f0b 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -578,17 +578,12 @@ def inputworker(plugin)
       end
 
       # otherwise, report error and restart
-      if @logger.debug?
-        @logger.error(I18n.t("logstash.pipeline.worker-error-debug",
-                             default_logging_keys(
-                               :plugin => plugin.inspect,
-                               :error => e.message,
-                               :exception => e.class,
-                               :stacktrace => e.backtrace.join("\n"))))
-      else
-        @logger.error(I18n.t("logstash.pipeline.worker-error",
-                             default_logging_keys(:plugin => plugin.inspect, :error => e.message)))
-      end
+      @logger.error(I18n.t("logstash.pipeline.worker-error-debug",
+                            default_logging_keys(
+                              :plugin => plugin.inspect,
+                              :error => e.message,
+                              :exception => e.class,
+                              :stacktrace => e.backtrace.join("\n"))))
 
       # Assuming the failure that caused this exception is transient,
       # let's sleep for a bit and execute #run again
