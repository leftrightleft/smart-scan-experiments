diff --git a/config/logstash.yml b/config/logstash.yml
index b9bca34353f..e97601e1050 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -102,26 +102,54 @@
 #
 # config.support_escapes: false
 #
-# ------------ HTTP API Settings -------------
+# ------------ API Settings -------------
 # Define settings related to the HTTP API here.
 #
 # The HTTP API is enabled by default. It can be disabled, but features that rely
 # on it will not work as intended.
-# http.enabled: true
 #
-# By default, the HTTP API is bound to only the host's local loopback interface,
-# ensuring that it is not accessible to the rest of the network. Because the API
-# includes neither authentication nor authorization and has not been hardened or
-# tested for use as a publicly-reachable API, binding to publicly accessible IPs
-# should be avoided where possible.
+# api.enabled: true
 #
-# http.host: 127.0.0.1
+# By default, the HTTP API is not secured and is therefore bound to only the
+# host's loopback interface, ensuring that it is not accessible to the rest of
+# the network.
+# When secured with SSL and Basic Auth, the API is bound to _all_ interfaces
+# unless configured otherwise.
+#
+# api.http.host: 127.0.0.1
 #
 # The HTTP API web server will listen on an available port from the given range.
 # Values can be specified as a single port (e.g., `9600`), or an inclusive range
 # of ports (e.g., `9600-9700`).
 #
-# http.port: 9600-9700
+# api.http.port: 9600-9700
+#
+# The HTTP API includes a customizable "environment" value in its response,
+# which can be configured here.
+#
+# api.environment: "production"
+#
+# The HTTP API can be secured with SSL (TLS). To do so, you will need to provide
+# the path to a password-protected keystore in p12 or jks format, along with credentials.
+#
+# api.ssl.enabled: false
+# api.ssl.keystore.path: /path/to/keystore.jks
+# api.ssl.keystore.password: "y0uRp4$$w0rD"
+#
+# The HTTP API can be configured to require authentication. Acceptable values are
+#  - `none`:  no auth is required (default)
+#  - `basic`: clients must authenticate with HTTP Basic auth, as configured
+#             with `api.auth.basic.*` options below
+# api.auth.type: none
+#
+# When configured with `api.auth.type` `basic`, you must provide the credentials
+# that requests will be validated against. Usage of Environment or Keystore
+# variable replacements is encouraged (such as the value `"${HTTP_PASS}"`, which
+# resolves to the value stored in the keystore's `HTTP_PASS` variable if present
+# or the same variable from the environment)
+#
+# api.auth.basic.username: "logstash-user"
+# api.auth.basic.password: "s3cUreP4$$w0rD"
 #
 # ------------ Module Settings ---------------
 # Define modules here.  Modules definitions must be defined as an array.
@@ -224,17 +252,6 @@
 #
 # path.dead_letter_queue:
 #
-# ------------ Metrics Settings --------------
-#
-# Bind address for the metrics REST endpoint
-#
-# http.host: "127.0.0.1"
-#
-# Bind port for the metrics REST endpoint, this option also accept a range
-# (9600-9700) and logstash will pick up the first available ports.
-#
-# http.port: 9600-9700
-#
 # ------------ Debugging Settings --------------
 #
 # Options for log.level:
diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.go
index da0d3cd14a3..1dda82e49cb 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.go
@@ -48,6 +48,10 @@ func squashSetting(setting string) string {
 // return the canonical setting name. eg. 'pipeline.unsafe_shutdown'
 func normalizeSetting(setting string) (string, error) {
 	valid_settings := []string{
+		"api.enabled",
+		"api.http.host",
+		"api.http.port",
+		"api.environment",
 		"node.name",
 		"path.data",
 		"pipeline.id",
@@ -81,9 +85,10 @@ func normalizeSetting(setting string) (string, error) {
 		"dead_letter_queue.max_bytes",
 		"dead_letter_queue.flush_interval",
 		"path.dead_letter_queue",
-		"http.host",
-		"http.port",
-		"http.enabled",
+		"http.enabled",     // DEPRECATED: prefer `api.enabled`
+		"http.environment", // DEPRECATED: prefer `api.environment`
+		"http.host",        // DEPRECATED: prefer `api.http.host`
+		"http.port",        // DEPRECATED: prefer `api.http.port`
 		"log.level",
 		"log.format",
 		"modules",
diff --git a/docs/static/logging.asciidoc b/docs/static/logging.asciidoc
index 574c0f8c09a..cf399d0cfc5 100644
--- a/docs/static/logging.asciidoc
+++ b/docs/static/logging.asciidoc
@@ -55,7 +55,7 @@ downtime. Instead, you can dynamically update logging levels through the logging
 immediately and do not need a restart. 
 
 NOTE: By default, the logging API attempts to bind to `tcp:9600`. If this port is already in use by another Logstash
-instance, you need to launch Logstash with the `--http.port` flag specified to bind to a different port. See
+instance, you need to launch Logstash with the `--api.http.port` flag specified to bind to a different port. See
 <<command-line-flags>> for more information.
 
 ===== Retrieve list of logging configurations
diff --git a/docs/static/monitoring/monitoring-apis.asciidoc b/docs/static/monitoring/monitoring-apis.asciidoc
index cc3b3200f38..2538df26c58 100644
--- a/docs/static/monitoring/monitoring-apis.asciidoc
+++ b/docs/static/monitoring/monitoring-apis.asciidoc
@@ -31,9 +31,39 @@ Example response:
 --------------------------------------------------
 
 NOTE: By default, the monitoring API attempts to bind to `tcp:9600`. If this port is already in use by another Logstash
-instance, you need to launch Logstash with the `--http.port` flag specified to bind to a different port. See
+instance, you need to launch Logstash with the `--api.http.port` flag specified to bind to a different port. See
 <<command-line-flags>> for more information.
 
+[discrete]
+[[monitoring-api-security]]
+==== Securing the Logstash API
+
+The {ls} Monitoring APIs are not secured by default, but you can configure {ls} to secure them in one of several ways to meet your organization's needs.
+
+You can enable SSL for the Logstash API by setting `api.ssl.enabled: true` in the `logstash.yml`, and providing the relevant keystore settings `api.ssl.keystore.path` and `api.ssl.keystore.password`:
+
+[source]
+--------------------------------------------------
+api.ssl.enabled: true
+api.ssl.keystore.path: /path/to/keystore.jks
+api.ssl.keystore.password: "s3cUr3p4$$w0rd"
+--------------------------------------------------
+
+The keystore must be in either jks or p12 format, and must contain both a certificate and a private key.
+Connecting clients receive this certificate, allowing them to authenticate the Logstash endpoint.
+
+You can also require HTTP Basic authentication by setting `api.auth.type: basic` in the `logstash.yml`, and providing the relevant credentials `api.auth.basic.username` and `api.auth.basic.password`:
+
+[source]
+--------------------------------------------------
+api.auth.type: basic
+api.auth.basic.username: "logstash"
+api.auth.basic.password: "stashy"
+--------------------------------------------------
+
+NOTE: Usage of Keystore or Environment or variable replacements is encouraged for password-type fields to avoid storing them in plain text.
+      For example, specifying the value `"${HTTP_PASS}"` will resolve to the value stored in the <<keystore,secure keystore's>> `HTTP_PASS` variable if present or the same variable from the <<environment-variables,environment>>)
+
 [discrete]
 [[monitoring-common-options]]
 ==== Common options
diff --git a/docs/static/running-logstash-command-line.asciidoc b/docs/static/running-logstash-command-line.asciidoc
index c82a7c97377..cb74e6d3a6e 100644
--- a/docs/static/running-logstash-command-line.asciidoc
+++ b/docs/static/running-logstash-command-line.asciidoc
@@ -211,10 +211,13 @@ With this command, Logstash concatenates three config files, `/tmp/one`, `/tmp/t
   How frequently to poll the configuration location for changes. The default value is "3s".
   Note that the unit qualifier (`s`) is required.
 
-*`--http.host HTTP_HOST`*::
+*`--api-enabled ENABLED`*::
+  The HTTP API is enabled by default, but can be disabled by passing `false` to this option.
+
+*`--api.http.host HTTP_HOST`*::
   Web API binding host. This option specifies the bind address for the metrics REST endpoint. The default is "127.0.0.1".
 
-*`--http.port HTTP_PORT`*::
+*`--api.http.port HTTP_PORT`*::
   Web API http port. This option specifies the bind port for the metrics REST endpoint. The default is 9600-9700.
   This setting accepts a range of the format 9600-9700. Logstash will pick up the first available port.
 
diff --git a/docs/static/settings-file.asciidoc b/docs/static/settings-file.asciidoc
index 1d82e56e749..9ee0ea89458 100644
--- a/docs/static/settings-file.asciidoc
+++ b/docs/static/settings-file.asciidoc
@@ -239,13 +239,53 @@ Values other than `disabled` are currently considered BETA, and may produce unin
 | The directory path where the data files will be stored for the dead-letter queue.
 | `path.data/dead_letter_queue`
 
-| `http.host`
-| The bind address for the metrics REST endpoint.
+| `api.enabled`
+|  The HTTP API is enabled by default. It can be disabled, but features that rely on it will not work as intended.
+| `true`
+
+| `api.environment`
+| The API returns the provided string as a part of its response. Setting your environment may help to disambiguate between similarly-named nodes in production vs test environments.
+| `production`
+
+| `api.http.host`
+| The bind address for the HTTP API endpoint.
+  By default, the {ls} HTTP API binds only to the local loopback interface.
+  When configured securely (`api.ssl.enabled: true` and `api.auth.type: basic`), the HTTP API binds to _all_ available interfaces.
 | `"127.0.0.1"`
 
-| `http.port`
-| The bind port for the metrics REST endpoint.
-| `9600`
+| `api.http.port`
+| The bind port for the HTTP API endpoint.
+| `9600-9700`
+
+| `api.ssl.enabled`
+| Set to `true` to enable SSL on the HTTP API.
+  Doing so requires both `api.ssl.keystore.path` and `api.ssl.keystore.password` to be set.
+| `false`
+
+| `api.ssl.keystore.path`
+| The path to a valid JKS or PKCS12 keystore for use in securing the {ls} API.
+  The keystore must be password-protected, and must contain a single certificate chain and a private key.
+  This setting is ignored unless `api.ssl.enabled` is set to `true`.
+| _N/A_
+
+| `api.ssl.keystore.password`
+| The password to the keystore provided with `api.ssl.keystore.path`.
+  This setting is ignored unless `api.ssl.enabled` is set to `true`.
+| _N/A_
+
+| `api.auth.type`
+| Set to `basic` to require HTTP Basic auth on the API using the credentials supplied with `api.auth.basic.username` and `api.auth.basic.password`.
+| `none`
+
+| `api.auth.basic.username`
+| The username to require for HTTP Basic auth
+  Ignored unless `api.auth.type` is set to `basic`.
+| _N/A_
+
+| `api.auth.basic.password`
+| The password to require for HTTP Basic auth
+Ignored unless `api.auth.type` is set to `basic`.
+| _N/A_
 
 | `log.level`
 a|
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 52889062d22..d021dd58595 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -63,9 +63,6 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
     @pipelines_registry = LogStash::PipelinesRegistry.new
 
     @name = setting("node.name")
-    @http_host = setting("http.host")
-    @http_port = setting("http.port")
-    @http_environment = setting("http.environment")
     # Generate / load the persistent uuid
     id
 
@@ -83,6 +80,9 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
       end
     end
 
+    # Initialize, but do not start the webserver.
+    @webserver = LogStash::WebServer.from_settings(@logger, self, settings)
+
     # This is for backward compatibility in the tests
     if source_loader.nil?
       @source_loader = LogStash::Config::SourceLoader.new
@@ -434,17 +434,15 @@ def dispatch_events(converge_results)
   end
 
   def start_webserver_if_enabled
-    if @settings.get_value("http.enabled")
+    if @settings.get_value("api.enabled")
       start_webserver
     else
-      @logger.info("HTTP API is disabled (`http.enabled=false`); webserver will not be started.")
+      @logger.info("HTTP API is disabled (`api.enabled=false`); webserver will not be started.")
     end
   end
 
   def start_webserver
     @webserver_control_lock.synchronize do
-      options = {:http_host => @http_host, :http_ports => @http_port, :http_environment => @http_environment }
-      @webserver = LogStash::WebServer.new(@logger, self, options)
       @webserver_thread = Thread.new(@webserver) do |webserver|
         LogStash::Util.set_thread_name("Api Webserver")
         webserver.run
@@ -454,7 +452,7 @@ def start_webserver
 
   def stop_webserver
     @webserver_control_lock.synchronize do
-      if @webserver
+      if @webserver_thread
         @webserver.stop
         if @webserver_thread.join(5).nil?
           @webserver_thread.kill
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 05e0b916e71..d0259cc1630 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -71,10 +71,16 @@ module Environment
            Setting::Boolean.new("help", false),
             Setting::Boolean.new("enable-local-plugin-development", false),
             Setting::String.new("log.format", "plain", true, ["json", "plain"]),
-           Setting::Boolean.new("http.enabled", true),
-            Setting::String.new("http.host", "127.0.0.1"),
-         Setting::PortRange.new("http.port", 9600..9700),
-            Setting::String.new("http.environment", "production"),
+           Setting::Boolean.new("api.enabled", true).with_deprecated_alias("http.enabled"),
+            Setting::String.new("api.http.host", "127.0.0.1").with_deprecated_alias("http.host"),
+         Setting::PortRange.new("api.http.port", 9600..9700).with_deprecated_alias("http.port"),
+            Setting::String.new("api.environment", "production").with_deprecated_alias("http.environment"),
+            Setting::String.new("api.auth.type", "none", true, %w(none basic)),
+            Setting::String.new("api.auth.basic.username", nil, false).nullable,
+          Setting::Password.new("api.auth.basic.password", nil, false).nullable,
+           Setting::Boolean.new("api.ssl.enabled", false),
+  Setting::ExistingFilePath.new("api.ssl.keystore.path", nil, false).nullable,
+          Setting::Password.new("api.ssl.keystore.password", nil, false).nullable,
             Setting::String.new("queue.type", "memory", true, ["persisted", "memory"]),
             Setting::Boolean.new("queue.drain", false),
             Setting::Bytes.new("queue.page_capacity", "64mb"),
diff --git a/logstash-core/lib/logstash/patches/clamp.rb b/logstash-core/lib/logstash/patches/clamp.rb
index 1f2b7598e73..80a9dcbe36d 100644
--- a/logstash-core/lib/logstash/patches/clamp.rb
+++ b/logstash-core/lib/logstash/patches/clamp.rb
@@ -78,8 +78,17 @@ def define_deprecated_accessors_for(option, opts, &block)
 
       def define_deprecated_writer_for(option, opts, &block)
         define_method(option.write_method) do |value|
-          LogStash::DeprecationMessage.instance << "DEPRECATION WARNING: The flag #{option.switches} has been deprecated, please use \"--#{opts[:new_flag]}=#{opts[:new_value]}\" instead."
-          LogStash::SETTINGS.set(opts[:new_flag], opts[:new_value])
+          new_flag = opts[:new_flag]
+          new_value = opts.fetch(:new_value, value)
+          passthrough = opts.fetch(:passthrough, false)
+
+          LogStash::DeprecationMessage.instance << "DEPRECATION WARNING: The flag #{option.switches} has been deprecated, please use \"--#{new_flag}=#{new_value}\" instead."
+
+          if passthrough
+            LogStash::SETTINGS.set(option.attribute_name, value)
+          else
+            LogStash::SETTINGS.set(opts[:new_flag], opts.include?(:new_value) ? opts[:new_value] : value)
+          end
         end
       end
     end
diff --git a/logstash-core/lib/logstash/patches/puma.rb b/logstash-core/lib/logstash/patches/puma.rb
index f3b309c4d68..8af40fdc305 100644
--- a/logstash-core/lib/logstash/patches/puma.rb
+++ b/logstash-core/lib/logstash/patches/puma.rb
@@ -36,6 +36,14 @@ def sync=(v)
       # noop
     end
 
+    def sync
+      # noop
+    end
+
+    def flush
+      # noop
+    end
+
     def logger=(logger)
       @logger_lock.synchronize { @logger = logger }
     end
@@ -48,6 +56,14 @@ def puts(str)
     alias_method :<<, :puts
   end
 
+  # ::Puma::Events#error(str) sends Kernel#exit
+  # let's raise something sensible instead.
+  UnrecoverablePumaError = Class.new(RuntimeError)
+  class NonCrashingPumaEvents < ::Puma::Events
+    def error(str)
+      raise UnrecoverablePumaError.new(str)
+    end
+  end
 end
 
 # Reopen the puma class to create a scoped STDERR and STDOUT
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index e9c4eab2e47..49455fb2a55 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -215,20 +215,20 @@ class LogStash::Runner < Clamp::StrictCommand
     :attribute_name => "config.reload.interval",
     :default => LogStash::SETTINGS.get_default("config.reload.interval")
 
-  option ["--http.enabled"], "ENABLED",
-         I18n.t("logstash.runner.flag.http_enabled"),
-         :attribute_name => 'http.enabled',
-         :default => LogStash::SETTINGS.get_default('http.enabled')
+  option ["--api.enabled"], "ENABLED",
+    I18n.t("logstash.runner.flag.api_enabled"),
+    :attribute_name => 'api.enabled',
+    :default => LogStash::SETTINGS.get_default('api.enabled')
 
-  option ["--http.host"], "HTTP_HOST",
-    I18n.t("logstash.runner.flag.http_host"),
-    :attribute_name => "http.host",
-    :default => LogStash::SETTINGS.get_default("http.host")
+  option ["--api.http.host"], "HTTP_HOST",
+    I18n.t("logstash.runner.flag.api_http_host"),
+    :attribute_name => "api.http.host",
+    :default => LogStash::SETTINGS.get_default("api.http.host")
 
-  option ["--http.port"], "HTTP_PORT",
-    I18n.t("logstash.runner.flag.http_port"),
-    :attribute_name => "http.port",
-    :default => LogStash::SETTINGS.get_default("http.port")
+  option ["--api.http.port"], "HTTP_PORT",
+    I18n.t("logstash.runner.flag.api_http_port"),
+    :attribute_name => "api.http.port",
+    :default => LogStash::SETTINGS.get_default("api.http.port")
 
   option ["--log.format"], "FORMAT",
     I18n.t("logstash.runner.flag.log_format"),
@@ -253,6 +253,18 @@ class LogStash::Runner < Clamp::StrictCommand
     I18n.t("logstash.runner.flag.quiet"),
     :new_flag => "log.level", :new_value => "error"
 
+  deprecated_option ["--http.enabled"], :flag,
+    I18n.t("logstash.runner.flag.http_enabled"),
+    :new_flag => "api.enabled", :passthrough => true # use settings to disambiguate
+
+  deprecated_option ["--http.host"], "HTTP_HOST",
+    I18n.t("logstash.runner.flag.http_host"),
+    :new_flag => "api.http.host", :passthrough => true # use settings to disambiguate
+
+  deprecated_option ["--http.port"], "HTTP_PORT",
+    I18n.t("logstash.runner.flag.http_port"),
+    :new_flag => "api.http.port", :passthrough => true # use settings to disambiguate
+
   # We configure the registry and load any plugin that can register hooks
   # with logstash, this needs to be done before any operation.
   SYSTEM_SETTINGS = LogStash::SETTINGS.clone
@@ -311,7 +323,7 @@ def execute
     end
 
     while(msg = LogStash::DeprecationMessage.instance.shift)
-      logger.warn msg
+      deprecation_logger.deprecated msg
     end
 
     # Skip any validation and just return the version
@@ -328,7 +340,7 @@ def execute
     @dispatcher = LogStash::EventDispatcher.new(self)
     LogStash::PLUGIN_REGISTRY.hooks.register_emitter(self.class, @dispatcher)
 
-    @settings.validate_all
+    validate_settings! or return 1
     @dispatcher.fire(:before_bootstrap_checks)
 
     return start_shell(setting("interactive"), binding) if setting("interactive")
@@ -463,6 +475,14 @@ def log_configuration_contains_javascript_usage?
      (log_config =~ /^[^#]+script\.language\s*=\s*JavaScript/) != nil
   end
 
+  def validate_settings!
+    @settings.validate_all
+    true
+  rescue => e
+    $stderr.puts(I18n.t("logstash.runner.invalid-settings", :error => e.message))
+    return false
+  end
+
   def show_version
     show_version_logstash
 
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 94a0b6185d9..e5bded6fa75 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -16,6 +16,8 @@
 # under the License.
 
 require "fileutils"
+require "delegate"
+
 require "logstash/util/byte_value"
 require "logstash/util/substitution_variables"
 require "logstash/util/time_value"
@@ -26,6 +28,17 @@ class Settings
     include LogStash::Util::SubstitutionVariables
     include LogStash::Util::Loggable
 
+    # The `LOGGABLE_PROXY` is included into `LogStash::Setting` to make all
+    # settings-related logs and deprecations come from the same logger.
+    LOGGABLE_PROXY = Module.new do
+      define_method(:logger) { Settings.logger }
+      define_method(:deprecation_logger) { Settings.deprecation_logger }
+
+      def self.included(base)
+        base.extend(self)
+      end
+    end
+
     # there are settings that the pipeline uses and can be changed per pipeline instance
     PIPELINE_SETTINGS_WHITE_LIST = [
       "config.debug",
@@ -72,6 +85,8 @@ def initialize
     end
 
     def register(setting)
+      return setting.map { |s| register(s) } if setting.kind_of?(Array)
+
       if @settings.key?(setting.name)
         raise ArgumentError.new("Setting \"#{setting.name}\" has already been registered as #{setting.inspect}")
       else
@@ -99,6 +114,10 @@ def get_subset(setting_regexp)
       settings
     end
 
+    def names
+      @settings.keys
+    end
+
     def set?(setting_name)
       get_setting(setting_name).set?
     end
@@ -131,6 +150,7 @@ def set_value(setting_name, value, graceful = false)
     def to_hash
       hash = {}
       @settings.each do |name, setting|
+        next if setting.kind_of? Setting::DeprecatedAlias
         hash[name] = setting.value
       end
       hash
@@ -154,17 +174,7 @@ def format_settings
       output = []
       output << "-------- Logstash Settings (* means modified) ---------"
       @settings.each do |setting_name, setting|
-        value = setting.value
-        default_value = setting.default
-        if default_value == value # print setting and its default value
-          output << "#{setting_name}: #{value.inspect}" unless value.nil?
-        elsif default_value.nil? # print setting and warn it has been set
-          output << "*#{setting_name}: #{value.inspect}"
-        elsif value.nil? # default setting not set by user
-          output << "#{setting_name}: #{default_value.inspect}"
-        else # print setting, warn it has been set, and show default value
-          output << "*#{setting_name}: #{value.inspect} (default: #{default_value.inspect})"
-        end
+        setting.format(output)
       end
       output << "--------------- Logstash Settings -------------------"
       output
@@ -224,7 +234,7 @@ def flatten_hash(h,f="",g={})
   end
 
   class Setting
-    include LogStash::Util::Loggable
+    include LogStash::Settings::LOGGABLE_PROXY
 
     attr_reader :name, :default
 
@@ -290,6 +300,32 @@ def validate_value
       validate(value)
     end
 
+    def with_deprecated_alias(deprecated_alias_name)
+      SettingWithDeprecatedAlias.wrap(self, deprecated_alias_name)
+    end
+
+    ##
+    # Returns a Nullable-wrapped self, effectively making the Setting optional.
+    def nullable
+      Nullable.new(self)
+    end
+
+    def format(output)
+      effective_value = self.value
+      default_value = self.default
+      setting_name = self.name
+
+      if default_value == value # print setting and its default value
+        output << "#{setting_name}: #{effective_value.inspect}" unless effective_value.nil?
+      elsif default_value.nil? # print setting and warn it has been set
+        output << "*#{setting_name}: #{effective_value.inspect}"
+      elsif effective_value.nil? # default setting not set by user
+        output << "#{setting_name}: #{default_value.inspect}"
+      else # print setting, warn it has been set, and show default value
+        output << "*#{setting_name}: #{effective_value.inspect} (default: #{default_value.inspect})"
+      end
+    end
+
     protected
     def validate(input)
       if !input.is_a?(@klass)
@@ -483,6 +519,26 @@ def validate(value)
       end
     end
 
+    class Password < Coercible
+      def initialize(name, default=nil, strict=true)
+        super(name, LogStash::Util::Password, default, strict)
+      end
+
+      def coerce(value)
+        return value if value.kind_of?(LogStash::Util::Password)
+
+        if value && !value.kind_of?(::String)
+          raise(ArgumentError, "Setting `#{name}` could not coerce non-string value to password")
+        end
+
+        LogStash::Util::Password.new(value)
+      end
+
+      def validate(value)
+        super(value)
+      end
+    end
+
     # The CoercibleString allows user to enter any value which coerces to a String.
     # For example for true/false booleans; if the possible_strings are ["foo", "true", "false"]
     # then these options in the config file or command line will be all valid: "foo", true, false, "true", "false"
@@ -679,10 +735,25 @@ def validate(value)
       end
     end
 
+    # @see Setting#nullable
+    # @api internal
+    class Nullable < SimpleDelegator
+      def validate(value)
+        return true if value.nil?
+
+        __getobj__.send(:validate, value)
+      end
+
+      # prevent delegate from intercepting
+      def validate_value
+        validate(value)
+      end
+    end
+
     ##
     # Instances of `DeprecatedSetting` can be registered, but will fail with helpful guidance when encountering any
     # configuration that attempts to explicitly set the value. They should be used in the Major version immediately
-    # following a deprecation to assist users who are porting forward configurations.
+    # following a deprecation REMOVAL to assist users who are porting forward configurations.
     class DeprecatedSetting < Setting
       def initialize(name, guidance='please remove the setting from your configuration and try again.')
         super(name, Object)
@@ -695,6 +766,7 @@ def set(value)
     end
 
     # Useful when a setting has been renamed but otherwise is semantically identical
+    # LEGACY: Use Setting#with_deprecated_alias(alias_name) instead
     class DeprecatedAndRenamed < DeprecatedSetting
       attr_reader :new_name
       def initialize(name, new_name)
@@ -702,6 +774,110 @@ def initialize(name, new_name)
         @new_name = new_name
       end
     end
+
+    # @api private
+    #
+    # A DeprecatedAlias provides a deprecated alias for a setting, and is meant
+    # to be used exclusively through `SettingWithDeprecatedAlias#wrap`
+    class DeprecatedAlias < SimpleDelegator
+      # include LogStash::Util::Loggable
+
+      alias_method :wrapped, :__getobj__
+      attr_reader :canonical_proxy
+
+      def initialize(canonical_proxy, alias_name)
+        @canonical_proxy = canonical_proxy
+
+        clone = @canonical_proxy.canonical_setting.clone
+        clone.instance_variable_set(:@name, alias_name)
+        clone.instance_variable_set(:@default, nil)
+
+        super(clone)
+      end
+
+      def set(value)
+        deprecation_logger.deprecated(I18n.t("logstash.settings.deprecation.set",
+                                             deprecated_alias: name,
+                                             canonical_name: canonical_proxy.name))
+        super
+      end
+
+      def value
+        logger.warn(I18n.t("logstash.settings.deprecation.queried",
+                           deprecated_alias: name,
+                           canonical_name: canonical_proxy.name))
+        @canonical_proxy.value
+      end
+
+      def validate_value
+        # bypass deprecation warning
+        validate(wrapped.value) if set?
+      end
+    end
+
+    ##
+    # A SettingWithDeprecatedAlias wraps any Setting to provide a deprecated
+    # alias, and hooks `Setting#validate_value` to ensure that a deprecation
+    # warning is fired when the setting is provided by its deprecated alias,
+    # or to produce an error when both the canonical name and deprecated
+    # alias are used together.
+    class SettingWithDeprecatedAlias < SimpleDelegator
+
+      ##
+      # Wraps the provided setting, returning a pair of connected settings
+      # including the canonical setting and a deprecated alias.
+      # @param canonical_setting [Setting]: the setting to wrap
+      # @param deprecated_alias_name [String]: the name for the deprecated alias
+      #
+      # @return [SettingWithDeprecatedAlias,DeprecatedAlias]
+      def self.wrap(canonical_setting, deprecated_alias_name)
+        setting_proxy = new(canonical_setting, deprecated_alias_name)
+
+        [setting_proxy, setting_proxy.deprecated_alias]
+      end
+
+      attr_reader :deprecated_alias
+      alias_method :canonical_setting, :__getobj__
+
+      def initialize(canonical_setting, deprecated_alias_name)
+        super(canonical_setting)
+
+        @deprecated_alias = DeprecatedAlias.new(self, deprecated_alias_name)
+      end
+
+      def set(value)
+        canonical_setting.set(value)
+      end
+
+      def value
+        return super if canonical_setting.set?
+
+        # bypass warning by querying the wrapped setting's value
+        return deprecated_alias.wrapped.value if deprecated_alias.set?
+
+        default
+      end
+
+      def set?
+        canonical_setting.set? || deprecated_alias.set?
+      end
+
+      def format(output)
+        return super unless deprecated_alias.set? && !canonical_setting.set?
+
+        output << "*#{self.name}: #{value.inspect} (via deprecated `#{deprecated_alias.name}`; default: #{default.inspect})"
+      end
+
+      def validate_value
+        if deprecated_alias.set? && canonical_setting.set?
+          fail(ArgumentError, I18n.t("logstash.settings.deprecation.ambiguous",
+                                     canonical_name: canonical_setting.name,
+                                     deprecated_alias: deprecated_alias.name))
+        end
+
+        super
+      end
+    end
   end
 
 
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index c07989d9ba8..93fa29914c8 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -24,51 +24,123 @@
 
 module LogStash
   class WebServer
-    extend Forwardable
 
-    attr_reader :logger, :status, :config, :options, :runner, :binder, :events, :http_host, :http_ports, :http_environment, :agent
-
-    def_delegator :@runner, :stats
+    attr_reader :logger, :config, :http_host, :http_ports, :http_environment, :agent, :port
 
     DEFAULT_HOST = "127.0.0.1".freeze
     DEFAULT_PORTS = (9600..9700).freeze
     DEFAULT_ENVIRONMENT = 'production'.freeze
 
+    def self.from_settings(logger, agent, settings)
+      options = {}
+      options[:http_host] = settings.get('api.http.host') # may be overridden later if API configured securely
+      options[:http_ports] = settings.get('api.http.port')
+      options[:http_environment] = settings.get('api.environment')
+
+      if settings.get('api.ssl.enabled')
+        ssl_params = {}
+        ssl_params[:keystore_path] = required_setting(settings, 'api.ssl.keystore.path', "api.ssl.enabled")
+        ssl_params[:keystore_password] = required_setting(settings, 'api.ssl.keystore.password', "api.ssl.enabled")
+
+        options[:ssl_params] = ssl_params.freeze
+      else
+        warn_ignored(logger, settings, "api.ssl.", "api.ssl.enabled")
+      end
+
+      if settings.get('api.auth.type') == 'basic'
+        auth_basic = {}
+        auth_basic[:username] = required_setting(settings, 'api.auth.basic.username', "api.auth.type")
+        auth_basic[:password] = required_setting(settings, 'api.auth.basic.password', "api.auth.type")
+
+        options[:auth_basic] = auth_basic.freeze
+      else
+        warn_ignored(logger, settings, "api.auth.basic.", "api.auth.type")
+      end
+
+      if !settings.set?('api.http.host')
+        if settings.get('api.ssl.enabled') && settings.get('api.auth.type') == 'basic'
+          logger.info("API configured securely with SSL and Basic Auth. Defaulting `api.http.host` to all available interfaces")
+          options[:http_host] = '0.0.0.0'
+        end
+      end
+
+      logger.debug("Initializing API WebServer",
+                   "api.http.host"        => options[:http_host],
+                   "api.http.port"        => settings.get("api.http.port"),
+                   "api.ssl.enabled"      => settings.get("api.ssl.enabled"),
+                   "api.auth.type"        => settings.get("api.auth.type"),
+                   "api.environment"      => settings.get("api.environment"))
+
+      new(logger, agent, options)
+    end
+
+    # @api internal
+    def self.warn_ignored(logger, settings, pattern, trigger)
+      trigger_value = settings.get(trigger)
+      settings.names.each do |setting_name|
+        next unless setting_name.start_with?(pattern)
+        next if setting_name == trigger
+        next unless settings.set?(setting_name)
+
+        logger.warn("Setting `#{setting_name}` is ignored because `#{trigger}` is set to `#{trigger_value}`")
+      end
+    end
+
+    # @api internal
+    def self.required_setting(settings, setting_name, trigger)
+      settings.get(setting_name) || fail(ArgumentError, "Setting `#{setting_name}` is required when `#{trigger}` is set to `#{settings.get(trigger)}`. Please provide it in your `logstash.yml`")
+    end
+
+    ##
+    # @param logger [Logger]
+    # @param agent [Agent]
+    # @param options [Hash{Symbol=>Object}]
+    # @option :http_host [String]
+    # @option :http_ports [Enumerable[Integer]]
+    # @option :http_environment [String]
+    # @option :ssl_params [Hash{Symbol=>Object}]
+    #             :keystore_path [String]
+    #             :keystore_password [LogStash::Util::Password]
+    # @option :auth_basic [Hash{Symbol=>Object}]
+    #             :username [String]
+    #             :password [LogStash::Util::Password]
     def initialize(logger, agent, options={})
       @logger = logger
       @agent = agent
       @http_host = options[:http_host] || DEFAULT_HOST
       @http_ports = options[:http_ports] || DEFAULT_PORTS
       @http_environment = options[:http_environment] || DEFAULT_ENVIRONMENT
-      @options = {}
-      @status = nil
+      @ssl_params = options[:ssl_params] if options.include?(:ssl_params)
       @running = Concurrent::AtomicBoolean.new(false)
+
+      validate_keystore_access! if @ssl_params
+
+      # wrap any output that puma could generate into a wrapped logger
+      # use the puma namespace to override STDERR, STDOUT in that scope.
+      Puma::STDERR.logger = logger
+      Puma::STDOUT.logger = logger
+
+      app = LogStash::Api::RackApp.app(logger, agent, http_environment)
+
+      if options.include?(:auth_basic)
+        username = options[:auth_basic].fetch(:username)
+        password = options[:auth_basic].fetch(:password)
+        app = Rack::Auth::Basic.new(app, "logstash-api") { |u, p| u == username && p == password.value }
+      end
+
+      @app = app
     end
 
     def run
-      logger.debug("Starting puma")
+      logger.debug("Starting API WebServer (puma)")
 
       stop # Just in case
 
       running!
 
-      http_ports.each_with_index do |port, idx|
-        begin
-          if running?
-            @port = port
-            logger.debug("Trying to start WebServer", :port => @port)
-            start_webserver(@port)
-          else
-            break # we are closing down the server so just get out of the loop
-          end
-        rescue Errno::EADDRINUSE
-          if http_ports.count == 1
-            raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port", :port => http_ports.first))
-          elsif idx == http_ports.count-1
-            raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port_in_range", :http_ports => http_ports))
-          end
-        end
-      end
+      bind_to_available_port # and block...
+
+      logger.debug("API WebServer has stopped running")
     end
 
     def running!
@@ -88,32 +160,72 @@ def stop(options={})
       @server.stop(true) if @server
     end
 
-    def start_webserver(port)
-      # wrap any output that puma could generate into a wrapped logger
-      # use the puma namespace to override STDERR, STDOUT in that scope.
-      Puma::STDERR.logger = logger
-      Puma::STDOUT.logger = logger
-
-      io_wrapped_logger = LogStash::IOWrappedLogger.new(logger)
+    def ssl_enabled?
+      !!@ssl_params
+    end
 
-      app = LogStash::Api::RackApp.app(logger, agent, http_environment)
+    private
 
-      events = ::Puma::Events.new(io_wrapped_logger, io_wrapped_logger)
+    def _init_server
+      io_wrapped_logger = LogStash::IOWrappedLogger.new(logger)
+      events = LogStash::NonCrashingPumaEvents.new(io_wrapped_logger, io_wrapped_logger)
 
-      @server = ::Puma::Server.new(app, events)
-      @server.add_tcp_listener(http_host, port)
+      ::Puma::Server.new(@app, events)
+    end
 
-      logger.info("Successfully started Logstash API endpoint", :port => port)
+    def bind_to_available_port
+      http_ports.each_with_index do |candidate_port, idx|
+        begin
+          break unless running?
+
+          @server = _init_server
+
+          logger.debug("Trying to start API WebServer", :port => candidate_port, :ssl_enabled => ssl_enabled?)
+          if @ssl_params
+            unwrapped_ssl_params = {
+              'keystore'      => @ssl_params.fetch(:keystore_path),
+              'keystore-pass' => @ssl_params.fetch(:keystore_password).value
+            }
+            ssl_context = Puma::MiniSSL::ContextBuilder.new(unwrapped_ssl_params, @server.events).context
+            @server.add_ssl_listener(http_host, candidate_port, ssl_context)
+          else
+            @server.add_tcp_listener(http_host, candidate_port)
+          end
 
-      set_http_address_metric("#{http_host}:#{port}")
+          @port = candidate_port
+          logger.info("Successfully started Logstash API endpoint", :port => candidate_port, :ssl_enabled => ssl_enabled?)
+          set_http_address_metric("#{http_host}:#{candidate_port}")
 
-      @server.run.join
+          @server.run.join
+          break
+        rescue Errno::EADDRINUSE
+          if http_ports.count == 1
+            raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port", :port => http_ports.first))
+          elsif idx == http_ports.count-1
+            raise Errno::EADDRINUSE.new(I18n.t("logstash.web_api.cant_bind_to_port_in_range", :http_ports => http_ports))
+          end
+        end
+      end
     end
 
-    private
     def set_http_address_metric(value)
       return unless @agent.metric
       @agent.metric.gauge([], :http_address, value)
     end
+
+    # Validate access to the provided keystore.
+    # Errors accessing the keystore after binding the webserver to a port are very hard to debug.
+    # @api private
+    def validate_keystore_access!
+      return false unless @ssl_params
+
+      raise("Password not provided!") unless @ssl_params.fetch(:keystore_password).value
+
+      java.security.KeyStore.getInstance("JKS")
+          .load(java.io.FileInputStream.new(@ssl_params.fetch(:keystore_path)),
+                @ssl_params.fetch(:keystore_password).value.chars&.to_java(:char))
+    rescue => e
+      raise ArgumentError.new("API Keystore could not be opened (#{e})")
+    end
   end
 end
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 79d8538ffb9..7dd01432a1a 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -77,9 +77,9 @@ en:
         Logstash is not able to start since configuration auto reloading was enabled but the configuration contains plugins that don't support it. Quitting...
     web_api:
       cant_bind_to_port: |-
-        Logstash tried to bind to port %{port}, but the port is already in use. You can specify a new port by launching logstash with the --http.port option."
+        Logstash tried to bind to port %{port}, but the port is already in use. You can specify a new port by launching logstash with the --api.http.port option."
       cant_bind_to_port_in_range: |-
-        Logstash tried to bind to port range %{http_ports}, but all the ports are already in use. You can specify a new port by launching logstash with the --http.port option."
+        Logstash tried to bind to port range %{http_ports}, but all the ports are already in use. You can specify a new port by launching logstash with the --api.http.port option."
       hot_threads:
         title: |-
           ::: {%{hostname}}
@@ -120,6 +120,9 @@ en:
           bin/logstash -i SHELL [--log.level fatal|error|warn|info|debug|trace]
           bin/logstash -V [--log.level fatal|error|warn|info|debug|trace]
           bin/logstash --help
+      invalid-settings: >-
+        Your settings are invalid.
+        Reason: %{error}
       invalid-configuration: >-
         The given configuration is invalid. Reason: %{error}
       missing-configuration: >-
@@ -285,8 +288,18 @@ en:
         http_enabled: |+
           Can be used to disable the Web API, which is
           enabled by default.
-        http_host: Web API binding host
-        http_port: Web API http port
+          DEPRECATED: use `--api.enabled=false`
+        http_host: |+
+          Web API binding host
+          DEPRECATED: use `--api.http.host=IP`
+        http_port: |+
+          Web API http port
+          DEPRECATED: use `--api.http.port=PORT`
+        api_enabled: |+
+          Can be used to disable the Web API, which is
+          enabled by default.
+        api_http_host: Web API binding host
+        api_http_port: Web API http port
         enable-local-plugin-development: |+
           Allow Gemfile to be manipulated directly
           to facilitate simpler local plugin
@@ -406,3 +419,14 @@ en:
         quiet: |+
           Set the log level to info.
           DEPRECATED: use --log.level=info instead.
+    settings:
+      deprecation:
+        set: >-
+          The setting `%{deprecated_alias}` is a deprecated alias for `%{canonical_name}`
+          and will be removed in a future release of Logstash. Please use %{canonical_name} instead
+        queried: >-
+          The value of setting `%{canonical_name}` has been queried by its deprecated alias `%{deprecated_alias}`.
+          Code should be updated to query `%{canonical_name}` instead
+        ambiguous: >-
+          Both `%{canonical_name}` and its deprecated alias `%{deprecated_alias}` have been set.
+          Please only set `%{canonical_name}`
\ No newline at end of file
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index 8682b5829d3..0497da28f56 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -56,7 +56,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "rack", '~> 2'
   gem.add_runtime_dependency "mustermann", '~> 1.0.3'
   gem.add_runtime_dependency "sinatra", '~> 2'
-  gem.add_runtime_dependency 'puma', '~> 4'
+  gem.add_runtime_dependency 'puma', '~> 5'
   gem.add_runtime_dependency "jruby-openssl", "= 0.10.5" # >= 0.9.13 Required to support TLSv1.2
   gem.add_runtime_dependency "chronic_duration", "~> 0.10"
 
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 7cc7537a508..d2157f9bab2 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -65,6 +65,8 @@
       allow(described_class).to receive(:logger).and_return(logger)
       [:debug, :info, :error, :fatal, :trace].each {|level| allow(logger).to receive(level) }
       [:debug?, :info?, :error?, :fatal?, :trace?].each {|level| allow(logger).to receive(level) }
+
+      allow(LogStash::WebServer).to receive(:from_settings).with(any_args).and_return(double("WebServer").as_null_object)
     end
 
     after :each do
diff --git a/logstash-core/spec/logstash/config/source/multi_local_spec.rb b/logstash-core/spec/logstash/config/source/multi_local_spec.rb
index 4746cd5f912..d9623504c1d 100644
--- a/logstash-core/spec/logstash/config/source/multi_local_spec.rb
+++ b/logstash-core/spec/logstash/config/source/multi_local_spec.rb
@@ -164,7 +164,7 @@
 
     context "using non pipeline related settings" do
       let(:retrieved_pipelines) do [
-          { "pipeline.id" => "main", "config.string" => "", "http.port" => 22222 },
+          { "pipeline.id" => "main", "config.string" => "", "api.http.port" => 22222 },
         ]
       end
       it "should raise and error" do
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 68f5fb45db7..d503e384c59 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -31,7 +31,7 @@
 
 describe LogStash::Runner do
 
-  subject { LogStash::Runner }
+  subject(:runner) { LogStash::Runner }
   let(:logger) { double("logger") }
   let(:agent) { double("agent") }
 
@@ -235,61 +235,152 @@
       end
     end
 
-    context "when :http.host is defined by the user" do
-      it "should pass the value to the webserver" do
-        expect(LogStash::Agent).to receive(:new) do |settings|
-          expect(settings.set?("http.host")).to be(true)
-          expect(settings.get("http.host")).to eq("localhost")
+    context ':api.http.host' do
+      context "when undefined by the user" do
+        let(:args) { ["-e", pipeline_string] }
+        it "creates an Agent whose `api.http.host` uses the default value" do
+          expect(LogStash::Agent).to receive(:new) do |settings|
+            expect(settings.set?("api.http.host")).to be_falsey
+            expect(settings.get("api.http.host")).to eq("127.0.0.1")
+          end
+
+          subject.run("bin/logstash", args)
         end
+      end
 
-        args = ["--http.host", "localhost", "-e", pipeline_string]
-        subject.run("bin/logstash", args)
+      context "when defined by the user" do
+        let(:args) { ["--api.http.host", "localhost", "-e", pipeline_string]}
+        it "creates an Agent whose `api.http.host` uses provided value" do
+          expect(LogStash::Agent).to receive(:new) do |settings|
+            expect(settings.set?("api.http.host")).to be(true)
+            expect(settings.get("api.http.host")).to eq("localhost")
+          end
+
+          subject.run("bin/logstash", args)
+        end
       end
-    end
 
-    context "when :http.host is not defined by the user" do
-      it "should pass the value to the webserver" do
-        expect(LogStash::Agent).to receive(:new) do |settings|
-          expect(settings.set?("http.host")).to be_falsey
-          expect(settings.get("http.host")).to eq("127.0.0.1")
+      context "using deprecated :http.host alias" do
+        let(:deprecation_logger_stub) { double("DeprecationLogger(Settings)").as_null_object }
+        before(:each) { allow(LogStash::Settings).to receive(:deprecation_logger).and_return(deprecation_logger_stub) }
+
+        let(:runner_deprecation_logger_stub) { double("DeprecationLogger(Runner)").as_null_object }
+        before(:each) { allow(runner).to receive(:deprecation_logger).and_return(runner_deprecation_logger_stub) }
+
+        context "when deprecated :http.host is defined by the user" do
+          let(:args) { ["--http.host", "localhost", "-e", pipeline_string]}
+          it "creates an Agent whose `api.http.host` uses the provided value and provides helpful deprecation message" do
+            expect(deprecation_logger_stub).to receive(:deprecated).with(a_string_including "`http.host` is a deprecated alias for `api.http.host`")
+            expect(runner_deprecation_logger_stub).to receive(:deprecated).with(a_string_including 'The flag ["--http.host"] has been deprecated')
+            expect(LogStash::Agent).to receive(:new) do |settings|
+              expect(settings.set?("api.http.host")).to be(true)
+              expect(settings.get("api.http.host")).to eq("localhost")
+            end
+
+            subject.run("bin/logstash", args)
+          end
         end
 
-        args = ["-e", pipeline_string]
-        subject.run("bin/logstash", args)
+        context "when :api.http.host and deprecated alias :http.host are both defined by the user" do
+          it "errors helpfully" do
+            args = ["--api.http.host", "api.local", "--http.host", "http.local", "-e", pipeline_string]
+            expect do
+              expect(subject.run("bin/logstash", args)).to_not eq(0)
+            end.to output(a_string_including("Both `api.http.host` and its deprecated alias `http.host` have been set. Please only set `api.http.host`")).to_stderr
+          end
+        end
       end
     end
 
-    context "when :http.port is defined by the user" do
-      it "should pass a single value to the webserver" do
-        expect(LogStash::Agent).to receive(:new) do |settings|
-          expect(settings.set?("http.port")).to be(true)
-          expect(settings.get("http.port")).to eq(10000..10000)
-        end
+    context ":api.http.port" do
+      context "when undefined by the user" do
+        let(:args) { ["-e", pipeline_string] }
+        it "creates an Agent whose `api.http.port` uses the default value" do
+          expect(LogStash::Agent).to receive(:new) do |settings|
+            expect(settings.set?("api.http.port")).to be_falsey
+            expect(settings.get("api.http.port")).to eq(9600..9700)
+          end
 
-        args = ["--http.port", "10000", "-e", pipeline_string]
-        subject.run("bin/logstash", args)
+          subject.run("bin/logstash", args)
+        end
       end
 
-      it "should pass a range value to the webserver" do
-        expect(LogStash::Agent).to receive(:new) do |settings|
-          expect(settings.set?("http.port")).to be(true)
-          expect(settings.get("http.port")).to eq(10000..20000)
-        end
+      context "when defined by the user" do
+        let(:args) { ["--api.http.port", port_argument,"-e", pipeline_string] }
+        context "as a single-value string" do
+          let(:port_argument) { "10000" }
+          it "creates an Agent whose `api.http.port` is an appropriate single-element range" do
+            expect(LogStash::Agent).to receive(:new) do |settings|
+              expect(settings.set?("api.http.port")).to be(true)
+              expect(settings.get("api.http.port")).to eq(10000..10000)
+            end
 
-        args = ["--http.port", "10000-20000", "-e", pipeline_string]
-        subject.run("bin/logstash", args)
+            subject.run("bin/logstash", args)
+          end
+        end
+        context "as a range" do
+          let(:port_argument) { "10000-20000" }
+          it "creates an Agent whose `api.http.port` uses the appropriate inclusive-end range" do
+            expect(LogStash::Agent).to receive(:new) do |settings|
+              expect(settings.set?("api.http.port")).to be(true)
+              expect(settings.get("api.http.port")).to eq(10000..20000)
+            end
+
+            subject.run("bin/logstash", args)
+          end
+        end
       end
-    end
 
-    context "when no :http.port is not defined by the user" do
-      it "should use the default settings" do
-        expect(LogStash::Agent).to receive(:new) do |settings|
-          expect(settings.set?("http.port")).to be_falsey
-          expect(settings.get("http.port")).to eq(9600..9700)
+      context "using deprecated :http.port alias" do
+        let(:deprecation_logger_stub) { double("DeprecationLogger(Settings)").as_null_object }
+        before(:each) { allow(LogStash::Settings).to receive(:deprecation_logger).and_return(deprecation_logger_stub) }
+
+        let(:runner_deprecation_logger_stub) { double("DeprecationLogger(Runner)").as_null_object }
+        before(:each) { allow(runner).to receive(:deprecation_logger).and_return(runner_deprecation_logger_stub) }
+
+        context "when defined using deprecated :http.port alias" do
+          let(:args) { ["--http.port", port_argument, "-e", pipeline_string] }
+
+          context "as a single-value string" do
+            let(:port_argument) { "10000" }
+            it "creates an Agent whose `api.http.port` uses an appropriate single-element range and logs a helpful deprecation message" do
+              expect(deprecation_logger_stub).to receive(:deprecated).with(a_string_including "`http.port` is a deprecated alias for `api.http.port`")
+              expect(runner_deprecation_logger_stub).to receive(:deprecated).with(a_string_including 'The flag ["--http.port"] has been deprecated')
+
+              expect(LogStash::Agent).to receive(:new) do |settings|
+                expect(settings.set?("api.http.port")).to be(true)
+                expect(settings.get("api.http.port")).to eq(10000..10000)
+              end
+
+              subject.run("bin/logstash", args)
+            end
+          end
+
+          context "as a range" do
+            let(:port_argument) { "10000-20000" }
+            it "creates an Agent whose `api.http.port` uses the appropriate inclusive-end range and logs a helpful deprecation message" do
+              expect(deprecation_logger_stub).to receive(:deprecated).with(a_string_including "`http.port` is a deprecated alias for `api.http.port`")
+              expect(runner_deprecation_logger_stub).to receive(:deprecated).with(a_string_including 'The flag ["--http.port"] has been deprecated')
+
+              expect(LogStash::Agent).to receive(:new) do |settings|
+                expect(settings.set?("api.http.port")).to be(true)
+                expect(settings.get("api.http.port")).to eq(10000..20000)
+              end
+
+              subject.run("bin/logstash", args)
+            end
+          end
         end
 
-        args = ["-e", pipeline_string]
-        subject.run("bin/logstash", args)
+        context "when defined by both canonical name and deprecated :http.port alias" do
+          let(:args) { ["--api.http.port", "9603", "--http.port", "9604", "-e", pipeline_string] }
+
+          it "errors helpfully" do
+            expect do
+              expect(subject.run("bin/logstash", args)).to_not eq(0)
+            end.to output(a_string_including("Both `api.http.port` and its deprecated alias `http.port` have been set. Please only set `api.http.port`")).to_stderr
+          end
+        end
       end
     end
 
@@ -488,9 +579,12 @@
     end
 
     context "deprecated flags" do
+      let(:deprecation_logger_stub) { double("DeprecationLogger").as_null_object }
+      before(:each) { allow(runner).to receive(:deprecation_logger).and_return(deprecation_logger_stub) }
+
       context "when using --quiet" do
         it "should warn about the deprecated flag" do
-          expect(logger).to receive(:warn).with(/DEPRECATION WARNING/)
+          expect(deprecation_logger_stub).to receive(:deprecated).with(/DEPRECATION WARNING/)
           args = ["--quiet", "--version"]
           subject.run("bin/logstash", args)
         end
@@ -503,7 +597,7 @@
       end
       context "when using --debug" do
         it "should warn about the deprecated flag" do
-          expect(logger).to receive(:warn).with(/DEPRECATION WARNING/)
+          expect(deprecation_logger_stub).to receive(:deprecated).with(/DEPRECATION WARNING/)
           args = ["--debug", "--version"]
           subject.run("bin/logstash", args)
         end
@@ -516,7 +610,7 @@
       end
       context "when using --verbose" do
         it "should warn about the deprecated flag" do
-          expect(logger).to receive(:warn).with(/DEPRECATION WARNING/)
+          expect(deprecation_logger_stub).to receive(:deprecated).with(/DEPRECATION WARNING/)
           args = ["--verbose", "--version"]
           subject.run("bin/logstash", args)
         end
diff --git a/logstash-core/spec/logstash/settings/nullable_spec.rb b/logstash-core/spec/logstash/settings/nullable_spec.rb
new file mode 100644
index 00000000000..130df2e150f
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/nullable_spec.rb
@@ -0,0 +1,77 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require "spec_helper"
+require "logstash/settings"
+
+describe LogStash::Setting::Nullable do
+  let(:setting_name) { "this.that" }
+  let(:normal_setting) { LogStash::Setting::String.new(setting_name, nil, false, possible_strings) }
+  let(:possible_strings) { [] } # empty means any string passes
+
+  subject(:nullable_setting) { normal_setting.nullable }
+
+  it 'is a kind of Nullable' do
+    expect(nullable_setting).to be_a_kind_of(described_class)
+  end
+
+  it "retains the wrapped setting's name" do
+    expect(nullable_setting.name).to eq(setting_name)
+  end
+
+  context 'when unset' do
+    context '#validate_value' do
+      it 'does not error' do
+        expect { nullable_setting.validate_value }.to_not raise_error
+      end
+    end
+    context '#set?' do
+      it 'is false' do
+        expect(nullable_setting.set?).to be false
+      end
+    end
+    context '#value' do
+      it 'is nil' do
+        expect(nullable_setting.value).to be_nil
+      end
+    end
+  end
+
+  context 'when set' do
+    before(:each) { nullable_setting.set(candidate_value) }
+    context 'to an invalid wrong-type value' do
+      let(:candidate_value) { 127 } # wrong type, expects String
+      it 'is an invalid setting' do
+        expect { nullable_setting.validate_value }.to raise_error(ArgumentError, a_string_including("Setting \"#{setting_name}\" must be a "))
+      end
+    end
+    context 'to an invalid value not in the allow-list' do
+      let(:possible_strings) { %w(this that)}
+      let(:candidate_value) { "another" } # wrong type, expects String
+      it 'is an invalid setting' do
+        expect { nullable_setting.validate_value }.to raise_error(ArgumentError, a_string_including("Invalid value"))
+      end
+    end
+    context 'to a valid value' do
+      let(:candidate_value) { "hello" }
+      it 'is a valid setting' do
+        expect { nullable_setting.validate_value }.to_not raise_error
+        expect(nullable_setting.value).to eq candidate_value
+      end
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/settings/password_spec.rb b/logstash-core/spec/logstash/settings/password_spec.rb
new file mode 100644
index 00000000000..ca90bc4f9a8
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/password_spec.rb
@@ -0,0 +1,63 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require "spec_helper"
+require "logstash/settings"
+
+describe LogStash::Setting::Password do
+  let(:setting_name) { "secure" }
+  subject(:password_setting) { described_class.new(setting_name, nil, true) }
+
+  context 'when unset' do
+    it 'is valid' do
+      expect { password_setting.validate_value }.to_not raise_error
+      expect(password_setting.value).to be_a_kind_of LogStash::Util::Password
+      expect(password_setting.value.value).to be_nil
+    end
+    context '#set?' do
+      it 'returns false' do
+        expect(password_setting.set?).to be false
+      end
+    end
+  end
+
+  context 'when set' do
+    let(:setting_value) { "s3cUr3p4$$w0rd" }
+    before(:each) { password_setting.set(setting_value) }
+
+    it 'is valid' do
+      expect { password_setting.validate_value }.to_not raise_error
+      expect(password_setting.value).to be_a_kind_of LogStash::Util::Password
+      expect(password_setting.value.value).to eq setting_value
+    end
+    context '#set?' do
+      it 'returns true' do
+        expect(password_setting.set?).to be true
+      end
+    end
+  end
+
+  context '#set' do
+    context 'with an invalid non-string value' do
+      let(:setting_value) { 867_5309 }
+      it 'rejects the invalid value' do
+        expect { password_setting.set(setting_value) }.to raise_error(ArgumentError, "Setting `#{setting_name}` could not coerce non-string value to password")
+        expect(password_setting).to_not be_set
+      end
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb b/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb
new file mode 100644
index 00000000000..13f870239a2
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/setting_with_deprecated_alias_spec.rb
@@ -0,0 +1,110 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require "spec_helper"
+require "logstash/settings"
+
+describe LogStash::Setting::SettingWithDeprecatedAlias do
+
+  let(:canonical_setting_name) { "canonical.setting" }
+  let(:deprecated_setting_name) { "legacy.setting" }
+
+  let(:default_value) { "DeFaUlT" }
+
+  let(:settings) { LogStash::Settings.new }
+  let(:canonical_setting) { LogStash::Setting::String.new(canonical_setting_name, default_value, true) }
+
+  before(:each) do
+    allow(LogStash::Settings).to receive(:logger).and_return(double("SettingsLogger").as_null_object)
+    allow(LogStash::Settings).to receive(:deprecation_logger).and_return(double("SettingsDeprecationLogger").as_null_object)
+
+    settings.register(canonical_setting.with_deprecated_alias(deprecated_setting_name))
+  end
+
+  shared_examples '#validate_value success' do
+    context '#validate_value' do
+      it "returns without raising" do
+        expect { settings.get_setting(canonical_setting_name).validate_value }.to_not raise_error
+      end
+    end
+  end
+
+  context "when neither canonical setting nor deprecated alias are set" do
+    it 'resolves to the default' do
+      expect(settings.get(canonical_setting_name)).to eq(default_value)
+    end
+
+    it 'does not produce a relevant deprecation warning' do
+      expect(LogStash::Settings.deprecation_logger).to_not have_received(:deprecated).with(a_string_including(deprecated_setting_name))
+    end
+
+    include_examples '#validate_value success'
+  end
+
+  context "when only the deprecated alias is set" do
+    before(:each) do
+      settings.set(deprecated_setting_name, "crusty_value")
+    end
+
+    it 'resolves to the value provided for the deprecated alias' do
+      expect(settings.get(canonical_setting_name)).to eq("crusty_value")
+    end
+
+    it 'logs a deprecation warning' do
+      expect(LogStash::Settings.deprecation_logger).to have_received(:deprecated).with(a_string_including(deprecated_setting_name))
+    end
+
+    include_examples '#validate_value success'
+  end
+
+  context "when only the canonical setting is set" do
+    before(:each) do
+      settings.set(canonical_setting_name, "shiny_value")
+    end
+
+    it "resolves to the value provided for the canonical setting" do
+      expect(settings.get(canonical_setting_name)).to eq("shiny_value")
+    end
+
+    it 'does not produce a relevant deprecation warning' do
+      expect(LogStash::Settings.deprecation_logger).to_not have_received(:deprecated).with(a_string_including(deprecated_setting_name))
+    end
+
+    include_examples '#validate_value success'
+  end
+
+  context "when both the canonical setting and deprecated alias are set" do
+    before(:each) do
+      settings.set(deprecated_setting_name, "crusty_value")
+      settings.set(canonical_setting_name, "shiny_value")
+    end
+
+    context '#validate_value' do
+      it "raises helpful exception" do
+        expect { settings.get_setting(canonical_setting_name).validate_value }
+          .to raise_exception(ArgumentError, a_string_including("Both `#{canonical_setting_name}` and its deprecated alias `#{deprecated_setting_name}` have been set. Please only set `#{canonical_setting_name}`"))
+      end
+    end
+  end
+
+  context 'Settings#get on deprecated alias' do
+    it 'produces a WARN-level message to the logger' do
+      expect(LogStash::Settings.logger).to receive(:warn).with(a_string_including "setting `#{canonical_setting_name}` has been queried by its deprecated alias `#{deprecated_setting_name}`")
+      settings.get(deprecated_setting_name)
+    end
+  end
+end
\ No newline at end of file
diff --git a/logstash-core/spec/logstash/settings_spec.rb b/logstash-core/spec/logstash/settings_spec.rb
index dc10b02d339..d6a183713a1 100644
--- a/logstash-core/spec/logstash/settings_spec.rb
+++ b/logstash-core/spec/logstash/settings_spec.rb
@@ -110,6 +110,17 @@
       end
     end
   end
+
+  describe '#names' do
+    subject(:settings) { described_class.new }
+    before(:each) do
+      settings.register(LogStash::Setting.new("one.two.three", String, "123", false))
+      settings.register(LogStash::Setting.new("this.that", Integer, 123, false))
+    end
+    it 'returns a list of setting names' do
+      expect(settings.names).to contain_exactly("one.two.three", "this.that")
+    end
+  end
   
   describe "post_process" do
     subject(:settings) { described_class.new }
diff --git a/logstash-core/spec/logstash/webserver_spec.rb b/logstash-core/spec/logstash/webserver_spec.rb
index bca54ba7a1d..74ab65b87bd 100644
--- a/logstash-core/spec/logstash/webserver_spec.rb
+++ b/logstash-core/spec/logstash/webserver_spec.rb
@@ -55,14 +55,20 @@ def free_ports(servers)
   end
 
   let(:logger) { LogStash::Logging::Logger.new("testing") }
-  let(:agent) { OpenStruct.new({:webserver => webserver, :http_address => "127.0.0.1", :id => "myid", :name => "myname"}) }
-  let(:webserver) { OpenStruct.new({}) }
+  let(:agent) { OpenStruct.new({:webserver => webserver_block, :http_address => "127.0.0.1", :id => "myid", :name => "myname"}) }
+  let(:webserver_block) { OpenStruct.new({}) }
 
-  subject { LogStash::WebServer.new(logger,
-                                    agent,
-                                    { :http_host => "127.0.0.1", :http_ports => port_range })}
+  subject(:webserver) { LogStash::WebServer.new(logger, agent, webserver_options) }
+
+  let(:webserver_options) do
+    {
+      :http_host => api_host,
+      :http_ports => port_range,
+    }
+  end
 
   let(:port_range) { 10000..10010 }
+  let(:api_host) { "127.0.0.1" }
 
   context "when an exception occur in the server thread" do
     let(:spy_output) { spy("stderr").as_null_object }
@@ -138,6 +144,58 @@ def free_ports(servers)
       end
     end
   end
+
+  context "when configured with http basic auth" do
+    around(:each) do |example|
+      begin
+        thread = Thread.new(webserver, &:run)
+
+        Stud.try(10.times) { fail('webserver not running') unless webserver.port }
+
+        example.call
+      ensure
+        webserver.stop
+        thread.join
+      end
+    end
+
+    let(:webserver_options) { super().merge(:auth_basic => { :username => "a-user", :password => LogStash::Util::Password.new("s3cur3") }) }
+
+    context "and no auth is provided" do
+      it 'emits an HTTP 401 with WWW-Authenticate header' do
+        response = Faraday.new("http://#{api_host}:#{webserver.port}").get('/')
+        aggregate_failures do
+          expect(response.status).to eq(401)
+          expect(response.headers.to_hash).to include('www-authenticate' => 'Basic realm="logstash-api"')
+        end
+      end
+    end
+    context "and invalid basic auth is provided" do
+      it 'emits an HTTP 401 with WWW-Authenticate header' do
+        response = Faraday.new("http://#{api_host}:#{webserver.port}") do |conn|
+          conn.request :basic_auth, 'john-doe', 'open-sesame'
+        end.get('/')
+        aggregate_failures do
+          expect(response.status).to eq(401)
+          expect(response.headers.to_hash).to include('www-authenticate' => 'Basic realm="logstash-api"')
+        end
+      end
+    end
+    context "and valid auth is provided" do
+      it "returns a relevant response" do
+        response = Faraday.new("http://#{api_host}:#{webserver.port}") do |conn|
+          conn.request :basic_auth, 'a-user', 's3cur3'
+        end.get('/')
+        aggregate_failures do
+          expect(response.status).to eq(200)
+          expect(response.headers).to_not include('www-authenticate')
+        end
+        expect(response.body).to match(/\A{.*}\z/)
+        decoded_response = LogStash::Json.load(response.body)
+        expect(decoded_response).to include("id" => "myid")
+      end
+    end
+  end
 end
 
 describe LogStash::IOWrappedLogger do
@@ -164,4 +222,12 @@ def free_ports(servers)
   it "responds to sync=(v)" do
     expect{ subject.sync = true }.not_to raise_error
   end
+
+  it "responds to sync" do
+    expect{ subject.sync }.not_to raise_error
+  end
+
+  it "responds to flush" do
+    expect{ subject.flush }.not_to raise_error
+  end
 end
diff --git a/qa/integration/fixtures/webserver_certs/generate.sh b/qa/integration/fixtures/webserver_certs/generate.sh
new file mode 100755
index 00000000000..544165cf201
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generate.sh
@@ -0,0 +1,70 @@
+# warning: do not use the certificates produced by this tool in production. This is for testing purposes only
+set -e
+
+rm -rf generated
+mkdir generated
+cd generated
+
+echo "GENERATED CERTIFICATES FOR TESTING ONLY." >> ./README.txt
+echo "DO NOT USE THESE CERTIFICATES IN PRODUCTION" >> ./README.txt
+
+# certificate authority
+openssl genrsa -out root.key 4096
+openssl req -new -x509 -days 1826 -extensions ca -key root.key -out root.crt -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=root" -config ../openssl.cnf
+
+
+# intermediate CA
+openssl genrsa -out intermediate-ca.key 4096
+openssl req -new -key intermediate-ca.key -out intermediate-ca.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=intermediate-ca" -config ../openssl.cnf
+openssl x509 -req -days 1000 -extfile ../openssl.cnf -extensions intermediate_ca -in intermediate-ca.csr -CA root.crt -CAkey root.key -out intermediate-ca.crt -set_serial 01
+
+# server certificate from intermediate CA
+openssl genrsa -out server_from_intermediate.key 4096
+openssl req -new -key server_from_intermediate.key -out server_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
+openssl x509 -req -extensions server_cert -extfile ../openssl.cnf -days 1000 -in server_from_intermediate.csr -CA intermediate-ca.crt -CAkey intermediate-ca.key -set_serial 02 -out server_from_intermediate.crt
+
+# server certificate from root
+openssl genrsa -out server_from_root.key 4096
+openssl req -new -key server_from_root.key -out server_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
+openssl x509 -req -extensions server_cert -extfile ../openssl.cnf -days 1000 -in server_from_root.csr -CA root.crt -CAkey root.key -set_serial 03 -out server_from_root.crt
+
+
+# Client certificates - We don't need them now
+
+# client certificate from intermediate CA
+# openssl genrsa -out client_from_intermediate.key 4096
+# openssl req -new -key client_from_intermediate.key -out client_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
+# openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_intermediate.csr -CA intermediate-ca.crt -CAkey intermediate-ca.key -set_serial 04 -out client_from_intermediate.crt
+
+# client certificate from root
+# openssl genrsa -out client_from_root.key 4096
+# openssl req -new -key client_from_root.key -out client_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
+# openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_root.csr -CA root.crt -CAkey root.key -set_serial 04 -out client_from_root.crt
+
+# create server chain pems.
+cat intermediate-ca.crt server_from_intermediate.crt > server_from_intermediate.chain.crt
+cat server_from_root.crt > server_from_root.chain.crt
+
+# verify :allthethings
+openssl verify -CAfile root.crt intermediate-ca.crt
+openssl verify -CAfile root.crt server_from_root.crt
+openssl verify -CAfile root.crt -untrusted intermediate-ca.crt server_from_intermediate.crt
+openssl verify -CAfile root.crt server_from_root.chain.crt
+openssl verify -CAfile root.crt server_from_intermediate.chain.crt
+
+# create pkcs8 versions of all keys..they may be handy but we don't need them now
+# openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in root.key -out root.key.pkcs8
+# openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in intermediate-ca.key -out intermediate-ca.key.pkcs8
+# openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in server_from_intermediate.key -out server_from_intermediate.key.pkcs8
+# openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in server_from_root.key -out server_from_root.key.pkcs8
+
+# create pkcs12 keystores (pass:12345678)
+openssl pkcs12 -export -in server_from_intermediate.chain.crt -inkey server_from_intermediate.key -out server_from_intermediate.p12 -name "server_from_intermediate" -passout 'pass:12345678'
+openssl pkcs12 -export -in server_from_root.chain.crt -inkey server_from_root.key -out server_from_root.p12 -name "server_from_root" -passout 'pass:12345678'
+
+# use java keytool to convert all pkcs12 keystores to jks-format keystores (pass:12345678)
+keytool -importkeystore -srckeystore server_from_intermediate.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_intermediate.jks -deststorepass 12345678 -alias server_from_intermediate
+keytool -importkeystore -srckeystore server_from_root.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_root.jks -deststorepass 12345678 -alias server_from_root
+
+# cleanup csr, we don't need them
+rm -rf *.csr
diff --git a/qa/integration/fixtures/webserver_certs/generated/README.txt b/qa/integration/fixtures/webserver_certs/generated/README.txt
new file mode 100644
index 00000000000..e4fa8b79fdb
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/README.txt
@@ -0,0 +1,2 @@
+GENERATED CERTIFICATES FOR TESTING ONLY.
+DO NOT USE THESE CERTIFICATES IN PRODUCTION
diff --git a/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt
new file mode 100644
index 00000000000..e772b2ea1fa
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt
@@ -0,0 +1,32 @@
+-----BEGIN CERTIFICATE-----
+MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
+BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzI4WhcNMjQwNzE1MTgyNzI4WjBVMQsw
+CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
+CgwFTXlMYWIxGDAWBgNVBAMMD2ludGVybWVkaWF0ZS1jYTCCAiIwDQYJKoZIhvcN
+AQEBBQADggIPADCCAgoCggIBAPHXRKHl/LsaDFGnys0b4mlLlGQ6qJSC5ut8FZoa
+B7kDeHsi8TiFVg/RENghFBClP9aGhWxndGSeQTDkg+KPxKovXBX1J9mP+z+ol47V
+QVeCT++AvPQYmtLNLwZg0e5GVHFMnVq64LlTc1XjvzjlU751A5dEq/miMpovx7fS
+oI2zxtVOYx+BF4hr+WA20mxbQoGXVM8ITDBWySM5IDhngKNAfmXNQZFffJgk+pwe
+++I4KzRkLU02OEUnH63/YFkn+CoZBmg+II8cNItRVYCRifXb8tsO6OEwQQEe1RSk
+fmxiiiTYCDMB5GUSowCRotKTwEXgWwTLKghzzUoCPJapsb/CzY2xp/ECtQt420CJ
+aosx/fLmcuKmbhW847hYq4L8HqZvjs3i7E6wjuUAgn/um28kU1PrN9l6qTJhHKKP
+GZUCC/Cou0g9q7Y9ad672mWgExo0I1vXm2H1KNYy94agmXaIgmelvPBTPREkEEL6
+MnfrZKiYOG5wjSMubg0L4JYKUMuToXvfXxe6o2rDofe/oTUXErGDYV4z7vr58dQg
+TM5PtxpZCLmqELaBFydB5hEBQly8Fxh3SVpuwkcaCxOlXMkdvHEK9daYfE9jV0fu
+StfckkCLdDZMHI+iSdQsqK6E9vc4tX2rnhzgKex0Byu0GUEg6XoFL2GKdUOvRZTJ
+/tMxAgMBAAGjZjBkMB0GA1UdDgQWBBR6wQ0Is6YucsLFNwdZ3ANX1jrgsjAfBgNV
+HSMEGDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jASBgNVHRMBAf8ECDAGAQH/AgEA
+MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAgEANoo45TDx1lfglAmJ
+8nt/58y7fm8trxmrSQmDAIuXZKqATNsEw/+VbIXqeC9sT2lWY9URFmmFm505JP+1
+43nM68cjfAK7ihLcGS7XwQMtQCgiQzJKeZFOx/l30lN5rRje5HHbSIF+uuwO987J
+LNYJ+rS7N25lB5EQY8satuZWMVtSZ7YQCMkSJve7KjfrbE3kORjHs6jn3bdyuWAr
+oApgKJgCUX3JSPZyH3T/xakMneZNkYr0CC1kNi9wL4js5I/nN2Z4er0N1Zt6PIM+
+hIJcW/Qv0BtI4bzkNkGSehm+Ofr+njuqWaaQMF7kLPTGDg/0SN63Y+X59CJQMnjF
++oW0oGm30S3okFpgXSU+DDxNPlh1j3jTMoArPvIaTceImfmsBXU62JRXQWaAr1jF
+EujYbTJ147/7NmsmnskFO37Mp35JxL3ELWfMeBAL/HC11mzUbGFhtvtFqhQMWMbt
+5AAR9ZUaPO8xTX6Ag8/8MXF5wFRkJBqTNn6GaX5PUrWhlAKpGuAuuR1NBY5TGUHX
+NcFu+bf5JtjhgSUGB0FuZfdZvw46k30NLlT39NbXayY102XYfrAsl0X0TNqjQua1
+7j7FqYrAALQVLfYeKrE0nKaH35nU6Kk1Iy42CbB71MHqcg7DTjn0MvTKZcnQ8pxv
+RQwP+BXkzwfWWEp05rlVeKS0IjQ=
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.key b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.key
new file mode 100644
index 00000000000..17a1eadb3ed
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIJKQIBAAKCAgEA8ddEoeX8uxoMUafKzRviaUuUZDqolILm63wVmhoHuQN4eyLx
+OIVWD9EQ2CEUEKU/1oaFbGd0ZJ5BMOSD4o/Eqi9cFfUn2Y/7P6iXjtVBV4JP74C8
+9Bia0s0vBmDR7kZUcUydWrrguVNzVeO/OOVTvnUDl0Sr+aIymi/Ht9KgjbPG1U5j
+H4EXiGv5YDbSbFtCgZdUzwhMMFbJIzkgOGeAo0B+Zc1BkV98mCT6nB774jgrNGQt
+TTY4RScfrf9gWSf4KhkGaD4gjxw0i1FVgJGJ9dvy2w7o4TBBAR7VFKR+bGKKJNgI
+MwHkZRKjAJGi0pPAReBbBMsqCHPNSgI8lqmxv8LNjbGn8QK1C3jbQIlqizH98uZy
+4qZuFbzjuFirgvwepm+OzeLsTrCO5QCCf+6bbyRTU+s32XqpMmEcoo8ZlQIL8Ki7
+SD2rtj1p3rvaZaATGjQjW9ebYfUo1jL3hqCZdoiCZ6W88FM9ESQQQvoyd+tkqJg4
+bnCNIy5uDQvglgpQy5Ohe99fF7qjasOh97+hNRcSsYNhXjPu+vnx1CBMzk+3GlkI
+uaoQtoEXJ0HmEQFCXLwXGHdJWm7CRxoLE6VcyR28cQr11ph8T2NXR+5K19ySQIt0
+Nkwcj6JJ1CyoroT29zi1faueHOAp7HQHK7QZQSDpegUvYYp1Q69FlMn+0zECAwEA
+AQKCAgBirops3aHQ3wIj16njI/uxJ4v3kg/z+a4sbMeLyA9aqVXiORHhFFdXwOF0
+r5q2aBeye9W5tEVEQWcsgjJmom+HWifjNdP67MuC4FJnkBFHmf7wJcH0gI28csk7
+ewpuhfgy+yZCPXsxZCHt7C69EqanUqwSb40VIeAwFksScTneWHtL0t6TnmNx4U0y
+u2wFlv9+TbfneuVL3D3ax5akLWfKNajd9XFJ1oLKulwglGwHlQ/cIvxxQyyW2y4M
+G+a+upaC5w88Pg2fF81BBAE1oy1+Sy+/v0e7i6sav/AGqlCD/XmNKzG9TopZy88D
+jmm4L14HpVK+lAAkzsv35Q3AFKJYaB7+BdxSOxdJrq9RaxuCzZU00sFxA3F7PPkh
+tokxrIuyl3s2cnJkHE294s4/1VnWx8UAvdEx+XRsypp0d7JZT5Rm3Q1spOYWS+Zp
+ShlHtq2qdhjbqRLq4ur2WYCGWHqxGkXbhkPcO0ezstxQV5WQ/qLbSK0jflH90dgy
+OsjDB14Pm7sxVOCgNaShhXZXvzS1dShug31gLDc7Zg8ubazKIpFdAGtLCL/LEUp4
+hb9PEWjshrfi1VQMSCguZCwuazO2FnkKvpP9M8WsxkZ7invxw1A7xX5tdeCfHaJT
+yPar945pZlnyt3ROKzx+QLt7yjs4igNuLHFJ7LUL8jdfo3zngQKCAQEA+PoJ0Vhy
+gmjA2XVkpuI8EVe6LsyCpPu58qqQPryzBApWZbLvh7RNVEpKrRl5oQbrgzMKxz6d
+1dfCdLVA2t+aPLLLuvmduTJvrsD4pFuvmqdLbAGn7J+Q3IhdkANsX3dnfUeR8ham
+0fF6Wcha6gsxvof1wTu6k10uT9mvwxEwkxWiJogjGMV7njHwiyXAO+dAUCUFG1GK
+pEKcwqJYEbQLBC4dbgYJus7TiQ/pakAXD02z76GzGnZXxFZHbKo2JQpW+i2zhaM8
+Rk9CF4VruMj9ASWsc1D+tV+0f4JYKWk/fwCFX0rpluASXDqmVcF94xgxMPLcTkX2
+S1SfhPLnMNM6CQKCAQEA+Kmy94zk6xRSEhdqyTGKaXYL6pNTuYLClHomg+9ifsbg
+LULza4rOWVv1gzdfht4q0LSuR9C44+GEdQlJ093ql+EiKGXOkO5DzOV3D0uJKaaw
+jXmfhzVyRKAnG9oCFSoCIVpyVVLTSYsCk4YBG1+xC7jR5iCjSfDoXmXDNTbhvZne
+CBPXe5Y16Fu8VKGKMOCuluRywkdGtWplGKIYM/BRpqypMeyUNf5cV/QnpnHpKpvI
+3xpN0hWkVPM4mDxeEmxbaTMYqLKBvWxJIKwHlZsCoVrIE/sit4PFxD33A0gd9RKF
+ysG9U7j9ezxv01GGeWvLGJJ2Rm9InJaraNdD0/s56QKCAQA9szEVqRaPjMgl27q6
+xJvgLF5eVJ4Xpq45Hd2rPnYajTlF8Kb9eUgkmFiTNxn2NtHMbKzCHZldsh9lbrmI
+xBrj6eclCdD1YTNeGkJD8Ni+ubCuLmbf89chX8XX95E2w09pM4BOfyCOLIqGj2lA
+UM/eCLF1VojxFglxDmBJNgxUlurdI6WW8PGmjXev9AYEklVUxyfR0k5KUJuqfDLZ
+CEYmngr7BhIJMlInyEKu6v0L9NSfkPHin+s2I6+FlVTfrwVI8GRpvL8mKWQWkiDU
+5TIVw7FNzoegiPwhETsp4AQ1Q/rJV7Y1hofmRT6NR+sbiRY/rB++YgYcOvdhKhTy
++5WJAoIBAQCKta8dpDy2XbmCWgm5facmOTFggxp7K1P7m0AM7OZWrf2zgdtjrCR7
+eG616ZeiFiBwF7n4WZgplk1bM/k49Fu+qVlyi4f1FNRBYedOYuZ6k399C9FPjSLW
+4Tevs6bhw3M4w8lviypNpfuj62aGrJSIY2rDIoWz42zb64w/DQRTzZcrjlXvnNUp
+brLZytrZdRwvE/RoJ3ZsEJOgcBtsLax+e2ZOcRgkHmXIsmvDz1sv54Lf4T5z6Jqo
+wJxbX6FiSYucXWJuCFWTIuqQDSaV78hB1fAyJS8yi5EwbRhzfjEn2lNDzVsdbt4H
+dqkyihGnfdfnNxw/IiixIOMxMpOllkixAoIBAQC3PapCqrPeQRBkUNqXdz55MLZN
+R0O/pdkzIsRYbepAEGj6Ylvt+qgLYmsGfFdlhkPAOi9PxClRr44M7MzvJDF5bQlO
+y/pyzUKZJ7aXG7QNnhxg/qZRgm0qj+RsR0rbH/Bc8vuahDgHAa1JbMXkc7O50+fe
+fwebVZ8hscXVOeTaDNM/XuzmYZl6/lLTmpiqKt9J1F34J4O5mcGI4rS7kdMd83Tb
+zcYPTbPXxgltIHIlM8ZFR7hSzdM6B3GcddPbWAFGOI4gY9e9a4sHtU4wH8O6IYlg
+BcmSuIGANVLApRHMEabaEbBR/+QAzSZ6dhBaxG/QlqHh6iKSM29mSEUoSlZm
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/root.crt b/qa/integration/fixtures/webserver_certs/generated/root.crt
new file mode 100644
index 00000000000..d5653f0e853
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/root.crt
@@ -0,0 +1,32 @@
+-----BEGIN CERTIFICATE-----
+MIIFejCCA2KgAwIBAgIJAMwwXnXAAUBzMA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNV
+BAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlzYm9uMQ4wDAYDVQQKDAVN
+eUxhYjENMAsGA1UEAwwEcm9vdDAeFw0yMTEwMTkxODI3MjdaFw0yNjEwMTkxODI3
+MjdaMEoxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlzYm9u
+MQ4wDAYDVQQKDAVNeUxhYjENMAsGA1UEAwwEcm9vdDCCAiIwDQYJKoZIhvcNAQEB
+BQADggIPADCCAgoCggIBAMfReGxhC2tJH3y/4knTrBSrtezJb5fDs9Xy41Gdr5ng
+YEQXi7JQb/MXvGst4xxX77kbBv8uo1egL6gnvZfUqbsrGS8IzhBWtRET+yaYw2ez
+wZW+d9RGjsFTOGvkSpv55/VdGvtaXeMeqTbuyYZSzakNYD7AH2VDCS2q+IdF/ezm
+ocOki5faj6A92yxvbHUZM1jS+Ah/v2yzJOAkrhT1XIBKyaG/g+woQxZpMS0PjpKY
+K7K9XPIkU/Z2gsQkRfDQAxXTqba4Bl84/aA+aLTYqib/5WhxVuc8vjk+7g01y2qX
+5aPYs3L2LToUfwPh/6leHx37d7YouPp3X3CnPyl15r20FjTFKTV6Y0he3tgmWnjC
+BP0/qlCYeh1mnKFQSo688fw7K25dPhcnPctdVp5Xr6jz8GBaGgCu5hEx/QI7WzXy
+qKdyyIj3gEQuHyu8RUrTUA3uruPa8TlouAu616yNNqw3EzrEjmWX+D4HRq32ofkK
+FXqFxFurfzxyVJjX1P2+VP0h8fPoZJzBwfwm1hFxLpROQXVBX+b7j2S4kv/Lp156
+mV0frWXlYwTvtM+7PKONnwSIOkiTic8Zv5TcMLoW6p4RNY6b0SDzt+e90h20OeAS
+R1gv7VhGfR2JYMd1C0Ke8D9i2FebX9r6T/BfRMRJBNKj6wr6OFvhz+eImNuiAaxn
+AgMBAAGjYzBhMB0GA1UdDgQWBBSWO1UVkFl5LOuplY08xBLcfGyc+jAfBgNVHSME
+GDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
+DwEB/wQEAwIBhjANBgkqhkiG9w0BAQsFAAOCAgEAHquJcXAZlMpY3z748dmIfKGb
+7F4fGgTwGJ/9PLIZdZXDRIiA/GZs9IGA+Kykv/95jJsq1ZVN7O7UoBqbTxbsddoU
+EhBe3BKaJtkIuB5anRmw600lZlIFgSU1uSXyZoDBD9LnQnb13f2UQJKvzNbvoisC
+f23JIVCQhGUiqVVYKF80tWlbTpnA+pIPvaWpzSI8FEjz2NGmol948aEp4OET5v/R
+obWImc/X30t5Z4wO620DCNVhwx+zzomAio3dmQRnnUrVT9IwKxFmEA+0V4O4JPUz
+YQMyuLuoqrvywz7JeV3GvCy+yI5uoF7u5m7e5Kh3A1G3xfbw36M3fYAQNhh/5y01
+ySimOmx6CXoX60z31RFlrXgAycLWKixkjllQTMCMvtcFOszLSpP7WoB2/l7s+9oz
+iMEnjwvtUcXJ0rRHr2ENmyG8BBPKZZhKp2b/kumQnYa8Vj8FVFXGijLNF2QHyIWr
+jzc9ntZyUb2LOWA2Dwtk6BxgJrKfx6N4n6itwd//mzCz0GQZEVPwlLUw0qO1qt5+
+dSP5ifsecUSsXge3nl+pZmS60Jo1/sF3QhFiFbKMRi19SqvI2X+vDwAbsS05PMdt
+HpN/JLfaeabqjoYeEpCGRm7ZSIR0Os9c5qJpXo6V9kOUbQKMNwJ075pPaQEE+2Vn
+IQqdInXs3f5UoI5afJQ=
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/root.key b/qa/integration/fixtures/webserver_certs/generated/root.key
new file mode 100644
index 00000000000..06006400851
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/root.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+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
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt
new file mode 100644
index 00000000000..f4c8cf7f5a5
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt
@@ -0,0 +1,68 @@
+-----BEGIN CERTIFICATE-----
+MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
+BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzI4WhcNMjQwNzE1MTgyNzI4WjBVMQsw
+CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
+CgwFTXlMYWIxGDAWBgNVBAMMD2ludGVybWVkaWF0ZS1jYTCCAiIwDQYJKoZIhvcN
+AQEBBQADggIPADCCAgoCggIBAPHXRKHl/LsaDFGnys0b4mlLlGQ6qJSC5ut8FZoa
+B7kDeHsi8TiFVg/RENghFBClP9aGhWxndGSeQTDkg+KPxKovXBX1J9mP+z+ol47V
+QVeCT++AvPQYmtLNLwZg0e5GVHFMnVq64LlTc1XjvzjlU751A5dEq/miMpovx7fS
+oI2zxtVOYx+BF4hr+WA20mxbQoGXVM8ITDBWySM5IDhngKNAfmXNQZFffJgk+pwe
+++I4KzRkLU02OEUnH63/YFkn+CoZBmg+II8cNItRVYCRifXb8tsO6OEwQQEe1RSk
+fmxiiiTYCDMB5GUSowCRotKTwEXgWwTLKghzzUoCPJapsb/CzY2xp/ECtQt420CJ
+aosx/fLmcuKmbhW847hYq4L8HqZvjs3i7E6wjuUAgn/um28kU1PrN9l6qTJhHKKP
+GZUCC/Cou0g9q7Y9ad672mWgExo0I1vXm2H1KNYy94agmXaIgmelvPBTPREkEEL6
+MnfrZKiYOG5wjSMubg0L4JYKUMuToXvfXxe6o2rDofe/oTUXErGDYV4z7vr58dQg
+TM5PtxpZCLmqELaBFydB5hEBQly8Fxh3SVpuwkcaCxOlXMkdvHEK9daYfE9jV0fu
+StfckkCLdDZMHI+iSdQsqK6E9vc4tX2rnhzgKex0Byu0GUEg6XoFL2GKdUOvRZTJ
+/tMxAgMBAAGjZjBkMB0GA1UdDgQWBBR6wQ0Is6YucsLFNwdZ3ANX1jrgsjAfBgNV
+HSMEGDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jASBgNVHRMBAf8ECDAGAQH/AgEA
+MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAgEANoo45TDx1lfglAmJ
+8nt/58y7fm8trxmrSQmDAIuXZKqATNsEw/+VbIXqeC9sT2lWY9URFmmFm505JP+1
+43nM68cjfAK7ihLcGS7XwQMtQCgiQzJKeZFOx/l30lN5rRje5HHbSIF+uuwO987J
+LNYJ+rS7N25lB5EQY8satuZWMVtSZ7YQCMkSJve7KjfrbE3kORjHs6jn3bdyuWAr
+oApgKJgCUX3JSPZyH3T/xakMneZNkYr0CC1kNi9wL4js5I/nN2Z4er0N1Zt6PIM+
+hIJcW/Qv0BtI4bzkNkGSehm+Ofr+njuqWaaQMF7kLPTGDg/0SN63Y+X59CJQMnjF
++oW0oGm30S3okFpgXSU+DDxNPlh1j3jTMoArPvIaTceImfmsBXU62JRXQWaAr1jF
+EujYbTJ147/7NmsmnskFO37Mp35JxL3ELWfMeBAL/HC11mzUbGFhtvtFqhQMWMbt
+5AAR9ZUaPO8xTX6Ag8/8MXF5wFRkJBqTNn6GaX5PUrWhlAKpGuAuuR1NBY5TGUHX
+NcFu+bf5JtjhgSUGB0FuZfdZvw46k30NLlT39NbXayY102XYfrAsl0X0TNqjQua1
+7j7FqYrAALQVLfYeKrE0nKaH35nU6Kk1Iy42CbB71MHqcg7DTjn0MvTKZcnQ8pxv
+RQwP+BXkzwfWWEp05rlVeKS0IjQ=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+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
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt
new file mode 100644
index 00000000000..7329e46a571
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt
@@ -0,0 +1,36 @@
+-----BEGIN CERTIFICATE-----
+MIIGSTCCBDGgAwIBAgIBAjANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJQVDEL
+MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxGDAW
+BgNVBAMMD2ludGVybWVkaWF0ZS1jYTAeFw0yMTEwMTkxODI3MzFaFw0yNDA3MTUx
+ODI3MzFaMEwxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlz
+Ym9uMQ4wDAYDVQQKDAVNeUxhYjEPMA0GA1UEAwwGc2VydmVyMIICIjANBgkqhkiG
+9w0BAQEFAAOCAg8AMIICCgKCAgEAvkyxB/z2frDqa1F3lDqkW5L0F5L0sGZiOnzR
+0kgPsPtxIjt3ntm+8SZAL7dJ4VSmH7DNo/IUtwent/ypN9b7rR11kl3EDcCoISPf
+2VXqvi1cQou/M/GSZPDmZMsXW6kVWzZydOT4ub7sEbVtp+J4GhRkR/AZDLioBCme
+Dw/GMg68+BHguPZL8c5oi+6YkhgLBvua2kum5vYMWkgATGneSZj6nWxbNRryFgq0
+X5qRrB7n7HQYjT/ki412EjbnfSpqfhcOAtu0RUI9XNx9QPx/s6PIxtcd3lgRfeB+
+tdPnDp4pQZGm6ySUSjZV+38+tKKCX+PF/u0gJWpQwA2x16lvIafxDNFd1DIr2bay
+RC3vmmPMu58+B1hj0PILwnZcozBFMo/oii6m9lURUYuCBcHAKOyeMnroIXHEQMAD
+aj9fFBGNAoB3gLT1gvHrrbkRmQ4b7pE3jDYR7kn4VUUxjIrfX5ucthpSIAqYFiRr
+OmKUtTpwhPcRogOP36VoVM2bK4ShevhQdRZ5vjo2DggweIfIg0UBdLSethvct/hJ
+fIrmq4JgUMwfHfW6HYR3Vn5T6Eag6+mwhlMXbg18D8r3XmzuAtMEruPJKdV3b4Ad
+oZmnuYGvGBqHmY2fBMwdtnd7SJ3H3m+MPxF6/1Fks0D2JgVNGi9///nR6x4ITvjQ
+joDODBkCAwEAAaOCASswggEnMAkGA1UdEwQCMAAwEQYJYIZIAYb4QgEBBAQDAgZA
+MDMGCWCGSAGG+EIBDQQmFiRPcGVuU1NMIEdlbmVyYXRlZCBTZXJ2ZXIgQ2VydGlm
+aWNhdGUwHQYDVR0OBBYEFBFYhgtW76vGDcp6aW80KokkSmJgMHIGA1UdIwRrMGmA
+FHrBDQizpi5ywsU3B1ncA1fWOuCyoU6kTDBKMQswCQYDVQQGEwJQVDELMAkGA1UE
+CAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTALBgNVBAMM
+BHJvb3SCAQEwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoG
+A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAnwfk
+vd9EAll9Bo8G2Hj5ibLDnS4hdFnT3Z8J3Okgj8jme6vKInJrNm7wepWZEqq/Sqhs
+B4uYCHYN86WrOalSqON3KsT0cue6gRKXSe/zjhNc9Uk2emJsR+uPNrUrfrIlL7Z8
+IQmewQTkfbsKL+AqT3VzIdPENnEK1N9u5w0ie5vxVz2xPbtVjqmsNgiFaAP3r8pA
+mIKW3Pbay8q3wMEAWXw6EHTKelj9/7QpshzgR3AM9sYnbcr+pycRZTBEwuCv5Kvm
+jbUFxY8BMZPS/b0ZbPgs8rBxE0BhMt+VlgpDbskeT25/0V2pPbAcyHQth6Qker5w
+DcycKMaGGQYivLfyz+9kktIOm3AGoUdCHRxAc7xmSkIhFhQVzEgAnlK0QeojntOg
+c65vbgy9x6WdTkSwMBRa4d9oNPSreTIq1ygUKOAwxZo+X38q4Oo4MTQrXDNOhGbR
+/ylw/avihYJszGl9lCni6kIuqCw8CN2pvQTQcvU9UJTgy6LC7CzPqFfPjBXxN65P
+WV+7N0dZ9MWHb+eAoVA/ykUrp52oStAqCYLRwCxC5NjDRXR6AdXtXTC9a3T3JLkR
+LW7j8CqFmbMjhuys3Y8MEysgxKAg1PFggkeN5O5uOJXWqlUF8X2ipoMSnSIIa+Q6
+4C4CAspB8k7S5LNUVzw7V4RVLG4Mi1cSCy+Sggc=
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks
new file mode 100644
index 00000000000..86a0a72c5db
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.key b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.key
new file mode 100644
index 00000000000..8b2c6c99b72
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+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
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12 b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12
new file mode 100644
index 00000000000..3181caeb3bd
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12 differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt
new file mode 100644
index 00000000000..6ba9acb7a07
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt
@@ -0,0 +1,36 @@
+-----BEGIN CERTIFICATE-----
+MIIGRjCCBC6gAwIBAgIBAzANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
+BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzMyWhcNMjQwNzE1MTgyNzMyWjBMMQsw
+CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
+CgwFTXlMYWIxDzANBgNVBAMMBnNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIP
+ADCCAgoCggIBAKJZa8jP+LalBAlQ8uWWlTm8TLHWkGLFxr+rNzs23mAAfLo8FFGJ
+bHQ2iIWQtjCQwHiWUrHU2eRBvL5zJ3cEWte2WF/OAkNhcZu8/JcH3jCMhbjfc3V1
+xIfRdWYEhTI+5PYaqgStNs9H24fyshMFcDubXU1pKfNXtY1sQVKfQl5XeAN5Qcif
+2QSfUxNOWnvnmUdBPNOIUP3W+3pqzv+uhPt9Egj2crYPXnSnC5JZSdeya+Rz60xi
+WpmSWn5/WdO6j89CVI1kYX7UXuWVhtp8QLa315cMZ9+b238SrDjzNQ+ElwQJO1Nb
+oD+JfsNBJBXPy/6Tr6FOZXHOWFFvIErceImKIdG12WL6IHxPlyPpeBGTdbGCS5gy
+vWKaJ8diV15Mea8rGH7D30sR2StgBtW1MJOomkarS+2oQpC78HqQrNK1Qgl3GauW
+PMIKCU6TR5OPZHsb87u7iXlc+NO+tBoFtgOVK7LvN/QwQ1At4hQaLcrpEJwtjfk/
+8jrC22Ewgp1LMakAsmDjGkkOBZPL5VeNgNnUEp9/AHYfH1XmpkLUOoRmUVkVDqfs
+FVcFTLLb2XDtZWtl+gJ5cXxnr87dj5X2Xowo2BMKBwwMpThmJX+i2yY420hq9uu6
+xzPjUC7NauaPnIYCIjWtaBqruXWMxX9DISED71aAVAOSqXbv2fFpKMpRAgMBAAGj
+ggEzMIIBLzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
+AQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgU2VydmVyIENlcnRpZmljYXRlMB0GA1Ud
+DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDB6BgNVHSMEczBxgBSWO1UVkFl5LOup
+lY08xBLcfGyc+qFOpEwwSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYD
+VQQHDAZMaXNib24xDjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290ggkAzDBe
+dcABQHMwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoGA1Ud
+EQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAoUitYEBW
+lzBMuuDMHvVrtwTcKNXeOXZ6PC78OXNxGCSK4CxTzOceyHjj0K30r2qOd4hNbq43
+J60Zf+69qIpkezG3hcCy/8Yu1lLyhxLvErCbgkvZ1MH4HkEyJOeoh0PJoIq1U3vu
+SA2Ny6LDA5QOWaVME6c1L0ntueu5/BddrTGtqHvK4Td9E3Y8gQhtJHCkN2GbkRRS
+vr2+efC2hNIWEfxFTP+RRKKGfn+B+YASPgLDvHpIapz65MVebJH+gIo/k57swPMJ
+K3Zet53tXqUvnbh87vyGdaOpq897WISNfleQ/XJB28Q3G5qBdLiTu7oxYG42XhC1
+qIm4pZ/gGW5lauu3h9bvzODB2DV6ShnBujtzbd0vBBX38BMP2oOOQ3X2QgalGOKO
+jd6yTCN6VO0ZiFD4xO2XsE1CKkRqPx9rRCKR85NCvlpyytC4KIZjcomf0miMl9e1
+G9Js2y9agiXgQ5lrlZSQ8XyvRD8PC1anCxeyn8HaBblYNwUZ8S6vXkq7K13MuPgX
+3vw106gUcWjw6GwC3BOi7UNtcAYyoXn6jLJ2unpn2mqjpCfbQZ3mnAI7MbEoaSFa
+1CTYh9bxYK6cN+8dOnYoXUyD27aDq6xfP9YJoNmQdYTW4Wwf5JCK23j2DtDB/qen
+uyydJBuI6Me+ctWntImvjM97Teu8s+ssQaA=
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt
new file mode 100644
index 00000000000..6ba9acb7a07
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt
@@ -0,0 +1,36 @@
+-----BEGIN CERTIFICATE-----
+MIIGRjCCBC6gAwIBAgIBAzANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
+BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzMyWhcNMjQwNzE1MTgyNzMyWjBMMQsw
+CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
+CgwFTXlMYWIxDzANBgNVBAMMBnNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIP
+ADCCAgoCggIBAKJZa8jP+LalBAlQ8uWWlTm8TLHWkGLFxr+rNzs23mAAfLo8FFGJ
+bHQ2iIWQtjCQwHiWUrHU2eRBvL5zJ3cEWte2WF/OAkNhcZu8/JcH3jCMhbjfc3V1
+xIfRdWYEhTI+5PYaqgStNs9H24fyshMFcDubXU1pKfNXtY1sQVKfQl5XeAN5Qcif
+2QSfUxNOWnvnmUdBPNOIUP3W+3pqzv+uhPt9Egj2crYPXnSnC5JZSdeya+Rz60xi
+WpmSWn5/WdO6j89CVI1kYX7UXuWVhtp8QLa315cMZ9+b238SrDjzNQ+ElwQJO1Nb
+oD+JfsNBJBXPy/6Tr6FOZXHOWFFvIErceImKIdG12WL6IHxPlyPpeBGTdbGCS5gy
+vWKaJ8diV15Mea8rGH7D30sR2StgBtW1MJOomkarS+2oQpC78HqQrNK1Qgl3GauW
+PMIKCU6TR5OPZHsb87u7iXlc+NO+tBoFtgOVK7LvN/QwQ1At4hQaLcrpEJwtjfk/
+8jrC22Ewgp1LMakAsmDjGkkOBZPL5VeNgNnUEp9/AHYfH1XmpkLUOoRmUVkVDqfs
+FVcFTLLb2XDtZWtl+gJ5cXxnr87dj5X2Xowo2BMKBwwMpThmJX+i2yY420hq9uu6
+xzPjUC7NauaPnIYCIjWtaBqruXWMxX9DISED71aAVAOSqXbv2fFpKMpRAgMBAAGj
+ggEzMIIBLzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
+AQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgU2VydmVyIENlcnRpZmljYXRlMB0GA1Ud
+DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDB6BgNVHSMEczBxgBSWO1UVkFl5LOup
+lY08xBLcfGyc+qFOpEwwSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYD
+VQQHDAZMaXNib24xDjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290ggkAzDBe
+dcABQHMwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoGA1Ud
+EQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAoUitYEBW
+lzBMuuDMHvVrtwTcKNXeOXZ6PC78OXNxGCSK4CxTzOceyHjj0K30r2qOd4hNbq43
+J60Zf+69qIpkezG3hcCy/8Yu1lLyhxLvErCbgkvZ1MH4HkEyJOeoh0PJoIq1U3vu
+SA2Ny6LDA5QOWaVME6c1L0ntueu5/BddrTGtqHvK4Td9E3Y8gQhtJHCkN2GbkRRS
+vr2+efC2hNIWEfxFTP+RRKKGfn+B+YASPgLDvHpIapz65MVebJH+gIo/k57swPMJ
+K3Zet53tXqUvnbh87vyGdaOpq897WISNfleQ/XJB28Q3G5qBdLiTu7oxYG42XhC1
+qIm4pZ/gGW5lauu3h9bvzODB2DV6ShnBujtzbd0vBBX38BMP2oOOQ3X2QgalGOKO
+jd6yTCN6VO0ZiFD4xO2XsE1CKkRqPx9rRCKR85NCvlpyytC4KIZjcomf0miMl9e1
+G9Js2y9agiXgQ5lrlZSQ8XyvRD8PC1anCxeyn8HaBblYNwUZ8S6vXkq7K13MuPgX
+3vw106gUcWjw6GwC3BOi7UNtcAYyoXn6jLJ2unpn2mqjpCfbQZ3mnAI7MbEoaSFa
+1CTYh9bxYK6cN+8dOnYoXUyD27aDq6xfP9YJoNmQdYTW4Wwf5JCK23j2DtDB/qen
+uyydJBuI6Me+ctWntImvjM97Teu8s+ssQaA=
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks b/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks
new file mode 100644
index 00000000000..1596eef7b5d
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.key b/qa/integration/fixtures/webserver_certs/generated/server_from_root.key
new file mode 100644
index 00000000000..64ce87d6bd9
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_root.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIJKAIBAAKCAgEAollryM/4tqUECVDy5ZaVObxMsdaQYsXGv6s3OzbeYAB8ujwU
+UYlsdDaIhZC2MJDAeJZSsdTZ5EG8vnMndwRa17ZYX84CQ2Fxm7z8lwfeMIyFuN9z
+dXXEh9F1ZgSFMj7k9hqqBK02z0fbh/KyEwVwO5tdTWkp81e1jWxBUp9CXld4A3lB
+yJ/ZBJ9TE05ae+eZR0E804hQ/db7emrO/66E+30SCPZytg9edKcLkllJ17Jr5HPr
+TGJamZJafn9Z07qPz0JUjWRhftRe5ZWG2nxAtrfXlwxn35vbfxKsOPM1D4SXBAk7
+U1ugP4l+w0EkFc/L/pOvoU5lcc5YUW8gStx4iYoh0bXZYvogfE+XI+l4EZN1sYJL
+mDK9Yponx2JXXkx5rysYfsPfSxHZK2AG1bUwk6iaRqtL7ahCkLvwepCs0rVCCXcZ
+q5Y8wgoJTpNHk49kexvzu7uJeVz40760GgW2A5Ursu839DBDUC3iFBotyukQnC2N
++T/yOsLbYTCCnUsxqQCyYOMaSQ4Fk8vlV42A2dQSn38Adh8fVeamQtQ6hGZRWRUO
+p+wVVwVMstvZcO1la2X6AnlxfGevzt2PlfZejCjYEwoHDAylOGYlf6LbJjjbSGr2
+67rHM+NQLs1q5o+chgIiNa1oGqu5dYzFf0MhIQPvVoBUA5Kpdu/Z8WkoylECAwEA
+AQKCAgAnC76ik3JL6zAnVXK1yRumwSTo+KPNPafpXTJxaWbeS/+zgtOYMKcG5D69
+cOqAj6/a0LyezISDI1RTsbpiI4f9rXtfv1pH/l2miTNu15OWtZVLu2I3c9WKnNPR
+b3DhfsLudcdCTK6L98pSzgoKDRrLGzi7b3mJbyTZGJo1VtxNeFgC7dzmdZtqQy9l
+y0hz2GXC/2uzrGteQaBF9v5F/CE7ov79bNh19QhQogRkdFkQKXdNgJusyVLk8JAX
+MGXYSFxiCp/vSZ8xM76HFQlT7uJZj6moSHGLFB8cVs9Y+xVd4BO6AsZj6/uEjHsS
+Vs5o+IsldTueXg6D6o7PNxzbJF9QwvCWfIPfb2Zo/cRMN1234xCbYV+7GUSulwyX
+0av1L6G8ueVNd+X/8cq3lS5yD49ZkvhO4EjdR17thrgUQotYqG7JrwQsUq4AAB4o
+eHa8utxpyEaUCqVJ9TZLp2267xyE81Rx9DsN6oX+m/M2C0fI9tveCO7kpn7l5kYi
+WhBZGH64t3PpgFhYz1C37Ruz5vK1k1O2v4F7zKCNyTKaARx/8cStcInXVVwqe1fW
+WCnzZZ7W8mtD4ni0lI+yhu4nToLHgqGPUuYy99xINaLgPuLZycCHzNGqmuj+TCPI
+Hhe4hJ1RuXDXEdeG82XkjrvG4tbHpmp6kQQSVcwle1mdGqBpqQKCAQEA0XwXxsER
+IHK/5wVY/KOWmlX+LnizstpsHCsD+tvzotCeUwZfhxXeyxHVxJaBMB03GWZFnbOM
+i59LTsodKcjM6sWJNYd45tRQoR10zNz68QqiIxQ8KksW/WCsJHdaJhvxNG7bReen
+qN4jtKFExqWICvm+zGzBYlDRaY6QRlJz4xhZpCy7228aztisJOPTkPyIgKODYlIu
+O+6wRJq77j8kIO4FmnqZCwkzrPeq8q4stxVG/2Qgc6sNPobWd91nu0HPeJtyj813
+QU5Ni4OhWk/mF7pZYzfCvDazdcLSE6MDM/k5dtJcKkFdom3+MbsTPIpqDM16whts
+FZPmMdOAGFr/AwKCAQEAxmX4m81hvxPTA47vNtw5NuYZv0rpB+4Cavcpfp0eyea2
+i/ZTpVOLRNGkSHnszQkUFY42YYDmrc1B5DUIBqZAp3IrYXjOjuMWpmB8/jPwp47A
+kOvFlMuUMcn4R2pI+Ke/B0nttNx+dmAe1OQiq5CCCXDcdPY/7nbR1AVgGPPap1i6
+4MA6lBA/5AC1JNG/tmAwGFN/dVLaF61X301RgCvjiAA7lXxx5pw0HUXE1UCEgNuu
+RXtOhUtnPy3bir+PT/cOZKneWbeNnVKxhcTB1PvC5Z1BD5V2CP+CdLrNUIFjwjCg
+um+T0yXQ5qdtRpIkldAB0dbnWQaLswfvJYgCvSz3GwKCAQBWEGKAUJ+lsh8vXZ4S
+pW7hV4UHOKWzTFNwOyf2b1koQgdZ2ttyV0TiLyChFKhcyRPzBnaBdNvAHSDGbPkQ
+SqQNrDxT1qWQSBgcKUrsQ7mBQDoeqViSk6kNTiNLFBHgaEhvnz/M94CFO0Z2Fm94
+IVfEEpkVyXSl3Mg8UsrpaUSdP0rMzWgcngfohVIsEcHA5k96cjMvOM4v5z9Z4Cxn
+lF9WfBOnRMkNpKkrXdFIxNAwI7i4gj1m6BaX4rPIKRlN8Jq5VTv64pIlLXNkZx7q
+SLsicnf48Fa8FskiD3lZgfZ16uV18LTW02YRrpjpe49Kpx8sxVqy1qtQLiQ7wkX1
+O6VbAoIBAQCTYG5D9lYU5boLW6MxQngx4s3fftsKK/CZ2s51ImwbmQmjgLD0D9JV
+pdF+kSupx4Om24Rj+6fgFahLyGUU420Ftdapyl7OX7yUjPpsrtKm9XDwdmPIO03z
+ik+nZTmdlKZf2Lf+cQh0EMT2ah2jCm6+apspOz+Ueak28WNIReT4CP6RM9qP4F5F
+lYz6M+FQrbUsbOIymgAuNHMhCsNvDaswfNPGILJPl1tTH1+u9gU333heXtGeTLv+
+f6clM1VXFnQXrOPiC2rkIeiDMPy3pOlLPfx1ghYzavJSme0oT2V2fD75HydVYzMC
+E/8lvCv3KZQgd55VUHp33H32iElYk81fAoIBADZCrhiWKBAND7PAbHBIw3seOH+/
+tsedSQuzVCZN32LhsLt3Xc1wB3l2xJlY1wIVr8tFvRPnwGPz15G89uTE/EGvCyLg
+QW2Ot2kRbc4ECjbeHBUsJT63L4tM4Kq17KPb9ew1V2kaLqrN0ZbBu9oFyCSEodSk
+g3ft5jYF3fgBBS/04fn7ZPHKJ2isx2vnEzKqTMLy6R09jyFE2yD+lLMGO9HBnEAo
+2/o3CXKWAGSWZag6wVJ6dVribV13VdcoPgcBVZW2nTvN2M742pcb9SjNghMQ6htH
+2v5+jFi5E8ApvBPX7ii2E2OLBrxJC/2CaF6VIF2iQaqwAl31zmuors7eQL0=
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12 b/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12
new file mode 100644
index 00000000000..11d41714b40
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12 differ
diff --git a/qa/integration/fixtures/webserver_certs/openssl.cnf b/qa/integration/fixtures/webserver_certs/openssl.cnf
new file mode 100644
index 00000000000..83bd0699e67
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/openssl.cnf
@@ -0,0 +1,53 @@
+[ req ]
+distinguished_name= req_distinguished_name
+attributes= req_attributes
+
+[ req_distinguished_name ]
+countryName= Country Name (2 letter code)
+countryName_min= 2
+countryName_max= 2
+stateOrProvinceName= State or Province Name (full name)
+localityName= Locality Name (eg, city)
+0.organizationName= Organization Name (eg, company)
+organizationalUnitName= Organizational Unit Name (eg, section)
+commonName= Common Name (eg, fully qualified host name)
+commonName_max= 64
+emailAddress= Email Address
+emailAddress_max= 64
+
+[ req_attributes ]
+challengePassword= A challenge password
+challengePassword_min= 4
+challengePassword_max= 20
+
+[ ca ]
+subjectKeyIdentifier = hash
+authorityKeyIdentifier = keyid:always,issuer
+basicConstraints = critical, CA:true
+keyUsage = critical, digitalSignature, cRLSign, keyCertSign
+
+[ intermediate_ca ]
+subjectKeyIdentifier = hash
+authorityKeyIdentifier = keyid:always,issuer
+basicConstraints = critical, CA:true, pathlen:0
+keyUsage = critical, digitalSignature, cRLSign, keyCertSign
+
+[ client_cert ]
+basicConstraints = CA:FALSE
+nsCertType = client, email
+nsComment = "OpenSSL Generated Client Certificate"
+subjectKeyIdentifier = hash
+authorityKeyIdentifier = keyid,issuer
+keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
+extendedKeyUsage = clientAuth, emailProtection
+subjectAltName = "DNS:localhost, IP:127.0.0.1"
+
+[ server_cert ]
+basicConstraints = CA:FALSE
+nsCertType = server
+nsComment = "OpenSSL Generated Server Certificate"
+subjectKeyIdentifier = hash
+authorityKeyIdentifier = keyid,issuer:always
+keyUsage = critical, digitalSignature, keyEncipherment
+extendedKeyUsage = serverAuth
+subjectAltName = "DNS:localhost, IP:127.0.0.1"
diff --git a/qa/integration/specs/settings_spec.rb b/qa/integration/specs/settings_spec.rb
index f1b1a9e011e..ae0fcc2bb1f 100644
--- a/qa/integration/specs/settings_spec.rb
+++ b/qa/integration/specs/settings_spec.rb
@@ -142,7 +142,7 @@ def overwrite_settings(settings)
   it "start on a different HTTP port" do
     # default in 9600
     http_port = random_port
-    change_setting("http.port", http_port)
+    change_setting("api.http.port", http_port)
     @logstash_service.spawn_logstash("-e", tcp_config)
     wait_for_port(http_port, 60)
     expect(is_port_open?(http_port)).to be true
diff --git a/qa/integration/specs/webserver_spec.rb b/qa/integration/specs/webserver_spec.rb
new file mode 100644
index 00000000000..de19b93782e
--- /dev/null
+++ b/qa/integration/specs/webserver_spec.rb
@@ -0,0 +1,113 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require 'openssl'
+
+require 'logstash/util'
+require 'logstash/webserver'
+
+describe 'api webserver' do
+  let!(:logger) { double("Logger").as_null_object }
+  let!(:agent) { double("Agent").as_null_object }
+  subject(:webserver) { LogStash::WebServer.new(logger, agent, webserver_options) }
+
+  let(:webserver_options) { Hash.new }
+
+  # provide a shared context to take care of ensuring that the webserver
+  # is running during the spec runs of examples in the including context
+  shared_context 'running webserver' do
+    let(:webserver) { defined?(super()) ? super() : fail("included context requires `webserver` to be present") }
+
+    # since we are running the webserver on another
+    # thread, ensure that a crash doesn't go unnoticed.
+    around(:each) do |example|
+      abort = Thread.abort_on_exception
+      example.call
+      Thread.abort_on_exception = abort
+    end
+
+    # If webmock is active, allow real network connections
+    before(:each) { WebMock.allow_net_connect! if defined?(WebMock) }
+
+    # ensure our API webserver is running with the provided config
+    # before running our specs that validate responses
+    let!(:webserver_thread) { Thread.new(webserver, &:run) }
+    before(:each) do
+      Stud.try(10.times) { fail('API WebServer not running yet...') unless webserver.port }
+    end
+    after(:each) do
+      webserver.stop
+      webserver_thread.join
+    end
+  end
+
+  %w(
+      server_from_root.p12
+      server_from_intermediate.p12
+      server_from_root.jks
+      server_from_intermediate.jks
+    ).each do |keystore_name|
+    context "when configured with keystore #{keystore_name}" do
+      let(:ca_file) { File.join(certs_path, "root.crt") }
+      let(:certs_path) { File.expand_path("../../fixtures/webserver_certs/generated", __FILE__) }
+      let(:keystore_path) { File.join(certs_path, "#{keystore_name}") }
+      let(:keystore_password) { "12345678" }
+
+      let(:ssl_params) { {:keystore_path => keystore_path, :keystore_password => LogStash::Util::Password.new(keystore_password)} }
+      let(:webserver_options) { super().merge(:ssl_params => ssl_params) }
+
+      context 'and invalid credentials' do
+        let(:keystore_password) { "wrong" }
+        it 'raises a helpful error' do
+          expect { webserver }.to raise_error(ArgumentError, a_string_including("keystore password was incorrect"))
+        end
+      end
+
+      context "when started" do
+        include_context 'running webserver'
+
+        context 'an HTTPS request' do
+          it 'succeeds' do
+            client = Manticore::Client.new(ssl: { ca_file: ca_file })
+            response = client.get("https://127.0.0.1:#{webserver.port}")
+            expect(response.code).to eq(200)
+          end
+
+          # this is mostly a sanity check for our testing methodology
+          # If this fails, we cannot trust success from the other specs
+          context 'without providing CA' do
+            it 'fails' do
+              client = Manticore::Client.new(ssl: { })
+              expect do
+                client.get("https://127.0.0.1:#{webserver.port}").code
+              end.to raise_error(Manticore::ClientProtocolException, a_string_including("unable to find valid certification path to requested target"))
+            end
+          end
+        end
+
+        context 'an HTTP request' do
+          it 'fails' do
+            client = Manticore::Client.new
+            expect do
+              client.get("http://127.0.0.1:#{webserver.port}").code
+            end.to raise_error(Manticore::ClientProtocolException, a_string_including("failed to respond"))
+          end
+        end
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/x-pack/spec/monitoring/inputs/metrics/stats_event_factory_spec.rb b/x-pack/spec/monitoring/inputs/metrics/stats_event_factory_spec.rb
index 44ec6506478..7150bb76b87 100644
--- a/x-pack/spec/monitoring/inputs/metrics/stats_event_factory_spec.rb
+++ b/x-pack/spec/monitoring/inputs/metrics/stats_event_factory_spec.rb
@@ -17,7 +17,7 @@
     global_stats = {"uuid" => "00001" }
     sut = described_class.new(global_stats, collector.snapshot_metric, nil)
     LogStash::SETTINGS.set_value("monitoring.enabled", false)
-    LogStash::SETTINGS.set_value("http.enabled", webserver_enabled)
+    LogStash::SETTINGS.set_value("api.http.enabled", webserver_enabled)
 
     monitoring_evt = sut.make(agent, true)
     json = JSON.parse(monitoring_evt.to_json)
@@ -32,7 +32,7 @@
     global_stats = {"uuid" => "00001" }
     sut = described_class.new(global_stats, collector.snapshot_metric, "funky_cluster_uuid")
     LogStash::SETTINGS.set_value("monitoring.enabled", true)
-    LogStash::SETTINGS.set_value("http.enabled", webserver_enabled)
+    LogStash::SETTINGS.set_value("api.enabled", webserver_enabled)
 
     monitoring_evt = sut.make(agent, true)
     json = JSON.parse(monitoring_evt.to_json)
