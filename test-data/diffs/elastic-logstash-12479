diff --git a/logstash-core/lib/logstash/util/time_value.rb b/logstash-core/lib/logstash/util/time_value.rb
index b2814d22fe1..85094c41700 100644
--- a/logstash-core/lib/logstash/util/time_value.rb
+++ b/logstash-core/lib/logstash/util/time_value.rb
@@ -17,76 +17,6 @@
 
 module LogStash
   module Util
-    class TimeValue
-      def initialize(duration, time_unit)
-        @duration = duration
-        @time_unit = time_unit
-      end
-
-      def self.from_value(value)
-        case value
-        when TimeValue
-          return value # immutable
-        when ::String
-          normalized = value.downcase.strip
-          if normalized.end_with?("nanos")
-            TimeValue.new(parse(normalized, 5), :nanosecond)
-          elsif normalized.end_with?("micros")
-            TimeValue.new(parse(normalized, 6), :microsecond)
-          elsif normalized.end_with?("ms")
-            TimeValue.new(parse(normalized, 2), :millisecond)
-          elsif normalized.end_with?("s")
-            TimeValue.new(parse(normalized, 1), :second)
-          elsif normalized.end_with?("m")
-            TimeValue.new(parse(normalized, 1), :minute)
-          elsif normalized.end_with?("h")
-            TimeValue.new(parse(normalized, 1), :hour)
-          elsif normalized.end_with?("d")
-            TimeValue.new(parse(normalized, 1), :day)
-          elsif normalized =~ /^-0*1/
-            TimeValue.new(-1, :nanosecond)
-          else
-            raise ArgumentError.new("invalid time unit: \"#{value}\"")
-          end
-        else
-          raise ArgumentError.new("value is not a string: #{value} [#{value.class}]")
-        end
-      end
-
-      def to_nanos
-        case @time_unit
-        when :day
-          86400000000000 * @duration
-        when :hour
-          3600000000000 * @duration
-        when :minute
-          60000000000 * @duration
-        when :second
-          1000000000 * @duration
-        when :millisecond
-          1000000 * @duration
-        when :microsecond
-          1000 * @duration
-        when :nanosecond
-          @duration
-        end
-      end
-
-      def to_seconds
-        self.to_nanos / 1_000_000_000.0
-      end
-
-      def ==(other)
-        (self.duration == other.duration && self.time_unit == other.time_unit) || self.to_nanos == other.to_nanos
-      end
-
-      def self.parse(value, suffix)
-        Integer(value[0..(value.size - suffix - 1)].strip)
-      end
-
-      private_class_method :parse
-      attr_reader :duration
-      attr_reader :time_unit
-    end
+    java_import org.logstash.util.TimeValue
   end
 end
diff --git a/logstash-core/spec/logstash/util/time_value_spec.rb b/logstash-core/spec/logstash/util/time_value_spec.rb
index 79b4a0229c5..312a91ec67b 100644
--- a/logstash-core/spec/logstash/util/time_value_spec.rb
+++ b/logstash-core/spec/logstash/util/time_value_spec.rb
@@ -67,7 +67,7 @@ module LogStash module Util
         a = TimeValue.from_value(32)
         fail "should not parse"
       rescue ArgumentError => e
-        expect(e.message).to eq("value is not a string: 32 [Integer]")
+        expect(e.message).to start_with("value is not a string: 32 ")
       end
     end
 end
diff --git a/logstash-core/src/main/java/org/logstash/util/TimeValue.java b/logstash-core/src/main/java/org/logstash/util/TimeValue.java
new file mode 100644
index 00000000000..8ce4fcf886c
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/util/TimeValue.java
@@ -0,0 +1,126 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.logstash.util;
+
+import org.logstash.RubyUtil;
+
+import java.util.Objects;
+import java.util.concurrent.TimeUnit;
+
+public class TimeValue {
+
+    public static TimeValue fromValue(Object value) {
+        if (value instanceof TimeValue) {
+            return (TimeValue) value;
+        }
+        if (value instanceof String) {
+            final String normalized = ((String) value).toLowerCase().trim();
+            if (normalized.endsWith("nanos")) {
+                return new TimeValue(parse(normalized, 5), TimeUnit.NANOSECONDS);
+            }
+            if (normalized.endsWith("micros")) {
+                return new TimeValue(parse(normalized, 6), TimeUnit.MICROSECONDS);
+            }
+            if (normalized.endsWith("ms")) {
+                return new TimeValue(parse(normalized, 2), TimeUnit.MILLISECONDS);
+            }
+            if (normalized.endsWith("s")) {
+                return new TimeValue(parse(normalized, 1), TimeUnit.SECONDS);
+            }
+            if (normalized.endsWith("m")) {
+                return new TimeValue(parse(normalized, 1), TimeUnit.MINUTES);
+            }
+            if (normalized.endsWith("h")) {
+                return new TimeValue(parse(normalized, 1), TimeUnit.HOURS);
+            }
+            if (normalized.endsWith("d")) {
+                return new TimeValue(parse(normalized, 1), TimeUnit.DAYS);
+            }
+            if (normalized.matches("^-0*1")) {
+                return new TimeValue(-1, TimeUnit.NANOSECONDS);
+            }
+            throw RubyUtil.RUBY.newArgumentError("invalid time unit: \"" + value + "\"");
+        }
+        throw RubyUtil.RUBY.newArgumentError("value is not a string: " + value + " [" + value.getClass().getName() + "]");
+    }
+
+    private static int parse(String value, int suffix) {
+        final String numericPart = value.substring(0, value.length() - suffix).trim();
+        try {
+            return Integer.parseInt(numericPart);
+        } catch (NumberFormatException ex) {
+            throw RubyUtil.RUBY.newArgumentError("invalid value for Integer(): \"" + numericPart + "\"");
+        }
+    }
+
+    private final long duration;
+    private final TimeUnit timeUnit;
+
+    /**
+     * @param duration number of timeUnit
+     * @param timeUnit could be one of nanosecond, microsecond, millisecond, second, minute, hour, day, nanosecond
+     * */
+    public TimeValue(int duration, String timeUnit) {
+        this(duration, TimeUnit.valueOf((timeUnit + "s").toUpperCase()));
+    }
+
+    protected TimeValue(long duration, TimeUnit timeUnit) {
+        this.duration = duration;
+        this.timeUnit = timeUnit;
+    }
+
+    public long getDuration() {
+        return duration;
+    }
+
+    public String getTimeUnit() {
+        final String value = timeUnit.toString();
+        return value.substring(0, value.length() - 1); // remove last "s"
+    }
+
+    public long toNanos() {
+        return timeUnit.toNanos(duration);
+    }
+
+    public long toSeconds() {
+        return timeUnit.toSeconds(duration);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        TimeValue timeValue = (TimeValue) o;
+        return (duration == timeValue.duration &&
+                timeUnit == timeValue.timeUnit) || (this.toNanos() == timeValue.toNanos());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(duration, timeUnit);
+    }
+
+    @Override
+    public String toString() {
+        return "TimeValue{" +
+                "duration=" + duration +
+                ", timeUnit=" + timeUnit +
+                '}';
+    }
+}
