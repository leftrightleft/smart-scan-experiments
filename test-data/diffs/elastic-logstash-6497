diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 16ba2e583f7..4082bf74f98 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -293,11 +293,10 @@ def reload_pipeline!(id)
 
   def start_pipeline(id)
     pipeline = @pipelines[id]
-    return unless pipeline.is_a?(LogStash::Pipeline)
     return if pipeline.ready?
     @logger.debug("starting pipeline", :id => id)
     t = Thread.new do
-      LogStash::Util.set_thread_name("pipeline.#{id}")
+      LogStash::Util.set_thread_name("[#{id}]-pipeline-manager")
       begin
         pipeline.run
       rescue => e
@@ -326,7 +325,6 @@ def stop_pipeline(id)
     return unless pipeline
     @logger.warn("stopping pipeline", :id => id)
     pipeline.shutdown { LogStash::ShutdownWatcher.start(pipeline) }
-    @pipelines[id].thread.join
   end
 
   def start_pipelines
@@ -345,8 +343,7 @@ def shutdown_pipelines
   end
 
   def running_pipeline?(pipeline_id)
-    thread = @pipelines[pipeline_id].thread
-    thread.is_a?(Thread) && thread.alive?
+    @pipelines[pipeline_id].running?
   end
 
   def upgrade_pipeline(pipeline_id, new_pipeline)
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 24e28b0d4da..e828dc3b036 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -181,10 +181,6 @@ def filters?
 
   def run
     @started_at = Time.now
-
-    @thread = Thread.current
-    Util.set_thread_name("[#{pipeline_id}]-pipeline-manager")
-
     start_workers
 
     @logger.info("Pipeline #{@pipeline_id} started")
@@ -209,15 +205,22 @@ def run
 
     # exit code
     return 0
+  rescue Exception => e
+    # The pipeline doesn't have a `failed` test but we use the `#running?` predicate to see if a pipeline is running
+    # so on exception we mark this pipeline as not running and reraise the exception to be handled higher.
+    transition_to_stopped
+    raise e
   end # def run
 
   def transition_to_running
     @running.make_true
   end
+  private :transition_to_running
 
   def transition_to_stopped
     @running.make_false
   end
+  private :transition_to_stopped
 
   def running?
     @running.true?
@@ -269,6 +272,7 @@ def start_workers
       @ready.make_true
     end
   end
+  private :start_workers
 
   # Main body of what a worker thread does
   # Repeatedly takes batches off the queue, filters, then outputs them
@@ -294,6 +298,7 @@ def worker_loop(batch_size, batch_delay)
       @filter_queue_client.close_batch(batch)
     end
   end
+  private :worker_loop
 
   def filter_batch(batch)
     batch.each do |event|
@@ -315,6 +320,7 @@ def filter_batch(batch)
                   "exception" => e, "backtrace" => e.backtrace)
     raise
   end
+  private :filter_batch
 
   # Take an array of events and send them to the correct output
   def output_batch(batch)
@@ -335,13 +341,15 @@ def output_batch(batch)
     output_events_map.each do |output, events|
       output.multi_receive(events)
     end
-    
+
     @filter_queue_client.add_output_metrics(batch)
   end
+  private :output_batch
 
   def wait_inputs
     @input_threads.each(&:join)
   end
+  private :wait_inputs
 
   def start_inputs
     moreinputs = []
@@ -363,6 +371,7 @@ def start_inputs
   def start_input(plugin)
     @input_threads << Thread.new { inputworker(plugin) }
   end
+  private :start_input
 
   def inputworker(plugin)
     Util::set_thread_name("[#{pipeline_id}]<#{plugin.class.config_name}")
@@ -395,6 +404,7 @@ def inputworker(plugin)
       plugin.do_close
     end
   end # def inputworker
+  private :inputworker
 
   # initiate the pipeline shutdown sequence
   # this method is intended to be called from outside the pipeline thread
@@ -410,8 +420,9 @@ def shutdown(&before_stop)
     before_stop.call if block_given?
 
     @logger.debug "Closing inputs"
-    @inputs.each(&:do_stop)
+    stop_inputs
     @logger.debug "Closed inputs"
+    wait_workers
   end # def shutdown
 
   # After `shutdown` is called from an external thread this is called from the main thread to
@@ -432,6 +443,7 @@ def shutdown_workers
     @filters.each(&:do_close)
     @outputs.each(&:do_close)
   end
+  private :shutdown_workers
 
   def plugin(plugin_type, name, *args)
     @plugin_counter += 1
@@ -467,6 +479,7 @@ def plugin(plugin_type, name, *args)
     
     @plugins_by_id[id] = plugin
   end
+  private :plugin
 
   # for backward compatibility in devutils for the rspec helpers, this method is not used
   # in the pipeline anymore.
@@ -474,7 +487,7 @@ def filter(event, &block)
     # filter_func returns all filtered events, including cancelled ones
     filter_func(event).each { |e| block.call(e) }
   end
-
+  private :filter
 
   # perform filters flush and yield flushed event to the passed block
   # @param options [Hash]
@@ -486,6 +499,7 @@ def flush_filters(options = {}, &block)
       flusher.call(options, &block)
     end
   end
+  private :flush_filters
 
   def start_flusher
     # Invariant to help detect improper initialization
@@ -498,10 +512,12 @@ def start_flusher
       end
     end
   end
+  private :start_flusher
 
   def shutdown_flusher
     @flusher_thread.join
   end
+  private :shutdown_flusher
 
   def flush
     if @flushing.compare_and_set(false, true)
@@ -509,7 +525,7 @@ def flush
       @signal_queue.push(FLUSH)
     end
   end
-
+  private :flush
 
   # Calculate the uptime in milliseconds
   #
@@ -533,6 +549,7 @@ def flush_filters_to_batch(batch, options = {})
 
     @flushing.set(false)
   end # flush_filters_to_batch
+  private :flush_filters_to_batch
 
   def plugin_threads_info
     input_threads = @input_threads.select {|t| t.alive? }
@@ -596,4 +613,12 @@ def inspect
     }
   end
 
+  private
+  def stop_inputs
+    @inputs.each(&:do_stop)
+  end
+
+  def wait_workers
+    @worker_threads.each(&:join)
+  end
 end end
diff --git a/logstash-core/lib/logstash/pipeline_reporter.rb b/logstash-core/lib/logstash/pipeline_reporter.rb
index ed73144c86c..1773c282e8b 100644
--- a/logstash-core/lib/logstash/pipeline_reporter.rb
+++ b/logstash-core/lib/logstash/pipeline_reporter.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require 'ostruct'
-
 module LogStash; class PipelineReporter
   attr_reader :logger, :pipeline
 
diff --git a/logstash-core/lib/logstash/shutdown_watcher.rb b/logstash-core/lib/logstash/shutdown_watcher.rb
index 6fffc270f27..3d81036264c 100644
--- a/logstash-core/lib/logstash/shutdown_watcher.rb
+++ b/logstash-core/lib/logstash/shutdown_watcher.rb
@@ -40,7 +40,7 @@ def start
       cycle_number = 0
       stalled_count = 0
       Stud.interval(@cycle_period) do
-        break unless @pipeline.thread.alive?
+        break unless @pipeline.running?
         @reports << pipeline_report_snapshot
         @reports.delete_at(0) if @reports.size > @report_every # expire old report
         if cycle_number == (@report_every - 1) # it's report time!
diff --git a/logstash-core/spec/logstash/pipeline_reporter_spec.rb b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
index 68b48181996..991cb4b51cc 100644
--- a/logstash-core/spec/logstash/pipeline_reporter_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
@@ -20,7 +20,6 @@
     allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_call_original
 
     @pre_snapshot = reporter.snapshot
-    
     pipeline.run
     @post_snapshot = reporter.snapshot
   end
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index 791ca1f8e87..31cab77d624 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -154,6 +154,24 @@ class TestPipeline < LogStash::Pipeline
     end
   end
 
+  describe "when an exception occur in a running pipeline" do
+    let(:config) {
+      <<-eos
+      input { generator {} }
+      output { null {} }
+      eos
+    }
+
+    subject { TestPipeline.new(config, pipeline_settings_obj) }
+
+    it "transition to stopped" do
+      expect(subject.running?).to be_falsey
+      expect(subject).to receive(:start_workers).and_raise { "it crashed" }
+      expect { subject.run }.to raise_error
+      expect(subject.running?).to be_falsey
+    end
+  end
+
   describe "defaulting the pipeline workers based on thread safety" do
     before(:each) do
       allow(LogStash::Plugin).to receive(:lookup).with("input", "dummyinput").and_return(DummyInput)
diff --git a/logstash-core/spec/logstash/shutdown_watcher_spec.rb b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
index 2f934f59b77..e2c9a99d5d6 100644
--- a/logstash-core/spec/logstash/shutdown_watcher_spec.rb
+++ b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
@@ -6,14 +6,13 @@
   let(:check_every) { 0.01 }
   let(:check_threshold) { 100 }
   subject { LogStash::ShutdownWatcher.new(pipeline, check_every) }
-  let(:pipeline) { double("pipeline") }
+  let(:pipeline) { double("pipeline", :running? => true) }
   let(:reporter) { double("reporter") }
   let(:reporter_snapshot) { double("reporter snapshot") }
   report_count = 0
 
   before :each do
     allow(pipeline).to receive(:reporter).and_return(reporter)
-    allow(pipeline).to receive(:thread).and_return(Thread.current)
     allow(reporter).to receive(:snapshot).and_return(reporter_snapshot)
     allow(reporter_snapshot).to receive(:o_simple_hash).and_return({})
 
