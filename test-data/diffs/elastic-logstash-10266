diff --git a/Gemfile.template b/Gemfile.template
index 442c5ae8371..45b6a92d5c1 100644
--- a/Gemfile.template
+++ b/Gemfile.template
@@ -21,7 +21,7 @@ gem "rack-test", :require => "rack/test", :group => :development
 gem "flores", "~> 0.0.6", :group => :development
 gem "term-ansicolor", "~> 1.3.2", :group => :development
 gem "json-schema", "~> 2.6", :group => :development
-gem "webmock", "~> 2.3.2", :group => :development
+gem "webmock", "~> 3.5.1", :group => :development
 gem "belzebuth", :group => :development
 gem "pleaserun", "~>0.0.28"
 gem 'webrick', '~> 1.3.1'
diff --git a/build.gradle b/build.gradle
index ee8358375b9..a20a1d7efa6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -331,9 +331,9 @@ def qaBundledGemPath = "${qaVendorPath}/jruby/2.5.0"
 def qaBundleBin = "${qaBundledGemPath}/bin/bundle"
 
 task installIntegrationTestBundler(dependsOn: unpackTarDistribution) {
-  outputs.files fileTree("${qaBundledGemPath}/gems/bundler-1.16.0")
+  outputs.files fileTree("${qaBundledGemPath}/gems/bundler-1.17.1")
   doLast {
-    rubyGradleUtils.gem("bundler", "1.16.0", qaBundledGemPath)
+    rubyGradleUtils.gem("bundler", "1.17.1", qaBundledGemPath)
   }
 }
 
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index 2de8940a651..305fbdc0f13 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -10,15 +10,20 @@ def patch!
       # Patch to prevent Bundler to save a .bundle/config file in the root
       # of the application
       ::Bundler::Settings.module_exec do
-        def set_key(key, value, hash, file)
-          key = key_for(key)
-
-          unless hash[key] == value
-            hash[key] = value
-            hash.delete(key) if value.nil?
-          end
+        def set_local(key, value)
+          set_key(key, value, @local_config, nil)
+        end
+      end
 
-          value
+      # In recent versions (currently 1.17.1) Bundler calls reset_paths! early during
+      # Bundler::CLI.start (https://github.com/bundler/bundler/blob/v1.17.1/lib/bundler/cli.rb#L39)
+      # This breaks our setting up of gemfile and bundle paths, the without group setting etc
+      # We need to tone down this very aggressive resetter (https://github.com/bundler/bundler/blob/v1.17.1/lib/bundler.rb#L487-L500)
+      # So we reimplement it here to only nullify the definition object, so that it can be computed
+      # again if necessary with all the configuration in place.
+      ::Bundler.module_exec do
+        def self.reset_paths!
+          @definition = nil
         end
       end
 
@@ -47,11 +52,11 @@ def setup!(options = {})
       require "bundler"
       LogStash::Bundler.patch!
 
-      ::Bundler.settings[:path] = Environment::BUNDLE_DIR
-      ::Bundler.settings[:without] = options[:without].join(":")
+      ::Bundler.settings.set_local(:path, Environment::BUNDLE_DIR)
+      ::Bundler.settings.set_local(:without, options[:without])
       # in the context of Bundler.setup it looks like this is useless here because Gemfile path can only be specified using
       # the ENV, see https://github.com/bundler/bundler/blob/v1.8.3/lib/bundler/shared_helpers.rb#L103
-      ::Bundler.settings[:gemfile] = Environment::GEMFILE_PATH
+      ::Bundler.settings.set_local(:gemfile, Environment::GEMFILE_PATH)
 
       ::Bundler.reset!
       ::Bundler.setup
@@ -103,10 +108,10 @@ def invoke!(options = {})
       # force Rubygems sources to our Gemfile sources
       ::Gem.sources = ::Gem::SourceList.from(options[:rubygems_source]) if options[:rubygems_source]
 
-      ::Bundler.settings[:path] = LogStash::Environment::BUNDLE_DIR
-      ::Bundler.settings[:gemfile] = LogStash::Environment::GEMFILE_PATH
-      ::Bundler.settings[:without] = options[:without].join(":")
-      ::Bundler.settings[:force] = options[:force]
+      ::Bundler.settings.set_local(:path, LogStash::Environment::BUNDLE_DIR)
+      ::Bundler.settings.set_local(:gemfile, LogStash::Environment::GEMFILE_PATH)
+      ::Bundler.settings.set_local(:without, options[:without])
+      ::Bundler.settings.set_local(:force, options[:force])
 
       if !debug?
         # Will deal with transient network errors
diff --git a/lib/pluginmanager/bundler/logstash_injector.rb b/lib/pluginmanager/bundler/logstash_injector.rb
index aa9070695b7..33286a74a8c 100644
--- a/lib/pluginmanager/bundler/logstash_injector.rb
+++ b/lib/pluginmanager/bundler/logstash_injector.rb
@@ -56,41 +56,36 @@ def self.dependency(plugin)
     # And managing the gemfile is down by using our own Gemfile parser, this allow us to
     # make it work with gems that are already defined in the gemfile.
     def inject(gemfile_path, lockfile_path, dependencies)
-      if Bundler.settings[:frozen]
-        # ensure the lock and Gemfile are synced
-        Bundler.definition.ensure_equivalent_gemfile_and_lockfile(true)
-        # temporarily remove frozen while we inject
-        frozen = Bundler.settings.delete(:frozen)
-      end
-
-      builder = Dsl.new
-      gemfile = LogStash::Gemfile.new(File.new(gemfile_path, "r+")).load
+      Bundler.definition.ensure_equivalent_gemfile_and_lockfile(true) if Bundler.settings[:frozen]
 
-      begin
-        @new_deps.each do |dependency|
-          gemfile.update(dependency.name, dependency.requirement)
-        end
+      Bundler.settings.temporary(:frozen => false) do
+        builder = Dsl.new
+        gemfile = LogStash::Gemfile.new(File.new(gemfile_path, "r+")).load
 
-        # If the dependency is defined in the gemfile, lets try to update the version with the one we have
-        # with the pack.
-        dependencies.each do |dependency|
-          if gemfile.defined_in_gemfile?(dependency.name)
+        begin
+          @deps.each do |dependency|
             gemfile.update(dependency.name, dependency.requirement)
           end
-        end
 
-        builder.eval_gemfile("bundler file", gemfile.generate())
-        definition = builder.to_definition(lockfile_path, {})
-        definition.lock(lockfile_path)
-        gemfile.save
-      rescue => e
-        # the error should be handled elsewhere but we need to get the original file if we dont
-        # do this logstash will be in an inconsistent state
-        gemfile.restore!
-        raise e
+          # If the dependency is defined in the gemfile, lets try to update the version with the one we have
+          # with the pack.
+          dependencies.each do |dependency|
+            if gemfile.defined_in_gemfile?(dependency.name)
+              gemfile.update(dependency.name, dependency.requirement)
+            end
+          end
+
+          builder.eval_gemfile("bundler file", gemfile.generate())
+          definition = builder.to_definition(lockfile_path, {})
+          definition.lock(lockfile_path)
+          gemfile.save
+        rescue => e
+          # the error should be handled elsewhere but we need to get the original file if we dont
+          # do this logstash will be in an inconsistent state
+          gemfile.restore!
+          raise e
+        end
       end
-    ensure
-      Bundler.settings[:frozen] = "1" if frozen
     end
   end
 end
diff --git a/lib/pluginmanager/bundler/logstash_uninstall.rb b/lib/pluginmanager/bundler/logstash_uninstall.rb
index bdaef0dbac6..d77bd95126e 100644
--- a/lib/pluginmanager/bundler/logstash_uninstall.rb
+++ b/lib/pluginmanager/bundler/logstash_uninstall.rb
@@ -71,13 +71,11 @@ def display_cant_remove_message(gem_name, dependencies_from)
     end
 
     def unfreeze_gemfile
-      if Bundler.settings[:frozen]
-        Bundler.definition.ensure_equivalent_gemfile_and_lockfile(true)
-        frozen = Bundler.settings.delete(:frozen)
+      Bundler.definition.ensure_equivalent_gemfile_and_lockfile(true) if Bundler.settings[:frozen]
+
+      Bundler.settings.temporary(:frozen => false) do
+        yield
       end
-      yield
-    ensure
-      Bundler.settings[:frozen] = "1" if frozen
     end
 
     def self.uninstall!(gem_name, options = { :gemfile => LogStash::Environment::GEMFILE, :lockfile => LogStash::Environment::LOCKFILE })
diff --git a/qa/integration/fixtures/logstash-dummy-pack/logstash-dummy-pack.zip b/qa/integration/fixtures/logstash-dummy-pack/logstash-dummy-pack.zip
index f2dbc63c8d6..4d66ebe8542 100644
Binary files a/qa/integration/fixtures/logstash-dummy-pack/logstash-dummy-pack.zip and b/qa/integration/fixtures/logstash-dummy-pack/logstash-dummy-pack.zip differ
diff --git a/qa/integration/specs/cli/remove_spec.rb b/qa/integration/specs/cli/remove_spec.rb
index 95981265d5a..2bce464ce48 100644
--- a/qa/integration/specs/cli/remove_spec.rb
+++ b/qa/integration/specs/cli/remove_spec.rb
@@ -45,7 +45,7 @@
 
             expect(execute.exit_code).to eq(1)
             expect(execute.stderr_and_stdout).to match(/Failed to remove "logstash-codec-json"/)
-            expect(execute.stderr_and_stdout).to match(/logstash-input-beats/) # one of the dependency
+            expect(execute.stderr_and_stdout).to match(/logstash-input-kafka/) # one of the dependency
             expect(execute.stderr_and_stdout).to match(/logstash-output-udp/) # one of the dependency
 
             presence_check = @logstash_plugin.list("logstash-codec-json")
@@ -78,7 +78,7 @@
 
           expect(execute.exit_code).to eq(1)
           expect(execute.stderr_and_stdout).to match(/Failed to remove "logstash-codec-json"/)
-          expect(execute.stderr_and_stdout).to match(/logstash-input-beats/) # one of the dependency
+          expect(execute.stderr_and_stdout).to match(/logstash-input-kafka/) # one of the dependency
           expect(execute.stderr_and_stdout).to match(/logstash-output-udp/) # one of the dependency
 
           presence_check = @logstash_plugin.list("logstash-codec-json")
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index f6c868c53ee..fb7c70b489e 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -29,6 +29,7 @@ namespace "artifact" do
       "logstash-core/*.gemspec",
 
       "logstash-core-plugin-api/lib/**/*",
+      "logstash-core-plugin-api/versions-gem-copy.yml",
       "logstash-core-plugin-api/*.gemspec",
 
       "patterns/**/*",
diff --git a/rakelib/dependency.rake b/rakelib/dependency.rake
index 22219304de4..b2de8661966 100644
--- a/rakelib/dependency.rake
+++ b/rakelib/dependency.rake
@@ -1,7 +1,7 @@
 
 namespace "dependency" do
   task "bundler" do
-    Rake::Task["gem:require"].invoke("bundler", "~> 1.9.4")
+    Rake::Task["gem:require"].invoke("bundler", "~> 1.17.1")
   end
 
   task "clamp" do
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index 5c60e4d9b7d..842640b7034 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -7,8 +7,6 @@ namespace "vendor" do
     system('./gradlew downloadAndInstallJRuby') unless File.exists?(File.join("vendor", "jruby"))
   end # jruby
 
-  task "all" => "jruby"
-
   namespace "force" do
     task "gems" => ["vendor:gems"]
   end
diff --git a/spec/unit/bootstrap/bundler_spec.rb b/spec/unit/bootstrap/bundler_spec.rb
index df6b4d169a5..1216ddbe704 100644
--- a/spec/unit/bootstrap/bundler_spec.rb
+++ b/spec/unit/bootstrap/bundler_spec.rb
@@ -44,7 +44,7 @@
     after do
       expect(::Bundler.settings[:path]).to eq(LogStash::Environment::BUNDLE_DIR)
       expect(::Bundler.settings[:gemfile]).to eq(LogStash::Environment::GEMFILE_PATH)
-      expect(::Bundler.settings[:without]).to eq(options.fetch(:without, []).join(':'))
+      expect(::Bundler.settings[:without]).to eq(options.fetch(:without, []))
 
       expect(ENV['GEM_PATH']).to eq(LogStash::Environment.logstash_gem_home)
 
diff --git a/spec/unit/license_spec.rb b/spec/unit/license_spec.rb
index b82cd014a8b..65a8770b707 100644
--- a/spec/unit/license_spec.rb
+++ b/spec/unit/license_spec.rb
@@ -33,7 +33,8 @@
       # Skipped because version 2.6.2 which we use has multiple licenses: MIT, ARTISTIC 2.0, GPL-2
       # See https://rubygems.org/gems/mime-types/versions/2.6.2
       # version 3.0 of mime-types (which is only compatible with Ruby 2.0) is MIT licensed
-      "mime-types"
+      "mime-types",
+      "logstash-core-plugin-api"
     ]
   end
 
