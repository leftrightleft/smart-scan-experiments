diff --git a/qa/Rakefile b/qa/Rakefile
index 79af23b5733..3c38901bf2c 100644
--- a/qa/Rakefile
+++ b/qa/Rakefile
@@ -14,7 +14,7 @@ namespace :test do
   task :ssh_config do
     require "json"
     cd "acceptance" do
-      raw_ssh_config    = LogStash::VagrantHelpers.fetch_config[:stdout].split("\n");
+      raw_ssh_config    = LogStash::VagrantHelpers.fetch_config.stdout.split("\n");
       parsed_ssh_config = LogStash::VagrantHelpers.parse(raw_ssh_config)
       File.write("../.vm_ssh_config", parsed_ssh_config.to_json)
     end
@@ -27,7 +27,6 @@ namespace :test do
   end
 
   namespace :acceptance do
-
     desc "Run all acceptance"
     task :all do
       exit(RSpec::Core::Runner.run([Rake::FileList["acceptance/spec/**/*_spec.rb"]]))
diff --git a/qa/vagrant-helpers.rb b/qa/vagrant-helpers.rb
index aba405bbb2a..fcff83f9b0c 100644
--- a/qa/vagrant-helpers.rb
+++ b/qa/vagrant-helpers.rb
@@ -1,15 +1,56 @@
 # encoding: utf-8
 require "open3"
+require "bundler"
 
 module LogStash
+  class CommandExecutor
+    class CommandError < StandardError; end
+
+    class CommandResponse
+      attr_reader :stdin, :stdout, :stderr, :exitstatus
+
+      def initialize(stdin, stdout, stderr, exitstatus)
+        @stdin = stdin, 
+        @stdout = stdout
+        @stderr = stderr
+        @exitstatus = exitstatus
+      end
+
+      def success?
+        exitstatus == 0
+      end
+    end
+
+    def self.run(cmd)
+      # This block is require to be able to launch a ruby subprocess
+      # that use bundler.
+      Bundler.with_clean_env do
+        Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
+          CommandResponse.new(stdin, stdout.read.chomp, stderr.read.chomp, wait_thr.value.exitstatus)
+        end
+      end
+    end
+
+    # This method will raise an exception if the `CMD`
+    # was not run successfully and will display the content of STDERR
+    def self.run!(cmd)
+      response = run(cmd)
+    
+      unless response.success?
+        raise CommandError, "CMD: #{cmd} STDERR: #{response.stderr}"
+      end
+      response
+    end
+  end
+
   class VagrantHelpers
 
     def self.bootstrap
-      execute("vagrant up")
+      CommandExecutor.run!("vagrant up")
     end
 
     def self.fetch_config
-      execute("vagrant ssh-config")
+      CommandExecutor.run!("vagrant ssh-config")
     end
 
     def self.parse(lines)
@@ -29,15 +70,5 @@ def self.parse(lines)
       hosts << host
       hosts
     end
-
-    private
-
-    def self.execute(cmd)
-      Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
-        { :stdout => stdout.read.chomp, :stderr => stderr.read.chomp,
-          :exit_status => wait_thr.value.exitstatus }
-      end
-    end
-
   end
 end
