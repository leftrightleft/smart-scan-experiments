diff --git a/x-pack/lib/filters/geoip/database_manager.rb b/x-pack/lib/filters/geoip/database_manager.rb
index 457962bd675..53c784047e4 100644
--- a/x-pack/lib/filters/geoip/database_manager.rb
+++ b/x-pack/lib/filters/geoip/database_manager.rb
@@ -36,7 +36,7 @@ def initialize(geoip, database_path, database_type, vendor_path)
     @mode = database_path.nil? ? :online : :offline
     @mode = :disabled # This is a temporary change that turns off the database manager until it is ready for general availability.
     @database_type = database_type
-    @database_path = ::Dir.glob(::File.join(LogStash::Environment::LOGSTASH_HOME, "vendor", "**", "GeoLite2-#{database_type}.mmdb")).first
+    @database_path = patch_database_path(database_path)
 
     if @mode == :online
       logger.info "By not manually configuring a database path with `database =>`, you accepted and agreed MaxMind EULA. "\
@@ -115,7 +115,7 @@ def database_path
   # return a valid database path or default database path
   def patch_database_path(database_path)
     return database_path if file_exist?(database_path)
-    return database_path if database_path = get_file_path("#{DB_PREFIX}#{@database_type}.#{DB_EXT}") and file_exist?(database_path)
+    return database_path if database_path = ::Dir.glob(::File.join(LogStash::Environment::LOGSTASH_HOME, "vendor", "**", "GeoLite2-#{@database_type}.mmdb")).first and file_exist?(database_path)
     raise "You must specify 'database => ...' in your geoip filter (I looked for '#{database_path}')"
   end
 
diff --git a/x-pack/spec/filters/geoip/database_manager_spec.rb b/x-pack/spec/filters/geoip/database_manager_spec.rb
index a172657222b..3c7c273e378 100644
--- a/x-pack/spec/filters/geoip/database_manager_spec.rb
+++ b/x-pack/spec/filters/geoip/database_manager_spec.rb
@@ -33,7 +33,7 @@
 
       it "use CC license database as default" do
         path = db_manager.send(:patch_database_path, "")
-        expect(path).to eq(default_city_db_path)
+        expect(path).to eq(vendor_city_db_path)
       end
 
       it "failed when default database is missing" do
@@ -42,6 +42,28 @@
       end
     end
 
+    context "get database path" do
+      context "config static path" do
+        let(:db_manager) do
+          LogStash::Filters::Geoip::DatabaseManager.new(mock_geoip_plugin, default_asn_db_path, "ASN", get_vendor_path)
+        end
+
+        it "use input path" do
+          expect(db_manager.database_path).to eq(default_asn_db_path)
+        end
+      end
+
+      context "config nothing" do
+        let(:db_manager) do
+          LogStash::Filters::Geoip::DatabaseManager.new(mock_geoip_plugin, nil, "City", get_vendor_path)
+        end
+
+        it "use CC license database as default" do
+          expect(db_manager.database_path).to eq(vendor_city_db_path)
+        end
+      end
+    end
+
     context "md5" do
       it "return md5 if file exists" do
         str = db_manager.send(:md5, default_city_db_path)
@@ -224,5 +246,6 @@
         expect(filename).to match /#{default_city_db_name}/
       end
     end
+
   end
 end
\ No newline at end of file
diff --git a/x-pack/spec/filters/geoip/test_helper.rb b/x-pack/spec/filters/geoip/test_helper.rb
index a47d19a940d..7926dd3d932 100644
--- a/x-pack/spec/filters/geoip/test_helper.rb
+++ b/x-pack/spec/filters/geoip/test_helper.rb
@@ -18,6 +18,14 @@ def get_file_path(filename)
     ::File.join(get_data_dir, filename)
   end
 
+  def vendor_asn_db_path
+    ::Dir.glob(::File.join(LogStash::Environment::LOGSTASH_HOME, "vendor", "**", "GeoLite2-ASN.mmdb")).first
+  end
+
+  def vendor_city_db_path
+    ::Dir.glob(::File.join(LogStash::Environment::LOGSTASH_HOME, "vendor", "**", "GeoLite2-City.mmdb")).first
+  end
+
   def md5(file_path)
     ::File.exist?(file_path) ? Digest::MD5.hexdigest(::File.read(file_path)) : ''
   end
