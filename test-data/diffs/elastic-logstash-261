diff --git a/lib/logstash/filters/anonymize.rb b/lib/logstash/filters/anonymize.rb
index 31fcde8d55a..b5a156c3887 100644
--- a/lib/logstash/filters/anonymize.rb
+++ b/lib/logstash/filters/anonymize.rb
@@ -10,15 +10,27 @@ class LogStash::Filters::Anonymize < LogStash::Filters::Base
   config :fields, :validate => :array, :required => true
 
   # Hashing key
+  # When using MURMUR3 the key is ignored but must still be set.
+  # When using IPV4_NETWORK key is the subnet prefix lentgh
   config :key, :validate => :string, :required => true
 
-  # digest type
-  config :algorithm, :validate => ['SHA', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'MD4', 'MD5'], :required => true, :default => 'SHA1'
+  # digest/hash type
+  config :algorithm, :validate => ['SHA', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'MD4', 'MD5', "MURMUR3", "IPV4_NETWORK"], :required => true, :default => 'SHA1'
 
   public
   def register
-    # require any library
-    require 'openssl'
+    # require any library and set the anonymize function
+    case @algorithm
+    when "IPV4_NETWORK"
+      require "ipaddress"
+      class << self; alias_method :anonymize, :anonymize_ipv4_network; end
+    when "MURMUR3"
+      require "murmurhash3"
+      class << self; alias_method :anonymize, :anonymize_murmur3; end
+    else
+      require 'openssl'
+      class << self; alias_method :anonymize, :anonymize_openssl; end
+    end
   end # def register
 
   public
@@ -30,12 +42,29 @@ def filter(event)
   end # def filter
 
   private
-  def anonymize(data)
+  def anonymize_ipv4_network(ip_string)
+    warn "ipv4"
+    ip = IPAddress::IPv4.new(ip_string)
+    ip.prefix = @key
+    ip.network.to_s
+  end  
+
+  def anonymize_openssl(data)
+    warn "openssl"
     digest = algorithm()
     OpenSSL::HMAC.hexdigest(digest, @key, data)
   end
 
-  private
+  def anonymize_murmur3(value)
+    warn "murmur3"
+    case value
+    when Fixnum
+      MurmurHash3::V32.int_hash(value)
+    when String
+      MurmurHash3::V32.str_hash(value)
+    end
+  end
+
   def algorithm
  
    case @algorithm
@@ -59,5 +88,5 @@ def algorithm
         @logger.error("Unknown algorithm")
     end
   end
-
+      
 end # class LogStash::Filters::Anonymize
diff --git a/logstash.gemspec b/logstash.gemspec
index 5c2954831c3..ac4c5e9bc68 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -58,6 +58,8 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "geoip", [">= 1.1.0"]
   gem.add_runtime_dependency "beefcake", "0.3.7"
   gem.add_runtime_dependency "php-serialize" # For input drupal_dblog
+  gem.add_runtime_dependency "ipaddress"
+  gem.add_runtime_dependency "murmurhash3"
 
   if RUBY_PLATFORM == 'java'
     gem.platform = RUBY_PLATFORM
diff --git a/spec/filters/anonymize.rb b/spec/filters/anonymize.rb
index 1adfd9235c5..94fb06958f7 100644
--- a/spec/filters/anonymize.rb
+++ b/spec/filters/anonymize.rb
@@ -21,6 +21,40 @@
       insist { subject["clientip"] } == "0d01b2191194d261fa1a2e7c18a38d44953ab4e2"
     end
   end
+
+  describe "anonymize ipaddress with IPV4_NETWORK algorithm" do
+    # The logstash config goes here.
+    # At this time, only filters are supported.
+    config <<-CONFIG
+      filter {
+        anonymize {
+          fields => ["clientip"]
+          algorithm => "IPV4_NETWORK"
+          key => 24
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {"clientip" => "233.255.13.44"} do
+      insist { subject["clientip"] } == "233.255.13.0"
+    end
+  end
+
+  describe "anonymize string with MURMUR3 algorithm" do
+    config <<-CONFIG
+      filter { 
+        anonymize { 
+          fields => ["clientip"]
+          algorithm => "MURMUR3"
+          key => ""
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {"clientip" => "123.52.122.33"} do
+      insist { subject["clientip"] } == 1541804874
+    end
+  end
  
    describe "anonymize string with SHA1 alogrithm" do
     # The logstash config goes here.
