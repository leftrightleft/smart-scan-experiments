diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index 15b6c1a88e0..38bf629d4fa 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -1,3 +1,4 @@
 Contributors:
 * Brice Figureau (masterzen)
 * Vladimir Vuksan (vvuksan)
+* Alexandre Dulaunoy (adulau)
diff --git a/lib/logstash/filters/grep.rb b/lib/logstash/filters/grep.rb
index c7fea965757..00aac168c5e 100644
--- a/lib/logstash/filters/grep.rb
+++ b/lib/logstash/filters/grep.rb
@@ -1,6 +1,28 @@
 require "logstash/filters/base"
 require "logstash/namespace"
 
+# Grep filter.
+#
+# Useful for:
+# * Dropping events
+# * Tagging events
+# * Adding static fields
+#
+# Events not matched ar dropped. If 'negate' is set to true (defaults false), then
+# matching events are dropped.
+#
+# Config:
+# - grep:
+#   <type>:
+#     - match:
+#         <field>: <regexp>
+#       negate: true/false
+#       add_fields:
+#         <field>: <value>
+#       add_tags:
+#         - tag1
+#         - tag2
+#
 class LogStash::Filters::Grep < LogStash::Filters::Base
   public
   def initialize(config = {})
@@ -41,7 +63,7 @@ def filter(event)
       return
     end
 
-    @logger.debug(["Running grep filter", event, config])
+    @logger.debug(["Running grep filter", event.to_hash, config])
     matched = false
     config.each do |match|
       if ! match["match"]
@@ -55,9 +77,18 @@ def filter(event)
       match["match"].each do |field, re|
         next unless event[field]
 
-        event[field].each do |value|
-          next unless re.match(value)
-          @logger.debug("grep matched on field #{field}")
+        if event[field].empty? and match["negate"] == true
+          match_count += 1
+        end
+        (event[field].is_a?(Array) ? event[field] : [event[field]]).each do |value|
+          if match["negate"] == true
+            @logger.debug("want negate match")
+            next if re.match(value)
+            @logger.debug(["grep not-matched (negate requsted)", { field => value }])
+          else
+            next unless re.match(value)
+            @logger.debug(["grep matched", { field => value }])
+          end
           match_count += 1
           break
         end
@@ -81,6 +112,7 @@ def filter(event)
             @logger.debug("grep: adding tag #{tag}")
           end
         end # if match["add_tags"]
+
       else
         @logger.debug("match block failed " \
                       "(#{match_count}/#{match["match"].length} matches)")
diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index aebfc2031d5..fde344217a1 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -27,7 +27,13 @@ def initialize(url, type, config={}, &block)
   public
   def register
     @logger.info("Registering input #{@url}")
-    @amqp = AMQP.connect(:host => @url.host)
+    amqpsettings = {
+      :host => @url.host,
+      :port => (@url.port or 5672),
+    }
+    amqpsettings[:user] = @url.user if @url.user
+    amqpsettings[:pass] = @url.password if @url.password
+    @amqp = AMQP.connect(amqpsettings)
     @mq = MQ.new(@amqp)
     @target = nil
 
diff --git a/lib/logstash/inputs/stdin.rb b/lib/logstash/inputs/stdin.rb
new file mode 100644
index 00000000000..f2b85844c74
--- /dev/null
+++ b/lib/logstash/inputs/stdin.rb
@@ -0,0 +1,38 @@
+require "eventmachine-tail"
+require "logstash/inputs/base"
+require "logstash/namespace"
+require "socket" # for Socket.gethostname
+
+class LogStash::Inputs::Stdin < LogStash::Inputs::Base
+  public
+  def register
+    EventMachine::attach($stdin, InputHandler, self)
+    @url.host = Socket.gethostname
+  end # def register
+
+  public
+  def receive(event)
+    event = LogStash::Event.new({
+      "@message" => event,
+      "@type" => @type,
+      "@tags" => @tags.clone,
+    })
+    event.source = @url
+    @logger.debug(["Got event", event])
+    @callback.call(event)
+  end # def receive
+
+  class InputHandler < EventMachine::Connection
+    def initialize(obj)
+      @receiver = obj
+    end # def initialize
+
+    def receive_data(data)
+      @buffer ||= BufferedTokenizer.new
+      @buffer.extract(data).each do |line|
+        @receiver.receive(line)
+      end
+    end # def receive_data
+  end # class InputHandler
+
+end # class LogStash::Inputs::Stdin
diff --git a/lib/logstash/outputs/amqp.rb b/lib/logstash/outputs/amqp.rb
index 237dcca51ec..282a2b4b027 100644
--- a/lib/logstash/outputs/amqp.rb
+++ b/lib/logstash/outputs/amqp.rb
@@ -24,7 +24,13 @@ def initialize(url, config={}, &block)
   public
   def register
     @logger.info("Registering output #{@url}")
-    @amqp = AMQP.connect(:host => @url.host, :port => (@url.port or 5672))
+    amqpsettings = {
+      :host => @url.host,
+      :port => (@url.port or 5672),
+    }
+    amqpsettings[:user] = @url.user if @url.user
+    amqpsettings[:pass] = @url.password if @url.password
+    @amqp = AMQP.connect(amqpsettings)
     @mq = MQ.new(@amqp)
     @target = nil
 
diff --git a/lib/logstash/outputs/elasticsearch.rb b/lib/logstash/outputs/elasticsearch.rb
index 81db446f9fa..3132bfa2f52 100644
--- a/lib/logstash/outputs/elasticsearch.rb
+++ b/lib/logstash/outputs/elasticsearch.rb
@@ -62,7 +62,8 @@ def ready(params)
       @callback = self.method(:receive_http)
     when "river"
       params["port"] ||= 5672
-      mq_url = URI::parse("amqp://#{params["host"]}:#{params["port"]}/queue/#{params["queue"]}?durable=1")
+      auth = "#{params["user"] or "guest"}:#{params["pass"] or "guest"}"
+      mq_url = URI::parse("amqp://#{auth}@#{params["host"]}:#{params["port"]}/queue/#{params["queue"]}?durable=1")
       @mq = LogStash::Outputs::Amqp.new(mq_url.to_s)
       @mq.register
       @callback = self.method(:receive_river)
@@ -92,12 +93,13 @@ def ready(params)
     else raise "unknown elasticsearch method #{params["method"].inspect}"
     end
 
-    @callback.call(LogStash::Event.new({
+    receive(LogStash::Event.new({
       "@source" => "@logstashinit",
       "@type" => "@none",
+      "@message" => "Starting logstash output to elasticsearch",
       "@fields" => {
         "HOSTNAME" => Socket.gethostname
-      }
+      },
     }))
 
     pending = @pending
diff --git a/lib/logstash/ruby_fixes.rb b/lib/logstash/ruby_fixes.rb
index c511f7c0826..da6b700fc71 100644
--- a/lib/logstash/ruby_fixes.rb
+++ b/lib/logstash/ruby_fixes.rb
@@ -8,3 +8,5 @@ def start_with?(str)
     end
   end
 end
+
+require "logstash/rubyfixes/regexp_union_takes_array"
diff --git a/lib/logstash/rubyfixes/regexp_union_takes_array.rb b/lib/logstash/rubyfixes/regexp_union_takes_array.rb
new file mode 100644
index 00000000000..412a5b6e595
--- /dev/null
+++ b/lib/logstash/rubyfixes/regexp_union_takes_array.rb
@@ -0,0 +1,27 @@
+# Check if Regexp.union takes an array. If not, monkeypatch it.
+# This feature was added in Ruby 1.8.7 and is required by 
+# Rack 1.2.1, breaking ruby <= 1.8.6
+
+needs_fix = false
+begin
+  Regexp.union(["a", "b"])
+rescue TypeError => e
+  if e.message == "can't convert Array into String"
+    needs_fix = true
+  end
+end
+
+if needs_fix
+  class Regexp
+    class << self
+      alias_method :orig_regexp_union, :union
+      public
+      def union(*args)
+        if args[0].is_a?(Array) && args.size == 1
+          return orig_regexp_union(*args[0])
+        end
+        return orig_regexp_union(*args)
+      end # def union
+    end # class << self 
+  end # class Regexp
+end # if needs_fix
diff --git a/lib/logstash/web/server.rb b/lib/logstash/web/server.rb
index ab3b58e9090..850e08385cb 100755
--- a/lib/logstash/web/server.rb
+++ b/lib/logstash/web/server.rb
@@ -63,7 +63,7 @@ class LogStash::Web::Server < Sinatra::Base
     # have javascript enabled, we need to show the results in
     # case a user doesn't have javascript.
     if params[:q] and params[:q] != ""
-      elasticsearch.search(params) do |@results|
+      elasticsearch.search(params) do |results| @results=results
         @hits = (@results["hits"]["hits"] rescue [])
         begin
           result_callback.call
@@ -82,7 +82,7 @@ class LogStash::Web::Server < Sinatra::Base
     headers({"Content-Type" => "text/html" })
     count = params["count"] = (params["count"] or 50).to_i
     offset = params["offset"] = (params["offset"] or 0).to_i
-    elasticsearch.search(params) do |@results|
+    elasticsearch.search(params) do |results| @results=results
       #p instance_variables
       if @results.include?("error")
         body haml :"search/error", :layout => !request.xhr?
diff --git a/lib/logstash/web/views/search/ajax.haml b/lib/logstash/web/views/search/ajax.haml
index 9a9d07aa29f..51d2ddb39f4 100644
--- a/lib/logstash/web/views/search/ajax.haml
+++ b/lib/logstash/web/views/search/ajax.haml
@@ -31,7 +31,10 @@
           last
   - if @hits.length == 0 
     - if !params[:q]
-      %h3#querystatus No query given. How about <a href="?q=* @timestamp:[#{(Time.now - 7*24*60*60).strftime("%Y-%m-%d")} TO #{(Time.now + 24*60*60).strftime("%Y-%m-%d")}]" class="querychanger">this?</a>
+      / We default to a '+2 days' in the future  to capture 'today at 00:00'
+      / plus tomorrow, inclusive, in case you are 23 hours behind the international
+      / dateline.
+      %h3#querystatus No query given. How about <a href="?q=* @timestamp:[#{(Time.now - 7*24*60*60).strftime("%Y-%m-%d")} TO #{(Time.now + 2*24*60*60).strftime("%Y-%m-%d")}]" class="querychanger">this?</a>
     - else
       %h3#querystatus No results for query '#{params[:q]}' 
   - else
diff --git a/test/logstash/filters/test_date.rb b/test/logstash/filters/test_date.rb
index bc0f2419e68..4a5c0e8b86f 100644
--- a/test/logstash/filters/test_date.rb
+++ b/test/logstash/filters/test_date.rb
@@ -1,4 +1,6 @@
-$:.unshift File.dirname(__FILE__) + "/../../lib"
+require "rubygems"
+$:.unshift File.dirname(__FILE__) + "/../../../lib"
+$:.unshift File.dirname(__FILE__) + "/../../"
 
 require "test/unit"
 require "logstash"
diff --git a/test/logstash/filters/test_grep.rb b/test/logstash/filters/test_grep.rb
index 8bd3abe0934..ef2798cfe0a 100644
--- a/test/logstash/filters/test_grep.rb
+++ b/test/logstash/filters/test_grep.rb
@@ -1,4 +1,6 @@
+require "rubygems"
 $:.unshift File.dirname(__FILE__) + "/../../../lib"
+$:.unshift File.dirname(__FILE__) + "/../../"
 
 require "test/unit"
 require "logstash"
diff --git a/test/logstash/filters/test_multiline.rb b/test/logstash/filters/test_multiline.rb
index 460b59c8288..df063dc62fd 100644
--- a/test/logstash/filters/test_multiline.rb
+++ b/test/logstash/filters/test_multiline.rb
@@ -1,3 +1,6 @@
+require "rubygems"
+$:.unshift File.dirname(__FILE__) + "/../../../lib"
+$:.unshift File.dirname(__FILE__) + "/../../"
 require "test/unit"
 require "logstash"
 require "logstash/filters"
diff --git a/test/logstash/inputs/test_stomp.rb b/test/logstash/inputs/test_stomp.rb
index f787b88843d..c507c556f8f 100644
--- a/test/logstash/inputs/test_stomp.rb
+++ b/test/logstash/inputs/test_stomp.rb
@@ -1,3 +1,4 @@
+require "rubygems"
 $:.unshift File.dirname(__FILE__) + "/../../../lib"
 $:.unshift File.dirname(__FILE__) + "/../../"
 
diff --git a/test/logstash/inputs/test_syslog.rb b/test/logstash/inputs/test_syslog.rb
index 5ca9917d2e9..7c9b5259afa 100644
--- a/test/logstash/inputs/test_syslog.rb
+++ b/test/logstash/inputs/test_syslog.rb
@@ -1,4 +1,4 @@
-
+require "rubygems"
 $:.unshift File.dirname(__FILE__) + "/../../../lib"
 $:.unshift File.dirname(__FILE__) + "/../../"
 
diff --git a/test/logstash/test_syntax.rb b/test/logstash/test_syntax.rb
index f3fc1f5f3db..f1cbef7cd66 100644
--- a/test/logstash/test_syntax.rb
+++ b/test/logstash/test_syntax.rb
@@ -1,3 +1,4 @@
+require "rubygems"
 require "test/unit"
 
 class SyntaxCheckTest < Test::Unit::TestCase
diff --git a/test/logstash/testcase.rb b/test/logstash/testcase.rb
index cf6374c173b..45ac022db77 100644
--- a/test/logstash/testcase.rb
+++ b/test/logstash/testcase.rb
@@ -1,6 +1,6 @@
-
-require 'rubygems'
-$:.unshift File.dirname(__FILE__) + "/../../lib"
+require "rubygems"
+$:.unshift File.dirname(__FILE__) + "/../../../lib"
+$:.unshift File.dirname(__FILE__) + "/../../"
 
 require "test/unit"
 require "socket"
diff --git a/test/run.rb b/test/run.rb
index c9c5d82b8df..970e1268e49 100644
--- a/test/run.rb
+++ b/test/run.rb
@@ -1,6 +1,9 @@
 require "rubygems"
 $:.unshift "#{File.dirname(__FILE__)}/../lib/"
 
+# Fix for Ruby 1.9.x
+$:.unshift "#{File.dirname(__FILE__)}"
+
 require "logstash/test_syntax"
 require "logstash/filters/test_date"
 require "logstash/filters/test_grep"
