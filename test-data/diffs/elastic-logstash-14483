diff --git a/docs/static/plugin-generator.asciidoc b/docs/static/plugin-generator.asciidoc
index 20454384681..742bc8ef0c7 100644
--- a/docs/static/plugin-generator.asciidoc
+++ b/docs/static/plugin-generator.asciidoc
@@ -4,6 +4,7 @@
 You can create your own Logstash plugin in seconds! The generate subcommand of `bin/logstash-plugin` creates the foundation 
 for a new Logstash plugin with templatized files. 
 It creates the correct directory structure, gemspec files, and dependencies so you can start adding custom code to process data with Logstash.
+The tool let you choose if implement a plugin using the Ruby template (the defult choice) or a native Java plugin.
 
 **Example Usage**
 
@@ -13,6 +14,7 @@ bin/logstash-plugin generate --type input --name xkcd --path ~/ws/elastic/plugin
 -------------------------------------------
 
 * `--type`: Type of plugin - input, filter, output, or codec
+* `--language`: Implementation language of the plugin - Ruby or Java
 * `--name`: Name for the new plugin
 * `--path`: Directory path where the new plugin structure will be created. 
 If you don't specify a directory, the plugin is created in the current directory.
diff --git a/lib/pluginmanager/generate.rb b/lib/pluginmanager/generate.rb
index 5c81bcd71e8..6eec0e27874 100644
--- a/lib/pluginmanager/generate.rb
+++ b/lib/pluginmanager/generate.rb
@@ -25,14 +25,21 @@
 class LogStash::PluginManager::Generate < LogStash::PluginManager::Command
 
   TYPES = [ "input", "filter", "output", "codec" ]
+  LANGUAGES = ["ruby", "java"]
 
   option "--type", "TYPE", "Type of the plugin {input, filter, codec, output}s", :required => true
+  option "--language", "LANGUAGE", "Implementation language of the plugin (Ruby, Java)", :default => "ruby"
   option "--name", "PLUGIN", "Name of the new plugin", :required => true
   option "--path", "PATH", "Location where the plugin skeleton will be created", :default => Dir.pwd
 
   def execute
     validate_params
-    source = File.join(File.dirname(__FILE__), "templates", "#{type}-plugin")
+    source = File.join(File.dirname(__FILE__), "templates", "#{language.downcase}", "#{type}-plugin")
+    unless Dir.exist?(source)
+      puts "ERROR: Template project for #{language.downcase} #{type} plugin is not yet available"
+      return
+    end
+
     @target_path = File.join(path, full_plugin_name)
     FileUtils.mkdir(@target_path)
     puts " Creating #{@target_path}"
@@ -50,6 +57,7 @@ def execute
 
   def validate_params
     raise(ArgumentError, "should be one of: input, filter, codec or output") unless TYPES.include?(type)
+    raise(ArgumentError, "should be one of: Ruby or Java") unless LANGUAGES.include?(language.downcase)
   end
 
   def create_scaffold(source, target)
@@ -68,7 +76,16 @@ def transform_r(source, target)
       else
         # copy the new file, in case of being an .erb file should render first
         if source_entry.end_with?("erb")
-          target_entry = target_entry.gsub(/.erb$/,"").gsub("example", name)
+          context = LogStash::PluginManager::RenderContext.new(options)
+          if language.downcase == "ruby"
+            target_entry = target_entry.gsub(/.erb$/,"").gsub("example", name)
+          elsif language.downcase == "java"
+            example_filename = "Java#{type.capitalize}Example"
+            target_entry = target_entry.gsub(/.erb$/,"").gsub(example_filename, context.classify(name))
+          else
+            raise(ArgumentError, "Can't recognize language #{language}")
+          end
+
           File.open(target_entry, "w") { |f| f.write(render(source_entry)) }
         else
           FileUtils.cp(source_entry, target_entry)
@@ -89,6 +106,7 @@ def options
     git_data = get_git_info
     @options ||= {
       :plugin_name => name,
+      :plugin_type => type,
       :author => git_data.author,
       :email  => git_data.email,
       :min_version => "2.0",
diff --git a/lib/pluginmanager/templates/codec-plugin/.ruby-version b/lib/pluginmanager/templates/codec-plugin/.ruby-version
deleted file mode 120000
index 67c664308db..00000000000
--- a/lib/pluginmanager/templates/codec-plugin/.ruby-version
+++ /dev/null
@@ -1 +0,0 @@
-../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/filter-plugin/.ruby-version b/lib/pluginmanager/templates/filter-plugin/.ruby-version
deleted file mode 120000
index 67c664308db..00000000000
--- a/lib/pluginmanager/templates/filter-plugin/.ruby-version
+++ /dev/null
@@ -1 +0,0 @@
-../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/input-plugin/.ruby-version b/lib/pluginmanager/templates/input-plugin/.ruby-version
deleted file mode 120000
index 67c664308db..00000000000
--- a/lib/pluginmanager/templates/input-plugin/.ruby-version
+++ /dev/null
@@ -1 +0,0 @@
-../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/java/input-plugin/CHANGELOG.md b/lib/pluginmanager/templates/java/input-plugin/CHANGELOG.md
new file mode 100644
index 00000000000..879729fe9cc
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/CHANGELOG.md
@@ -0,0 +1,22 @@
+## 1.0.2
+- Updates to improve compatibility with latest Logstash versions
+ - Update gradle version to enable JDK17 usage
+ - Fix reference to logstash-core.jar
+ - Update dependencies
+
+## 1.0.1
+- Fix gradle incompatibility issue with Logstash 7.9 and above.
+
+## 1.0.0
+- Updated for GA release of native support for Java plugins. Includes:
+  - Improved Gradle task wrappers
+  - Removal of auto-generated Ruby source files 
+
+## 0.2.0
+- Updated for beta version of native support for Java plugins. Includes:
+  - Gradle task wrappers
+  - Updated plugin API
+  - Full feature parity with Ruby plugins
+
+## 0.0.1
+- Initial version for experimental v0 of native support for Java plugins.
diff --git a/lib/pluginmanager/templates/java/input-plugin/LICENSE b/lib/pluginmanager/templates/java/input-plugin/LICENSE
new file mode 100644
index 00000000000..a80a3fd5323
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright 2020 Elastic and contributors
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/lib/pluginmanager/templates/java/input-plugin/README.md b/lib/pluginmanager/templates/java/input-plugin/README.md
new file mode 100644
index 00000000000..9cf09ead69e
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/README.md
@@ -0,0 +1,9 @@
+# Logstash Java Plugin
+
+[![Travis Build Status](https://travis-ci.com/logstash-plugins/logstash-filter-java_filter_example.svg)](https://travis-ci.com/logstash-plugins/logstash-filter-java_filter_example)
+
+This is a Java plugin for [Logstash](https://github.com/elastic/logstash).
+
+It is fully free and fully open source. The license is Apache 2.0, meaning you are free to use it however you want.
+
+The documentation for Logstash Java plugins is available [here](https://www.elastic.co/guide/en/logstash/6.7/contributing-java-plugin.html).
diff --git a/lib/pluginmanager/templates/java/input-plugin/VERSION b/lib/pluginmanager/templates/java/input-plugin/VERSION
new file mode 100644
index 00000000000..6d7de6e6abe
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/VERSION
@@ -0,0 +1 @@
+1.0.2
diff --git a/lib/pluginmanager/templates/java/input-plugin/build.gradle.erb b/lib/pluginmanager/templates/java/input-plugin/build.gradle.erb
new file mode 100644
index 00000000000..07515aff01b
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/build.gradle.erb
@@ -0,0 +1,108 @@
+import java.nio.file.Files
+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
+
+apply plugin: 'java'
+apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"
+
+// ===========================================================================
+// plugin info
+// ===========================================================================
+group                      'org.logstashplugins' // must match the package of the main plugin class
+version                    "${file("VERSION").text.trim()}" // read from required VERSION file
+description                = "Example Java input <%= classify(plugin_name) %>"
+pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
+pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
+pluginInfo.authors         = ['<%= author %>']
+pluginInfo.email           = ['<%= email %>']
+pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
+pluginInfo.pluginType      = "<%= plugin_type %>"
+pluginInfo.pluginClass     = "<%= classify(plugin_name) %>"
+pluginInfo.pluginName      = "<%= plugin_name %>" // must match the @LogstashPlugin annotation in the main plugin class
+// ===========================================================================
+
+sourceCompatibility = 1.8
+targetCompatibility = 1.8
+
+buildscript {
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
+    }
+}
+
+repositories {
+    mavenCentral()
+}
+
+apply plugin: 'com.github.johnrengelman.shadow'
+
+shadowJar {
+    archiveClassifier = null
+}
+
+dependencies {
+    implementation 'org.apache.commons:commons-lang3:3.7'
+    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0' // provided by Logstash
+    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.0' // provided by Logstash
+ 
+    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "**/lib/jars/logstash-core.jar")
+
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.apache.logging.log4j:log4j-api:2.17.0' // provided by Logstash
+    testImplementation 'org.apache.logging.log4j:log4j-core:2.17.0' // provided by Logstash
+    testImplementation 'org.jruby:jruby-complete:9.2.20.1'
+}
+
+clean {
+    delete "${projectDir}/Gemfile"
+    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
+    delete "${projectDir}/lib/"
+    delete "${projectDir}/vendor/"
+    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
+        delete filename
+    }
+}
+
+tasks.withType(JavaCompile) {
+    options.encoding = 'UTF-8'
+}
+
+tasks.register("vendor"){
+    dependsOn shadowJar
+    doLast {
+        String vendorPathPrefix = "vendor/jar-dependencies"
+        String projectGroupPath = project.group.replaceAll('\\.', '/')
+        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
+        projectJarFile.mkdirs()
+        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
+        validatePluginJar(projectJarFile, project.group)
+    }
+}
+
+tasks.register("generateRubySupportFiles") {
+    doLast {
+        generateRubySupportFilesForPlugin(project.description, project.group, version)
+    }
+}
+
+tasks.register("removeObsoleteJars") {
+    doLast {
+        new FileNameFinder().getFileNames(
+                projectDir.toString(),
+                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
+                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
+            delete f
+        }
+    }
+}
+
+tasks.register("gem"){
+    dependsOn = [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]
+    doLast {
+        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
+    }
+}
diff --git a/lib/pluginmanager/templates/input-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/java/input-plugin/docs/index.asciidoc
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/docs/index.asciidoc
rename to lib/pluginmanager/templates/java/input-plugin/docs/index.asciidoc
diff --git a/lib/pluginmanager/templates/java/input-plugin/gradle/wrapper/gradle-wrapper.properties b/lib/pluginmanager/templates/java/input-plugin/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000000..aa991fceae6
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/lib/pluginmanager/templates/java/input-plugin/gradlew b/lib/pluginmanager/templates/java/input-plugin/gradlew
new file mode 100755
index 00000000000..fbd7c515832
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/gradlew
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
diff --git a/lib/pluginmanager/templates/java/input-plugin/gradlew.bat b/lib/pluginmanager/templates/java/input-plugin/gradlew.bat
new file mode 100644
index 00000000000..a9f778a7a96
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/gradlew.bat
@@ -0,0 +1,104 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/lib/pluginmanager/templates/java/input-plugin/src/main/java/org/logstashplugins/JavaInputExample.java.erb b/lib/pluginmanager/templates/java/input-plugin/src/main/java/org/logstashplugins/JavaInputExample.java.erb
new file mode 100644
index 00000000000..43ce89c4d9e
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/src/main/java/org/logstashplugins/JavaInputExample.java.erb
@@ -0,0 +1,86 @@
+package org.logstashplugins;
+
+import co.elastic.logstash.api.Configuration;
+import co.elastic.logstash.api.Context;
+import co.elastic.logstash.api.Input;
+import co.elastic.logstash.api.LogstashPlugin;
+import co.elastic.logstash.api.PluginConfigSpec;
+import org.apache.commons.lang3.StringUtils;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Map;
+import java.util.concurrent.CountDownLatch;
+import java.util.function.Consumer;
+
+// class name must match plugin name
+@LogstashPlugin(name="<%= plugin_name %>")
+public class <%= classify(plugin_name) %> implements Input {
+
+    public static final PluginConfigSpec<Long> EVENT_COUNT_CONFIG =
+            PluginConfigSpec.numSetting("count", 3);
+
+    public static final PluginConfigSpec<String> PREFIX_CONFIG =
+            PluginConfigSpec.stringSetting("prefix", "message");
+
+    private String id;
+    private long count;
+    private String prefix;
+    private final CountDownLatch done = new CountDownLatch(1);
+    private volatile boolean stopped;
+
+    // all plugins must provide a constructor that accepts id, Configuration, and Context
+    public <%= classify(plugin_name) %>(String id, Configuration config, Context context) {
+        // constructors should validate configuration options
+        this.id = id;
+        count = config.get(EVENT_COUNT_CONFIG);
+        prefix = config.get(PREFIX_CONFIG);
+    }
+
+    @Override
+    public void start(Consumer<Map<String, Object>> consumer) {
+
+        // The start method should push Map<String, Object> instances to the supplied QueueWriter
+        // instance. Those will be converted to Event instances later in the Logstash event
+        // processing pipeline.
+        //
+        // Inputs that operate on unbounded streams of data or that poll indefinitely for new
+        // events should loop indefinitely until they receive a stop request. Inputs that produce
+        // a finite sequence of events should loop until that sequence is exhausted or until they
+        // receive a stop request, whichever comes first.
+
+        int eventCount = 0;
+        try {
+            while (!stopped && eventCount < count) {
+                eventCount++;
+                consumer.accept(Collections.singletonMap("message",
+                        prefix + " " + StringUtils.center(eventCount + " of " + count, 20)));
+            }
+        } finally {
+            stopped = true;
+            done.countDown();
+        }
+    }
+
+    @Override
+    public void stop() {
+        stopped = true; // set flag to request cooperative stop of input
+    }
+
+    @Override
+    public void awaitStop() throws InterruptedException {
+        done.await(); // blocks until input has stopped
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        // should return a list of all configuration options for this plugin
+        return Arrays.asList(EVENT_COUNT_CONFIG, PREFIX_CONFIG);
+    }
+
+    @Override
+    public String getId() {
+        return this.id;
+    }
+}
diff --git a/lib/pluginmanager/templates/java/input-plugin/src/test/java/org/logstashplugins/JavaInputExampleTest.java.erb b/lib/pluginmanager/templates/java/input-plugin/src/test/java/org/logstashplugins/JavaInputExampleTest.java.erb
new file mode 100644
index 00000000000..c193f886640
--- /dev/null
+++ b/lib/pluginmanager/templates/java/input-plugin/src/test/java/org/logstashplugins/JavaInputExampleTest.java.erb
@@ -0,0 +1,53 @@
+package org.logstashplugins;
+
+import co.elastic.logstash.api.Configuration;
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Assert;
+import org.junit.Test;
+import org.logstash.plugins.ConfigurationImpl;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
+
+public class <%= classify(plugin_name) %>Test {
+
+    @Test
+    public void test<%= classify(plugin_name) %>() {
+        String prefix = "This is message";
+        long eventCount = 5;
+        Map<String, Object> configValues = new HashMap<>();
+        configValues.put(<%= classify(plugin_name) %>.PREFIX_CONFIG.name(), prefix);
+        configValues.put(<%= classify(plugin_name) %>.EVENT_COUNT_CONFIG.name(), eventCount);
+        Configuration config = new ConfigurationImpl(configValues);
+        <%= classify(plugin_name) %> input = new <%= classify(plugin_name) %>("test-id", config, null);
+        TestConsumer testConsumer = new TestConsumer();
+        input.start(testConsumer);
+
+        List<Map<String, Object>> events = testConsumer.getEvents();
+        Assert.assertEquals(eventCount, events.size());
+        for (int k = 1; k <= events.size(); k++) {
+            Assert.assertEquals(prefix + " " + StringUtils.center(k + " of " + eventCount, 20),
+                    events.get(k - 1).get("message"));
+        }
+    }
+
+    private static class TestConsumer implements Consumer<Map<String, Object>> {
+
+        private List<Map<String, Object>> events = new ArrayList<>();
+
+        @Override
+        public void accept(Map<String, Object> event) {
+            synchronized (this) {
+                events.add(event);
+            }
+        }
+
+        public List<Map<String, Object>> getEvents() {
+            return events;
+        }
+    }
+
+}
diff --git a/lib/pluginmanager/templates/output-plugin/.ruby-version b/lib/pluginmanager/templates/output-plugin/.ruby-version
deleted file mode 120000
index 67c664308db..00000000000
--- a/lib/pluginmanager/templates/output-plugin/.ruby-version
+++ /dev/null
@@ -1 +0,0 @@
-../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/ruby/codec-plugin/.ruby-version b/lib/pluginmanager/templates/ruby/codec-plugin/.ruby-version
new file mode 120000
index 00000000000..8316c50bf41
--- /dev/null
+++ b/lib/pluginmanager/templates/ruby/codec-plugin/.ruby-version
@@ -0,0 +1 @@
+../../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/codec-plugin/CHANGELOG.md b/lib/pluginmanager/templates/ruby/codec-plugin/CHANGELOG.md
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/CHANGELOG.md
rename to lib/pluginmanager/templates/ruby/codec-plugin/CHANGELOG.md
diff --git a/lib/pluginmanager/templates/codec-plugin/CONTRIBUTORS.erb b/lib/pluginmanager/templates/ruby/codec-plugin/CONTRIBUTORS.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/CONTRIBUTORS.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/CONTRIBUTORS.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/DEVELOPER.md.erb b/lib/pluginmanager/templates/ruby/codec-plugin/DEVELOPER.md.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/DEVELOPER.md.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/DEVELOPER.md.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/Gemfile.erb b/lib/pluginmanager/templates/ruby/codec-plugin/Gemfile.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/Gemfile.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/Gemfile.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/LICENSE b/lib/pluginmanager/templates/ruby/codec-plugin/LICENSE
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/LICENSE
rename to lib/pluginmanager/templates/ruby/codec-plugin/LICENSE
diff --git a/lib/pluginmanager/templates/codec-plugin/README.md b/lib/pluginmanager/templates/ruby/codec-plugin/README.md
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/README.md
rename to lib/pluginmanager/templates/ruby/codec-plugin/README.md
diff --git a/lib/pluginmanager/templates/codec-plugin/Rakefile b/lib/pluginmanager/templates/ruby/codec-plugin/Rakefile
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/Rakefile
rename to lib/pluginmanager/templates/ruby/codec-plugin/Rakefile
diff --git a/lib/pluginmanager/templates/codec-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/ruby/codec-plugin/docs/index.asciidoc
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/docs/index.asciidoc
rename to lib/pluginmanager/templates/ruby/codec-plugin/docs/index.asciidoc
diff --git a/lib/pluginmanager/templates/codec-plugin/lib/logstash/codecs/example.rb.erb b/lib/pluginmanager/templates/ruby/codec-plugin/lib/logstash/codecs/example.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/lib/logstash/codecs/example.rb.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/lib/logstash/codecs/example.rb.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/logstash-codec-example.gemspec.erb b/lib/pluginmanager/templates/ruby/codec-plugin/logstash-codec-example.gemspec.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/logstash-codec-example.gemspec.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/logstash-codec-example.gemspec.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/spec/codecs/example_spec.rb.erb b/lib/pluginmanager/templates/ruby/codec-plugin/spec/codecs/example_spec.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/spec/codecs/example_spec.rb.erb
rename to lib/pluginmanager/templates/ruby/codec-plugin/spec/codecs/example_spec.rb.erb
diff --git a/lib/pluginmanager/templates/codec-plugin/spec/spec_helper.rb b/lib/pluginmanager/templates/ruby/codec-plugin/spec/spec_helper.rb
similarity index 100%
rename from lib/pluginmanager/templates/codec-plugin/spec/spec_helper.rb
rename to lib/pluginmanager/templates/ruby/codec-plugin/spec/spec_helper.rb
diff --git a/lib/pluginmanager/templates/ruby/filter-plugin/.ruby-version b/lib/pluginmanager/templates/ruby/filter-plugin/.ruby-version
new file mode 120000
index 00000000000..8316c50bf41
--- /dev/null
+++ b/lib/pluginmanager/templates/ruby/filter-plugin/.ruby-version
@@ -0,0 +1 @@
+../../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/filter-plugin/CHANGELOG.md b/lib/pluginmanager/templates/ruby/filter-plugin/CHANGELOG.md
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/CHANGELOG.md
rename to lib/pluginmanager/templates/ruby/filter-plugin/CHANGELOG.md
diff --git a/lib/pluginmanager/templates/filter-plugin/CONTRIBUTORS.erb b/lib/pluginmanager/templates/ruby/filter-plugin/CONTRIBUTORS.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/CONTRIBUTORS.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/CONTRIBUTORS.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/DEVELOPER.md.erb b/lib/pluginmanager/templates/ruby/filter-plugin/DEVELOPER.md.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/DEVELOPER.md.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/DEVELOPER.md.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/Gemfile.erb b/lib/pluginmanager/templates/ruby/filter-plugin/Gemfile.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/Gemfile.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/Gemfile.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/LICENSE b/lib/pluginmanager/templates/ruby/filter-plugin/LICENSE
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/LICENSE
rename to lib/pluginmanager/templates/ruby/filter-plugin/LICENSE
diff --git a/lib/pluginmanager/templates/filter-plugin/README.md b/lib/pluginmanager/templates/ruby/filter-plugin/README.md
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/README.md
rename to lib/pluginmanager/templates/ruby/filter-plugin/README.md
diff --git a/lib/pluginmanager/templates/filter-plugin/Rakefile b/lib/pluginmanager/templates/ruby/filter-plugin/Rakefile
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/Rakefile
rename to lib/pluginmanager/templates/ruby/filter-plugin/Rakefile
diff --git a/lib/pluginmanager/templates/filter-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/ruby/filter-plugin/docs/index.asciidoc
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/docs/index.asciidoc
rename to lib/pluginmanager/templates/ruby/filter-plugin/docs/index.asciidoc
diff --git a/lib/pluginmanager/templates/filter-plugin/lib/logstash/filters/example.rb.erb b/lib/pluginmanager/templates/ruby/filter-plugin/lib/logstash/filters/example.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/lib/logstash/filters/example.rb.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/lib/logstash/filters/example.rb.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/logstash-filter-example.gemspec.erb b/lib/pluginmanager/templates/ruby/filter-plugin/logstash-filter-example.gemspec.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/logstash-filter-example.gemspec.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/logstash-filter-example.gemspec.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/spec/filters/example_spec.rb.erb b/lib/pluginmanager/templates/ruby/filter-plugin/spec/filters/example_spec.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/spec/filters/example_spec.rb.erb
rename to lib/pluginmanager/templates/ruby/filter-plugin/spec/filters/example_spec.rb.erb
diff --git a/lib/pluginmanager/templates/filter-plugin/spec/spec_helper.rb b/lib/pluginmanager/templates/ruby/filter-plugin/spec/spec_helper.rb
similarity index 100%
rename from lib/pluginmanager/templates/filter-plugin/spec/spec_helper.rb
rename to lib/pluginmanager/templates/ruby/filter-plugin/spec/spec_helper.rb
diff --git a/lib/pluginmanager/templates/ruby/input-plugin/.ruby-version b/lib/pluginmanager/templates/ruby/input-plugin/.ruby-version
new file mode 120000
index 00000000000..8316c50bf41
--- /dev/null
+++ b/lib/pluginmanager/templates/ruby/input-plugin/.ruby-version
@@ -0,0 +1 @@
+../../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/input-plugin/CHANGELOG.md b/lib/pluginmanager/templates/ruby/input-plugin/CHANGELOG.md
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/CHANGELOG.md
rename to lib/pluginmanager/templates/ruby/input-plugin/CHANGELOG.md
diff --git a/lib/pluginmanager/templates/input-plugin/CONTRIBUTORS.erb b/lib/pluginmanager/templates/ruby/input-plugin/CONTRIBUTORS.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/CONTRIBUTORS.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/CONTRIBUTORS.erb
diff --git a/lib/pluginmanager/templates/input-plugin/DEVELOPER.md.erb b/lib/pluginmanager/templates/ruby/input-plugin/DEVELOPER.md.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/DEVELOPER.md.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/DEVELOPER.md.erb
diff --git a/lib/pluginmanager/templates/input-plugin/Gemfile.erb b/lib/pluginmanager/templates/ruby/input-plugin/Gemfile.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/Gemfile.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/Gemfile.erb
diff --git a/lib/pluginmanager/templates/input-plugin/LICENSE b/lib/pluginmanager/templates/ruby/input-plugin/LICENSE
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/LICENSE
rename to lib/pluginmanager/templates/ruby/input-plugin/LICENSE
diff --git a/lib/pluginmanager/templates/input-plugin/README.md b/lib/pluginmanager/templates/ruby/input-plugin/README.md
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/README.md
rename to lib/pluginmanager/templates/ruby/input-plugin/README.md
diff --git a/lib/pluginmanager/templates/input-plugin/Rakefile b/lib/pluginmanager/templates/ruby/input-plugin/Rakefile
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/Rakefile
rename to lib/pluginmanager/templates/ruby/input-plugin/Rakefile
diff --git a/lib/pluginmanager/templates/ruby/input-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/ruby/input-plugin/docs/index.asciidoc
new file mode 100644
index 00000000000..cc47ac158af
--- /dev/null
+++ b/lib/pluginmanager/templates/ruby/input-plugin/docs/index.asciidoc
@@ -0,0 +1,117 @@
+:plugin: example
+:type: input
+:default_codec: plain
+// Update header with plugin name and default codec
+
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+
+[id="plugins-{type}s-{plugin}"]
+
+=== Example input plugin
+
+include::{include_path}/plugin_header.asciidoc[]
+
+==== Description
+
+Add plugin description here
+
+// Format anchors and links to support generated ids for versioning
+// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
+// Sample link: <<plugins-{type}s-{plugin}-setting_name>>
+
+[id="plugins-{type}s-{plugin}-options"]
+==== Example Input Configuration Options
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-a_setting_name>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-another_setting_name>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-setting_name_3>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-setting_name_4>> |<<number,number>>|No
+| <<plugins-{type}s-{plugin}-setting_name_5>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-setting_name_6>> |<<bytes,bytes>>|No
+| <<plugins-{type}s-{plugin}-setting_name_7>> |<<path,path>>|No
+| <<plugins-{type}s-{plugin}-setting_name_8>> |<<password,password>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-a_setting_name"]
+===== `a_setting_name` 
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-another_setting_name"]
+===== `another_setting_name` 
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_3"]
+===== `setting_name_3` 
+
+  * Value type is <<string,string>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_4"]
+===== `setting_name_4` 
+
+  * Value type is <<number,number>>
+  * Default value is `0`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_5"]
+===== `setting_name_5` 
+
+  * Value type is <<array,array>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_6"]
+===== `setting_name_6` 
+
+  * Value type is <<bytes,bytes>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_7"]
+===== `setting_name_7` 
+
+  * Value type is <<path,path>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_8"]
+===== `setting_name_8` 
+
+  * Value type is <<password,password>>
+  * Default value is {}
+
+Add description here
+
+// The full list of Value Types is here: 
+// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
+
+[id="plugins-{type}s-{plugin}-common-options"]
+include::{include_path}/{type}.asciidoc[]
+
+:default_codec!:
diff --git a/lib/pluginmanager/templates/input-plugin/lib/logstash/inputs/example.rb.erb b/lib/pluginmanager/templates/ruby/input-plugin/lib/logstash/inputs/example.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/lib/logstash/inputs/example.rb.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/lib/logstash/inputs/example.rb.erb
diff --git a/lib/pluginmanager/templates/input-plugin/logstash-input-example.gemspec.erb b/lib/pluginmanager/templates/ruby/input-plugin/logstash-input-example.gemspec.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/logstash-input-example.gemspec.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/logstash-input-example.gemspec.erb
diff --git a/lib/pluginmanager/templates/input-plugin/spec/inputs/example_spec.rb.erb b/lib/pluginmanager/templates/ruby/input-plugin/spec/inputs/example_spec.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/input-plugin/spec/inputs/example_spec.rb.erb
rename to lib/pluginmanager/templates/ruby/input-plugin/spec/inputs/example_spec.rb.erb
diff --git a/lib/pluginmanager/templates/ruby/output-plugin/.ruby-version b/lib/pluginmanager/templates/ruby/output-plugin/.ruby-version
new file mode 120000
index 00000000000..8316c50bf41
--- /dev/null
+++ b/lib/pluginmanager/templates/ruby/output-plugin/.ruby-version
@@ -0,0 +1 @@
+../../../../../.ruby-version
\ No newline at end of file
diff --git a/lib/pluginmanager/templates/output-plugin/CHANGELOG.md b/lib/pluginmanager/templates/ruby/output-plugin/CHANGELOG.md
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/CHANGELOG.md
rename to lib/pluginmanager/templates/ruby/output-plugin/CHANGELOG.md
diff --git a/lib/pluginmanager/templates/output-plugin/CONTRIBUTORS.erb b/lib/pluginmanager/templates/ruby/output-plugin/CONTRIBUTORS.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/CONTRIBUTORS.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/CONTRIBUTORS.erb
diff --git a/lib/pluginmanager/templates/output-plugin/DEVELOPER.md.erb b/lib/pluginmanager/templates/ruby/output-plugin/DEVELOPER.md.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/DEVELOPER.md.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/DEVELOPER.md.erb
diff --git a/lib/pluginmanager/templates/output-plugin/Gemfile.erb b/lib/pluginmanager/templates/ruby/output-plugin/Gemfile.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/Gemfile.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/Gemfile.erb
diff --git a/lib/pluginmanager/templates/output-plugin/LICENSE b/lib/pluginmanager/templates/ruby/output-plugin/LICENSE
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/LICENSE
rename to lib/pluginmanager/templates/ruby/output-plugin/LICENSE
diff --git a/lib/pluginmanager/templates/output-plugin/README.md b/lib/pluginmanager/templates/ruby/output-plugin/README.md
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/README.md
rename to lib/pluginmanager/templates/ruby/output-plugin/README.md
diff --git a/lib/pluginmanager/templates/output-plugin/Rakefile b/lib/pluginmanager/templates/ruby/output-plugin/Rakefile
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/Rakefile
rename to lib/pluginmanager/templates/ruby/output-plugin/Rakefile
diff --git a/lib/pluginmanager/templates/output-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/ruby/output-plugin/docs/index.asciidoc
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/docs/index.asciidoc
rename to lib/pluginmanager/templates/ruby/output-plugin/docs/index.asciidoc
diff --git a/lib/pluginmanager/templates/output-plugin/lib/logstash/outputs/example.rb.erb b/lib/pluginmanager/templates/ruby/output-plugin/lib/logstash/outputs/example.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/lib/logstash/outputs/example.rb.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/lib/logstash/outputs/example.rb.erb
diff --git a/lib/pluginmanager/templates/output-plugin/logstash-output-example.gemspec.erb b/lib/pluginmanager/templates/ruby/output-plugin/logstash-output-example.gemspec.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/logstash-output-example.gemspec.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/logstash-output-example.gemspec.erb
diff --git a/lib/pluginmanager/templates/output-plugin/spec/outputs/example_spec.rb.erb b/lib/pluginmanager/templates/ruby/output-plugin/spec/outputs/example_spec.rb.erb
similarity index 100%
rename from lib/pluginmanager/templates/output-plugin/spec/outputs/example_spec.rb.erb
rename to lib/pluginmanager/templates/ruby/output-plugin/spec/outputs/example_spec.rb.erb
