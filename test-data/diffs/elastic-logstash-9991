diff --git a/config/log4j2.properties b/config/log4j2.properties
index 6c4699b90ae..ef2dd5a2f64 100644
--- a/config/log4j2.properties
+++ b/config/log4j2.properties
@@ -4,7 +4,7 @@ name = LogstashPropertiesConfig
 appender.console.type = Console
 appender.console.name = plain_console
 appender.console.layout.type = PatternLayout
-appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n
+appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-15c{1.}]%notEmpty{[%X{pipeline.id}]} %m%n
 
 appender.json_console.type = Console
 appender.json_console.name = json_console
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index bf5db1999e3..49097c43d0e 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -82,6 +82,7 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
 
   def execute
     @thread = Thread.current # this var is implicitly used by Stud.stop?
+    LogStash::Util.set_thread_name("Agent thread")
     logger.debug("Starting agent")
 
     transition_to_running
@@ -287,7 +288,7 @@ def converge_state(pipeline_actions)
 
     pipeline_actions.map do |action|
       Thread.new do
-        java.lang.Thread.currentThread().setName("Converge #{action}");
+        LogStash::Util.set_thread_name("Converge #{action}")
         # We execute every task we need to converge the current state of pipelines
         # for every task we will record the action result, that will help us
         # the results of all the task will determine if the converge was successful or not
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 67d7f6ccb9e..3a139d1399c 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -219,7 +219,7 @@ def start_workers
               lir_execution, filter_queue_client, @events_filtered, @events_consumed,
               @flushRequested, @flushing, @shutdownRequested, @drain_queue).run
         end
-        Util.set_thread_name("[#{pipeline_id}]>worker#{t}")
+        thread.name="[#{pipeline_id}]>worker#{t}"
         @worker_threads << thread
       end
 
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 5862d721c2d..3fa579ce987 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -12,6 +12,8 @@
 require "logstash/filter_delegator"
 require "logstash/compiler"
 
+java_import org.apache.logging.log4j.ThreadContext
+
 module LogStash; class BasePipeline < AbstractPipeline
   include LogStash::Util::Loggable
 
@@ -155,8 +157,9 @@ def start
     @finished_execution = Concurrent::AtomicBoolean.new(false)
 
     @thread = Thread.new do
+      LogStash::Util.set_thread_name("[#{pipeline_id}]-manager")
+      ThreadContext.put("pipeline.id", pipeline_id)
       begin
-        LogStash::Util.set_thread_name("pipeline.#{pipeline_id}")
         run
         @finished_execution.make_true
       rescue => e
@@ -195,7 +198,6 @@ def wait_until_started
   def run
     @started_at = Time.now
     @thread = Thread.current
-    Util.set_thread_name("[#{pipeline_id}]-pipeline-manager")
 
     start_workers
 
@@ -283,9 +285,10 @@ def start_workers
 
       pipeline_workers.times do |t|
         thread = Thread.new(batch_size, batch_delay, self) do |_b_size, _b_delay, _pipeline|
+          LogStash::Util::set_thread_name("[#{pipeline_id}]>worker#{t}")
+          ThreadContext.put("pipeline.id", pipeline_id)
           _pipeline.worker_loop(_b_size, _b_delay)
         end
-        Util.set_thread_name("[#{pipeline_id}]>worker#{t}")
         @worker_threads << thread
       end
 
@@ -321,6 +324,8 @@ def worker_loop(batch_size, batch_delay)
       end
       flush_filters_to_batch(batch, :final => false) if signal.flush?
       if batch.filteredSize > 0
+
+        java_import org.apache.logging.log4j.ThreadContext
         output_batch(batch, output_events_map)
         filter_queue_client.close_batch(batch)
       end
@@ -405,6 +410,7 @@ def start_input(plugin)
 
   def inputworker(plugin)
     Util::set_thread_name("[#{pipeline_id}]<#{plugin.class.config_name}")
+    ThreadContext.put("pipeline.id", pipeline_id)
     begin
       plugin.run(wrapped_write_client(plugin.id.to_sym))
     rescue => e
@@ -505,6 +511,8 @@ def start_flusher
     raise "Attempted to start flusher on a stopped pipeline!" if stopped?
 
     @flusher_thread = Thread.new do
+      LogStash::Util.set_thread_name("[#{pipeline_id}]-flusher-thread")
+      ThreadContext.put("pipeline.id", pipeline_id)
       while Stud.stoppable_sleep(5, 0.1) { stopped? }
         flush
         break if stopped?
