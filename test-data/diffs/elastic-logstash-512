diff --git a/lib/logstash/event_v0.rb b/lib/logstash/event_v0.rb
index 9d0d8638e6a..935dd2b74d9 100644
--- a/lib/logstash/event_v0.rb
+++ b/lib/logstash/event_v0.rb
@@ -156,7 +156,12 @@ def []=(key, value)
     if @data.has_key?(key) || key[0,1] == "@"
       @data[key] = value
     else
-      @data["@fields"][key] = value
+      subkeys = key.split(".")
+      lastkey = subkeys.pop
+      subhash = subkeys.inject(@data["@fields"]) do |hash, k|
+        hash[k]
+      end
+      subhash[lastkey] = value
     end
   end # def []=
 
diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index f90442c7948..d37edf639f2 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -259,9 +259,13 @@ def convert(event)
       if original.nil?
         next
       elsif original.is_a?(Hash)
-        @logger.debug("I don't know how to type convert a hash, skipping",
-                      :field => field, :value => original)
-        next
+        if type == "string"
+          value = converter.call(JSON.generate(original))
+        else
+          @logger.debug("I don't know how to type convert a hash, skipping",
+                        :field => field, :value => original)
+          next
+        end
       elsif original.is_a?(Array)
         value = original.map { |v| converter.call(v) }
       else
diff --git a/spec/filters/mutate.rb b/spec/filters/mutate.rb
index 505da2a3ab0..d9e55db7031 100644
--- a/spec/filters/mutate.rb
+++ b/spec/filters/mutate.rb
@@ -159,5 +159,23 @@
       reject { subject.fields }.include?("hello")
     end
   end
+  
+  describe "convert should work on nested fields" do
+    config <<-CONFIG
+      filter {
+        mutate {
+          convert => [ "foo.bar", "integer" ]
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {
+      "foo"  => {
+        "bar" => "1000"
+      },
+    } do
+      insist { subject.fields } == { "foo" => { "bar" => 1000 } }
+    end
+  end
 end
 
