diff --git a/Gemfile b/Gemfile
index f7cdaf7141c..080c4afdfe1 100644
--- a/Gemfile
+++ b/Gemfile
@@ -17,7 +17,7 @@ gem "stud", "~> 0.0.22"
 gem "fpm", "~> 1.3.3", :group => :build
 gem "rubyzip", "~> 1.1.7", :group => :build
 gem "gems", "~> 0.8.3", :group => :build
-gem "rack-test", require: "rack/test", :group => :development
+gem "rack-test", :require => "rack/test", :group => :development
 gem "flores", "~> 0.0.6"
 gem "logstash-output-elasticsearch"
 gem "logstash-codec-plain", ">= 0"
diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
index e1bb47273e7..0929539fa9c 100644
--- a/Gemfile.jruby-1.9.lock
+++ b/Gemfile.jruby-1.9.lock
@@ -182,6 +182,8 @@ GEM
     rack (1.6.4)
     rack-protection (1.5.3)
       rack
+    rack-test (0.6.3)
+      rack (>= 1.0)
     rake (10.4.2)
     rest-client (1.8.0)
       http-cookie (>= 1.0.2, < 2.0)
@@ -255,6 +257,7 @@ DEPENDENCIES
   logstash-output-stdout
   longshoreman
   octokit (= 3.8.0)
+  rack-test
   rspec (~> 3.1.0)
   rubyzip (~> 1.1.7)
   simplecov
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index ab453bb4f2d..3a2cb779814 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -17,9 +17,8 @@
 LogStash::Environment.load_locale!
 
 class LogStash::Agent
-
   attr_writer :logger
-  attr_reader :metric, :debug, :node_name
+  attr_reader :metric, :debug, :node_name, :started_at, :pipelines
 
   def initialize(options = {})
     @pipelines = {}
@@ -28,10 +27,14 @@ def initialize(options = {})
     @collect_metric = options.fetch(:collect_metric, false)
     @logger = options[:logger]
     @debug  = options.fetch(:debug, false)
+
+    @started_at = Time.now
+
     configure_metric
   end
 
   def execute
+
     # Make SIGINT/SIGTERM shutdown the pipeline.
     sigint_id = trap_sigint()
     sigterm_id = trap_sigterm()
@@ -65,6 +68,13 @@ def node_uuid
     @node_uuid ||= SecureRandom.uuid
   end
 
+  # Calculate the Logstash uptime in milliseconds
+  # 
+  # @return [Fixnum] Uptime in milliseconds
+  def uptime
+    ((Time.now.to_f - started_at.to_f) * 1000.0).to_i
+  end
+
   private
 
   def start_webserver
@@ -121,7 +131,7 @@ def add_metric_pipeline
       }
       output {
         elasticsearch {
-          flush_size => 1
+          flush_size => 10
           hosts => "127.0.0.1"
           index => "metrics-%{+YYYY.MM.dd}"
         }
diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
new file mode 100644
index 00000000000..ac07499da0f
--- /dev/null
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -0,0 +1,49 @@
+# encoding: utf-8
+#
+module LogStash
+  class FilterDelegator
+    extend Forwardable
+
+    def_delegators :@filter,
+      :register,
+      :close,
+      :threadsafe?,
+      :do_close,
+      :do_stop,
+      :periodic_flush
+
+    def initialize(logger, klass, metric, *args)
+      options = args.reduce({}, :merge)
+
+      @logger = logger
+      @klass = klass
+      @filter = klass.new(options)
+
+      # Scope the metrics to the plugin
+      @metric = metric.namespace(@filter.identifier_name)
+      @filter.metric = @metric
+
+      define_flush_method if @filter.respond_to?(:flush)
+    end
+
+    def config_name
+      @klass.config_name
+    end
+
+    def multi_filter(events)
+      @metric.increment(:events_in, events.size)
+
+      new_events = @filter.multi_filter(events)
+
+      @metric.increment(:events_out, new_events.size)
+      return new_events
+    end
+
+    private
+    def define_flush_method
+      define_singleton_method(:flush) do |options = {}|
+        @filter.flush(options)
+      end
+    end
+  end
+end
diff --git a/logstash-core/lib/logstash/inputs/metrics.rb b/logstash-core/lib/logstash/inputs/metrics.rb
index 9570454ab97..05c2ecd7fbb 100644
--- a/logstash-core/lib/logstash/inputs/metrics.rb
+++ b/logstash-core/lib/logstash/inputs/metrics.rb
@@ -44,9 +44,9 @@ def update(snapshot)
       #   - We can use a synchronization mechanism between the called thread (update method)
       #   and the plugin thread (run method)
       #   - How we handle back pressure here?
-      #   - one snashot should be only one event
-      snapshot.metric_store.to_events.each do |event|
-        @queue << event
+      #   - one snashot should be only one event ?
+      snapshot.metric_store.all.each do |metric|
+        @queue << LogStash::Event.new({ "@timestamp" => snapshot.created_at }.merge(metric.to_hash))
       end
     end
   end
diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index 7ba7c7fd7ac..81b69cb5a3c 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -19,13 +19,15 @@ class Collector
     include Observable
     include Singleton
 
-    SNAPSHOT_ROTATION_TIME_SECS = 1 # seconds
+    SNAPSHOT_ROTATION_TIME_SECS = 10 # seconds
     SNAPSHOT_ROTATION_TIMEOUT_INTERVAL_SECS = 10 * 60 # seconds
 
     def initialize
       @metric_store = MetricStore.new
 
       start_periodic_snapshotting
+
+      @async_worker_pool
     end
 
     # The metric library will call this unique interface
@@ -35,14 +37,14 @@ def initialize
     # If there is a problem with the key or the type of metric we will record an error 
     # but we wont stop processing events, theses errors are not considered fatal.
     # 
-    def push(*args)
-      namespaces_path, key, type, metric_type_params = args
-
+    def push(namespaces_path, key, type, *metric_type_params)
       begin
         metric = @metric_store.fetch_or_store(namespaces_path, key) do
           LogStash::Instrument::MetricType.create(type, namespaces_path, key)
         end
+
         metric.execute(*metric_type_params)
+
         changed # we had changes coming in so we can notify the observers
       rescue MetricStore::NamespacesExpectedError => e
         logger.error("Collector: Cannot record metric", :exception => e)
@@ -51,10 +53,13 @@ def push(*args)
                      :type => type,
                      :namespaces_path => namespaces_path,
                      :key => key,
+                     :metrics_params => metric_type_params,
+                     :exception => e,
                      :stacktrace => e.backtrace)
       end
     end
 
+
     # Monitor the `Concurrent::TimerTask` this update is triggered on every successful or not
     # run of the task, TimerTask implement Observable and the collector acts as
     # the observer and will keep track if something went wrong in the execution.
diff --git a/logstash-core/lib/logstash/instrument/metric.rb b/logstash-core/lib/logstash/instrument/metric.rb
index b075bf1ec7f..0877d9faf03 100644
--- a/logstash-core/lib/logstash/instrument/metric.rb
+++ b/logstash-core/lib/logstash/instrument/metric.rb
@@ -9,6 +9,29 @@ class MetricNoBlockProvided < MetricException; end
   class MetricNoNamespaceProvided < MetricException; end
 
   class Metric
+    class TimedExecution
+      MILLISECONDS = 1_000_000.0.freeze
+
+      def initialize(metric, key)
+        @metric = metric
+        @key = key
+        start
+      end
+
+      def start
+        @start_time = current_time
+      end
+
+      def stop
+        @metric.report_time(@key, (MILLISECONDS * (current_time - @start_time)).to_i)
+      end
+
+      private
+      def current_time
+        Time.now
+      end
+    end
+
     attr_reader :collector, :namespace_information
 
     public
@@ -33,19 +56,23 @@ def gauge(key, value)
       collector.push(namespace_information, key, :gauge, :set, value)
     end
 
-    def time(key, &block)
+    def time(key)
       validate_key!(key)
+
       if block_given?
-        start_time = Time.now
-        content = block.call
-        duration = Time.now - start_time
-        gauge(key, duration)
+        timer = TimedExecution.new(self, key)
+        content = yield
+        timer.stop
         return content
       else
-        raise MetricNoBlockProvided
+        TimedExecution.new(self, key)
       end
     end
 
+    def report_time(key, duration)
+      collector.push(namespace_information, key, :mean, :increment, duration)
+    end
+
     def namespace(sub_namespace)
       raise MetricNoNamespaceProvided if sub_namespace.nil? || sub_namespace.empty?
 
diff --git a/logstash-core/lib/logstash/instrument/metric_store.rb b/logstash-core/lib/logstash/instrument/metric_store.rb
index 2023993cba6..b1b293a3e51 100644
--- a/logstash-core/lib/logstash/instrument/metric_store.rb
+++ b/logstash-core/lib/logstash/instrument/metric_store.rb
@@ -11,6 +11,8 @@ class MetricStore
     class NamespacesExpectedError < Exception; end
 
     def initialize
+      # We keep the structured cache to allow
+      # the api to search the content of the differents nodes
       @store = Concurrent::Map.new
     end
 
@@ -34,11 +36,11 @@ def get(*key_paths)
       get_recursively(key_paths, @store)
     end
 
-    # Take all the individuals `MetricType` and convert them to `Logstash::Event`
+    # Return all the individuals Metric
     #
     # @return [Array] An array of all metric transformed in `Logstash::Event`
-    def to_events
-      to_events_recursively(@store).flatten
+    def each
+      all_metrics_recursively(@store).flatten
     end
 
     private
@@ -58,13 +60,13 @@ def get_recursively(key_paths, map)
       end
     end
 
-    def to_events_recursively(values)
+    def each_recursively(values)
       events = []
       values.each_value do |value|
         if value.is_a?(Concurrent::Map)
-          events << to_events_recursively(value) 
+          events << each_recursively(value) 
         else
-          events << value.to_event
+          events << value
         end
       end
       return events
diff --git a/logstash-core/lib/logstash/instrument/metric_type/counter.rb b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
index bbb08bbe235..a7f89f248d6 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/counter.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
@@ -7,12 +7,6 @@ class Counter < Base
     def initialize(namespaces, key, value = 0)
       super(namespaces, key)
 
-      # TODO
-      # This should be a `LongAdder`,
-      # will have to create a rubyext for it and support jdk7
-      # look at the elasticsearch source code.
-      # LongAdder only support decrement of one?
-      # Most of the time we will be adding
       @counter = Concurrent::AtomicFixnum.new(value)
     end
 
diff --git a/logstash-core/lib/logstash/instrument/metric_type/mean.rb b/logstash-core/lib/logstash/instrument/metric_type/mean.rb
index bf4e176a7cb..96e534bd68b 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/mean.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/mean.rb
@@ -3,7 +3,7 @@
 require "concurrent"
 
 module LogStash module Instrument module MetricType
-  class Mean < LogStash::Instrument::MetricType::Base
+  class Mean < Base
     def initialize(namespaces, key)
       super(namespaces, key)
 
@@ -13,7 +13,7 @@ def initialize(namespaces, key)
 
     def increment(value = 1)
       @counter.increment
-      @sum.increment(value = 1)
+      @sum.increment(value)
     end
 
     def decrement(value = 1)
@@ -22,7 +22,11 @@ def decrement(value = 1)
     end
 
     def mean
-      @sum.value / @counter.value
+      if @counter > 0 
+        @sum.value / @counter.value
+      else
+        0
+      end
     end
 
     def to_hash
diff --git a/logstash-core/lib/logstash/instrument/null_metric.rb b/logstash-core/lib/logstash/instrument/null_metric.rb
index 7ec33cc4c14..f842cc1a6cf 100644
--- a/logstash-core/lib/logstash/instrument/null_metric.rb
+++ b/logstash-core/lib/logstash/instrument/null_metric.rb
@@ -1,6 +1,16 @@
 # encoding: utf-8
+require "logstash/instrument/metric"
+
 module LogStash module Instrument
  class NullMetric
+   class NullTimedExecution
+     def self.stop
+     end
+   end
+
+   # Allow to reuse the same variable when creating subnamespace
+   NULL_METRIC_INSTANCE = NullMetric.new
+
    attr_reader :collector, :namespace_information
    def initialize
    end
@@ -16,10 +26,18 @@ def gauge(key, value)
    end
 
    def namespace(key)
-     NullMetric.new
+     NULL_METRIC_INSTANCE
+   end
+
+   def report_time(key, duration)
    end
 
-   def time(key, &block)
+   def time(key)
+     if block_given?
+       yield 
+     else
+       NullTimedExecution
+     end
    end
  end
 end; end
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 260e6b15797..9ad00e78389 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -12,11 +12,17 @@ module LogStash class OutputDelegator
 
   # The *args this takes are the same format that a Outputs::Base takes. A list of hashes with parameters in them
   # Internally these just get merged together into a single hash
-  def initialize(logger, klass, default_worker_count, *args)
+  def initialize(logger, klass, default_worker_count, metric, *args)
     @logger = logger
     @threadsafe = klass.threadsafe?
     @config = args.reduce({}, :merge)
     @klass = klass
+    
+    # Create an instance of the input so we can fetch the identifier
+    output = @klass.new(*args)
+    
+    # Scope the metrics to the plugin
+    @metric = metric.namespace(output.identifier_name)
 
     # We define this as an array regardless of threadsafety
     # to make reporting simpler, even though a threadsafe plugin will just have
@@ -39,6 +45,7 @@ def initialize(logger, klass, default_worker_count, *args)
 
     @workers += (@worker_count - 1).times.map do
       inst = @klass.new(*args)
+      inst.metric = @metric
       inst.register
       inst
     end
@@ -107,6 +114,7 @@ def register
 
   def threadsafe_multi_receive(events)
     @events_received.increment(events.length)
+    @metric.increment(:events_in, events.length)
 
     @threadsafe_worker.multi_receive(events)
   end
@@ -147,4 +155,4 @@ def busy_workers
   private
   # Needed for testing, so private
   attr_reader :threadsafe_worker, :worker_queue
-end end
\ No newline at end of file
+end end
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 3332ed8d209..60643de5c16 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -18,9 +18,20 @@
 require "logstash/instrument/null_metric"
 require "logstash/instrument/collector"
 require "logstash/output_delegator"
+require "logstash/filter_delegator"
 
 module LogStash; class Pipeline
-  attr_reader :inputs, :filters, :outputs, :worker_threads, :events_consumed, :events_filtered, :reporter, :pipeline_id, :metric, :logger
+  attr_reader :inputs,
+    :filters,
+    :outputs,
+    :worker_threads,
+    :events_consumed,
+    :events_filtered,
+    :reporter,
+    :pipeline_id,
+    :metric,
+    :logger,
+    :started_at
 
   DEFAULT_SETTINGS = {
     :default_pipeline_workers => LogStash::Config::CpuCoreStrategy.maximum,
@@ -106,7 +117,7 @@ def safe_pipeline_worker_count
     safe_filters, unsafe_filters = @filters.partition(&:threadsafe?)
 
     if unsafe_filters.any?
-      plugins = unsafe_filters.collect { |f| f.class.config_name }
+      plugins = unsafe_filters.collect { |f| f.config_name }
       case thread_count
       when nil
         # user did not specify a worker thread count
@@ -135,6 +146,8 @@ def filters?
   end
 
   def run
+    @started_at = Time.now
+
     LogStash::Util.set_thread_name("[#{pipeline_id}]-pipeline-manager")
     @logger.terminal(LogStash::Util::DefaultsPrinter.print(@settings))
 
@@ -402,7 +415,9 @@ def plugin(plugin_type, name, *args)
     klass = LogStash::Plugin.lookup(plugin_type, name)
 
     if plugin_type == "output"
-      LogStash::OutputDelegator.new(@logger, klass, default_output_workers, *args)
+      LogStash::OutputDelegator.new(@logger, klass, default_output_workers, metric, *args)
+    elsif plugin_type == "filter"
+      LogStash::FilterDelegator.new(@logger, klass, metric, *args)
     else
       klass.new(*args)
     end
@@ -451,6 +466,14 @@ def flush
     end
   end
 
+  # Calculate the uptime in milliseconds
+  # 
+  # @return [Fixnum] Uptime in milliseconds, 0 if the pipeline is not started
+  def uptime
+    return 0 if started_at.nil?
+    ((Time.now.to_f - started_at.to_f) * 1000.0).to_i
+  end
+
   # perform filters flush into the output queue
   # @param options [Hash]
   # @option options [Boolean] :final => true to signal a final shutdown flush
diff --git a/logstash-core/lib/logstash/util/duration_formatter.rb b/logstash-core/lib/logstash/util/duration_formatter.rb
new file mode 100644
index 00000000000..42cf6ff66f1
--- /dev/null
+++ b/logstash-core/lib/logstash/util/duration_formatter.rb
@@ -0,0 +1,15 @@
+# encoding: utf-8
+require "chronic_duration"
+module LogStash::Util::DurationFormatter
+  CHRONIC_OPTIONS = { :format => :short }
+
+  # Take a duration in milliseconds and transform it into
+  # a format that a human can understand. This is currently used by
+  # the API.
+  #
+  # @param [Fixnum] Duration in milliseconds
+  # @return [String] Duration in human format
+  def self.human_format(duration)
+    ChronicDuration.output(duration / 1000, CHRONIC_OPTIONS)
+  end
+end
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 093c5113490..2ec2eb6f2ff 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -5,7 +5,7 @@
 require 'puma/configuration'
 require 'puma/commonlogger'
 
-module LogStash
+module LogStash 
   class WebServer
 
   extend Forwardable
@@ -81,6 +81,4 @@ def parse_options
     @config.load
     @options = @config.options
   end
-
-  end
-end
+end; end
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index b96f321d066..e218bfeb584 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -29,6 +29,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "sinatra", '~> 1.4', '>= 1.4.6'
   gem.add_runtime_dependency "puma", '~> 2.15', '>= 2.15.3'
   gem.add_runtime_dependency "jruby-openssl", "0.9.13" # Required to support TLSv1.2
+  gem.add_runtime_dependency "chronic_duration", "0.10.6"
 
   # TODO(sissel): Treetop 1.5.x doesn't seem to work well, but I haven't
   # investigated what the cause might be. -Jordan
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 4caf2059995..4ed20777066 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -3,6 +3,16 @@
 require "spec_helper"
 
 describe LogStash::Agent do
+  let(:logger) { double("logger") }
+
+  before :each do
+    allow(logger).to receive(:fatal).with(any_args)
+    allow(logger).to receive(:debug).with(any_args)
+    allow(logger).to receive(:debug?).with(any_args)
+  end
+
+  subject { LogStash::Agent.new({ :logger => logger }) }
+
   context "#node_name" do
     let(:hostname) { "the-logstash" }
 
@@ -11,7 +21,7 @@
     end
 
     it "fallback to hostname when no name is provided" do
-      expect(LogStash::Agent.new.node_name).to be(hostname)
+      expect(subject.node_name).to be(hostname)
     end
 
     it "uses the user provided name" do
@@ -21,7 +31,19 @@
 
   context "#node_uuid" do
     it "create a unique uuid between agent instances" do
-      expect(LogStash::Agent.new.node_uuid).not_to be(LogStash::Agent.new.node_uuid)
+      expect(subject.node_uuid).not_to be(LogStash::Agent.new.node_uuid)
+    end
+  end
+
+  context "#started_at" do
+    it "return the start time when the agent is started" do
+      expect(subject.started_at).to be_kind_of(Time)
+    end
+  end
+
+  context "#uptime" do
+    it "return the number of milliseconds since start time" do
+      expect(subject.uptime).to be >= 0
     end
   end
 end
diff --git a/logstash-core/spec/logstash/instrument/metric_spec.rb b/logstash-core/spec/logstash/instrument/metric_spec.rb
index 962601ff96e..e025f71c17f 100644
--- a/logstash-core/spec/logstash/instrument/metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_spec.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/instrument/metric"
 require "logstash/instrument/collector"
+require_relative "../../support/matchers"
 require "spec_helper"
 
 describe LogStash::Instrument::Metric do
@@ -64,6 +65,35 @@
     end
   end
 
+  context "#time" do
+    let(:sleep_time) { 2 }
+    let(:sleep_time_ms) { sleep_time * 1_000_000 }
+      
+    it "records the duration" do
+      subject.time(:duration_ms) { sleep(sleep_time) }
+
+      expect(collector.last).to be_within(sleep_time_ms).of(sleep_time_ms + 5000)
+      expect(collector[0]).to match([:root])
+      expect(collector[1]).to be(:duration_ms)
+      expect(collector[2]).to be(:mean)
+    end
+
+    it "returns the value of the executed block" do
+      expect(subject.time(:testing) { "hello" }).to eq("hello")
+    end
+
+    it "return a TimedExecution" do
+      execution = subject.time(:duration_ms)
+      sleep(sleep_time)
+      execution.stop
+
+      expect(collector.last).to be_within(sleep_time_ms).of(sleep_time_ms + 0.1)
+      expect(collector[0]).to match([:root])
+      expect(collector[1]).to be(:duration_ms)
+      expect(collector[2]).to be(:mean)
+    end
+  end
+
   context "#namespace" do
     let(:sub_key) { :my_sub_key }
 
diff --git a/logstash-core/spec/logstash/instrument/metric_store_spec.rb b/logstash-core/spec/logstash/instrument/metric_store_spec.rb
index 1f48eb7a6b8..b5d9204aa9a 100644
--- a/logstash-core/spec/logstash/instrument/metric_store_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_store_spec.rb
@@ -67,28 +67,4 @@
       expect(metrics).to be_kind_of(LogStash::Instrument::MetricType::Base)
     end
   end
-
-  describe "#to_event" do
-    let(:metric_events) {
-      [
-        [[:node, :sashimi, :pipelines, :pipeline01, :plugins, :"logstash-output-elasticsearch"], :event_in, :increment],
-        [[:node, :sashimi, :pipelines, :pipeline01], :processed_events, :increment],
-      ]
-    }
-
-    before do
-      # Lets add a few metrics in the store before trying to convert them
-      metric_events.each do |namespaces, metric_key, action|
-        metric = subject.fetch_or_store(namespaces, metric_key, LogStash::Instrument::MetricType::Counter.new(namespaces, key))
-        metric.execute(action)
-      end
-    end
-
-    it "converts all metric to `Logstash::Event`" do
-      events = subject.to_events
-      events.each do |event|
-        expect(event).to be_kind_of(LogStash::Event)
-      end
-    end
-  end
 end
diff --git a/logstash-core/spec/logstash/instrument/null_metric_spec.rb b/logstash-core/spec/logstash/instrument/null_metric_spec.rb
index e79e5711bc7..58944e297c8 100644
--- a/logstash-core/spec/logstash/instrument/null_metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/null_metric_spec.rb
@@ -7,4 +7,15 @@
   it "defines the same interface as `Metric`" do
     expect(described_class).to implement_interface_of(LogStash::Instrument::Metric) 
   end
+
+  describe "#time" do
+    it "returns the value of the block without recording any metrics" do
+      expect(subject.time(:execution_time) { "hello" }).to eq("hello")
+    end
+
+    it "return a TimedExecution" do
+      execution = subject.time(:do_something)
+      expect { execution.stop }.not_to raise_error
+    end
+  end
 end
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 5d92aeac800..5d7b6186307 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -7,18 +7,20 @@
   let(:events) { 7.times.map { LogStash::Event.new }}
   let(:default_worker_count) { 1 }
 
-  subject { described_class.new(logger, out_klass, default_worker_count) }
+  subject { described_class.new(logger, out_klass, default_worker_count, LogStash::Instrument::NullMetric.new ) }
 
   context "with a plain output plugin" do
     let(:out_klass) { double("output klass") }
     let(:out_inst) { double("output instance") }
 
-    before do
+    before :each do
       allow(out_klass).to receive(:new).with(any_args).and_return(out_inst)
       allow(out_klass).to receive(:threadsafe?).and_return(false)
       allow(out_klass).to receive(:workers_not_supported?).and_return(false)
       allow(out_inst).to receive(:register)
       allow(out_inst).to receive(:multi_receive)
+      allow(out_inst).to receive(:metric=).with(any_args)
+      allow(out_inst).to receive(:identifier_name).and_return("a-simple-plugin")
       allow(logger).to receive(:debug).with(any_args)
     end
 
@@ -57,6 +59,8 @@
         before do
           allow(out_klass).to receive(:threadsafe?).and_return(false)
           allow(out_klass).to receive(:workers_not_supported?).and_return(false)
+          allow(out_inst).to receive(:metric=).with(any_args)
+          allow(out_inst).to receive(:identifier_name).and_return("a-simple-plugin")
         end
 
         it "should instantiate multiple workers" do
@@ -72,6 +76,8 @@
       describe "threadsafe outputs" do
         before do
           allow(out_klass).to receive(:threadsafe?).and_return(true)
+          allow(out_inst).to receive(:metric=).with(any_args)
+          allow(out_inst).to receive(:identifier_name).and_return("a-simple-plugin")
           allow(out_klass).to receive(:workers_not_supported?).and_return(false)
         end
 
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index 1a03fae7ecb..78e13eb1b20 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -62,7 +62,7 @@ def initialize(params={})
 
   def register
   end
-  
+
   def receive(event)
     @events << event
   end
@@ -400,7 +400,7 @@ class TestPipeline < LogStash::Pipeline
         }
       }
       filter {
-        multiline { 
+        multiline {
           pattern => "^NeverMatch"
           negate => true
           what => "previous"
@@ -412,7 +412,7 @@ class TestPipeline < LogStash::Pipeline
       EOS
     end
     let(:output) { DummyOutput.new }
-    
+
     before do
       allow(DummyOutput).to receive(:new).with(any_args).and_return(output)
       allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_return(LogStash::Inputs::Generator)
@@ -448,8 +448,8 @@ class TestPipeline < LogStash::Pipeline
 
     it "should handle evaluating different config" do
       # When the functions are compiled from the AST it will generate instance
-      # variables that are unique to the actual config, the intance are pointing
-      # to conditionals/plugins.
+      # variables that are unique to the actual config, the instances are pointing
+      # to conditionals and/or plugins.
       #
       # Before the `defined_singleton_method`, the definition of the method was
       # not unique per class, but the `instance variables` were unique per class.
@@ -463,4 +463,53 @@ class TestPipeline < LogStash::Pipeline
       expect(pipeline1.filter_func(LogStash::Event.new)).not_to include(nil)
     end
   end
+
+  context "#started_at" do
+    let(:config) do
+      <<-EOS
+      input {
+        generator {}
+      }
+      EOS
+    end
+
+    subject { described_class.new(config) }
+
+    it "returns nil when the pipeline isnt started" do
+      expect(subject.started_at).to be_nil
+    end
+
+    it "return when the pipeline started working" do
+      t = Thread.new { subject.run }
+      sleep(0.1)
+      expect(subject.started_at).to be < Time.now
+      t.kill rescue nil
+    end
+  end
+
+  context "#uptime" do
+    let(:config) do
+      <<-EOS
+      input {
+        generator {}
+      }
+      EOS
+    end
+    subject { described_class.new(config) }
+
+    context "when the pipeline is not started" do
+      it "returns 0" do
+        expect(subject.uptime).to eq(0)
+      end
+    end
+
+    context "when the pipeline is started" do
+      it "return the duration in milliseconds" do
+        t = Thread.new { subject.run }
+        sleep(0.1)
+        expect(subject.uptime).to be > 0
+        t.kill rescue nil
+      end
+    end
+  end
 end
diff --git a/logstash-core/spec/logstash/util/duration_formatter_spec.rb b/logstash-core/spec/logstash/util/duration_formatter_spec.rb
new file mode 100644
index 00000000000..44c0eb64632
--- /dev/null
+++ b/logstash-core/spec/logstash/util/duration_formatter_spec.rb
@@ -0,0 +1,11 @@
+# encoding: utf-8
+require "logstash/util/duration_formatter"
+require "spec_helper"
+
+describe LogStash::Util::DurationFormatter do
+  let(:duration) { 3600 * 1000 } # in milliseconds
+
+  it "returns a human format" do
+    expect(subject.human_format(duration)).to eq("1h")
+  end
+end
