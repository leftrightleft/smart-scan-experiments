diff --git a/CHANGELOG b/CHANGELOG
index 506b854735d..4cb879c874f 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,8 +1,8 @@
 1.1.1 (???, 2012)
  ## Overview of this release:
-  * New input plugins: generator, heroku, pipe, ganglia
+  * New input plugins: generator, heroku, pipe, ganglia, irc
   * New output plugins: juggernaut, metricscatcher, nagios_ncsa, pipe,
-                        opentsdb, pagerduty
+                        opentsdb, pagerduty, irc
   * New filter plugins: zeromq, environment, xml, csv, syslog_pri
   * Fixes for gelf output
 
@@ -47,6 +47,7 @@
   - feature: [LOGSTASH-410] - inputs can now be duplicated with the
     'threads' parameter (where supported)
   - bugfix: [LOGSTASH-490] - include cacert.pem in jar for twitter input
+  - feature: [LOGSTASH-139] - support for IRC
 
   ## filters
   - bugfix: [LOGSTASH-300] - bump grok pattern replace limit to 1000,
@@ -70,6 +71,7 @@
   - bugfix: elastic search river now respects exchange_type and queue_name
   - bugfix: ganglia plugin now respects metric_type
   - bugfix: GELF output facility fixes; now defaults to 'logstash-gelf'
+  - feature: [LOGSTASH-139] - support for IRC
 
 1.1.0.1 (January 30, 2012)
   ## Overview of this release:
diff --git a/Gemfile b/Gemfile
index 444c15cac38..a03a88c0075 100755
--- a/Gemfile
+++ b/Gemfile
@@ -4,6 +4,7 @@ gem "cabin", "0.4.4" # for logging. apache 2 license
 gem "bunny" # for amqp support, MIT-style license
 gem "uuidtools" # for naming amqp queues, License ???
 
+gem "cinch" # for irc support
 gem "filewatch", "0.3.3"  # for file tailing, BSD License
 gem "jls-grok", "0.10.7" # for grok filter, BSD License
 gem "aws-sdk" # for AWS access: SNS and S3 log tailing.  Apache 2.0 License
diff --git a/lib/logstash/inputs/irc.rb b/lib/logstash/inputs/irc.rb
new file mode 100644
index 00000000000..46097992c1c
--- /dev/null
+++ b/lib/logstash/inputs/irc.rb
@@ -0,0 +1,73 @@
+require "logstash/inputs/base"
+require "logstash/namespace"
+require "thread"
+require "cinch"
+# Read events from an IRC Server.
+#
+class LogStash::Inputs::Irc < LogStash::Inputs::Base
+
+  config_name "irc"
+  plugin_status "experimental"
+
+  # Host of the IRC Server to connect to.
+  config :host, :validate => :string, :required => true
+
+  # Port for the IRC Server
+  config :port, :validate => :number, :required => true
+
+  # IRC Nickname
+  config :nick, :validate => :string, :default => "logstash"
+
+  # IRC Username
+  config :user, :validate => :string, :default => "logstash"
+
+  # IRC Real name
+  config :real, :validate => :string, :default => "logstash"
+
+  # IRC Server password
+  config :password, :validate => :password, :default => nil
+
+  # Channels to listen to
+  config :channels, :validate => :array, :required => true
+
+
+  def initialize(*args)
+    super(*args)
+  end # def initialize
+
+  public
+  def register
+    @irc_queue = Queue.new
+    @logger.info("Connecting to irc server", :host => @host, :port => @port, :nick => @nick, :channels => @channels)
+
+    @bot = Cinch::Bot.new
+    @bot.loggers.clear
+    @bot.configure do |c|
+      c.server = @host
+      c.port = @port
+      c.nick = @nick
+      c.realname = @real
+      c.user = @user
+      c.channels = @channels
+      c.password = @password
+    end
+    queue = @irc_queue
+    @bot.on :channel  do |m|
+      queue << m
+    end
+  end # def register
+
+  public
+  def run(output_queue)
+    Thread.new(@bot) do |bot|
+      bot.start
+    end
+    loop do
+      msg = @irc_queue.pop
+      event = self.to_event(msg.message, "irc://#{@host}:#{@port}/#{msg.channel}")
+      event["channel"] = msg.channel
+      event["user"] = msg.user.user
+      output_queue << event
+    end
+  end # def run
+end # class LogStash::Inputs::Irc
diff --git a/lib/logstash/outputs/irc.rb b/lib/logstash/outputs/irc.rb
new file mode 100644
index 00000000000..627fa7b1096
--- /dev/null
+++ b/lib/logstash/outputs/irc.rb
@@ -0,0 +1,63 @@
+require "logstash/outputs/base"
+require "logstash/namespace"
+require "thread"
+require "cinch"
+
+# Write events to IRC
+#
+class LogStash::Outputs::Irc < LogStash::Outputs::Base
+
+  config_name "irc"
+  plugin_status "experimental"
+
+  # Address of the host to connect to
+  config :host, :validate => :string, :required => true
+
+  # Port on host to connect to.
+  config :port, :validate => :number, :required => true
+
+  # IRC Nickname
+  config :nick, :validate => :string, :default => "logstash"
+
+  # IRC Username
+  config :user, :validate => :string, :default => "logstash"
+
+  # IRC Real name
+  config :real, :validate => :string, :default => "logstash"
+
+  # Channels to broadcast to
+  config :channels, :validate => :array, :required => true
+
+  # Message format to send, event tokens are usable here
+  config :format, :validate => :string, :default => "%{@message}"
+
+  public
+  def register
+    @irc_queue = Queue.new
+    @logger.info("Connecting to irc server", :host => @host, :port => @port, :nick => @nick, :channels => @channels)
+
+    @bot = Cinch::Bot.new
+    @bot.loggers.clear
+    @bot.configure do |c|
+      c.server = @host
+      c.port = @port
+      c.nick = @nick
+      c.user = @user
+      c.realname = @real
+      c.channels = @channels
+      c.channels = @channels
+      c.channels = @channels
+      c.password = @password
+    end
+    Thread.new(@bot) do |bot|
+      bot.start
+    end
+  end # def register
+
+  public
+  def receive(event)
+    @bot.channels.each do |channel|
+      channel.msg(event.sprintf(@format))
+    end # channels.each
+  end # def receive
+end # class LogStash::Outputs::Irc
