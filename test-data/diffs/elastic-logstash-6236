diff --git a/logstash-core/lib/logstash/api/commands/stats.rb b/logstash-core/lib/logstash/api/commands/stats.rb
index 502c57fac03..c82038be660 100644
--- a/logstash-core/lib/logstash/api/commands/stats.rb
+++ b/logstash-core/lib/logstash/api/commands/stats.rb
@@ -15,7 +15,8 @@ def jvm
               :peak_count
             ),
             :mem => memory,
-            :gc => gc
+            :gc => gc,
+            :uptime_in_millis => service.get_shallow(:jvm, :uptime_in_millis)
           }
         end
 
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
index 744bfda8cc3..f51b38bb2b3 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
@@ -7,6 +7,7 @@
 java_import 'java.lang.management.ManagementFactory'
 java_import 'java.lang.management.OperatingSystemMXBean'
 java_import 'java.lang.management.GarbageCollectorMXBean'
+java_import 'java.lang.management.RuntimeMXBean'
 java_import 'com.sun.management.UnixOperatingSystemMXBean'
 java_import 'javax.management.MBeanServer'
 java_import 'javax.management.ObjectName'
@@ -41,8 +42,7 @@ def initialize(metric, options = {})
 
     def collect
       raw = JRMonitor.memory.generate
-      collect_heap_metrics(raw)
-      collect_non_heap_metrics(raw)
+      collect_jvm_metrics(raw)      
       collect_pools_metrics(raw)
       collect_threads_metrics
       collect_process_metrics
@@ -98,6 +98,13 @@ def collect_process_metrics
 
       metric.gauge(path + [:mem], :total_virtual_in_bytes, process_metrics["mem"]["total_virtual_in_bytes"])
     end
+    
+    def collect_jvm_metrics(data)
+      runtime_mx_bean = ManagementFactory.getRuntimeMXBean()
+      metric.gauge([:jvm], :uptime_in_millis, runtime_mx_bean.getUptime())
+      collect_heap_metrics(data)
+      collect_non_heap_metrics(data)
+    end
 
     def collect_heap_metrics(data)
       heap = aggregate_information_for(data["heap"].values)
diff --git a/logstash-core/spec/api/lib/api/node_stats_spec.rb b/logstash-core/spec/api/lib/api/node_stats_spec.rb
index 448543d250b..a77a01c3e23 100644
--- a/logstash-core/spec/api/lib/api/node_stats_spec.rb
+++ b/logstash-core/spec/api/lib/api/node_stats_spec.rb
@@ -14,6 +14,7 @@
   # DSL describing response structure
   root_structure = {
     "jvm"=>{
+      "uptime_in_millis" => Numeric,
       "threads"=>{
         "count"=>Numeric,
         "peak_count"=>Numeric
diff --git a/qa/integration/services/monitoring_api.rb b/qa/integration/services/monitoring_api.rb
index 27ef78b1611..e14f56e3db9 100644
--- a/qa/integration/services/monitoring_api.rb
+++ b/qa/integration/services/monitoring_api.rb
@@ -27,4 +27,9 @@ def node_info
     JSON.parse(resp)
   end
 
+  def node_stats
+    resp = Manticore.get("http://localhost:9600/_node/stats").body
+    JSON.parse(resp)
+  end
+
 end
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 90d16cbfeaf..f9045c49d2c 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -12,6 +12,10 @@
     @fixture.teardown
   }
   
+  after(:each) {
+    @fixture.get_service("logstash").teardown
+  }
+  
   let(:number_of_events) { 5 }
   let(:max_retry) { 120 }
 
@@ -19,7 +23,7 @@
     logstash_service = @fixture.get_service("logstash")
     logstash_service.start_with_stdin
     number_of_events.times { logstash_service.write_to_stdin("Hello world") }
-    
+
     begin
       sleep(1) while (result = logstash_service.monitoring_api.event_stats).nil?
     rescue
@@ -32,4 +36,15 @@
     end
   end
 
+  it "can retrieve JVM stats" do
+    logstash_service = @fixture.get_service("logstash")
+    logstash_service.start_with_stdin
+    logstash_service.wait_for_logstash
+
+    Stud.try(max_retry.times, RSpec::Expectations::ExpectationNotMetError) do
+       result = logstash_service.monitoring_api.node_stats
+       expect(result["jvm"]["uptime_in_millis"]).to be > 100
+    end
+  end
+
 end
