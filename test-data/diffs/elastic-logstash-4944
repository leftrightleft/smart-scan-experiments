diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index c92da0f0112..adc688898c5 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -166,12 +166,14 @@ def execute
     if config_test?
       config_loader = LogStash::Config::Loader.new(@logger)
       config_str = config_loader.format_config(config_path, config_string)
-      config_error = LogStash::Pipeline.config_valid?(config_str)
-      if config_error == true
+      begin
+        # currently the best strategy to validate the configuration
+        # is creating a pipeline instance and checking for exceptions
+        LogStash::Pipeline.new(config_str)
         @logger.terminal "Configuration OK"
         return 0
-      else
-        @logger.fatal I18n.t("logstash.error", :error => config_error)
+      rescue => e
+        @logger.fatal I18n.t("logstash.agent.invalid-configuration", :error => e.message)
         return 1
       end
     end
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index a1ba15388eb..fad68a0b2f8 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -34,15 +34,6 @@ module LogStash; class Pipeline
     "LogStash::Inputs::Stdin"
   ]
 
-  def self.validate_config(config_str, settings = {})
-    begin
-      # There should be a better way to test this
-      self.new(config_str, settings)
-    rescue => e
-      e.message
-    end
-  end
-
   def initialize(config_str, settings = {})
     @config_str = config_str
     @original_settings = settings
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 78fa5767d0b..3da1afff9f9 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -59,6 +59,8 @@ en:
       missing-configuration: >-
         No configuration file was specified. Perhaps you forgot to provide
         the '-f yourlogstash.conf' flag?
+      invalid-configuration: >-
+        The given configuration is invalid. Reason: %{error}
       reload-without-config-path: >-
         Configuration reloading also requires passing a configuration path with '-f yourlogstash.conf'
       error: >-
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 31e73507013..85ca45f5d5c 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -10,7 +10,7 @@
   subject { LogStash::Agent.new("", "") }
 
   before :each do
-    [:log, :info, :warn, :error, :fatal, :debug].each do |level|
+    [:log, :info, :warn, :error, :fatal, :debug, :terminal].each do |level|
       allow(logger).to receive(level)
     end
     [:info?, :warn?, :error?, :fatal?, :debug?].each do |level|
@@ -296,6 +296,24 @@
     end
   end
 
+  describe "--config-test" do
+    let(:cli_args) { ["-t", "-e", pipeline_string] }
+
+    context "with a good configuration" do
+      let(:pipeline_string) { "input { } filter { } output { }" }
+      it "should exit successfuly" do
+        expect(subject.run(cli_args)).to eq(0)
+      end
+    end
+
+    context "with a bad configuration" do
+      let(:pipeline_string) { "rlwekjhrewlqrkjh" }
+      it "should fail by returning a bad exit code" do
+        expect(subject.run(cli_args)).to eq(1)
+      end
+    end
+  end
+
   describe "pipeline settings" do
     let(:pipeline_string) { "input { stdin {} } output { stdout {} }" }
     let(:main_pipeline_settings) { { :pipeline_id => "main" } }
