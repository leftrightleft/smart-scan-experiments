diff --git a/.ruby-version b/.ruby-version
new file mode 100644
index 00000000000..5d83b41620e
--- /dev/null
+++ b/.ruby-version
@@ -0,0 +1 @@
+jruby-1.7.27
diff --git a/bin/logstash-plugin.bat b/bin/logstash-plugin.bat
index 4248264869f..387eec3c06b 100644
--- a/bin/logstash-plugin.bat
+++ b/bin/logstash-plugin.bat
@@ -1,15 +1,15 @@
 @echo off
-
-SETLOCAL
-
-set SCRIPT_DIR=%~dp0
-CALL "%SCRIPT_DIR%\setup.bat"
-
-:EXEC
-if "%VENDORED_JRUBY%" == "" (
-  %RUBYCMD% "%LS_HOME%\lib\pluginmanager\main.rb" %*
-) else (
-  %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\pluginmanager\main.rb" %*
+setlocal enabledelayedexpansion
+set params='%*'
+
+call "%~dp0setup.bat" || exit /b 1
+if errorlevel 1 (
+	if not defined nopauseonerror (
+		pause
+	)
+	exit /B %ERRORLEVEL%
 )
 
-ENDLOCAL
+%JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\pluginmanager\main.rb" %*
+
+endlocal
\ No newline at end of file
diff --git a/bin/logstash.bat b/bin/logstash.bat
index b773bc6c52d..055d085cdf3 100644
--- a/bin/logstash.bat
+++ b/bin/logstash.bat
@@ -1,26 +1,51 @@
 @echo off
+setlocal enabledelayedexpansion
+set params='%*'
 
-SETLOCAL
-
-set SCRIPT_DIR=%~dp0
-CALL "%SCRIPT_DIR%\setup.bat"
-
-:EXEC
-REM is the first argument a flag? If so, assume 'agent'
-set first_arg=%1
-setlocal EnableDelayedExpansion
-if "!first_arg:~0,1!" equ "-" (
-  if "%VENDORED_JRUBY%" == "" (
-    %RUBYCMD% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
-  ) else (
-    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
-  )
+call "%~dp0setup.bat" || exit /b 1
+if errorlevel 1 (
+	if not defined nopauseonerror (
+		pause
+	)
+	exit /B %ERRORLEVEL%
+)
+
+rem iterate over the command line args and look for the argument
+rem after --path.settings to see if the jvm.options file is in
+rem that path and set LS_JVM_OPTIONS_CONFIG accordingly
+:loop
+for /F "usebackq tokens=1-2* delims= " %%A in (!params!) do (
+    set current=%%A
+    set next=%%B
+    set params='%%B %%C'
+
+    if "!current!" == "--path.settings" (
+    	if exist !next!\jvm.options (
+    	  set "LS_JVM_OPTIONS_CONFIG=!next!\jvm.options"
+    	)
+    )
+
+    if not "x!params!" == "x" (
+		goto loop
+	)
+)
+
+rem if explicit jvm.options is not found use default location
+if "%LS_JVM_OPTIONS_CONFIG%" == "" (
+  set LS_JVM_OPTIONS_CONFIG=%LS_HOME%\config\jvm.options
+)
+
+rem extract the options from the JVM options file %LS_JVM_OPTIONS_CONFIG%
+rem such options are the lines beginning with '-', thus "findstr /b"
+if exist %LS_JVM_OPTIONS_CONFIG% (
+  for /F "usebackq delims=" %%a in (`findstr /b \- %LS_JVM_OPTIONS_CONFIG%`) do set options=!options! %%a
+  set "LS_JAVA_OPTS=!options! %LS_JAVA_OPTS%"
 ) else (
-  if "%VENDORED_JRUBY%" == "" (
-    %RUBYCMD% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
-  ) else (
-    %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
-  )
+  echo "warning: no jvm.options file found"
 )
+set JAVA_OPTS=%LS_JAVA_OPTS%
+
+rem jruby launcher will pickup JAVA_OPTS set above to set the JVM options before launching jruby
+%JRUBY_BIN% "%LS_HOME%\lib\bootstrap\environment.rb" "logstash\runner.rb" %*
 
-ENDLOCAL
+endlocal
diff --git a/bin/rspec.bat b/bin/rspec.bat
index 52ce84dca74..6540dae7146 100644
--- a/bin/rspec.bat
+++ b/bin/rspec.bat
@@ -1,15 +1,30 @@
 @echo off
+setlocal enabledelayedexpansion
+set params='%*'
 
-SETLOCAL
+call "%~dp0setup.bat" || exit /b 1
+if errorlevel 1 (
+	if not defined nopauseonerror (
+		pause
+	)
+	exit /B %ERRORLEVEL%
+)
 
-set SCRIPT_DIR=%~dp0
-CALL "%SCRIPT_DIR%\setup.bat"
+rem if explicit jvm.options is not found use default location
+if "%LS_JVM_OPTIONS_CONFIG%" == "" (
+  set LS_JVM_OPTIONS_CONFIG=%LS_HOME%\config\jvm.options
+)
 
-:EXEC
-if "%VENDORED_JRUBY%" == "" (
-  %RUBYCMD% "%LS_HOME%\lib\bootstrap\rspec.rb" %*
+rem extract the options from the JVM options file %LS_JVM_OPTIONS_CONFIG%
+rem such options are the lines beginning with '-', thus "findstr /b"
+if exist %LS_JVM_OPTIONS_CONFIG% (
+  for /F "usebackq delims=" %%a in (`findstr /b \- %LS_JVM_OPTIONS_CONFIG%`) do set options=!options! %%a
+  set "LS_JAVA_OPTS=!options! %LS_JAVA_OPTS%"
 ) else (
-  %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\bootstrap\rspec.rb" %*
+  echo "warning: no jvm.options file found"
 )
+set JAVA_OPTS=%LS_JAVA_OPTS%
+
+%JRUBY_BIN% "%LS_HOME%\lib\bootstrap\rspec.rb" %*
 
-ENDLOCAL
+endlocal
diff --git a/bin/setup.bat b/bin/setup.bat
index 6d336f0b945..3ac93d66fed 100644
--- a/bin/setup.bat
+++ b/bin/setup.bat
@@ -1,93 +1,55 @@
 @echo off
 
-for %%I in ("%SCRIPT_DIR%..") do set LS_HOME=%%~dpfI
+set SCRIPT=%0
 
-if "%USE_RUBY%" == "1" (
-goto setup_ruby
-) else (
-goto setup_jruby
-)
+rem ### 1: determine logstash home
 
-:setup_ruby
-set RUBYCMD=ruby
-set VENDORED_JRUBY=
-goto finally
+rem  to do this, we strip from the path until we
+rem find bin, and then strip bin (there is an assumption here that there is no
+rem nested directory under bin also named bin)
 
-:setup_jruby
-REM setup_java()
-IF NOT DEFINED JAVA_HOME (
-  FOR %%I IN (java.exe) DO set JAVA_EXE=%%~$PATH:I
+for %%I in (%SCRIPT%) do set LS_HOME=%%~dpI
+
+:ls_home_loop
+for %%I in ("%LS_HOME:~1,-1%") do set DIRNAME=%%~nxI
+if not "%DIRNAME%" == "bin" (
+  for %%I in ("%LS_HOME%..") do set LS_HOME=%%~dpfI
+  goto ls_home_loop
 )
-if defined JAVA_EXE set JAVA_HOME=%JAVA_EXE:\bin\java.exe=%
-if defined JAVA_EXE echo Using JAVA_HOME=%JAVA_HOME% retrieved from PATH
+for %%I in ("%LS_HOME%..") do set LS_HOME=%%~dpfI
 
-if not defined JAVA_HOME goto missing_java_home
-REM ***** JAVA options *****
+rem ### 2: set java
 
-if "%LS_HEAP_SIZE%" == "" (
-    set LS_HEAP_SIZE=1g
+if defined JAVA_HOME (
+  set JAVA="%JAVA_HOME%\bin\java.exe"
+) else (
+  for %%I in (java.exe) do set JAVA="%%~$PATH:I"
 )
 
-IF NOT "%JAVA_OPTS%" == "" (
-    ECHO JAVA_OPTS was set to [%JAVA_OPTS%]. Logstash will trust these options, and not set any defaults that it might usually set
-    goto opts_defined
+if not exist %JAVA% (
+  echo could not find java; set JAVA_HOME or ensure java is in PATH 1>&2
+  exit /b 1
 )
 
-    SET JAVA_OPTS=%JAVA_OPTS% -Xmx%LS_HEAP_SIZE%
-
-    REM Enable aggressive optimizations in the JVM
-    REM    - Disabled by default as it might cause the JVM to crash
-    REM set JAVA_OPTS=%JAVA_OPTS% -XX:+AggressiveOpts
-
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:+UseParNewGC
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:+UseConcMarkSweepGC
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:+CMSParallelRemarkEnabled
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:SurvivorRatio=8
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:MaxTenuringThreshold=1
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:CMSInitiatingOccupancyFraction=75
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:+UseCMSInitiatingOccupancyOnly
-
-    REM GC logging options -- uncomment to enable
-    REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCDetails
-    REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCTimeStamps
-    REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintClassHistogram
-    REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintTenuringDistribution
-    REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCApplicationStoppedTime
-    REM JAVA_OPTS=%JAVA_OPTS% -Xloggc:/var/log/logstash/gc.log
-
-    REM Causes the JVM to dump its heap on OutOfMemory.
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:+HeapDumpOnOutOfMemoryError
-    REM The path to the heap dump location, note directory must exists and have enough
-    REM space for a full heap dump.
-    SET JAVA_OPTS=%JAVA_OPTS% -XX:HeapDumpPath="%LS_HOME%/heapdump.hprof"
-:opts_defined
-
-
-IF NOT "%LS_JAVA_OPTS%" == "" (
-    ECHO LS_JAVA_OPTS was set to [%LS_JAVA_OPTS%]. This will be appended to the JAVA_OPTS [%JAVA_OPTS%]
-    SET JAVA_OPTS=%JAVA_OPTS% %LS_JAVA_OPTS%
+rem do not let JAVA_TOOL_OPTIONS slip in (as the JVM does by default)
+if not "%JAVA_TOOL_OPTIONS%" == "" (
+  echo "warning: ignoring JAVA_TOOL_OPTIONS=$JAVA_TOOL_OPTIONS"
+  set JAVA_TOOL_OPTIONS=
 )
 
-REM setup_vendored_jruby()
-set JRUBY_BIN="%LS_HOME%\vendor\jruby\bin\jruby"
-if exist "%JRUBY_BIN%" (
-  set VENDORED_JRUBY=1
-goto finally
-) else (
-goto missing_jruby
+rem JAVA_OPTS is not a built-in JVM mechanism but some people think it is so we
+rem warn them that we are not observing the value of %JAVA_OPTS%
+if not "%JAVA_OPTS%" == "" (
+  echo|set /p="warning: ignoring JAVA_OPTS=%JAVA_OPTS%; "
+  echo pass JVM parameters via LS_JAVA_OPTS
 )
 
-:missing_java_home
-echo JAVA_HOME environment variable must be set!
-exit /b
-echo Done
+rem ### 3: set jruby
 
-:missing_jruby
-echo Unable to find JRuby.
-echo If you are a user, this is a bug.
-echo If you are a developer, please run 'rake bootstrap'. Running 'rake' requires the 'ruby' program be available.
-exit /b
-
-:finally
+set JRUBY_BIN="%LS_HOME%\vendor\jruby\bin\jruby"
+if not exist "%JRUBY_BIN%" (
+  echo "could not find jruby in %LS_HOME%\vendor\jruby" 1>&2
+  exit /b 1
+)
 
 set RUBYLIB=%LS_HOME%\lib
diff --git a/ci/ci_test.bat b/ci/ci_test.bat
new file mode 100644
index 00000000000..e3a4467b9cf
--- /dev/null
+++ b/ci/ci_test.bat
@@ -0,0 +1,41 @@
+@echo off
+
+setlocal
+
+REM Since we are using the system jruby, we need to make sure our jvm process
+REM uses at least 1g of memory, If we don't do this we can get OOM issues when
+REM installing gems. See https://github.com/elastic/logstash/issues/5179
+
+SET JRUBY_OPTS="-J-Xmx1g"
+SET SELECTEDTESTSUITE=%1
+SET /p JRUBYVERSION=<.ruby-version
+
+IF NOT EXIST %JRUBYSRCDIR% (
+  echo "Variable JRUBYSRCDIR must be declared with a valid directory. Aborting.."
+  exit /B 1
+)
+
+SET JRUBYPATH=%JRUBYSRCDIR%\%JRUBYVERSION%
+
+IF NOT EXIST %JRUBYPATH% (
+  echo "Could not find JRuby in %JRUBYPATH%. Aborting.."
+  exit /B 1
+)
+
+SET RAKEPATH=%JRUBYPATH%\bin\rake
+
+IF "%SELECTEDTESTSUITE%"=="core-fail-fast" (
+  echo "Running core-fail-fast tests"
+  %RAKEPATH% test:install-core
+  %RAKEPATH% test:core-fail-fast
+) ELSE (
+  IF "%SELECTEDTESTSUITE%"=="all" (
+    echo "Running all plugins tests"
+    %RAKEPATH% test:install-all
+    %RAKEPATH% test:plugins
+  ) ELSE (
+    echo "Running core tests"
+    %RAKEPATH% test:install-core
+    %RAKEPATH% test:core
+  )
+)
diff --git a/lib/pluginmanager/utils/downloader.rb b/lib/pluginmanager/utils/downloader.rb
index 0d520febfaa..d2092f22188 100644
--- a/lib/pluginmanager/utils/downloader.rb
+++ b/lib/pluginmanager/utils/downloader.rb
@@ -68,7 +68,7 @@ def fetch(redirect_count = 0)
           downloaded_file.path
         end
       rescue => e
-        downloaded_file.close rescue nil
+        downloaded_file.close unless downloaded_file.closed?
         FileUtils.rm_rf(download_to)
         raise e
       end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 2116796af81..1bdebe119c3 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -226,7 +226,8 @@ def execute
     java.lang.System.setProperty("ls.log.level", setting("log.level"))
     unless java.lang.System.getProperty("log4j.configurationFile")
       log4j_config_location = ::File.join(setting("path.settings"), "log4j2.properties")
-      LogStash::Logging::Logger::initialize("file:///" + log4j_config_location)
+      file_schema = "file://" + (LogStash::Environment.windows? ? "/" : "")
+      LogStash::Logging::Logger::initialize(URI.join(file_schema + File.absolute_path(log4j_config_location)).to_s)
     end
     # override log level that may have been introduced from a custom log4j config file
     LogStash::Logging::Logger::configure_logging(setting("log.level"))
diff --git a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
index 2250e885e1a..922190383b9 100644
--- a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
@@ -70,7 +70,7 @@
       "cpu"=>{
         "total_in_millis"=>Numeric,
         "percent"=>Numeric,
-        "load_average" => { "1m" => Numeric }
+        # load_average is not supported on Windows, set it below
       }
     },
    "pipeline" => {
@@ -88,5 +88,9 @@
    }
   }
 
+  unless LogStash::Environment.windows?
+    root_structure["process"]["cpu"]["load_average"] = { "1m" => Numeric }
+  end
+
   test_api_and_resources(root_structure)
 end
diff --git a/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb b/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
index 530f27f74bb..093517090c5 100644
--- a/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_dlq_commit_spec.rb
@@ -67,7 +67,7 @@ def close() end
   end
 
   after(:each) do
-    FileUtils.remove_entry pipeline_settings["path.dead_letter_queue"]
+    FileUtils.rm_rf(pipeline_settings["path.dead_letter_queue"])
   end
 
   context "dlq is enabled" do
@@ -85,6 +85,7 @@ def close() end
       entry = dlq_reader.pollEntry(40)
       expect(entry).to_not be_nil
       expect(entry.reason).to eq("my reason")
+      subject.shutdown
     end
   end
 
@@ -101,6 +102,7 @@ def close() end
       subject.run
       dlq_path = java.nio.file.Paths.get(pipeline_settings_obj.get("path.dead_letter_queue"), pipeline_id)
       expect(java.nio.file.Files.exists(dlq_path)).to eq(false)
+      subject.shutdown
     end
   end
 
diff --git a/logstash-core/spec/logstash/settings/writable_directory_spec.rb b/logstash-core/spec/logstash/settings/writable_directory_spec.rb
index 4463ca82db1..be00ce9f04f 100644
--- a/logstash-core/spec/logstash/settings/writable_directory_spec.rb
+++ b/logstash-core/spec/logstash/settings/writable_directory_spec.rb
@@ -3,17 +3,17 @@
 require "logstash/settings"
 require "tmpdir"
 require "socket" # for UNIXSocket
+require "fileutils"
 
 describe LogStash::Setting::WritableDirectory do
-  let(:mode_rx) { 0555 }
   # linux is 108, Macos is 104, so use a safe value
   # Stud::Temporary.pathname, will exceed that size without adding anything
   let(:parent) { File.join(Dir.tmpdir, Time.now.to_f.to_s) }
   let(:path) { File.join(parent, "fancy") }
 
   before { Dir.mkdir(parent) }
-  after { Dir.exist?(path) && Dir.unlink(path) rescue nil }
-  after { Dir.unlink(parent) }
+  after { Dir.exist?(path) && FileUtils.rm_rf(path)}
+  after { FileUtils.rm_rf(parent) }
 
   shared_examples "failure" do
     before { subject.set(path) }
@@ -44,8 +44,9 @@
       end
 
       context "and the directory cannot be created" do
-        before { File.chmod(mode_rx, parent) }
         it "should fail" do
+          # using chmod does not work on Windows better mock and_raise("message")
+          expect(FileUtils).to receive(:mkdir_p).and_raise("foobar")
           expect { subject.value }.to raise_error
         end
       end
@@ -66,7 +67,8 @@
       end
 
       context "but is not writable" do
-        before { File.chmod(0, path) }
+        # chmod does not work on Windows, mock writable? instead
+        before { expect(File).to receive(:writable?).and_return(false) }
         it_behaves_like "failure"
       end
     end
@@ -84,12 +86,13 @@
         before { socket } # realize `socket` value
         after { socket.close }
         it_behaves_like "failure"
-      end
+      end unless LogStash::Environment.windows?
 
+      
       context "but is a symlink" do
-        before { File::symlink("whatever", path) }
+        before { FileUtils.symlink("whatever", path) }
         it_behaves_like "failure"
-      end
+      end unless LogStash::Environment.windows?
     end
 
     context "when the directory is missing" do
@@ -114,8 +117,8 @@
 
       context "and cannot be created" do
         before do
-          # Remove write permission on the parent
-          File.chmod(mode_rx, parent)
+          # chmod does not work on Windows, mock writable? instead
+          expect(File).to receive(:writable?).and_return(false)
         end
 
         it_behaves_like "failure"
diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
index 49a70263be5..ad68bec3030 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueWriter.java
@@ -142,14 +142,34 @@ private void innerWriteEntry(DLQEntry entry) throws IOException {
 
 
     public synchronized void close() throws IOException {
-        this.lock.release();
         if (currentWriter != null) {
-            currentWriter.close();
+            try {
+                currentWriter.close();
+                open = false;
+            }catch (Exception e){
+                logger.debug("Unable to close dlq writer", e);
+            }
         }
-        Files.deleteIfExists(queuePath.resolve(LOCK_FILE));
-        open = false;
+        releaseLock();
     }
 
+    private void releaseLock() {
+        if (this.lock != null){
+            try {
+                this.lock.release();
+                if (this.lock.channel() != null && this.lock.channel().isOpen()) {
+                    this.lock.channel().close();
+                }
+            } catch (Exception e) {
+                logger.debug("Unable to close lock channel", e);
+            }
+            try {
+                Files.deleteIfExists(queuePath.resolve(LOCK_FILE));
+            } catch (IOException e){
+                logger.debug("Unable to delete lock file", e);
+            }
+        }
+    }
     public boolean isOpen() {
         return open;
     }
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
index 65a08773951..58a541f2133 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
@@ -8,6 +8,7 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assume.assumeTrue;
 
 public class ProcessMonitorTest {
 
@@ -15,6 +16,7 @@ public class ProcessMonitorTest {
     @Test
     public void testReportFDStats(){
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("open_file_descriptors", (Long)processStats.get("open_file_descriptors") > 0L, is(true));
         assertThat("max_file_descriptors", (Long)processStats.get("max_file_descriptors") > 0L, is(true));
     }
@@ -22,6 +24,7 @@ public void testReportFDStats(){
     @Test
     public void testReportCpuStats(){
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("cpu", processStats.get("cpu"), instanceOf(Map.class));
         Map cpuStats = ((Map)processStats.get("cpu"));
         assertThat("cpu.process_percent", (Short)cpuStats.get("process_percent") >= 0, is(true));
@@ -32,6 +35,7 @@ public void testReportCpuStats(){
     @Test
     public void testReportMemStats() {
         Map<String, Object> processStats = new ProcessMonitor().detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("mem", processStats.get("mem"), instanceOf(Map.class));
         Map memStats = ((Map)processStats.get("mem"));
         assertThat("mem.total_virtual_in_bytes", (Long)memStats.get("total_virtual_in_bytes") >= 0L, is(true));
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
index 54059a5e061..806649650a2 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
@@ -14,10 +14,12 @@ public class SystemMonitorTest {
     @Test
     public void systemMonitorTest(){
         Map<String, Object> map = new SystemMonitor().detect().toMap();
-        assertThat("system.load_average is missing", (Double)map.get("system.load_average") > 0, is(true));
+        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
+        if (!((String) map.get("os.name")).startsWith("Windows")) {
+            assertThat("system.load_average is missing", (Double) map.get("system.load_average") > 0, is(true));
+        }
         assertThat("system.available_processors is missing ", ((Integer)map.get("system.available_processors")) > 0, is(true));
         assertThat("os.version is missing", map.get("os.version"), allOf(notNullValue(), instanceOf(String.class)));
         assertThat("os.arch is missing", map.get("os.arch"), allOf(notNullValue(), instanceOf(String.class)));
-        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
     }
 }
diff --git a/spec/unit/plugin_manager/pack_fetch_strategy/uri_spec.rb b/spec/unit/plugin_manager/pack_fetch_strategy/uri_spec.rb
index 09effdb909c..210b32d5b9c 100644
--- a/spec/unit/plugin_manager/pack_fetch_strategy/uri_spec.rb
+++ b/spec/unit/plugin_manager/pack_fetch_strategy/uri_spec.rb
@@ -32,10 +32,12 @@
     let(:temporary_file) do
       f = Stud::Temporary.file
       f.write("hola")
+      f.close
       f.path
     end
 
-    let(:plugin_path) { "file://#{temporary_file}" }
+    # Windows safe way to produce a file: URI.
+    let(:plugin_path) { URI.join("file:///" + File.absolute_path(temporary_file)).to_s }
 
     it "returns a `LocalInstaller`" do
       expect(subject.get_installer_for(plugin_path)).to be_kind_of(LogStash::PluginManager::PackInstaller::Local)
diff --git a/spec/unit/plugin_manager/prepare_offline_pack_spec.rb b/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
index aa9376c91cf..9c55457d0dd 100644
--- a/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
+++ b/spec/unit/plugin_manager/prepare_offline_pack_spec.rb
@@ -79,6 +79,10 @@
         expect(LogStash::PluginManager::OfflinePluginPackager).not_to receive(:package).with(anything)
       end
 
+      after do
+        FileUtils.rm_rf(tmp_zip_file)
+      end
+
       it "fails to do any action" do
         expect { subject.run(cmd_args) }.to raise_error Clamp::ExecutionError, /you must specify a filename/
       end
@@ -101,13 +105,18 @@
         FileUtils.touch(tmp_zip_file)
       end
 
+      after do
+        FileUtils.rm_f(tmp_zip_file)
+      end
+
       context "without `--overwrite`" do
         before do
           expect(LogStash::PluginManager::OfflinePluginPackager).not_to receive(:package).with(anything)
         end
 
         it "should fails" do
-          expect { subject.run(cmd_args) }.to raise_error Clamp::ExecutionError, /output file destination #{tmp_zip_file} already exist/
+          # ignore the first path part of tmp_zip_file because on Windows the long path is shrinked in the exception message 
+          expect { subject.run(cmd_args) }.to raise_error Clamp::ExecutionError, /output file destination .+#{::File.basename(tmp_zip_file)} already exist/
         end
       end
 
diff --git a/spec/unit/plugin_manager/utils/downloader_spec.rb b/spec/unit/plugin_manager/utils/downloader_spec.rb
index e08e731af01..2f7a105eb95 100644
--- a/spec/unit/plugin_manager/utils/downloader_spec.rb
+++ b/spec/unit/plugin_manager/utils/downloader_spec.rb
@@ -56,7 +56,7 @@
       let(:temporary_path) { Stud::Temporary.pathname }
 
       before do
-        expect_any_instance_of(::File).to receive(:close).at_least(:twice).and_raise("Didn't work")
+        expect(Net::HTTP::Get).to receive(:new).once.and_raise("Didn't work")
         expect(Stud::Temporary).to receive(:pathname).and_return(temporary_path)
       end
 
diff --git a/tools/ingest-converter/build.gradle b/tools/ingest-converter/build.gradle
index ce272b5a6f0..128b2573a92 100644
--- a/tools/ingest-converter/build.gradle
+++ b/tools/ingest-converter/build.gradle
@@ -25,6 +25,7 @@ buildscript {
 dependencies {
   compile 'net.sf.jopt-simple:jopt-simple:5.0.3'
   testCompile "junit:junit:4.12"
+  testCompile 'commons-io:commons-io:2.5'
 }
 
 javadoc {
diff --git a/tools/ingest-converter/src/test/java/org/logstash/ingest/IngestTest.java b/tools/ingest-converter/src/test/java/org/logstash/ingest/IngestTest.java
index ba44db39b83..3cb11a287f5 100644
--- a/tools/ingest-converter/src/test/java/org/logstash/ingest/IngestTest.java
+++ b/tools/ingest-converter/src/test/java/org/logstash/ingest/IngestTest.java
@@ -1,9 +1,14 @@
 package org.logstash.ingest;
 
+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
+import java.util.regex.Pattern;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.net.URL;
+import org.apache.commons.io.IOUtils;
 import org.junit.Rule;
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
@@ -19,6 +24,17 @@
 @RunWith(Parameterized.class)
 public abstract class IngestTest {
 
+    /**
+     * Used to normalize line endings since static reference result files have Unix line endings.
+     */
+    private static final Pattern CR_LF =
+        Pattern.compile("\\r\\n");
+
+    /**
+     * Used to normalize line endings since static reference result files have Unix line endings.
+     */
+    private static final Pattern CARRIAGE_RETURN = Pattern.compile("\\r");
+
     @Rule
     public TemporaryFolder temp = new TemporaryFolder();
 
@@ -26,12 +42,12 @@ public abstract class IngestTest {
     public String testCase;
     
     protected final void assertCorrectConversion(final Class clazz) throws Exception {
-        final String append = getResultPath(temp);
+        final URL append = getResultPath(temp);
         clazz.getMethod("main", String[].class).invoke(
             null,
             (Object) new String[]{
-                String.format("--input=file://%s", resourcePath(String.format("ingest%s.json", testCase))),
-                String.format("--output=file://%s", append)
+                String.format("--input=%s", resourcePath(String.format("ingest%s.json", testCase))),
+                String.format("--output=%s", append)
             }
         );
         assertThat(
@@ -39,15 +55,30 @@ protected final void assertCorrectConversion(final Class clazz) throws Exception
         );
     } 
     
-    static String utf8File(final String path) throws IOException {
-        return new String(Files.readAllBytes(Paths.get(path)), StandardCharsets.UTF_8);
+    /**
+     * Reads a file, normalizes line endings to Unix line endings and returns the whole content
+     * as a String.
+     * @param path Url to read
+     * @return String content of the URL
+     * @throws IOException On failure to read from given URL
+     */
+    private static String utf8File(final URL path) throws IOException {
+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        try (final InputStream input = path.openStream()) {
+            IOUtils.copy(input, baos);
+        }
+        return CARRIAGE_RETURN.matcher(
+            CR_LF.matcher(
+                baos.toString(StandardCharsets.UTF_8.name())
+            ).replaceAll("\n")
+        ).replaceAll("\n");
     }
 
-    static String resourcePath(final String name) {
-        return IngestTest.class.getResource(name).getPath();
+    private static URL resourcePath(final String name) {
+        return IngestTest.class.getResource(name);
     }
 
-    static String getResultPath(TemporaryFolder temp) throws IOException {
-        return temp.newFolder().toPath().resolve("converted").toString();
+    private static URL getResultPath(TemporaryFolder temp) throws IOException {
+        return temp.newFolder().toPath().resolve("converted").toUri().toURL();
     }
 }
