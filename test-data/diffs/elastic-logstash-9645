diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 70c7cbcbbbe..ee141239a69 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -38,6 +38,7 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
     @pipeline_bus = org.logstash.plugins.pipeline.PipelineBus.new
 
     @pipelines = java.util.concurrent.ConcurrentHashMap.new();
+    @converge_state_mutex = Mutex.new
 
     @name = setting("node.name")
     @http_host = setting("http.host")
@@ -130,35 +131,41 @@ def stopped?
   end
 
   def converge_state_and_update
-    results = @source_loader.fetch
-
-    unless results.success?
-      if auto_reload?
-        logger.debug("Could not fetch the configuration to converge, will retry", :message => results.error, :retrying_in => @reload_interval)
-        return
-      else
-        raise "Could not fetch the configuration, message: #{results.error}"
+    # We want to enforce that only one state converge event can happen at a time
+    # This is especially important in tests, where code will invoke the agent, then
+    # call this method directly
+    # TODO: Switch to an explicit queue for pending changes?
+    @converge_state_mutex.synchronize do
+      results = @source_loader.fetch
+
+      unless results.success?
+        if auto_reload?
+          logger.debug("Could not fetch the configuration to converge, will retry", :message => results.error, :retrying_in => @reload_interval)
+          return
+        else
+          raise "Could not fetch the configuration, message: #{results.error}"
+        end
       end
-    end
 
-    # We Lock any access on the pipelines, since the actions will modify the
-    # content of it.
-    converge_result = nil
+      # We Lock any access on the pipelines, since the actions will modify the
+      # content of it.
+      converge_result = nil
 
-    pipeline_actions = resolve_actions(results.response)
-    converge_result = converge_state(pipeline_actions)
-    update_metrics(converge_result)
+      pipeline_actions = resolve_actions(results.response)
+      converge_result = converge_state(pipeline_actions)
+      update_metrics(converge_result)
 
-    logger.info(
-        "Pipelines running",
-        :count => running_pipelines.size,
-        :running_pipelines => running_pipelines.keys,
-        :non_running_pipelines => non_running_pipelines.keys
-    ) if converge_result.success? && converge_result.total > 0
+      logger.info(
+          "Pipelines running",
+          :count => running_pipelines.size,
+          :running_pipelines => running_pipelines.keys,
+          :non_running_pipelines => non_running_pipelines.keys
+      ) if converge_result.success? && converge_result.total > 0
 
-    dispatch_events(converge_result)
+      dispatch_events(converge_result)
 
-    converge_result
+      converge_result
+    end
   rescue => e
     logger.error("An exception happened when converging configuration", :exception => e.class, :message => e.message, :backtrace => e.backtrace)
   end
