diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 401daebf914..93ec823c561 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -26,7 +26,7 @@
 require "logstash/config/lir_serializer"
 require "logstash/worker_loop_thread"
 
-module LogStash; class JavaPipeline < JavaBasePipeline
+module LogStash; class JavaPipeline < AbstractPipeline
   include LogStash::Util::Loggable
 
   java_import org.apache.logging.log4j.ThreadContext
diff --git a/logstash-core/lib/logstash/pipeline_action/reload.rb b/logstash-core/lib/logstash/pipeline_action/reload.rb
index 9b7c66b5999..55dc2e86213 100644
--- a/logstash-core/lib/logstash/pipeline_action/reload.rb
+++ b/logstash-core/lib/logstash/pipeline_action/reload.rb
@@ -48,7 +48,7 @@ def execute(agent, pipelines_registry)
       end
 
       begin
-        pipeline_validator = LogStash::JavaBasePipeline.new(@pipeline_config, nil, logger, nil)
+        pipeline_validator = LogStash::AbstractPipeline.new(@pipeline_config, nil, logger, nil)
       rescue => e
         return LogStash::ConvergeResult::FailedAction.from_exception(e)
       end
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index abf86480298..564f51bc085 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -47,7 +47,6 @@
 import org.logstash.execution.ConvergeResultExt;
 import org.logstash.execution.EventDispatcherExt;
 import org.logstash.execution.ExecutionContextExt;
-import org.logstash.execution.JavaBasePipelineExt;
 import org.logstash.execution.PipelineReporterExt;
 import org.logstash.execution.QueueReadClientBase;
 import org.logstash.execution.ShutdownWatcherExt;
@@ -239,8 +238,6 @@ public final class RubyUtil {
 
     public static final RubyClass ABSTRACT_PIPELINE_CLASS;
 
-    public static final RubyClass JAVA_PIPELINE_CLASS;
-
     /**
      * Logstash Ruby Module.
      */
@@ -488,9 +485,6 @@ public final class RubyUtil {
         LOGGABLE_MODULE.defineAnnotatedMethods(LoggableExt.class);
         ABSTRACT_PIPELINE_CLASS =
             setupLogstashClass(AbstractPipelineExt::new, AbstractPipelineExt.class);
-        JAVA_PIPELINE_CLASS = setupLogstashClass(
-            ABSTRACT_PIPELINE_CLASS, JavaBasePipelineExt::new, JavaBasePipelineExt.class
-        );
         final RubyModule json = LOGSTASH_MODULE.defineOrGetModuleUnder("Json");
         final RubyClass stdErr = RUBY.getStandardError();
         LOGSTASH_ERROR = LOGSTASH_MODULE.defineClassUnder(
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
index 9ae7ad14429..28a52b0b22c 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaInputDelegatorExt.java
@@ -29,7 +29,7 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
-import org.logstash.execution.JavaBasePipelineExt;
+import org.logstash.execution.AbstractPipelineExt;
 import org.logstash.execution.queue.QueueWriter;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
@@ -45,7 +45,7 @@ public class JavaInputDelegatorExt extends RubyObject {
 
     private AbstractNamespacedMetricExt metric;
 
-    private JavaBasePipelineExt pipeline;
+    private AbstractPipelineExt pipeline;
 
     private transient Input input;
 
@@ -55,7 +55,7 @@ public JavaInputDelegatorExt(Ruby runtime, RubyClass metaClass) {
         super(runtime, metaClass);
     }
 
-    public static JavaInputDelegatorExt create(final JavaBasePipelineExt pipeline,
+    public static JavaInputDelegatorExt create(final AbstractPipelineExt pipeline,
                                                final AbstractNamespacedMetricExt metric, final Input input,
                                                final Map<String, Object> pluginArgs) {
         final JavaInputDelegatorExt instance =
diff --git a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
index 5e68297d831..edbdd18dd61 100644
--- a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
@@ -31,10 +31,12 @@
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 import java.util.UUID;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.stream.Stream;
 
 import com.google.common.annotations.VisibleForTesting;
 import org.apache.commons.codec.binary.Hex;
@@ -43,6 +45,7 @@
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
 import org.jruby.RubyBasicObject;
+import org.jruby.RubyBoolean;
 import org.jruby.RubyClass;
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
@@ -58,13 +61,16 @@
 import org.logstash.ackedqueue.ext.JRubyWrappedAckedQueueExt;
 import org.logstash.common.DeadLetterQueueFactory;
 import org.logstash.common.EnvironmentVariableProvider;
+import org.logstash.common.IncompleteSourceWithMetadataException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.common.io.DeadLetterQueueWriter;
 import org.logstash.common.io.QueueStorageType;
+import org.logstash.config.ir.CompiledPipeline;
 import org.logstash.config.ir.ConfigCompiler;
 import org.logstash.config.ir.InvalidIRException;
 import org.logstash.config.ir.PipelineConfig;
 import org.logstash.config.ir.PipelineIR;
+import org.logstash.execution.queue.QueueWriter;
 import org.logstash.ext.JRubyAbstractQueueWriteClientExt;
 import org.logstash.ext.JRubyWrappedWriteClientExt;
 import org.logstash.instrument.metrics.AbstractMetricExt;
@@ -75,6 +81,9 @@
 import org.logstash.instrument.metrics.UptimeMetric;
 import org.logstash.instrument.metrics.counter.LongCounter;
 import org.logstash.plugins.ConfigVariableExpander;
+import org.logstash.plugins.factory.ExecutionContextFactoryExt;
+import org.logstash.plugins.factory.PluginFactoryExt;
+import org.logstash.plugins.factory.PluginMetricsFactoryExt;
 import org.logstash.secret.store.SecretStore;
 import org.logstash.secret.store.SecretStoreExt;
 
@@ -83,7 +92,10 @@
 import static org.logstash.instrument.metrics.UptimeMetric.ScaleUnits.SECONDS;
 
 /**
- * JRuby extension to provide ancestor class for Ruby's Pipeline and JavaPipeline classes.
+ * JRuby extension to provide ancestor class for the ruby-defined {@code LogStash::JavaPipeline} class.
+ *
+ * <p>NOTE: Although this class' name implies that it is "abstract", we instantiated it directly
+ *          as a lightweight temporary-scoped pipeline in the ruby-defined {@code LogStash::PipelineAction::Reload}
  * */
 @JRubyClass(name = "AbstractPipeline")
 public class AbstractPipelineExt extends RubyBasicObject {
@@ -104,6 +116,7 @@ public class AbstractPipelineExt extends RubyBasicObject {
 
     @SuppressWarnings("serial")
     protected PipelineIR lir;
+    private transient CompiledPipeline lirExecution;
 
     private final RubyString ephemeralId = RubyUtil.RUBY.newString(UUID.randomUUID().toString());
 
@@ -135,13 +148,46 @@ public class AbstractPipelineExt extends RubyBasicObject {
     private QueueReadClientBase filterQueueClient;
 
     private ArrayList<FlowMetric> flowMetrics = new ArrayList<>();
+    private @SuppressWarnings("rawtypes") RubyArray inputs;
+    private @SuppressWarnings("rawtypes") RubyArray filters;
+    private @SuppressWarnings("rawtypes") RubyArray outputs;
 
     public AbstractPipelineExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
 
+    @JRubyMethod(required = 4)
+    public AbstractPipelineExt initialize(final ThreadContext context, final IRubyObject[] args)
+            throws IncompleteSourceWithMetadataException, NoSuchAlgorithmException {
+        initialize(context, args[0], args[1], args[2]);
+        lirExecution = new CompiledPipeline(
+                lir,
+                new PluginFactoryExt(context.runtime, RubyUtil.PLUGIN_FACTORY_CLASS).init(
+                        lir,
+                        new PluginMetricsFactoryExt(
+                                context.runtime, RubyUtil.PLUGIN_METRICS_FACTORY_CLASS
+                        ).initialize(context, pipelineId(), metric()),
+                        new ExecutionContextFactoryExt(
+                                context.runtime, RubyUtil.EXECUTION_CONTEXT_FACTORY_CLASS
+                        ).initialize(context, args[3], this, dlqWriter(context)),
+                        RubyUtil.FILTER_DELEGATOR_CLASS
+                ),
+                getSecretStore(context)
+        );
+        inputs = RubyArray.newArray(context.runtime, lirExecution.inputs());
+        filters = RubyArray.newArray(context.runtime, lirExecution.filters());
+        outputs = RubyArray.newArray(context.runtime, lirExecution.outputs());
+        if (getSetting(context, "config.debug").isTrue() && LOGGER.isDebugEnabled()) {
+            LOGGER.debug(
+                    "Compiled pipeline code for pipeline {} : {}", pipelineId(),
+                    lir.getGraph().toString()
+            );
+        }
+        return this;
+    }
+
     @JRubyMethod
-    public final AbstractPipelineExt initialize(final ThreadContext context,
+    private AbstractPipelineExt initialize(final ThreadContext context,
         final IRubyObject pipelineConfig, final IRubyObject namespacedMetric,
         final IRubyObject rubyLogger)
         throws NoSuchAlgorithmException {
@@ -269,6 +315,11 @@ public final IRubyObject lir(final ThreadContext context) {
         return JavaUtil.convertJavaToUsableRubyObject(context.runtime, lir);
     }
 
+    @JRubyMethod(name = "lir_execution")
+    public IRubyObject lirExecution(final ThreadContext context) {
+        return JavaUtil.convertJavaToUsableRubyObject(context.runtime, lirExecution);
+    }
+
     @JRubyMethod(name = "dlq_writer")
     public final IRubyObject dlqWriter(final ThreadContext context) {
         if (dlqWriter == null) {
@@ -375,6 +426,29 @@ public final IRubyObject isConfiguredReloadable(final ThreadContext context) {
         return getSetting(context, "pipeline.reloadable");
     }
 
+    @JRubyMethod(name = "reloadable?")
+    public RubyBoolean isReloadable(final ThreadContext context) {
+        return isConfiguredReloadable(context).isTrue() && reloadablePlugins(context).isTrue()
+                ? context.tru : context.fals;
+    }
+
+    @JRubyMethod(name = "reloadable_plugins?")
+    public RubyBoolean reloadablePlugins(final ThreadContext context) {
+        return nonReloadablePlugins(context).isEmpty() ? context.tru : context.fals;
+    }
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    @JRubyMethod(name = "non_reloadable_plugins")
+    public RubyArray nonReloadablePlugins(final ThreadContext context) {
+        final RubyArray result = RubyArray.newArray(context.runtime);
+        Stream.of(inputs, outputs, filters).flatMap(
+                plugins -> ((Collection<IRubyObject>) plugins).stream()
+        ).filter(
+                plugin -> !plugin.callMethod(context, "reloadable?").isTrue()
+        ).forEach(result::add);
+        return result;
+    }
+
     @JRubyMethod(name = "collect_stats")
     public final IRubyObject collectStats(final ThreadContext context) throws IOException {
         final AbstractNamespacedMetricExt pipelineMetric =
@@ -536,6 +610,17 @@ public final JRubyWrappedWriteClientExt wrappedWriteClient(final ThreadContext c
             .initialize(inputQueueClient, pipelineId.asJavaString(), metric, pluginId);
     }
 
+    public QueueWriter getQueueWriter(final String inputName) {
+        return new JRubyWrappedWriteClientExt(RubyUtil.RUBY, RubyUtil.WRAPPED_WRITE_CLIENT_CLASS)
+                .initialize(
+                        RubyUtil.RUBY.getCurrentContext(),
+                        new IRubyObject[]{
+                                inputQueueClient(), pipelineId().convertToString().intern(),
+                                metric(), RubyUtil.RUBY.newSymbol(inputName)
+                        }
+                );
+    }
+
     @JRubyMethod(name = "pipeline_source_details", visibility = Visibility.PROTECTED)
     @SuppressWarnings("rawtypes")
     public RubyArray getPipelineSourceDetails(final ThreadContext context) {
@@ -589,4 +674,28 @@ private AbstractNamespacedMetricExt getDlqMetric(final ThreadContext context) {
         }
         return dlqMetric;
     }
+
+    @JRubyMethod
+    @SuppressWarnings("rawtypes")
+    public RubyArray inputs() {
+        return inputs;
+    }
+
+    @JRubyMethod
+    @SuppressWarnings("rawtypes")
+    public RubyArray filters() {
+        return filters;
+    }
+
+    @JRubyMethod
+    @SuppressWarnings("rawtypes")
+    public RubyArray outputs() {
+        return outputs;
+    }
+
+    @JRubyMethod(name = "shutdown_requested?")
+    public IRubyObject isShutdownRequested(final ThreadContext context) {
+        // shutdown_requested? MUST be implemented in the concrete implementation of this class.
+        throw new IllegalStateException("Pipeline implementation does not provide `shutdown_requested?`, which is a Logstash internal error.");
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java
deleted file mode 100644
index 1be5781862c..00000000000
--- a/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java
+++ /dev/null
@@ -1,160 +0,0 @@
-/*
- * Licensed to Elasticsearch B.V. under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch B.V. licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *	http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-
-package org.logstash.execution;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.jruby.Ruby;
-import org.jruby.RubyArray;
-import org.jruby.RubyBoolean;
-import org.jruby.RubyClass;
-import org.jruby.anno.JRubyClass;
-import org.jruby.anno.JRubyMethod;
-import org.jruby.javasupport.JavaUtil;
-import org.jruby.runtime.ThreadContext;
-import org.jruby.runtime.builtin.IRubyObject;
-import org.logstash.RubyUtil;
-import org.logstash.common.IncompleteSourceWithMetadataException;
-import org.logstash.config.ir.CompiledPipeline;
-import org.logstash.execution.queue.QueueWriter;
-import org.logstash.ext.JRubyWrappedWriteClientExt;
-import org.logstash.plugins.factory.ExecutionContextFactoryExt;
-import org.logstash.plugins.factory.PluginMetricsFactoryExt;
-import org.logstash.plugins.factory.PluginFactoryExt;
-
-import java.security.NoSuchAlgorithmException;
-import java.util.Collection;
-import java.util.stream.Stream;
-
-/**
- * JRuby extension used as parent for Ruby's JavaPipelines
- * */
-@JRubyClass(name = "JavaBasePipeline")
-public final class JavaBasePipelineExt extends AbstractPipelineExt {
-
-    private static final long serialVersionUID = 1L;
-
-    private static final Logger LOGGER = LogManager.getLogger(JavaBasePipelineExt.class);
-
-    private transient CompiledPipeline lirExecution;
-
-    private @SuppressWarnings("rawtypes") RubyArray inputs;
-
-    private @SuppressWarnings("rawtypes") RubyArray filters;
-
-    private @SuppressWarnings("rawtypes") RubyArray outputs;
-
-    public JavaBasePipelineExt(final Ruby runtime, final RubyClass metaClass) {
-        super(runtime, metaClass);
-    }
-
-    @JRubyMethod(required = 4)
-    public JavaBasePipelineExt initialize(final ThreadContext context, final IRubyObject[] args)
-        throws IncompleteSourceWithMetadataException, NoSuchAlgorithmException {
-        initialize(context, args[0], args[1], args[2]);
-        lirExecution = new CompiledPipeline(
-            lir,
-            new PluginFactoryExt(context.runtime, RubyUtil.PLUGIN_FACTORY_CLASS).init(
-                lir,
-                new PluginMetricsFactoryExt(
-                    context.runtime, RubyUtil.PLUGIN_METRICS_FACTORY_CLASS
-                ).initialize(context, pipelineId(), metric()),
-                new ExecutionContextFactoryExt(
-                    context.runtime, RubyUtil.EXECUTION_CONTEXT_FACTORY_CLASS
-                ).initialize(context, args[3], this, dlqWriter(context)),
-                RubyUtil.FILTER_DELEGATOR_CLASS
-            ),
-            getSecretStore(context)
-        );
-        inputs = RubyArray.newArray(context.runtime, lirExecution.inputs());
-        filters = RubyArray.newArray(context.runtime, lirExecution.filters());
-        outputs = RubyArray.newArray(context.runtime, lirExecution.outputs());
-        if (getSetting(context, "config.debug").isTrue() && LOGGER.isDebugEnabled()) {
-            LOGGER.debug(
-                "Compiled pipeline code for pipeline {} : {}", pipelineId(),
-                lir.getGraph().toString()
-            );
-        }
-        return this;
-    }
-
-    @JRubyMethod(name = "lir_execution")
-    public IRubyObject lirExecution(final ThreadContext context) {
-        return JavaUtil.convertJavaToUsableRubyObject(context.runtime, lirExecution);
-    }
-
-    @JRubyMethod
-    @SuppressWarnings("rawtypes")
-    public RubyArray inputs() {
-        return inputs;
-    }
-
-    @JRubyMethod
-    @SuppressWarnings("rawtypes")
-    public RubyArray filters() {
-        return filters;
-    }
-
-    @JRubyMethod
-    @SuppressWarnings("rawtypes")
-    public RubyArray outputs() {
-        return outputs;
-    }
-
-    @JRubyMethod(name = "reloadable?")
-    public RubyBoolean isReloadable(final ThreadContext context) {
-        return isConfiguredReloadable(context).isTrue() && reloadablePlugins(context).isTrue()
-            ? context.tru : context.fals;
-    }
-
-    @JRubyMethod(name = "reloadable_plugins?")
-    public RubyBoolean reloadablePlugins(final ThreadContext context) {
-        return nonReloadablePlugins(context).isEmpty() ? context.tru : context.fals;
-    }
-
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    @JRubyMethod(name = "non_reloadable_plugins")
-    public RubyArray nonReloadablePlugins(final ThreadContext context) {
-        final RubyArray result = RubyArray.newArray(context.runtime);
-        Stream.of(inputs, outputs, filters).flatMap(
-            plugins -> ((Collection<IRubyObject>) plugins).stream()
-        ).filter(
-            plugin -> !plugin.callMethod(context, "reloadable?").isTrue()
-        ).forEach(result::add);
-        return result;
-    }
-
-    @JRubyMethod(name = "shutdown_requested?")
-    public IRubyObject isShutdownRequested(final ThreadContext context) {
-        throw new IllegalStateException("Pipeline implementation does not provide `shutdown_requested?`, which is a Logstash internal error.");
-    }
-
-    public QueueWriter getQueueWriter(final String inputName) {
-        return new JRubyWrappedWriteClientExt(RubyUtil.RUBY, RubyUtil.WRAPPED_WRITE_CLIENT_CLASS)
-            .initialize(
-                RubyUtil.RUBY.getCurrentContext(),
-                new IRubyObject[]{
-                    inputQueueClient(), pipelineId().convertToString().intern(),
-                    metric(), RubyUtil.RUBY.newSymbol(inputName)
-                }
-            );
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/InputPluginCreator.java b/logstash-core/src/main/java/org/logstash/plugins/factory/InputPluginCreator.java
index 66929065b3b..7dda183ce7b 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/InputPluginCreator.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/InputPluginCreator.java
@@ -4,7 +4,7 @@
 import co.elastic.logstash.api.Input;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.config.ir.compiler.JavaInputDelegatorExt;
-import org.logstash.execution.JavaBasePipelineExt;
+import org.logstash.execution.AbstractPipelineExt;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.plugins.PluginLookup;
 
@@ -21,7 +21,7 @@ public IRubyObject createDelegator(String name, Map<String, Object> pluginArgs,
                                        AbstractNamespacedMetricExt typeScopedMetric,
                                        PluginLookup.PluginClass pluginClass, Context pluginContext) {
         Input input = instantiateAndValidate(pluginArgs, id, pluginContext, pluginClass);
-        return JavaInputDelegatorExt.create((JavaBasePipelineExt) pluginsFactory.getExecutionContextFactory().getPipeline(),
+        return JavaInputDelegatorExt.create((AbstractPipelineExt) pluginsFactory.getExecutionContextFactory().getPipeline(),
                 typeScopedMetric, input, pluginArgs);
     }
 }
