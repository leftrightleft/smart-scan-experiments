diff --git a/lib/logstash/filters/fingerprint.rb b/lib/logstash/filters/fingerprint.rb
new file mode 100644
index 00000000000..7dff3870edd
--- /dev/null
+++ b/lib/logstash/filters/fingerprint.rb
@@ -0,0 +1,111 @@
+# encoding: utf-8
+require "logstash/filters/base"
+require "logstash/namespace"
+
+#  Fingerprint fields using by replacing values with a consistent hash.
+class LogStash::Filters::Fingerprint < LogStash::Filters::Base
+  config_name "fingerprint"
+  milestone 1
+
+  # Source field(s)
+  config :source, :validate => :array, :default => 'message'
+
+  # Target field.
+  # will overwrite current value of a field if it exists.
+  config :target, :validate => :string, :default => 'fingerprint'
+
+  # When used with IPV4_NETWORK method fill in the subnet prefix length
+  # Not required for MURMUR3 or UUID methods
+  # With other methods fill in the HMAC key
+  config :key, :validate => :string
+
+  # Fingerprint method
+  config :method, :validate => ['SHA1', 'SHA256', 'SHA384', 'SHA512', 'MD5', "MURMUR3", "IPV4_NETWORK", "UUID"], :required => true, :default => 'SHA1'
+
+  # When set to true, we concatenate the values of all fields into 1 string like the old checksum filter.
+  config :concatenate_sources, :validate => :boolean, :default => false
+
+  def register
+    # require any library and set the anonymize function
+    case @method
+      when "IPV4_NETWORK"
+        require 'ipaddr'
+        @logger.error("Key value is empty. please fill in a subnet prefix length") if @key.nil?
+        class << self; alias_method :anonymize, :anonymize_ipv4_network; end
+      when "MURMUR3"
+        require "murmurhash3"
+        class << self; alias_method :anonymize, :anonymize_murmur3; end
+      when "UUID"
+        require "securerandom"
+      else
+        require 'openssl'
+        @logger.error("Key value is empty. Please fill in an encryption key") if @key.nil?
+        class << self; alias_method :anonymize, :anonymize_openssl; end
+    end
+  end # def register
+
+  public
+  def filter(event)
+    return unless filter?(event)
+    if @method == "UUID"
+      event[@target] = SecureRandom.uuid
+    else
+      if @concatenate_sources 
+        to_string = ''
+        @source.sort.each do |k|
+          @logger.debug("Adding key to string")
+          to_string << "|#{k}|#{event[k]}"
+        end
+        to_string << "|"
+        @logger.debug("String built", :to_checksum => to_string)
+        event[@target] = anonymize(to_string)
+      else 
+        @source.each do |field|
+          next unless event.include?(field)
+          if event[field].is_a?(Array)
+            event[@target] = event[field].collect { |v| anonymize(v) }
+          else
+            event[@target] = anonymize(event[field])
+          end
+        end # @source.each
+      end # concatenate_sources
+    end # @method
+  end # def filter
+
+  private
+  def anonymize_ipv4_network(ip_string)
+    IPAddr.new(ip_string).mask(@key.to_i).to_s
+  end
+
+  def anonymize_openssl(data)
+    digest = encryption_algorithm()
+    OpenSSL::HMAC.hexdigest(digest, @key, data)
+  end
+
+  def anonymize_murmur3(value)
+    case value
+      when Fixnum
+        MurmurHash3::V32.int_hash(value)
+      when String
+        MurmurHash3::V32.str_hash(value)
+    end
+  end
+
+  def encryption_algorithm
+   case @method
+     when 'SHA1'
+       return OpenSSL::Digest::SHA1.new
+     when 'SHA256'
+       return OpenSSL::Digest::SHA256.new
+     when 'SHA384'
+       return OpenSSL::Digest::SHA384.new
+     when 'SHA512'
+       return OpenSSL::Digest::SHA512.new
+     when 'MD5'
+       return OpenSSL::Digest::MD5.new
+     else
+       @logger.error("Unknown algorithm")
+    end
+  end
+
+end # class LogStash::Filters::Anonymize
diff --git a/spec/filters/fingerprint.rb b/spec/filters/fingerprint.rb
new file mode 100644
index 00000000000..c79632ca0b9
--- /dev/null
+++ b/spec/filters/fingerprint.rb
@@ -0,0 +1,150 @@
+require "test_utils"
+require "logstash/filters/fingerprint"
+
+describe LogStash::Filters::Fingerprint do
+  extend LogStash::RSpec
+
+  describe "fingerprint ipaddress with IPV4_NETWORK method" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          method => "IPV4_NETWORK"
+          key => 24
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "233.255.13.44") do
+      insist { subject["fingerprint"] } == "233.255.13.0"
+    end
+  end
+
+  describe "fingerprint string with MURMUR3 method" do
+    config <<-CONFIG
+      filter { 
+        fingerprint { 
+          source => ["clientip"]
+          method => "MURMUR3"
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.52.122.33") do
+      insist { subject["fingerprint"] } == 1541804874
+    end
+  end
+ 
+   describe "fingerprint string with SHA1 alogrithm" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'SHA1'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.123.123.123") do
+      insist { subject["fingerprint"] } == "fdc60acc4773dc5ac569ffb78fcb93c9630797f4"
+    end
+  end
+
+  describe "fingerprint string with SHA256 alogrithm" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'SHA256'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.123.123.123") do
+      insist { subject["fingerprint"] } == "345bec3eff242d53b568916c2610b3e393d885d6b96d643f38494fd74bf4a9ca"
+    end
+  end
+
+  describe "fingerprint string with SHA384 alogrithm" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'SHA384'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.123.123.123") do
+      insist { subject["fingerprint"] } == "22d4c0e8c4fbcdc4887d2038fca7650f0e2e0e2457ff41c06eb2a980dded6749561c814fe182aff93e2538d18593947a"
+    end
+  end
+
+  describe "fingerprint string with SHA512 alogrithm" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'SHA512'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.123.123.123") do
+      insist { subject["fingerprint"] } == "11c19b326936c08d6c50a3c847d883e5a1362e6a64dd55201a25f2c1ac1b673f7d8bf15b8f112a4978276d573275e3b14166e17246f670c2a539401c5bfdace8"
+    end
+  end
+
+  describe "fingerprint string with MD5 alogrithm" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'MD5'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => "123.123.123.123") do
+      insist { subject["fingerprint"] } == "9336c879e305c9604a3843fc3e75948f"
+    end
+  end
+
+  describe "Test field with multiple values" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ["clientip"]
+          key => "longencryptionkey"
+          method => 'MD5'
+        }
+      }
+    CONFIG
+
+    sample("clientip" => [ "123.123.123.123", "223.223.223.223" ]) do
+      insist { subject["fingerprint"]} == [ "9336c879e305c9604a3843fc3e75948f", "7a6c66b8d3f42a7d650e3354af508df3" ]
+    end
+  end
+
+  describe "Concatenate multiple values into 1" do
+    config <<-CONFIG
+      filter {
+        fingerprint {
+          source => ['field1', 'field2']
+          key => "longencryptionkey"
+          method => 'MD5'
+        }
+      }
+    CONFIG
+    
+    sample("field1" => "test1", "field2" => "test2") do
+      insist { subject["fingerprint"]} == "872da745e45192c2a1d4bf7c1ff8a370"
+    end
+  end
+
+end
