diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index a44e96b92a3..004f501ecaa 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -228,9 +228,9 @@ def shutdown
     # in order of dependency.
     pipeline_bus.setBlockOnUnlisten(true)
 
-    stop_collecting_metrics
     transition_to_stopped
     converge_result = shutdown_pipelines
+    stop_collecting_metrics
     stop_webserver
     converge_result
   end
diff --git a/qa/integration/fixtures/monitoring_api_spec.yml b/qa/integration/fixtures/monitoring_api_spec.yml
index 039f21df899..17559276c09 100644
--- a/qa/integration/fixtures/monitoring_api_spec.yml
+++ b/qa/integration/fixtures/monitoring_api_spec.yml
@@ -35,3 +35,17 @@ config:
     output {
       stdout { }
     }
+  draining_events: |-
+    input {
+      tcp {
+        port => '<%=options[:port]%>'
+      }
+      generator { count => 5000 }
+    }
+    filter {
+      sleep { 
+       time => "1" 
+        every => 10
+      }
+      drop { }
+    }
diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index e33a37e602a..21c98f99e8b 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -85,6 +85,10 @@ def exit_code
     @process.exit_code
   end
 
+  def pid
+    @process.pid
+  end
+
   # Starts a LS process in background with a given config file
   # and shuts it down after input is completely processed
   def start_background(config_file)
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index e6f04b0e32e..c68c8ec3b85 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -52,6 +52,41 @@
     end
   end
 
+  context "queue draining" do
+    let(:tcp_port) { random_port }
+    let(:settings_dir) { Stud::Temporary.directory }
+    let(:queue_config) {
+      {
+        "queue.type" => "persisted",
+        "queue.drain" => true
+      }
+    }
+    let(:config_yaml) { queue_config.to_yaml }
+    let(:config_yaml_file) { ::File.join(settings_dir, "logstash.yml") }
+    let(:logstash_service) { @fixture.get_service("logstash") }
+    let(:config) { @fixture.config("draining_events", { :port => tcp_port }) }
+
+    before(:each) do
+      if logstash_service.settings.feature_flag == "persistent_queues"
+        IO.write(config_yaml_file, config_yaml)
+        logstash_service.spawn_logstash("-e", config, "--path.settings", settings_dir)
+      else
+        logstash_service.spawn_logstash("-e", config)
+      end
+      logstash_service.wait_for_logstash
+      wait_for_port(tcp_port, 60)
+    end
+
+    it "can update metrics" do
+      first = logstash_service.monitoring_api.event_stats
+      Process.kill("TERM", logstash_service.pid)
+      try(max_retry) do
+        second = logstash_service.monitoring_api.event_stats
+        expect(second["filtered"].to_i > first["filtered"].to_i).to be_truthy
+      end
+    end
+  end
+
   context "verify global event counters" do
     let(:tcp_port) { random_port }
     let(:sample_data) { 'Hello World!' }
