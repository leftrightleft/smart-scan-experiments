diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index b5eb23d910e..f5a3178a5c4 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -3,10 +3,8 @@
 require "logstash/errors"
 require "logstash/config/cpu_core_strategy"
 require "logstash/instrument/collector"
-require "logstash/instrument/metric"
 require "logstash/instrument/periodic_pollers"
 require "logstash/instrument/collector"
-require "logstash/instrument/metric"
 require "logstash/pipeline"
 require "logstash/webserver"
 require "logstash/event_dispatcher"
diff --git a/logstash-core/lib/logstash/instrument/metric.rb b/logstash-core/lib/logstash/instrument/metric.rb
index d31a8613dad..6abbe7ce31c 100644
--- a/logstash-core/lib/logstash/instrument/metric.rb
+++ b/logstash-core/lib/logstash/instrument/metric.rb
@@ -1,105 +1 @@
-# encoding: utf-8
-require "logstash/instrument/collector"
-require "concurrent"
-
-module LogStash module Instrument
-  class MetricException < Exception; end
-  class MetricNoKeyProvided < MetricException; end
-  class MetricNoBlockProvided < MetricException; end
-  class MetricNoNamespaceProvided < MetricException; end
-
-  # This class provide the interface between the code, the collector and the format
-  # of the recorded metric.
-  class Metric
-    attr_reader :collector
-
-    def initialize(collector)
-      @collector = collector
-    end
-
-    def increment(namespace, key, value = 1)
-      self.class.validate_key!(key)
-      collector.push(namespace, key, :counter, :increment, value)
-    end
-
-    def decrement(namespace, key, value = 1)
-      self.class.validate_key!(key)
-      collector.push(namespace, key, :counter, :decrement, value)
-    end
-
-    def gauge(namespace, key, value)
-      self.class.validate_key!(key)
-      collector.push(namespace, key, :gauge, :set, value)
-    end
-
-    def time(namespace, key)
-      self.class.validate_key!(key)
-
-      if block_given?
-        timer = TimedExecution.new(self, namespace, key)
-        content = yield
-        timer.stop
-        return content
-      else
-        TimedExecution.new(self, namespace, key)
-      end
-    end
-
-    def report_time(namespace, key, duration)
-      self.class.validate_key!(key)
-      collector.push(namespace, key, :counter, :increment, duration)
-    end
-
-    # This method return a metric instance tied to a specific namespace
-    # so instead of specifying the namespace on every call.
-    #
-    # Example:
-    #   metric.increment(:namespace, :mykey, 200)
-    #   metric.increment(:namespace, :mykey_2, 200)
-    #
-    #   namespaced_metric = metric.namespace(:namespace)
-    #   namespaced_metric.increment(:mykey, 200)
-    #   namespaced_metric.increment(:mykey_2, 200)
-    # ```
-    #
-    # @param name [Array<String>] Name of the namespace
-    # @param name [String] Name of the namespace
-    def namespace(name)
-      raise MetricNoNamespaceProvided if name.nil? || name.empty?
-
-      NamespacedMetric.new(self, name)
-    end
-
-    def self.validate_key!(key)
-      raise MetricNoKeyProvided if key.nil? || key.empty?
-    end
-
-    private
-    # Allow to calculate the execution of a block of code.
-    # This class support 2 differents syntax a block or the return of
-    # the object itself, but in the later case the metric won't be recorded
-    # Until we call `#stop`.
-    #
-    # @see LogStash::Instrument::Metric#time
-    class TimedExecution
-      MILLISECONDS = 1_000.0.freeze
-
-      def initialize(metric, namespace, key)
-        @metric = metric
-        @namespace = namespace
-        @key = key
-        start
-      end
-
-      def start
-        @start_time = Time.now
-      end
-
-      def stop
-        execution_time = (MILLISECONDS * (Time.now - @start_time)).to_i
-        @metric.report_time(@namespace, @key, execution_time)
-        execution_time
-      end
-    end
-  end
-end; end
+# This file is kept for backwards compatibility with plugins that include it.
diff --git a/logstash-core/lib/logstash/instrument/namespaced_metric.rb b/logstash-core/lib/logstash/instrument/namespaced_metric.rb
index 40afa45424a..6abbe7ce31c 100644
--- a/logstash-core/lib/logstash/instrument/namespaced_metric.rb
+++ b/logstash-core/lib/logstash/instrument/namespaced_metric.rb
@@ -1,58 +1 @@
-# encoding: utf-8
-require "logstash/instrument/metric"
-
-module LogStash module Instrument
-  # This class acts a a proxy between the metric library and the user calls.
-  #
-  # This is the class that plugins authors will use to interact with the `MetricStore`
-  # It has the same public interface as `Metric` class but doesnt require to send
-  # the namespace on every call.
-  #
-  # @see Logstash::Instrument::Metric
-  class NamespacedMetric
-    attr_reader :namespace_name
-    # Create metric with a specific namespace
-    #
-    # @param metric [LogStash::Instrument::Metric] The metric instance to proxy
-    # @param namespace [Array] The namespace to use
-    def initialize(metric, namespace_name)
-      @metric = metric
-      @namespace_name = Array(namespace_name)
-    end
-
-    def increment(key, value = 1)
-      @metric.increment(namespace_name, key, value)
-    end
-
-    def decrement(key, value = 1)
-      @metric.decrement(namespace_name, key, value)
-    end
-
-    def gauge(key, value)
-      @metric.gauge(namespace_name, key, value)
-    end
-
-    def report_time(key, duration)
-      @metric.report_time(namespace_name, key, duration)
-    end
-
-    def time(key, &block)
-      @metric.time(namespace_name, key, &block)
-    end
-
-    def collector
-      @metric.collector
-    end
-    
-    def counter(key)
-      collector.get(@namespace_name, key, :counter)
-    end
-
-    def namespace(name)
-      NamespacedMetric.new(metric, namespace_name + Array(name))
-    end
-
-    private
-    attr_reader :metric
-  end
-end; end
+# This file is kept for backwards compatibility with plugins that include it.
diff --git a/logstash-core/lib/logstash/instrument/null_metric.rb b/logstash-core/lib/logstash/instrument/null_metric.rb
index f56028d4580..21fdbdd7eee 100644
--- a/logstash-core/lib/logstash/instrument/null_metric.rb
+++ b/logstash-core/lib/logstash/instrument/null_metric.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/instrument/metric"
 
 module LogStash module Instrument
   # This class is used in the context when we disable the metric collection
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 7aac3ab0352..089d6948dbe 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -9,8 +9,6 @@
 require "logstash/outputs/base"
 require "logstash/shutdown_watcher"
 require "logstash/pipeline_reporter"
-require "logstash/instrument/metric"
-require "logstash/instrument/namespaced_metric"
 require "logstash/instrument/null_metric"
 require "logstash/instrument/namespaced_null_metric"
 require "logstash/instrument/collector"
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index df6abc3e587..c29fb48f888 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -12,8 +12,6 @@
 require "logstash/outputs/base"
 require "logstash/shutdown_watcher"
 require "logstash/pipeline_reporter"
-require "logstash/instrument/metric"
-require "logstash/instrument/namespaced_metric"
 require "logstash/instrument/null_metric"
 require "logstash/instrument/namespaced_null_metric"
 require "logstash/instrument/collector"
diff --git a/logstash-core/spec/logstash/instrument/metric_spec.rb b/logstash-core/spec/logstash/instrument/metric_spec.rb
index 123a47be268..1e1397bdd9f 100644
--- a/logstash-core/spec/logstash/instrument/metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_spec.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/instrument/metric"
 require "logstash/instrument/collector"
 require_relative "../../support/matchers"
 require "spec_helper"
diff --git a/logstash-core/spec/logstash/instrument/namespaced_metric_spec.rb b/logstash-core/spec/logstash/instrument/namespaced_metric_spec.rb
index b4446afbfce..d850d5c012e 100644
--- a/logstash-core/spec/logstash/instrument/namespaced_metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/namespaced_metric_spec.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/instrument/namespaced_metric"
-require "logstash/instrument/metric"
 require_relative "../../support/matchers"
 require_relative "../../support/shared_examples"
 require "spec_helper"
diff --git a/logstash-core/spec/logstash/instrument/periodic_poller/base_spec.rb b/logstash-core/spec/logstash/instrument/periodic_poller/base_spec.rb
index d0a869aa767..63be505b474 100644
--- a/logstash-core/spec/logstash/instrument/periodic_poller/base_spec.rb
+++ b/logstash-core/spec/logstash/instrument/periodic_poller/base_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/instrument/periodic_poller/base"
-require "logstash/instrument/metric"
 require "logstash/instrument/collector"
 
 describe LogStash::Instrument::PeriodicPoller::Base do
diff --git a/logstash-core/spec/logstash/instrument/periodic_poller/os_spec.rb b/logstash-core/spec/logstash/instrument/periodic_poller/os_spec.rb
index a8772aa6106..5445850d343 100644
--- a/logstash-core/spec/logstash/instrument/periodic_poller/os_spec.rb
+++ b/logstash-core/spec/logstash/instrument/periodic_poller/os_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/instrument/periodic_poller/os"
-require "logstash/instrument/metric"
 require "logstash/instrument/collector"
 
 describe LogStash::Instrument::PeriodicPoller::Os do
diff --git a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
index 9a48a665ad9..61d13f0b895 100644
--- a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
+++ b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/instrument/metric"
 require "logstash/event"
 require_relative "../../support/mocks_classes"
 require "spec_helper"
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index d27f53825c0..4bc4aca16d7 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -23,6 +23,8 @@
 import org.logstash.ext.JrubyMemoryWriteClientExt;
 import org.logstash.ext.JrubyTimestampExtLibrary;
 import org.logstash.ext.JrubyWrappedSynchronousQueueExt;
+import org.logstash.instrument.metrics.MetricExt;
+import org.logstash.instrument.metrics.NamespacedMetricExt;
 
 /**
  * Utilities around interaction with the {@link Ruby} runtime.
@@ -82,6 +84,20 @@ public final class RubyUtil {
 
     public static final RubyClass BUFFERED_TOKENIZER;
 
+    public static final RubyClass METRIC_CLASS;
+
+    public static final RubyClass NAMESPACED_METRIC_CLASS;
+
+    public static final RubyClass METRIC_EXCEPTION_CLASS;
+
+    public static final RubyClass METRIC_NO_KEY_PROVIDED_CLASS;
+
+    public static final RubyClass METRIC_NO_BLOCK_PROVIDED_CLASS;
+
+    public static final RubyClass METRIC_NO_NAMESPACE_PROVIDED_CLASS;
+
+    public static final RubyClass TIMED_EXECUTION_CLASS;
+
     /**
      * Logstash Ruby Module.
      */
@@ -92,6 +108,33 @@ public final class RubyUtil {
     static {
         RUBY = Ruby.getGlobalRuntime();
         LOGSTASH_MODULE = RUBY.getOrCreateModule("LogStash");
+        final RubyModule instrumentModule =
+            RUBY.defineModuleUnder("Instrument", LOGSTASH_MODULE);
+        METRIC_EXCEPTION_CLASS = instrumentModule.defineClassUnder(
+            "MetricException", RUBY.getException(), MetricExt.MetricException::new
+        );
+        METRIC_NO_KEY_PROVIDED_CLASS = instrumentModule.defineClassUnder(
+            "MetricNoKeyProvided", METRIC_EXCEPTION_CLASS, MetricExt.MetricNoKeyProvided::new
+        );
+        METRIC_NO_BLOCK_PROVIDED_CLASS = instrumentModule.defineClassUnder(
+            "MetricNoBlockProvided", METRIC_EXCEPTION_CLASS,
+            MetricExt.MetricNoBlockProvided::new
+        );
+        METRIC_NO_NAMESPACE_PROVIDED_CLASS = instrumentModule.defineClassUnder(
+            "MetricNoNamespaceProvided", METRIC_EXCEPTION_CLASS,
+            MetricExt.MetricNoNamespaceProvided::new
+        );
+        METRIC_CLASS
+            = instrumentModule.defineClassUnder("Metric", RUBY.getObject(), MetricExt::new);
+        TIMED_EXECUTION_CLASS = METRIC_CLASS.defineClassUnder(
+            "TimedExecution", RUBY.getObject(), MetricExt.TimedExecution::new
+        );
+        NAMESPACED_METRIC_CLASS = instrumentModule.defineClassUnder(
+            "NamespacedMetric", RUBY.getObject(), NamespacedMetricExt::new
+        );
+        METRIC_CLASS.defineAnnotatedMethods(MetricExt.class);
+        NAMESPACED_METRIC_CLASS.defineAnnotatedMethods(NamespacedMetricExt.class);
+        TIMED_EXECUTION_CLASS.defineAnnotatedMethods(MetricExt.TimedExecution.class);
         OUTPUT_STRATEGY_REGISTRY = setupLogstashClass(
             OutputStrategyExt.OutputStrategyRegistryExt::new,
             OutputStrategyExt.OutputStrategyRegistryExt.class
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricExt.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricExt.java
new file mode 100644
index 00000000000..88d282d818c
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricExt.java
@@ -0,0 +1,224 @@
+package org.logstash.instrument.metrics;
+
+import java.util.concurrent.TimeUnit;
+import org.jruby.Ruby;
+import org.jruby.RubyArray;
+import org.jruby.RubyClass;
+import org.jruby.RubyException;
+import org.jruby.RubyFixnum;
+import org.jruby.RubyObject;
+import org.jruby.RubyString;
+import org.jruby.RubySymbol;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.Visibility;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
+
+@JRubyClass(name = "Metric")
+public final class MetricExt extends RubyObject {
+
+    public static final RubySymbol COUNTER = RubyUtil.RUBY.newSymbol("counter");
+
+    private static final RubyFixnum ONE = RubyUtil.RUBY.newFixnum(1);
+
+    private static final RubySymbol INCREMENT = RubyUtil.RUBY.newSymbol("increment");
+
+    private static final RubySymbol DECREMENT = RubyUtil.RUBY.newSymbol("decrement");
+
+    private static final RubySymbol GAUGE = RubyUtil.RUBY.newSymbol("gauge");
+
+    private static final RubySymbol SET = RubyUtil.RUBY.newSymbol("set");
+
+    private IRubyObject collector;
+
+    public MetricExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    @JRubyMethod(name = "validate_key!", meta = true)
+    public static IRubyObject validateKey(final ThreadContext context, final IRubyObject recv,
+        final IRubyObject key) {
+        validateName(context, key, RubyUtil.METRIC_NO_KEY_PROVIDED_CLASS);
+        return context.nil;
+    }
+
+    public static void validateName(final ThreadContext context, final IRubyObject key,
+        final RubyClass exception) {
+        if (key.isNil() ||
+            (key instanceof RubySymbol && ((RubySymbol) key).empty_p(context).isTrue())
+            || (key instanceof RubyString && ((RubyString) key).isEmpty())) {
+            throw context.runtime.newRaiseException(exception, null);
+        }
+    }
+
+    @JRubyMethod(visibility = Visibility.PRIVATE)
+    public IRubyObject initialize(final ThreadContext context, final IRubyObject collector) {
+        this.collector = collector;
+        return this;
+    }
+
+    @JRubyMethod
+    public IRubyObject collector(final ThreadContext context) {
+        return collector;
+    }
+
+    @JRubyMethod(required = 2, optional = 1)
+    public IRubyObject increment(final ThreadContext context, final IRubyObject[] args) {
+        if (args.length == 2) {
+            return increment(context, args[0], args[1]);
+        } else {
+            return increment(context, args[0], args[1], args[2]);
+        }
+    }
+
+    public IRubyObject increment(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key) {
+        return increment(context, namespace, key, ONE);
+    }
+
+    public IRubyObject increment(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key, final IRubyObject value) {
+        MetricExt.validateKey(context, null, key);
+        return collector.callMethod(
+            context, "push", new IRubyObject[]{namespace, key, COUNTER, INCREMENT, value}
+        );
+    }
+
+    @JRubyMethod(required = 2, optional = 1)
+    public IRubyObject decrement(final ThreadContext context, final IRubyObject[] args) {
+        if (args.length == 2) {
+            return decrement(context, args[0], args[1], ONE);
+        } else {
+            return decrement(context, args[0], args[1], args[2]);
+        }
+    }
+
+    public IRubyObject decrement(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key) {
+        return decrement(context, namespace, key, ONE);
+    }
+
+    public IRubyObject decrement(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key, final IRubyObject value) {
+        MetricExt.validateKey(context, null, key);
+        return collector.callMethod(
+            context, "push", new IRubyObject[]{namespace, key, COUNTER, DECREMENT, value}
+        );
+    }
+
+    @JRubyMethod
+    public IRubyObject gauge(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key, final IRubyObject value) {
+        MetricExt.validateKey(context, null, key);
+        return collector.callMethod(
+            context, "push", new IRubyObject[]{namespace, key, GAUGE, SET, value}
+        );
+    }
+
+    @JRubyMethod(name = "report_time")
+    public IRubyObject reportTime(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key, final IRubyObject duration) {
+        MetricExt.validateKey(context, null, key);
+        return collector.callMethod(
+            context, "push", new IRubyObject[]{namespace, key, COUNTER, INCREMENT, duration}
+        );
+    }
+
+    @JRubyMethod
+    public IRubyObject time(final ThreadContext context, final IRubyObject namespace,
+        final IRubyObject key, final Block block) {
+        MetricExt.validateKey(context, null, key);
+        if (!block.isGiven()) {
+            return MetricExt.TimedExecution.create(this, namespace, key);
+        }
+        final long startTime = System.nanoTime();
+        final IRubyObject res = block.call(context);
+        this.reportTime(context, namespace, key, RubyFixnum.newFixnum(
+            context.runtime, TimeUnit.MILLISECONDS.convert(
+                System.nanoTime() - startTime, TimeUnit.NANOSECONDS
+            )
+        ));
+        return res;
+    }
+
+    @JRubyMethod
+    public NamespacedMetricExt namespace(final ThreadContext context, final IRubyObject name) {
+        validateName(context, name, RubyUtil.METRIC_NO_NAMESPACE_PROVIDED_CLASS);
+        return NamespacedMetricExt.create(
+            this,
+            name instanceof RubyArray ? (RubyArray) name : RubyArray.newArray(context.runtime, name)
+        );
+    }
+
+    @JRubyClass(name = "TimedExecution")
+    public static final class TimedExecution extends RubyObject {
+
+        private final long startTime = System.nanoTime();
+
+        private MetricExt metric;
+
+        private IRubyObject namespace;
+
+        private IRubyObject key;
+
+        public static MetricExt.TimedExecution create(final MetricExt metric,
+            final IRubyObject namespace, final IRubyObject key) {
+            final MetricExt.TimedExecution res =
+                new MetricExt.TimedExecution(RubyUtil.RUBY, RubyUtil.TIMED_EXECUTION_CLASS);
+            res.metric = metric;
+            res.namespace = namespace;
+            res.key = key;
+            return res;
+        }
+
+        @JRubyMethod
+        public RubyFixnum stop(final ThreadContext context) {
+            final RubyFixnum result = RubyFixnum.newFixnum(
+                context.runtime, TimeUnit.MILLISECONDS.convert(
+                    System.nanoTime() - startTime, TimeUnit.NANOSECONDS
+                )
+            );
+            metric.reportTime(context, namespace, key, result);
+            return result;
+        }
+
+        public TimedExecution(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+    }
+
+    @JRubyClass(name = "MetricException")
+    public static class MetricException extends RubyException {
+
+        public MetricException(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+    }
+
+    @JRubyClass(name = "MetricNoKeyProvided", parent = "MetricException")
+    public static final class MetricNoKeyProvided extends MetricException {
+
+        public MetricNoKeyProvided(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+    }
+
+    @JRubyClass(name = "MetricNoBlockProvided", parent = "MetricException")
+    public static final class MetricNoBlockProvided extends MetricException {
+
+        public MetricNoBlockProvided(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+    }
+
+    @JRubyClass(name = "MetricNoNamespaceProvided", parent = "MetricException")
+    public static final class MetricNoNamespaceProvided extends MetricException {
+
+        public MetricNoNamespaceProvided(final Ruby runtime, final RubyClass metaClass) {
+            super(runtime, metaClass);
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java
new file mode 100644
index 00000000000..59eed68ba5e
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/NamespacedMetricExt.java
@@ -0,0 +1,106 @@
+package org.logstash.instrument.metrics;
+
+import org.jruby.Ruby;
+import org.jruby.RubyArray;
+import org.jruby.RubyClass;
+import org.jruby.RubyObject;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.Visibility;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
+
+@JRubyClass(name = "NamespacedMetric")
+public final class NamespacedMetricExt extends RubyObject {
+
+    private RubyArray namespaceName;
+
+    private MetricExt metric;
+
+    public static NamespacedMetricExt create(final MetricExt metric,
+        final RubyArray namespaceName) {
+        final NamespacedMetricExt res =
+            new NamespacedMetricExt(RubyUtil.RUBY, RubyUtil.NAMESPACED_METRIC_CLASS);
+        res.metric = metric;
+        res.namespaceName = namespaceName;
+        return res;
+    }
+
+    public NamespacedMetricExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    @JRubyMethod(visibility = Visibility.PRIVATE)
+    public IRubyObject initialize(final ThreadContext context, final IRubyObject metric,
+        final IRubyObject namespaceName) {
+        this.metric = (MetricExt) metric;
+        if (namespaceName instanceof RubyArray) {
+            this.namespaceName = (RubyArray) namespaceName;
+        } else {
+            this.namespaceName = RubyArray.newArray(context.runtime, namespaceName);
+        }
+        return this;
+    }
+
+    @JRubyMethod
+    public IRubyObject collector(final ThreadContext context) {
+        return metric.collector(context);
+    }
+
+    @JRubyMethod
+    public IRubyObject counter(final ThreadContext context, final IRubyObject key) {
+        return collector(context).callMethod(
+            context, "get", new IRubyObject[]{namespaceName, key, MetricExt.COUNTER}
+        );
+    }
+
+    @JRubyMethod
+    public IRubyObject gauge(final ThreadContext context, final IRubyObject key,
+        final IRubyObject value) {
+        return metric.gauge(context, namespaceName, key, value);
+    }
+
+    @JRubyMethod(required = 1, optional = 1)
+    public IRubyObject increment(final ThreadContext context, final IRubyObject[] args) {
+        if (args.length == 1) {
+            return metric.increment(context, namespaceName, args[0]);
+        } else {
+            return metric.increment(context, namespaceName, args[0], args[1]);
+        }
+    }
+
+    @JRubyMethod(required = 1, optional = 1)
+    public IRubyObject decrement(final ThreadContext context, final IRubyObject[] args) {
+        if (args.length == 1) {
+            return metric.decrement(context, namespaceName, args[0]);
+        } else {
+            return metric.decrement(context, namespaceName, args[0], args[1]);
+        }
+    }
+
+    @JRubyMethod
+    public IRubyObject time(final ThreadContext context, final IRubyObject key, final Block block) {
+        return metric.time(context, namespaceName, key, block);
+    }
+
+    @JRubyMethod(name = "report_time")
+    public IRubyObject reportTime(final ThreadContext context, final IRubyObject key,
+        final IRubyObject duration) {
+        return metric.reportTime(context, namespaceName, key, duration);
+    }
+
+    @JRubyMethod(name = "namespace_name")
+    public RubyArray namespaceName(final ThreadContext context) {
+        return namespaceName;
+    }
+
+    @JRubyMethod
+    public NamespacedMetricExt namespace(final ThreadContext context, final IRubyObject name) {
+        MetricExt.validateName(context, name, RubyUtil.METRIC_NO_NAMESPACE_PROVIDED_CLASS);
+        return create(this.metric, (RubyArray) namespaceName.op_plus(
+            name instanceof RubyArray ? name : RubyArray.newArray(context.runtime, name)
+        ));
+    }
+}
