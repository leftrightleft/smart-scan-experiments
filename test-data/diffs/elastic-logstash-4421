diff --git a/Gemfile b/Gemfile
index 70d17c8350e..71649493690 100644
--- a/Gemfile
+++ b/Gemfile
@@ -14,7 +14,7 @@ gem "coveralls", :group => :development
 # 1.6 is the last supported version on jruby.
 gem "tins", "1.6", :group => :development
 gem "rspec", "~> 3.1.0", :group => :development
-gem "logstash-devutils", "~> 0.0.15", :group => :development
+gem "logstash-devutils", "~> 0.0.19", :group => :development
 gem "benchmark-ips", :group => :development
 gem "octokit", "3.8.0", :group => :build
 gem "stud", "~> 0.0.21", :group => :build
diff --git a/logstash-core/lib/logstash/codecs/base.rb b/logstash-core/lib/logstash/codecs/base.rb
index 4d10950f534..2dab47f4b0e 100644
--- a/logstash-core/lib/logstash/codecs/base.rb
+++ b/logstash-core/lib/logstash/codecs/base.rb
@@ -2,7 +2,6 @@
 require "logstash/namespace"
 require "logstash/event"
 require "logstash/plugin"
-require "logstash/logging"
 
 # This is the base class for logstash codecs.
 module LogStash::Codecs; class Base < LogStash::Plugin
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index 21c54f66ffe..f01cd1a7074 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
 require "logstash/config/registry"
-require "logstash/logging"
 require "logstash/util/password"
 require "logstash/version"
 require "logstash/environment"
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index ae6616ddf01..29c6e7e1105 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
 require "logstash/event"
-require "logstash/logging"
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "logstash/util/decorators"
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 414cd714784..b1629ea7cc2 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -2,7 +2,6 @@
 require "logstash/namespace"
 require "logstash/event"
 require "logstash/plugin"
-require "logstash/logging"
 require "logstash/config/mixin"
 require "logstash/codecs/base"
 require "logstash/util/decorators"
diff --git a/logstash-core/lib/logstash/logging.rb b/logstash-core/lib/logstash/logging.rb
index 1dbaa0aa932..e69de29bb2d 100644
--- a/logstash-core/lib/logstash/logging.rb
+++ b/logstash-core/lib/logstash/logging.rb
@@ -1,91 +0,0 @@
-# encoding: utf-8
-require "logstash/namespace"
-require "cabin"
-require "logger"
-
-class LogStash::Logger
-  attr_accessor :target
-
-  public
-  def initialize(*args)
-    super()
-
-    #self[:program] = File.basename($0)
-    #subscribe(::Logger.new(*args))
-    @target = args[0]
-    @channel = Cabin::Channel.get(LogStash)
-
-    # lame hack until cabin's smart enough not to doubley-subscribe something.
-    # without this subscription count check, running the test suite
-    # causes Cabin to subscribe to STDOUT maaaaaany times.
-    subscriptions = @channel.instance_eval { @subscribers.count }
-    @channel.subscribe(@target) unless subscriptions > 0
-
-    # Set default loglevel to WARN unless $DEBUG is set (run with 'ruby -d')
-    @level = $DEBUG ? :debug : :warn
-    if ENV["LOGSTASH_DEBUG"]
-      @level = :debug
-    end
-
-    # Direct metrics elsewhere.
-    @channel.metrics.channel = Cabin::Channel.new
-  end # def initialize
-
-  # Delegation
-  def level=(value) @channel.level = value; end
-  def debug(*args); @channel.debug(*args); end
-  def debug?(*args); @channel.debug?(*args); end
-  def info(*args); @channel.info(*args); end
-  def info?(*args); @channel.info?(*args); end
-  def warn(*args); @channel.warn(*args); end
-  def warn?(*args); @channel.warn?(*args); end
-  def error(*args); @channel.error(*args); end
-  def error?(*args); @channel.error?(*args); end
-  def fatal(*args); @channel.fatal(*args); end
-  def fatal?(*args); @channel.fatal?(*args); end
-
-  def self.setup_log4j(logger)
-    require "java"
-
-    properties = java.util.Properties.new
-    log4j_level = "WARN"
-    case logger.level
-      when :debug
-        log4j_level = "DEBUG"
-      when :info
-        log4j_level = "INFO"
-      when :warn
-        log4j_level = "WARN"
-    end # case level
-    properties.setProperty("log4j.rootLogger", "#{log4j_level},logstash")
-
-    # TODO(sissel): This is a shitty hack to work around the fact that
-    # LogStash::Logger isn't used anymore. We should fix that.
-    target = logger.instance_eval { @subscribers }.values.first.instance_eval { @io }
-    case target
-      when STDOUT
-        properties.setProperty("log4j.appender.logstash",
-                      "org.apache.log4j.ConsoleAppender")
-        properties.setProperty("log4j.appender.logstash.Target", "System.out")
-      when STDERR
-        properties.setProperty("log4j.appender.logstash",
-                      "org.apache.log4j.ConsoleAppender")
-        properties.setProperty("log4j.appender.logstash.Target", "System.err")
-      when target.is_a?(File)
-        properties.setProperty("log4j.appender.logstash",
-                      "org.apache.log4j.FileAppender")
-        properties.setProperty("log4j.appender.logstash.File", target.path)
-      else
-        properties.setProperty("log4j.appender.logstash", "org.apache.log4j.varia.NullAppender")
-    end # case target
-
-    properties.setProperty("log4j.appender.logstash.layout",
-                  "org.apache.log4j.PatternLayout")
-    properties.setProperty("log4j.appender.logstash.layout.conversionPattern",
-                  "log4j, [%d{yyyy-MM-dd}T%d{HH:mm:ss.SSS}] %5p: %c: %m%n")
-
-    org.apache.log4j.LogManager.resetConfiguration
-    org.apache.log4j.PropertyConfigurator.configure(properties)
-    logger.debug("log4j java properties setup", :log4j_level => log4j_level)
-  end
-end # class LogStash::Logger
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 3f59cc0e715..c5c3b41b016 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/event"
-require "logstash/logging"
 require "logstash/plugin"
 require "logstash/namespace"
 require "logstash/config/mixin"
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 1f9d471b087..bce561c8efb 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/namespace"
-require "logstash/logging"
 require "logstash/config/mixin"
 require "cabin"
 require "concurrent"
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 3dfe44186d9..80d4cc321cb 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -11,6 +11,7 @@
 
 require "logstash/namespace"
 require "logstash/agent"
+require "logstash/util/loggable"
 
 class LogStash::Runner < Clamp::Command
 
@@ -113,9 +114,13 @@ def execute
     require "stud/task"
     require "cabin" # gem 'cabin'
 
+    # Configure the logging and the plugins path before doing anything
+    # else, we need to make sure the logger is configured with the right
+    # log level before actually trying to use it.
+    configure
+
     @agent = LogStash::Agent.new({ :node_name => node_name })
 
-    @logger = Cabin::Channel.get(LogStash)
 
     LogStash::Util::set_thread_name(self.class.name)
 
@@ -130,7 +135,6 @@ def execute
     LogStash::ShutdownWatcher.unsafe_shutdown = unsafe_shutdown?
     LogStash::ShutdownWatcher.logger = @logger
 
-    configure
 
     if version?
       show_version
@@ -223,6 +227,7 @@ def configure_plugin_paths(paths)
 
   # Point logging at a specific path.
   def configure_logging(path)
+    @logger = Cabin::Channel.get(LogStash)
     # Set with the -v (or -vv...) flag
     if quiet?
       @logger.level = :error
@@ -264,6 +269,8 @@ def configure_logging(path)
       @logger.subscribe(STDOUT)
     end
 
+    LogStash::Util::Loggable.logger = @logger
+
     # TODO(sissel): redirect stdout/stderr to the log as well
     # http://jira.codehaus.org/browse/JRUBY-7003
   end # def configure_logging
diff --git a/logstash-core/lib/logstash/util/loggable.rb b/logstash-core/lib/logstash/util/loggable.rb
new file mode 100644
index 00000000000..c8c22650892
--- /dev/null
+++ b/logstash-core/lib/logstash/util/loggable.rb
@@ -0,0 +1,33 @@
+# encoding: utf-8
+require "logstash/namespace"
+require "cabin"
+
+module LogStash module Util
+  module Loggable
+    class << self
+      def logger=(new_logger)
+        @logger = new_logger
+      end
+
+      def logger
+        @logger ||= Cabin::Channel.get(LogStash)
+      end
+    end
+
+    def self.included(base)
+      class << base
+        def logger
+          @logger || Loggable.logger
+        end
+
+        def logger=(new_logger)
+          @logger = new_logger
+        end
+      end
+    end
+
+    def logger
+      self.class.logger
+    end
+  end
+end; end
diff --git a/logstash-core/spec/logstash/util/loggable_spec.rb b/logstash-core/spec/logstash/util/loggable_spec.rb
new file mode 100644
index 00000000000..0cd605d1af9
--- /dev/null
+++ b/logstash-core/spec/logstash/util/loggable_spec.rb
@@ -0,0 +1,90 @@
+# encoding: utf-8
+require "logstash/util/loggable"
+require "spec_helper"
+
+class LoggerTracer 
+  attr_reader :messages
+
+  def initialize()
+    @messages = []
+  end
+
+  def info(message, attributes = {})
+    messages << message
+  end
+end
+
+class DummyLoggerUseCase
+  include LogStash::Util::Loggable
+
+  INSTANCE_METHOD_MESSAGE = "from #instance_method"
+  CLASS_METHOD_MESSAGE = "from .class method"
+
+  def instance_method
+    logger.info(INSTANCE_METHOD_MESSAGE)
+  end
+
+  def self.class_method
+    logger.info(CLASS_METHOD_MESSAGE)
+  end
+end
+
+describe LogStash::Util::Loggable do
+  let(:global_logger_tracer) { LoggerTracer.new }
+  subject { DummyLoggerUseCase.new }
+
+  before :each do
+    LogStash::Util::Loggable.logger = global_logger_tracer
+  end
+
+  after :each do
+    LogStash::Util::Loggable.logger = nil
+  end
+    
+  context "Configuring the logger globally" do
+    it "defines global logger" do
+      expect(subject.logger).to eq(global_logger_tracer)
+    end
+
+    it "works with instance methods" do
+      subject.instance_method
+      expect(global_logger_tracer.messages.last).to eq(DummyLoggerUseCase::INSTANCE_METHOD_MESSAGE)
+    end
+
+    it "works with class methods" do
+      DummyLoggerUseCase.class_method
+      expect(global_logger_tracer.messages.last).to eq(DummyLoggerUseCase::CLASS_METHOD_MESSAGE)
+    end
+  end
+
+  context "Configuring a logger for a specific class" do
+    let(:local_logger_tracer) { LoggerTracer.new }
+
+    before :each do
+      DummyLoggerUseCase.logger = local_logger_tracer
+    end
+
+    after :each do
+      DummyLoggerUseCase.logger = nil
+    end
+
+    it "doesn't change the global logger" do
+      expect(LogStash::Util::Loggable.logger).to eq(global_logger_tracer)
+    end
+
+    it "changes the logger for the class" do
+      expect(subject.logger).to eq(local_logger_tracer)
+    end
+
+    it "works with instance methods" do
+      subject.instance_method
+      expect(local_logger_tracer.messages.last).to eq(DummyLoggerUseCase::INSTANCE_METHOD_MESSAGE)
+    end
+
+    it "works with class methods" do
+      DummyLoggerUseCase.class_method
+      expect(local_logger_tracer.messages.last).to eq(DummyLoggerUseCase::CLASS_METHOD_MESSAGE)
+    end
+  end
+end
+
