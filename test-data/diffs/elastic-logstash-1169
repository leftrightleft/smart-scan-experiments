diff --git a/Makefile b/Makefile
index c92edcba203..36f097d2a0e 100644
--- a/Makefile
+++ b/Makefile
@@ -43,7 +43,7 @@ default:
 	@echo "  tarball -- builds the tarball package"
 	@echo "  tarball-test -- runs the test suite against the tarball package"
 
-TESTS=$(wildcard spec/inputs/file.rb spec/inputs/gelf.rb spec/inputs/imap.rb spec/util/*.rb spec/support/*.rb spec/filters/*.rb spec/examples/*.rb spec/codecs/*.rb spec/conditionals/*.rb spec/event.rb spec/jar.rb spec/web.rb)
+TESTS=$(wildcard spec/**/*.rb)
 
 # The 'version' is generated based on the logstash version, git revision, etc.
 .VERSION.mk: REVISION=$(shell git rev-parse --short HEAD | tr -d ' ')
diff --git a/spec/inputs/collectd.rb b/spec/inputs/collectd.rb
index ae3b0cef534..77af551beaa 100644
--- a/spec/inputs/collectd.rb
+++ b/spec/inputs/collectd.rb
@@ -2,7 +2,7 @@
 require "socket"
 require "tempfile"
 
-describe "inputs/collectd" do
+describe "inputs/collectd", :socket => true do
   extend LogStash::RSpec
   udp_sock = UDPSocket.new(Socket::AF_INET)
 
diff --git a/spec/inputs/file.rb b/spec/inputs/file.rb
index 6cee54f1b3e..7290987a31a 100644
--- a/spec/inputs/file.rb
+++ b/spec/inputs/file.rb
@@ -18,20 +18,39 @@
     CONFIG
 
     input do |pipeline, queue|
-      File.open(tmp_file, "a") do |fd|
-        fd.puts("ignore me")
+      File.open(tmp_file, "w") do |fd|
+        fd.puts("ignore me 1")
         fd.puts("ignore me 2")
       end
+
       Thread.new { pipeline.run }
       sleep 0.1 while !pipeline.ready?
 
-      File.open(tmp_file, "a") do |fd|
-        fd.puts("hello")
-        fd.puts("world")
+      # at this point even if pipeline.ready? == true the plugins
+      # threads might still be initializing so we cannot know when the
+      # file plugin will have seen the original file, it could see it
+      # after the first(s) hello world appends below, hence the
+      # retry logic.
+
+      retries = 0
+      loop do
+        insist { retries } < 20 # 2 secs should be plenty?
+
+        File.open(tmp_file, "a") do |fd|
+          fd.puts("hello")
+          fd.puts("world")
+        end
+
+        if queue.size >= 2
+          events = 2.times.collect { queue.pop }
+          insist { events[0]["message"] } == "hello"
+          insist { events[1]["message"] } == "world"
+          break
+        end
+
+        sleep(0.1)
+        retries += 1
       end
-      events = 2.times.collect { queue.pop } 
-      insist { events[0]["message"] } == "hello"
-      insist { events[1]["message"] } == "world"
     end
   end
 
@@ -49,20 +68,16 @@
       }
     CONFIG
 
-    before(:each) do
-      File.open(tmp_file, "w") do |fd|
-        fd.puts "hello"
-        fd.puts "world"
+    input do |pipeline, queue|
+      File.open(tmp_file, "a") do |fd|
+        fd.puts("hello")
+        fd.puts("world")
       end
-    end
 
-    after(:each) do
-      tmp_file.close!
-    end
-
-    input do |pipeline, queue|
       Thread.new { pipeline.run }
-      events = 2.times.collect { queue.pop } 
+      sleep 0.1 while !pipeline.ready?
+
+      events = 2.times.collect { queue.pop }
       insist { events[0]["message"] } == "hello"
       insist { events[1]["message"] } == "world"
     end
@@ -84,21 +99,29 @@
     CONFIG
 
     input do |pipeline, queue|
-      File.open(tmp_file, "a") do |fd|
-        fd.puts "hello"
-        fd.puts "world"
+      File.open(tmp_file, "w") do |fd|
+        fd.puts("hello")
+        fd.puts("world")
       end
-      Thread.new { pipeline.run }
-      events = 2.times.collect { queue.pop } 
+
+      t = Thread.new { pipeline.run }
+      sleep 0.1 while !pipeline.ready?
+
+      events = 2.times.collect { queue.pop }
       pipeline.shutdown
+      t.join
 
       File.open(tmp_file, "a") do |fd|
-        fd.puts "foo"
-        fd.puts "bar"
-        fd.puts "baz"
+        fd.puts("foo")
+        fd.puts("bar")
+        fd.puts("baz")
       end
+
       Thread.new { pipeline.run }
-      events = 3.times.collect { queue.pop } 
+      sleep 0.1 while !pipeline.ready?
+
+      events = 3.times.collect { queue.pop }
+
       insist { events[0]["message"] } == "foo"
       insist { events[1]["message"] } == "bar"
       insist { events[2]["message"] } == "baz"
diff --git a/spec/inputs/generator.rb b/spec/inputs/generator.rb
index 342d6cfd48d..b026e9b06f9 100644
--- a/spec/inputs/generator.rb
+++ b/spec/inputs/generator.rb
@@ -1,6 +1,6 @@
 require "test_utils"
 
-describe "inputs/generator" do
+describe "inputs/generator", :performance => true do
   extend LogStash::RSpec
 
   describe "generate events" do
@@ -23,7 +23,7 @@
         insist { event["sequence"] } == i
       end
       duration = Time.now - start
-      puts "Rate: #{event_count / duration}"
+      puts "Generator Rate: #{"%02.0f/sec" % (event_count / duration)}, Elapsed: #{duration}s"
       pipeline.shutdown
     end # input
   end
diff --git a/spec/inputs/redis.rb b/spec/inputs/redis.rb
index bec6d6a45d9..c7f6b513fbc 100644
--- a/spec/inputs/redis.rb
+++ b/spec/inputs/redis.rb
@@ -22,7 +22,7 @@ def process(pipeline, queue, event_count)
   pipeline.shutdown
 end # process
 
-describe "inputs/redis" do
+describe "inputs/redis", :redis => true do
   extend LogStash::RSpec
 
   describe "read events from a list" do
diff --git a/spec/inputs/syslog.rb b/spec/inputs/syslog.rb
index 31ab4949e97..37fa3efcfed 100644
--- a/spec/inputs/syslog.rb
+++ b/spec/inputs/syslog.rb
@@ -2,7 +2,7 @@
 require "test_utils"
 require "socket"
 
-describe "inputs/syslog" do
+describe "inputs/syslog", :socket => true do
   extend LogStash::RSpec
 
   describe "properly handles priority, severity and facilities" do
diff --git a/spec/inputs/tcp.rb b/spec/inputs/tcp.rb
index d228eac13bd..2df9db081d6 100644
--- a/spec/inputs/tcp.rb
+++ b/spec/inputs/tcp.rb
@@ -2,7 +2,7 @@
 require "test_utils"
 require "socket"
 
-describe "inputs/tcp" do
+describe "inputs/tcp", :socket => true do
   extend LogStash::RSpec
 
   describe "read json_event" do
diff --git a/spec/outputs/elasticsearch.rb b/spec/outputs/elasticsearch.rb
index 8586e04e877..915959dadc3 100644
--- a/spec/outputs/elasticsearch.rb
+++ b/spec/outputs/elasticsearch.rb
@@ -1,7 +1,7 @@
 require "test_utils"
 require "ftw"
 
-describe "outputs/elasticsearch" do
+describe "outputs/elasticsearch", :elasticsearch => true do
   extend LogStash::RSpec
 
   describe "ship lots of events w/ default index_type" do
@@ -330,9 +330,9 @@
           terms = results["terms"].collect { |t| t["term"] }
 
           insist { terms }.include?("us")
-          
+
           # 'at' is a stopword, make sure stopwords are not ignored.
-          insist { terms }.include?("at") 
+          insist { terms }.include?("at")
         end
       end
     end
diff --git a/spec/outputs/elasticsearch_http.rb b/spec/outputs/elasticsearch_http.rb
index 7aefcb7a984..d1b1072e06a 100644
--- a/spec/outputs/elasticsearch_http.rb
+++ b/spec/outputs/elasticsearch_http.rb
@@ -1,6 +1,6 @@
 require "test_utils"
 
-describe "outputs/elasticsearch_http" do
+describe "outputs/elasticsearch_http", :elasticsearch => true do
   extend LogStash::RSpec
 
   describe "ship lots of events w/ default index_type" do
@@ -232,9 +232,9 @@
       terms = results["terms"].collect { |t| t["term"] }
 
       insist { terms }.include?("us")
-      
+
       # 'at' is a stopword, make sure stopwords are not ignored.
-      insist { terms }.include?("at") 
+      insist { terms }.include?("at")
     end
   end
 end
diff --git a/spec/outputs/email.rb b/spec/outputs/email.rb
index 01ab946698c..fdcb6c3e94d 100644
--- a/spec/outputs/email.rb
+++ b/spec/outputs/email.rb
@@ -2,9 +2,9 @@
 require "rumbster"
 require "message_observers"
 
-describe "outputs/email" do
+describe "outputs/email", :broken => true do
     extend LogStash::RSpec
-    
+
     @@port=2525
     let (:rumbster) { Rumbster.new(@@port) }
     let (:message_observer) { MailMessageObserver.new }
diff --git a/spec/outputs/file.rb b/spec/outputs/file.rb
index aabb82625d1..bdf6a769809 100644
--- a/spec/outputs/file.rb
+++ b/spec/outputs/file.rb
@@ -8,7 +8,7 @@
   describe "ship lots of events to a file" do
     event_count = 10000 + rand(500)
     tmp_file = Tempfile.new('logstash-spec-output-file')
-    
+
     config <<-CONFIG
       input {
         generator {
@@ -60,17 +60,7 @@
     agent do
       line_num = 0
       # Now check all events for order and correctness.
-      Zlib::GzipReader.new(File.open(tmp_file)).each_line do |line|
-        event = LogStash::Event.new(JSON.parse(line))
-        insist {event["message"]} == "hello world"
-        insist {event["sequence"]} == line_num
-        line_num += 1
-      end
-      insist {line_num} == event_count
-
-      #LOGSTASH-997 confirm usage of zcat command on file
-      line_num = 0
-      `zcat #{tmp_file.path()}`.split("\n").each do |line|
+      Zlib::GzipReader.open(tmp_file.path).each_line do |line|
         event = LogStash::Event.new(JSON.parse(line))
         insist {event["message"]} == "hello world"
         insist {event["sequence"]} == line_num
diff --git a/spec/outputs/graphite.rb b/spec/outputs/graphite.rb
index 049e69d77d6..2b5fe1ac428 100644
--- a/spec/outputs/graphite.rb
+++ b/spec/outputs/graphite.rb
@@ -2,7 +2,7 @@
 require "logstash/outputs/graphite"
 require "mocha/api"
 
-describe LogStash::Outputs::Graphite do
+describe LogStash::Outputs::Graphite, :socket => true do
   extend LogStash::RSpec
 
   describe "defaults should include all metrics" do
diff --git a/spec/outputs/redis.rb b/spec/outputs/redis.rb
index 3a50e6a4e4e..442d8b01734 100644
--- a/spec/outputs/redis.rb
+++ b/spec/outputs/redis.rb
@@ -2,7 +2,7 @@
 require "logstash/outputs/redis"
 require "redis"
 
-describe LogStash::Outputs::Redis do
+describe LogStash::Outputs::Redis, :redis => true do
   extend LogStash::RSpec
 
   describe "ship lots of events to a list" do
diff --git a/spec/test_utils.rb b/spec/test_utils.rb
index 1bd17677c47..97c576dd2ba 100644
--- a/spec/test_utils.rb
+++ b/spec/test_utils.rb
@@ -35,6 +35,10 @@
   $logger.level = :error
 end
 
+RSpec.configure do |config|
+  config.filter_run_excluding :redis => true, :socket => true, :performance => true, :elasticsearch => true, :broken => true
+end
+
 module LogStash
   module RSpec
     def config(configstr)
@@ -44,7 +48,7 @@ def config(configstr)
     def type(default_type)
       let(:default_type) { default_type }
     end
-    
+
     def tags(*tags)
       let(:default_tags) { tags }
       puts "Setting default tags: #{@default_tags}"
@@ -93,7 +97,7 @@ def input(&block)
       it "inputs" do
         pipeline = LogStash::Pipeline.new(config)
         queue = Queue.new
-        pipeline.instance_eval do 
+        pipeline.instance_eval do
           @output_func = lambda { |event| queue << event }
         end
         block.call(pipeline, queue)
