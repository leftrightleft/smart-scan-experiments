diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index ca78035ef05..7a3265ee94c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradlew b/gradlew
index 27309d92314..cccdd3d517f 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e72f..e95643d6a2c 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Input.java b/logstash-core/src/main/java/org/logstash/plugin/Input.java
new file mode 100644
index 00000000000..d531f108013
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Input.java
@@ -0,0 +1,43 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+import java.util.function.Consumer;
+
+/**
+ * A Logstash input plugin.
+ * <p>
+ * Input plugins produce events intended given to Processors.
+ * <p>
+ * Inputs will generally run forever until there is some terminating condition such as a pipeline shutdown.
+ */
+public interface Input {
+    /**
+     * This is the main method for the input.
+     *
+     * Acknowledging Data:
+     * <p>
+     * When `consumer.accept(...)` returns, the given Events have been successfully written into the consumer, and it is now
+     * safe to acknowledge these events to the upstream data source. The consumer is generally the Logstash internal queue,
+     * such as the persistent queue.
+     *
+     * * for any request-response plugins, you should only respond *after* consumer.accept() has returned.
+     * * for any protocols with acknowledgements, you should only acknowledge *after* consumer.accept() has returned.
+     *
+     * @param consumer Send batches of events with consumer.accept(batch).
+     */
+    void run(Consumer<Collection<Event>> consumer);
+
+    /**
+     * Initiate and complete shutdown of this input.
+     *
+     * This method will be called when any of the following occur:
+     *   * Logstash is shutting down
+     *   * The pipeline containing this input is being terminated.
+     *
+     * Note: This method will be called from a separate thread than the one executing the `run` method.
+     *
+     */
+    void shutdown();
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/InputTask.java b/logstash-core/src/main/java/org/logstash/plugin/InputTask.java
new file mode 100644
index 00000000000..3cc2b9842de
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/InputTask.java
@@ -0,0 +1,41 @@
+package org.logstash.plugin;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.logstash.Event;
+
+import java.util.Collection;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+
+public class InputTask {
+    private static final Logger logger = LogManager.getLogger();
+    private final Input input;
+    private Thread thread;
+
+    public InputTask(Input input, Consumer<Collection<Event>> consumer) {
+        this.input = input;
+        thread = new Thread(() -> input.run(consumer));
+    }
+
+    public void start() {
+        thread.start();
+    }
+
+    public void awaitTermination(long timeout, TimeUnit unit) {
+        try {
+            thread.join(unit.toMillis(timeout));
+        } catch (InterruptedException e) {
+            // This isn't expected to occur.
+            logger.error("awaitTermination was interrupted", e);
+        }
+    }
+
+
+    public void shutdown() {
+        if (thread.isAlive()) {
+            thread.interrupt();
+            input.shutdown();
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Output.java b/logstash-core/src/main/java/org/logstash/plugin/Output.java
new file mode 100644
index 00000000000..fb0fa54a56f
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Output.java
@@ -0,0 +1,15 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+
+public interface Output {
+    /**
+     * Process a batch with the intent of sending the event externally.
+     *
+     *
+     * @param events the events to output.
+     */
+    void process(Collection<Event> events);
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Processor.java b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
new file mode 100644
index 00000000000..b0172fe08a4
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
@@ -0,0 +1,15 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+
+public interface Processor {
+    /**
+     * Process events. In the past, this was called a `filter` in Logstash.
+     *
+     * @param events The events to be processed
+     * @return Any new events created by this processor.
+     */
+    Collection<Event> process(Collection<Event> events);
+}
diff --git a/logstash-core/src/test/java/org/logstash/TestUtil.java b/logstash-core/src/test/java/org/logstash/TestUtil.java
new file mode 100644
index 00000000000..6d21168af0c
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/TestUtil.java
@@ -0,0 +1,10 @@
+package org.logstash;
+
+import java.util.Random;
+
+public class TestUtil {
+    /**
+     * A random instance to share in the test suite.
+     */
+    public static final Random random = new Random();
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/Generator.java b/logstash-core/src/test/java/org/logstash/plugin/Generator.java
new file mode 100644
index 00000000000..77b572a2035
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/Generator.java
@@ -0,0 +1,42 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+
+class Generator implements Input {
+    private final ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
+    private volatile int counter = 0;
+
+    private void generate(Consumer<Collection<Event>> consumer) {
+        counter++;
+        Event event = new Event();
+        event.setField("value", counter);
+        consumer.accept(Collections.singleton(event));
+    }
+
+    @Override
+    public void run(Consumer<Collection<Event>> consumer) {
+        counter = 0;
+        service.scheduleAtFixedRate(() -> generate(consumer), 0, 10, TimeUnit.MILLISECONDS);
+
+        try {
+            // Block forever.
+            while (!service.awaitTermination(60, TimeUnit.SECONDS)) ;
+        } catch (InterruptedException e) {
+            // ignore, but we'll break out and call shutdown().
+        } finally {
+            shutdown();
+        }
+    }
+
+    @Override
+    public void shutdown() {
+        service.shutdownNow();
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/InputTest.java b/logstash-core/src/test/java/org/logstash/plugin/InputTest.java
new file mode 100644
index 00000000000..dd7bc59c362
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/InputTest.java
@@ -0,0 +1,51 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.TestUtil;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.function.Consumer;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+
+public class InputTest {
+    private Collection<Collection<Event>> batches = new LinkedList<>();
+    private int batchCount = TestUtil.random.nextInt(10) + 1;
+
+    @Test
+    public void testInput() {
+        Input i = new TestInput();
+        i.run(batches::add);
+        assertEquals(batchCount, batches.size());
+        for (Collection<Event> events : batches) {
+            assertFalse(events.isEmpty());
+        }
+    }
+
+    private class TestInput implements Input {
+        @Override
+        public void run(Consumer<Collection<Event>> consumer) {
+            for (int b = 0; b < batchCount; b++) {
+                int eventCountPerBatch = TestUtil.random.nextInt(100) + 1;
+                Collection<Event> events = new LinkedList<>();
+                for (int i = 0; i < eventCountPerBatch; i++) {
+                    Event e = new Event();
+                    e.setField("message", "hello world");
+                    e.setField("i", i);
+                    e.setField("b", b);
+                    events.add(e);
+                }
+                consumer.accept(Collections.unmodifiableCollection(events));
+            }
+        }
+
+        @Override
+        public void shutdown() {
+
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
new file mode 100644
index 00000000000..76cd6ff45da
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
@@ -0,0 +1,51 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.TestUtil;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedList;
+
+import static org.junit.Assert.assertEquals;
+
+public class ProcessorTest {
+    static Collection<Event> generateEvents(int count) {
+        Collection<Event> events = new LinkedList<>();
+        for (long i = 0; i < count; i++) {
+            Event event = new Event();
+            event.setField("message", "hello world");
+            event.setField("i", i);
+            events.add(event);
+        }
+        return Collections.unmodifiableCollection(events);
+    }
+
+    private class TestFilter implements Processor {
+        @Override
+        public Collection<Event> process(Collection<Event> events) {
+            for (Event e : events) {
+                e.setField("visited", "testFilter");
+            }
+            return null;
+        }
+    }
+
+    private Processor processor = new TestFilter();
+    private int eventCount = TestUtil.random.nextInt(100);
+    private Collection<Event> events = generateEvents(eventCount);
+
+    @Test
+    public void testFilter() {
+        Collection<Event> newEvents = processor.process(events);
+
+        assertEquals(null, newEvents);
+
+        long i = 0;
+        for (Event event : events) {
+            assertEquals(i, event.getField("i"));
+            i++;
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/TaskTest.java b/logstash-core/src/test/java/org/logstash/plugin/TaskTest.java
new file mode 100644
index 00000000000..3eafebdbf09
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/TaskTest.java
@@ -0,0 +1,31 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+
+import java.util.concurrent.SynchronousQueue;
+
+import static org.junit.Assert.assertEquals;
+
+public class TaskTest {
+    SynchronousQueue<Event> queue = new SynchronousQueue<>();
+
+    private void enqueue(Event event) {
+        try {
+            queue.put(event);
+        } catch (InterruptedException e) {
+            // give up and continue
+        }
+    }
+
+    @Test
+    public void testWorkflow() throws Exception {
+        InputTask task = new InputTask(new Generator(), (events) -> events.forEach(this::enqueue));
+        task.start();
+        Event event = queue.take();
+        assertEquals(1L, event.getField("value"));
+        task.shutdown();
+
+    }
+
+}
\ No newline at end of file
