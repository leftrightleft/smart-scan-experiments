diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 1d0ec7f25d1..cea1b80a3f9 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -32,6 +32,7 @@
 
 module LogStash; class BasePipeline
   include LogStash::Util::Loggable
+  include LogStash::Util::EnvironmentVariables
 
   attr_reader :settings, :config_str, :config_hash, :inputs, :filters, :outputs, :pipeline_id, :lir, :execution_context, :ephemeral_id
   attr_reader :pipeline_config
@@ -117,9 +118,9 @@ def plugin(plugin_type, name, line, column, *args)
       id = SecureRandom.uuid # codecs don't really use their IDs for metrics, so we can use anything here
     else
       # Pull the ID from LIR to keep IDs consistent between the two representations
-      id = lir.graph.vertices.filter do |v| 
-        v.source_with_metadata && 
-        v.source_with_metadata.line == line && 
+      id = lir.graph.vertices.filter do |v|
+        v.source_with_metadata &&
+        v.source_with_metadata.line == line &&
         v.source_with_metadata.column == column
       end.findFirst.get.id
     end
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index d4dc0fe9840..14169c06a33 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -207,6 +207,52 @@ class TestPipeline < LogStash::Pipeline
     end
   end
 
+  context "environment variables in ids" do
+    before(:each) do
+      allow(LogStash::Plugin).to receive(:lookup).with("input", "dummyinput").and_return(DummyInput)
+      allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_return(DummyCodec)
+      allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput").and_return(::LogStash::Outputs::DummyOutput)
+    end
+
+
+    let(:test_config_without_output_workers) {
+      <<-eos
+      input {
+        dummyinput {'id' => '${INPUT}_1'}
+      }
+
+      output {
+        dummyoutput {'id' => '${OUTPUT}_1'}
+      }
+      eos
+    }
+
+    context "should be subsituted" do
+      let(:pipeline) { mock_pipeline_from_string(test_config_without_output_workers) }
+      let(:output) { pipeline.outputs.first }
+      let(:input) { pipeline.inputs.first }
+
+      before do
+        ENV['INPUT'] = 'input'
+        ENV['OUTPUT'] = 'output'
+      end
+
+      after do
+        ENV.delete('INPUT')
+        ENV.delete('OUTPUT')
+        pipeline.shutdown
+      end
+
+      it "in different plugin types" do
+        pipeline.run
+
+        expect(input.id).to eql('input_1')
+        expect(output.id).to eql('output_1')
+      end
+    end
+  end
+
+
   describe "defaulting the pipeline workers based on thread safety" do
     before(:each) do
       allow(LogStash::Plugin).to receive(:lookup).with("input", "dummyinput").and_return(DummyInput)
