diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 60b864a552c..079be843224 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -519,7 +519,10 @@ def plugin_threads_info
   end
 
   def stalling_threads_info
-    plugin_threads_info
+    all_threads = plugin_threads_info
+    all_threads << Util.thread_info(@thread) if @thread
+
+    all_threads
       .reject {|t| t["blocked_on"] } # known benign blocking statuses
       .each {|t| t.delete("backtrace") }
       .each {|t| t.delete("blocked_on") }
diff --git a/logstash-core/spec/logstash/pipeline_reporter_spec.rb b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
index 555319b53df..2f541d1c347 100644
--- a/logstash-core/spec/logstash/pipeline_reporter_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
@@ -52,8 +52,9 @@
       expect(@pre_snapshot.stalling_threads_info).to eql([])
     end
 
-    it "should end with no stalled threads" do
-      expect(@post_snapshot.stalling_threads_info).to eql([])
+    it "should end with no plugin stalled threads" do
+      expect(@post_snapshot.stalling_threads_info.length).to be(1)
+      expect(@post_snapshot.stalling_threads_info).to include(hash_including("name" => pipeline.instance_variable_get("@thread")[:name]))
     end
   end
 
diff --git a/logstash-core/spec/logstash/shutdown_watcher_spec.rb b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
index eefeaf6c1f6..00182ea5c45 100644
--- a/logstash-core/spec/logstash/shutdown_watcher_spec.rb
+++ b/logstash-core/spec/logstash/shutdown_watcher_spec.rb
@@ -94,4 +94,75 @@
       end
     end
   end
+
+  context "when pipeline inflight events are stalled" do
+    let(:inflight_counters) { (1..5000).to_a }
+
+    before :each do
+      allow(reporter_snapshot).to receive(:inflight_count).and_return(*inflight_counters)
+    end
+
+    context "and threads are stalled" do
+      before :each do
+        allow(reporter_snapshot).to receive(:stalling_threads) {{}}
+      end
+
+      describe ".unsafe_shutdown = false" do
+        before :each do
+          subject.class.unsafe_shutdown = false
+        end
+
+        it "shouldn't force the shutdown" do
+          expect(subject).to_not receive(:force_exit)
+          thread = Thread.new(subject) {|subject| subject.start }
+          sleep 0.1 until subject.attempts_count > check_threshold
+          subject.stop!
+          expect(thread.join(60)).to_not be_nil
+        end
+      end
+    end
+
+    context "and threads are not stalled" do
+      before :each do
+        allow(reporter_snapshot).to receive(:stalling_threads) {{ id: rand(100)}}
+      end
+
+      describe ".unsafe_shutdown = false" do
+        before :each do
+          subject.class.unsafe_shutdown = false
+        end
+
+        it "shouldn't force the shutdown" do
+          expect(subject).to_not receive(:force_exit)
+          thread = Thread.new(subject) {|subject| subject.start }
+          sleep 0.1 until subject.attempts_count > check_threshold
+          subject.stop!
+          expect(thread.join(60)).to_not be_nil
+        end
+      end
+    end
+
+    context "and all reported inflight_count are zeros" do
+      let(:inflight_counters) { Array.new(5000, 0) }
+
+      before :each do
+        subject.class.unsafe_shutdown = true
+        allow(reporter_snapshot).to receive(:stalling_threads) {{ id: rand(100)}}
+      end
+
+      describe ".unsafe_shutdown = false" do
+        before :each do
+          subject.class.unsafe_shutdown = false
+        end
+
+        it "shouldn't force the shutdown" do
+          expect(subject).to_not receive(:force_exit)
+          thread = Thread.new(subject) {|subject| subject.start }
+          sleep 0.1 until subject.attempts_count > check_threshold
+          subject.stop!
+          expect(thread.join(60)).to_not be_nil
+        end
+      end
+    end
+  end
 end
