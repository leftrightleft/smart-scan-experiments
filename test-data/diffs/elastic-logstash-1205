diff --git a/lib/logstash/codecs/graphite.rb b/lib/logstash/codecs/graphite.rb
index 0c3cb4e362b..e3510f3b65e 100644
--- a/lib/logstash/codecs/graphite.rb
+++ b/lib/logstash/codecs/graphite.rb
@@ -9,24 +9,13 @@ class LogStash::Codecs::Graphite < LogStash::Codecs::Base
 
   milestone 2
 
-  # The character encoding used in this codec. Examples include "UTF-8" and
-  # "CP1252"
-  #
-  # JSON requires valid UTF-8 strings, but in some cases, software that
-  # emits JSON does so in another encoding (nxlog, for example). In
-  # weird cases like this, you can set the charset setting to the
-  # actual encoding of the text and logstash will convert it for you.
-  #
-  # For nxlog users, you'll want to set this to "CP1252"
-  config :charset, :validate => ::Encoding.name_list, :default => "UTF-8"
-  
   EXCLUDE_ALWAYS = [ "@timestamp", "@version" ]
 
   DEFAULT_METRICS_FORMAT = "*"
   METRIC_PLACEHOLDER = "*"
 
   # The metric(s) to use. This supports dynamic strings like %{host}
-  # for metric names and also for values. This is a hash field with key 
+  # for metric names and also for values. This is a hash field with key
   # of the metric name, value of the metric value. Example:
   #
   #     [ "%{host}/uptime", "%{uptime_1m}" ]
@@ -51,14 +40,14 @@ class LogStash::Codecs::Graphite < LogStash::Codecs::Base
   #
   # NOTE: If no metrics_format is defined the name of the metric will be used as fallback.
   config :metrics_format, :validate => :string, :default => DEFAULT_METRICS_FORMAT
-  
-  
+
+
   public
   def initialize(params={})
     super(params)
     @lines = LogStash::Codecs::Line.new
   end
-  
+
   public
   def decode(data)
     @lines.decode(data) do |event|
@@ -75,7 +64,7 @@ def construct_metric_name(metric)
 
     return metric
   end
-  
+
   public
   def encode(event)
     # Graphite message format: metric value timestamp\n
@@ -111,4 +100,4 @@ def encode(event)
     end # if messages.empty?
   end # def encode
 
-end # class LogStash::Codecs::JSON
+end # class LogStash::Codecs::Graphite
diff --git a/lib/logstash/codecs/json_spooler.rb b/lib/logstash/codecs/json_spooler.rb
index cbd16dfade4..a143971eeac 100644
--- a/lib/logstash/codecs/json_spooler.rb
+++ b/lib/logstash/codecs/json_spooler.rb
@@ -5,7 +5,12 @@
 # This is the base class for logstash codecs.
 class LogStash::Codecs::JsonSpooler < LogStash::Codecs::Spool
   config_name "json_spooler"
-  milestone 1
+  milestone 0
+
+  public
+  def register
+    @logger.error("the json_spooler codec is deprecated and will be removed in a future release")
+  end
 
   public
   def decode(data)
diff --git a/lib/logstash/codecs/multiline.rb b/lib/logstash/codecs/multiline.rb
index ccb79ae4b77..e3833de4233 100644
--- a/lib/logstash/codecs/multiline.rb
+++ b/lib/logstash/codecs/multiline.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/codecs/base"
+require "logstash/util/charset"
 
 # The multiline codec will collapse multiline messages and merge them into a
 # single event.
@@ -150,16 +151,13 @@ def register
     @buffer = []
     @handler = method("do_#{@what}".to_sym)
 
-    @charset_encoding = Encoding.find(@charset)
+    @converter = LogStash::Util::Charset.new(@charset)
+    @converter.logger = @logger
   end # def register
 
   public
   def decode(text, &block)
-    text.force_encoding(@charset_encoding)
-    if @charset_encoding != Encoding::UTF_8
-      # Convert to UTF-8 if not in that character set.
-      text = text.encode(Encoding::UTF_8, :invalid => :replace, :undef => :replace)
-    end
+    text = @converter.convert(text)
 
     match = @grok.match(text)
     @logger.debug("Multiline", :pattern => @pattern, :text => text,
diff --git a/spec/codecs/json_spooler.rb b/spec/codecs/json_spooler.rb
index 6093e64ccb3..7cb78da0b86 100644
--- a/spec/codecs/json_spooler.rb
+++ b/spec/codecs/json_spooler.rb
@@ -3,41 +3,41 @@
 require "insist"
 
 describe LogStash::Codecs::JsonSpooler do
-  subject do
-    next LogStash::Codecs::JsonSpooler.new
-  end
+  # subject do
+  #   next LogStash::Codecs::JsonSpooler.new
+  # end
 
-  context "#decode" do
-    it "should return an event from spooled json data" do
-      data = {"a" => 1}
-      events = [LogStash::Event.new(data), LogStash::Event.new(data),
-        LogStash::Event.new(data)]
-      subject.decode(events.to_json) do |event|
-        insist { event.is_a? LogStash::Event }
-        insist { event["a"] } == data["a"]
-      end
-    end
-  end
+  # context "#decode" do
+  #   it "should return an event from spooled json data" do
+  #     data = {"a" => 1}
+  #     events = [LogStash::Event.new(data), LogStash::Event.new(data),
+  #       LogStash::Event.new(data)]
+  #     subject.decode(events.to_json) do |event|
+  #       insist { event.is_a? LogStash::Event }
+  #       insist { event["a"] } == data["a"]
+  #     end
+  #   end
+  # end
 
-  context "#encode" do
-    it "should return spooled json data" do
-      data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
-      subject.spool_size = 3
-      got_event = false
-      subject.on_event do |d|
-        events = JSON.parse(d)
-        insist { events.is_a? Array }
-        insist { events[0].is_a? LogStash::Event }
-        insist { events[0]["foo"] } == data["foo"]
-        insist { events[0]["baz"] } == data["baz"]
-        insist { events[0]["bah"] } == data["bah"]
-        insist { events.length } == 3
-        got_event = true
-      end
-      3.times do
-        subject.encode(LogStash::Event.new(data))
-      end
-      insist { got_event }
-    end
-  end
+  # context "#encode" do
+  #   it "should return spooled json data" do
+  #     data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
+  #     subject.spool_size = 3
+  #     got_event = false
+  #     subject.on_event do |d|
+  #       events = JSON.parse(d)
+  #       insist { events.is_a? Array }
+  #       insist { events[0].is_a? LogStash::Event }
+  #       insist { events[0]["foo"] } == data["foo"]
+  #       insist { events[0]["baz"] } == data["baz"]
+  #       insist { events[0]["bah"] } == data["bah"]
+  #       insist { events.length } == 3
+  #       got_event = true
+  #     end
+  #     3.times do
+  #       subject.encode(LogStash::Event.new(data))
+  #     end
+  #     insist { got_event }
+  #   end
+  # end
 end
diff --git a/spec/codecs/multiline.rb b/spec/codecs/multiline.rb
index 3f9e016bf65..2c75317f21c 100644
--- a/spec/codecs/multiline.rb
+++ b/spec/codecs/multiline.rb
@@ -1,3 +1,5 @@
+# encoding: utf-8
+
 require "logstash/codecs/multiline"
 require "logstash/event"
 require "insist"
@@ -56,5 +58,103 @@
       insist { events.size } == 1
       insist { events.first["message"] } == lines.join("\n")
     end
+
+
+    context "using default UTF-8 charset" do
+
+      it "should decode valid UTF-8 input" do
+        codec = LogStash::Codecs::Multiline.new("pattern" => "^\\s", "what" => "previous")
+        lines = [ "foobar", "κόσμε" ]
+        events = []
+        lines.each do |line|
+          insist { line.encoding.name } == "UTF-8"
+          insist { line.valid_encoding? } == true
+
+          codec.decode(line) { |event| events << event }
+        end
+        codec.flush { |e| events << e }
+        insist { events.size } == 2
+
+        events.zip(lines).each do |tuple|
+          insist { tuple[0]["message"] } == tuple[1]
+          insist { tuple[0]["message"].encoding.name } == "UTF-8"
+        end
+      end
+
+      it "should escape invalid sequences" do
+        codec = LogStash::Codecs::Multiline.new("pattern" => "^\\s", "what" => "previous")
+        lines = [ "foo \xED\xB9\x81\xC3", "bar \xAD" ]
+        events = []
+        lines.each do |line|
+          insist { line.encoding.name } == "UTF-8"
+          insist { line.valid_encoding? } == false
+
+          codec.decode(line) { |event| events << event }
+        end
+        codec.flush { |e| events << e }
+        insist { events.size } == 2
+
+        events.zip(lines).each do |tuple|
+          insist { tuple[0]["message"] } == tuple[1].inspect[1..-2]
+          insist { tuple[0]["message"].encoding.name } == "UTF-8"
+        end
+      end
+    end
+
+
+    context "with valid non UTF-8 source encoding" do
+
+      it "should encode to UTF-8" do
+        codec = LogStash::Codecs::Multiline.new("charset" => "ISO-8859-1", "pattern" => "^\\s", "what" => "previous")
+        samples = [
+          ["foobar", "foobar"],
+          ["\xE0 Montr\xE9al", "à Montréal"],
+        ]
+
+        # lines = [ "foo \xED\xB9\x81\xC3", "bar \xAD" ]
+        events = []
+        samples.map{|(a, b)| a.force_encoding("ISO-8859-1")}.each do |line|
+          insist { line.encoding.name } == "ISO-8859-1"
+          insist { line.valid_encoding? } == true
+
+          codec.decode(line) { |event| events << event }
+        end
+        codec.flush { |e| events << e }
+        insist { events.size } == 2
+
+        events.zip(samples.map{|(a, b)| b}).each do |tuple|
+          insist { tuple[1].encoding.name } == "UTF-8"
+          insist { tuple[0]["message"] } == tuple[1]
+          insist { tuple[0]["message"].encoding.name } == "UTF-8"
+        end
+      end
+    end
+
+    context "with invalid non UTF-8 source encoding" do
+
+     it "should encode to UTF-8" do
+        codec = LogStash::Codecs::Multiline.new("charset" => "ASCII-8BIT", "pattern" => "^\\s", "what" => "previous")
+        samples = [
+          ["\xE0 Montr\xE9al", "� Montr�al"],
+          ["\xCE\xBA\xCF\x8C\xCF\x83\xCE\xBC\xCE\xB5", "����������"],
+        ]
+        events = []
+        samples.map{|(a, b)| a.force_encoding("ASCII-8BIT")}.each do |line|
+          insist { line.encoding.name } == "ASCII-8BIT"
+          insist { line.valid_encoding? } == true
+
+          codec.decode(line) { |event| events << event }
+        end
+        codec.flush { |e| events << e }
+        insist { events.size } == 2
+
+        events.zip(samples.map{|(a, b)| b}).each do |tuple|
+          insist { tuple[1].encoding.name } == "UTF-8"
+          insist { tuple[0]["message"] } == tuple[1]
+          insist { tuple[0]["message"].encoding.name } == "UTF-8"
+        end
+      end
+
+    end
   end
 end
diff --git a/spec/codecs/plain.rb b/spec/codecs/plain.rb
index de9fede2734..c7b555585a1 100644
--- a/spec/codecs/plain.rb
+++ b/spec/codecs/plain.rb
@@ -11,6 +11,76 @@
         insist { event.is_a? LogStash::Event }
       end
     end
+
+    context "using default UTF-8 charset" do
+
+      it "should decode valid UTF-8 input" do
+        ["foobar", "κόσμε"].each do |data|
+          insist { data.encoding.name } == "UTF-8"
+          insist { data.valid_encoding? } == true
+          subject.decode(data) do |event|
+            insist { event["message"] } == data
+            insist { event["message"].encoding.name } == "UTF-8"
+          end
+        end
+      end
+
+      it "should escape invalid sequences" do
+        ["foo \xED\xB9\x81\xC3", "bar \xAD"].each do |data|
+          insist { data.encoding.name } == "UTF-8"
+          insist { data.valid_encoding? } == false
+          subject.decode(data) do |event|
+            insist { event["message"] } == data.inspect[1..-2]
+            insist { event["message"].encoding.name } == "UTF-8"
+          end
+        end
+      end
+    end
+
+
+    context "with valid non UTF-8 source encoding" do
+
+      subject{LogStash::Codecs::Plain.new("charset" => "ISO-8859-1")}
+
+      it "should encode to UTF-8" do
+        samples = [
+          ["foobar", "foobar"],
+          ["\xE0 Montr\xE9al", "à Montréal"],
+        ]
+        samples.map{|(a, b)| [a.force_encoding("ISO-8859-1"), b]}.each do |(a, b)|
+          insist { a.encoding.name } == "ISO-8859-1"
+          insist { b.encoding.name } == "UTF-8"
+          insist { a.valid_encoding? } == true
+
+          subject.decode(a) do |event|
+            insist { event["message"] } == b
+            insist { event["message"].encoding.name } == "UTF-8"
+          end
+        end
+      end
+    end
+
+    context "with invalid non UTF-8 source encoding" do
+
+      subject{LogStash::Codecs::Plain.new("charset" => "ASCII-8BIT")}
+
+      it "should encode to UTF-8" do
+        samples = [
+          ["\xE0 Montr\xE9al", "� Montr�al"],
+          ["\xCE\xBA\xCF\x8C\xCF\x83\xCE\xBC\xCE\xB5", "����������"],
+        ]
+        samples.map{|(a, b)| [a.force_encoding("ASCII-8BIT"), b]}.each do |(a, b)|
+          insist { a.encoding.name } == "ASCII-8BIT"
+          insist { b.encoding.name } == "UTF-8"
+          insist { a.valid_encoding? } == true
+
+          subject.decode(a) do |event|
+            insist { event["message"] } == b
+            insist { event["message"].encoding.name } == "UTF-8"
+          end
+        end
+      end
+    end
   end
 
   context "#encode" do
@@ -32,6 +102,5 @@
       end
       codec.encode(event)
     end
-
   end
 end
