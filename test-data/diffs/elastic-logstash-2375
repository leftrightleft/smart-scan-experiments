diff --git a/lib/logstash/bundler_patch.rb b/lib/logstash/bundler_patch.rb
new file mode 100644
index 00000000000..386240e06d8
--- /dev/null
+++ b/lib/logstash/bundler_patch.rb
@@ -0,0 +1,55 @@
+require 'bundler'
+
+module Bundler
+  class RubygemsIntegration
+    # When you call Bundler#setup it will bootstrap
+    # a new rubygems environment and wipe all the existing
+    # specs available if they are not defined in the current gemfile.
+    # This patch change the behavior and will merge the specs.
+    #
+    # If you use :path to declare a gem in your gemfile this will create
+    # a virtual specs for this gems and add will add them to the $LOAD_PATH
+    #
+    # Future >= rubygems 2.0
+    class Future < RubygemsIntegration
+      def stub_rubygems(specs)
+        merged = merge_specs(specs)
+
+        Gem::Specification.all = merged
+
+        Gem.post_reset {
+          Gem::Specification.all = merged
+        }
+      end
+
+      def merge_specs(specs)
+        gem_path_specifications = Gem::Specification.to_a
+        
+        # If the specs is available in the gem_path and declared in the gemfile
+        # the gem in the Gemfile should have the priority.
+        gem_path_specifications.delete_if { |specification| specs.to_a.collect(&:name).include?(specification.name) }
+
+        merged_array = gem_path_specifications + specs.to_a
+        SpecSet.new(merged_array)
+      end
+    end
+  end  
+
+  # Patch bundler to write a .lock file specific to the version of ruby.
+  # This keeps MRI/JRuby/RBX from conflicting over the Gemfile.lock updates
+  module SharedHelpers
+    def default_lockfile
+      ruby = "#{LogStash::Environment.ruby_engine}-#{LogStash::Environment.ruby_abi_version}"
+      Pathname.new("#{default_gemfile}.#{ruby}.lock")
+    end
+  end
+
+  # Add the Bundler.reset! method which has been added in master but is not in 1.7.9.
+  class << self
+    unless self.method_defined?("reset!")
+      def reset!
+        @definition = nil
+      end
+    end
+  end
+end
diff --git a/lib/logstash/environment.rb b/lib/logstash/environment.rb
index 859eb71bcdb..6daf13aeafe 100644
--- a/lib/logstash/environment.rb
+++ b/lib/logstash/environment.rb
@@ -57,17 +57,40 @@ def test?
     # of some plugins dependedant gems.
     def set_gem_paths!
       ENV["GEM_HOME"] = ENV["GEM_PATH"] = logstash_gem_home
+      ENV["BUNDLE_GEMFILE"] = GEMFILE_PATH unless ENV['BUNDLE_GEMFILE']
+
+      require 'bundler'
+      require 'logstash/bundler_patch'
+
+      Bundler.setup
+
+      # Bundler.setup will wipe the existing $LOAD_PATH.
+      # Since we are using gems not declared in the gemfile we need to
+      # recalculate the $LOAD_PATH with all the available gems.
+      load_paths = Gem::Specification
+        .collect(&:load_paths)
+        .flatten
+        .reject { |path| $LOAD_PATH.include?(path) }
+
+      $LOAD_PATH.unshift(*load_paths)
     end
 
     def bundler_install_command(gem_file, gem_path)
       # for now avoid multiple jobs, ex.: --jobs 4
       # it produces erratic exceptions and hangs (with Bundler 1.7.9)
-      [
+      options = [
         "install",
-          "--gemfile=#{gem_file}",
-          "--without=development",
-          "--path", gem_path,
+        "--gemfile=#{gem_file}",
+        "--path",
+        gem_path,
       ]
+
+      # We don't install development gem from the gemfile.
+      # If you add a gem with `git` or the `github` option bundler will mark
+      # them as development and he will not install them.
+      # To install them you need to do LOGSTASH_ENV=development rake gems:vendor
+      options << "--without=development" unless LogStash::Environment.development?
+      options
     end
 
     def ruby_bin
diff --git a/rakelib/bundler_patch.rb b/rakelib/bundler_patch.rb
deleted file mode 100644
index b6c1bc0d16b..00000000000
--- a/rakelib/bundler_patch.rb
+++ /dev/null
@@ -1,20 +0,0 @@
-module Bundler
-
-  # Patch bundler to write a .lock file specific to the version of ruby.
-  # This keeps MRI/JRuby/RBX from conflicting over the Gemfile.lock updates
-  module SharedHelpers
-    def default_lockfile
-      ruby = "#{LogStash::Environment.ruby_engine}-#{LogStash::Environment.ruby_abi_version}"
-      Pathname.new("#{default_gemfile}.#{ruby}.lock")
-    end
-  end
-
-  # Add the Bundler.reset! method which has been added in master but is not in 1.7.9.
-  class << self
-    unless self.method_defined?("reset!")
-      def reset!
-        @definition = nil
-      end
-    end
-  end
-end
diff --git a/rakelib/dependency.rake b/rakelib/dependency.rake
index 4431ef71e98..b9459a6fd7b 100644
--- a/rakelib/dependency.rake
+++ b/rakelib/dependency.rake
@@ -3,7 +3,7 @@ namespace "dependency" do
   task "bundler" do
     Rake::Task["gem:require"].invoke("bundler", ">= 1.3.5", LogStash::Environment.logstash_gem_home)
     require "bundler/cli"
-    require_relative "bundler_patch"
+    require "logstash/bundler_patch"
   end
 
   task "rbx-stdlib" do
