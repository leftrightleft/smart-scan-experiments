diff --git a/logstash-core/src/main/java/co/elastic/logstash/api/Configuration.java b/logstash-core/src/main/java/co/elastic/logstash/api/Configuration.java
index 000dbc90e3a..a6a3568c5a2 100644
--- a/logstash-core/src/main/java/co/elastic/logstash/api/Configuration.java
+++ b/logstash-core/src/main/java/co/elastic/logstash/api/Configuration.java
@@ -18,7 +18,23 @@ public Configuration(final Map<String, Object> raw) {
         this.rawSettings = raw;
     }
 
-    public Object get(final PluginConfigSpec<?> configSpec) {
+    @SuppressWarnings("unchecked")
+    public <T> T get(final PluginConfigSpec<T> configSpec) {
+        if (rawSettings.containsKey(configSpec.name())) {
+            Object o = rawSettings.get(configSpec.name());
+            if (configSpec.type().isAssignableFrom(o.getClass())) {
+                return (T) o;
+            } else {
+                throw new IllegalStateException(
+                        String.format("Setting value for '%s' of type '%s' incompatible with defined type of '%s'",
+                                configSpec.name(), o.getClass(), configSpec.type()));
+            }
+        } else {
+            return configSpec.defaultValue();
+        }
+    }
+
+    public Object getRawValue(final PluginConfigSpec<?> configSpec) {
         return rawSettings.get(configSpec.name());
     }
 
@@ -27,7 +43,7 @@ public boolean contains(final PluginConfigSpec<?> configSpec) {
     }
 
     public Collection<String> allKeys() {
-        return null;
+        return rawSettings.keySet();
     }
 
     public static PluginConfigSpec<String> stringSetting(final String name) {
diff --git a/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java b/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
index 6b3989f6f3f..5786a3f3381 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
@@ -49,9 +49,9 @@ public class Line implements Codec {
     private String remainder = "";
 
     public Line(final Configuration configuration, final Context context) {
-        delimiter = (String)configuration.get(DELIMITER_CONFIG);
-        charset = Charset.forName((String)configuration.get(CHARSET_CONFIG));
-        format = (String)configuration.get(FORMAT_CONFIG);
+        delimiter = configuration.get(DELIMITER_CONFIG);
+        charset = Charset.forName(configuration.get(CHARSET_CONFIG));
+        format = configuration.get(FORMAT_CONFIG);
         decoder = charset.newDecoder();
         decoder.onMalformedInput(CodingErrorAction.IGNORE);
     }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java b/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
index 240c6583ebf..6b56b421de7 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
@@ -57,7 +57,7 @@ public Stdin(final Configuration configuration, final Context context) {
         } catch (UnknownHostException e) {
             hostname = "[unknownHost]";
         }
-        String codecName = (String)configuration.get(CODEC_CONFIG);
+        String codecName = configuration.get(CODEC_CONFIG);
         codec = PluginRegistry.getCodec(codecName, configuration, context);
         if (codec == null) {
             throw new IllegalStateException(String.format("Unable to obtain codec '%a'", codecName));
diff --git a/logstash-core/src/test/java/co/elastic/logstash/api/ConfigurationTest.java b/logstash-core/src/test/java/co/elastic/logstash/api/ConfigurationTest.java
new file mode 100644
index 00000000000..0511fd12823
--- /dev/null
+++ b/logstash-core/src/test/java/co/elastic/logstash/api/ConfigurationTest.java
@@ -0,0 +1,94 @@
+package co.elastic.logstash.api;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ConfigurationTest {
+
+    private String stringKey = "string", numberKey = "number", booleanKey = "boolean";
+    private String stringValue = "stringValue";
+    private long longValue = 42L;
+    private boolean booleanValue = true;
+
+    private Configuration getTestConfiguration() {
+        Map<String, Object> configValues = new HashMap<>();
+        configValues.put(stringKey, stringValue);
+        configValues.put(numberKey, longValue);
+        configValues.put(booleanKey, booleanValue);
+        return new Configuration(configValues);
+    }
+
+    @Test
+    public void testConfiguration() {
+        Configuration config = getTestConfiguration();
+
+        PluginConfigSpec<String> stringConfig = new PluginConfigSpec<>(stringKey, String.class, "", false, false);
+        PluginConfigSpec<Long> numberConfig = new PluginConfigSpec<>(numberKey, Long.class, 0L, false, false);
+        PluginConfigSpec<Boolean> booleanConfig = new PluginConfigSpec<>(booleanKey, Boolean.class, false, false, false);
+
+        Assert.assertEquals(stringValue, config.get(stringConfig));
+        Assert.assertEquals(longValue, (long) config.get(numberConfig));
+        Assert.assertEquals(booleanValue, config.get(booleanConfig));
+    }
+
+    @Test
+    public void testDefaultValues() {
+        Configuration unsetConfig = new Configuration(new HashMap<>());
+
+        String defaultStringValue = "defaultStringValue";
+        long defaultLongValue = 43L;
+        boolean defaultBooleanValue = false;
+
+        PluginConfigSpec<String> stringConfig = new PluginConfigSpec<>(stringKey, String.class, defaultStringValue, false, false);
+        PluginConfigSpec<Long> numberConfig = new PluginConfigSpec<>(numberKey, Long.class, defaultLongValue, false, false);
+        PluginConfigSpec<Boolean> booleanConfig = new PluginConfigSpec<>(booleanKey, Boolean.class, defaultBooleanValue, false, false);
+
+        Assert.assertEquals(defaultStringValue, unsetConfig.get(stringConfig));
+        Assert.assertEquals(defaultLongValue, (long) unsetConfig.get(numberConfig));
+        Assert.assertEquals(defaultBooleanValue, unsetConfig.get(booleanConfig));
+
+        Configuration config = getTestConfiguration();
+        Assert.assertNotEquals(defaultStringValue, config.get(stringConfig));
+        Assert.assertNotEquals(defaultLongValue, (long) config.get(numberConfig));
+        Assert.assertNotEquals(defaultBooleanValue, config.get(booleanConfig));
+    }
+
+    @Test
+    public void testBrokenConfig() {
+        Configuration config = getTestConfiguration();
+
+        PluginConfigSpec<Long> brokenLongConfig = new PluginConfigSpec<>(stringKey, Long.class, 0L, false, false);
+        PluginConfigSpec<Boolean> brokenBooleanConfig = new PluginConfigSpec<>(numberKey, Boolean.class, false, false, false);
+        PluginConfigSpec<String> brokenStringConfig = new PluginConfigSpec<>(booleanKey, String.class, "", false, false);
+
+        try {
+            Long l = config.get(brokenLongConfig);
+            Assert.fail("Did not catch invalid config value type");
+        } catch (IllegalStateException e1) {
+            Assert.assertTrue(e1.getMessage().contains("incompatible with defined type"));
+        } catch (Exception e2) {
+            Assert.fail("Did not throw correct exception for invalid config value type");
+        }
+
+        try {
+            Boolean b = config.get(brokenBooleanConfig);
+            Assert.fail("Did not catch invalid config value type");
+        } catch (IllegalStateException e1) {
+            Assert.assertTrue(e1.getMessage().contains("incompatible with defined type"));
+        } catch (Exception e2) {
+            Assert.fail("Did not throw correct exception for invalid config value type");
+        }
+
+        try {
+            String s = config.get(brokenStringConfig);
+            Assert.fail("Did not catch invalid config value type");
+        } catch (IllegalStateException e1) {
+            Assert.assertTrue(e1.getMessage().contains("incompatible with defined type"));
+        } catch (Exception e2) {
+            Assert.fail("Did not throw correct exception for invalid config value type");
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugins/outputs/StdoutTest.java b/logstash-core/src/test/java/org/logstash/plugins/outputs/StdoutTest.java
index a5c1a748d59..9c5f0ded668 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/outputs/StdoutTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/outputs/StdoutTest.java
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.junit.Test;
 import org.logstash.Event;
-import org.logstash.plugins.outputs.Stdout;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -60,6 +59,6 @@ private static Collection<Event> getTestEvents() {
         e2.setField("myField", "event2");
         Event e3 = new Event();
         e3.setField("myField", "event3");
-        return Arrays.asList(new Event[]{e1, e2, e3});
+        return Arrays.asList(e1, e2, e3);
     }
 }
