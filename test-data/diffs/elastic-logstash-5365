diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 0153bf3ada9..0e356ec76b3 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -45,7 +45,7 @@ def initialize(settings = LogStash::SETTINGS)
 
     @collect_metric = setting("metric.collect")
     @metric = create_metric_collector
-    @periodic_pollers = LogStash::Instrument::PeriodicPollers.new(metric)
+    @periodic_pollers = LogStash::Instrument::PeriodicPollers.new(create_metric_collector)
   end
 
   def execute
@@ -83,7 +83,6 @@ def register_pipeline(pipeline_id, settings = @settings)
 
     pipeline = create_pipeline(pipeline_settings)
     return unless pipeline.is_a?(LogStash::Pipeline)
-    pipeline.metric = @metric
     if @auto_reload && pipeline.non_reloadable_plugins.any?
       @logger.error(I18n.t("logstash.agent.non_reloadable_config_register"),
                     :pipeline_id => pipeline_id,
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 3114cdb7ced..a8c1421473f 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -54,17 +54,9 @@ def initialize(config_str, settings = LogStash::SETTINGS)
 
     @worker_threads = []
 
-    # Metric object should be passed upstream, multiple pipeline share the same metric
-    # and collector only the namespace will changes.
-    # If no metric is given, we use a `NullMetric` for all internal calls.
-    # We also do this to make the changes backward compatible with previous testing of the
-    # pipeline.
-    #
     # This needs to be configured before we evaluate the code to make
-    # sure the metric instance is correctly send to the plugin.
-    # NOTE: It is the responsibility of the Agent to set this externally with a setter
-    # if there's an intent of this not being a NullMetric
-    @metric = Instrument::NullMetric.new
+    # sure the metric instance is correctly send to the plugins to make the namespace scoping work
+    @metric = settings.get_value("metric.collect") ? Instrument::Metric.new : Instrument::NullMetric.new 
 
     grammar = LogStashConfigParser.new
     @config = grammar.parse(config_str)
@@ -80,7 +72,7 @@ def initialize(config_str, settings = LogStash::SETTINGS)
     # The config code is hard to represent as a log message...
     # So just print it.
 
-    if @settings.get("config.debug") && logger.debug?
+    if @settings.get_value("config.debug") && logger.debug?
       logger.debug("Compiled pipeline code", :code => code)
     end
 
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 711a4b37d08..5a40ee9c0ec 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -98,6 +98,7 @@
           sleep 0.1
           Stud.stop!(t)
           t.join
+          subject.shutdown
         end
       end
 
@@ -114,6 +115,7 @@
             sleep 0.1
             Stud.stop!(t)
             t.join
+            subject.shutdown
           end
         end
 
@@ -129,6 +131,8 @@
             sleep 0.1
             Stud.stop!(t)
             t.join
+
+            subject.shutdown
           end
         end
       end
@@ -157,6 +161,7 @@
           sleep 0.1
           Stud.stop!(t)
           t.join
+          subject.shutdown
         end
       end
 
@@ -172,6 +177,7 @@
             sleep 0.1
             Stud.stop!(t)
             t.join
+            subject.shutdown
           end
         end
 
@@ -186,6 +192,7 @@
             sleep 0.1
             Stud.stop!(t)
             t.join
+            subject.shutdown
           end
         end
       end
@@ -361,6 +368,7 @@
     end
 
     after :each do
+      subject.shutdown
       Stud.stop!(@t)
       @t.join
     end
diff --git a/logstash-core/spec/logstash/pipeline_reporter_spec.rb b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
index bdd83d4ff24..1aeef0e73c3 100644
--- a/logstash-core/spec/logstash/pipeline_reporter_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_reporter_spec.rb
@@ -47,6 +47,10 @@ def close
     @post_snapshot = reporter.snapshot
   end
 
+  after do
+    pipeline.shutdown
+  end
+
   describe "events filtered" do
     it "should start at zero" do
       expect(@pre_snapshot.events_filtered).to eql(0)
@@ -82,4 +86,4 @@ def close
       expect(@post_snapshot.output_info.first[:events_received]).to eql(generator_count)
     end
   end
-end
\ No newline at end of file
+end
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index a9f2abfb0a9..0fb6be8368d 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -155,6 +155,7 @@ class TestPipeline < LogStash::Pipeline
             {:count_was=>worker_thread_count, :filters=>["dummyfilter"]})
           pipeline.run
           expect(pipeline.worker_threads.size).to eq(safe_thread_count)
+          pipeline.shutdown
         end
       end
 
@@ -168,6 +169,7 @@ class TestPipeline < LogStash::Pipeline
             {:worker_threads=> override_thread_count, :filters=>["dummyfilter"]})
           pipeline.run
           expect(pipeline.worker_threads.size).to eq(override_thread_count)
+          pipeline.shutdown
         end
       end
     end
@@ -193,6 +195,7 @@ class TestPipeline < LogStash::Pipeline
         pipeline = TestPipeline.new(test_config_with_filters)
         pipeline.run
         expect(pipeline.worker_threads.size).to eq(worker_thread_count)
+        pipeline.shutdown
       end
     end
   end
@@ -239,6 +242,7 @@ class TestPipeline < LogStash::Pipeline
         expect(pipeline.outputs.size ).to eq(1)
         expect(pipeline.outputs.first.workers.size ).to eq(::LogStash::SETTINGS.get("pipeline.output.workers"))
         expect(pipeline.outputs.first.workers.first.num_closes ).to eq(1)
+        pipeline.shutdown
       end
 
       it "should call output close correctly with output workers" do
@@ -255,6 +259,7 @@ class TestPipeline < LogStash::Pipeline
         output_delegator.workers.each do |plugin|
           expect(plugin.num_closes ).to eq(1)
         end
+        pipeline.shutdown
       end
     end
   end
@@ -276,6 +281,7 @@ class TestPipeline < LogStash::Pipeline
         expect(pipeline).to receive(:start_flusher).ordered.and_call_original
 
         pipeline.run
+        pipeline.shutdown
       end
     end
 
@@ -392,8 +398,14 @@ class TestPipeline < LogStash::Pipeline
     output { }
     CONFIG
 
-    it "uses a `NullMetric` object if no metric is given" do
-      pipeline = LogStash::Pipeline.new(config)
+    it "uses a `NullMetric` object if `metric.collect` is set to false" do
+      settings = double("LogStash::SETTINGS")
+
+      allow(settings).to receive(:get_value).with("pipeline.id").and_return("main")
+      allow(settings).to receive(:get_value).with("metric.collect").and_return(false)
+      allow(settings).to receive(:get_value).with("config.debug").and_return(false)
+
+      pipeline = LogStash::Pipeline.new(config, settings)
       expect(pipeline.metric).to be_kind_of(LogStash::Instrument::NullMetric)
     end
   end
@@ -511,7 +523,7 @@ class TestPipeline < LogStash::Pipeline
       t = Thread.new { subject.run }
       sleep(0.1)
       expect(subject.started_at).to be < Time.now
-      t.kill rescue nil
+      subject.shutdown
     end
   end
 
@@ -536,7 +548,7 @@ class TestPipeline < LogStash::Pipeline
         t = Thread.new { subject.run }
         sleep(0.1)
         expect(subject.uptime).to be > 0
-        t.kill rescue nil
+        subject.shutdown
       end
     end
   end
@@ -590,7 +602,6 @@ class TestPipeline < LogStash::Pipeline
       # Reset the metric store
       LogStash::Instrument::Collector.instance.clear
 
-      subject.metric = metric
       Thread.new { subject.run }
       # make sure we have received all the generated events
       sleep 1 while dummyoutput.events.size < number_of_events
