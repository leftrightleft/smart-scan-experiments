diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index ca65083d156..c5ce2924e7d 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -88,7 +88,7 @@
       expect(e.set("foo", "bar")).to eq("bar")
       expect(e.get("foo")).to eq("bar")
     end
-
+  
     it "should propagate changes to mutable strings to java APIs" do
       e = LogStash::Event.new()
       e.to_java.setField("foo", "bar")
@@ -414,4 +414,24 @@
       expect(event1.get("[@metadata][fancy]")).to eq("pants")
     end
   end
+
+   describe "#event-key-non-ASCII" do
+    it "should set and get values for non-ASCII keys" do
+      e = LogStash::Event.new()
+      expect(e.set("фуу", "bar")).to eq("bar")
+      expect(e.get("фуу")).to eq("bar")
+
+      e = LogStash::Event.new({"фуу" => "test"})
+      expect(e.set("фуу", "bar")).to eq("bar")
+      expect(e.get("фуу")).to eq("bar")
+    end
+
+    it "should set and get values for non-ASCII keys through java APIs" do
+      e = LogStash::Event.new()
+      e.to_java.setField("фуу", "bar")
+      expect(e.to_java.getField("фуу")).to eq("bar")
+    end
+
+  end
+
 end
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 9ee8e17db81..a9a1a3e0697 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -78,14 +78,14 @@ public IRubyObject ruby_get_field(ThreadContext context, RubyString reference)
         {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.getUnconvertedField(FieldReference.from(reference.getByteList()))
+                this.event.getUnconvertedField(FieldReference.from(reference.getValue()))
             );
         }
 
         @JRubyMethod(name = "set", required = 2)
         public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, IRubyObject value)
         {
-            final FieldReference r = FieldReference.from(reference.getByteList());
+            final FieldReference r = FieldReference.from(reference.getValue());
             if (r  == FieldReference.TIMESTAMP_REFERENCE) {
                 if (!(value instanceof JrubyTimestampExtLibrary.RubyTimestamp)) {
                     throw context.runtime.newTypeError("wrong argument type " + value.getMetaClass() + " (expected LogStash::Timestamp)");
@@ -120,7 +120,7 @@ public IRubyObject ruby_cancelled(ThreadContext context)
         @JRubyMethod(name = "include?", required = 1)
         public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
             return RubyBoolean.newBoolean(
-                context.runtime, this.event.includes(FieldReference.from(reference.getByteList()))
+                context.runtime, this.event.includes(FieldReference.from(reference.getValue()))
             );
         }
 
@@ -128,7 +128,7 @@ public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
         public IRubyObject ruby_remove(ThreadContext context, RubyString reference) {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.remove(FieldReference.from(reference.getByteList()))
+                this.event.remove(FieldReference.from(reference.getValue()))
             );
         }
 
