diff --git a/lib/logstash/filters/rate.rb b/lib/logstash/filters/rate.rb
new file mode 100644
index 00000000000..5fb9e62992d
--- /dev/null
+++ b/lib/logstash/filters/rate.rb
@@ -0,0 +1,100 @@
+# rate filter
+#
+# This filter calculates message rates using various methods.
+# 
+
+require "logstash/filters/base"
+require "logstash/namespace"
+require "time/unit"
+
+# The rate filter is for marking events based on the rate of similiar events.
+# Rate is defined in terms of some aggregated metric for which the filter offers a few options (see below).
+class LogStash::Filters::Rate < LogStash::Filters::Base
+
+  config_name "rate"
+  plugin_status "experimental"
+
+  config :interval, :validate => :string, :default => "1 minute"
+
+  config :threshold, :validate => :number, :required => true
+  
+  # The stream identity is how the rate filter determines which stream an
+  # event belongs. This is generally used for differentiating, say, events
+  # coming from multiple files in the same file input, or multiple connections
+  # coming from a tcp input.
+  #
+  # The default value here is usually what you want, but there are some cases
+  # where you want to change it. For example, suppose you want to send alerts
+  # if some IP connected too frequently to your server - you could set the 
+  # stream_identity to something like "%{@type}.%{remote_address}"
+  config :stream_identity , :validate => :string, :default => "%{@source}.%{@type}"
+
+  # There are multiple methods of calculating/estimating rate. Currently, the rate filter supports the following:
+  # * EWMA - Exponential weighted moving average: For every new matching event,
+  #   calculate the current "rate" (1/ time since last event) then apply EWMA to it.
+  #   See https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
+  # * COUNT: Keep a record of every matching event in a rolling time interval window then compute (count / time_interval)
+  config :mode, :validate => ["EWMA", "COUNT"], :default => "EWMA"
+  
+  public
+  def initialize(config = {})
+    super
+
+    @threadsafe = false
+
+  end # def initialize
+
+  public
+  def register
+    @interval_seconds = Time::Unit.parse(@interval.tr(" ", "")).seconds
+    @rate_method = method("rate_#{mode}")
+    @rate_threshold = threshold.to_f / @interval_seconds
+    send("prepare_#{mode}")
+    @logger.debug("Registered rate plugin", :type => @type, :config => @config, :interval_seconds => @interval_seconds, :rate_threshold => @rate_threshold)
+  end # def register
+
+  def filter(event)
+    return unless filter?(event)
+    filter_matched(event) if rate(event) > @rate_threshold
+  end # def filter
+
+  private
+
+  def rate(event)
+    event_stream_id = event.sprintf(stream_identity)
+    event_time = event.unix_timestamp
+    @rate_method.call(event, event_stream_id, event_time)
+  end
+
+  def prepare_EWMA
+    @counters = Hash.new { |h,k| h[k] = Hash.new } 
+  end
+
+  def rate_EWMA(event, stream_id, event_time)
+    if @counters.has_key? stream_id
+      time_delta = event_time - @counters[stream_id][:timestamp]
+      time_delta = 0.001 if time_delta == 0 # should never be zero, but just to make sure...
+      @counters[stream_id][:timestamp] = event_time
+      alpha = (1 - Math.exp(- time_delta / @interval_seconds))
+      @counters[stream_id][:value] = alpha/time_delta + (1-alpha) * @counters[stream_id][:value]
+    else
+      @counters[stream_id] = {:timestamp => event_time, :value => 0}
+    end
+    logger.debug("Current EWMA: #{@counters[stream_id][:value]}", :event => event, :stream_id => stream_id)
+    @counters[stream_id][:value]
+  end
+
+  def prepare_COUNT
+    @counters = Hash.new { |h,k| h[k] = Array.new } 
+  end
+
+  def rate_COUNT(event, stream_id, event_time)
+    @counters[stream_id].push event_time
+    max_time = @counters[stream_id].max
+    @counters[stream_id].delete_if { |e| e < max_time - @interval_seconds } if @counters[stream_id].any?
+    value = @counters[stream_id].count.to_f / @interval_seconds
+    logger.debug("Current rate: #{value}", :event => event, :stream_id => stream_id)
+    value
+  end
+
+end # class LogStash::Filters::Rate
diff --git a/lib/logstash/time.rb b/lib/logstash/time.rb
index 8034f5ddee6..d9df33fb7f6 100644
--- a/lib/logstash/time.rb
+++ b/lib/logstash/time.rb
@@ -20,6 +20,9 @@ def self.now
       # so instead I have to do DateTime#new#withZone(UTC)
       return DateTime.new.withZone(DateTimeZone::UTC).to_s
     end # def initialize
+    def self.now_f
+      return DateTime.new(DateTimeZone::UTC).getMillis / 1000.0
+    end 
   else
     # Otherwise, use ruby stdlib Time, which is much slower than Joda.
     ISO8601_STRFTIME = "%04d-%02d-%02dT%02d:%02d:%02d.%06d%+03d:00".freeze
@@ -28,5 +31,8 @@ def self.now
       return sprintf(ISO8601_STRFTIME, now.year, now.month, now.day, now.hour,
                      now.min, now.sec, now.tv_usec, now.utc_offset / 3600)
     end
+    def self.now_f
+      return Time.now.to_f
+    end 
   end
 end # module LogStash::Time
diff --git a/logstash.gemspec b/logstash.gemspec
index 5c2954831c3..15cd2f925a8 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -58,6 +58,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "geoip", [">= 1.1.0"]
   gem.add_runtime_dependency "beefcake", "0.3.7"
   gem.add_runtime_dependency "php-serialize" # For input drupal_dblog
+  gem.add_runtime_dependency "time-unit"
 
   if RUBY_PLATFORM == 'java'
     gem.platform = RUBY_PLATFORM
diff --git a/spec/filters/rate.rb b/spec/filters/rate.rb
new file mode 100644
index 00000000000..41b44a4481e
--- /dev/null
+++ b/spec/filters/rate.rb
@@ -0,0 +1,106 @@
+require "test_utils"
+require "logstash/filters/rate"
+require "time"
+
+# can't use before(:all) with sample()
+def sample_messages
+  base = Time.now
+  (1..100).map do |n|
+    LogStash::Event.new( 
+      "@message" => "this is message number #{n}",
+      "@timestamp" => (base + (n.to_f / 2)).iso8601,
+      "@type" => "test",
+      "@source" => "test"
+    )
+  end
+end
+
+describe LogStash::Filters::Rate do
+  extend LogStash::RSpec
+  
+
+  describe "COUNT mode" do
+    # The logstash config goes here.
+    # At this time, only filters are supported.
+    config <<-CONFIG
+    filter {
+      rate {
+        mode => "COUNT"
+        interval => "10 seconds"
+        threshold => 10
+        add_tag => "overload"
+      }
+    }
+    CONFIG
+
+    sample sample_messages do
+      insist { subject.length } == 100
+      (0..9).each do |n|
+        reject { subject[1].tags }.include? "overload"
+      end
+      (10..99).each do |n|
+        insist { subject[n].tags }.include? "overload"
+      end
+    end
+  end
+
+  describe "EWMA mode" do
+    # The logstash config goes here.
+    # At this time, only filters are supported.
+    config <<-CONFIG
+    filter {
+      rate {
+        mode => "EWMA"
+        interval => "10 seconds"
+        threshold => 10
+        add_tag => "overload"
+      }
+    }
+    CONFIG
+
+    sample sample_messages do
+      insist { puts subject[14]; subject.length } == 100
+      reject { subject[0..13].reduce([]) {|a, m| a + m.tags } }.include? "overload" 
+      (14..99).each do |n|
+        insist { subject[n].tags }.include? "overload"
+      end
+    end
+  end
+
+  describe "Rate calculation should be per stream" do
+    # The logstash config goes here.
+    # At this time, only filters are supported.
+    config <<-CONFIG
+    filter {
+      rate {
+        mode => "COUNT"
+        interval => "10 seconds"
+        threshold => 10
+        add_tag => "overload"
+      }
+    }
+    CONFIG
+
+    base = Time.new
+    another_sample = (1..30).map do |n|
+      LogStash::Event.new( 
+        "@message" => "2nd stream, message number #{n}",
+        "@timestamp" => (base + n).iso8601,
+        "@source" => "other source"
+      )
+    end
+    mixed_streams = sample_messages + another_sample
+    sample mixed_streams do
+      insist { subject.length } == 130
+      (0..9).each do |n|
+        reject { subject.select {|m| m.source == "test" }[n].tags }.include? "overload"
+      end
+      (10..99).each do |n|
+        insist { subject.select {|m| m.source == "test" }[n].tags }.include? "overload"
+      end
+      (10..29).each do |n|
+        insist { subject.select {|m| m.source == "other source" }[n].tags }.include? "overload"
+      end
+    end
+  end
+end
