diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index a70694e24b9..c00d5531305 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -3,7 +3,6 @@
 require "date"
 require "cabin"
 require "logstash/namespace"
-require "logstash/util/fieldreference"
 require "logstash/util/accessors"
 require "logstash/timestamp"
 require "logstash/json"
diff --git a/lib/logstash/util/fieldreference.rb b/lib/logstash/util/fieldreference.rb
deleted file mode 100644
index 0683310533c..00000000000
--- a/lib/logstash/util/fieldreference.rb
+++ /dev/null
@@ -1,68 +0,0 @@
-# encoding: utf-8
-require "logstash/namespace"
-require "logstash/util"
-
-module LogStash::Util::FieldReference
-
-  def compile(accessor)
-    if accessor[0,1] != '['
-      return <<-"CODE"
-        lambda do |store, &block|
-          return block.nil? ? store[#{accessor.inspect}] : block.call(store, #{accessor.inspect})
-        end
-      CODE
-    end
-
-    code = "lambda do |store, &block|\n"
-    selectors = accessor.scan(/(?<=\[).+?(?=\])/)
-    selectors.each_with_index do |tok, i|
-      last = (i == selectors.count() - 1)
-      code << "   # [#{tok}]#{ last ? " (last selector)" : "" }\n"
-
-      if last
-        code << <<-"CODE"
-          return block.call(store, #{tok.inspect}) unless block.nil?
-        CODE
-      end
-
-      code << <<-"CODE"
-        store = store.is_a?(Array) ? store[#{tok.to_i}] : store[#{tok.inspect}]
-        return store if store.nil?
-      CODE
-
-    end
-    code << "return store\nend"
-    #puts code
-    return code
-  end # def compile
-
-  def exec(accessor, store, &block)
-    @__fieldeval_cache ||= {}
-    @__fieldeval_cache[accessor] ||= eval(compile(accessor))
-    return @__fieldeval_cache[accessor].call(store, &block)
-  end
-
-  def set(accessor, value, store)
-    # The assignment can fail if the given field reference (accessor) does not exist
-    # In this case, we'll want to set the value manually.
-    if exec(accessor, store) { |hash, key| hash[key] = value }.nil?
-      return (store[accessor] = value) if accessor[0,1] != "["
-
-      # No existing element was found, so let's set one.
-      *parents, key = accessor.scan(/(?<=\[)[^\]]+(?=\])/)
-      parents.each do |p|
-        if store.include?(p)
-          store = store[p]
-        else
-          store[p] = {}
-          store = store[p]
-        end
-      end
-      store[key] = value
-    end
-
-    return value
-  end
-
-  extend self
-end # module LogStash::Util::FieldReference
diff --git a/logstash-event.gemspec b/logstash-event.gemspec
index 39f3af777df..ea6cce87e1a 100644
--- a/logstash-event.gemspec
+++ b/logstash-event.gemspec
@@ -19,7 +19,6 @@ Gem::Specification.new do |gem|
     lib/logstash/version.rb
     lib/logstash/util.rb
     lib/logstash/util/accessors.rb
-    lib/logstash/util/fieldreference.rb
     LICENSE
   }
 
diff --git a/spec/util/fieldeval_spec.rb b/spec/util/fieldeval_spec.rb
deleted file mode 100644
index e2a70d14d5a..00000000000
--- a/spec/util/fieldeval_spec.rb
+++ /dev/null
@@ -1,96 +0,0 @@
-require "spec_helper"
-require "logstash/util/fieldreference"
-
-describe LogStash::Util::FieldReference, :if => true do
-
-  context "using simple accessor" do
-
-    it "should retrieve value" do
-      str = "hello"
-      m = eval(subject.compile(str))
-      data = { "hello" => "world" }
-      expect(m.call(data)).to eq(data[str])
-    end
-
-    it "should handle delete in block" do
-      str = "simple"
-      m = eval(subject.compile(str))
-      data = { "simple" => "things" }
-      m.call(data) { |obj, key| obj.delete(key) }
-      expect(data).to be_empty
-    end
-
-    it "should handle assignment in block" do
-      str = "simple"
-      m = eval(subject.compile(str))
-      data = {}
-      expect(m.call(data) { |obj, key| obj[key] = "things" }).to eq("things")
-      expect(data).to eq({ "simple" => "things" })
-    end
-
-    it "should handle assignment using set" do
-      str = "simple"
-      data = {}
-      expect(subject.set(str, "things", data)).to eq("things")
-      expect(data).to eq({ "simple" => "things" })
-    end
-  end
-
-  context "using accessor path" do
-
-    it "should retrieve shallow value" do
-      str = "[hello]"
-      m = eval(subject.compile(str))
-      data = { "hello" =>  "world" }
-      expect(m.call(data)).to eq("world")
-    end
-
-    it "should retrieve deep value" do
-      str = "[hello][world]"
-      m = eval(subject.compile(str))
-      data = { "hello" => { "world" => "foo", "bar" => "baz" } }
-      expect(m.call(data)).to eq(data["hello"]["world"])
-    end
-
-    it "should handle delete in block" do
-      str = "[hello][world]"
-      m = eval(subject.compile(str))
-      data = { "hello" => { "world" => "foo", "bar" => "baz" } }
-      m.call(data) { |obj, key| obj.delete(key) }
-
-      # Make sure the "world" key is removed.
-      expect(data["hello"]).to eq({ "bar" => "baz" })
-    end
-
-    it "should not handle assignment in block" do
-      str = "[hello][world]"
-      m = eval(subject.compile(str))
-      data = {}
-      expect(m.call(data) { |obj, key| obj[key] = "things" }).to be_nil
-      expect(data).to be_empty
-    end
-
-    it "should set shallow value" do
-      str = "[hello]"
-      data = {}
-      expect(subject.set(str, "foo", data)).to eq("foo")
-      expect(data).to eq({ "hello" => "foo" })
-    end
-
-    it "should set deep value" do
-      str = "[hello][world]"
-      data = {}
-      expect(subject.set(str, "foo", data)).to eq("foo")
-      expect(data).to eq({ "hello" => { "world" => "foo" } })
-    end
-
-    it "should retrieve array item" do
-      data = { "hello" => { "world" => ["a", "b"], "bar" => "baz" } }
-      m = eval(subject.compile("[hello][world][0]"))
-      expect(m.call(data)).to eq(data["hello"]["world"][0])
-
-      m = eval(subject.compile("[hello][world][1]"))
-      expect(m.call(data)).to eq(data["hello"]["world"][1])
-    end
-  end
-end
