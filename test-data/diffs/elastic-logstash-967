diff --git a/lib/logstash/inputs/tcp.rb b/lib/logstash/inputs/tcp.rb
index 345b9006b30..f1b80256f60 100644
--- a/lib/logstash/inputs/tcp.rb
+++ b/lib/logstash/inputs/tcp.rb
@@ -84,6 +84,7 @@ def register
       @logger.info("Starting tcp input listener", :address => "#{@host}:#{@port}")
       begin
         @server_socket = TCPServer.new(@host, @port)
+        @server_socket.listen(20) # apply backpressure to clients by hinting to the OS that it shouldn't keep too large of a connection backlog
       rescue Errno::EADDRINUSE
         @logger.error("Could not start TCP server: Address in use",
                       :host => @host, :port => @port)
@@ -155,23 +156,18 @@ def run(output_queue)
 
   def run_server(output_queue)
     @thread = Thread.current
-    @client_threads = []
     loop do
-      # Start a new thread for each connection.
       begin
-        @client_threads << Thread.start(@server_socket.accept) do |s|
-          # TODO(sissel): put this block in its own method.
-
-          # monkeypatch a 'peer' method onto the socket.
-          s.instance_eval { class << self; include ::LogStash::Util::SocketPeer end }
-          @logger.debug("Accepted connection", :client => s.peer,
-                        :server => "#{@host}:#{@port}")
-          begin
-            handle_socket(s, s.peer, output_queue, @codec.clone)
-          rescue Interrupted
-            s.close rescue nil
-          end
-        end # Thread.start
+        s = @server_socket.accept
+        # monkeypatch a 'peer' method onto the socket.
+        s.instance_eval { class << self; include ::LogStash::Util::SocketPeer end }
+        @logger.debug("Accepted connection", :client => s.peer,
+                      :server => "#{@host}:#{@port}")
+        begin
+          handle_socket(s, s.peer, output_queue, @codec.clone)
+        rescue Interrupted
+          s.close rescue nil
+        end
       rescue OpenSSL::SSL::SSLError => ssle
         # NOTE(mrichar1): This doesn't return a useful error message for some reason
         @logger.error("SSL Error", :exception => ssle,
@@ -180,9 +176,6 @@ def run_server(output_queue)
         if @interrupted
           # Intended shutdown, get out of the loop
           @server_socket.close
-          @client_threads.each do |thread|
-            thread.raise(LogStash::ShutdownSignal)
-          end
           break
         else
           # Else it was a genuine IOError caused by something else, so propagate it up..
@@ -196,8 +189,7 @@ def run_server(output_queue)
     @server_socket.close
   end # def run_server
 
-  def run_client(output_queue) 
-    @thread = Thread.current
+  def run_client(output_queue)
     while true
       client_socket = TCPSocket.new(@host, @port)
       if @ssl_enable
