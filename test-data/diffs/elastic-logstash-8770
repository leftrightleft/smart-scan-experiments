diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index 1682e885619..1cd96aa153b 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -269,11 +269,6 @@ private void addIO(Checkpoint checkpoint, PageIO pageIO) throws IOException {
             if (this.tailPages.size() == 0) {
                 // this is the first tail page and it is fully acked so just purge it
                 this.checkpointIO.purge(this.checkpointIO.tailFileName(checkpoint.getPageNum()));
-            } else {
-                // create a tail page with a null PageIO and add it to tail pages but not unreadTailPages
-                // since it is fully read because also fully acked
-                // TODO: I don't like this null pageIO tail page...
-                this.tailPages.add(PageFactory.newTailPage(checkpoint, this, null));
             }
         } else {
             pageIO.open(checkpoint.getMinSeqNum(), checkpoint.getElementCount());
@@ -309,11 +304,6 @@ private void addPage(Checkpoint checkpoint, Page page) throws IOException {
             if (this.tailPages.size() == 0) {
                 // this is the first tail page and it is fully acked so just purge it
                 this.checkpointIO.purge(this.checkpointIO.tailFileName(checkpoint.getPageNum()));
-            } else {
-                // create a tail page with a null PageIO and add it to tail pages but not unreadTailPages
-                // since it is fully read because also fully acked
-                // TODO: I don't like this null pageIO tail page...
-                this.tailPages.add(PageFactory.newTailPage(checkpoint, this, null));
             }
         } else {
             this.tailPages.add(page);
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
index 4754953f30e..88d94431bb7 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
@@ -775,7 +775,43 @@ public void getsPersistedByteSizeCorrectlyForUnopened() throws Exception {
             assertThat(q.getPersistedByteSize(), is(0L));
         }
     }
-    
+
+    @Test
+    public void getsPersistedByteSizeCorrectlyForFullyAckedDeletedTailPages() throws Exception {
+        final Queueable element = new StringElement("0123456789"); // 10 bytes
+        final int singleElementCapacity = singleElementCapacityForByteBufferPageIO(element);
+        final Settings settings = TestSettings.persistedQueueSettings(singleElementCapacity, dataPath);
+
+        try (Queue q = new Queue(settings)) {
+            q.open();
+
+            q.write(element);
+            Batch b1 = q.readBatch(2);
+            q.write(element);
+            Batch b2 = q.readBatch(2);
+            q.write(element);
+            Batch b3 = q.readBatch(2);
+            q.write(element);
+            Batch b4 = q.readBatch(2);
+
+            assertThat(q.tailPages.size(), is(3));
+            assertThat(q.getPersistedByteSize() > 0, is(true));
+
+            // fully ack middle page and head page
+            b2.close();
+            b4.close();
+
+            assertThat(q.tailPages.size(), is(2));
+            assertThat(q.getPersistedByteSize() > 0, is(true));
+
+            q.close();
+            q.open();
+
+            assertThat(q.tailPages.size(), is(2));
+            assertThat(q.getPersistedByteSize() > 0, is(true));
+        }
+    }
+
     private void stableUnderStress(final int capacity) throws IOException {
         Settings settings = TestSettings.persistedQueueSettings(capacity, dataPath);
         final ExecutorService exec = Executors.newScheduledThreadPool(2);
