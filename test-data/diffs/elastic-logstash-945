diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index 7274e64ec28..e87253d7d10 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -37,8 +37,15 @@ class LogStash::Filters::Base < LogStash::Plugin
   #       }
   #     }
   #
+  #     # You can also add multiple tags at once:
+  #     filter {
+  #       %PLUGIN% {
+  #         add_tag => [ "foo_%{somefield}", "taggedy_tag"]
+  #       }
+  #     }
+  #
   # If the event has field "somefield" == "hello" this filter, on success,
-  # would add a tag "foo_hello"
+  # would add a tag "foo_hello" (and the second example would of course add a "taggedy_tag" tag).
   config :add_tag, :validate => :array, :default => []
 
   # If this filter is successful, remove arbitrary tags from the event.
@@ -51,8 +58,17 @@ class LogStash::Filters::Base < LogStash::Plugin
   #       }
   #     }
   #
+  #     # You can also remove multiple tags at once:
+  # 
+  #     filter {
+  #       %PLUGIN% {
+  #         remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
+  #       }
+  #     }
+  #
   # If the event has field "somefield" == "hello" this filter, on success,
-  # would remove the tag "foo_hello" if it is present
+  # would remove the tag "foo_hello" if it is present. The second example
+  # would remove a sad, unwanted tag as well. 
   config :remove_tag, :validate => :array, :default => []
 
   # If this filter is successful, add any arbitrary fields to this event.
@@ -61,14 +77,22 @@ class LogStash::Filters::Base < LogStash::Plugin
   #
   #     filter {
   #       %PLUGIN% {
-  #         add_field => [ "foo_%{somefield}", "Hello world, from %{host}" ]
+  #         add_field => [ "foo_%{somefield}" => "Hello world, from %{host}" ]
+  #       }
+  #     }
+  #
+  #     # You can also add multiple fields at once:
+  #
+  #     filter {
+  #       %PLUGIN% {
+  #         add_field => [ "foo_%{somefield}" => "Hello world, from %{host}" "new_field" => "new_static_value"]
   #       }
   #     }
   #
   # If the event has field "somefield" == "hello" this filter, on success,
   # would add field "foo_hello" if it is present, with the
   # value above and the %{host} piece replaced with that value from the
-  # event.
+  # event. The second example would also add a hardcoded field. 
   config :add_field, :validate => :hash, :default => {}
 
   # If this filter is successful, remove arbitrary fields from this event.
@@ -81,8 +105,17 @@ class LogStash::Filters::Base < LogStash::Plugin
   #       }
   #     }
   #
+  #     # You can also remove multiple fields at once:
+  #
+  #     filter {
+  #       %PLUGIN% {
+  #         remove_field => [ "foo_%{somefield}" "my_extraneous_field" ]
+  #       }
+  #     }
+  #
   # If the event has field "somefield" == "hello" this filter, on success,
-  # would remove the field with name "foo_hello" if it is present
+  # would remove the field with name "foo_hello" if it is present. The second 
+  # example would remove an additional, non-dynamic field.
   config :remove_field, :validate => :array, :default => []
 
   RESERVED = ["type", "tags", "exclude_tags", "include_fields", "exclude_fields", "add_tag", "remove_tag", "add_field", "remove_field", "include_any", "exclude_any"]
diff --git a/lib/logstash/filters/grok.rb b/lib/logstash/filters/grok.rb
index 7241109b2d8..f0ffcdbff9d 100644
--- a/lib/logstash/filters/grok.rb
+++ b/lib/logstash/filters/grok.rb
@@ -35,6 +35,10 @@
 # simply 'duration'. Further, a string "55.3.244.1" might identify the 'client'
 # making a request.
 #
+# For the above example, your grok filter would look something like this:
+#
+# %{NUMBER:duration} %{IP:client}
+#
 # Optionally you can add a data type conversion to your grok pattern. By default
 # all semantics are saved as strings. If you wish to convert a semantic's data type,
 # for example change a string to an integer then suffix it with the target data type.
@@ -78,7 +82,7 @@
 # Grok sits on top of regular expressions, so any regular expressions are valid
 # in grok as well. The regular expression library is Oniguruma, and you can see
 # the full supported regexp syntax [on the Onigiruma
-# site](http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt)
+# site](http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt).
 #
 # #### Custom Patterns
 #
@@ -104,7 +108,7 @@
 #
 # For example, doing the postfix queue id example as above:
 #
-#     # in ./patterns/postfix 
+#     # contents of ./patterns/postfix:
 #     POSTFIX_QUEUEID [0-9A-F]{10,11}
 #
 # Then use the `patterns_dir` setting in this plugin to tell logstash where
@@ -126,7 +130,7 @@
 # * program: postfix/cleanup
 # * pid: 21403
 # * queue_id: BEF25A72965
-# * syslog_message: message-id=<20130101142543.5828399CCAF@mailserver14.example.com
+# * syslog_message: message-id=<20130101142543.5828399CCAF@mailserver14.example.com>
 #
 # The `timestamp`, `logsource`, `program`, and `pid` fields come from the
 # SYSLOGBASE pattern which itself is defined by other patterns.
@@ -168,8 +172,6 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
 
   # Drop if matched. Note, this feature may not stay. It is preferable to combine
   # grok + grep filters to do parsing + dropping.
-  #
-  # requested in: googlecode/issue/26
   config :drop_if_match, :validate => :boolean, :default => false
 
   # Break on first match. The first successful match by grok will result in the
