diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 5e6c1aaa701..0aece48a046 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -9,9 +9,9 @@
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.ObjectAllocator;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.logstash.ackedqueue.ext.JrubyAckedBatchExtLibrary;
 import org.logstash.ackedqueue.ext.JrubyAckedQueueExtLibrary;
 import org.logstash.ackedqueue.ext.JrubyAckedQueueMemoryExtLibrary;
+import org.logstash.ackedqueue.ext.RubyAckedBatch;
 import org.logstash.ext.JrubyEventExtLibrary;
 import org.logstash.ext.JrubyTimestampExtLibrary;
 
@@ -89,9 +89,9 @@ public JrubyTimestampExtLibrary.RubyTimestamp allocate(final Ruby runtime,
         RUBY_ACKED_BATCH_CLASS = setupLogstashClass("AckedBatch", new ObjectAllocator() {
             @Override
             public IRubyObject allocate(final Ruby runtime, final RubyClass rubyClass) {
-                return new JrubyAckedBatchExtLibrary.RubyAckedBatch(runtime, rubyClass);
+                return new RubyAckedBatch(runtime, rubyClass);
             }
-        }, JrubyAckedBatchExtLibrary.RubyAckedBatch.class);
+        }, RubyAckedBatch.class);
         setupLogstashClass(
             "AckedQueue", JrubyAckedQueueExtLibrary.RubyAckedQueue::new,
             JrubyAckedQueueExtLibrary.RubyAckedQueue.class
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedBatchExtLibrary.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedBatchExtLibrary.java
deleted file mode 100644
index b5941bec1dd..00000000000
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedBatchExtLibrary.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package org.logstash.ackedqueue.ext;
-
-import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
-import org.jruby.Ruby;
-import org.jruby.RubyArray;
-import org.jruby.RubyClass;
-import org.jruby.RubyObject;
-import org.jruby.anno.JRubyClass;
-import org.jruby.anno.JRubyMethod;
-import org.jruby.runtime.ThreadContext;
-import org.jruby.runtime.builtin.IRubyObject;
-import org.logstash.Event;
-import org.logstash.RubyUtil;
-import org.logstash.ackedqueue.Batch;
-import org.logstash.ackedqueue.Queueable;
-import org.logstash.ackedqueue.io.LongVector;
-import org.logstash.ext.JrubyEventExtLibrary;
-
-public final class JrubyAckedBatchExtLibrary {
-
-    @JRubyClass(name = "AckedBatch")
-    public static final class RubyAckedBatch extends RubyObject {
-        private static final long serialVersionUID = -3118949118637372130L;
-        private Batch batch;
-
-        public RubyAckedBatch(Ruby runtime, RubyClass klass) {
-            super(runtime, klass);
-        }
-
-        public RubyAckedBatch(Ruby runtime, Batch batch) {
-            super(runtime, RubyUtil.RUBY_ACKED_BATCH_CLASS);
-            this.batch = batch;
-        }
-
-        @SuppressWarnings("unchecked") // for the getList() calls
-        @JRubyMethod(name = "initialize", required = 3)
-        public IRubyObject ruby_initialize(ThreadContext context, IRubyObject events,  IRubyObject seqNums,  IRubyObject queue)
-        {
-            if (! (events instanceof RubyArray)) {
-                context.runtime.newArgumentError("expected events array");
-            }
-            if (! (seqNums instanceof RubyArray)) {
-                context.runtime.newArgumentError("expected seqNums array");
-            }
-            if (! (queue instanceof JrubyAckedQueueExtLibrary.RubyAckedQueue)) {
-                context.runtime.newArgumentError("expected queue AckedQueue");
-            }
-            final Collection<Long> seqList = (List<Long>) seqNums;
-            final LongVector seqs = new LongVector(seqList.size());
-            for (final long seq : seqList) {
-                seqs.add(seq);
-            }
-            this.batch = new Batch((List<Queueable>) events, seqs, ((JrubyAckedQueueExtLibrary.RubyAckedQueue)queue).getQueue());
-
-            return context.nil;
-        }
-
-        @JRubyMethod(name = "get_elements")
-        public IRubyObject ruby_get_elements(ThreadContext context)
-        {
-            RubyArray result = context.runtime.newArray();
-            this.batch.getElements().forEach(e -> result.add(JrubyEventExtLibrary.RubyEvent.newRubyEvent(context.runtime, (Event)e)));
-
-            return result;
-        }
-
-        @JRubyMethod(name = "close")
-        public IRubyObject ruby_close(ThreadContext context)
-        {
-            try {
-                this.batch.close();
-            } catch (IOException e) {
-                throw RubyUtil.newRubyIOError(context.runtime, e);
-            }
-
-            return context.nil;
-        }
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueExtLibrary.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueExtLibrary.java
index 4f3631bae60..f6967dbe42b 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueExtLibrary.java
@@ -154,7 +154,7 @@ public IRubyObject ruby_read_batch(ThreadContext context, IRubyObject limit, IRu
             }
 
             // TODO: return proper Batch object
-            return (b == null) ? context.nil : new JrubyAckedBatchExtLibrary.RubyAckedBatch(context.runtime, b);
+            return (b == null) ? context.nil : new RubyAckedBatch(context.runtime, b);
         }
 
         @JRubyMethod(name = "is_fully_acked?")
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueMemoryExtLibrary.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueMemoryExtLibrary.java
index a4c7688ec68..1b3f72a761e 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueMemoryExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JrubyAckedQueueMemoryExtLibrary.java
@@ -151,7 +151,7 @@ public IRubyObject ruby_read_batch(ThreadContext context, IRubyObject limit, IRu
             }
 
             // TODO: return proper Batch object
-            return (b == null) ? context.nil : new JrubyAckedBatchExtLibrary.RubyAckedBatch(context.runtime, b);
+            return (b == null) ? context.nil : new RubyAckedBatch(context.runtime, b);
         }
 
         @JRubyMethod(name = "is_fully_acked?")
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
new file mode 100644
index 00000000000..7715d4c716f
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
@@ -0,0 +1,76 @@
+package org.logstash.ackedqueue.ext;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import org.jruby.Ruby;
+import org.jruby.RubyArray;
+import org.jruby.RubyClass;
+import org.jruby.RubyObject;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.Event;
+import org.logstash.RubyUtil;
+import org.logstash.ackedqueue.Batch;
+import org.logstash.ackedqueue.Queueable;
+import org.logstash.ackedqueue.io.LongVector;
+import org.logstash.ext.JrubyEventExtLibrary;
+
+@JRubyClass(name = "AckedBatch")
+public final class RubyAckedBatch extends RubyObject {
+    private static final long serialVersionUID = -3118949118637372130L;
+    private Batch batch;
+
+    public RubyAckedBatch(Ruby runtime, RubyClass klass) {
+        super(runtime, klass);
+    }
+
+    public RubyAckedBatch(Ruby runtime, Batch batch) {
+        super(runtime, RubyUtil.RUBY_ACKED_BATCH_CLASS);
+        this.batch = batch;
+    }
+
+    @SuppressWarnings("unchecked") // for the getList() calls
+    @JRubyMethod(name = "initialize", required = 3)
+    public IRubyObject ruby_initialize(ThreadContext context, IRubyObject events,
+        IRubyObject seqNums, IRubyObject queue) {
+        if (!(events instanceof RubyArray)) {
+            context.runtime.newArgumentError("expected events array");
+        }
+        if (!(seqNums instanceof RubyArray)) {
+            context.runtime.newArgumentError("expected seqNums array");
+        }
+        if (!(queue instanceof JrubyAckedQueueExtLibrary.RubyAckedQueue)) {
+            context.runtime.newArgumentError("expected queue AckedQueue");
+        }
+        final Collection<Long> seqList = (List<Long>) seqNums;
+        final LongVector seqs = new LongVector(seqList.size());
+        for (final long seq : seqList) {
+            seqs.add(seq);
+        }
+        this.batch = new Batch((List<Queueable>) events, seqs,
+            ((JrubyAckedQueueExtLibrary.RubyAckedQueue) queue).getQueue()
+        );
+        return context.nil;
+    }
+
+    @JRubyMethod(name = "get_elements")
+    public IRubyObject ruby_get_elements(ThreadContext context) {
+        RubyArray result = context.runtime.newArray();
+        this.batch.getElements().forEach(e -> result.add(
+            JrubyEventExtLibrary.RubyEvent.newRubyEvent(context.runtime, (Event) e)));
+        return result;
+    }
+
+    @JRubyMethod(name = "close")
+    public IRubyObject ruby_close(ThreadContext context) {
+        try {
+            this.batch.close();
+        } catch (IOException e) {
+            throw RubyUtil.newRubyIOError(context.runtime, e);
+        }
+        return context.nil;
+    }
+}
