diff --git a/logstash.gemspec b/logstash.gemspec
index 4917d83ed30..91b80a17dd9 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -20,6 +20,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "json"               #(ruby license)
   gem.add_runtime_dependency "minitest"           # for running the tests from the jar, (MIT license)
   gem.add_runtime_dependency "pry"                #(ruby license)
+  gem.add_runtime_dependency "pry-plus"           #(ruby license)
   gem.add_runtime_dependency "stud"               #(Apache 2.0 license)
   gem.add_runtime_dependency "clamp"              # for command line args/flags (MIT license)
   gem.add_runtime_dependency "i18n", [">=0.6.6"]  #(MIT license)
diff --git a/spec/codecs/netflow/fixtures.rb b/spec/codecs/netflow/fixtures.rb
new file mode 100644
index 00000000000..f04096b8cbb
--- /dev/null
+++ b/spec/codecs/netflow/fixtures.rb
@@ -0,0 +1,144 @@
+# encoding: utf-8
+
+# NetFlow v9 Test Data Based on http://www.cisco.com/en/US/technologies/tk648/tk362/technologies_white_paper09186a00800a3db9.html
+def netflow_v9_header(options = {:record_count => 1})
+  count = [options[:record_count]].pack("n").unpack("cc")
+  [
+    0x00, 0x09, # Version: 9
+    count,      # Count: Number of FlowSet Records in this packet
+    0x00, 0x4C, 0xAF, 0x8E, # System Time: 01:23:45.678 since boot
+    0x53, 0x3E, 0x09, 0xB1, # UNIX Time: 2014-04-04T01:24:01Z
+    0x00, 0x00, 0xBE, 0xEF, # Sequence Number: 48879
+    0x00, 0x00, 0x00, 0x00, # Source ID: 0
+  ].flatten.pack('C*')
+end
+
+def netflow_v9_template_flowset_simple
+  [
+    0x00, 0x00, # FlowSet ID = 0 (NetFlow v9 Template)
+    0x00, 0x24, # Length: 36 bytes (including the ID and Length)
+    0x01, 0x41, # Template ID: 321 (must be < 255)
+    0x00, 0x07, # Field Count: 7 Fields
+    # Field 1
+    0x00, 0x01, # IN_BYTES
+    0x00, 0x04, # Length: 4 bytes
+    # Field 2
+    0x00, 0x02, # IN_PKTS
+    0x00, 0x04, # Length: 4 bytes
+    # Field 3
+    0x00, 0x04, # PROTOCOL
+    0x00, 0x01, # Length: 1 bytes
+    # Field 4
+    0x00, 0x07, # L4_SRC_PORT
+    0x00, 0x02, # Length: 2 bytes
+    # Field 5
+    0x00, 0x08, # IPV4_SRC_ADDR
+    0x00, 0x04, # Length: 4 bytes
+    # Field 6
+    0x00, 0x0B, # L4_DST_PORT
+    0x00, 0x02, # Length: 2 bytes
+    # Field 7
+    0x00, 0x0C, # IPV4_DST_ADDR
+    0x00, 0x04, # Length: 4 bytes
+  ].flatten.pack('C*')
+end
+
+def netflow_v9_data_flowset_simple(options = {:record_count => 1})
+  payload = [
+    # Field 1
+    0x00, 0x01, 0xF4, 0x00, # IN_BYTES: 128000
+    # Field 2
+    0x00, 0x00, 0x04, 0x00, # IN_PKTS: 1024
+    # Field 3
+    0x11, # PROTOCOL: 17 (UDP)
+    # Field 4
+    0x30, 0x39, # L4_SRC_PORT: 12345
+    # Field 5
+    0x0A, 0x01, 0x02, 0x03, # IPV4_SRC_ADDR: 10.1.2.3
+    # Field 6
+    0x15, 0xB7, # L4_DST_PORT: 5559
+    # Field 7
+    0x0A, 0x04, 0x05, 0x06, # IPV4_DST_ADDR: 10.4.5.6
+  ] * options[:record_count]
+  length = payload.length + 4
+  # Padding to 32-bit boundary
+  unless length % 4 == 0
+    padding = 4 - length % 4
+    payload << [0x00] * padding
+    length += padding
+  end
+  [
+    0x01, 0x41, # FlowSet ID = 321 (data formatted according to template 321)
+    [length].pack("n").unpack("cc"), # Length (incl. ID, Length, and Padding)
+    payload
+  ].flatten.pack('C*')
+end
+
+def netflow_v9_template_flowset_complex
+  [
+    0x00, 0x00, # FlowSet ID = 0 (NetFlow v9 Template)
+    0x00, 0x30, # Length: 48 bytes (including the ID and Length)
+    0x01, 0xC8, # Template ID: 456 (must be < 255)
+    0x00, 0x0A, # Field Count: 10 Fields
+    # Field 1
+    0x00, 0x06, # TCP_FLAGS
+    0x00, 0x01, # Length: 1 byte
+    # Field 2
+    0x00, 0x08, # IPV4_SRC_ADDR
+    0x00, 0x04, # Length: 4 bytes
+    # Field 3
+    0x00, 0x0A, # INPUT_SNMP
+    0x00, 0x02, # Length: 2 bytes
+    # Field 4
+    0x00, 0x0C, # IPV4_DST_ADDR
+    0x00, 0x04, # Length: 4 bytes
+    # Field 5
+    0x00, 0x0E, # OUTPUT_SNMP
+    0x00, 0x02, # Length: 2 bytes
+    # Field 6
+    0x00, 0x15, # LAST_SWITCHED
+    0x00, 0x04, # Length: 4 bytes
+    # Field 7
+    0x00, 0x16, # FIRST_SWITCHED
+    0x00, 0x04, # Length: 4 bytes
+    # Field 8
+    0x00, 0x52, # IF_NAME
+    0x00, 0x10, # Length: 16 bytes
+    # Field 9
+    0x00, 0x53, # IF_DESC
+    0x00, 0x20, # Length: 32 bytes
+    # Field 10
+    0x00, 0x59, # FORWARDING_STATUS
+    0x00, 0x01, # Length: 1 byte
+  ].flatten.pack('C*')
+end
+
+def netflow_v9_data_flowset_complex
+  [
+    0x01, 0xC8, # FlowSet ID = 456 (data formatted according to template 456)
+    0x00, 0x4C, # Length: 76 (incl. ID, Length, and Padding)
+    # Field 1: TCP_FLAGS
+    0x13, # FIN (0x01) | SYN(0x02) | ACK(0x10)
+    # Field 2: IPV4_SRC_ADDR
+    0x0A, 0x01, 0x02, 0x03, # IPV4_SRC_ADDR: 10.1.2.3
+    # Field 3: INPUT_SNMP
+    0x00, 0x01, # ifIndex = 1
+    # Field 4: IPV4_DST_ADDR
+    0x0A, 0x04, 0x05, 0x06, # IPV4_SRC_ADDR: 10.4.5.6
+    # Field 5: OUTPUT_SNMP
+    0x00, 0x02, # ifIndex = 2
+    # Field 6: LAST_SWITCHED
+    0x00, 0x4C, 0x9C, 0x06, # System Time: 01:23:40.678 since boot
+    # Field 7: FIRST_SWITCHED
+    0x00, 0x4C, 0x88, 0x7E, # System Time: 01:23:35.678 since boot
+    # Field 8: IF_NAME
+    "FE1/0".ljust(16, "\0").bytes, # (null-padded to 16 bytes)
+    # Field 9: IF_DESC
+    "FastEthernet 1/0".ljust(32, "\0").bytes, # (null-padded to 32 bytes)
+    # Field 10: FORWARDING_STATUS
+    0x42, # Forwarded not Fragmented (Reason Code 66)
+    # Padding to 32-bit boundary
+    0x00, 0x00
+  ].flatten.pack('C*')
+end
+
diff --git a/spec/codecs/netflow/netflow.rb b/spec/codecs/netflow/netflow.rb
new file mode 100644
index 00000000000..3a8af64ab7e
--- /dev/null
+++ b/spec/codecs/netflow/netflow.rb
@@ -0,0 +1,151 @@
+# encoding: utf-8
+
+require File.join(File.dirname(__FILE__), 'fixtures.rb')
+require "logstash/codecs/netflow"
+require "logstash/event"
+require "insist"
+require "pry"
+require "pry-rescue"
+
+describe LogStash::Codecs::Netflow do
+  context "#decode NetFlow v9" do
+    let(:message) {
+      netflow_v9_header(:record_count => 2) +
+      netflow_v9_template_flowset_simple +
+      netflow_v9_data_flowset_simple(:record_count => 1)
+    }
+
+    it "should respect the 'target' setting" do
+      default_codec    = LogStash::Codecs::Netflow.new
+      configured_codec = LogStash::Codecs::Netflow.new("target" => "testing")
+      default_codec.decode(message) do |event|
+        insist { event["netflow"]["flow_seq_num"] } == 48879
+      end
+      configured_codec.decode(message) do |event|
+        insist { event["netflow"] }.nil?
+        insist { event["testing"]["flow_seq_num"] } == 48879
+      end
+    end
+
+    context "with a single Data Record and no matching Template" do
+      let(:message) {
+        netflow_v9_header(:record_count => 1) +
+        netflow_v9_data_flowset_simple(:record_count => 1)
+      }
+      it "should not return an event" do
+        events = Array.new
+        subject.decode(message) do |event|
+          events << event        
+        end
+        insist { events.length } == 0
+      end
+    end
+
+    context "with a single simple Data Record after a matching Template" do
+      let(:message) {
+        netflow_v9_header(:record_count => 2) +
+        netflow_v9_template_flowset_simple +
+        netflow_v9_data_flowset_simple(:record_count => 1)
+      }
+      it "should return a valid event" do
+        events = Array.new
+        subject.decode(message) do |event|
+          events << event        
+        end
+        insist { events.length } == 1
+        events.each do |event|
+          insist { event.is_a? LogStash::Event }
+          # TODO: See why current implementation trucates milliseconds
+          timestamp = Time.iso8601("2014-04-04T01:24:01.000Z")
+          insist { event["@timestamp"]               } == timestamp
+          insist { event["netflow"]["version"]       } == 9
+          insist { event["netflow"]["flow_seq_num"]  } == 48879
+          insist { event["netflow"]["flowset_id"]    } == 321
+          insist { event["netflow"]["in_bytes"]      } == 128000
+          insist { event["netflow"]["in_pkts"]       } == 1024
+          insist { event["netflow"]["protocol"]      } == 17
+          insist { event["netflow"]["l4_src_port"]   } == 12345
+          insist { event["netflow"]["ipv4_src_addr"] } == "10.1.2.3"
+          insist { event["netflow"]["l4_dst_port"]   } == 5559
+          insist { event["netflow"]["ipv4_dst_addr"] } == "10.4.5.6"
+        end
+      end
+    end
+
+    context "with a single complex Data Record after a matching Template" do
+      let(:message) {
+        netflow_v9_header(:record_count => 2) +
+        netflow_v9_template_flowset_complex +
+        netflow_v9_data_flowset_complex
+      }
+      it "should return a valid event" do
+require 'pry'
+binding.pry
+        events = Array.new
+        subject.decode(message) do |event|
+          events << event        
+        end
+        insist { events.length } == 1
+        events.each do |event|
+          insist { event.is_a? LogStash::Event }
+          insist { event["netflow"]["tcp_flags"] } == 0x13
+          insist { event["netflow"]["input_snmp"] } == 1
+          insist { event["netflow"]["output_snmp"] } == 2
+          insist { event["netflow"]["last_switched"] } == 0
+          insist { event["netflow"]["first_switched"] } == 0
+          insist { event["netflow"]["if_name"] } == "FE1/0"
+          insist { event["netflow"]["if_desc"] } == "FastEthernet 1/0"
+          insist { event["netflow"]["forwarding_status"] } == 0x42
+        end
+      end
+    end
+
+    context "with multiple Data Records after a matching Template" do
+      let(:message) {
+        netflow_v9_header(:record_count => 5) +
+        netflow_v9_template_flowset_simple +
+        netflow_v9_data_flowset_simple(:record_count => 4)
+      }
+
+      it "should return multiple valid events" do
+        events = Array.new
+        subject.decode(message) do |event|
+          events << event        
+        end
+        insist { events.length } == 4
+        events.each do |event|
+          insist { event.is_a? LogStash::Event }
+          # TODO: See why current implementation trucates milliseconds
+          timestamp = Time.iso8601("2014-04-04T01:24:01.000Z")
+          insist { event["@timestamp"]               } == timestamp
+          insist { event["netflow"]["version"]       } == 9
+          insist { event["netflow"]["flow_seq_num"]  } == 48879
+          insist { event["netflow"]["flowset_id"]    } == 321
+        end
+      end
+    end
+
+    context "with matching and non-matching Data Records around a Template" do
+      let(:message) {
+        netflow_v9_header(:record_count => 5) +
+        netflow_v9_data_flowset_simple +
+        netflow_v9_data_flowset_complex +
+        netflow_v9_template_flowset_simple +
+        netflow_v9_data_flowset_simple +
+        netflow_v9_data_flowset_complex
+      }
+
+      it "should return only the event from after the matching Template" do
+        events = Array.new
+        subject.decode(message) do |event|
+          events << event        
+        end
+        insist { events.length } == 1
+        events.each do |event|
+          insist { event["netflow"]["in_pkts"] } == 1024
+        end
+      end
+    end
+
+  end
+end
diff --git a/tools/Gemfile.ruby-2.1.0.lock b/tools/Gemfile.ruby-2.1.0.lock
index e5162a84d39..c2c915db9fa 100644
--- a/tools/Gemfile.ruby-2.1.0.lock
+++ b/tools/Gemfile.ruby-2.1.0.lock
@@ -17,9 +17,10 @@ GEM
     beefcake (0.3.7)
     bindata (2.0.0)
     blankslate (2.1.2.4)
+    bluecloth (2.2.0)
     buftok (0.1)
     builder (3.2.2)
-    bunny (1.1.3)
+    bunny (1.1.8)
       amq-protocol (>= 1.9.2)
     cabin (0.6.1)
     ci_reporter (1.9.1)
@@ -37,6 +38,14 @@ GEM
     docile (1.1.3)
     edn (1.0.2)
       parslet (~> 1.4.0)
+    elasticsearch (1.0.1)
+      elasticsearch-api (= 1.0.1)
+      elasticsearch-transport (= 1.0.1)
+    elasticsearch-api (1.0.1)
+      multi_json
+    elasticsearch-transport (1.0.1)
+      faraday
+      multi_json
     excon (0.32.0)
     extlib (0.9.16)
     faraday (0.9.0)
@@ -55,8 +64,6 @@ GEM
     gelfd (0.2.0)
     geoip (1.3.5)
     gmetric (0.1.3)
-    haml (4.0.5)
-      tilt
     hitimes (1.2.1)
     http (0.5.0)
       http_parser.rb
@@ -65,7 +72,7 @@ GEM
     insist (1.0.0)
     jls-grok (0.10.12)
       cabin (>= 0.6.0)
-    jls-lumberjack (0.0.19)
+    jls-lumberjack (0.0.20)
     json (1.8.1)
     mail (2.5.3)
       i18n (>= 0.4.0)
@@ -95,6 +102,9 @@ GEM
       coderay (~> 1.0)
       method_source (~> 0.8)
       slop (~> 3.4)
+    rack (1.5.2)
+    rack-protection (1.5.2)
+      rack
     rbnacl (2.0.0)
       ffi
     redis (3.0.7)
@@ -112,7 +122,6 @@ GEM
       tzinfo (>= 0.3.22)
     rumbster (1.1.1)
       mail (= 2.5.3)
-    sass (3.2.14)
     shoulda (3.5.0)
       shoulda-context (~> 1.0, >= 1.0.1)
       shoulda-matchers (>= 1.4.1, < 3.0)
@@ -125,6 +134,10 @@ GEM
       multi_json
       simplecov-html (~> 0.8.0)
     simplecov-html (0.8.0)
+    sinatra (1.4.4)
+      rack (~> 1.4)
+      rack-protection (~> 1.4)
+      tilt (~> 1.3, >= 1.3.4)
     slop (3.4.7)
     snmp (1.1.1)
     spoon (0.0.4)
@@ -138,7 +151,7 @@ GEM
     thor (0.18.1)
     thread_safe (0.2.0)
       atomic (>= 1.1.7, < 2)
-    tilt (2.0.0)
+    tilt (1.4.1)
     tins (1.0.0)
     treetop (1.4.15)
       polyglot
@@ -166,13 +179,15 @@ DEPENDENCIES
   aws-sdk
   beefcake (= 0.3.7)
   bindata (>= 1.5.0)
-  bunny (~> 1.1.0)
+  bluecloth
+  bunny (~> 1.1.8)
   cabin (>= 0.6.0)
   ci_reporter
   cinch
   clamp
   coveralls
   edn
+  elasticsearch
   excon
   extlib (= 0.9.16)
   ffi
@@ -183,11 +198,10 @@ DEPENDENCIES
   gelfd (= 0.2.0)
   geoip (>= 1.3.2)
   gmetric (= 0.1.3)
-  haml
   i18n (>= 0.6.6)
   insist (= 1.0.0)
   jls-grok (= 0.10.12)
-  jls-lumberjack (>= 0.0.19)
+  jls-lumberjack (>= 0.0.20)
   json
   mail
   metriks
@@ -197,13 +211,14 @@ DEPENDENCIES
   msgpack
   murmurhash3
   pry
+  rack
   rbnacl
   redis
   rspec
   rufus-scheduler (~> 2.0.24)
   rumbster
-  sass
   shoulda
+  sinatra
   snmp
   spoon
   statsd-ruby (= 1.2.0)
