diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index cd7db790dd6..346227e9d04 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -30,8 +30,12 @@ class LogStash::Inputs::Amqp < LogStash::Inputs::Threadable
   # Your amqp password
   config :password, :validate => :password, :default => "guest"
 
-  # The name of the queue. 
-  config :name, :validate => :string, :default => ""
+  # The name of the queue. Depricated due to conflicts with puppet naming convention.
+  # Replaced by 'queue' variable. See LOGSTASH-755
+  config :name, :validate => :string, :deprecated => true
+
+  # The name of the queue.
+  config :queue, :validate => :string, :default => ""
 
   # The name of the exchange to bind the queue. This is analogous to the 'amqp
   # output' [config 'name'](../outputs/amqp)
@@ -86,6 +90,14 @@ def initialize(params)
 
   public
   def register
+
+    if @name
+      if @queue
+        @logger.error("'name' and 'queue' are the same setting, but 'name' is deprecated. Please use only 'queue'")
+      end
+      @queue = @name
+    end   
+
     @logger.info("Registering input #{@url}")
     require "bunny" # rubygem 'bunny'
     @vhost ||= "/"
@@ -106,12 +118,12 @@ def register
     amqp_credentials << @user if @user
     amqp_credentials << ":#{@password}" if @password
     @amqpurl += amqp_credentials unless amqp_credentials.nil?
-    @amqpurl += "#{@host}:#{@port}#{@vhost}/#{@name}"
+    @amqpurl += "#{@host}:#{@port}#{@vhost}/#{@queue}"
   end # def register
 
   def run(queue)
     begin
-      @logger.debug("Connecting with AMQP settings #{@amqpsettings.inspect} to set up queue #{@name.inspect}")
+      @logger.debug("Connecting with AMQP settings #{@amqpsettings.inspect} to set up queue #{@queue.inspect}")
       @bunny = Bunny.new(@amqpsettings)
       return if terminating?
       @bunny.start
@@ -119,15 +131,15 @@ def run(queue)
 
       @arguments_hash = Hash[*@arguments]
 
-      @queue = @bunny.queue(@name, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive, :arguments => @arguments_hash })
-      @queue.bind(@exchange, :key => @key)
+      @bunnyqueue = @bunny.queue(@queue, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive, :arguments => @arguments_hash })
+      @bunnyqueue.bind(@exchange, :key => @key)
 
-      @queue.subscribe({:ack => @ack}) do |data|
+      @bunnyqueue.subscribe({:ack => @ack}) do |data|
         e = to_event(data[:payload], @amqpurl)
         if e
           queue << e
         end
-      end # @queue.subscribe
+      end # @bunnyqueue.subscribe
 
     rescue *[Bunny::ConnectionError, Bunny::ServerDownError] => e
       @logger.error("AMQP connection error, will reconnect: #{e}")
@@ -139,8 +151,8 @@ def run(queue)
   end # def run
 
   def teardown
-    @queue.unsubscribe unless @durable == true
-    @queue.delete unless @durable == true
+    @bunnyqueue.unsubscribe unless @durable == true
+    @bunnyqueue.delete unless @durable == true
     @bunny.close if @bunny
     finished
   end # def teardown
diff --git a/lib/logstash/inputs/eventlog.rb b/lib/logstash/inputs/eventlog.rb
index cc930f56f25..0fa3eb01aec 100644
--- a/lib/logstash/inputs/eventlog.rb
+++ b/lib/logstash/inputs/eventlog.rb
@@ -16,8 +16,12 @@ class LogStash::Inputs::EventLog < LogStash::Inputs::Base
   config_name "eventlog"
   plugin_status "beta"
 
+  # Event Log Name. Depricated due to conflicts with puppet naming convention.
+  # Replaced by 'logfile' variable. See LOGSTASH-755
+  config :name, :validate => :string, :deprecated => true
+
   # Event Log Name
-  config :name, :validate => :string, :required => true, :default => "System"
+  config :logfile, :validate => :string, :required => true, :default => "System"
 
   public
   def initialize(params)
@@ -27,8 +31,16 @@ def initialize(params)
 
   public
   def register
+
+    if @name
+      if @logfile
+        @logger.error("'name' and 'logfile' are the same setting, but 'name' is deprecated. Please use only 'logfile'")
+      end
+      @logfile = @name
+    end
+
     @hostname = Socket.gethostname
-    @logger.info("Registering input eventlog://#{@hostname}/#{@name}")
+    @logger.info("Registering input eventlog://#{@hostname}/#{@logfile}")
     require "win32ole" # rubygem 'win32ole' ('jruby-win32ole' on JRuby)
   end # def register
 
@@ -43,7 +55,7 @@ def run(queue)
     newest_shipped_event = latest_record_number
     next_newest_shipped_event = newest_shipped_event
     begin
-      @logger.debug("Tailing Windows Event Log '#{@name}'")
+      @logger.debug("Tailing Windows Event Log '#{@logfile}'")
       loop do
         event_index = 0
         latest_events.each do |event|
@@ -51,7 +63,7 @@ def run(queue)
           timestamp = DateTime.strptime(event.TimeGenerated, "%Y%m%d%H%M%S").iso8601
           timestamp[19..-1] = DateTime.now.iso8601[19..-1] # Copy over the correct TZ offset
           e = LogStash::Event.new({
-            "@source" => "eventlog://#{@hostname}/#{@name}",
+            "@source" => "eventlog://#{@hostname}/#{@logfile}",
             "@type" => @type,
             "@timestamp" => timestamp
           })
@@ -81,7 +93,7 @@ def run(queue)
 
   private
   def latest_events
-    wmi_query = "select * from Win32_NTLogEvent where Logfile = '#{@name}'"
+    wmi_query = "select * from Win32_NTLogEvent where Logfile = '#{@logfile}'"
     events = @wmi.ExecQuery(wmi_query)
   end # def latest_events
 
diff --git a/lib/logstash/outputs/amqp.rb b/lib/logstash/outputs/amqp.rb
index bd1ff2f110f..d8fdf2b530f 100644
--- a/lib/logstash/outputs/amqp.rb
+++ b/lib/logstash/outputs/amqp.rb
@@ -28,8 +28,12 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   # The exchange type (fanout, topic, direct)
   config :exchange_type, :validate => [ "fanout", "direct", "topic"], :required => true
 
+  # The name of the exchange. Depricated due to conflicts with puppet naming convention.
+  # Replaced by 'exchange' variable. See LOGSTASH-755
+  config :name, :validate => :string, :deprecated => true
+
   # The name of the exchange
-  config :name, :validate => :string, :required => true
+  config :exchange, :validate => :string, :required => true
 
   # Key to route to by default. Defaults to 'logstash'
   #
@@ -59,6 +63,13 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   def register
     require "bunny" # rubygem 'bunny'
 
+    if @name
+      if @exchange
+        @logger.error("'name' and 'exchange' are the same setting, but 'name' is deprecated. Please use only 'exchange'")
+      end
+      @exchange = @name
+    end
+
     @logger.info("Registering output", :plugin => self)
     connect
   end # def register
@@ -78,7 +89,7 @@ def connect
 
     begin
       @logger.debug("Connecting to AMQP", :settings => amqpsettings,
-                    :exchange_type => @exchange_type, :name => @name)
+                    :exchange_type => @exchange_type, :name => @exchange)
       @bunny = Bunny.new(amqpsettings)
       @bunny.start
     rescue => e
@@ -92,11 +103,11 @@ def connect
       end
     end
 
-    @logger.debug("Declaring exchange", :name => @name, :type => @exchange_type,
+    @logger.debug("Declaring exchange", :name => @exchange, :type => @exchange_type,
                   :durable => @durable)
-    @exchange = @bunny.exchange(@name, :type => @exchange_type.to_sym, :durable => @durable)
+    @bunnyexchange = @bunny.exchange(@exchange, :type => @exchange_type.to_sym, :durable => @durable)
 
-    @logger.debug("Binding exchange", :name => @name, :key => @key)
+    @logger.debug("Binding exchange", :name => @exchange, :key => @key)
   end # def connect
 
   public
@@ -118,9 +129,9 @@ def receive(event)
   public
   def receive_raw(message, key=@key)
     begin
-      if @exchange
+      if @bunnyexchange
         @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key }])
-        @exchange.publish(message, :persistent => @persistent, :key => key)
+        @bunnyexchange.publish(message, :persistent => @persistent, :key => key)
       else
         @logger.warn("Tried to send message, but not connected to amqp yet.")
       end
@@ -133,14 +144,14 @@ def receive_raw(message, key=@key)
 
   public
   def to_s
-    return "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@name}\##{@key}"
+    return "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@exchange}\##{@key}"
   end
 
   public
   def teardown
     @bunny.close rescue nil
     @bunny = nil
-    @exchange = nil
+    @bunnyexchange = nil
     finished
   end # def teardown
 end # class LogStash::Outputs::Amqp
diff --git a/lib/logstash/outputs/elasticsearch_river.rb b/lib/logstash/outputs/elasticsearch_river.rb
index 605bae493b6..18075c7f562 100644
--- a/lib/logstash/outputs/elasticsearch_river.rb
+++ b/lib/logstash/outputs/elasticsearch_river.rb
@@ -57,9 +57,13 @@ class LogStash::Outputs::ElasticSearchRiver < LogStash::Outputs::Base
   # AMQP vhost
   config :vhost, :validate => :string, :default => "/"
 
-  # AMQP queue name
-  config :name, :validate => :string, :default => "elasticsearch"
+  # AMQP queue name. Depricated due to conflicts with puppet naming convention.
+  # Replaced by 'queue' variable. See LOGSTASH-755
+  config :name, :validate => :string, :deprecated => true
 
+  # AMQP queue name
+  config :queue, :validate => :string, :default => "elasticsearch"
+  
   # AMQP exchange name
   config :exchange, :validate => :string, :default => "elasticsearch"
 
@@ -78,6 +82,14 @@ class LogStash::Outputs::ElasticSearchRiver < LogStash::Outputs::Base
 
   public
   def register
+
+    if @name
+      if @queue
+        @logger.error("'name' and 'queue' are the same setting, but 'name' is deprecated. Please use only 'queue'")
+      end
+      @queue = @name
+    end
+
     # TODO(sissel): find a better way of declaring where the elasticsearch
     # libraries are
     # TODO(sissel): can skip this step if we're running from a jar.
@@ -126,7 +138,7 @@ def prepare_river
                                 "user" => @user,
                                 "pass" => @password,
                                 "vhost" => @vhost,
-                                "queue" => @name,
+                                "queue" => @queue,
                                 "exchange" => @exchange,
                                 "routing_key" => @key,
                                 "exchange_type" => @exchange_type,
