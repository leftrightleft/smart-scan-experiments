diff --git a/logstash-core/lib/logstash/java_filter_delegator.rb b/logstash-core/lib/logstash/java_filter_delegator.rb
index 9cf52a6b930..8f26cecf581 100644
--- a/logstash-core/lib/logstash/java_filter_delegator.rb
+++ b/logstash-core/lib/logstash/java_filter_delegator.rb
@@ -67,11 +67,10 @@ def has_flush
     def flush(options = {})
       # we also need to trace the number of events
       # coming from a specific filters.
-      new_events = @filter.flush(options)
-
       # Filter plugins that does buffering or spooling of events like the
       # `Logstash-filter-aggregates` can return `NIL` and will flush on the next flush ticks.
-      @metric_events_out.increment(new_events.size) if new_events && new_events.size > 0
+      new_events = @filter.flush(options) || []
+      @metric_events_out.increment(new_events.size)
       new_events
     end
   end
diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index 44d98365706..1f4aaceb7d5 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -111,6 +111,20 @@ def flush(options)
   end
 end
 
+class NilFlushingFilterPeriodic < DummyFlushingFilter
+  config_name "nilflushingfilterperiodic"
+
+  def register
+    @count = 0
+  end
+
+  def flush(options)
+    # Just returns nil as some plugins do at times
+    @count += 1
+    @count > 2 ? [::LogStash::Event.new("message" => "dummy_flush")] : nil
+  end
+end
+
 class JavaTestPipeline < LogStash::JavaPipeline
   attr_reader :outputs, :settings
 end
@@ -642,6 +656,52 @@ class JavaTestPipeline < LogStash::JavaPipeline
     end
   end
 
+  context "Periodic Flush that intermittently returns nil" do
+    let(:config) do
+      <<-EOS
+      input {
+        dummy_input {}
+      }
+      filter {
+        nil_flushing_filter {}
+      }
+      output {
+        dummy_output {}
+      }
+      EOS
+    end
+    let(:output) { ::LogStash::Outputs::DummyOutput.new }
+
+    before do
+      allow(::LogStash::Outputs::DummyOutput).to receive(:new).with(any_args).and_return(output)
+      allow(LogStash::Plugin).to receive(:lookup).with("input", "dummy_input").and_return(LogStash::Inputs::DummyBlockingInput)
+      allow(LogStash::Plugin).to receive(:lookup).with("filter", "nil_flushing_filter").and_return(NilFlushingFilterPeriodic)
+      allow(LogStash::Plugin).to receive(:lookup).with("output", "dummy_output").and_return(::LogStash::Outputs::DummyOutput)
+      allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_return(LogStash::Codecs::Plain)
+    end
+
+    it "flush periodically without error on nil flush return" do
+      Thread.abort_on_exception = true
+      pipeline = mock_java_pipeline_from_string(config, pipeline_settings_obj)
+      t = Thread.new { pipeline.run }
+      Timeout.timeout(timeout) do
+        sleep(0.1) until pipeline.ready?
+      end
+      Stud.try(max_retry.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
+        wait(10).for do
+          # give us a bit of time to flush the events
+          output.events.empty?
+        end.to be_falsey
+      end
+
+      expect(output.events.any? {|e| e.get("message") == "dummy_flush"}).to eq(true)
+
+      pipeline.shutdown
+
+      t.join
+    end
+  end
+
   context "Periodic Flush Wrapped in Nested Conditional" do
     let(:config) do
       <<-EOS
