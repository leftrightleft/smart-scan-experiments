diff --git a/src/main/java/com/github/demo/DemoServer.java b/src/main/java/com/github/demo/DemoServer.java
index d69febc..aad08ce 100644
--- a/src/main/java/com/github/demo/DemoServer.java
+++ b/src/main/java/com/github/demo/DemoServer.java
@@ -3,6 +3,8 @@
 import java.net.URL;
 import java.net.URI;
 
+import com.github.demo.service.BookstoreService;
+import com.github.demo.service.BookstoreServiceException;
 import com.github.demo.servlet.*;
 
 import org.eclipse.jetty.server.Server;
@@ -51,11 +53,27 @@ public static void main(String[] args) throws Exception {
 
         ctxHandler.addServlet(StatusServlet.class, "/status");
 
-        // Default servlet path, must be last
-        ServletHolder books = new ServletHolder("/", BookServlet.class);
-        books.setInitParameter("dirAllowed","false");
-        books.setInitParameter("pathInfoOnly","true");
-        ctxHandler.addServlet(books, "/");
+        try {
+            BookstoreService bookstoreService = new BookstoreService();
+
+            // User servlet
+            UserServlet userServlet = new UserServlet(bookstoreService);
+            ServletHolder user = new ServletHolder(userServlet);
+            user.setInitParameter("dirAllowed","false");
+            user.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(user, "/login");
+
+
+            // Default servlet path, must be last
+            BookstoreServlet bookstoreServlet = new BookstoreServlet(bookstoreService);
+            ServletHolder bookstore = new ServletHolder(bookstoreServlet);
+            bookstore.setInitParameter("dirAllowed","false");
+            bookstore.setInitParameter("pathInfoOnly","true");
+            ctxHandler.addServlet(bookstore, "/");
+        } catch (BookstoreServiceException e) {
+            logger.error("Failed to initialize bookstore service: {}", e.getMessage(), e);
+            System.exit(-1);
+        }
 
         server.setHandler(ctxHandler);
 
diff --git a/src/main/java/com/github/demo/service/BookDatabase.java b/src/main/java/com/github/demo/service/BookDatabase.java
deleted file mode 100644
index 43bb420..0000000
--- a/src/main/java/com/github/demo/service/BookDatabase.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.github.demo.service;
-
-import com.github.demo.model.Book;
-import com.github.demo.model.User;
-
-import java.util.List;
-import java.util.Collection;
-
-public interface BookDatabase {
-
-    List<Book> getAll() throws BookServiceException;
-
-    void populate(Collection<Book> books) throws BookServiceException;
-
-    void populateUsers(Collection<User> users) throws BookServiceException;
-
-    void destroy() throws BookServiceException;
-}
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/service/BookService.java b/src/main/java/com/github/demo/service/BookService.java
deleted file mode 100644
index 05ba456..0000000
--- a/src/main/java/com/github/demo/service/BookService.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.github.demo.service;
-
-import com.github.demo.model.Book;
-
-import java.util.List;
-
-public class BookService {
-
-    private BookDatabase booksDatabase;
-
-    public BookService() throws BookServiceException {
-        String databaseUrl = System.getenv("DATABASE_URL");
-        String databaseUser = System.getenv("DATABASE_USER");
-        String databasePassword = System.getenv("DATABASE_PASSWORD");
-
-        try {
-            booksDatabase = new BookDatabaseImpl(databaseUrl, databaseUser, databasePassword);
-        } catch (BookServiceException e) {
-            throw new BookServiceException(e);
-        }
-    }
-
-    public List<Book> getBooks() throws BookServiceException {
-        return this.booksDatabase.getAll();
-    }
-
-}
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/service/BookServiceException.java b/src/main/java/com/github/demo/service/BookServiceException.java
deleted file mode 100644
index 57dd1e2..0000000
--- a/src/main/java/com/github/demo/service/BookServiceException.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.github.demo.service;
-
-/**
- * Custom BookService Exception for caturing failures in building/starting the books service.
- */
-public class BookServiceException extends Exception {
-
-    private static final long serialVersionUID = 1L;
-
-    public BookServiceException(Exception e) {
-        super(e);
-    }
-
-    public BookServiceException(String message) {
-        super(message);
-    }
-}
diff --git a/src/main/java/com/github/demo/service/BookstoreService.java b/src/main/java/com/github/demo/service/BookstoreService.java
new file mode 100644
index 0000000..b5185e1
--- /dev/null
+++ b/src/main/java/com/github/demo/service/BookstoreService.java
@@ -0,0 +1,37 @@
+package com.github.demo.service;
+
+import com.github.demo.model.Book;
+import com.github.demo.model.User;
+
+import java.util.List;
+
+public class BookstoreService {
+
+    private Database database;
+
+    public BookstoreService() throws BookstoreServiceException {
+        String databaseUrl = System.getenv("DATABASE_URL");
+        String databaseUser = System.getenv("DATABASE_USER");
+        String databasePassword = System.getenv("DATABASE_PASSWORD");
+
+        try {
+            database = new DatabaseImpl(databaseUrl, databaseUser, databasePassword);
+        } catch (BookstoreServiceException e) {
+            throw new BookstoreServiceException(e);
+        }
+    }
+
+    public List<Book> getBooks() throws BookstoreServiceException {
+        return this.database.getAllBooks();
+    }
+
+    public List<User> getUsers() throws BookstoreServiceException {
+        return this.database.getAllUsers();
+    }
+
+    public boolean login(String username, String password) throws BookstoreServiceException {
+        User user = this.database.getUser(username, password);
+        return user != null;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/service/BookstoreServiceException.java b/src/main/java/com/github/demo/service/BookstoreServiceException.java
new file mode 100644
index 0000000..0d73b74
--- /dev/null
+++ b/src/main/java/com/github/demo/service/BookstoreServiceException.java
@@ -0,0 +1,17 @@
+package com.github.demo.service;
+
+/**
+ * Custom BookStore Exception
+ */
+public class BookstoreServiceException extends Exception {
+
+    private static final long serialVersionUID = 1L;
+
+    public BookstoreServiceException(Exception e) {
+        super(e);
+    }
+
+    public BookstoreServiceException(String message) {
+        super(message);
+    }
+}
diff --git a/src/main/java/com/github/demo/service/Database.java b/src/main/java/com/github/demo/service/Database.java
new file mode 100644
index 0000000..f7966b2
--- /dev/null
+++ b/src/main/java/com/github/demo/service/Database.java
@@ -0,0 +1,22 @@
+package com.github.demo.service;
+
+import com.github.demo.model.Book;
+import com.github.demo.model.User;
+
+import java.util.List;
+import java.util.Collection;
+
+public interface Database {
+
+    List<Book> getAllBooks() throws BookstoreServiceException;
+
+    List<User> getAllUsers() throws BookstoreServiceException;
+
+    User getUser(String username, String password) throws BookstoreServiceException;
+
+    void populateBooks(Collection<Book> books) throws BookstoreServiceException;
+
+    void populateUsers(Collection<User> users) throws BookstoreServiceException;
+
+    void destroy() throws BookstoreServiceException;
+}
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/DatabaseImpl.java
similarity index 72%
rename from src/main/java/com/github/demo/service/BookDatabaseImpl.java
rename to src/main/java/com/github/demo/service/DatabaseImpl.java
index 71f5828..54a1a7a 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/DatabaseImpl.java
@@ -18,9 +18,9 @@
 import java.util.List;
 import java.util.ArrayList;
 
-public class BookDatabaseImpl implements BookDatabase {
+public class DatabaseImpl implements Database {
 
-    public static final Logger logger = LoggerFactory.getLogger(BookDatabaseImpl.class);
+    public static final Logger logger = LoggerFactory.getLogger(DatabaseImpl.class);
 
     /** The maximum number of retries for connecting with the database. */
     private static final int MAX_CONNECTION_RETRIES = 10;
@@ -44,11 +44,11 @@ private static final int getMaxRetries() {
         }
     }
 
-    public BookDatabaseImpl() throws BookServiceException {
+    public DatabaseImpl() throws BookstoreServiceException {
         this(null, null, null);
     }
 
-    public BookDatabaseImpl(String url, String username, String password) throws BookServiceException {
+    public DatabaseImpl(String url, String username, String password) throws BookstoreServiceException {
         Properties props = new Properties();
 
         if (username != null) {
@@ -78,11 +78,11 @@ public boolean isValid() {
     }
 
     @Override
-    public List<Book> getAll() throws BookServiceException {
+    public List<Book> getAllBooks() throws BookstoreServiceException {
         List<Book> books = new ArrayList<Book>();
 
         if (!isValid()) {
-            throw new BookServiceException("Database connection is not valid, check logs for failure details.");
+            throw new BookstoreServiceException("Database connection is not valid, check logs for failure details.");
         }
 
         try {
@@ -99,25 +99,68 @@ public List<Book> getAll() throws BookServiceException {
             }
         } catch (SQLException e) {
             logger.error("Failed to obtain books", e);
-            throw new BookServiceException(e);
+            throw new BookstoreServiceException(e);
         }
         return books;
     }
 
     @Override
-    public void destroy() {
+    public List<User> getAllUsers() throws BookstoreServiceException {
+        List<User> users = new ArrayList<User>();
+
+        if (!isValid()) {
+            throw new BookstoreServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
         try {
-            if (connection != null) {
-                connection.close();
+            Statement stmt = connection.createStatement();
+
+            ResultSet rs = stmt.executeQuery("SELECT * FROM users");
+            while (rs.next()) {
+                User user = new User(
+                    rs.getString("username"),
+                    rs.getString("password")
+                );
+                users.add(user);
             }
         } catch (SQLException e) {
-            // Ignore
-            connection = null;
+            logger.error("Failed to obtain users", e);
+            throw new BookstoreServiceException(e);
         }
+        return users;
     }
 
     @Override
-    public void populate(Collection<Book> books) throws BookServiceException {
+    public User getUser(String username, String password) throws BookstoreServiceException {
+        User user = null;
+
+        if (!isValid()) {
+            throw new BookstoreServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
+        Statement stmt = null;
+
+        try {
+            stmt = connection.createStatement();
+            String query = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";
+            ResultSet results = stmt.executeQuery(query);
+
+            if (results.next()) {
+                user = new User(
+                    results.getString("username"),
+                    results.getString("password")
+                );
+            }
+
+        } catch (SQLException e) {
+            logger.error("Failed to obtain user", e);
+            throw new BookstoreServiceException(e);
+        }
+        return user;
+    }
+
+    @Override
+    public void populateBooks(Collection<Book> books) throws BookstoreServiceException {
         if (books != null && books.size() > 0) {
             PreparedStatement ps = null;
 
@@ -134,7 +177,7 @@ public void populate(Collection<Book> books) throws BookServiceException {
                 logger.info("Database populated.");
             } catch (SQLException se) {
                 logger.error("Failure when populating database", se);
-                throw new BookServiceException(se);
+                throw new BookstoreServiceException(se);
             } finally {
                 try {
                     if (ps != null) {
@@ -149,7 +192,7 @@ public void populate(Collection<Book> books) throws BookServiceException {
     }
 
     @Override
-    public void populateUsers(Collection<User> users) throws BookServiceException {
+    public void populateUsers(Collection<User> users) throws BookstoreServiceException {
         if (users != null && users.size() > 0) {
             PreparedStatement ps = null;
 
@@ -164,7 +207,7 @@ public void populateUsers(Collection<User> users) throws BookServiceException {
                 logger.info("Database populated.");
             } catch (SQLException se) {
                 logger.error("Failure when populating database", se);
-                throw new BookServiceException(se);
+                throw new BookstoreServiceException(se);
             } finally {
                 try {
                     if (ps != null) {
@@ -182,7 +225,7 @@ public void populateUsers(Collection<User> users) throws BookServiceException {
      * Initializes the internal database structure and populates it with our default
      * data.
      */
-    private void initializeAndPopulateDatabase() throws BookServiceException {
+    private void initializeAndPopulateDatabase() throws BookstoreServiceException {
         Statement statement = null;
         try {
             // Initialize the database tables for in memory database
@@ -206,7 +249,7 @@ private void initializeAndPopulateDatabase() throws BookServiceException {
 
 
             // Populate the database with some sample data
-            populate(BookUtils.getSampleBooks());
+            populateBooks(BookUtils.getSampleBooks());
             populateUsers(UserUtils.getSampleUsers());
         } catch (SQLException e) {
             if (statement != null) {
@@ -216,11 +259,11 @@ private void initializeAndPopulateDatabase() throws BookServiceException {
                     // ignore
                 }
             }
-            throw new BookServiceException(e);
+            throw new BookstoreServiceException(e);
         }
     }
 
-    private Connection getConnection(String url, Properties props) throws BookServiceException {
+    private Connection getConnection(String url, Properties props) throws BookstoreServiceException {
         Connection connection = null;
         int retryCount = 0;
         int maxRetries = getMaxRetries();
@@ -233,7 +276,7 @@ private Connection getConnection(String url, Properties props) throws BookServic
             } catch (SQLException e) {
                 retryCount++;
 
-                logger.warn("Failed to connect to database, reties: " + retryCount);
+                logger.warn("Failed to connect to database, retries: " + retryCount);
                 logger.warn(e.getMessage());
 
                 try {
@@ -249,4 +292,16 @@ private Connection getConnection(String url, Properties props) throws BookServic
         logger.info("Database Connection successful? " + (connection != null));
         return connection;
     }
+
+    @Override
+    public void destroy() {
+        try {
+            if (connection != null) {
+                connection.close();
+            }
+        } catch (SQLException e) {
+            // Ignore
+            connection = null;
+        }
+    }
 }
diff --git a/src/main/java/com/github/demo/service/UserUtils.java b/src/main/java/com/github/demo/service/UserUtils.java
index fcde534..3a8f705 100644
--- a/src/main/java/com/github/demo/service/UserUtils.java
+++ b/src/main/java/com/github/demo/service/UserUtils.java
@@ -16,4 +16,10 @@ public static List<User> getSampleUsers() {
 
         return users;
     }
+
+
+
+
+
+
 }
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookstoreServlet.java
similarity index 72%
rename from src/main/java/com/github/demo/servlet/BookServlet.java
rename to src/main/java/com/github/demo/servlet/BookstoreServlet.java
index 626765c..603a7df 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookstoreServlet.java
@@ -1,8 +1,8 @@
 package com.github.demo.servlet;
 
 import com.github.demo.model.Book;
-import com.github.demo.service.BookService;
-import com.github.demo.service.BookServiceException;
+import com.github.demo.service.BookstoreService;
+import com.github.demo.service.BookstoreServiceException;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -20,22 +20,23 @@
 import java.util.Properties;
 
 
-public class BookServlet extends HttpServlet {
+public class BookstoreServlet extends HttpServlet {
 
     private static final long serialVersionUID = 1L;
 
-    private static final Logger logger = LoggerFactory.getLogger(BookServlet.class);
+    private static final Logger logger = LoggerFactory.getLogger(BookstoreServlet.class);
 
-    private BookService bookService;
+    private BookstoreService bookstoreService;
 
-    public BookServlet() throws Exception {
-        logger.info("Starting Bookstore Servlet...");
-        try {
-            bookService = new BookService();
-        } catch (BookServiceException e) {
-            logger.error("Failed to instantiate BookService: " + e.getMessage());
-            throw e;
+    public BookstoreServlet(BookstoreService bookstoreService) throws BookstoreServiceException {
+
+        logger.info("Starting User Servlet...");
+
+        if (bookstoreService == null) {
+            logger.error("BookstoreService was not provided.");
+            throw new BookstoreServiceException("A valid book service object is required");
         }
+        this.bookstoreService = bookstoreService;
     }
 
     @Override
@@ -65,10 +66,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books = bookstoreService.getBooks();
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
-        } catch (BookServiceException e) {
+        } catch (BookstoreServiceException e) {
             ctx.setVariable("error", e.getMessage());
             engine.process("error", ctx, resp.getWriter());
         }
diff --git a/src/main/java/com/github/demo/servlet/UserServlet.java b/src/main/java/com/github/demo/servlet/UserServlet.java
new file mode 100644
index 0000000..f1a83fb
--- /dev/null
+++ b/src/main/java/com/github/demo/servlet/UserServlet.java
@@ -0,0 +1,120 @@
+package com.github.demo.servlet;
+
+import com.github.demo.model.Book;
+import com.github.demo.service.BookstoreService;
+import com.github.demo.service.BookstoreServiceException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.thymeleaf.TemplateEngine;
+import org.thymeleaf.context.WebContext;
+import org.thymeleaf.templateresolver.ServletContextTemplateResolver;
+import org.json.JSONStringer;
+import org.json.JSONWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Properties;
+
+public class UserServlet extends HttpServlet {
+
+    private static final long serialVersionUID = 1L;
+
+    private static final Logger logger = LoggerFactory.getLogger(UserServlet.class);
+
+    private BookstoreService bookstoreService;
+
+    public UserServlet(BookstoreService bookstoreService) throws BookstoreServiceException {
+        logger.info("Starting User Servlet...");
+
+        if (bookstoreService == null) {
+            logger.error("BookstoreService was not provided.");
+            throw new BookstoreServiceException("A valid book service object is required");
+        }
+        this.bookstoreService = bookstoreService;
+    }
+
+    @Override
+    public void doPost(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+
+        Properties versionProperties = new Properties();
+        versionProperties.load(getClass().getResourceAsStream("/version.properties"));
+
+        ServletContextTemplateResolver resolver = new ServletContextTemplateResolver(req.getServletContext());
+        resolver.setPrefix("/");
+        resolver.setSuffix(".html");
+
+        TemplateEngine engine = new TemplateEngine();
+        engine.setTemplateResolver(resolver);
+
+        WebContext ctx = new WebContext(req, resp, getServletContext(), req.getLocale());
+        ctx.setVariable("modified", Calendar.getInstance());
+        ctx.setVariable("version", versionProperties.getProperty("version"));
+
+        resp.setContentType("text/html; charset=UTF-8");
+
+
+        logger.info("UserServlet: " + req.getMethod() + " " + req.getRequestURI() + " " + req.getQueryString());
+
+        try {
+            String username = req.getParameter("username");
+            String password = req.getParameter("password");
+
+            logger.info("UserServlet: username=" + username + " password=" + password);
+
+            boolean login = false;
+
+            if (username != null && password != null) {
+                login = bookstoreService.login(username, password);
+                logger.info("UserServlet: login=" + login);
+            }
+
+            if (!login) {
+                logger.info("UserServlet: Invalid username or password");
+
+            } else {
+                logger.info("UserServlet: Login successful");
+            }
+
+            ctx.setVariable("login", login);
+            ctx.setVariable("just_landed", false);
+            engine.process("login", ctx, resp.getWriter());
+
+        } catch (BookstoreServiceException e) {
+            ctx.setVariable("error", e.getMessage());
+            engine.process("error", ctx, resp.getWriter());
+        }
+    }
+
+    @Override
+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+
+        Properties versionProperties = new Properties();
+        versionProperties.load(getClass().getResourceAsStream("/version.properties"));
+
+        ServletContextTemplateResolver resolver = new ServletContextTemplateResolver(req.getServletContext());
+        resolver.setPrefix("/");
+        resolver.setSuffix(".html");
+
+        TemplateEngine engine = new TemplateEngine();
+        engine.setTemplateResolver(resolver);
+
+        WebContext ctx = new WebContext(req, resp, getServletContext(), req.getLocale());
+        ctx.setVariable("modified", Calendar.getInstance());
+        ctx.setVariable("version", versionProperties.getProperty("version"));
+
+        resp.setContentType("text/html; charset=UTF-8");
+
+        ctx.setVariable("login", false);
+        ctx.setVariable("just_landed", true);
+        engine.process("login", ctx, resp.getWriter());
+
+    }
+}
diff --git a/src/main/webapp/static/books.html b/src/main/webapp/static/books.html
index dbba20d..eba6b9b 100644
--- a/src/main/webapp/static/books.html
+++ b/src/main/webapp/static/books.html
@@ -46,14 +46,12 @@
     </div>
     <div class="collapse navbar-collapse" id="myNavbar">
       <ul class="nav navbar-nav">
-        <li><a href="#">Home</a></li>
-        <li><a href="#">Books</a></li>
-        <li class="active"><a href="#">Favorites</a></li>
-        <li><a href="#">Contact</a></li>
+        <li class="active"><a href="/">Home</a></li>
+        <li><a href="/">Books</a></li>
       </ul>
       <ul class="nav navbar-nav navbar-right">
-        <li><a href="#"><span class="glyphicon glyphicon-user"></span> Your Account</a></li>
-        <li><a href="#"><span class="glyphicon glyphicon-shopping-cart"></span> Cart</a></li>
+        <li><a href="/login"><span class="glyphicon glyphicon-user"></span> Your Account</a></li>
+        <li><a href="/login"><span class="glyphicon glyphicon-shopping-cart"></span> Cart</a></li>
       </ul>
     </div>
   </div>
diff --git a/src/main/webapp/static/login.html b/src/main/webapp/static/login.html
new file mode 100644
index 0000000..55ea28d
--- /dev/null
+++ b/src/main/webapp/static/login.html
@@ -0,0 +1,115 @@
+<!DOCTYPE html>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
+<head>
+  <title>Login page</title>
+  <meta charset="utf-8"></meta>
+  <meta name="viewport" content="width=device-width, initial-scale=1"></meta>
+  <link rel="shortcut icon" href="static/images/favicon.ico"/>
+  <link type="text/css" rel="stylesheet" th:href="@{static/bootstrap-3.4.1-dist/css/bootstrap.min.css}"/>
+  <style>
+    html, body {
+      height: 100%;
+    }
+
+    .navbar {
+      margin-bottom: 20px;
+      border-radius: 0;
+    }
+
+    footer {
+      background-color: #f2f2f2; /* #f2f2f2 #ffffff */
+      padding: 25px;
+    }
+
+    .emoji {
+      width: 22px;
+      height: 22px;
+    }
+
+    .thumbnail {
+      border: 0 none;
+      box-shadow: none;
+    }
+  </style>
+</head>
+<body>
+
+  <nav class="navbar navbar-inverse">
+    <div class="container-fluid">
+      <div class="navbar-header">
+        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
+          <span class="icon-bar"></span>
+          <span class="icon-bar"></span>
+          <span class="icon-bar"></span>
+        </button>
+        <a class="navbar-brand" href="#"><img class="emoji" src="/static/images/invertocat.svg" th:alt="#{books.title}"/></a>
+      </div>
+      <div class="collapse navbar-collapse" id="myNavbar">
+        <ul class="nav navbar-nav">
+          <li><a href="/">Home</a></li>
+          <li><a href="/">Books</a></li>
+        </ul>
+        <ul class="nav navbar-nav navbar-right">
+          <li class="active"><a href="/login"><span class="glyphicon glyphicon-user"></span> Your Account</a></li>
+          <li><a href="/login"><span class="glyphicon glyphicon-shopping-cart"></span> Cart</a></li>
+        </ul>
+      </div>
+    </div>
+  </nav>
+
+<div class="container">
+  <div class="row">
+    <div class="col-sm-12 col-md-10 col-md-offset-1">
+
+      <div th:if="${just_landed}" class="alert alert-info" role="alert">
+        You have to login first.
+      </div>
+
+      <div th:if="${not login and not just_landed}" class="alert alert-danger" role="alert">
+        Login failed. Please try again.
+      </div>
+
+      <div th:if="${login and not just_landed}" class="alert alert-success" role="alert">
+        Login successful.
+      </div>
+
+      <div th:if="${just_landed or not login}" class="container">
+        <div class="row">
+          <div class="col-md-4 col-md-offset-4">
+            <form method="POST">
+              <div class="form-group">
+                <label for="username">Username:</label>
+                <input type="text" class="form-control" id="username" name="username">
+              </div>
+              <div class="form-group">
+                <label for="password">Password:</label>
+                <input type="password" class="form-control" id="password" name="password">
+              </div>
+              <button type="submit" class="btn btn-primary">Submit</button>
+            </form>
+          </div>
+        </div>
+      </div>
+
+      <div th:if="${login and not just_landed}" class="text-center">
+        <h1 class="display-4">Welcome, admin!</h1>
+      </div>
+
+
+    </div>
+  </div>
+</div>
+
+<footer class="container-fluid text-center navbar-fixed-bottom">
+  <p>From <img class="emoji" src="/static/images/octocat.png"/> with <img class="emoji" src="/static/images/heart.png"/></p>
+  <form class="form-inline">Get favorites:
+    <input type="email" class="form-control" size="50" placeholder="Email Address"></input>
+    <button type="button" class="btn btn-danger">Sign Up</button>
+  </form>
+  <div>
+    <p th:text="'Version: ' + ${version}"></p>
+  </div>
+</footer>
+
+</body>
+</html>
diff --git a/src/test/java/com/github/demo/service/BookServiceTest.java b/src/test/java/com/github/demo/service/BookstoreServiceTest.java
similarity index 56%
rename from src/test/java/com/github/demo/service/BookServiceTest.java
rename to src/test/java/com/github/demo/service/BookstoreServiceTest.java
index 51e99e3..63ff06d 100644
--- a/src/test/java/com/github/demo/service/BookServiceTest.java
+++ b/src/test/java/com/github/demo/service/BookstoreServiceTest.java
@@ -10,27 +10,27 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Unit test for BookService
+ * Unit test for BookstoreService
  */
-public class BookServiceTest {
+public class BookstoreServiceTest {
 
 
-    private BookService bookService;
+    private BookstoreService bookstoreService;
 
     @Test
-    public void testGetBooks() throws BookServiceException {
-        List<Book> books = bookService.getBooks();
+    public void testGetBooks() throws BookstoreServiceException {
+        List<Book> books = bookstoreService.getBooks();
         assertEquals("list length should be 6", 6, books.size());
     }
 
     @Before
     public void setUp() throws Exception{
-        bookService = new BookService();
+        bookstoreService = new BookstoreService();
     }
 
     @After
     public void tearDown() {
-        bookService = null;
+        bookstoreService = null;
     }
 
 }
