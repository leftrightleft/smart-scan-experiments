diff --git a/cmd/prometheus/main.go b/cmd/prometheus/main.go
index 7aab8a93ef8..6df3d17893b 100644
--- a/cmd/prometheus/main.go
+++ b/cmd/prometheus/main.go
@@ -1472,11 +1472,11 @@ func (s *readyStorage) Snapshot(dir string, withHead bool) error {
 }
 
 // Stats implements the api_v1.TSDBAdminStats interface.
-func (s *readyStorage) Stats(statsByLabelName string) (*tsdb.Stats, error) {
+func (s *readyStorage) Stats(statsByLabelName string, maxNumOfCardinalityRecords) (*tsdb.Stats, error) {
 	if x := s.get(); x != nil {
 		switch db := x.(type) {
 		case *tsdb.DB:
-			return db.Head().Stats(statsByLabelName), nil
+			return db.Head().Stats(statsByLabelName, maxNumOfCardinalityRecords), nil
 		case *agent.DB:
 			return nil, agent.ErrUnsupported
 		default:
diff --git a/tsdb/head.go b/tsdb/head.go
index 8dd15116391..08edb9337fa 100644
--- a/tsdb/head.go
+++ b/tsdb/head.go
@@ -880,8 +880,8 @@ func (h *Head) SetOutOfOrderTimeWindow(oooTimeWindow int64, wbl *wal.WAL) {
 	h.opts.OutOfOrderTimeWindow.Store(oooTimeWindow)
 }
 
-// PostingsCardinalityStats returns top 10 highest cardinality stats By label and value names.
-func (h *Head) PostingsCardinalityStats(statsByLabelName string) *index.PostingsStats {
+// PostingsCardinalityStats returns top n highest cardinality stats by label and value names.
+func (h *Head) PostingsCardinalityStats(statsByLabelName string, maxNumOfRecords int) *index.PostingsStats {
 	h.cardinalityMutex.Lock()
 	defer h.cardinalityMutex.Unlock()
 	currentTime := time.Duration(time.Now().Unix()) * time.Second
@@ -892,7 +892,7 @@ func (h *Head) PostingsCardinalityStats(statsByLabelName string) *index.Postings
 	if h.cardinalityCache != nil {
 		return h.cardinalityCache
 	}
-	h.cardinalityCache = h.postings.Stats(statsByLabelName)
+	h.cardinalityCache = h.postings.Stats(statsByLabelName, maxNumOfRecords)
 	h.lastPostingsStatsCall = time.Duration(time.Now().Unix()) * time.Second
 
 	return h.cardinalityCache
@@ -1228,12 +1228,12 @@ type Stats struct {
 
 // Stats returns important current HEAD statistics. Note that it is expensive to
 // calculate these.
-func (h *Head) Stats(statsByLabelName string) *Stats {
+func (h *Head) Stats(statsByLabelName string, maxNumOfCardinalityRecords int) *Stats {
 	return &Stats{
 		NumSeries:         h.NumSeries(),
 		MaxTime:           h.MaxTime(),
 		MinTime:           h.MinTime(),
-		IndexPostingStats: h.PostingsCardinalityStats(statsByLabelName),
+		IndexPostingStats: h.PostingsCardinalityStats(statsByLabelName, maxNumOfCardinalityRecords),
 	}
 }
 
diff --git a/tsdb/index/postings.go b/tsdb/index/postings.go
index 8df2bccf67e..0f420829beb 100644
--- a/tsdb/index/postings.go
+++ b/tsdb/index/postings.go
@@ -155,8 +155,7 @@ type PostingsStats struct {
 }
 
 // Stats calculates the cardinality statistics from postings.
-func (p *MemPostings) Stats(label string) *PostingsStats {
-	const maxNumOfRecords = 10
+func (p *MemPostings) Stats(label string, maxNumOfRecords int) *PostingsStats {
 	var size uint64
 
 	p.mtx.RLock()
diff --git a/web/api/v1/api.go b/web/api/v1/api.go
index 9ceaa8c3f2d..91d273481c9 100644
--- a/web/api/v1/api.go
+++ b/web/api/v1/api.go
@@ -159,7 +159,7 @@ type TSDBAdminStats interface {
 	CleanTombstones() error
 	Delete(mint, maxt int64, ms ...*labels.Matcher) error
 	Snapshot(dir string, withHead bool) error
-	Stats(statsByLabelName string) (*tsdb.Stats, error)
+	Stats(statsByLabelName string, maxNumOfCardinalityRecords int) (*tsdb.Stats, error)
 	WALReplayStatus() (tsdb.WALReplayStatus, error)
 }
 
@@ -1374,8 +1374,18 @@ func TSDBStatsFromIndexStats(stats []index.Stat) []TSDBStat {
 	return result
 }
 
-func (api *API) serveTSDBStatus(*http.Request) apiFuncResult {
-	s, err := api.db.Stats(labels.MetricName)
+func (api *API) serveTSDBStatus(req *http.Request) apiFuncResult {
+	maxNumOfCardinalityRecords := 10
+	if c := req.FormValue("count"); c != "" {
+		n, err := strconv.ParseInt(count, 10, 64)
+		if err != nil {
+			return apiFuncResult{nil, &apiError{
+				errorBadData, errors.Wrapf(err, "invalid value for \"count\""),
+			}, nil, nil}
+		}
+		maxNumOfCardinalityRecords = int(n)
+	}
+	s, err := api.db.Stats(labels.MetricName, maxNumOfCardinalityRecords)
 	if err != nil {
 		return apiFuncResult{nil, &apiError{errorInternal, err}, nil, nil}
 	}
diff --git a/web/api/v1/api_test.go b/web/api/v1/api_test.go
index d672807d3f8..c790f385db9 100644
--- a/web/api/v1/api_test.go
+++ b/web/api/v1/api_test.go
@@ -2301,7 +2301,7 @@ type fakeDB struct {
 func (f *fakeDB) CleanTombstones() error                               { return f.err }
 func (f *fakeDB) Delete(mint, maxt int64, ms ...*labels.Matcher) error { return f.err }
 func (f *fakeDB) Snapshot(dir string, withHead bool) error             { return f.err }
-func (f *fakeDB) Stats(statsByLabelName string) (_ *tsdb.Stats, retErr error) {
+func (f *fakeDB) Stats(statsByLabelName string, maxNumOfCardinalityRecords int) (_ *tsdb.Stats, retErr error) {
 	dbDir, err := os.MkdirTemp("", "tsdb-api-ready")
 	if err != nil {
 		return nil, err
@@ -2315,7 +2315,7 @@ func (f *fakeDB) Stats(statsByLabelName string) (_ *tsdb.Stats, retErr error) {
 	opts := tsdb.DefaultHeadOptions()
 	opts.ChunkRange = 1000
 	h, _ := tsdb.NewHead(nil, nil, nil, nil, opts, nil)
-	return h.Stats(statsByLabelName), nil
+	return h.Stats(statsByLabelName, maxNumOfCardinalityRecords), nil
 }
 
 func (f *fakeDB) WALReplayStatus() (tsdb.WALReplayStatus, error) {
diff --git a/web/federate_test.go b/web/federate_test.go
index d79a77f1997..afb229a5991 100644
--- a/web/federate_test.go
+++ b/web/federate_test.go
@@ -247,7 +247,7 @@ func (notReadyReadStorage) StartTime() (int64, error) {
 	return 0, errors.Wrap(tsdb.ErrNotReady, "wrap")
 }
 
-func (notReadyReadStorage) Stats(string) (*tsdb.Stats, error) {
+func (notReadyReadStorage) Stats(string, int) (*tsdb.Stats, error) {
 	return nil, errors.Wrap(tsdb.ErrNotReady, "wrap")
 }
 
diff --git a/web/web_test.go b/web/web_test.go
index 7da06a30601..c87ca5cc822 100644
--- a/web/web_test.go
+++ b/web/web_test.go
@@ -52,8 +52,8 @@ type dbAdapter struct {
 	*tsdb.DB
 }
 
-func (a *dbAdapter) Stats(statsByLabelName string) (*tsdb.Stats, error) {
-	return a.Head().Stats(statsByLabelName), nil
+func (a *dbAdapter) Stats(statsByLabelName string, maxNumOfCardinalityRecords int) (*tsdb.Stats, error) {
+	return a.Head().Stats(statsByLabelName, maxNumOfCardinalityRecords), nil
 }
 
 func (a *dbAdapter) WALReplayStatus() (tsdb.WALReplayStatus, error) {
