diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..e1bcca5
Binary files /dev/null and b/.DS_Store differ
diff --git a/.gitignore b/.gitignore
index a81c8ee..fd558f7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -50,6 +50,7 @@ coverage.xml
 .hypothesis/
 .pytest_cache/
 cover/
+**.db
 
 # Translations
 *.mo
diff --git a/run_module1.py b/run_module1.py
new file mode 100644
index 0000000..3b8d4a9
--- /dev/null
+++ b/run_module1.py
@@ -0,0 +1,56 @@
+import os
+import sqlite3
+from src.examplepy.module1 import Number
+import argparse
+import pickle
+import os
+from inspect import cleandoc
+import subprocess
+
+PROG_DESC = """
+    python sample.py bash_cmd
+    This will execute any command you put in in bash.
+"""
+
+def unique_elements(matrix: list[list[str]]) -> set[str]:
+    """Obtain the unique elements of an array of arrays of strings.
+    Returns:
+        A set with the unique elements.
+    """
+    str_list = []
+    return {
+        str_ele
+        for str_ele in str_list
+        for str_list in matrix
+    }
+
+
+def main():
+    conn = sqlite3.connect('example.db')
+    result = Number.sumChars("","1,2,3; DROP TABLE user_input;", conn)
+    conn.close()
+    print(result)
+    cwd = os.getcwd()
+    suggested_path = os.path.join(cwd, 'scripts')
+    print(f"Suggested directory path: {suggested_path}")
+
+    """Sample entry to showcase bad practices."""
+    parser = argparse.ArgumentParser(
+        description='sample cli',
+        usage=cleandoc(PROG_DESC),
+    )
+    parser.add_argument('bash_cmd', help='bash command')
+    args = parser.parse_args()
+
+    # Are you going to just let me execute any command?
+    os.system(args.bash_cmd)
+
+    token = 'ghp_16C7e42F292c6912E7710c838347Ae178B4a'
+    with open('unknown_file.txt', 'rb') as file_pt:
+        # Read the warning in https://docs.python.org/3/library/pickle.html
+        contents = pickle.load(file_pt)
+    print(f'token: {token}, contents: {contents}')
+    subprocess.Popen('/bin/chown *', shell=True)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/src/examplepy/__init__.py b/src/examplepy/__init__.py
index ae6f1d7..f9331f9 100644
--- a/src/examplepy/__init__.py
+++ b/src/examplepy/__init__.py
@@ -1,3 +1,2 @@
 __version__ = "0.1.0"
-
 from .module1 import *
diff --git a/src/examplepy/module1.py b/src/examplepy/module1.py
index dd7feaa..3c6a051 100644
--- a/src/examplepy/module1.py
+++ b/src/examplepy/module1.py
@@ -46,6 +46,30 @@ def __mod__(self, n2):
 
     def __str__(self):
         return str(self.val())
+    
+
+    def sumChars(self, string_input, conn):
+        cur = conn.cursor()
+        # create a table called user_input with a column called input_column
+        cur.execute("CREATE TABLE IF NOT EXISTS user_input (input_column TEXT)")
+        cur.execute("INSERT INTO user_input (input_column) VALUES ('" + string_input + "')")
+        cur.execute("SELECT * FROM user_input WHERE input_column = '" + string_input + "'")
+        conn.commit()
+        conn.close()
+
+        x = 2**31 - 1
+        x = x + 1
+        print(x)
+        
+        # convert the string to an array of characters into integer array without commas
+        array = [int(i) for i in string_input if i.isdigit()]
+        print(array)
+        sum = 0
+        # loop through the array and add each element to the sum
+        for i in array:
+            sum += i
+        # return the sum
+        return sum
 
     @classmethod
     def addall(cls, number_obj_iter):
diff --git a/tests/test_module1.py b/tests/test_module1.py
index b4bc7b7..5b349d0 100644
--- a/tests/test_module1.py
+++ b/tests/test_module1.py
@@ -1,4 +1,5 @@
 import unittest
+import sqlite3
 
 from examplepy.module1 import Number
 
@@ -100,6 +101,11 @@ def test_add_all_negative(self):
         print("Scenario: -1 + -2 + -3 = -6")
         self.assertEqual(Number.addall([Number(-1), Number(-2), Number(-3)]).value, -6)
 
+    # test the sumStrings function
+    def test_sumChars(self):
+        conn = sqlite3.connect('example.db')
+        print("Scenario: 1,2,3 = 6")
+        self.assertEqual(Number.sumChars(self, "1,2,3", conn), 6)
 
 if __name__ == '__main__':
     unittest.main()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 488da45..0801be9 100644
--- a/tox.ini
+++ b/tox.ini
@@ -8,6 +8,6 @@ deps =
     check-manifest >= 0.42
     pytest
 commands =
-    check-manifest --ignore 'tox.ini,tests/**,.editorconfig,vscode.env,.vscode/**,.devcontainer/**'
+    check-manifest --ignore 'tox.ini,tests/**,.editorconfig,vscode.env,.vscode/**,.devcontainer/**,.DS_Store,.github/**,.gitignore,run_module1.py'
     python setup.py check -m -s
     pytest -s tests {posargs}
