diff --git a/src/main/java/com/github/demo/service/BookDatabase.java b/src/main/java/com/github/demo/service/BookDatabase.java
index 6c148ff..e416844 100644
--- a/src/main/java/com/github/demo/service/BookDatabase.java
+++ b/src/main/java/com/github/demo/service/BookDatabase.java
@@ -9,9 +9,11 @@ public interface BookDatabase {
 
     List<Book> getAll() throws BookServiceException;
 
+    List<Book> getBooksByAuthor(String author) throws BookServiceException;
+
     List<Book> getBooksByTitle(String name) throws BookServiceException;
 
     void populate(Collection<Book> books) throws BookServiceException;
 
     void destroy() throws BookServiceException;
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 9023ef5..cadf731 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -103,6 +103,47 @@ public List<Book> getAll() throws BookServiceException {
         return books;
     }
 
+    @Override
+    public List<Book> getBooksByAuthor(String author) throws BookServiceException {
+        List<Book> books = new ArrayList<Book>();
+
+        if (!isValid()) {
+            throw new BookServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
+        Statement stmt = null;
+
+        try {
+            stmt = connection.createStatement();
+            String query = "SELECT * FROM books WHERE author LIKE '%" + author + "%'";
+
+            ResultSet results = stmt.executeQuery(query);
+
+            while (results.next()) {
+                Book book = new Book(
+                    results.getString("author"),
+                    results.getString("title"),
+                    results.getString("image")
+                );
+                books.add(book);
+            }
+        } catch (SQLException e) {
+            logger.error("Failed while searching for {}'", author);
+            throw new BookServiceException(e);
+        } finally {
+            try {
+                if (stmt != null) {
+                    stmt.close();
+                }
+            } catch (SQLException se) {
+                // Do nothing
+            } finally {
+                stmt = null;
+            }
+        }
+        return books;
+    }
+
     @Override
     public List<Book> getBooksByTitle(String name) throws BookServiceException {
         List<Book> books = new ArrayList<Book>();
diff --git a/src/main/java/com/github/demo/service/BookService.java b/src/main/java/com/github/demo/service/BookService.java
index ff417b6..f8534eb 100644
--- a/src/main/java/com/github/demo/service/BookService.java
+++ b/src/main/java/com/github/demo/service/BookService.java
@@ -27,4 +27,8 @@ public List<Book> getBooks() throws BookServiceException {
     public List<Book> searchBooks(String name) throws BookServiceException {
         return this.booksDatabase.getBooksByTitle(name);
     }
-}
\ No newline at end of file
+
+    public List<Book> searchBooksByAuthor(String author) throws BookServiceException {
+        return this.booksDatabase.getBooksByAuthor(author);
+    }
+}
diff --git a/src/main/java/com/github/demo/service/CloseWriter.java b/src/main/java/com/github/demo/service/CloseWriter.java
new file mode 100644
index 0000000..1e9e391
--- /dev/null
+++ b/src/main/java/com/github/demo/service/CloseWriter.java
@@ -0,0 +1,12 @@
+package com.github.demo.service;
+
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import java.io.IOException;
+
+public class CloseWriter {
+	public void startWrite() throws IOException {
+		BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\test.txt"));
+		bw.write("Hello world!");
+	}
+}
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..80a66eb 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -3,6 +3,7 @@
 import com.github.demo.model.Book;
 import com.github.demo.service.BookService;
 import com.github.demo.service.BookServiceException;
+import com.github.demo.service.CloseWriter;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -65,7 +66,23 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String titleterm = req.getParameter("title");
+            String authorterm = req.getParameter("title");
+            if (titleterm != null) {
+                books = bookService.searchBooks(titleterm);
+            } else if (authorterm != null) {
+                books = bookService.searchBooksByAuthor(titleterm);
+            } else {
+                books = bookService.getBooks();
+            }
+
+            if(books.isEmpty()) {
+                CloseWriter closeWriter = new CloseWriter();
+                closeWriter.startWrite();
+            }
+
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
