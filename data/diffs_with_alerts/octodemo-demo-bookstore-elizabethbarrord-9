diff --git a/src/main/java/com/github/demo/service/BookDatabase.java b/src/main/java/com/github/demo/service/BookDatabase.java
index 6c148ff..17e0ce9 100644
--- a/src/main/java/com/github/demo/service/BookDatabase.java
+++ b/src/main/java/com/github/demo/service/BookDatabase.java
@@ -11,6 +11,8 @@ public interface BookDatabase {
 
     List<Book> getBooksByTitle(String name) throws BookServiceException;
 
+    List<Book> getBooksByAuthor(String author) throws BookServiceException;
+
     void populate(Collection<Book> books) throws BookServiceException;
 
     void destroy() throws BookServiceException;
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 9023ef5..f97879b 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -144,6 +144,47 @@ public List<Book> getBooksByTitle(String name) throws BookServiceException {
         return books;
     }
 
+    @Override
+    public List<Book> getBooksByAuthor(String author) throws BookServiceException {
+        List<Book> books = new ArrayList<Book>();
+
+        if (!isValid()) {
+            throw new BookServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
+        Statement stmt = null;
+
+        try {
+            stmt = connection.createStatement();
+            String query = "SELECT * FROM books WHERE author LIKE '%" + author + "%'";
+
+            ResultSet results = stmt.executeQuery(query);
+
+            while (results.next()) {
+                Book book = new Book(
+                    results.getString("author"),
+                    results.getString("title"),
+                    results.getString("image")
+                );
+                books.add(book);
+            }
+        } catch (SQLException e) {
+            logger.error("Failed while searching for {}'", author);
+            throw new BookServiceException(e);
+        } finally {
+            try {
+                if (stmt != null) {
+                    stmt.close();
+                }
+            } catch (SQLException se) {
+                // Do nothing
+            } finally {
+                stmt = null;
+            }
+        }
+        return books;
+    }
+
     @Override
     public void destroy() {
         try {
diff --git a/src/main/java/com/github/demo/service/BookService.java b/src/main/java/com/github/demo/service/BookService.java
index ff417b6..d44f28a 100644
--- a/src/main/java/com/github/demo/service/BookService.java
+++ b/src/main/java/com/github/demo/service/BookService.java
@@ -25,6 +25,6 @@ public List<Book> getBooks() throws BookServiceException {
     }
 
     public List<Book> searchBooks(String name) throws BookServiceException {
-        return this.booksDatabase.getBooksByTitle(name);
+        return this.booksDatabase.getBooksByAuthor(name);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..539a91a 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -65,7 +65,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String searchTerm = req.getParameter("author");
+            if (searchTerm != null) {
+                books = bookService.searchBooks(searchTerm);
+            } else {
+                books = bookService.getBooks();
+            }
+
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
