diff --git a/.devcontainer/copilot-cli.sh b/.devcontainer/copilot-cli.sh
deleted file mode 100755
index 6304320..0000000
--- a/.devcontainer/copilot-cli.sh
+++ /dev/null
@@ -1,17 +0,0 @@
-# Description: Installs the GitHub Copilot CLI
-# Author: @colindembovsky
-
-#!/bin/bash
-# install nvm
-sudo apt-get install build-essential libssl-dev curl git-core -y
-curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
-
-export NVM_DIR="/usr/local/share/nvm"
-[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
-
-# install node
-nvm install v19.8.1
-
-# install copilot cli
-npm install -g @githubnext/github-copilot-cli
-echo "eval \"\$(github-copilot-cli alias -- \"\$0\")\"" >> ~/.bashrc
\ No newline at end of file
diff --git a/.devcontainer/devcontainer.json b/.devcontainer/devcontainer.json
index 4441de0..aec2038 100644
--- a/.devcontainer/devcontainer.json
+++ b/.devcontainer/devcontainer.json
@@ -16,45 +16,36 @@
       "onAutoForward": "notify"
     }
   },
-  "customizations": {
-    "vscode": {
-      "extensions": [
-        "ms-azuretools.vscode-docker",
-        "redhat.java",
-        "vscjava.vscode-maven",
-        "vscjava.vscode-java-debug",
-        "vscjava.vscode-java-dependency",
-        "vscjava.vscode-java-test",
-        "dgileadi.java-decompiler",
-        "redhat.vscode-xml",
-        "redhat.vscode-yaml",
-        "GitHub.copilot-nightly",
-        "GitHub.copilot-chat"
-      ],
-
-      "settings": {
-        "terminal.integrated.profiles.linux": {
-          "bash": {
-            "path": "bash",
-            "icon": "terminal-bash"
-          }
-        },
-        "java.project.importOnFirstTimeStartup": "automatic",
-        "java.configuration.updateBuildConfiguration": "automatic",
-        "java.server.launchMode": "Standard",
-        "java.test.message.hintForSetingDefaultConfig": false,
-        "maven.pomfile.autoUpdateEffectivePOM": true,
-
-        "telemetry.enableTelemetry": false,
-        "telemetry.telemetryLevel": "off",
-        "redhat.telemetry.enabled": false,
-
-        "extensions.ignoreRecommendations": true,
+  "extensions": [
+    "ms-azuretools.vscode-docker",
+    "redhat.java",
+    "vscjava.vscode-maven",
+    "vscjava.vscode-java-debug",
+    "vscjava.vscode-java-dependency",
+    "vscjava.vscode-java-test",
+    "dgileadi.java-decompiler",
+    "redhat.vscode-xml",
+    "redhat.vscode-yaml",
+    "GitHub.copilot",
+    "GitHub.copilot-labs"    
+  ],
+  "settings": {
+    "terminal.integrated.profiles.linux": {
+      "bash": {
+        "path": "bash",
+        "icon": "terminal-bash"
       }
-    }
+    },
+    "java.project.importOnFirstTimeStartup": "automatic",
+    "java.configuration.updateBuildConfiguration": "automatic",
+    "java.server.launchMode": "Standard",
+    "java.test.message.hintForSetingDefaultConfig": false,
+    "maven.pomfile.autoUpdateEffectivePOM": true,
+    "telemetry.enableTelemetry": false,
+    "extensions.ignoreRecommendations": true
   },
-  "postCreateCommand": "./.devcontainer/copilot-cli.sh && mvn compile",
-
+  "postCreateCommand": "mvn compile",
+  
   // https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/setting-a-minimum-specification-for-codespace-machines
   "hostRequirements": {
     "cpus": 4,
diff --git a/.devcontainer/docker-compose.yml b/.devcontainer/docker-compose.yml
index 7b0b521..8c14677 100644
--- a/.devcontainer/docker-compose.yml
+++ b/.devcontainer/docker-compose.yml
@@ -3,11 +3,19 @@ version: '3.8'
 
 services:
   dev:
-    image: ghcr.io/octodemo/development-containers/java:base-20230620
+    image: ghcr.io/octodemo/container-java-development:azure-20220628
     command: sleep infinity
     network_mode: host
 
     volumes:
       - type: bind
         source: /var/run/docker.sock
-        target: /var/run/docker.sock
\ No newline at end of file
+        target: /var/run/docker.sock
+
+      - type: bind
+        source: /usr/bin/docker
+        target: /usr/bin/docker
+
+      - type: bind
+        source: /usr/local/bin/docker-compose
+        target: /usr/local/bin/docker-compose
diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
index 4bda804..965702d 100644
--- a/.github/PULL_REQUEST_TEMPLATE.md
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -1,15 +1,8 @@
-Hello!
+Hello :wave:
 
-copilot:emoji
+This pull request fixes #<issue>. The changes consist of the following:
+ -
+ -
 
-## Summary
-copilot:summary
 
-## Details
-copilot:walkthrough
-
-## Poem
-copilot:poem
-
-## Finally
-Please proceed with a review as soon as the status checks are valid.
\ No newline at end of file
+Please proceed with a review as soon as the status checks are valid.
diff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml
new file mode 100644
index 0000000..aef548f
--- /dev/null
+++ b/.github/workflows/codeql.yml
@@ -0,0 +1,41 @@
+name: Code scanning
+
+on:
+  push:
+  # Build all the branches here as we want SARFIF feedback in Codespaces
+  #    branches:
+  #      - main
+  pull_request:
+    branches:
+      - main
+
+jobs:
+  build:
+    name: CodeQL Code Scanning
+    runs-on: ubuntu-22.04
+
+    steps:
+      - name: Checkout Source
+        uses: actions/checkout@v3
+
+      - name: Set up JDK
+        uses: actions/setup-java@v3
+        with:
+          java-version: 11
+          java-package: jdk
+          distribution: microsoft
+          # Using the integrated cache functionality to speed up builds
+          cache: maven
+
+      - name: Initialize CodeQL Scanning
+        uses: github/codeql-action/init@v2
+        with:
+          languages: java
+
+      # We are using a custom build step to have greater control over the build process over using autobuild
+      - name: Custom Build Step
+        run: mvn compile -B
+        shell: bash
+
+      - name: Perform CodeQL Analysis
+        uses: github/codeql-action/analyze@v2
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
index e378cc0..a2a7edb 100644
--- a/.vscode/tasks.json
+++ b/.vscode/tasks.json
@@ -146,8 +146,7 @@
       "default": "book-star-rating",
       "options": [
         "book-star-rating",
-        "book-search",
-        "book-search-pr"
+        "book-search"
       ]
     },
 
@@ -168,4 +167,4 @@
       "description": "Provide a feature branch name or leave blank to use default"
     }
   ]
-}
\ No newline at end of file
+}
diff --git a/patches/book-search-pr/patches.tgz b/patches/book-search-pr/patches.tgz
deleted file mode 100644
index e792aa2..0000000
Binary files a/patches/book-search-pr/patches.tgz and /dev/null differ
diff --git a/pom.xml b/pom.xml
index ea78c8e..72afb2e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -117,7 +117,7 @@
                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-compiler-plugin</artifactId>
-                    <version>3.11.0</version>
+                    <version>3.8.1</version>
                     <configuration>
                         <!-- To enable debug compilation use the maven.compiler.debug user property -->
                         <source>${java.version}</source>
@@ -128,7 +128,7 @@
                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-resources-plugin</artifactId>
-                    <version>3.3.1</version>
+                    <version>3.1.0</version>
                 </plugin>
 
                 <plugin>
diff --git a/src/main/java/com/github/demo/service/BookDatabase.java b/src/main/java/com/github/demo/service/BookDatabase.java
index a9a416f..6c148ff 100644
--- a/src/main/java/com/github/demo/service/BookDatabase.java
+++ b/src/main/java/com/github/demo/service/BookDatabase.java
@@ -9,6 +9,8 @@ public interface BookDatabase {
 
     List<Book> getAll() throws BookServiceException;
 
+    List<Book> getBooksByTitle(String name) throws BookServiceException;
+
     void populate(Collection<Book> books) throws BookServiceException;
 
     void destroy() throws BookServiceException;
diff --git a/src/main/java/com/github/demo/service/BookDatabaseImpl.java b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
index 3767b9e..4bf6339 100644
--- a/src/main/java/com/github/demo/service/BookDatabaseImpl.java
+++ b/src/main/java/com/github/demo/service/BookDatabaseImpl.java
@@ -103,6 +103,47 @@ public List<Book> getAll() throws BookServiceException {
         return books;
     }
 
+    @Override
+    public List<Book> getBooksByTitle(String name) throws BookServiceException {
+        List<Book> books = new ArrayList<Book>();
+
+        if (!isValid()) {
+            throw new BookServiceException("Database connection is not valid, check logs for failure details.");
+        }
+
+        Statement stmt = null;
+
+        try {
+            stmt = connection.createStatement();
+            String query = "SELECT * FROM books WHERE title LIKE '%" + name + "%'";
+
+            ResultSet results = stmt.executeQuery(query);
+
+            while (results.next()) {
+                Book book = new Book(
+                    results.getString("author"),
+                    results.getString("title"),
+                    results.getString("image")
+                );
+                books.add(book);
+            }
+        } catch (SQLException e) {
+            logger.error("Failed while searching for {}'", name);
+            throw new BookServiceException(e);
+        } finally {
+            try {
+                if (stmt != null) {
+                    stmt.close();
+                }
+            } catch (SQLException se) {
+                // Do nothing
+            } finally {
+                stmt = null;
+            }
+        }
+        return books;
+    }
+
     @Override
     public void destroy() {
         try {
@@ -184,27 +225,35 @@ private Connection getConnection(String url, Properties props) throws BookServic
         int retryCount = 0;
         int maxRetries = getMaxRetries();
 
+        // Log the database connection URL
         logger.debug("Connecting to database: " + url);
 
+        // Loop until we connect to the database or run out of retries
         do {
             try {
+                // Try to connect to the database
                 connection = DriverManager.getConnection(url, props);
             } catch (SQLException e) {
+                // We failed to connect - try again, but only up to maxRetries times
                 retryCount++;
 
+                // Log the failure
                 logger.warn("Failed to connect to database, reties: " + retryCount);
                 logger.warn(e.getMessage());
 
                 try {
+                    // Sleep for a bit before retrying
                     logger.info("Backing off before retrying database connection for " + RETRY_BACKOFF + "ms.");
                     Thread.sleep(RETRY_BACKOFF);
                 } catch (InterruptedException e1) {
+                    // Log the failure
                     logger.error("Failed to sleep: " + e1.getMessage());
                 }
             }
         }
         while (connection == null && retryCount < maxRetries);
 
+        // Log whether we succeeded in connecting
         logger.info("Database Connection successful? " + (connection != null));
         return connection;
     }
diff --git a/src/main/java/com/github/demo/service/BookService.java b/src/main/java/com/github/demo/service/BookService.java
index 79f3d9e..ff417b6 100644
--- a/src/main/java/com/github/demo/service/BookService.java
+++ b/src/main/java/com/github/demo/service/BookService.java
@@ -23,4 +23,8 @@ public BookService() throws BookServiceException {
     public List<Book> getBooks() throws BookServiceException {
         return this.booksDatabase.getAll();
     }
+
+    public List<Book> searchBooks(String name) throws BookServiceException {
+        return this.booksDatabase.getBooksByTitle(name);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/github/demo/servlet/BookServlet.java b/src/main/java/com/github/demo/servlet/BookServlet.java
index 626765c..6dace96 100644
--- a/src/main/java/com/github/demo/servlet/BookServlet.java
+++ b/src/main/java/com/github/demo/servlet/BookServlet.java
@@ -65,7 +65,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         resp.setContentType("text/html; charset=UTF-8");
 
         try {
-            List<Book> books = bookService.getBooks();
+            List<Book> books;
+
+            String searchTerm = req.getParameter("title");
+            if (searchTerm != null) {
+                books = bookService.searchBooks(searchTerm);
+            } else {
+                books = bookService.getBooks();
+            }
+
             ctx.setVariable("books", books);
             engine.process("books", ctx, resp.getWriter());
         } catch (BookServiceException e) {
