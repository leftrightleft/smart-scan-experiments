diff --git a/Pipfile b/Pipfile
new file mode 100644
index 0000000..cfe04db
--- /dev/null
+++ b/Pipfile
@@ -0,0 +1,13 @@
+[[source]]
+url = "https://pypi.org/simple"
+verify_ssl = true
+name = "pypi"
+
+[packages]
+flask = "*"
+python-dotenv = "*"
+
+[dev-packages]
+
+[requires]
+python_version = "3.8"
\ No newline at end of file
diff --git a/main.py b/main.py
deleted file mode 100644
index 11b15b1..0000000
--- a/main.py
+++ /dev/null
@@ -1 +0,0 @@
-print("hello")
diff --git a/server/__init__.py b/server/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/server/__main__.py b/server/__main__.py
new file mode 100644
index 0000000..b81a2e3
--- /dev/null
+++ b/server/__main__.py
@@ -0,0 +1,38 @@
+import os
+import sys
+sys.path.append('.')
+
+from server.webapp import flaskapp, database, cursor, TEMPLATES
+from server.models import *
+from server.routes import *
+
+default_books = [
+    ("The Hobbit", "JRR Tolkien", True),
+    ("The Fellowship of the Ring", "JRR Tolkien", True),
+    ("The Eye of the World", "Robert Jordan", False),
+    ("A Game of Thrones", "George R. R. Martin", True),
+    ("The Way of Kings", "Brandon Sanderson", False)
+]
+
+env_token = "TOKEN"
+
+
+if __name__ == "__main__":
+    cursor.execute(
+        '''CREATE TABLE books (name text, author text, read text)'''
+    )
+
+    for bookname, bookauthor, hasread in default_books:
+        try:
+            cursor.execute(
+                'INSERT INTO books values (?, ?, ?)',
+                (bookname, bookauthor, 'true' if hasread else 'false')
+            )
+
+        except Exception as err:
+            print(f'[!] Error Occurred: {err}')
+
+    flaskapp.run('0.0.0.0', debug=bool(os.environ.get('DEBUG', False)))
+    
+    cursor.close()
+    database.close()
\ No newline at end of file
diff --git a/server/models/__init__.py b/server/models/__init__.py
new file mode 100644
index 0000000..403c84d
--- /dev/null
+++ b/server/models/__init__.py
@@ -0,0 +1 @@
+from server.models.books import Book
\ No newline at end of file
diff --git a/server/models/books.py b/server/models/books.py
new file mode 100644
index 0000000..18c0551
--- /dev/null
+++ b/server/models/books.py
@@ -0,0 +1,8 @@
+
+from dataclasses import dataclass
+
+@dataclass
+class Book():
+    name: str
+    author: str
+    read: bool
\ No newline at end of file
diff --git a/server/routes.py b/server/routes.py
new file mode 100644
index 0000000..d6087dc
--- /dev/null
+++ b/server/routes.py
@@ -0,0 +1,30 @@
+
+from flask import request, render_template, make_response
+
+from server.webapp import flaskapp, cursor
+from server.models import Book
+
+
+@flaskapp.route('/')
+def index():
+    name = request.args.get('name')
+    author = request.args.get('author')
+    read = bool(request.args.get('read'))
+
+    if name:
+        cursor.execute(
+            "SELECT * FROM books WHERE name LIKE '%" + name + "%'"
+        )
+        books = [Book(*row) for row in cursor]
+
+    elif author:
+        cursor.execute(
+            "SELECT * FROM books WHERE author LIKE '%" + author + "%'"
+        )
+        books = [Book(*row) for row in cursor]
+
+    else:
+        cursor.execute("SELECT name, author, read FROM books")
+        books = [Book(*row) for row in cursor]
+
+    return render_template('books.html', books=books)
\ No newline at end of file
diff --git a/server/webapp.py b/server/webapp.py
new file mode 100644
index 0000000..8ceefb1
--- /dev/null
+++ b/server/webapp.py
@@ -0,0 +1,16 @@
+import os
+import sqlite3
+
+from flask import Flask
+
+
+ROOT = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
+TEMPLATES = os.path.join(ROOT, 'templates')
+
+flaskapp = Flask("BookStore", template_folder=TEMPLATES)
+flaskapp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
+
+database_uri = os.environ.get('SQLITE_URI', ':memory:')
+
+database = sqlite3.connect(database_uri, check_same_thread=False)
+cursor = database.cursor()
\ No newline at end of file
