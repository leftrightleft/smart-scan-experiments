diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index d251fc56a9e..99a13530597 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -63,6 +63,7 @@ Contributors:
 * Richard Pijnenburg (electrical)
 * James Turnbull (jamesturnbull)
 * Neil Prosser (neilprosser)
+* Alex Dean (alexdean)
 
 Note: If you've sent me patches, bug reports, or otherwise contributed to
 logstash, and you aren't on the list above and want to be, please let me know
diff --git a/lib/logstash/outputs/redis.rb b/lib/logstash/outputs/redis.rb
index 5394f28d3bd..c803aad3bcc 100644
--- a/lib/logstash/outputs/redis.rb
+++ b/lib/logstash/outputs/redis.rb
@@ -1,11 +1,14 @@
 require "logstash/outputs/base"
 require "logstash/namespace"
+require "stud/buffer"
 
 # send events to a redis database using RPUSH
 #
 # For more information about redis, see <http://redis.io/>
 class LogStash::Outputs::Redis < LogStash::Outputs::Base
 
+  include Stud::Buffer
+
   config_name "redis"
   plugin_status "beta"
 
@@ -69,7 +72,6 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # when there are pending events to flush.
   config :batch_timeout, :validate => :number, :default => 5
 
-  public
   def register
     require 'redis'
 
@@ -91,20 +93,18 @@ def register
     end
     # end TODO
 
-    @pending = Hash.new { |h, k| h[k] = [] }
-    @last_pending_flush = Time.now.to_f
-    if @batch and @data_type != "list"
-      raise RuntimeError.new(
-        "batch is not supported with data_type #{@data_type}"
-      )
-    end
 
     if @batch
-      @flush_thread = Thread.new do
-        while sleep(@batch_timeout) do
-          process_pending(true)
-        end
+      if @data_type != "list"
+        raise RuntimeError.new(
+          "batch is not supported with data_type #{@data_type}"
+        )
       end
+      buffer_initialize(
+        :max_items => @batch_events,
+        :max_interval => @batch_timeout,
+        :logger => @logger
+      )
     end
 
     @redis = nil
@@ -112,46 +112,14 @@ def register
         @host.shuffle!
     end
     @host_idx = 0
-    @pending_mutex = Mutex.new
   end # def register
 
-  private
-  def connect
-    @current_host, @current_port = @host[@host_idx].split(':')
-    @host_idx = @host_idx + 1 >= @host.length ? 0 : @host_idx + 1
-
-    if not @current_port
-        @current_port = @port
-    end
-
-    params = {
-      :host => @current_host,
-      :port => @current_port,
-      :timeout => @timeout,
-      :db => @db
-    }
-    @logger.debug(params)
-
-    if @password
-      params[:password] = @password.value
-    end
-
-    Redis.new(params)
-  end # def connect
-
-  # A string used to identify a redis instance in log messages
-  private
-  def identity
-    @name || "redis://#{@password}@#{@current_host}:#{@current_port}/#{@db} #{@data_type}:#{@key}"
-  end
-
-  public
   def receive(event)
     return unless output?(event)
 
     if @batch
-      @pending[event.sprintf(@key)] << event.to_json
-      process_pending
+      # Stud::Buffer
+      buffer_receive(event.to_json, event.sprintf(@key))
       return
     end
 
@@ -174,52 +142,58 @@ def receive(event)
     end
   end # def receive
 
-  private
-  def process_pending(force=false)
-    if !@pending_mutex.try_lock # failed to get lock
-      return
-    end
-
-    pending_count = 0
-    @pending.each { |k, v| pending_count += v.length }
-    time_since_last_flush = Time.now.to_f - @last_pending_flush
-
-    if (force && pending_count > 0) ||
-       (pending_count >= @batch_events) ||
-       (time_since_last_flush >= @batch_timeout && pending_count > 0)
-      @logger.debug("Flushing redis output",
-                    :pending_count => pending_count,
-                    :time_since_last_flush => time_since_last_flush,
-                    :batch_events => @batch_events,
-                    :batch_timeout => @batch_timeout,
-                    :force => force)
-      begin
-        @redis ||= connect
-        @pending.each do |k, v|
-          @redis.rpush(k, v)
-          @pending.delete(k)
-        end
-        @last_pending_flush = Time.now.to_f
-      rescue => e
-        @logger.warn("Failed to send backlog of events to redis",
-                     :pending_count => pending_count,
-                     :identity => identity, :exception => e,
-                     :backtrace => e.backtrace)
-        sleep 1
-        retry
-      end
-    end
-
-    @pending_mutex.unlock
+  # called from Stud::Buffer#buffer_flush when there are events to flush
+  def flush(events, key)
+    @redis ||= connect
+    @redis.rpush(key, events)
+  end
+  # called from Stud::Buffer#buffer_flush when an error occurs
+  def on_flush_error(e)
+    @logger.warn("Failed to send backlog of events to redis",
+      :identity => identity,
+      :exception => e,
+      :backtrace => e.backtrace
+    )
+    @redis = connect
   end
 
-  public
   def teardown
-    process_pending(true)
+    if @batch
+      buffer_flush(:final => true)
+    end
     if @data_type == 'channel' and @redis
       @redis.quit
       @redis = nil
     end
   end
 
+  private
+  def connect
+    @current_host, @current_port = @host[@host_idx].split(':')
+    @host_idx = @host_idx + 1 >= @host.length ? 0 : @host_idx + 1
+
+    if not @current_port
+      @current_port = @port
+    end
+
+    params = {
+      :host => @current_host,
+      :port => @current_port,
+      :timeout => @timeout,
+      :db => @db
+    }
+    @logger.debug(params)
+
+    if @password
+      params[:password] = @password.value
+    end
+
+    Redis.new(params)
+  end # def connect
+
+  # A string used to identify a redis instance in log messages
+  def identity
+    @name || "redis://#{@password}@#{@current_host}:#{@current_port}/#{@db} #{@data_type}:#{@key}"
+  end
+
 end
diff --git a/spec/outputs/redis.rb b/spec/outputs/redis.rb
index 7f1bb88da65..2a3edf04064 100644
--- a/spec/outputs/redis.rb
+++ b/spec/outputs/redis.rb
@@ -76,6 +76,55 @@
     end # agent
   end
 
+  describe "batch mode" do
+    key = 10.times.collect { rand(10).to_s }.join("")
+    event_count = 200000
+
+    config <<-CONFIG
+      input {
+        generator {
+          message => "hello world"
+          count => #{event_count}
+          type => "generator"
+        }
+      }
+      output {
+        redis {
+          host => "127.0.0.1"
+          key => "#{key}"
+          data_type => list
+          batch => true
+          batch_timeout => 5
+          timeout => 5
+        }
+      }
+    CONFIG
+
+    agent do
+      # we have to wait for teardown to execute & flush the last batch.
+      # otherwise we might start doing assertions before everything has been
+      # sent out to redis.
+      sleep 2
+
+      redis = Redis.new(:host => "127.0.0.1")
+
+      # The list should contain the number of elements our agent pushed up.
+      insist { redis.llen(key) } == event_count
+
+      # Now check all events for order and correctness.
+      event_count.times do |value|
+        id, element = redis.blpop(key, 0)
+        event = LogStash::Event.new(JSON.parse(element))
+        insist { event["sequence"] } == value
+        insist { event.message } == "hello world"
+        insist { event.type } == "generator"
+      end
+
+      # The list should now be empty
+      insist { redis.llen(key) } == 0
+    end # agent
+  end
+
   describe "converts US-ASCII to utf-8 without failures" do
     key = 10.times.collect { rand(10).to_s }.join("")
 
