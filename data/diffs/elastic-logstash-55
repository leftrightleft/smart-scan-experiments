diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index 79cdf129b77..035edc85fd2 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -52,6 +52,7 @@ def initialize
     @filters = []
 
     @plugin_paths = []
+    @reloading = false
 
     # Add logstash's plugin path (plugin paths must contain inputs, outputs, filters)
     @plugin_paths << File.dirname(__FILE__)
@@ -85,7 +86,7 @@ def options(opts)
       @config_string = arg
     end # -e
 
-    opts.on("-d", "--daemonize", "Daemonize (default is run in foreground)") do 
+    opts.on("-d", "--daemonize", "Daemonize (default is run in foreground)") do
       @daemonize = true
     end
 
@@ -144,7 +145,7 @@ def parse_options(args)
     plugins = []
     args.each do |arg|
       # skip things that don't look like plugin flags
-      next unless arg =~ /^--[A-z0-9]+-/ 
+      next unless arg =~ /^--[A-z0-9]+-/
       name = arg.split("-")[2]  # pull the plugin name out
 
       # Try to load any plugin by that name
@@ -175,15 +176,15 @@ def parse_options(args)
         #@logger.fatal("Flag #{arg.inspect} requires plugin #{name}, but no plugin found.")
         #return false
       #end
-    end # @remaining_args.each 
-   
+    end # @remaining_args.each
+
     begin
       remainder = @opts.parse(args)
     rescue OptionParser::InvalidOption => e
       @logger.info e
       raise e
     end
- 
+
     return remainder
   end # def parse_options
 
@@ -231,19 +232,7 @@ def configure
     end
   end # def configure
 
-  public
-  def run(args, &block)
-    LogStash::Util::set_thread_name(self.class.name)
-    register_signal_handlers
-
-    remaining = parse_options(args)
-    if remaining == false
-      raise "Option parsing failed. See error log."
-    end
-
-    configure
-
-    # Load the config file
+  def read_config
     if @config_path
       # Support directory of config files.
       # https://logstash.jira.com/browse/LOGSTASH-106
@@ -266,22 +255,14 @@ def run(args, &block)
       config = LogStash::Config::File.new(nil, @config_string)
     end
     config.logger = @logger
-
-    @thread = Thread.new do
-      run_with_config(config, &block)
-    end
-
-    return remaining
-  end # def run
-
-  public
-  def wait
-    @thread.join
-    return 0
-  end # def wait
-
-  public
-  def run_with_config(config)
+    config
+  end
+
+  # Parses a config and returns [inputs, filters, outputs]
+  def parse_config(config)
+    inputs = []
+    filters = []
+    outputs = []
     config.parse do |plugin|
       # 'plugin' is a has containing:
       #   :type => the base class of the plugin (LogStash::Inputs::Base, etc)
@@ -297,91 +278,147 @@ def run_with_config(config)
 
       case type
         when "input"
-          @inputs << instance
+          inputs << instance
         when "filter"
-          @filters << instance
+          filters << instance
         when "output"
-          @outputs << instance
+          outputs << instance
         else
-          @logger.error("Unknown config type '#{type}'")
-          exit 1
+          msg = "Unknown config type '#{type}'"
+          @logger.error(msg)
+          raise msg
       end # case type
     end # config.parse
+    return inputs, filters, outputs
+  end
 
-    # If we are given a config string (run usually with 'agent -e "some config string"')
-    # then set up some defaults.
-    if @config_string
-      require "logstash/inputs/stdin"
-      require "logstash/outputs/stdout"
-
-      # set defaults if necessary
-      
-      # All filters default to 'stdin' type
-      @filters.each do |filter|
-        filter.type = "stdin" if filter.type.nil?
-      end
-      
-      # If no inputs are specified, use stdin by default.
-      @inputs = [LogStash::Inputs::Stdin.new("type" => [ "stdin" ])] if @inputs.length == 0
 
-      # If no outputs are specified, use stdout in debug mode.
-      @outputs = [LogStash::Outputs::Stdout.new("debug" => [ "true" ])] if @outputs.length == 0
+
+  public
+  def run(args, &block)
+    LogStash::Util::set_thread_name(self.class.name)
+    register_signal_handlers
+
+    remaining = parse_options(args)
+    if remaining == false
+      raise "Option parsing failed. See error log."
     end
 
-    if @inputs.length == 0 or @outputs.length == 0
-      raise "Must have both inputs and outputs configured."
+    configure
+
+    # Load the config file
+    config = read_config
+
+    @thread = Thread.new do
+      run_with_config(config, &block)
     end
 
-    # NOTE(petef) we should use a SizedQueue here (w/config params for size)
-    filter_queue = SizedQueue.new(10)
-    output_queue = LogStash::MultiQueue.new
+    return remaining
+  end # def run
 
-    @ready_queue = Queue.new
+  public
+  def wait
+    @thread.join
+    return 0
+  end # def wait
 
+  private
+  def start_input(input)
+    @logger.debug(["Starting input", input])
     # inputs should write directly to output queue if there are no filters.
-    input_target = @filters.length > 0 ? filter_queue : output_queue
-    # Start inputs
-    @inputs.each do |input|
-      @logger.debug(["Starting input", input])
-      @plugins[input] = Thread.new(input, input_target) do |*args|
-        run_input(*args)
+    input_target = @filters.length > 0 ? @filter_queue : @output_queue
+    @plugins[input] = Thread.new(input, input_target) do |*args|
+      run_input(*args)
+    end
+  end
+
+  private
+  def start_output(output)
+    @logger.debug(["Starting output", output])
+    queue = SizedQueue.new(10)
+    @output_queue.add_queue(queue)
+    @output_plugin_queues[output] = queue
+    @plugins[output] = Thread.new(output, queue) do |*args|
+      run_output(*args)
+    end
+  end
+
+
+  public
+  def run_with_config(config)
+    @plugins_mutex.synchronize do
+      @inputs, @filters, @outputs = parse_config(config)
+
+      # If we are given a config string (run usually with 'agent -e "some config string"')
+      # then set up some defaults.
+      if @config_string
+        require "logstash/inputs/stdin"
+        require "logstash/outputs/stdout"
+
+        # set defaults if necessary
+
+        # All filters default to 'stdin' type
+        @filters.each do |filter|
+          filter.type = "stdin" if filter.type.nil?
+        end
+
+        # If no inputs are specified, use stdin by default.
+        @inputs = [LogStash::Inputs::Stdin.new("type" => [ "stdin" ])] if @inputs.length == 0
+
+        # If no outputs are specified, use stdout in debug mode.
+        @outputs = [LogStash::Outputs::Stdout.new("debug" => [ "true" ])] if @outputs.length == 0
       end
-    end # @inputs.each
 
-    # Create N filter-worker threads
-    if @filters.length > 0
-      @filters.each do |filter|
-        filter.logger = @logger
-        filter.register
+      if @inputs.length == 0 or @outputs.length == 0
+        raise "Must have both inputs and outputs configured."
       end
-      2.times do |n|
-        # TODO(sissel): facter this out into a 'filterworker' that  accepts
-        # 'shutdown'
-        # Start a filter worker
-        filterworker = LogStash::FilterWorker.new(@filters, filter_queue,
-                                                  output_queue)
-        filterworker.logger = @logger
-        @plugins[filterworker] = \
-          Thread.new(filterworker, n, output_queue) do |*args|
+
+      # NOTE(petef) we should use a SizedQueue here (w/config params for size)
+      @filter_queue = SizedQueue.new(10)
+      @output_queue = LogStash::MultiQueue.new
+
+      @ready_queue = Queue.new
+
+      # Start inputs
+      @inputs.each do |input|
+        start_input(input)
+      end # @inputs.each
+
+      # Create N filter-worker threads
+      if @filters.length > 0
+        @filters.each do |filter|
+          filter.logger = @logger
+          filter.register
+        end
+        @filterworkers = {}
+        2.times do |n|
+          # TODO(sissel): facter this out into a 'filterworker' that  accepts
+          # 'shutdown'
+          # Start a filter worker
+          filterworker = LogStash::FilterWorker.new(@filters, @filter_queue,
+                                                    @output_queue)
+          filterworker.logger = @logger
+          thread = Thread.new(filterworker, n, @output_queue) do |*args|
             run_filter(*args)
           end
-      end # N.times
-    end # if @filters.length > 0
-
-    # Create output threads
-    @outputs.each do |output|
-      queue = SizedQueue.new(10)
-      output_queue.add_queue(queue)
-      @plugins[output] = Thread.new(output, queue) do |*args|
-        run_output(*args)
+          @plugins[filterworker] = thread
+          @filterworkers[filterworker] = thread
+        end # N.times
+      end # if @filters.length > 0
+
+      # Create output threads
+      @output_plugin_queues = {}
+      @outputs.each do |output|
+        start_output(output)
+      end # @outputs.each
+
+      # Wait for all inputs and outputs to be registered.
+      wait_count = outputs.size + inputs.size
+      while wait_count > 0 and @ready_queue.pop
+        wait_count -= 1
       end
-    end # @outputs.each
-
-    # Wait for all inputs and outputs to be registered.
-    wait_count = outputs.size + inputs.size
-    while wait_count > 0 and @ready_queue.pop 
-      wait_count -= 1
-    end
+      @logger.info("All plugins are started and registered.")
+    end # synchronize
 
     # yield to a block in case someone's waiting for us to be done setting up
     # like tests, etc.
@@ -401,26 +438,33 @@ def stop
   # Shutdown the agent.
   protected
   def shutdown
+    @logger.info("Starting shutdown sequence")
+    shutdown_plugins(@plugins)
+    # When we get here, all inputs have finished, all messages are done
+    @logger.info("Shutdown complete")
+    exit(0)
+  end # def shutdown
+
+  def shutdown_plugins(plugins)
     return if @is_shutting_down
 
     @is_shutting_down = true
     Thread.new do
-      @logger.info("Starting shutdown sequence")
       LogStash::Util::set_thread_name("logstash shutdown process")
       # TODO(sissel): Make this a flag
       force_shutdown_time = Time.now + 10
 
       finished_queue = Queue.new
       # Tell everything to shutdown.
-      @logger.debug(@plugins.keys.collect(&:to_s))
-      @plugins.each do |plugin, thread|
-        @logger.debug("Telling to shutdown: #{plugin.to_s}")
-        plugin.shutdown(finished_queue)
+      @logger.debug(plugins.keys.collect(&:to_s))
+      plugins.each do |p, thread|
+        @logger.debug("Telling to shutdown: #{p.to_s}")
+        p.shutdown(finished_queue)
       end
 
       # Now wait until the queues we were given are empty.
       #@logger.debug(@plugins)
-      remaining = @plugins.select { |plugin, thread| plugin.running? }
+      remaining = plugins.select { |p, thread| p.running? }
       while remaining.size > 0
         if (Time.now > force_shutdown_time)
           @logger.warn("Time to quit, even if some plugins aren't finished yet.")
@@ -434,18 +478,114 @@ def shutdown
         if plugin.nil?
           sleep(1)
         else
-          remaining = @plugins.select { |plugin, thread| plugin.running? }
-          @logger.debug("#{plugin.to_s} finished, waiting on " \
+          remaining = plugins.select { |p, thread| plugin.running? }
+          @logger.debug("#{p.to_s} finished, waiting on " \
                         "#{remaining.size} plugins; " \
                         "#{remaining.map(&:first).join(", ")}")
         end
       end # while remaining.size > 0
+    end
+    @is_shutting_down = false
+  end
+
+
+
+  # Reload configuration of filters, etc.
+  def reload
+    @plugins_mutex.synchronize do
+      begin
+        @reloading = true
+        # Reload the config file
+        begin
+          config = read_config
+          reloaded_inputs, reloaded_filters, reloaded_outputs = parse_config(config)
+        rescue Exception => e
+          @logger.error "Aborting reload due to bad configuration: #{e}"
+          return
+        end
+
+        new_inputs = reloaded_inputs - @inputs
+        new_filters = reloaded_filters - @filters
+        new_outputs = reloaded_outputs - @outputs
+
+        deleted_inputs = @inputs - reloaded_inputs
+        deleted_filters = @filters - reloaded_filters
+        deleted_outputs = @outputs - reloaded_outputs
+
+
+        # Handle shutdown of input and output plugins
+        obsolete_plugins = {}
+        [deleted_inputs].flatten.each do |p|
+          if @plugins.include? p
+            obsolete_plugins[p] = @plugins[p]
+            @plugins.delete(p)
+          else
+            @logger.warn("Couldn't find input plugin to stop: #{p}")
+          end
+        end
+
+        [deleted_outputs].flatten.each do |p|
+          if @plugins.include? p
+            obsolete_plugins[p] = @plugins[p]
+            @plugins.delete(p)
+            @output_queue.remove_queue(@output_plugin_queues[p])
+          else
+            @logger.warn("Couldn't find output plugin to stop: #{p}")
+          end
+        end
+
+        # Call reload on all existing plugins which are not being dropped
+        (@plugins.keys - obsolete_plugins.keys).each(&:reload)
+        (@filters - deleted_filters).each(&:reload)
+
+        # Also remove filters
+        deleted_filters.each {|f| obsolete_plugins[f] = nil}
+
+        if obsolete_plugins.size > 0
+          @logger.info("Stopping removed plugins:\n\t" + obsolete_plugins.keys.join("\n\t"))
+          shutdown_plugins(obsolete_plugins)
+        end
+        # require 'pry'; binding.pry()
+
+        # Start up filters
+        if new_filters.size > 0 || deleted_filters.size > 0
+          if new_filters.size > 0
+            @logger.info("Starting new filters: #{new_filters.join(', ')}")
+            new_filters.each do |f|
+              f.logger = @logger
+              f.register
+            end
+          end
+          @filters = reloaded_filters
+          @filterworkers.each_key do |filterworker|
+            filterworker.filters = @filters
+          end
+        end
+
+        if new_inputs.size > 0
+          @logger.info("Starting new inputs: #{new_inputs.join(', ')}")
+          new_inputs.each do |p|
+            start_input(p)
+          end
+        end
+        if new_outputs.size > 0
+          @logger.info("Starting new outputs: #{new_outputs.join(', ')}")
+          new_inputs.each do |p|
+            start_output(p)
+          end
+        end
 
-      # When we get here, all inputs have finished, all messages are done
-      @logger.info("Shutdown complete")
-      exit(0)
+        # Wait for all inputs and outputs to be registered.
+        wait_count = new_outputs.size + new_inputs.size
+        while wait_count > 0 and @ready_queue.pop
+          wait_count -= 1
+        end
+      rescue Exception => e
+        @reloading = false
+        raise e
+      end
     end
-  end # def shutdown
+  end
 
   public
   def register_signal_handlers
@@ -470,15 +610,20 @@ def register_signal_handlers
       ##end
     #end # SIGUSR1
 
-    #Signal.trap("INT") do
-      #@logger.warn("SIGINT received, shutting down.")
-      #shutdown
-    #end
+    Signal.trap("INT") do
+      @logger.warn("SIGINT received, shutting down.")
+      shutdown
+    end
+
+    Signal.trap("HUP") do
+      @logger.warn("SIGHUP received, reloading.")
+      reload
+    end
 
-    #Signal.trap("TERM") do
-      #@logger.warn("SIGTERM received, shutting down.")
-      #shutdown
-    #end
+    Signal.trap("TERM") do
+      @logger.warn("SIGTERM received, shutting down.")
+      shutdown
+    end
   end # def register_signal_handlers
 
   private
@@ -486,7 +631,7 @@ def run_input(input, queue)
     LogStash::Util::set_thread_name("input|#{input.to_s}")
     input.logger = @logger
     input.register
-
+    @logger.info("Input #{input.to_s} registered")
     @ready_queue << input
     done = false
 
@@ -509,7 +654,7 @@ def run_input(input, queue)
     #@logger.info("Input #{input.to_s} shutting down")
 
     # If we get here, the plugin finished, check if we need to shutdown.
-    shutdown_if_none_running(LogStash::Inputs::Base, queue)
+    shutdown_if_none_running(LogStash::Inputs::Base, queue) unless @reloading
   end # def run_input
 
   # Run a filter thread
@@ -517,18 +662,18 @@ def run_input(input, queue)
   def run_filter(filterworker, index, output_queue)
     LogStash::Util::set_thread_name("filter|worker|#{index}")
     filterworker.run
-
     @logger.warn("Filter worker ##{index} shutting down")
 
     # If we get here, the plugin finished, check if we need to shutdown.
-    shutdown_if_none_running(LogStash::FilterWorker, output_queue)
+    shutdown_if_none_running(LogStash::FilterWorker, output_queue) unless @reloading
   end # def run_filter
 
   # TODO(sissel): Factor this into an 'outputworker'
   def run_output(output, queue)
     LogStash::Util::set_thread_name("output|#{output.to_s}")
-    output.register
     output.logger = @logger
+    output.register
+    @logger.info("Output #{output.to_s} registered")
     @ready_queue << output
 
     # TODO(sissel): We need a 'reset' or 'restart' method to call on errors
@@ -546,11 +691,11 @@ def run_output(output, queue)
       sleep(1)
       retry
     end # begin/rescue
- 
+
     @logger.warn("Output #{input.to_s} shutting down")
 
     # If we get here, the plugin finished, check if we need to shutdown.
-    shutdown_if_none_running(LogStash::Outputs::Base)
+    shutdown_if_none_running(LogStash::Outputs::Base) unless @reloading
   end # def run_output
 
   def shutdown_if_none_running(pluginclass, queue=nil)
@@ -567,7 +712,7 @@ def shutdown_if_none_running(pluginclass, queue=nil)
 
       if remaining == 0
         @logger.debug("All #{pluginclass} finished. Shutting down.")
-        
+
         # Send 'shutdown' to the filters.
         queue << LogStash::SHUTDOWN if !queue.nil?
         shutdown
diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index 2104f0803c1..a131b9d7bd4 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -6,12 +6,10 @@
 class LogStash::Filters::Base < LogStash::Plugin
   include LogStash::Config::Mixin
 
-  attr_accessor :logger
-
   config_name "filter"
 
   # The type to act on. If a type is given, then this filter will only
-  # act on messages with the same type. See any input plugin's "type" 
+  # act on messages with the same type. See any input plugin's "type"
   # attribute for more.
   config :type, :validate => :string
 
@@ -44,7 +42,7 @@ class LogStash::Filters::Base < LogStash::Plugin
 
   public
   def initialize(params)
-    @logger = LogStash::Logger.new(STDOUT)
+    super
     config_init(params)
   end # def initialize
 
diff --git a/lib/logstash/filters/grok.rb b/lib/logstash/filters/grok.rb
index 8d81a2a15eb..ca102ef4540 100644
--- a/lib/logstash/filters/grok.rb
+++ b/lib/logstash/filters/grok.rb
@@ -8,11 +8,11 @@
 #
 # This filter requires you have libgrok installed.
 #
-# You can find libgrok here: 
+# You can find libgrok here:
 # <http://code.google.com/p/semicomplete/wiki/Grok>
 #
 # Compile/install notes can be found in the INSTALL file of the
-# grok tarball, or here: 
+# grok tarball, or here:
 # <https://github.com/jordansissel/grok/blob/master/INSTALL>
 #
 # Key dependencies:
@@ -43,7 +43,7 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
 
   # Any existing field name can be used as a config name here for matching
   # against.
-  #     
+  #
   #     # this config:
   #     foo => "some pattern"
   #
@@ -57,7 +57,7 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
   # patterns.
   #
   # Pattern files are plain text with format:
-  # 
+  #
   #     NAME PATTERN
   #
   # For example:
@@ -93,6 +93,13 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
     @@patterns_path += val.split(":")
   end
 
+  public
+  def initialize(params)
+    super(params)
+    @match["@message"] ||= []
+    @match["@message"] += @pattern if @pattern # the config 'pattern' value (array)
+  end
+
   public
   def register
     gem "jls-grok", ">=0.4.3"
@@ -120,13 +127,10 @@ def register
     end
 
     @patterns = Hash.new { |h,k| h[k] = [] }
-    
-    @logger.info(:match => @match)
 
-    @match["@message"] ||= []
-    @match["@message"] += @pattern if @pattern # the config 'pattern' value (array)
+    @logger.info(:match => @match)
 
-    # TODO(sissel): Hash.merge  actually overrides, not merges arrays. 
+    # TODO(sissel): Hash.merge  actually overrides, not merges arrays.
     # Work around it by implementing our own?
     # TODO(sissel): Check if 'match' is empty?
     @match.merge(@config).each do |field, patterns|
@@ -137,7 +141,7 @@ def register
       patterns = [patterns] if patterns.is_a?(String)
 
       if !@patterns.include?(field)
-        @patterns[field] = Grok::Pile.new 
+        @patterns[field] = Grok::Pile.new
         add_patterns_from_files(@patternfiles, @patterns[field])
       end
       @logger.info(["Grok compile", { :field => field, :patterns => patterns }])
@@ -158,7 +162,7 @@ def filter(event)
       return
     end
 
-    if @type != event.type 
+    if @type != event.type
       @logger.debug("Skipping grok for event type=#{event.type} (wanted '#{@type}')")
       return
     end
@@ -189,9 +193,9 @@ def filter(event)
           # http://code.google.com/p/logstash/issues/detail?id=45
           # Permit typing of captures by giving an additional colon and a type,
           # like: %{FOO:name:int} for int coercion.
-          if type_coerce 
-            @logger.info("Match type coerce: #{type_coerce}") 
-            @logger.info("Patt: #{grok.pattern}") 
+          if type_coerce
+            @logger.info("Match type coerce: #{type_coerce}")
+            @logger.info("Patt: #{grok.pattern}")
           end
 
           case type_coerce
diff --git a/lib/logstash/filterworker.rb b/lib/logstash/filterworker.rb
index 4a60ea21edc..86a0578f0e4 100644
--- a/lib/logstash/filterworker.rb
+++ b/lib/logstash/filterworker.rb
@@ -6,11 +6,13 @@
 # TODO(sissel): Should this really be a 'plugin' ?
 class LogStash::FilterWorker < LogStash::Plugin
   attr_accessor :logger
+  attr_accessor :filters
 
   def initialize(filters, input_queue, output_queue)
     @filters = filters
     @input_queue = input_queue
     @output_queue = output_queue
+    @shutdown_requested = false
   end # def initialize
 
   def run
@@ -20,14 +22,19 @@ def run
       #filter.register
     #end
 
-    while event = @input_queue.pop
+    while !@shutdown_requested && event = @input_queue.pop
       if event == LogStash::SHUTDOWN
         finished
-        break
+        return
       end
 
       filter(event)
     end # while @input_queue.pop
+    finished
+  end
+
+  def teardown
+    @shutdown_requested = true
   end
 
   def filter(original_event)
@@ -61,6 +68,6 @@ def filter(original_event)
 
       @logger.debug(["Event finished filtering", { :event => event, :thread => Thread.current[:name] }])
       @output_queue.push(event) unless event.cancelled?
-    end # events.each 
+    end # events.each
   end # def filter
 end # class LogStash::FilterWorker
diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index 58f06d63305..b7f11f8fadd 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -4,7 +4,7 @@
 # Pull events from an AMQP exchange.
 #
 # AMQP is a messaging system. It requires you to run an AMQP server or 'broker'
-# Examples of AMQP servers are [RabbitMQ](http://www.rabbitmq.com/) and 
+# Examples of AMQP servers are [RabbitMQ](http://www.rabbitmq.com/) and
 # [QPid](http://qpid.apache.org/)
 class LogStash::Inputs::Amqp < LogStash::Inputs::Base
   MQTYPES = [ "fanout", "direct", "topic" ]
@@ -31,7 +31,7 @@ class LogStash::Inputs::Amqp < LogStash::Inputs::Base
 
   # The name of the queue. If not set, defaults to the same name as the exchange.
   config :queue_name, :validate => :string
-  
+
   # The routing key to bind to
   config :key, :validate => :string
 
@@ -106,7 +106,7 @@ def run(queue)
       @queue = @bunny.queue(@queue_name, :durable => @queue_durable)
       exchange = @bunny.exchange(@name, :type => @exchange_type.to_sym, :durable => @durable)
       @queue.bind(exchange, :key => @key)
-      
+
       @queue.subscribe do |data|
         e = to_event(data[:payload], @amqpurl)
         if e
@@ -124,5 +124,6 @@ def run(queue)
 
   def teardown
     @bunny.close if @bunny
+    finished
   end # def teardown
 end # class LogStash::Inputs::Amqp
diff --git a/lib/logstash/inputs/base.rb b/lib/logstash/inputs/base.rb
index c6af853a315..dd0ae882078 100644
--- a/lib/logstash/inputs/base.rb
+++ b/lib/logstash/inputs/base.rb
@@ -7,8 +7,6 @@
 # This is the base class for logstash inputs.
 class LogStash::Inputs::Base < LogStash::Plugin
   include LogStash::Config::Mixin
-  attr_accessor :logger
-
   config_name "input"
 
   # Label this input with a type.
@@ -43,15 +41,16 @@ class LogStash::Inputs::Base < LogStash::Plugin
       #if v !~ re
         #return [false, "Tag '#{v}' does not match #{re}"]
       #end # check 'v'
-    #end # value.each 
+    #end # value.each
     #return true
   #end) # config :tag
 
+  attr_accessor :params
+
   public
   def initialize(params)
-    @logger = LogStash::Logger.new(STDOUT)
+    super
     config_init(params)
-
     @tags ||= []
   end # def initialize
 
diff --git a/lib/logstash/inputs/redis.rb b/lib/logstash/inputs/redis.rb
index e32cb13b6df..824f595c766 100644
--- a/lib/logstash/inputs/redis.rb
+++ b/lib/logstash/inputs/redis.rb
@@ -12,7 +12,7 @@ class LogStash::Inputs::Redis < LogStash::Inputs::Base
   # Name is used for logging in case there are multiple instances.
   # This feature has no real function and will be removed in future versions.
   config :name, :validate => :string, :default => "default", :deprecated => true
-  
+
   # The hostname of your redis server.
   config :host, :validate => :string, :default => "127.0.0.1"
 
@@ -36,7 +36,7 @@ class LogStash::Inputs::Redis < LogStash::Inputs::Base
   # TODO: change required to true
   config :key, :validate => :string, :required => false
 
-  # Either list or channel.  If redis_type is list, then we will BLPOP the 
+  # Either list or channel.  If redis_type is list, then we will BLPOP the
   # key.  If redis_type is channel, then we will SUBSCRIBE to the key.
   # If redis_type is pattern_channel, then we will PSUBSCRIBE to the key.
   # TODO: change required to true
@@ -72,7 +72,7 @@ def register
       )
     end
     # end TODO
-    
+
     @logger.info "Registering redis #{identity}"
   end # def register
 
@@ -105,7 +105,7 @@ def queue_event(msg, output_queue)
       @logger.debug(["Backtrace",  e.backtrace])
     end
   end
-  
+
   private
   def list_listener(redis, output_queue)
     response = redis.blpop @key, 0
@@ -184,5 +184,6 @@ def teardown
       @redis.quit
       @redis = nil
     end
+    finished
   end
 end # class LogStash::Inputs::Redis
diff --git a/lib/logstash/inputs/stdin.rb b/lib/logstash/inputs/stdin.rb
index 2b15d6067ca..cc2e71df912 100644
--- a/lib/logstash/inputs/stdin.rb
+++ b/lib/logstash/inputs/stdin.rb
@@ -27,5 +27,6 @@ def run(queue)
   public
   def teardown
     $stdin.close
+    finished
   end # def teardown
 end # class LogStash::Inputs::Stdin
diff --git a/lib/logstash/inputs/syslog.rb b/lib/logstash/inputs/syslog.rb
index ab04c466a26..508800e3798 100644
--- a/lib/logstash/inputs/syslog.rb
+++ b/lib/logstash/inputs/syslog.rb
@@ -26,6 +26,7 @@ class LogStash::Inputs::Syslog < LogStash::Inputs::Base
   public
   def initialize(params)
     super
+    @shutdown_requested = false
     BasicSocket.do_not_reverse_lookup = true
 
     # force "plain" format. others don't make sense here.
@@ -47,7 +48,7 @@ def register
 
     @grok_filter.register
     @date_filter.register
-    
+
     @tcp_clients = []
   end # def register
 
@@ -59,6 +60,7 @@ def run(output_queue)
       begin
         udp_listener(output_queue)
       rescue => e
+        break if @shutdown_requested
         @logger.warn("syslog udp listener died: #{$!}")
         @logger.debug(["Backtrace", e.backtrace])
         sleep(5)
@@ -72,6 +74,7 @@ def run(output_queue)
       begin
         tcp_listener(output_queue)
       rescue => e
+        break if @shutdown_requested
         @logger.warn("syslog tcp listener died: #{$!}")
         @logger.debug(["Backtrace", e.backtrace])
         sleep(5)
@@ -103,10 +106,7 @@ def udp_listener(output_queue)
       end
     end
   ensure
-    if @udp
-      @udp.close_read rescue nil
-      @udp.close_write rescue nil
-    end
+    close_udp
   end # def udp_listener
 
   private
@@ -124,7 +124,7 @@ def tcp_listener(output_queue)
         LogStash::Util::set_thread_name("input|syslog|tcp|#{ip}:#{port}}")
         if ip.include?(":") # ipv6
           source = "syslog://[#{ip}]/"
-        else 
+        else
           source = "syslog://#{ip}/"
         end
 
@@ -141,12 +141,35 @@ def tcp_listener(output_queue)
       end # Thread.new
     end # loop do
   ensure
+    close_tcp
+  end # def tcp_listener
+
+  public
+  def teardown
+    @shutdown_requested = true
+    close_udp
+    close_tcp
+    finished
+  end
+
+  private
+  def close_udp
+    if @udp
+      @udp.close_read rescue nil
+      @udp.close_write rescue nil
+    end
+    @udp = nil
+  end
+
+  private
+  def close_tcp
     # If we somehow have this left open, close it.
     @tcp_clients.each do |client|
       client.close rescue nil
     end
     @tcp.close if @tcp rescue nil
-  end # def tcp_listener
+    @tcp = nil
+  end
 
   # Following RFC3164 where sane, we'll try to parse a received message
   # as if you were relaying a syslog message to it.
diff --git a/lib/logstash/multiqueue.rb b/lib/logstash/multiqueue.rb
index 36753cd6a13..56a67e88fd4 100644
--- a/lib/logstash/multiqueue.rb
+++ b/lib/logstash/multiqueue.rb
@@ -27,6 +27,11 @@ def add_queue(queue)
     end
   end # def add_queue
 
+  public
+  def remove_queue(queue)
+    @queues.delete(queue)
+  end
+
   public
   def size
     return @queues.collect { |q| q.size }
diff --git a/lib/logstash/outputs/amqp.rb b/lib/logstash/outputs/amqp.rb
index dea7e706d04..e88bcf317b4 100644
--- a/lib/logstash/outputs/amqp.rb
+++ b/lib/logstash/outputs/amqp.rb
@@ -4,7 +4,7 @@
 # Push events to an AMQP exchange.
 #
 # AMQP is a messaging system. It requires you to run an AMQP server or 'broker'
-# Examples of AMQP servers are [RabbitMQ](http://www.rabbitmq.com/) and 
+# Examples of AMQP servers are [RabbitMQ](http://www.rabbitmq.com/) and
 # [QPid](http://qpid.apache.org/)
 class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   MQTYPES = [ "fanout", "direct", "topic" ]
@@ -28,7 +28,7 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
 
   # The name of the exchange
   config :name, :validate => :string, :required => true
-  
+
   # Key to route to
   config :key, :validate => :string
 
@@ -125,10 +125,11 @@ def to_s
     return "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@name}"
   end
 
-  #public
-  #def teardown
-    #@bunny.close rescue nil
-    #@bunny = nil
-    #@target = nil
-  #end # def teardown
+  public
+  def teardown
+    @bunny.close rescue nil
+    @bunny = nil
+    @target = nil
+    finished
+  end # def teardown
 end # class LogStash::Outputs::Amqp
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 3c7cccb7f0b..54b2628ad65 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -9,13 +9,11 @@
 class LogStash::Outputs::Base < LogStash::Plugin
   include LogStash::Config::Mixin
 
-  attr_accessor :logger
-
   config_name "output"
 
   public
   def initialize(params)
-    @logger = LogStash::Logger.new(STDOUT)
+    super
     config_init(params)
   end
 
diff --git a/lib/logstash/plugin.rb b/lib/logstash/plugin.rb
index b928ba2520d..1af7051ad20 100644
--- a/lib/logstash/plugin.rb
+++ b/lib/logstash/plugin.rb
@@ -3,6 +3,25 @@
 require "logstash/config/mixin"
 
 class LogStash::Plugin
+  attr_accessor :params
+  attr_accessor :logger
+
+  public
+  def hash
+    params.hash ^
+    self.class.name.hash
+  end
+
+  public
+  def eql?(other)
+    self.class.name == other.class.name && @params == other.params
+  end
+
+  public
+  def initialize(params=nil)
+    @params = params
+    @logger = LogStash::Logger.new(STDOUT)
+  end
 
   # This method is called when someone or something wants this plugin to shut
   # down. When you successfully shutdown, you must call 'finished'
@@ -43,6 +62,13 @@ def finished
   public
   def teardown
     # nothing by default
+    finished
+  end
+
+  # This method is called when a SIGHUP triggers a reload operation
+  public
+  def reload
+    # Do nothing by default
   end
 
   public
@@ -60,4 +86,8 @@ def terminating?
     return @plugin_state == :terminating
   end # def terminating?
 
+  public
+  def to_s
+    return "#{self.class.name}: #{@params}"
+  end
 end # class LogStash::Plugin
