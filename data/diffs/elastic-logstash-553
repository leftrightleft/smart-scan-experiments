diff --git a/lib/logstash/event_v0.rb b/lib/logstash/event_v0.rb
index fc6fbe329cc..64474f5d121 100644
--- a/lib/logstash/event_v0.rb
+++ b/lib/logstash/event_v0.rb
@@ -160,6 +160,24 @@ def [](key)
   def []=(key, value)
     if @data.has_key?(key) || key[0,1] == "@"
       @data[key] = value
+    elsif key.index(/(?<!\\)\./)
+      obj = @data["@fields"]
+      keys = key.split(/(?<!\\)\./)
+      last = keys.pop
+
+      keys.each do |segment|
+        segment.gsub!(/\\\./, ".")
+        if (obj.is_a?(Array) || (obj.is_a?(Hash) && !obj.member?(segment)) )
+          # try to safely cast segment to integer for the 0 in foo.0.bar
+          begin
+            segment = Integer(segment)
+          rescue Exception
+            #not an int, do nothing, segment remains a string
+          end
+        end
+        obj = obj[segment]
+      end # keys.each
+      obj[last] = value  
     else
       @data["@fields"][key] = value
     end
@@ -215,6 +233,24 @@ def append(event)
   def remove(field)
     if @data.has_key?(field)
       return @data.delete(field)
+    elsif field.index(/(?<!\\)\./)
+      obj = @data["@fields"]
+      keys = field.split(/(?<!\\)\./)
+      last = keys.pop
+
+      keys.each do |segment|
+        segment.gsub!(/\\\./, ".")
+        if (obj.is_a?(Array) || (obj.is_a?(Hash) && !obj.member?(segment)) )
+          # try to safely cast segment to integer for the 0 in foo.0.bar
+          begin
+            segment = Integer(segment)
+          rescue Exception
+            #not an int, do nothing, segment remains a string
+          end
+        end
+        obj = obj[segment]
+      end # keys.each
+      obj.delete(last)
     else
       return @data["@fields"].delete(field)
     end
diff --git a/spec/event.rb b/spec/event.rb
index 62c03af5d5f..4c535570230 100644
--- a/spec/event.rb
+++ b/spec/event.rb
@@ -28,7 +28,12 @@
             "k3.4" => "m",
             5 => 6,
             "5" => 7
-        } 
+        },
+        "s" => "t",
+        "u.v" => "w",
+        "u" => {
+          "v" => "w"
+        }
     }
   end
 
@@ -74,6 +79,25 @@
     end
   end
 
+  context "#[]=" do
+    it "should store data" do
+      @event["@type"] = "sprintf2"
+      insist { @event["@type"] } == "sprintf2"
+    end
+    it "should store fields" do
+      @event["o"] = "p"
+      insist { @event["o"] } == "p"
+    end
+    it "should store fields with escaped dotted names" do
+      @event["c\.d"] = "g"
+      insist { @event["c\.d"] } == "g"
+    end
+    it "should store deep fields" do
+      @event["c.d"] = "h"
+      insist { @event["c.d"] } == "h"
+    end
+  end
+
   context "#append" do
     it "should append message with \\n" do
       subject.append(LogStash::Event.new("@message" => "hello world"))
@@ -133,4 +157,19 @@
       end
     end
   end
+
+  context "#remove" do
+    it "should remove fields" do
+      @event.remove("s")
+      insist { @event["s"] }.nil?
+    end
+    it "should remove fields with escaped dotted names" do
+      @event.remove("u\.v")
+      insist { @event["u\.v"] }.nil?
+    end
+    it "should store deep fields" do
+      @event.remove("u.v")
+      insist { @event["u.v"] }.nil?
+    end
+  end
 end
