diff --git a/logstash-core/spec/logstash/util/buftok_spec.rb b/logstash-core/spec/logstash/util/buftok_spec.rb
index 33fdf36824b..a7116046ac8 100644
--- a/logstash-core/spec/logstash/util/buftok_spec.rb
+++ b/logstash-core/spec/logstash/util/buftok_spec.rb
@@ -43,4 +43,22 @@
     expect(subject.extract("\n")).to eq([""])
     expect(subject.extract("\n\n\n")).to eq(["", "", ""])
   end
+
+  context 'with delimiter' do
+
+    subject { FileWatch::BufferedTokenizer.new(delimiter) }
+
+    let(:delimiter) { "||" }
+
+    it "should tokenize multiple token" do
+      expect(subject.extract("foo||b|r||")).to eq(["foo", "b|r"])
+    end
+
+    it "should ignore empty payload" do
+      expect(subject.extract("")).to eq([])
+      expect(subject.extract("foo||bar")).to eq(["foo"])
+    end
+
+  end
+
 end
diff --git a/logstash-core/src/main/java/org/logstash/common/BufferedTokenizerExt.java b/logstash-core/src/main/java/org/logstash/common/BufferedTokenizerExt.java
index 9bc0bc69a5d..2d7b90bba7a 100644
--- a/logstash-core/src/main/java/org/logstash/common/BufferedTokenizerExt.java
+++ b/logstash-core/src/main/java/org/logstash/common/BufferedTokenizerExt.java
@@ -36,10 +36,11 @@ public class BufferedTokenizerExt extends RubyObject {
 
     private static final long serialVersionUID = 1L;
 
-    private static final IRubyObject MINUS_ONE = RubyUtil.RUBY.newFixnum(-1);
+    private static final RubyString NEW_LINE = (RubyString) RubyUtil.RUBY.newString("\n").
+                                                                freeze(RubyUtil.RUBY.getCurrentContext());
 
     private @SuppressWarnings("rawtypes") RubyArray input = RubyUtil.RUBY.newArray();
-    private IRubyObject delimiter = RubyUtil.RUBY.newString("\n");
+    private RubyString delimiter = NEW_LINE;
     private int sizeLimit;
     private boolean hasSizeLimit;
     private int inputSize;
@@ -51,7 +52,7 @@ public BufferedTokenizerExt(final Ruby runtime, final RubyClass metaClass) {
     @JRubyMethod(name = "initialize", optional = 2)
     public IRubyObject init(final ThreadContext context, IRubyObject[] args) {
         if (args.length >= 1) {
-            this.delimiter = args[0];
+            this.delimiter = args[0].convertToString();
         }
         if (args.length == 2) {
             this.sizeLimit = args[1].convertToInteger().getIntValue();
@@ -75,7 +76,7 @@ public IRubyObject init(final ThreadContext context, IRubyObject[] args) {
     @JRubyMethod
     @SuppressWarnings("rawtypes")
     public RubyArray extract(final ThreadContext context, IRubyObject data) {
-        final RubyArray entities = ((RubyString) data).split(context, delimiter, MINUS_ONE);
+        final RubyArray entities = data.convertToString().split(delimiter, -1);
         if (hasSizeLimit) {
             final int entitiesSize = ((RubyString) entities.first()).size();
             if (inputSize + entitiesSize > sizeLimit) {
