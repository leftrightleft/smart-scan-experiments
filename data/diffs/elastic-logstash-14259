diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 48306cdf86b..6c83b8b9609 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -87,6 +87,10 @@ module Environment
            Setting::Boolean.new("api.ssl.enabled", false),
   Setting::ExistingFilePath.new("api.ssl.keystore.path", nil, false).nullable,
           Setting::Password.new("api.ssl.keystore.password", nil, false).nullable,
+  Setting::ExistingFilePath.new("api.ssl.truststore.path", nil, false).nullable,
+          Setting::Password.new("api.ssl.truststore.password", nil, false).nullable,
+            Setting::String.new("api.ssl.verification_mode", "full", true, %w[full none]),
+  Setting::SplittableStringArray.new("api.ssl.supported_protocols", ['TLSv1.3', 'TLSv1.2'], true, ['TLSv1.2', 'TLSv1.3']),
             Setting::String.new("queue.type", "memory", true, ["persisted", "memory"]),
            Setting::Boolean.new("queue.drain", false),
              Setting::Bytes.new("queue.page_capacity", "64mb"),
diff --git a/logstash-core/lib/logstash/modules/logstash_config.rb b/logstash-core/lib/logstash/modules/logstash_config.rb
index eb70d73e7f1..cee2d30c64a 100644
--- a/logstash-core/lib/logstash/modules/logstash_config.rb
+++ b/logstash-core/lib/logstash/modules/logstash_config.rb
@@ -33,7 +33,7 @@ def template
 
   def configured_inputs(default = [], aliases = {})
     name = "var.inputs"
-    values = get_setting(LogStash::Setting::SplittableStringArray.new(name, String, default))
+    values = get_setting(LogStash::Setting::SplittableStringArray.new(name, default))
 
     aliases.each { |k,v| values << v if values.include?(k) }
     aliases.invert.each { |k,v| values << v if values.include?(k) }
@@ -93,7 +93,7 @@ def fetch_raw_setting(name, default)
   end
 
   def elasticsearch_output_config(type_string = nil, index_suffix = "-%{+YYYY.MM.dd}")
-    hosts = array_to_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.elasticsearch.hosts", String, ["localhost:9200"])))
+    hosts = array_to_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.elasticsearch.hosts", ["localhost:9200"])))
     index = "#{@name}#{index_suffix}"
     user = @settings["var.elasticsearch.username"]
     password = @settings["var.elasticsearch.password"]
diff --git a/logstash-core/lib/logstash/patches/puma.rb b/logstash-core/lib/logstash/patches/puma.rb
index 3b6567d088f..66dc4f75407 100644
--- a/logstash-core/lib/logstash/patches/puma.rb
+++ b/logstash-core/lib/logstash/patches/puma.rb
@@ -18,18 +18,12 @@
 # Patch to replace the usage of STDERR and STDOUT
 # see: https://github.com/elastic/logstash/issues/5912
 module LogStash
-  class NullLogger
-    def self.debug(message)
-    end
-  end
-
-  # Puma uses by default the STDERR an the STDOUT for all his error
-  # handling, the server class accept custom a events object that can accept custom io object,
-  # so I just wrap the logger into an IO like object.
+  # Despite {@link DelegatingLogWriter} Puma still uses log_writer.stderr
+  # @private
   class IOWrappedLogger
-    def initialize(new_logger)
-      @logger_lock = Mutex.new
-      @logger = new_logger
+
+    def initialize(log_writer)
+      @log_writer = log_writer
     end
 
     def sync=(v)
@@ -44,34 +38,91 @@ def flush
       # noop
     end
 
-    def logger=(logger)
-      @logger_lock.synchronize { @logger = logger }
-    end
-
     def puts(str)
-      # The logger only accept a str as the first argument
-      @logger_lock.synchronize { @logger.debug(str.to_s) }
+      @log_writer.log(str)
     end
     alias_method :write, :puts
     alias_method :<<, :puts
   end
 
-  # ::Puma::Events#error(str) sends Kernel#exit
-  # let's raise something sensible instead.
-  UnrecoverablePumaError = Class.new(RuntimeError)
-  class NonCrashingPumaEvents < ::Puma::Events
-    def error(str)
-      raise UnrecoverablePumaError.new(str)
+  # Replacement for Puma's `LogWriter` to redirect all logging to a logger.
+  # @private
+  class DelegatingLogWriter
+
+    # NOTE: for env['rack.errors'] Puma does log_writer.stderr
+    attr_reader :stdout, :stderr
+
+    def initialize(logger)
+      @logger = logger
+      @stdout = @stderr = IOWrappedLogger.new(self)
+    end
+
+    # @overload
+    def log(str)
+      @logger.info(format(str))
     end
-  end
-end
 
-# Reopen the puma class to create a scoped STDERR and STDOUT
-# This operation is thread safe since its done at the class level
-# and force JRUBY to flush his classes cache.
-module Puma
-  STDERR = LogStash::IOWrappedLogger.new(LogStash::NullLogger)
-  STDOUT = LogStash::IOWrappedLogger.new(LogStash::NullLogger)
+    # @overload
+    def write(str)
+      @logger.debug(str) # raw write - no formatting
+    end
+
+    # @overload
+    def debug(str)
+      @logger.debug? && @logger.debug(format(str))
+    end
+
+    # @overload
+    def format(str)
+      str.to_s # we do not want "[#{$$}] #{str}"
+    end
+
+    # An HTTP connection error has occurred.
+    # +error+ a connection exception, +req+ the request,
+    # and +text+ additional info
+    # @overload
+    def connection_error(error, req, text="HTTP connection error")
+      details = { error: error, request: req }
+      details[:backtrace] = error.backtrace if @logger.debug?
+      @logger.error(text, details)
+    end
+
+    # An HTTP parse error has occurred.
+    # +error+ a parsing exception, and +req+ the request.
+    def parse_error(error, req)
+      @logger.warn('HTTP parse error, malformed request', error: error, request: req)
+    end
+
+    # An SSL error has occurred.
+    # @param error <Puma::MiniSSL::SSLError>
+    # @param ssl_socket <Puma::MiniSSL::Socket>
+    # @overload
+    def ssl_error(error, ssl_socket)
+      peer = ssl_socket.peeraddr.last rescue "<unknown>"
+      peer_cert = ssl_socket.peercert&.subject
+      @logger.info("SSL error", error: error, peer: peer, peer_cert: peer_cert)
+    end
+
+    # An unknown error has occurred.
+    # +error+ an exception object, +req+ the request,
+    # and +text+ additional info
+    # @overload
+    def unknown_error(error, req=nil, text="Unknown error")
+      details = { error: error, request: req }
+      details[:backtrace] = error.backtrace if @logger.debug?
+      @logger.error(text, details)
+    end
+
+    # Log occurred error debug dump.
+    # +error+ an exception object, +req+ the request,
+    # and +text+ additional info
+    # @overload
+    def debug_error(error, req=nil, text="")
+      return unless @logger.debug?
+      @logger.debug(text, error: error, request: req, backtrace: error.backtrace)
+    end
+
+  end
 end
 
 # JRuby (>= 9.2.18.0) added support for getsockopt(Socket::IPPROTO_TCP, Socket::TCP_INFO)
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 1b0aaed39b8..58a1b505841 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -743,10 +743,10 @@ def validate(input)
     class SplittableStringArray < ArrayCoercible
       DEFAULT_TOKEN = ","
 
-      def initialize(name, klass, default, strict=true, tokenizer = DEFAULT_TOKEN, &validator_proc)
-        @element_class = klass
+      def initialize(name, default, strict=true, possible_strings=[], tokenizer = DEFAULT_TOKEN, &validator_proc)
+        @possible_strings = possible_strings
         @token = tokenizer
-        super(name, klass, default, strict, &validator_proc)
+        super(name, ::String, default, strict, &validator_proc)
       end
 
       def coerce(value)
@@ -758,6 +758,14 @@ def coerce(value)
           value.split(@token).map(&:strip)
         end
       end
+
+      protected
+      def validate(value)
+        super(value)
+        if !@possible_strings.empty? && coerce(value).find { |val| !@possible_strings.include?(val) }
+          raise ArgumentError.new("Invalid value \"#{value}\". Options are: #{@possible_strings.inspect}")
+        end
+      end
     end
 
     class Modules < Coercible
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 3cbb9f23d1e..ae379b2259d 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -42,7 +42,10 @@ def self.from_settings(logger, agent, settings)
         ssl_params = {}
         ssl_params[:keystore_path] = required_setting(settings, 'api.ssl.keystore.path', "api.ssl.enabled")
         ssl_params[:keystore_password] = required_setting(settings, 'api.ssl.keystore.password', "api.ssl.enabled")
-
+        ssl_params[:truststore_path] = settings.get('api.ssl.truststore.path')
+        ssl_params[:truststore_password] = settings.get('api.ssl.truststore.password')
+        ssl_params[:supported_protocols] = settings.get('api.ssl.supported_protocols')
+        ssl_params[:verification_mode] = settings.get('api.ssl.verification_mode')
         options[:ssl_params] = ssl_params.freeze
       else
         warn_ignored(logger, settings, "api.ssl.", "api.ssl.enabled")
@@ -124,6 +127,8 @@ def self.required_setting_with_changing_default(settings, name, trigger, future_
     # @option :ssl_params [Hash{Symbol=>Object}]
     #             :keystore_path [String]
     #             :keystore_password [LogStash::Util::Password]
+    #             :truststore_path [String] (optional - will use keystore if no truststore set)
+    #             :truststore_password [LogStash::Util::Password] (optional)
     # @option :auth_basic [Hash{Symbol=>Object}]
     #             :username [String]
     #             :password [LogStash::Util::Password]
@@ -137,12 +142,8 @@ def initialize(logger, agent, options={})
       @running = Concurrent::AtomicBoolean.new(false)
       @mutex = Mutex.new
 
-      validate_keystore_access! if @ssl_params
-
-      # wrap any output that puma could generate into a wrapped logger
-      # use the puma namespace to override STDERR, STDOUT in that scope.
-      Puma::STDERR.logger = logger
-      Puma::STDOUT.logger = logger
+      validate_keystore_access!(@ssl_params.fetch(:keystore_path), @ssl_params.fetch(:keystore_password)) if @ssl_params
+      validate_keystore_access!(@ssl_params.fetch(:truststore_path), @ssl_params[:truststore_password]) if @ssl_params && @ssl_params[:truststore_path]
 
       app = LogStash::Api::RackApp.app(logger, agent, http_environment)
 
@@ -195,10 +196,7 @@ def ssl_enabled?
     private
 
     def _init_server
-      io_wrapped_logger = LogStash::IOWrappedLogger.new(logger)
-      events = LogStash::NonCrashingPumaEvents.new(io_wrapped_logger, io_wrapped_logger)
-
-      ::Puma::Server.new(@app, events)
+      ::Puma::Server.new(@app, nil, log_writer: LogStash::DelegatingLogWriter.new(logger))
     end
 
     def create_server_thread
@@ -228,11 +226,26 @@ def create_server_thread
     def bind_to_port(candidate_port)
       logger.debug("Trying to start API WebServer", :port => candidate_port, :ssl_enabled => ssl_enabled?)
       if @ssl_params
-        unwrapped_ssl_params = {
-            'keystore' => @ssl_params.fetch(:keystore_path),
-            'keystore-pass' => @ssl_params.fetch(:keystore_password).value
-        }
-        ssl_context = Puma::MiniSSL::ContextBuilder.new(unwrapped_ssl_params, @server.events).context
+        keystore_path = @ssl_params.fetch(:keystore_path)
+        truststore_path = @ssl_params.fetch(:truststore_path, nil)
+
+        ssl_context = ::Puma::MiniSSL::Context.new
+        ssl_context.keystore = keystore_path
+        ssl_context.keystore_type = detect_keystore_type(keystore_path)
+        ssl_context.keystore_pass = @ssl_params.fetch(:keystore_password).value
+        if truststore_path
+          ssl_context.truststore = truststore_path
+          ssl_context.truststore_type = detect_keystore_type(truststore_path)
+          truststore_password = @ssl_params.fetch(:truststore_password, nil)&.value
+          ssl_context.truststore_pass = truststore_password if truststore_password
+        end
+        supported_protocols = @ssl_params.fetch(:supported_protocols, nil)
+        ssl_context.protocols = supported_protocols if supported_protocols
+        ssl_context.verify_mode = case @ssl_params.fetch(:verification_mode, nil)
+                                  when 'none' then ::Puma::MiniSSL::VERIFY_NONE
+                                  when 'full' then ::Puma::MiniSSL::VERIFY_PEER | ::Puma::MiniSSL::VERIFY_FAIL_IF_NO_PEER_CERT
+                                  else ::Puma::MiniSSL::VERIFY_PEER # 'peer' or default (nil)
+                                  end
         @server.add_ssl_listener(http_host, candidate_port, ssl_context)
       else
         @server.add_tcp_listener(http_host, candidate_port)
@@ -248,16 +261,17 @@ def set_http_address_metric(value)
     # Validate access to the provided keystore.
     # Errors accessing the keystore after binding the webserver to a port are very hard to debug.
     # @api private
-    def validate_keystore_access!
-      return false unless @ssl_params
+    def validate_keystore_access!(path, password)
+      raise("Password not provided!") if password && !password&.value
 
-      raise("Password not provided!") unless @ssl_params.fetch(:keystore_password).value
-
-      java.security.KeyStore.getInstance("JKS")
-          .load(java.io.FileInputStream.new(@ssl_params.fetch(:keystore_path)),
-                @ssl_params.fetch(:keystore_password).value.chars&.to_java(:char))
+      java.security.KeyStore.getInstance(detect_keystore_type(path))
+          .load(java.io.FileInputStream.new(path), password&.value&.chars&.to_java(:char))
     rescue => e
-      raise ArgumentError.new("API Keystore could not be opened (#{e})")
+      raise ArgumentError.new("API Keystore (#{path}) could not be opened (#{e})")
+    end
+
+    def detect_keystore_type(path)
+      path.end_with?('.p12', '.pfx') ? 'pkcs12' : 'jks'
     end
   end
 end
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index 9637b72dae4..bd5c869b1c4 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -54,8 +54,9 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "gems", "~> 1"  #(MIT license)
   gem.add_runtime_dependency "concurrent-ruby", "~> 1", "< 1.1.10" # pinned until https://github.com/elastic/logstash/issues/13956
   gem.add_runtime_dependency "rack", '~> 2'
+  gem.add_runtime_dependency "mustermann", '~> 1.0.3'
   gem.add_runtime_dependency "sinatra", '~> 2'
-  gem.add_runtime_dependency 'puma', '~> 5', '>= 5.6.2'
+  gem.add_runtime_dependency 'puma', '~> 6.0'
   gem.add_runtime_dependency "jruby-openssl", "~> 0.11"
 
   gem.add_runtime_dependency "treetop", "~> 1" #(MIT license)
diff --git a/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
index d5526e4f600..f74ffa3d80a 100644
--- a/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
+++ b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
@@ -19,10 +19,9 @@
 require "logstash/settings"
 
 describe LogStash::Setting::SplittableStringArray do
-  let(:element_class) { String }
-  let(:default_value) { [] }
+  let(:default_value) { ['default'] }
 
-  subject { described_class.new("testing", element_class, default_value) }
+  subject { described_class.new("testing", default_value) }
 
   before do
     subject.set(candidate)
@@ -55,7 +54,9 @@
   end
 
   context "when defining a custom tokenizer" do
-    subject { described_class.new("testing", element_class, default_value, strict=true, ";") }
+    let(:default_value) { [] }
+    let(:possible_strings) { [] }
+    subject { described_class.new("testing", default_value, strict=true, possible_strings, ";") }
 
     let(:candidate) { "hello;ninja" }
 
@@ -63,4 +64,26 @@
       expect(subject.value).to match(["hello", "ninja"])
     end
   end
+
+  context "when defining allowed values" do
+    let(:default_value) { [] }
+    let(:possible_strings) { ['foo', 'bar'] }
+    subject { described_class.new("testing", [], strict=true, possible_strings) }
+
+    let(:candidate) { "bar, foo" }
+
+    it "returns an array of string" do
+      expect(subject.value).to eql ["bar", "foo"]
+    end
+
+    it "setting a valid array value" do
+      expect { subject.set(['bar', 'foo']) }.to_not raise_error(ArgumentError)
+    end
+
+    context "when a value is given outside of possible_values" do
+      it "should raise an ArgumentError" do
+        expect { subject.set('baz') }.to raise_error(ArgumentError)
+      end
+    end
+  end
 end
diff --git a/logstash-core/spec/logstash/webserver_spec.rb b/logstash-core/spec/logstash/webserver_spec.rb
index 6e2d0105af4..34b239c659d 100644
--- a/logstash-core/spec/logstash/webserver_spec.rb
+++ b/logstash-core/spec/logstash/webserver_spec.rb
@@ -212,21 +212,25 @@ def free_ports(servers)
   let(:logger)  { spy("logger") }
   let(:message) { "foobar" }
 
-  subject { described_class.new(logger) }
+  let(:log_writer) do
+    LogStash::DelegatingLogWriter.new(logger)
+  end
+
+  subject { log_writer.stderr } # mimick Puma's only use
 
   it "responds to puts" do
     subject.puts(message)
-    expect(logger).to have_received(:debug).with(message)
+    expect(logger).to have_received(:info).with(message)
   end
 
   it "responds to write" do
     subject.write(message)
-    expect(logger).to have_received(:debug).with(message)
+    expect(logger).to have_received(:info).with(message)
   end
 
   it "responds to <<" do
     subject << message
-    expect(logger).to have_received(:debug).with(message)
+    expect(logger).to have_received(:info).with(message)
   end
 
   it "responds to sync=(v)" do
diff --git a/qa/integration/fixtures/webserver_certs/generate.sh b/qa/integration/fixtures/webserver_certs/generate.sh
index 544165cf201..c840c5ff9de 100755
--- a/qa/integration/fixtures/webserver_certs/generate.sh
+++ b/qa/integration/fixtures/webserver_certs/generate.sh
@@ -10,36 +10,45 @@ echo "DO NOT USE THESE CERTIFICATES IN PRODUCTION" >> ./README.txt
 
 # certificate authority
 openssl genrsa -out root.key 4096
-openssl req -new -x509 -days 1826 -extensions ca -key root.key -out root.crt -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=root" -config ../openssl.cnf
+openssl req -new -x509 -sha256 -days 1826 -extensions ca -key root.key -out root.crt -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=root" -config ../openssl.cnf
 
 
 # intermediate CA
 openssl genrsa -out intermediate-ca.key 4096
-openssl req -new -key intermediate-ca.key -out intermediate-ca.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=intermediate-ca" -config ../openssl.cnf
+openssl req -new -sha256 -key intermediate-ca.key -out intermediate-ca.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=intermediate-ca" -config ../openssl.cnf
 openssl x509 -req -days 1000 -extfile ../openssl.cnf -extensions intermediate_ca -in intermediate-ca.csr -CA root.crt -CAkey root.key -out intermediate-ca.crt -set_serial 01
 
 # server certificate from intermediate CA
 openssl genrsa -out server_from_intermediate.key 4096
-openssl req -new -key server_from_intermediate.key -out server_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
+openssl req -new -sha256 -key server_from_intermediate.key -out server_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
 openssl x509 -req -extensions server_cert -extfile ../openssl.cnf -days 1000 -in server_from_intermediate.csr -CA intermediate-ca.crt -CAkey intermediate-ca.key -set_serial 02 -out server_from_intermediate.crt
 
 # server certificate from root
 openssl genrsa -out server_from_root.key 4096
-openssl req -new -key server_from_root.key -out server_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
+openssl req -new -sha256 -key server_from_root.key -out server_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=server" -config ../openssl.cnf
 openssl x509 -req -extensions server_cert -extfile ../openssl.cnf -days 1000 -in server_from_root.csr -CA root.crt -CAkey root.key -set_serial 03 -out server_from_root.crt
 
 
-# Client certificates - We don't need them now
+# Client certificates
 
 # client certificate from intermediate CA
-# openssl genrsa -out client_from_intermediate.key 4096
-# openssl req -new -key client_from_intermediate.key -out client_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
-# openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_intermediate.csr -CA intermediate-ca.crt -CAkey intermediate-ca.key -set_serial 04 -out client_from_intermediate.crt
+#openssl genrsa -out client_from_intermediate.key 4096
+#openssl req -new -key client_from_intermediate.key -out client_from_intermediate.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
+#openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_intermediate.csr -CA intermediate-ca.crt -CAkey intermediate-ca.key -set_serial 04 -out client_from_intermediate.crt
 
 # client certificate from root
-# openssl genrsa -out client_from_root.key 4096
-# openssl req -new -key client_from_root.key -out client_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
-# openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_root.csr -CA root.crt -CAkey root.key -set_serial 04 -out client_from_root.crt
+#openssl genrsa -out client_from_root.key 4096
+#openssl req -new -key client_from_root.key -out client_from_root.csr -subj "/C=PT/ST=NA/L=Lisbon/O=MyLab/CN=client" -config ../openssl.cnf
+#openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_root.csr -CA root.crt -CAkey root.key -set_serial 04 -out client_from_root.crt
+
+# client's certificate authority
+openssl genrsa -out client_root.key 4096
+openssl req -new -sha256 -x509 -days 1826 -extensions ca -key client_root.key -out client_root.crt -subj "/C=PT/ST=NA/L=Porto/O=MyLab/CN=client_root" -config ../openssl.cnf
+
+# client certificate from root
+openssl genrsa -out client_from_root.key 4096
+openssl req -new -sha256 -key client_from_root.key -out client_from_root.csr -subj "/C=PT/ST=NA/L=Porto/O=MyLab/CN=client" -config ../openssl.cnf
+openssl x509 -req -extensions client_cert -extfile ../openssl.cnf -days 1000 -in client_from_root.csr -CA client_root.crt -CAkey client_root.key -set_serial 04 -out client_from_root.crt
 
 # create server chain pems.
 cat intermediate-ca.crt server_from_intermediate.crt > server_from_intermediate.chain.crt
@@ -63,8 +72,13 @@ openssl pkcs12 -export -in server_from_intermediate.chain.crt -inkey server_from
 openssl pkcs12 -export -in server_from_root.chain.crt -inkey server_from_root.key -out server_from_root.p12 -name "server_from_root" -passout 'pass:12345678'
 
 # use java keytool to convert all pkcs12 keystores to jks-format keystores (pass:12345678)
-keytool -importkeystore -srckeystore server_from_intermediate.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_intermediate.jks -deststorepass 12345678 -alias server_from_intermediate
-keytool -importkeystore -srckeystore server_from_root.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_root.jks -deststorepass 12345678 -alias server_from_root
+keytool -importkeystore -srckeystore server_from_intermediate.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_intermediate.jks -storetype jks -deststorepass 12345678 -alias server_from_intermediate
+keytool -importkeystore -srckeystore server_from_root.p12 -srcstoretype pkcs12 -srcstorepass 12345678 -destkeystore server_from_root.jks -storetype jks -deststorepass 12345678 -alias server_from_root
+
+# generate an empty trust-store and import client CA
+keytool -genkey -keyalg RSA -keysize 2048 -keystore client_root.jks -storepass 123456 -storetype jks -alias temp -keypass unused -dname "CN=temp, OU=Temp, O=MyLab, L=Porto, ST=NA, C=PT"
+keytool -delete -alias temp -storepass 123456 -keystore client_root.jks
+keytool -import -trustcacerts -alias client_root -file client_root.crt -keystore client_root.jks -storepass 123456 -noprompt
 
 # cleanup csr, we don't need them
 rm -rf *.csr
diff --git a/qa/integration/fixtures/webserver_certs/generated/client_from_root.crt b/qa/integration/fixtures/webserver_certs/generated/client_from_root.crt
new file mode 100644
index 00000000000..7f5ac3882be
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/client_from_root.crt
@@ -0,0 +1,34 @@
+-----BEGIN CERTIFICATE-----
+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
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/client_from_root.key b/qa/integration/fixtures/webserver_certs/generated/client_from_root.key
new file mode 100644
index 00000000000..9a3541343f5
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/client_from_root.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+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
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/client_root.crt b/qa/integration/fixtures/webserver_certs/generated/client_root.crt
new file mode 100644
index 00000000000..3a53cdf56b6
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/client_root.crt
@@ -0,0 +1,32 @@
+-----BEGIN CERTIFICATE-----
+MIIFkTCCA3mgAwIBAgIUaZ2XjUzSwDEYZcx3Qowb82e0vS8wDQYJKoZIhvcNAQEL
+BQAwUDELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ4wDAYDVQQHDAVQb3J0bzEO
+MAwGA1UECgwFTXlMYWIxFDASBgNVBAMMC2NsaWVudF9yb290MB4XDTIyMDcwNDEx
+MDYxOFoXDTI3MDcwNDExMDYxOFowUDELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5B
+MQ4wDAYDVQQHDAVQb3J0bzEOMAwGA1UECgwFTXlMYWIxFDASBgNVBAMMC2NsaWVu
+dF9yb290MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA34squICFpMuB
+3FiC85LJRm1H5BbwJwyxpwLIo+HdCzDbu0xEPka4l/6NVYlxQql7PCGdeWQ6IVdK
+wMCc6zlXG6P8METi8t8eaFsutzC2M1fkjSTW8dGP0jxYYIvn90HxeyQwG6D0sXuq
+TyZyZ8PgZIvLWMBuygP9AE/UWAu+oe1nGWPXAzEfHoltMi7msqC4hQ/raMu55ent
+qOpb7uUjBoeTox9YFqMB0IV75tOnq1/Hg4R4Xd+cj9ZeZioF5yIyDgghBSNwlhZX
+G9JTssjPcK7s4sypmpKj/dzRdDpFphzqkme6FZmq8tO06CJl1B/4WykYntFUERbU
+N1C7bAemHPbNtzrhNtC0blUlaze+ACqZRFBJfy6Wl1zJaX7Of4rQ25pVRbHQK+Y1
++aTKSaXqc8ubFUPQ+SDh0rElukINVSG4VkPW9oCTPnNxGrGD1xrW/vE34C1YDegG
+0u6Ghxcmbi8lI/5Y++dusu4dmNrEYhfUyitBwTjj0NndI227mOoFEOsfUD7+qf05
+qt/D5xwq4Pl0Kc8e4HAg+YfYMR4oyv39fMZ87JHy3gLn4/rIbHLZirnAg1kcYoel
+eSa84hQdIV+2ESmVAYwlgVGBLx9LaegXdKWHzm3i5gM+KqmMwUBBmO7wQxvLunsI
+Kph3jYGTXHwVfDnH3Q3a/kK8DrYKULcCAwEAAaNjMGEwHQYDVR0OBBYEFCR6NsnB
+6qQ89r2eCPxS6xNvb4dJMB8GA1UdIwQYMBaAFCR6NsnB6qQ89r2eCPxS6xNvb4dJ
+MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUA
+A4ICAQBVsSaWLooKEt4ldHSFpMbF5NTcOAstCXneDb2t/ZSiWOdCGiGpK5h+HTU2
+1d+zPToe0hpo6m+SteuOJHYHFWIvFBg7E1ZLJiEANcdRTyfj7tHi7YSLdY8jZX7l
+od4uAyevK9GtUF5gnk/t+QUpXvhYuSyKVcuiBDLNryvSUHFXovz1ad8kwfU1Twsl
+HASM3XtzwiMGJZpT6Z8tto2I93uRzd3DOaWnYL9q+y+8twQw5puKv0FYrH1FsD+H
+jk4LBsfkdfDMvvm1AuQbMNIvdaEz+e6QdzPh2lKYwE7NwEgDgJAYSGLlH2ylI+LO
+K/pb3qpSAXi6qHNXbQkI0PJYkyGVyHR6MjUvNgfGXqG80r0E06qUeEd33249A4Wi
+ocAILsQb+LhK+JCjlcMYXFr6uZyD4x5tXEHlU3ucJ/nC2WeR+bbT+YJBJCR3sVMq
+96kgSetC3wPkzID3ipYQ45MOC/Ld7BaTuZB6frAdOpnhyfxYJoyaHNyE0JOV00Qq
+bZuUl3MdkCiUVaIbGgpxYkO8T8YlawQKkWbCuHUXdyFlka1+ApgFIOxOHr95xU3m
+MCrxV1ZitHqeS0h2jlodTPUyhIOrGdcEzXGSn+cLwFZN6CM6zncg3NXShXqxAg+S
+vycMS2pX7jOhCuNKhm3CRmsTT/Wwgu3gel+gE5DinIpFonRVOw==
+-----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/client_root.jks b/qa/integration/fixtures/webserver_certs/generated/client_root.jks
new file mode 100644
index 00000000000..2334b7cd4bf
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/client_root.jks differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/client_root.key b/qa/integration/fixtures/webserver_certs/generated/client_root.key
new file mode 100644
index 00000000000..4069ffe6260
--- /dev/null
+++ b/qa/integration/fixtures/webserver_certs/generated/client_root.key
@@ -0,0 +1,51 @@
+-----BEGIN RSA PRIVATE KEY-----
+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
+-----END RSA PRIVATE KEY-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt
index e772b2ea1fa..b25f13d99a7 100644
--- a/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/intermediate-ca.crt
@@ -1,7 +1,7 @@
 -----BEGIN CERTIFICATE-----
-MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQsFADBKMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
-BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzI4WhcNMjQwNzE1MTgyNzI4WjBVMQsw
+BgNVBAMMBHJvb3QwHhcNMjIwNzA0MTEwNTAxWhcNMjUwMzMwMTEwNTAxWjBVMQsw
 CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
 CgwFTXlMYWIxGDAWBgNVBAMMD2ludGVybWVkaWF0ZS1jYTCCAiIwDQYJKoZIhvcN
 AQEBBQADggIPADCCAgoCggIBAPHXRKHl/LsaDFGnys0b4mlLlGQ6qJSC5ut8FZoa
@@ -17,16 +17,16 @@ TM5PtxpZCLmqELaBFydB5hEBQly8Fxh3SVpuwkcaCxOlXMkdvHEK9daYfE9jV0fu
 StfckkCLdDZMHI+iSdQsqK6E9vc4tX2rnhzgKex0Byu0GUEg6XoFL2GKdUOvRZTJ
 /tMxAgMBAAGjZjBkMB0GA1UdDgQWBBR6wQ0Is6YucsLFNwdZ3ANX1jrgsjAfBgNV
 HSMEGDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jASBgNVHRMBAf8ECDAGAQH/AgEA
-MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAgEANoo45TDx1lfglAmJ
-8nt/58y7fm8trxmrSQmDAIuXZKqATNsEw/+VbIXqeC9sT2lWY9URFmmFm505JP+1
-43nM68cjfAK7ihLcGS7XwQMtQCgiQzJKeZFOx/l30lN5rRje5HHbSIF+uuwO987J
-LNYJ+rS7N25lB5EQY8satuZWMVtSZ7YQCMkSJve7KjfrbE3kORjHs6jn3bdyuWAr
-oApgKJgCUX3JSPZyH3T/xakMneZNkYr0CC1kNi9wL4js5I/nN2Z4er0N1Zt6PIM+
-hIJcW/Qv0BtI4bzkNkGSehm+Ofr+njuqWaaQMF7kLPTGDg/0SN63Y+X59CJQMnjF
-+oW0oGm30S3okFpgXSU+DDxNPlh1j3jTMoArPvIaTceImfmsBXU62JRXQWaAr1jF
-EujYbTJ147/7NmsmnskFO37Mp35JxL3ELWfMeBAL/HC11mzUbGFhtvtFqhQMWMbt
-5AAR9ZUaPO8xTX6Ag8/8MXF5wFRkJBqTNn6GaX5PUrWhlAKpGuAuuR1NBY5TGUHX
-NcFu+bf5JtjhgSUGB0FuZfdZvw46k30NLlT39NbXayY102XYfrAsl0X0TNqjQua1
-7j7FqYrAALQVLfYeKrE0nKaH35nU6Kk1Iy42CbB71MHqcg7DTjn0MvTKZcnQ8pxv
-RQwP+BXkzwfWWEp05rlVeKS0IjQ=
+MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQsFAAOCAgEAT7cpU6PSVp2uUp1X
+Mmg9gOitw0Wa3hHd8RlCM3PA2L6LqhSvuyVrwjssBn6+ISb4pC+j8ckdaA6XGu/v
+wbOBC256amPx5BC++xo8IOCQ5uDXSDhJebarTppaRd3krzSX+WbZsPeVpPtrs6R2
+u9RGKDT9c8V267lU95Cfv3C9a6qLjaTJ/Vj/Qwir97XM+FHzWy6yDbwTCJye8C88
+winD7ZLo71hnk+R4OP1Z1EStQ597fLJMIpj5z3ZTaPIqUvJlRezuNJgqSs/mUmmz
+jZkmDJVYR1SpL1WSTyhvnzLZSM2S+64F3Ed+f4PxRhvQ9UvcCIU1Hnd+XdRA1PTq
+b2v/3yqwTip3fpuhBrh8BrndrW9iV9t17I1nNM+UcQQbn0a5oNO6lZvH9jIEtpf7
+qG2CwANyHaM1I+L3XogQLwCUBp5uTDVgG6xZ1DW24kH4BMTu6xrtAkOpRz7InX4m
+TL60W2AGNyqbJhZLUkyHYeX0jiNTrjSrz8KdDfFNtSVz99wOx+OOaJZGMBOfy8Ty
+UWSihLucjfhKUwRENJInMWaC/Rs6uWwzQ6ZJFYTA6okYP63JZAQpWyNDe7uJzp5t
+ULi6KfswWiwDlI1lTJ03n8LkH7RrHlhaA0yjyttgx3yqO21G+cVtR6H7/UwaE1R/
+k20i7PT51yzwbxtj8zvIwU9X/ts=
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/root.crt b/qa/integration/fixtures/webserver_certs/generated/root.crt
index d5653f0e853..aea171ee302 100644
--- a/qa/integration/fixtures/webserver_certs/generated/root.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/root.crt
@@ -1,32 +1,32 @@
 -----BEGIN CERTIFICATE-----
-MIIFejCCA2KgAwIBAgIJAMwwXnXAAUBzMA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNV
-BAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlzYm9uMQ4wDAYDVQQKDAVN
-eUxhYjENMAsGA1UEAwwEcm9vdDAeFw0yMTEwMTkxODI3MjdaFw0yNjEwMTkxODI3
-MjdaMEoxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlzYm9u
-MQ4wDAYDVQQKDAVNeUxhYjENMAsGA1UEAwwEcm9vdDCCAiIwDQYJKoZIhvcNAQEB
-BQADggIPADCCAgoCggIBAMfReGxhC2tJH3y/4knTrBSrtezJb5fDs9Xy41Gdr5ng
-YEQXi7JQb/MXvGst4xxX77kbBv8uo1egL6gnvZfUqbsrGS8IzhBWtRET+yaYw2ez
-wZW+d9RGjsFTOGvkSpv55/VdGvtaXeMeqTbuyYZSzakNYD7AH2VDCS2q+IdF/ezm
-ocOki5faj6A92yxvbHUZM1jS+Ah/v2yzJOAkrhT1XIBKyaG/g+woQxZpMS0PjpKY
-K7K9XPIkU/Z2gsQkRfDQAxXTqba4Bl84/aA+aLTYqib/5WhxVuc8vjk+7g01y2qX
-5aPYs3L2LToUfwPh/6leHx37d7YouPp3X3CnPyl15r20FjTFKTV6Y0he3tgmWnjC
-BP0/qlCYeh1mnKFQSo688fw7K25dPhcnPctdVp5Xr6jz8GBaGgCu5hEx/QI7WzXy
-qKdyyIj3gEQuHyu8RUrTUA3uruPa8TlouAu616yNNqw3EzrEjmWX+D4HRq32ofkK
-FXqFxFurfzxyVJjX1P2+VP0h8fPoZJzBwfwm1hFxLpROQXVBX+b7j2S4kv/Lp156
-mV0frWXlYwTvtM+7PKONnwSIOkiTic8Zv5TcMLoW6p4RNY6b0SDzt+e90h20OeAS
-R1gv7VhGfR2JYMd1C0Ke8D9i2FebX9r6T/BfRMRJBNKj6wr6OFvhz+eImNuiAaxn
-AgMBAAGjYzBhMB0GA1UdDgQWBBSWO1UVkFl5LOuplY08xBLcfGyc+jAfBgNVHSME
-GDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
-DwEB/wQEAwIBhjANBgkqhkiG9w0BAQsFAAOCAgEAHquJcXAZlMpY3z748dmIfKGb
-7F4fGgTwGJ/9PLIZdZXDRIiA/GZs9IGA+Kykv/95jJsq1ZVN7O7UoBqbTxbsddoU
-EhBe3BKaJtkIuB5anRmw600lZlIFgSU1uSXyZoDBD9LnQnb13f2UQJKvzNbvoisC
-f23JIVCQhGUiqVVYKF80tWlbTpnA+pIPvaWpzSI8FEjz2NGmol948aEp4OET5v/R
-obWImc/X30t5Z4wO620DCNVhwx+zzomAio3dmQRnnUrVT9IwKxFmEA+0V4O4JPUz
-YQMyuLuoqrvywz7JeV3GvCy+yI5uoF7u5m7e5Kh3A1G3xfbw36M3fYAQNhh/5y01
-ySimOmx6CXoX60z31RFlrXgAycLWKixkjllQTMCMvtcFOszLSpP7WoB2/l7s+9oz
-iMEnjwvtUcXJ0rRHr2ENmyG8BBPKZZhKp2b/kumQnYa8Vj8FVFXGijLNF2QHyIWr
-jzc9ntZyUb2LOWA2Dwtk6BxgJrKfx6N4n6itwd//mzCz0GQZEVPwlLUw0qO1qt5+
-dSP5ifsecUSsXge3nl+pZmS60Jo1/sF3QhFiFbKMRi19SqvI2X+vDwAbsS05PMdt
-HpN/JLfaeabqjoYeEpCGRm7ZSIR0Os9c5qJpXo6V9kOUbQKMNwJ075pPaQEE+2Vn
-IQqdInXs3f5UoI5afJQ=
+MIIFhTCCA22gAwIBAgIUS0hk7+/WktG6b53Lr+vRlpDvWk4wDQYJKoZIhvcNAQEL
+BQAwSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYDVQQHDAZMaXNib24x
+DjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290MB4XDTIyMDcwNDExMDQzMFoX
+DTI3MDcwNDExMDQzMFowSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYD
+VQQHDAZMaXNib24xDjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290MIICIjAN
+BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAx9F4bGELa0kffL/iSdOsFKu17Mlv
+l8Oz1fLjUZ2vmeBgRBeLslBv8xe8ay3jHFfvuRsG/y6jV6AvqCe9l9SpuysZLwjO
+EFa1ERP7JpjDZ7PBlb531EaOwVM4a+RKm/nn9V0a+1pd4x6pNu7JhlLNqQ1gPsAf
+ZUMJLar4h0X97Oahw6SLl9qPoD3bLG9sdRkzWNL4CH+/bLMk4CSuFPVcgErJob+D
+7ChDFmkxLQ+Okpgrsr1c8iRT9naCxCRF8NADFdOptrgGXzj9oD5otNiqJv/laHFW
+5zy+OT7uDTXLapflo9izcvYtOhR/A+H/qV4fHft3tii4+ndfcKc/KXXmvbQWNMUp
+NXpjSF7e2CZaeMIE/T+qUJh6HWacoVBKjrzx/Dsrbl0+Fyc9y11WnlevqPPwYFoa
+AK7mETH9AjtbNfKop3LIiPeARC4fK7xFStNQDe6u49rxOWi4C7rXrI02rDcTOsSO
+ZZf4PgdGrfah+QoVeoXEW6t/PHJUmNfU/b5U/SHx8+hknMHB/CbWEXEulE5BdUFf
+5vuPZLiS/8unXnqZXR+tZeVjBO+0z7s8o42fBIg6SJOJzxm/lNwwuhbqnhE1jpvR
+IPO3573SHbQ54BJHWC/tWEZ9HYlgx3ULQp7wP2LYV5tf2vpP8F9ExEkE0qPrCvo4
+W+HP54iY26IBrGcCAwEAAaNjMGEwHQYDVR0OBBYEFJY7VRWQWXks66mVjTzEEtx8
+bJz6MB8GA1UdIwQYMBaAFJY7VRWQWXks66mVjTzEEtx8bJz6MA8GA1UdEwEB/wQF
+MAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQAUMz33/NJH
+gAN+gGngchnMlNwrEmOem4eyxXIBaYirNZ5jHDU2KY4ADm//u4fU6lfHQObXvO8/
+Bb3h1EEGi5kk+xoA1aiZ7q5QgMx29YDXEM55ya/BAWdxSp0Jz/9JjY+CtTdj15Az
+m+ipnTvHYmPFOxTZBxXJtmQNi3V/P6q6IG/ChBObPL79x6Zzo74Sw+VsE9gZ/Jmv
+8SE+ZlKpdhe3QGVRds4qovwWo5Z7KHO8xjFntcbNPsfSTfZsCj48JeJlAAp8loUo
+d7tUOrfTa81n3nB6ie6HOLJRM7uWcT2upYGa19sAOCYyE938vfDk80phdH8wiZW+
+bjv7E6l4iunTQYkc8Y5QOAXmtmrSd7sRBDChxKQhwMZlCYsKoaOaNYg6kHvvA4ku
+B7+QNM+NMjbcefSgYlMLcFg5UKiDLAGxZSzUtuay7j8h9FMFfmUJ13KVRm+MSWpm
+sE0uVzvbP9CHFpydTCpql/5XvY8ILLdLDcusGfJ4IRY9b349FqcoeHFeme9bApxm
+D7VObfSHjPnUs2yYGGlmm8R8KbouDXFhcxvNXDHu9eW1/Jt6EMAdnCqmnNbEVtGe
+lMpXFI9QBIzlHOsWjRc2zzqnAH0ksy/Fbf1wkIR7p2kR3wMF31NbS2Bu7Ve4OWRE
+8xJlJJgF2fPT9SwrWIYn6ZMfhTVk4O6RlQ==
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/root.p12 b/qa/integration/fixtures/webserver_certs/generated/root.p12
new file mode 100644
index 00000000000..7b81f5145b9
Binary files /dev/null and b/qa/integration/fixtures/webserver_certs/generated/root.p12 differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt
index f4c8cf7f5a5..0c5c22844bc 100644
--- a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.chain.crt
@@ -1,7 +1,7 @@
 -----BEGIN CERTIFICATE-----
-MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MIIFgDCCA2igAwIBAgIBATANBgkqhkiG9w0BAQsFADBKMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
-BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzI4WhcNMjQwNzE1MTgyNzI4WjBVMQsw
+BgNVBAMMBHJvb3QwHhcNMjIwNzA0MTEwNTAxWhcNMjUwMzMwMTEwNTAxWjBVMQsw
 CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
 CgwFTXlMYWIxGDAWBgNVBAMMD2ludGVybWVkaWF0ZS1jYTCCAiIwDQYJKoZIhvcN
 AQEBBQADggIPADCCAgoCggIBAPHXRKHl/LsaDFGnys0b4mlLlGQ6qJSC5ut8FZoa
@@ -17,24 +17,24 @@ TM5PtxpZCLmqELaBFydB5hEBQly8Fxh3SVpuwkcaCxOlXMkdvHEK9daYfE9jV0fu
 StfckkCLdDZMHI+iSdQsqK6E9vc4tX2rnhzgKex0Byu0GUEg6XoFL2GKdUOvRZTJ
 /tMxAgMBAAGjZjBkMB0GA1UdDgQWBBR6wQ0Is6YucsLFNwdZ3ANX1jrgsjAfBgNV
 HSMEGDAWgBSWO1UVkFl5LOuplY08xBLcfGyc+jASBgNVHRMBAf8ECDAGAQH/AgEA
-MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAgEANoo45TDx1lfglAmJ
-8nt/58y7fm8trxmrSQmDAIuXZKqATNsEw/+VbIXqeC9sT2lWY9URFmmFm505JP+1
-43nM68cjfAK7ihLcGS7XwQMtQCgiQzJKeZFOx/l30lN5rRje5HHbSIF+uuwO987J
-LNYJ+rS7N25lB5EQY8satuZWMVtSZ7YQCMkSJve7KjfrbE3kORjHs6jn3bdyuWAr
-oApgKJgCUX3JSPZyH3T/xakMneZNkYr0CC1kNi9wL4js5I/nN2Z4er0N1Zt6PIM+
-hIJcW/Qv0BtI4bzkNkGSehm+Ofr+njuqWaaQMF7kLPTGDg/0SN63Y+X59CJQMnjF
-+oW0oGm30S3okFpgXSU+DDxNPlh1j3jTMoArPvIaTceImfmsBXU62JRXQWaAr1jF
-EujYbTJ147/7NmsmnskFO37Mp35JxL3ELWfMeBAL/HC11mzUbGFhtvtFqhQMWMbt
-5AAR9ZUaPO8xTX6Ag8/8MXF5wFRkJBqTNn6GaX5PUrWhlAKpGuAuuR1NBY5TGUHX
-NcFu+bf5JtjhgSUGB0FuZfdZvw46k30NLlT39NbXayY102XYfrAsl0X0TNqjQua1
-7j7FqYrAALQVLfYeKrE0nKaH35nU6Kk1Iy42CbB71MHqcg7DTjn0MvTKZcnQ8pxv
-RQwP+BXkzwfWWEp05rlVeKS0IjQ=
+MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQsFAAOCAgEAT7cpU6PSVp2uUp1X
+Mmg9gOitw0Wa3hHd8RlCM3PA2L6LqhSvuyVrwjssBn6+ISb4pC+j8ckdaA6XGu/v
+wbOBC256amPx5BC++xo8IOCQ5uDXSDhJebarTppaRd3krzSX+WbZsPeVpPtrs6R2
+u9RGKDT9c8V267lU95Cfv3C9a6qLjaTJ/Vj/Qwir97XM+FHzWy6yDbwTCJye8C88
+winD7ZLo71hnk+R4OP1Z1EStQ597fLJMIpj5z3ZTaPIqUvJlRezuNJgqSs/mUmmz
+jZkmDJVYR1SpL1WSTyhvnzLZSM2S+64F3Ed+f4PxRhvQ9UvcCIU1Hnd+XdRA1PTq
+b2v/3yqwTip3fpuhBrh8BrndrW9iV9t17I1nNM+UcQQbn0a5oNO6lZvH9jIEtpf7
+qG2CwANyHaM1I+L3XogQLwCUBp5uTDVgG6xZ1DW24kH4BMTu6xrtAkOpRz7InX4m
+TL60W2AGNyqbJhZLUkyHYeX0jiNTrjSrz8KdDfFNtSVz99wOx+OOaJZGMBOfy8Ty
+UWSihLucjfhKUwRENJInMWaC/Rs6uWwzQ6ZJFYTA6okYP63JZAQpWyNDe7uJzp5t
+ULi6KfswWiwDlI1lTJ03n8LkH7RrHlhaA0yjyttgx3yqO21G+cVtR6H7/UwaE1R/
+k20i7PT51yzwbxtj8zvIwU9X/ts=
 -----END CERTIFICATE-----
 -----BEGIN CERTIFICATE-----
-MIIGSTCCBDGgAwIBAgIBAjANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJQVDEL
+MIIGSTCCBDGgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBVMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxGDAW
-BgNVBAMMD2ludGVybWVkaWF0ZS1jYTAeFw0yMTEwMTkxODI3MzFaFw0yNDA3MTUx
-ODI3MzFaMEwxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlz
+BgNVBAMMD2ludGVybWVkaWF0ZS1jYTAeFw0yMjA3MDQxMTA1MzVaFw0yNTAzMzAx
+MTA1MzVaMEwxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlz
 Ym9uMQ4wDAYDVQQKDAVNeUxhYjEPMA0GA1UEAwwGc2VydmVyMIICIjANBgkqhkiG
 9w0BAQEFAAOCAg8AMIICCgKCAgEAvkyxB/z2frDqa1F3lDqkW5L0F5L0sGZiOnzR
 0kgPsPtxIjt3ntm+8SZAL7dJ4VSmH7DNo/IUtwent/ypN9b7rR11kl3EDcCoISPf
@@ -53,16 +53,16 @@ aWNhdGUwHQYDVR0OBBYEFBFYhgtW76vGDcp6aW80KokkSmJgMHIGA1UdIwRrMGmA
 FHrBDQizpi5ywsU3B1ncA1fWOuCyoU6kTDBKMQswCQYDVQQGEwJQVDELMAkGA1UE
 CAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTALBgNVBAMM
 BHJvb3SCAQEwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoG
-A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAnwfk
-vd9EAll9Bo8G2Hj5ibLDnS4hdFnT3Z8J3Okgj8jme6vKInJrNm7wepWZEqq/Sqhs
-B4uYCHYN86WrOalSqON3KsT0cue6gRKXSe/zjhNc9Uk2emJsR+uPNrUrfrIlL7Z8
-IQmewQTkfbsKL+AqT3VzIdPENnEK1N9u5w0ie5vxVz2xPbtVjqmsNgiFaAP3r8pA
-mIKW3Pbay8q3wMEAWXw6EHTKelj9/7QpshzgR3AM9sYnbcr+pycRZTBEwuCv5Kvm
-jbUFxY8BMZPS/b0ZbPgs8rBxE0BhMt+VlgpDbskeT25/0V2pPbAcyHQth6Qker5w
-DcycKMaGGQYivLfyz+9kktIOm3AGoUdCHRxAc7xmSkIhFhQVzEgAnlK0QeojntOg
-c65vbgy9x6WdTkSwMBRa4d9oNPSreTIq1ygUKOAwxZo+X38q4Oo4MTQrXDNOhGbR
-/ylw/avihYJszGl9lCni6kIuqCw8CN2pvQTQcvU9UJTgy6LC7CzPqFfPjBXxN65P
-WV+7N0dZ9MWHb+eAoVA/ykUrp52oStAqCYLRwCxC5NjDRXR6AdXtXTC9a3T3JLkR
-LW7j8CqFmbMjhuys3Y8MEysgxKAg1PFggkeN5O5uOJXWqlUF8X2ipoMSnSIIa+Q6
-4C4CAspB8k7S5LNUVzw7V4RVLG4Mi1cSCy+Sggc=
+A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAgEApnWM
+JWt1oSzyCMSHyoMio3diEdgDBmzDfVTmtu8ZLa9lBP+YjQPtik61VGmMEndBezTr
+AQRH5Mf13Oz6npG6MqbLAGXM0yGLC5X/l3HSqrPNlz6BFBZNVKE0u8KBBu81A+Fa
+A4o/A0HjV0QnDj5UXGgzS0iXRYbX/vy5bSO99OH8hreN6c4eH/53vQ5XJlx5uHDO
+SZVOujNmPMel+HgRXK/5W+Qjt3k1VRagDbtWtfQYGs0/lVQmImt+x1Uyr46YdGaa
+Q5Wzb0TfFjZuSa85iNn7L3zoQIFGLvkLg0Pl/jifFaIflAtgahuJqehLtzrCN2EL
+NCe3R0j+d8BZHArIgXS9KUC63iuiWyH7KJcCU+dHL8JNpDLspIPWRN1/HKV5dHSf
+j0AJAmQ3qS5NTSNS8hOaJlVAsHohn4/c1iMbUf8Koph4xGpPEec7QgEm8w6PsRaH
+3V8pOyRh2M2HOSlgkI8ettJojr2niglS+4NIl6mZBm9WS6qM16NToVLWM2Bk8o7U
+VO8ziRiXsd/6Iv7rZw3c85N65dNGiW5qUDkHV/8eQUtVhVKoBf51zfr+uqegyeUt
+WGSE5DlcDlWu+eqUy7OZ5EegnTGI3FnVc8F3+9zVxhak4HBy9wpfCNGXn3ypUCsi
+575qV0YNS+VVr+aP0Bf5qyTwop5I/zp3p+9x9NY=
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt
index 7329e46a571..fd3900e1af9 100644
--- a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.crt
@@ -1,8 +1,8 @@
 -----BEGIN CERTIFICATE-----
-MIIGSTCCBDGgAwIBAgIBAjANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJQVDEL
+MIIGSTCCBDGgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBVMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxGDAW
-BgNVBAMMD2ludGVybWVkaWF0ZS1jYTAeFw0yMTEwMTkxODI3MzFaFw0yNDA3MTUx
-ODI3MzFaMEwxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlz
+BgNVBAMMD2ludGVybWVkaWF0ZS1jYTAeFw0yMjA3MDQxMTA1MzVaFw0yNTAzMzAx
+MTA1MzVaMEwxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0GA1UEBwwGTGlz
 Ym9uMQ4wDAYDVQQKDAVNeUxhYjEPMA0GA1UEAwwGc2VydmVyMIICIjANBgkqhkiG
 9w0BAQEFAAOCAg8AMIICCgKCAgEAvkyxB/z2frDqa1F3lDqkW5L0F5L0sGZiOnzR
 0kgPsPtxIjt3ntm+8SZAL7dJ4VSmH7DNo/IUtwent/ypN9b7rR11kl3EDcCoISPf
@@ -21,16 +21,16 @@ aWNhdGUwHQYDVR0OBBYEFBFYhgtW76vGDcp6aW80KokkSmJgMHIGA1UdIwRrMGmA
 FHrBDQizpi5ywsU3B1ncA1fWOuCyoU6kTDBKMQswCQYDVQQGEwJQVDELMAkGA1UE
 CAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTALBgNVBAMM
 BHJvb3SCAQEwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoG
-A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAnwfk
-vd9EAll9Bo8G2Hj5ibLDnS4hdFnT3Z8J3Okgj8jme6vKInJrNm7wepWZEqq/Sqhs
-B4uYCHYN86WrOalSqON3KsT0cue6gRKXSe/zjhNc9Uk2emJsR+uPNrUrfrIlL7Z8
-IQmewQTkfbsKL+AqT3VzIdPENnEK1N9u5w0ie5vxVz2xPbtVjqmsNgiFaAP3r8pA
-mIKW3Pbay8q3wMEAWXw6EHTKelj9/7QpshzgR3AM9sYnbcr+pycRZTBEwuCv5Kvm
-jbUFxY8BMZPS/b0ZbPgs8rBxE0BhMt+VlgpDbskeT25/0V2pPbAcyHQth6Qker5w
-DcycKMaGGQYivLfyz+9kktIOm3AGoUdCHRxAc7xmSkIhFhQVzEgAnlK0QeojntOg
-c65vbgy9x6WdTkSwMBRa4d9oNPSreTIq1ygUKOAwxZo+X38q4Oo4MTQrXDNOhGbR
-/ylw/avihYJszGl9lCni6kIuqCw8CN2pvQTQcvU9UJTgy6LC7CzPqFfPjBXxN65P
-WV+7N0dZ9MWHb+eAoVA/ykUrp52oStAqCYLRwCxC5NjDRXR6AdXtXTC9a3T3JLkR
-LW7j8CqFmbMjhuys3Y8MEysgxKAg1PFggkeN5O5uOJXWqlUF8X2ipoMSnSIIa+Q6
-4C4CAspB8k7S5LNUVzw7V4RVLG4Mi1cSCy+Sggc=
+A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAgEApnWM
+JWt1oSzyCMSHyoMio3diEdgDBmzDfVTmtu8ZLa9lBP+YjQPtik61VGmMEndBezTr
+AQRH5Mf13Oz6npG6MqbLAGXM0yGLC5X/l3HSqrPNlz6BFBZNVKE0u8KBBu81A+Fa
+A4o/A0HjV0QnDj5UXGgzS0iXRYbX/vy5bSO99OH8hreN6c4eH/53vQ5XJlx5uHDO
+SZVOujNmPMel+HgRXK/5W+Qjt3k1VRagDbtWtfQYGs0/lVQmImt+x1Uyr46YdGaa
+Q5Wzb0TfFjZuSa85iNn7L3zoQIFGLvkLg0Pl/jifFaIflAtgahuJqehLtzrCN2EL
+NCe3R0j+d8BZHArIgXS9KUC63iuiWyH7KJcCU+dHL8JNpDLspIPWRN1/HKV5dHSf
+j0AJAmQ3qS5NTSNS8hOaJlVAsHohn4/c1iMbUf8Koph4xGpPEec7QgEm8w6PsRaH
+3V8pOyRh2M2HOSlgkI8ettJojr2niglS+4NIl6mZBm9WS6qM16NToVLWM2Bk8o7U
+VO8ziRiXsd/6Iv7rZw3c85N65dNGiW5qUDkHV/8eQUtVhVKoBf51zfr+uqegyeUt
+WGSE5DlcDlWu+eqUy7OZ5EegnTGI3FnVc8F3+9zVxhak4HBy9wpfCNGXn3ypUCsi
+575qV0YNS+VVr+aP0Bf5qyTwop5I/zp3p+9x9NY=
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks
index 86a0a72c5db..1e20ad1d44c 100644
Binary files a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks and b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.jks differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12 b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12
index 3181caeb3bd..49ff4c1e770 100644
Binary files a/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12 and b/qa/integration/fixtures/webserver_certs/generated/server_from_intermediate.p12 differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt
index 6ba9acb7a07..e272d73bb38 100644
--- a/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_root.chain.crt
@@ -1,7 +1,7 @@
 -----BEGIN CERTIFICATE-----
-MIIGRjCCBC6gAwIBAgIBAzANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MIIGUjCCBDqgAwIBAgIBAzANBgkqhkiG9w0BAQsFADBKMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
-BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzMyWhcNMjQwNzE1MTgyNzMyWjBMMQsw
+BgNVBAMMBHJvb3QwHhcNMjIwNzA0MTEwNTUyWhcNMjUwMzMwMTEwNTUyWjBMMQsw
 CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
 CgwFTXlMYWIxDzANBgNVBAMMBnNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIP
 ADCCAgoCggIBAKJZa8jP+LalBAlQ8uWWlTm8TLHWkGLFxr+rNzs23mAAfLo8FFGJ
@@ -15,22 +15,22 @@ PMIKCU6TR5OPZHsb87u7iXlc+NO+tBoFtgOVK7LvN/QwQ1At4hQaLcrpEJwtjfk/
 8jrC22Ewgp1LMakAsmDjGkkOBZPL5VeNgNnUEp9/AHYfH1XmpkLUOoRmUVkVDqfs
 FVcFTLLb2XDtZWtl+gJ5cXxnr87dj5X2Xowo2BMKBwwMpThmJX+i2yY420hq9uu6
 xzPjUC7NauaPnIYCIjWtaBqruXWMxX9DISED71aAVAOSqXbv2fFpKMpRAgMBAAGj
-ggEzMIIBLzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
+ggE/MIIBOzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
 AQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgU2VydmVyIENlcnRpZmljYXRlMB0GA1Ud
-DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDB6BgNVHSMEczBxgBSWO1UVkFl5LOup
-lY08xBLcfGyc+qFOpEwwSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYD
-VQQHDAZMaXNib24xDjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290ggkAzDBe
-dcABQHMwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoGA1Ud
-EQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAoUitYEBW
-lzBMuuDMHvVrtwTcKNXeOXZ6PC78OXNxGCSK4CxTzOceyHjj0K30r2qOd4hNbq43
-J60Zf+69qIpkezG3hcCy/8Yu1lLyhxLvErCbgkvZ1MH4HkEyJOeoh0PJoIq1U3vu
-SA2Ny6LDA5QOWaVME6c1L0ntueu5/BddrTGtqHvK4Td9E3Y8gQhtJHCkN2GbkRRS
-vr2+efC2hNIWEfxFTP+RRKKGfn+B+YASPgLDvHpIapz65MVebJH+gIo/k57swPMJ
-K3Zet53tXqUvnbh87vyGdaOpq897WISNfleQ/XJB28Q3G5qBdLiTu7oxYG42XhC1
-qIm4pZ/gGW5lauu3h9bvzODB2DV6ShnBujtzbd0vBBX38BMP2oOOQ3X2QgalGOKO
-jd6yTCN6VO0ZiFD4xO2XsE1CKkRqPx9rRCKR85NCvlpyytC4KIZjcomf0miMl9e1
-G9Js2y9agiXgQ5lrlZSQ8XyvRD8PC1anCxeyn8HaBblYNwUZ8S6vXkq7K13MuPgX
-3vw106gUcWjw6GwC3BOi7UNtcAYyoXn6jLJ2unpn2mqjpCfbQZ3mnAI7MbEoaSFa
-1CTYh9bxYK6cN+8dOnYoXUyD27aDq6xfP9YJoNmQdYTW4Wwf5JCK23j2DtDB/qen
-uyydJBuI6Me+ctWntImvjM97Teu8s+ssQaA=
+DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDCBhQYDVR0jBH4wfIAUljtVFZBZeSzr
+qZWNPMQS3HxsnPqhTqRMMEoxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0G
+A1UEBwwGTGlzYm9uMQ4wDAYDVQQKDAVNeUxhYjENMAsGA1UEAwwEcm9vdIIUS0hk
+7+/WktG6b53Lr+vRlpDvWk4wDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsG
+AQUFBwMBMBoGA1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsF
+AAOCAgEAPQKWfd+r0hjOps1TBrgKT5vVmnjjfxjYBFvPwcxo3SS4hH2Ty1dncJga
+EcsAMSQCBuqq15dkg6ASKI3+ibaUOnhwd5afwY114V4YEOIj2LW85mpnxiXTuRDC
+M0JoFUD+KARjBK9/CGwrt7fABUL09QQXAy0pRdJ3NOLurzIZ0h/slTKDZ1ZxYtPn
+SGDwACL3sI5cYmN8Tj+H5gQ8i693NlTgzXFcNX5yOMcnOWo0XxhFuET16QKNbljm
+5asrs2McfWdeZ5b4/RBHN33Stcd5sw10hKsbwQNTQ1JjT9BaWkr8SCdjoIv0+F26
+Br6s2WYQFaI06ywL+/Hd6MnUZVdBsvYWb1CPkMo8pXFdYmQWayK8783wJP3S5JF+
+QTpXUUHsSr7t6AtCC5zbJKAFVSUsITlyKON4iWSf3jwq6DEioKZ3BRecgU3UJW4F
+Fsnt5HSkrgMoMNdqYzud5I4vDDXeC9xf27SLH8Wyztp6cqENZGmUqJuKhgYwiY4W
++IH6WeiLGk+TxzrxUCqopoLgds6PPyzZn6AFT7ABzHkJaBTyqTa7I1nOJrUPobkQ
+Q+ffRl63eMlVGHSJAWUJap/l+cAapHTnmJaJn4WpdaxbF2XtqHXkCWNs0MnGPfhw
+dwYFFDIgk91e+BZ/Wj0YSclVNMvD4EDr1J35puhR30BnkfuI5rk=
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt b/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt
index 6ba9acb7a07..e272d73bb38 100644
--- a/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt
+++ b/qa/integration/fixtures/webserver_certs/generated/server_from_root.crt
@@ -1,7 +1,7 @@
 -----BEGIN CERTIFICATE-----
-MIIGRjCCBC6gAwIBAgIBAzANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJQVDEL
+MIIGUjCCBDqgAwIBAgIBAzANBgkqhkiG9w0BAQsFADBKMQswCQYDVQQGEwJQVDEL
 MAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UECgwFTXlMYWIxDTAL
-BgNVBAMMBHJvb3QwHhcNMjExMDE5MTgyNzMyWhcNMjQwNzE1MTgyNzMyWjBMMQsw
+BgNVBAMMBHJvb3QwHhcNMjIwNzA0MTEwNTUyWhcNMjUwMzMwMTEwNTUyWjBMMQsw
 CQYDVQQGEwJQVDELMAkGA1UECAwCTkExDzANBgNVBAcMBkxpc2JvbjEOMAwGA1UE
 CgwFTXlMYWIxDzANBgNVBAMMBnNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIP
 ADCCAgoCggIBAKJZa8jP+LalBAlQ8uWWlTm8TLHWkGLFxr+rNzs23mAAfLo8FFGJ
@@ -15,22 +15,22 @@ PMIKCU6TR5OPZHsb87u7iXlc+NO+tBoFtgOVK7LvN/QwQ1At4hQaLcrpEJwtjfk/
 8jrC22Ewgp1LMakAsmDjGkkOBZPL5VeNgNnUEp9/AHYfH1XmpkLUOoRmUVkVDqfs
 FVcFTLLb2XDtZWtl+gJ5cXxnr87dj5X2Xowo2BMKBwwMpThmJX+i2yY420hq9uu6
 xzPjUC7NauaPnIYCIjWtaBqruXWMxX9DISED71aAVAOSqXbv2fFpKMpRAgMBAAGj
-ggEzMIIBLzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
+ggE/MIIBOzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAzBglghkgBhvhC
 AQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgU2VydmVyIENlcnRpZmljYXRlMB0GA1Ud
-DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDB6BgNVHSMEczBxgBSWO1UVkFl5LOup
-lY08xBLcfGyc+qFOpEwwSjELMAkGA1UEBhMCUFQxCzAJBgNVBAgMAk5BMQ8wDQYD
-VQQHDAZMaXNib24xDjAMBgNVBAoMBU15TGFiMQ0wCwYDVQQDDARyb290ggkAzDBe
-dcABQHMwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBoGA1Ud
-EQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQUFAAOCAgEAoUitYEBW
-lzBMuuDMHvVrtwTcKNXeOXZ6PC78OXNxGCSK4CxTzOceyHjj0K30r2qOd4hNbq43
-J60Zf+69qIpkezG3hcCy/8Yu1lLyhxLvErCbgkvZ1MH4HkEyJOeoh0PJoIq1U3vu
-SA2Ny6LDA5QOWaVME6c1L0ntueu5/BddrTGtqHvK4Td9E3Y8gQhtJHCkN2GbkRRS
-vr2+efC2hNIWEfxFTP+RRKKGfn+B+YASPgLDvHpIapz65MVebJH+gIo/k57swPMJ
-K3Zet53tXqUvnbh87vyGdaOpq897WISNfleQ/XJB28Q3G5qBdLiTu7oxYG42XhC1
-qIm4pZ/gGW5lauu3h9bvzODB2DV6ShnBujtzbd0vBBX38BMP2oOOQ3X2QgalGOKO
-jd6yTCN6VO0ZiFD4xO2XsE1CKkRqPx9rRCKR85NCvlpyytC4KIZjcomf0miMl9e1
-G9Js2y9agiXgQ5lrlZSQ8XyvRD8PC1anCxeyn8HaBblYNwUZ8S6vXkq7K13MuPgX
-3vw106gUcWjw6GwC3BOi7UNtcAYyoXn6jLJ2unpn2mqjpCfbQZ3mnAI7MbEoaSFa
-1CTYh9bxYK6cN+8dOnYoXUyD27aDq6xfP9YJoNmQdYTW4Wwf5JCK23j2DtDB/qen
-uyydJBuI6Me+ctWntImvjM97Teu8s+ssQaA=
+DgQWBBQGuAQ6NLkmWyZGLYEAYVc3+43eIDCBhQYDVR0jBH4wfIAUljtVFZBZeSzr
+qZWNPMQS3HxsnPqhTqRMMEoxCzAJBgNVBAYTAlBUMQswCQYDVQQIDAJOQTEPMA0G
+A1UEBwwGTGlzYm9uMQ4wDAYDVQQKDAVNeUxhYjENMAsGA1UEAwwEcm9vdIIUS0hk
+7+/WktG6b53Lr+vRlpDvWk4wDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsG
+AQUFBwMBMBoGA1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsF
+AAOCAgEAPQKWfd+r0hjOps1TBrgKT5vVmnjjfxjYBFvPwcxo3SS4hH2Ty1dncJga
+EcsAMSQCBuqq15dkg6ASKI3+ibaUOnhwd5afwY114V4YEOIj2LW85mpnxiXTuRDC
+M0JoFUD+KARjBK9/CGwrt7fABUL09QQXAy0pRdJ3NOLurzIZ0h/slTKDZ1ZxYtPn
+SGDwACL3sI5cYmN8Tj+H5gQ8i693NlTgzXFcNX5yOMcnOWo0XxhFuET16QKNbljm
+5asrs2McfWdeZ5b4/RBHN33Stcd5sw10hKsbwQNTQ1JjT9BaWkr8SCdjoIv0+F26
+Br6s2WYQFaI06ywL+/Hd6MnUZVdBsvYWb1CPkMo8pXFdYmQWayK8783wJP3S5JF+
+QTpXUUHsSr7t6AtCC5zbJKAFVSUsITlyKON4iWSf3jwq6DEioKZ3BRecgU3UJW4F
+Fsnt5HSkrgMoMNdqYzud5I4vDDXeC9xf27SLH8Wyztp6cqENZGmUqJuKhgYwiY4W
++IH6WeiLGk+TxzrxUCqopoLgds6PPyzZn6AFT7ABzHkJaBTyqTa7I1nOJrUPobkQ
+Q+ffRl63eMlVGHSJAWUJap/l+cAapHTnmJaJn4WpdaxbF2XtqHXkCWNs0MnGPfhw
+dwYFFDIgk91e+BZ/Wj0YSclVNMvD4EDr1J35puhR30BnkfuI5rk=
 -----END CERTIFICATE-----
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks b/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks
index 1596eef7b5d..983b669c66b 100644
Binary files a/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks and b/qa/integration/fixtures/webserver_certs/generated/server_from_root.jks differ
diff --git a/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12 b/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12
index 11d41714b40..3ae7f6b777a 100644
Binary files a/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12 and b/qa/integration/fixtures/webserver_certs/generated/server_from_root.p12 differ
diff --git a/qa/integration/specs/webserver_spec.rb b/qa/integration/specs/webserver_spec.rb
index de19b93782e..ead6c19817d 100644
--- a/qa/integration/specs/webserver_spec.rb
+++ b/qa/integration/specs/webserver_spec.rb
@@ -16,12 +16,14 @@
 # under the License.
 
 require 'openssl'
+require 'manticore'
+require 'stud/try'
 
 require 'logstash/util'
 require 'logstash/webserver'
 
 describe 'api webserver' do
-  let!(:logger) { double("Logger").as_null_object }
+  let(:logger) { LogStash::WebServer.logger }
   let!(:agent) { double("Agent").as_null_object }
   subject(:webserver) { LogStash::WebServer.new(logger, agent, webserver_options) }
 
@@ -36,6 +38,7 @@
     # thread, ensure that a crash doesn't go unnoticed.
     around(:each) do |example|
       abort = Thread.abort_on_exception
+      Thread.abort_on_exception = true
       example.call
       Thread.abort_on_exception = abort
     end
@@ -55,6 +58,10 @@
     end
   end
 
+  let(:certs_path) { File.expand_path("../../fixtures/webserver_certs/generated", __FILE__) }
+  let(:ca_file) { File.join(certs_path, "root.crt") }
+  let(:keystore_password) { "12345678" }
+
   %w(
       server_from_root.p12
       server_from_intermediate.p12
@@ -62,10 +69,8 @@
       server_from_intermediate.jks
     ).each do |keystore_name|
     context "when configured with keystore #{keystore_name}" do
-      let(:ca_file) { File.join(certs_path, "root.crt") }
-      let(:certs_path) { File.expand_path("../../fixtures/webserver_certs/generated", __FILE__) }
+
       let(:keystore_path) { File.join(certs_path, "#{keystore_name}") }
-      let(:keystore_password) { "12345678" }
 
       let(:ssl_params) { {:keystore_path => keystore_path, :keystore_password => LogStash::Util::Password.new(keystore_password)} }
       let(:webserver_options) { super().merge(:ssl_params => ssl_params) }
@@ -73,7 +78,7 @@
       context 'and invalid credentials' do
         let(:keystore_password) { "wrong" }
         it 'raises a helpful error' do
-          expect { webserver }.to raise_error(ArgumentError, a_string_including("keystore password was incorrect"))
+          expect { webserver }.to raise_error(ArgumentError, /keystore password was incorrect|or password was incorrect/) # .p12 vs .jks error message
         end
       end
 
@@ -91,7 +96,7 @@
           # If this fails, we cannot trust success from the other specs
           context 'without providing CA' do
             it 'fails' do
-              client = Manticore::Client.new(ssl: { })
+              client = Manticore::Client.new(automatic_retries: 0, ssl: { })
               expect do
                 client.get("https://127.0.0.1:#{webserver.port}").code
               end.to raise_error(Manticore::ClientProtocolException, a_string_including("unable to find valid certification path to requested target"))
@@ -101,7 +106,7 @@
 
         context 'an HTTP request' do
           it 'fails' do
-            client = Manticore::Client.new
+            client = Manticore::Client.new(automatic_retries: 1)
             expect do
               client.get("http://127.0.0.1:#{webserver.port}").code
             end.to raise_error(Manticore::ClientProtocolException, a_string_including("failed to respond"))
@@ -109,5 +114,99 @@
         end
       end
     end
+
+    context "when using truststore" do
+      let(:keystore_path) { File.join(certs_path, 'server_from_root.p12') }
+      let(:truststore_path) { File.join(certs_path, 'client_root.jks') }
+      let(:ca_file) { File.join(certs_path, "root.crt") }
+
+      let(:ssl_params) do
+        {
+          :keystore_path => keystore_path,
+          :keystore_password => LogStash::Util::Password.new(keystore_password),
+          :truststore_path => truststore_path
+        }
+      end
+      let(:webserver_options) { super().merge(:ssl_params => ssl_params) }
+
+      context "when started" do
+        include_context 'running webserver'
+
+        context 'an HTTPS request' do
+          it 'succeeds' do
+            client = Manticore::Client.new(automatic_retries: 0, ssl: { ca_file: ca_file })
+            response = client.get("https://127.0.0.1:#{webserver.port}")
+            expect(response.code).to eq(200)
+          end
+
+          # this is mostly a sanity check for our testing methodology
+          # If this fails, we cannot trust success from the other specs
+          context 'without providing CA' do
+            it 'fails' do
+              client = Manticore::Client.new(automatic_retries: 1, ssl: { })
+              expect do
+                client.get("https://127.0.0.1:#{webserver.port}").code
+              end.to raise_error(Manticore::ClientProtocolException, a_string_including("unable to find valid certification path to requested target"))
+            end
+          end
+        end
+
+        context 'full verification' do
+
+          let(:ssl_params) { super().merge verification_mode: 'full', protocols: [ 'TLSv1.2' ] }
+          let(:client_cert) { File.join(certs_path, "client_from_root.crt") }
+          let(:client_key) { File.join(certs_path, "client_from_root.key") }
+
+          let(:curl_base_opts) { "--tlsv1.2 --tls-max 1.3" }
+
+          it 'works with client certificate' do
+            expect(logger).to_not receive(:info)
+
+            # NOTE: not using Manticore as I failed to get it to properly sent client certificate during TLS.
+            # client = Manticore::Client.new(automatic_retries: 0,
+            #                                ssl: { ca_file: ca_file,
+            #                                       client_cert: OpenSSL::X509::Certificate.new(File.read(client_cert)),
+            #                                       client_key: OpenSSL::PKey.read(client_key),
+            #                                       verify: :strict })
+
+            curl_opts = curl_base_opts + " --cacert #{ca_file}" + " --cert #{client_cert}" + " --key #{client_key}"
+            res = do_curl("https://127.0.0.1:#{webserver.port}", curl_opts)
+          end
+
+          it 'fails' do
+            expect(logger).to receive(:info).with('SSL error', hash_including(error: kind_of(Puma::MiniSSL::SSLError)))
+
+            curl_opts = curl_base_opts + " --cacert #{ca_file}"
+            expect do
+              do_curl("https://127.0.0.1:#{webserver.port}", curl_opts)
+            end.to raise_error(RuntimeError, /Empty reply from server/)
+          end
+        end
+      end
+    end
+
   end
+
+  def do_curl(url, opts); require 'open3'
+    cmd = "curl -s -v --show-error #{opts} -X GET -k #{url}"
+    begin
+      out, err, status = Open3.capture3(cmd)
+    rescue Errno::ENOENT
+      fail "curl not available, make sure curl binary is installed and available on $PATH"
+    end
+
+    if status.success?
+      http_status = err.match(/< HTTP\/1.1 (\d+)/)[1] || '0' # < HTTP/1.1 200 OK\r\n
+
+      if http_status.strip[0].to_i > 2
+        warn out
+        fail "#{cmd.inspect} unexpected response: #{http_status}\n\n#{err}"
+      end
+      return http_status
+    else
+      warn out
+      fail "#{cmd.inspect} process failed: #{status}\n\n#{err}"
+    end
+  end
+
 end
\ No newline at end of file
diff --git a/x-pack/lib/helpers/elasticsearch_options.rb b/x-pack/lib/helpers/elasticsearch_options.rb
index c3afb64fe72..9c1176cfc0b 100644
--- a/x-pack/lib/helpers/elasticsearch_options.rb
+++ b/x-pack/lib/helpers/elasticsearch_options.rb
@@ -120,7 +120,7 @@ def es_options_from_modules(settings)
 
       opts = {}
 
-      setting = LogStash::Setting::SplittableStringArray.new("var.elasticsearch.hosts", String, ["localhost:9200"])
+      setting = LogStash::Setting::SplittableStringArray.new("var.elasticsearch.hosts", ["localhost:9200"])
       raw_value = module_settings[setting.name]
       setting.set(raw_value) unless raw_value.nil?
       opts['hosts'] = setting.value
diff --git a/x-pack/modules/arcsight/configuration/logstash/arcsight.conf.erb b/x-pack/modules/arcsight/configuration/logstash/arcsight.conf.erb
index 4f021b21058..a1252d724f7 100644
--- a/x-pack/modules/arcsight/configuration/logstash/arcsight.conf.erb
+++ b/x-pack/modules/arcsight/configuration/logstash/arcsight.conf.erb
@@ -18,8 +18,8 @@ input {
   <% if defined_inputs.include?("kafka") %>
   kafka {
     codec => cef
-    bootstrap_servers => <%= csv_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.input.kafka.bootstrap_servers", String, "localhost:39092"))) %>
-    topics => <%= array_to_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.input.kafka.topics", String, ["eb-cef"]))) %>
+    bootstrap_servers => <%= csv_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.input.kafka.bootstrap_servers", "localhost:39092"))) %>
+    topics => <%= array_to_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.input.kafka.topics", ["eb-cef"]))) %>
     <%= LogStash::Arcsight::ConfigHelper.kafka_input_ssl_sasl_config(self) %>
     type => _doc
   }
diff --git a/x-pack/modules/arcsight/lib/arcsight_module_config_helper.rb b/x-pack/modules/arcsight/lib/arcsight_module_config_helper.rb
index c5a5ef3eafe..bcd0ff33eba 100644
--- a/x-pack/modules/arcsight/lib/arcsight_module_config_helper.rb
+++ b/x-pack/modules/arcsight/lib/arcsight_module_config_helper.rb
@@ -56,7 +56,7 @@ def tcp_input_ssl_config(bound_scope)
         lines.push("ssl_key_passphrase => '#{ bound_scope.setting("var.input.tcp.ssl_key_passphrase", "")}'")
 
         certs_array_as_string = bound_scope.array_to_string(
-          bound_scope.get_setting(LogStash::Setting::SplittableStringArray.new("var.input.tcp.ssl_extra_chain_certs", String, []))
+          bound_scope.get_setting(LogStash::Setting::SplittableStringArray.new("var.input.tcp.ssl_extra_chain_certs", []))
         )
         lines.push("ssl_extra_chain_certs => #{certs_array_as_string}")
 
