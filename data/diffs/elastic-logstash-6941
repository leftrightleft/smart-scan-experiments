diff --git a/.gitignore b/.gitignore
index 07084d36dcc..0bc651731c9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -47,3 +47,4 @@ qa/integration/services/installed/
 **/.settings
 **/.classpath
 logstash-core/bin
+plugins_version_docs.json
diff --git a/ci/ci_docs.sh b/ci/ci_docs.sh
index 80c77505fac..c098614b7f1 100755
--- a/ci/ci_docs.sh
+++ b/ci/ci_docs.sh
@@ -1,23 +1,14 @@
 #!/usr/bin/env bash
 set -e
 
-output_dir=$1
+export JRUBY_OPTS="-J-Xmx2g"
 
-if [[ -z $output_dir ]]; then
-  echo "Docs will be generated in default directory in LS_HOME/build/docs"
-else
-  echo "Docs will be generated in directory $output_dir"
-fi
-
-# Since we are using the system jruby, we need to make sure our jvm process
-# uses at least 1g of memory, If we don't do this we can get OOM issues when
-# installing gems. See https://github.com/elastic/logstash/issues/5179
-export JRUBY_OPTS="-J-Xmx1g"
-
-mkdir -p build/docs
-rm -rf build/docs/*
-
-grep -q -F "logstash-docgen" Gemfile || echo 'gem "logstash-docgen", :path => "./tools/logstash-docgen"' >> Gemfile
 rake bootstrap
+# needed to workaround `group => :development`
 rake test:install-core
-rake docs:generate-plugins[$output_dir]
+rake plugin:install-default
+echo "Generate json with plugins version"
+# Since we generate the lock file and we try to resolve dependencies we will need
+# to use the bundle wrapper to correctly find the rake cli. If we don't do this we
+# will get an activation error,
+./bin/bundle exec rake generate_plugins_version
diff --git a/ci/ci_docs_master.sh b/ci/ci_docs_master.sh
deleted file mode 100755
index d337d2894fa..00000000000
--- a/ci/ci_docs_master.sh
+++ /dev/null
@@ -1,15 +0,0 @@
-#!/usr/bin/env bash
-set -e
-
-# Since we are using the system jruby, we need to make sure our jvm process
-# uses at least 1g of memory, If we don't do this we can get OOM issues when
-# installing gems. See https://github.com/elastic/logstash/issues/5179
-export JRUBY_OPTS="-J-Xmx1g"
-
-mkdir -p build/docs
-rm -rf build/docs/*
-rm -rf tools/logstash-docgen/source
-
-cd tools/logstash-docgen
-bundle install
-bin/logstash-docgen --all --target ../../build/docs
diff --git a/docs/include/codec.asciidoc b/docs/include/codec.asciidoc
new file mode 100644
index 00000000000..8b137891791
--- /dev/null
+++ b/docs/include/codec.asciidoc
@@ -0,0 +1 @@
+
diff --git a/docs/include/filter.asciidoc b/docs/include/filter.asciidoc
new file mode 100644
index 00000000000..317da871712
--- /dev/null
+++ b/docs/include/filter.asciidoc
@@ -0,0 +1,171 @@
+[id="plugins-{type}s-common-options"]
+==== Common Options
+
+The following configuration options are supported by all filter plugins:
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-add_field>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-add_tag>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-enable_metric>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-id>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-periodic_flush>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-remove_field>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-remove_tag>> |<<array,array>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-add_field"]
+===== `add_field`
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+If this filter is successful, add any arbitrary fields to this event.
+Field names can be dynamic and include parts of the event using the `%{field}`.
+
+Example:
+[source,ruby]
+    filter {
+      PLUGIN_NAME {
+        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
+      }
+    }
+[source,ruby]
+    # You can also add multiple fields at once:
+    filter {
+      PLUGIN_NAME {
+        add_field => {
+          "foo_%{somefield}" => "Hello world, from %{host}"
+          "new_field" => "new_static_value"
+        }
+      }
+    }
+
+If the event has field `"somefield" == "hello"` this filter, on success,
+would add field `foo_hello` if it is present, with the
+value above and the `%{host}` piece replaced with that value from the
+event. The second example would also add a hardcoded field.
+
+[id="plugins-{type}s-{plugin}-add_tag"]
+===== `add_tag`
+
+  * Value type is <<array,array>>
+  * Default value is `[]`
+
+If this filter is successful, add arbitrary tags to the event.
+Tags can be dynamic and include parts of the event using the `%{field}`
+syntax.
+
+Example:
+[source,ruby]
+    filter {
+      PLUGIN_NAME {
+        add_tag => [ "foo_%{somefield}" ]
+      }
+    }
+[source,ruby]
+    # You can also add multiple tags at once:
+    filter {
+      PLUGIN_NAME {
+        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
+      }
+    }
+
+If the event has field `"somefield" == "hello"` this filter, on success,
+would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).
+
+[id="plugins-{type}s-{plugin}-enable_metric"]
+===== `enable_metric`
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Disable or enable metric logging for this specific plugin instance
+by default we record all the metrics we can, but you can disable metrics collection
+for a specific plugin.
+
+[id="plugins-{type}s-{plugin}-id"]
+===== `id`
+
+  * Value type is <<string,string>>
+  * There is no default value for this setting.
+
+Add a unique `ID` to the plugin instance, this `ID` is used for tracking
+information for a specific configuration of the plugin.
+
+```
+output {
+ stdout {
+   id => "ABC"
+ }
+}
+```
+
+If you don't explicitely set this variable Logstash will generate a unique name.
+
+
+[id="plugins-{type}s-{plugin}-periodic_flush"]
+===== `periodic_flush`
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `false`
+
+Call the filter flush method at regular interval.
+Optional.
+
+[id="plugins-{type}s-{plugin}-remove_field"]
+===== `remove_field`
+
+  * Value type is <<array,array>>
+  * Default value is `[]`
+
+If this filter is successful, remove arbitrary fields from this event.
+Fields names can be dynamic and include parts of the event using the %{field}
+Example:
+[source,ruby]
+    filter {
+      PLUGIN_NAME {
+        remove_field => [ "foo_%{somefield}" ]
+      }
+    }
+[source,ruby]
+    # You can also remove multiple fields at once:
+    filter {
+      PLUGIN_NAME {
+        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
+      }
+    }
+
+If the event has field `"somefield" == "hello"` this filter, on success,
+would remove the field with name `foo_hello` if it is present. The second
+example would remove an additional, non-dynamic field.
+
+[id="plugins-{type}s-{plugin}-remove_tag"]
+===== `remove_tag`
+
+  * Value type is <<array,array>>
+  * Default value is `[]`
+
+If this filter is successful, remove arbitrary tags from the event.
+Tags can be dynamic and include parts of the event using the `%{field}`
+syntax.
+
+Example:
+[source,ruby]
+    filter {
+      PLUGIN_NAME {
+        remove_tag => [ "foo_%{somefield}" ]
+      }
+    }
+[source,ruby]
+    # You can also remove multiple tags at once:
+    filter {
+      PLUGIN_NAME {
+        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
+      }
+    }
+
+If the event has field `"somefield" == "hello"` this filter, on success,
+would remove the tag `foo_hello` if it is present. The second example
+would remove a sad, unwanted tag as well.
diff --git a/docs/include/input.asciidoc b/docs/include/input.asciidoc
new file mode 100644
index 00000000000..37e7198c879
--- /dev/null
+++ b/docs/include/input.asciidoc
@@ -0,0 +1,96 @@
+[id="plugins-{type}s-common-options"]
+==== Common Options
+
+The following configuration options are supported by all input plugins:
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-add_field>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-codec>> |<<codec,codec>>|No
+| <<plugins-{type}s-{plugin}-enable_metric>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-id>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-tags>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-type>> |<<string,string>>|No
+|=======================================================================
+
+
+==== Details
+
+&nbsp;
+
+[id="plugins-{type}s-{plugin}-add_field"]
+===== `add_field`
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add a field to an event
+
+[id="plugins-{type}s-{plugin}-codec"]
+===== `codec`
+
+  * Value type is <<codec,codec>>
+  * Default value is `"plain"`
+
+The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.
+
+
+[id="plugins-{type}s-{plugin}-enable_metric"]
+===== `enable_metric`
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Disable or enable metric logging for this specific plugin instance
+by default we record all the metrics we can, but you can disable metrics collection
+for a specific plugin.
+
+[id="plugins-{type}s-{plugin}-id"]
+===== `id`
+
+  * Value type is <<string,string>>
+  * There is no default value for this setting.
+
+Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one.
+It is strongly recommended to set this ID in your configuration. This is particularly useful
+when you have two or more plugins of the same type, for example, if you have 2 grok filters.
+Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.
+
+[source,ruby]
+---------------------------------------------------------------------------------------------------
+output {
+ stdout {
+   id => "my_plugin_id"
+ }
+}
+---------------------------------------------------------------------------------------------------
+
+[id="plugins-{type}s-{plugin}-tags"]
+===== `tags`
+
+  * Value type is <<array,array>>
+  * There is no default value for this setting.
+
+Add any number of arbitrary tags to your event.
+
+This can help with processing later.
+
+[id="plugins-{type}s-{plugin}-type"]
+===== `type`
+
+  * Value type is <<string,string>>
+  * There is no default value for this setting.
+
+This is the base class for Logstash inputs.
+Add a `type` field to all events handled by this input.
+
+Types are used mainly for filter activation.
+
+The type is stored as part of the event itself, so you can
+also use the type to search for it in Kibana.
+
+If you try to set a type on an event that already has one (for
+example when you send an event from a shipper to an indexer) then
+a new input will not override the existing type. A type set at
+the shipper stays with that event for its life even
+when sent to another Logstash server.
diff --git a/docs/include/output.asciidoc b/docs/include/output.asciidoc
new file mode 100644
index 00000000000..b1870de1c80
--- /dev/null
+++ b/docs/include/output.asciidoc
@@ -0,0 +1,58 @@
+[id="plugins-{type}s-common-options"]
+==== Common Options
+
+The following configuration options are supported by all output plugins:
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-codec>> |<<codec,codec>>|No
+| <<plugins-{type}s-{plugin}-enable_metric>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-id>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-workers>> |<<number,number>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-codec"]
+===== `codec`
+
+  * Value type is <<codec,codec>>
+  * Default value is `"plain"`
+
+The codec used for output data. Output codecs are a convenient method for encoding your data before it leaves the output, without needing a separate filter in your Logstash pipeline.
+
+[id="plugins-{type}s-{plugin}-enable_metric"]
+===== `enable_metric`
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Disable or enable metric logging for this specific plugin instance
+by default we record all the metrics we can, but you can disable metrics collection
+for a specific plugin.
+
+[id="plugins-{type}s-{plugin}-id"]
+===== `id`
+
+  * Value type is <<string,string>>
+  * There is no default value for this setting.
+
+Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one.
+It is strongly recommended to set this ID in your configuration. This is particularly useful
+when you have two or more plugins of the same type, for example, if you have 2 grok filters.
+Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.
+
+[source,ruby]
+---------------------------------------------------------------------------------------------------
+output {
+ stdout {
+   id => "my_plugin_id"
+ }
+}
+---------------------------------------------------------------------------------------------------
+
+
+[id="plugins-{type}s-{plugin}-workers"]
+===== `workers`
+
+  * Value type is <<string,string>>
+  * Default value is `1`
diff --git a/docs/include/plugin_header.asciidoc b/docs/include/plugin_header.asciidoc
new file mode 100644
index 00000000000..1affa33996e
--- /dev/null
+++ b/docs/include/plugin_header.asciidoc
@@ -0,0 +1,16 @@
+* Plugin version: {version}
+* Released on: {release_date}
+* {changelog_url}[Changelog]
+
+ifeval::[{default_plugin} == 0]
+
+==== Installation
+
+For plugins not bundled by default, it is easy to install by running +bin/logstash-plugin install logstash-{type}-{plugin}+. See <<working-with-plugins>> for more details.
+
+endif::[]
+==== Getting Help
+
+For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
+For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].
+
diff --git a/rakelib/plugins_docs_dependencies.rake b/rakelib/plugins_docs_dependencies.rake
new file mode 100644
index 00000000000..06b0a79f9b8
--- /dev/null
+++ b/rakelib/plugins_docs_dependencies.rake
@@ -0,0 +1,162 @@
+# encoding: utf-8
+class PluginVersionWorking
+  EXPORT_FILE = ::File.expand_path(::File.join(::File.dirname(__FILE__), "..", "plugins_version_docs.json"))
+
+  # Simple class to make sure we get the right version for the document
+  # since we will record multiple versions for one plugin
+  class VersionDependencies
+    attr_reader :version, :priority, :from
+
+    def initialize(version, from)
+      @version = version
+      @from = from
+      @priority = from == :default ? 1 : -1
+    end
+
+    def eql?(other)
+      version == other.version && priority == other.priority
+    end
+
+    def <=>(other)
+      if eql?(other)
+        0
+      else
+        [priority, version] <=> [other.priority, other.version]
+      end
+    end
+
+    def to_hash(hash = {})
+      {
+        "version" => version,
+        "from" => from
+      }
+    end
+
+    def to_s
+      "from:#{from}, version: #{version}"
+    end
+  end
+
+  def measure_execution(label)
+    started_at = Time.now
+    response = yield
+    puts "Execution of label: #{label}, #{Time.now - started_at}s"
+    response
+  end
+
+  def all_plugins
+    measure_execution("Fetch all available plugins on `logstash-plugins`") do
+      LogStash::RakeLib.fetch_all_plugins.delete_if { |name| name =~ /^logstash-mixin-/ }
+    end
+  end
+
+
+  # We us a brute force strategy to get the highest version possible for all the community plugins.
+  # We take each plugin and we add it to the current dependencies and we try to resolve the tree, if it work we
+  # record the version installed.
+  def retrieve_definitions
+    builder = Bundler::Dsl.new
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
+
+    successful_dependencies = {}
+    failures = {}
+
+    builder.eval_gemfile("bundler file", gemfile.generate())
+    definition = builder.to_definition(LogStash::Environment::LOCKFILE, {})
+    extract_versions(definition, successful_dependencies, :default)
+
+    plugins_to_install = all_plugins - successful_dependencies.keys
+    plugins_to_install, partition_size = optimize_for_successful_resolution(plugins_to_install)
+    measure_execution("batch install of plugins") do
+      batch_install(plugins_to_install, successful_dependencies, failures, partition_size)
+    end
+
+    return [successful_dependencies, failures]
+  end
+
+  # If we found the result of a previous execution we will use the successful plugins result
+  # to order the current plugins, we assume that the plugin that was successful will still be successful.
+  # This help us reduce the number of resolve call and make the generation 3 times faster.
+  def optimize_for_successful_resolution(plugins_to_install)
+    if ::File.exist?(EXPORT_FILE)
+      content = JSON.parse(::File.read(EXPORT_FILE))
+
+      possible_success = []
+      possible_failures = []
+      unknown = []
+
+      plugins_to_install.each do |name|
+        if content["successful"][name].nil?
+          if content["failures"][name].nil?
+            unknown << name
+          else
+            possible_failures << name
+          end
+        else
+          possible_success << name
+        end
+      end
+
+      plugins_to_install = possible_success.concat(possible_failures).concat(unknown)
+      [plugins_to_install, plugins_to_install.size / possible_success.size]
+    else
+      [plugins_to_install, 2]
+    end
+  end
+
+  # Try to recursively do batch operation on the plugin list to reduce the number of resolution required.
+  def batch_install(plugins_to_install, successful_dependencies, failures, partition_size = 2)
+    plugins_to_install.each_slice(plugins_to_install.size /  partition_size) do |partition|
+      install(partition, successful_dependencies, failures)
+    end
+  end
+
+  def install(plugins_to_install, successful_dependencies, failures)
+    begin
+      builder = Bundler::Dsl.new
+      gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
+      plugins_to_install.each { |plugin_name| gemfile.update(plugin_name) }
+      builder.eval_gemfile("bundler file", gemfile.generate())
+      definition = builder.to_definition(LogStash::Environment::LOCKFILE, {})
+      definition.resolve_remotely!
+      extract_versions(definition, successful_dependencies, :missing)
+      puts "Batch install size: #{plugins_to_install.size}, Succesfully resolved: #{plugins_to_install}"
+    rescue => e
+      if plugins_to_install.size > 1
+        batch_install(plugins_to_install, successful_dependencies, failures)
+      else
+        puts "Failed to install: #{plugins_to_install.first}"
+        failures[plugins_to_install.first] = {
+          "klass" => e.class,
+          "message" => e.message
+        }
+      end
+    end
+  end
+
+  def extract_versions(definition, dependencies, from)
+    definition.specs.each do |spec|
+      dependencies[spec.name] ||= []
+      dependencies[spec.name] << VersionDependencies.new(spec.version, from)
+    end
+  end
+
+  def generate
+    specs, failures = retrieve_definitions
+    filtered = specs.each_with_object({}) { |(k, v), h| h[k] = v.max.to_hash }
+    result = JSON.pretty_generate({ "successful" => filtered, "failures" => failures})
+    puts "Generating: #{EXPORT_FILE}"
+    IO.write(EXPORT_FILE, result)
+  end
+end
+
+task :generate_plugins_version do
+  require "bundler"
+  require "bundler/dsl"
+  require "json"
+  Bundler.setup(:default)
+  require "pluginmanager/gemfile"
+  require "bootstrap/environment"
+
+  PluginVersionWorking.new.generate
+end
diff --git a/tools/logstash-docgen/bin/extract_doc.rb b/tools/logstash-docgen/bin/extract_doc.rb
new file mode 100755
index 00000000000..34dbf9d6e48
--- /dev/null
+++ b/tools/logstash-docgen/bin/extract_doc.rb
@@ -0,0 +1,47 @@
+# encoding: utf-8
+require "fileutils"
+
+# This scripts take the output result of the `logstash-docgen` and create the PR to the plugin repositoring
+# its a bit of a hack and is designed to be run one time.
+
+TARGET = File.expand_path(File.join(File.dirname(__FILE__), "..", "target", "**", "*.asciidoc"))
+
+PR_TARGET = File.expand_path(File.join(File.dirname(__FILE__), "..", "pr_target"))
+WILDCARDS_FILE = '.files = Dir["lib/**/*","spec/**/*","*.gemspec","*.md","CONTRIBUTORS","Gemfile","LICENSE","NOTICE.TXT", "vendor/jar-dependencies/**/*.jar", "vendor/jar-dependencies/**/*.rb", "VERSION", "docs/**/*"]'
+
+FileUtils.mkdir_p(PR_TARGET)
+
+FileUtils.touch(File.join(PR_TARGET, "pr-logs"))
+
+Dir.glob(TARGET) do |f|
+  file = File.basename(f)
+  plugin_name = File.basename(f, ".asciidoc")
+  parts = f.split("/")
+  type = parts[-2].gsub(/s$/, '')
+
+  next if type =~ /mixin/
+
+  Dir.chdir(PR_TARGET) do
+    plugin_target = "logstash-#{type}-#{plugin_name}"
+    puts("hub clone logstash-plugins/#{plugin_target}")
+    system("hub clone logstash-plugins/#{plugin_target}")
+
+    Dir.chdir(plugin_target) do
+      FileUtils.mkdir_p("docs")
+      FileUtils.cp(f, "docs/index.asciidoc")
+
+      gemspec_file = "./#{plugin_target}.gemspec"
+      gemspec = File.read(gemspec_file)
+      gemspec.gsub!(/\.files\s=.+/, WILDCARDS_FILE)
+
+      IO.write(gemspec_file, gemspec)
+
+      system("hub checkout -b docs/extraction")
+      system("hub add docs")
+      system("hub add *.gemspec")
+      system("hub commit -am 'Initial doc move'")
+      system("hub push origin docs/extraction")
+      system("hub pull-request -F ../../docs.md > ../pr-logs")
+    end
+  end
+end
diff --git a/tools/logstash-docgen/docs.md b/tools/logstash-docgen/docs.md
new file mode 100644
index 00000000000..90a1ba68b6b
--- /dev/null
+++ b/tools/logstash-docgen/docs.md
@@ -0,0 +1,3 @@
+Extraction of the inline documentation into a separate file
+
+For details see https://github.com/elastic/logstash/issues/6846
diff --git a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
index 2c15293bc8a..9604772c06a 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/github_generator.rb
@@ -17,13 +17,14 @@ module LogStash module Docgen
   # dont want to pollute the main execution namespace with libraries that could be incompatible
   # each execution of the doc is is own process.
   #
+  #
   # Its a lot slower, but we know for sure that it uses the latest dependency for each plugins.
   class Plugin
     class CommandException < StandardError; end
 
     GITHUB_URI = "https://github.com/logstash-plugins/%s"
 
-    BUNDLER_CMD = "bundler install --jobs 8 --quiet --path /tmp/vendor"
+    BUNDLER_CMD = "bundle install"
     RAKE_VENDOR_CMD = "bundle exec rake vendor"
     RAKE_DOC_ASCIIDOC = "bundle exec rake doc:asciidoc"
     DOCUMENT_SEPARATOR = "~~~ASCIIDOC_DOCUMENT~~~\n"
@@ -52,8 +53,8 @@ def name
       full_name.split("-").last
     end
 
-    def generate(destination)
-      fetch
+    def generate(destination, config = {})
+      fetch if config.fetch(:skip_fetch, false)
       inject_docgen
       bundle_install
       rake_vendor
@@ -179,7 +180,7 @@ def generate
 
       plugins.each do |plugin|
         task_runner.run(plugin.name) do
-          plugin.generate(@target)
+          plugin.generate(@target, config)
         end
       end
 
diff --git a/tools/logstash-docgen/lib/logstash/docgen/parser.rb b/tools/logstash-docgen/lib/logstash/docgen/parser.rb
index 720345171ac..2c2814b30be 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/parser.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/parser.rb
@@ -61,6 +61,13 @@ class PluginContext
     ANCHOR_VERSION_RE = /\./
     LOGSTASH_PLUGINS_ORGANIZATION = "https://github.com/logstash-plugins"
     CANONICAL_NAME_PREFIX = "logstash"
+    GLOBAL_BLOCKLIST = ["enable_metric", "id"]
+    BLOCKLIST = {
+      "input" => GLOBAL_BLOCKLIST + [ "type", "debug", "format", "charset", "message_format", "codec", "tags", "add_field"],
+      "codec" => GLOBAL_BLOCKLIST,
+      "output" => GLOBAL_BLOCKLIST + [ "type", "tags", "exclude_tags", "codec", "workers" ],
+      "filter" => GLOBAL_BLOCKLIST + ["type", "tags", "add_tag", "remove_tag", "add_field", "remove_field", "periodic_flush" ]
+    }
 
     attr_accessor :description, :config_name, :section, :name, :default_plugin, :gemspec
 
@@ -122,7 +129,7 @@ def canonical_name
     # `Hash` keys are sorted by default in the order of creation.
     # But we force a sort options name for the documentation.
     def config
-      Hash[@config.sort_by(&:first)]
+      Hash[@config.sort_by(&:first)].delete_if { |k, v| BLOCKLIST[section].include?(k) }
     end
     alias_method :sorted_attributes, :config
 
diff --git a/tools/logstash-docgen/templates/plugin-doc.asciidoc.erb b/tools/logstash-docgen/templates/plugin-doc.asciidoc.erb
index dc7de83bc5a..7373bdceb31 100644
--- a/tools/logstash-docgen/templates/plugin-doc.asciidoc.erb
+++ b/tools/logstash-docgen/templates/plugin-doc.asciidoc.erb
@@ -1,57 +1,31 @@
-[[plugins-<%= section %>s-<%= name %>]]
-=== <%= name %>
+:plugin: <%=name%>
+:type: <%=section%>
 
-* Version: <%=version%>
-* Released on: <%=release_date%>
-* <%=changelog_url%>[Changelog]
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
 
-<% unless default_plugin? %>
-==== Installation
+[id="plugins-{type}-{plugin}"]
 
-For plugins not bundled by default, it is easy to install by running `bin/logstash-plugin install logstash-<%= section %>-<%= name %>`. See <<working-with-plugins>> for more details.
-<% end %>
+=== <%=name.capitalize%>
 
-==== Getting Help
-
-For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
-For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].
+include::{include_path}/plugin_header.asciidoc[]
 
 ==== Description
 
 <%= description %>
 
-&nbsp;
-
-==== Synopsis
-
-<% if sorted_attributes.count > 0 -%>
-This plugin supports the following configuration options:
-<% else -%>
-This plugin has no configuration options.
-<% end -%>
+[id="plugins-{type}s-{plugin}-options"]
+==== <%=name.capitalize%> <%=section.capitalize%> Configuration Options
 
-<% if sorted_attributes.count > 0 -%>
-Required configuration options:
-<% else -%>
-Complete configuration example:
-<% end -%>
-
-[source,json]
---------------------------
-<%= name %> {
-<% if sorted_attributes.count > 0 -%>
-<% sorted_attributes.each do |name, config|
-   next if config[:deprecated]
-   next if !config[:required]
--%>
-<%= "  " if section == "codec" %>    <%= name %> => ...
-<% end -%>
-<%= "  " if section == "codec" %><% ; end -%>}
---------------------------
-
-<% if sorted_attributes.count > 0 %>
-
-Available configuration options:
+This plugin supports the following configuration options plus the <<plugins-{type}s-common-options>> described later.
 
 [cols="<,<,<",options="header",]
 |=======================================================================
@@ -76,13 +50,13 @@ Available configuration options:
      annotation += "|No"
    end
 -%>
-| <<plugins-<%= section %>s-<%=config_name%>-<%=name%>>> <%= annotation %>
+| <<plugins-{type}s-{plugin}-<%=name%>>> <%= annotation %>
 <% end -%>
 |=======================================================================
-<% end %>
 <% if sorted_attributes.count > 0 -%>
 
-==== Details
+Also see <<plugins-{type}s-common-options>> for a list of options supported by all
+<%=section%> plugins.
 
 &nbsp;
 
@@ -96,7 +70,7 @@ Available configuration options:
        is_regexp = false
      end
 -%>
-[[plugins-<%= section%>s-<%=config_name%>-<%= name%>]]
+[id="plugins-{type}s-{plugin}-<%= name%>"]
 ===== `<%= name %>` <%= " (DEPRECATED)" if config[:deprecated] %>
 
 <% if config[:required] -%>
@@ -126,3 +100,5 @@ Available configuration options:
 <% end -%>
 
 <% end -%>
+
+include::{include_path}/{type}.asciidoc[]
