diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 1cda5eee31f..1de5ffbd702 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -153,10 +153,11 @@ public void setField(final String reference, final Object value) {
     public void setField(final FieldReference field, final Object value) {
         switch (field.type()) {
             case FieldReference.META_PARENT:
+                // ConvertedMap.newFromMap already does valuefication
                 this.metadata = ConvertedMap.newFromMap((Map<String, Object>) value);
                 break;
             case FieldReference.META_CHILD:
-                Accessors.set(metadata, field, value);
+                Accessors.set(metadata, field, Valuefier.convert(value));
                 break;
             default:
                 Accessors.set(data, field, Valuefier.convert(value));
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index e8a0e43f8ad..0812456a996 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -14,7 +15,6 @@
 import org.jruby.RubyTime;
 import org.jruby.java.proxies.ConcreteJavaProxy;
 import org.junit.Test;
-import org.logstash.ext.JrubyTimestampExtLibrary;
 
 import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
 import static org.hamcrest.CoreMatchers.is;
@@ -398,4 +398,34 @@ public void unwrapsJavaProxyValues() throws Exception {
         ));
         assertThat(event.getField("timestamp"), is(timestamp));
     }
+
+    @Test
+    public void metadataFieldsShouldBeValuefied() {
+        final Event event = new Event();
+        event.setField("[@metadata][foo]", Collections.emptyMap());
+        assertEquals(HashMap.class, event.getField("[@metadata][foo]").getClass());
+
+        event.setField("[@metadata][bar]", Collections.singletonList("hello"));
+        final List list = (List) event.getField("[@metadata][bar]");
+        assertEquals(ArrayList.class, list.getClass());
+        assertEquals(list, Arrays.asList("hello"));
+    }
+
+    @Test
+    public void metadataRootShouldBeValueified() {
+        final Event event = new Event();
+
+        final Map<String, Object> metadata = new HashMap<>();
+        metadata.put("foo", Collections.emptyMap());
+        metadata.put("bar", Collections.singletonList("hello"));
+
+        event.setField("@metadata", metadata);
+
+        assertEquals(HashMap.class, event.getField("[@metadata][foo]").getClass());
+
+        final List list = (List) event.getField("[@metadata][bar]");
+        assertEquals(ArrayList.class, list.getClass());
+        assertEquals(list, Arrays.asList("hello"));
+
+    }
 }
