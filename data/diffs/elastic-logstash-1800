diff --git a/lib/logstash/inputs/irc.rb b/lib/logstash/inputs/irc.rb
index 75644184407..77592361d7d 100644
--- a/lib/logstash/inputs/irc.rb
+++ b/lib/logstash/inputs/irc.rb
@@ -33,6 +33,15 @@ class LogStash::Inputs::Irc < LogStash::Inputs::Base
   # IRC Server password
   config :password, :validate => :password
 
+  # Catch all IRC channel/user events not just channel messages
+  config :catch_all, :validate => :boolean, :default => false
+
+  # Gather and send user counts for channels - this requires catch_all and will force it
+  config :get_stats, :validate => :boolean, :default => false
+
+  # How often in minutes to get the user count stats
+  config :stats_interval, :validate => :number, :default => 5
+
   # Channels to join and read messages from.
   #
   # These should be full channel names including the '#' symbol, such as
@@ -46,7 +55,11 @@ class LogStash::Inputs::Irc < LogStash::Inputs::Base
   public
   def register
     require "cinch"
+    @user_stats = Hash.new
     @irc_queue = Queue.new
+    if @get_stats
+	@catch_all = true
+    end
     @logger.info("Connecting to irc server", :host => @host, :port => @port, :nick => @nick, :channels => @channels)
 
     @bot = Cinch::Bot.new
@@ -62,9 +75,16 @@ def register
       c.ssl.use = @secure
     end
     queue = @irc_queue
-    @bot.on :channel  do |m|
-      queue << m
+    if @catch_all
+        @bot.on :catchall  do |m|
+          queue << m
+        end
+    else
+        @bot.on :channel  do |m|
+          queue << m
+        end
     end
+
   end # def register
 
   public
@@ -72,11 +92,32 @@ def run(output_queue)
     Thread.new(@bot) do |bot|
       bot.start
     end
+    if @get_stats
+        start_names_thread
+    end
     loop do
       msg = @irc_queue.pop
-      if msg.user
+      if @get_stats and msg.command.to_s == "353"
+        # Got a names list event
+        # Count the users returned in msg.params[3] split by " "
+        users = msg.params[3].split(" ")
+        @user_stats[msg.channel.to_s] = (@user_stats[msg.channel.to_s] || 0)  + users.length
+      end
+      if @get_stats and msg.command.to_s == "366"
+        # Got an end of names event, now we can send the info down the pipe.
+        event = LogStash::Event.new()
+        decorate(event)
+        event["channel"] = msg.channel.to_s
+        event["users"] = @user_stats[msg.channel.to_s]
+        event["server"] = "#{@host}:#{@port}"
+        output_queue << event
+      end
+      if msg.command and msg.user
+        @logger.debug("IRC Message", :data => msg)
         @codec.decode(msg.message) do |event|
           decorate(event)
+          event["user"] = msg.prefix.to_s
+          event["command"] = msg.command.to_s
           event["channel"] = msg.channel.to_s
           event["nick"] = msg.user.nick
           event["server"] = "#{@host}:#{@port}"
@@ -85,4 +126,27 @@ def run(output_queue)
       end
     end
   end # def run
+
+  def request_names
+    # Go though list of channels, and request a NAMES for them
+    # Note : Logstash channel list can have passwords ie : "channel password"
+    # Need to account for that
+    @channels.each do |channel|
+        if channel.include? " "
+            # Remove password from channel
+            channel = channel.split(' ')[0]
+        end
+        @user_stats[channel] = 0
+        @bot.irc.send "NAMES #{channel}"
+    end
+  end
+
+  def start_names_thread
+    Thread.new {
+      loop do
+        sleep(@stats_interval * 60)
+        request_names
+      end
+    }
+  end
 end # class LogStash::Inputs::Irc
