diff --git a/README.md b/README.md
index 48487332c2e..27dd541bedb 100755
--- a/README.md
+++ b/README.md
@@ -1,8 +1,8 @@
-# logstash
+# BE AWARE! Fork of Logstash
 
-[![Build Status](https://secure.travis-ci.org/logstash/logstash.png)](http://travis-ci.org/logstash/logstash)
+[Why JRuby by Jordan Sissel](https://gist.github.com/jordansissel/978956)?
 
-logstash is a tool for managing events and logs. You can use it to collect
+Logstash is a tool for managing events and logs. You can use it to collect
 logs, parse them, and store them for later use (like, for searching). Speaking
 of searching, logstash comes with a web interface for searching and drilling
 into all of your logs.
@@ -19,102 +19,6 @@ mailing list.
 
 You can also find documentation on the <http://logstash.net> site.
 
-## Developing
+## Other information
 
-If you don't have JRuby already (or don't use rvm, rbenv, etc), you can have `bin/logstash` fetch it for you by setting `USE_JRUBY`:
-
-    USE_JRUBY=1 bin/logstash ...
-
-Otherwise, here's how to get started with rvm: 
-
-    # Install JRuby with rvm
-    rvm install jruby-1.7.4
-    rvm use jruby-1.7.4
-
-Now install dependencies:
-
-    # Install logstash ruby dependencies
-    bin/logstash deps
-
-Other commands:
-
-    # to use logstash gems or libraries in irb, use the following
-    # this gets you an 'irb' shell with logstash's environment
-    bin/logstash irb
-
-    # or use irb from the jar
-    java -jar logstash-<version>-monolithic.jar irb
-
-    # Run logstash
-    bin/logstash agent [options]
-    
-    # If running bin/logstash agent yields complaints about log4j/other things
-    # This will download the elasticsearch jars so logstash can use them.
-    make vendor-elasticsearch
-
-## Testing
-
-There are a few ways to run the tests. For development, using `bin/logstash
-rspec <some spec>` will suffice:
-
-    % bin/logstash rspec spec/filters/grok.rb 
-    ...................
-
-    Finished in 0.123 seconds
-    19 examples, 0 failures
-
-Alternately, if you have just built the flatjar, you can run the tests
-specifically on those like so:
-
-    make flatjar-test
-
-If you want to run all the tests from source (not compiled jar), do:
-
-    make test
-
-Finally, like 'bin/logstash rspec' above, you can invoke the jar to run a
-specific test like so:
-
-    % java -jar logstash.jar rspec spec/filters/grok.rb
-    ...................
-
-    Finished in 0.346 seconds
-    19 examples, 0 failures
-
-## Building
-
-Building is not required. You are highly recommended to download the releases
-we provide from the logstash site!
-
-If you want to build the jar yourself, run:
-
-    make flatjar
-
-To update a flat jar previously built with 'make flatjar', run:
-
-    make update-flatjar
-
-
-You can build rpms and debs, if you need those. Building rpms requires you have [fpm](github.com/jordansissel/fpm), then do this:
-
-    make package
-
-## Project Principles
-
-* Community: If a newbie has a bad time, it's a bug.
-* Software: Make it work, then make it right, then make it fast.
-* Technology: If it doesn't do a thing today, we can make it do it tomorrow.
-
-## Contributing
-
-All contributions are welcome: ideas, patches, documentation, bug reports,
-complaints, and even something you drew up on a napkin.
-
-Programming is not a required skill. Whatever you've seen about open source and
-maintainers or community members  saying "send patches or die" - you will not
-see that here.
-
-It is more important to me that you are able to contribute.
-
-For more information about contributing, see the
-[CONTRIBUTING](CONTRIBUTING.md) file.
+Refer to the [original repository](http://github.com/logstash/logstash)
diff --git a/bin/logstash b/bin/logstash
index d671bcdc40b..1b950ea6824 100755
--- a/bin/logstash
+++ b/bin/logstash
@@ -17,6 +17,7 @@
 
 basedir=$(cd `dirname $0`/..; pwd)
 export RUBYLIB="$basedir/lib"
+export JRUBY_OPTS=-J-Xmx2048m
 
 setup_ruby() {
   # Verify ruby works
@@ -37,7 +38,7 @@ setup_vendored_jruby() {
   # watching" execution.
   # TODO(sissel): Add 'server' operation with good flags for that situation.
   JAVA_OPTS="$JAVA_OPTS -client -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Djruby.compile.mode=OFF"
-  JAVA_OPTS="$JAVA_OPTS -Xmx500m"
+  JAVA_OPTS="$JAVA_OPTS -Xmx1500m"
 
   RUBYCMD="java $JAVA_OPTS -jar $basedir/vendor/jar/jruby-complete-*.jar"
 }
diff --git a/lib/logstash/codecs/msgpack.rb b/lib/logstash/codecs/msgpack.rb
index 05dedf449c5..c4178213ff5 100644
--- a/lib/logstash/codecs/msgpack.rb
+++ b/lib/logstash/codecs/msgpack.rb
@@ -37,7 +37,7 @@ def decode(data)
   public
   def encode(event)
     event["@timestamp"] = event["@timestamp"].to_f
-    @on_event.call event.to_hash.to_msgpack
+    @on_event.call MessagePack.pack(event.to_hash)
   end # def encode
 
 end # class LogStash::Codecs::Msgpack
diff --git a/lib/logstash/filters/jsrule.rb b/lib/logstash/filters/jsrule.rb
new file mode 100644
index 00000000000..2ca76aee9c6
--- /dev/null
+++ b/lib/logstash/filters/jsrule.rb
@@ -0,0 +1,88 @@
+require "logstash/filters/base"
+require "logstash/namespace"
+
+class LogStash::Filters::Ruby < LogStash::Filters::Base
+  config_name "jsrule"
+  milestone 1
+
+  # The code to execute for every event.
+  # You will have an 'event' variable available that is the event itself.
+
+  config :rule, :validate => :string, :required => true
+
+  public
+  def register
+    require 'rhino'
+
+    @jsrule_source = <<EOS
+function CloneObject(obj) {
+    var target = {}, i;
+    for (i in obj) {
+        if (obj.hasOwnProperty(i)) {
+            target[i] = obj[i];
+        }
+    }
+    return target;
+}
+
+function JsRule(iRule) {
+	this.rule = iRule;
+}
+
+JsRule.prototype.process = function(iEvent) {
+    var _events = [],
+        tmp_events, result, ev, cd;
+    
+    // If there is Function in apply, execute it over the event, otherwise, push in array
+    if (this.rule.apply !== "undefined" && this.rule.apply instanceof Function) {
+        tmp_events = this.rule.apply(iEvent);
+        // If result is an array, assign it to events, otherwise push in array
+        if (tmp_events !== "undefined" && tmp_events instanceof Array) {
+            _events = tmp_events;
+        } else {
+            _events.push(tmp_events);
+        }
+    } else {
+        _events.push(iEvent);
+    }
+
+    _result = [];
+    // For each event, apply condition(s), cloning the object
+    for (ev = 0; ev < _events.length; ev++) {
+        for (cd = 0; cd < this.rule.conditions.length; cd++) {
+            _result.push(this.rule.conditions[cd](CloneObject(_events[ev])));
+        }
+    }
+    return _result;
+}
+
+jsrule = new JsRule(rule);
+EOS
+  
+  @jscontext = Rhino::Context.new
+  # TODO move optimization_level in settings?
+  @jscontext.optimization_level = 6
+  @jscontext.eval @rule + @jsrule_source
+  @jsrule = @jscontext['jsrule']
+
+  end # def register
+
+  public
+  def filter(event)
+    return unless filter?(event)
+    event.cancel
+    begin
+      @jsrule.process(event.to_hash).each do |emitted_event_data_js|
+        # TODO The following 2 lines shouldn't be necessary! See https://github.com/cowboyd/therubyrhino/issues/27
+        emitted_event_data = emitted_event_data_js.to_hash
+        emitted_event_data['@timestamp'] = Rhino.to_ruby(emitted_event_data_js['@timestamp'])
+        emitted_event = LogStash::Event.new(emitted_event_data)
+        filter_matched(emitted_event)
+        yield emitted_event
+      end
+    rescue => exception
+      # TODO event.tag("_jsrulefailure")
+      @logger.warn("Dropped event due to " + exception.message, :event => event)
+    end
+  end # def filter
+end # class LogStash::Filters::Ruby
diff --git a/lib/logstash/inputs/customredis.rb b/lib/logstash/inputs/customredis.rb
new file mode 100644
index 00000000000..6b2cbec3268
--- /dev/null
+++ b/lib/logstash/inputs/customredis.rb
@@ -0,0 +1,129 @@
+require "logstash/inputs/base"
+require "logstash/inputs/threadable"
+require "logstash/namespace"
+
+# Read events from a redis. Supports both redis channels and also redis lists
+# (using BLPOP)
+#
+# For more information about redis, see <http://redis.io/>
+#
+# ## `batch_count` note
+#
+# If you use the 'batch_count' setting, you *must* use a redis version 2.6.0 or
+# newer. Anything older does not support the operations used by batching.
+class LogStash::Inputs::Redis < LogStash::Inputs::Threadable
+  config_name "customredis"
+  milestone 2
+
+  default :codec, "msgpack"
+
+  # Name is used for logging in case there are multiple instances.
+  # This feature has no real function and will be removed in future versions.
+  config :name, :validate => :string, :default => "default", :deprecated => true
+
+  config :host, :validate => :string, :default => "127.0.0.1"
+
+  config :port, :validate => :number, :default => 6379
+
+  config :db, :validate => :number, :default => 0
+
+  config :timeout, :validate => :number, :default => 5
+
+  config :password, :validate => :password
+
+  config :key, :validate => :string, :required => false, :default => ""
+
+  config :batch_count, :validate => :number, :default => 100
+
+  config :luascript, :validate => :string, :required => true
+
+  config :threads, :validate => :number, :default => 1
+
+  public
+  def register
+    require 'redis'
+    @redis = nil
+    @redis_url = "redis://#{@password}@#{@host}:#{@port}/#{@db}"
+    @data_type = 'list'
+
+    @logger.info("Registering redis", :identity => identity)
+  end # def register
+
+  private
+  def identity
+    @name || "#{@redis_url} #{@data_type}:#{@key}"
+  end
+
+  private
+  def connect
+    redis = Redis.new(
+      :host => @host,
+      :port => @port,
+      :timeout => @timeout,
+      :db => @db,
+      :password => @password.nil? ? nil : @password.value
+    )
+    load_batch_script(redis)
+    return redis
+  end # def connect
+
+  private
+  def load_batch_script(redis)
+    @redis_script_sha = redis.script(:load, @luascript)
+  end
+
+  private
+  def queue_event(msg, output_queue)
+    begin
+      @codec.decode(msg) do |event|
+        decorate(event)
+        output_queue << event
+      end
+    rescue => e # parse or event creation error
+      @logger.error("Failed to create event", :message => msg, :exception => e,
+                    :backtrace => e.backtrace);
+    end
+  end
+
+  private
+  def list_listener(redis, output_queue)
+    begin
+      redis.evalsha(@redis_script_sha, [ Time.now.to_i ], [@batch_count-1]).each do |item|
+        queue_event(item, output_queue)
+      end
+    rescue Redis::CommandError => e
+      if e.to_s =~ /NOSCRIPT/ then
+        @logger.warn("Redis may have been restarted, reloading redis batch EVAL script", :exception => e);
+        load_batch_script(redis)
+        retry
+      else
+        raise e
+      end
+    end
+  end
+
+  private
+  def listener_loop(listener, output_queue)
+    while !finished?
+      begin
+        @redis ||= connect
+        self.send listener, @redis, output_queue
+	sleep 0.1
+      rescue Redis::CannotConnectError => e
+        @logger.warn("Redis connection problem", :exception => e)
+        sleep 1
+        @redis = connect
+      rescue => e # redis error
+        @logger.warn("Failed to get event from redis", :name => @name,
+                     :exception => e, :backtrace => e.backtrace)
+        raise e
+      end
+    end # while !finished?
+  end # listener_loop
+
+  public
+  def run(output_queue)
+    listener_loop :list_listener, output_queue
+  end 
+
+end # class LogStash::Inputs::Redis
diff --git a/lib/logstash/outputs/customredis.rb b/lib/logstash/outputs/customredis.rb
new file mode 100644
index 00000000000..c0851785c8d
--- /dev/null
+++ b/lib/logstash/outputs/customredis.rb
@@ -0,0 +1,131 @@
+require "logstash/outputs/base"
+require "logstash/namespace"
+require "stud/buffer"
+
+class LogStash::Outputs::CustomRedis < LogStash::Outputs::Base
+
+  include Stud::Buffer
+
+  config_name "customredis"
+  milestone 2
+
+  config :name, :validate => :string, :default => 'default', :deprecated => true
+  config :host, :validate => :array, :default => ["127.0.0.1"]
+  config :shuffle_hosts, :validate => :boolean, :default => true
+  config :port, :validate => :number, :default => 6379
+  config :db, :validate => :number, :default => 0
+  config :timeout, :validate => :number, :default => 5
+  config :password, :validate => :password
+  config :queue, :validate => :string, :deprecated => true
+  config :key, :validate => :string, :required => true
+  config :batch_events, :validate => :number, :default => 50
+  config :batch_timeout, :validate => :number, :default => 5
+  config :reconnect_interval, :validate => :number, :default => 1
+  config :congestion_threshold, :validate => :number, :default => 0
+  config :congestion_interval, :validate => :number, :default => 1
+
+  config :luascript, :validate => :string, :required => true
+  
+  default :codec, "json"
+  
+  def register
+    require 'redis'
+
+    @data_type = "list"
+    buffer_initialize(
+	:max_items => @batch_events,
+	:max_interval => @batch_timeout,
+	:logger => @logger
+    )
+
+    @redis = nil
+    if @shuffle_hosts
+        @host.shuffle!
+    end
+    @host_idx = 0
+
+    @congestion_check_times = Hash.new { |h,k| h[k] = Time.now.to_i - @congestion_interval }
+	
+    @codec.on_event do |payload|
+	buffer_receive(payload, @key)
+    end
+  end # def register
+
+  def receive(event)
+    return unless output?(event)
+	@codec.encode(event)
+	
+  end # def receive
+
+  def congestion_check(key)
+    return if @congestion_threshold == 0
+    if (Time.now.to_i - @congestion_check_times[key]) >= @congestion_interval # Check congestion only if enough time has passed since last check.
+      while @redis.llen(key) > @congestion_threshold # Don't push event to redis key which has reached @congestion_threshold.
+        @logger.warn? and @logger.warn("Redis key size has hit a congestion threshold #{@congestion_threshold} suspending output for #{@congestion_interval} seconds")
+        sleep @congestion_interval
+      end
+      @congestion_check_time = Time.now.to_i
+    end
+  end
+
+  # called from Stud::Buffer#buffer_flush when there are events to flush
+  def flush(events, key, teardown=false)
+    @redis ||= connect
+    # we should not block due to congestion on teardown
+    # to support this Stud::Buffer#buffer_flush should pass here the :final boolean value.
+    congestion_check(key) unless teardown
+    @redis.evalsha(@sha, :keys => [ Time.now.to_i ], :argv => events)
+  end
+  
+  # called from Stud::Buffer#buffer_flush when an error occurs
+  def on_flush_error(e)
+    @logger.warn("Failed to send backlog of events to redis",
+      :identity => identity,
+      :exception => e,
+      :backtrace => e.backtrace
+    )
+    @redis = connect
+  end
+
+  def teardown
+	buffer_flush(:final => true)
+  end
+
+  private
+  def connect
+    @current_host, @current_port = @host[@host_idx].split(':')
+    @host_idx = @host_idx + 1 >= @host.length ? 0 : @host_idx + 1
+
+    if not @current_port
+      @current_port = @port
+    end
+
+    params = {
+      :host => @current_host,
+      :port => @current_port,
+      :timeout => @timeout,
+      :db => @db
+    }
+    @logger.debug(params)
+
+    if @password
+      params[:password] = @password.value
+    end
+
+    r = Redis.new(params)
+
+    # Deploy LUA script
+    @sha = r.script(:load, @luascript)
+    @logger.debug(@sha + ' deployed')
+
+    r
+  end # def connect
+
+  @sha
+
+  # A string used to identify a redis instance in log messages
+  def identity
+    @name || "redis://#{@password}@#{@current_host}:#{@current_port}/#{@db} #{@data_type}:#{@key}"
+  end
+
+end
diff --git a/logstash.gemspec b/logstash.gemspec
index 53e65dd32af..853a7661bea 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -87,10 +87,12 @@ Gem::Specification.new do |gem|
     gem.add_runtime_dependency "jruby-win32ole"                   #(unknown license)
     gem.add_runtime_dependency "jdbc-mysql"                       # For input drupal_dblog (BSD license)
     gem.add_runtime_dependency "msgpack-jruby"                    #(Apache 2.0 license)
+    gem.add_runtime_dependency "therubyrhino"                     #(MIT license)
   else
     gem.add_runtime_dependency "excon"    #(MIT license)
     gem.add_runtime_dependency "mysql2"   # For input drupal_dblog (MIT license)
     gem.add_runtime_dependency "msgpack"  #(Apache 2.0 license)
+    gem.add_runtime_dependency "therubyracer"                     #(MIT license)
   end
 
   if RUBY_PLATFORM != 'java'
