diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 55aa239e791..9c8862c65a5 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "thread"
-require "stud/interval"
 require "concurrent"
 require "logstash/namespace"
 require "logstash/errors"
@@ -181,7 +180,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     # @ready requires thread safety since it is typically polled from outside the pipeline thread
     @ready = Concurrent::AtomicBoolean.new(false)
     @running = Concurrent::AtomicBoolean.new(false)
-    @flushing = Concurrent::AtomicReference.new(false)
+    @flushing = java.util.concurrent.atomic.AtomicBoolean.new(false)
     @outputs_registered = Concurrent::AtomicBoolean.new(false)
     @finished_execution = Concurrent::AtomicBoolean.new(false)
   end # def initialize
@@ -521,24 +520,12 @@ def flush_filters(options = {}, &block)
   def start_flusher
     # Invariant to help detect improper initialization
     raise "Attempted to start flusher on a stopped pipeline!" if stopped?
-
-    @flusher_thread = Thread.new do
-      while Stud.stoppable_sleep(5, 0.1) { stopped? }
-        flush
-        break if stopped?
-      end
-    end
+    @flusher_thread = org.logstash.execution.PeriodicFlush.new(@signal_queue, FLUSH, @flushing)
+    @flusher_thread.start
   end
 
   def shutdown_flusher
-    @flusher_thread.join
-  end
-
-  def flush
-    if @flushing.compare_and_set(false, true)
-      @logger.debug? && @logger.debug("Pushing flush onto pipeline", default_logging_keys)
-      @signal_queue.put(FLUSH)
-    end
+    @flusher_thread.close
   end
 
   # Calculate the uptime in milliseconds
diff --git a/logstash-core/src/main/java/org/logstash/execution/PeriodicFlush.java b/logstash-core/src/main/java/org/logstash/execution/PeriodicFlush.java
new file mode 100644
index 00000000000..f63db486dbf
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/execution/PeriodicFlush.java
@@ -0,0 +1,53 @@
+package org.logstash.execution;
+
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.jruby.runtime.builtin.IRubyObject;
+
+public final class PeriodicFlush implements AutoCloseable {
+
+    private static final Logger LOGGER = LogManager.getLogger(PeriodicFlush.class);
+
+    private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(
+        r -> new Thread(r, "logstash-pipeline-flush")
+    );
+
+    private final BlockingQueue<IRubyObject> queue;
+
+    private final IRubyObject signal;
+
+    private final AtomicBoolean flushing;
+
+    public PeriodicFlush(final BlockingQueue<IRubyObject> queue, final IRubyObject signal,
+        final AtomicBoolean flushing) {
+        this.queue = queue;
+        this.signal = signal;
+        this.flushing = flushing;
+    }
+
+    public void start() {
+        executor.scheduleAtFixedRate(() -> {
+            if (flushing.compareAndSet(false, true)) {
+                LOGGER.debug("Pushing flush onto pipeline.");
+                try {
+                    queue.put(signal);
+                } catch (final InterruptedException ex) {
+                    throw new IllegalStateException(ex);
+                }
+            }
+        }, 0L, 5L, TimeUnit.SECONDS);
+    }
+
+    @Override
+    public void close() throws InterruptedException {
+        executor.shutdown();
+        if (!executor.awaitTermination(10L, TimeUnit.SECONDS)) {
+            throw new IllegalStateException("Failed to stop period flush action.");
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/execution/WorkerLoop.java b/logstash-core/src/main/java/org/logstash/execution/WorkerLoop.java
index 867b2587cd6..462953650e3 100644
--- a/logstash-core/src/main/java/org/logstash/execution/WorkerLoop.java
+++ b/logstash-core/src/main/java/org/logstash/execution/WorkerLoop.java
@@ -1,6 +1,7 @@
 package org.logstash.execution;
 
 import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jruby.RubyArray;
@@ -19,7 +20,7 @@ public final class WorkerLoop implements Runnable {
 
     private final IRubyObject readClient;
 
-    private final IRubyObject flushing;
+    private final AtomicBoolean flushing;
 
     private final IRubyObject consumedCounter;
 
@@ -29,7 +30,7 @@ public final class WorkerLoop implements Runnable {
 
     public WorkerLoop(final Dataset execution, final BlockingQueue<IRubyObject> signalQueue,
         final IRubyObject readClient, final IRubyObject filteredCounter,
-        final IRubyObject consumedCounter, final IRubyObject flushing, final boolean drainQueue) {
+        final IRubyObject consumedCounter, final AtomicBoolean flushing, final boolean drainQueue) {
         this.consumedCounter = consumedCounter;
         this.filteredCounter = filteredCounter;
         this.execution = execution;
@@ -63,7 +64,7 @@ public void run() {
                 readClient.callMethod(context, "add_filtered_metrics", filteredSize);
                 readClient.callMethod(context, "close_batch", batch);
                 if (isFlush) {
-                    flushing.callMethod(context, "set", context.fals);
+                    flushing.set(false);
                 }
             } while (!shutdownRequested && !isDraining(context));
             //we are shutting down, queue is drained if it was required, now  perform a final flush.
