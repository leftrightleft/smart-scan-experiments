diff --git a/docs/asciidoc/static/advanced-pipeline.asciidoc b/docs/asciidoc/static/advanced-pipeline.asciidoc
index 4ff1aa44273..80ba6c89601 100644
--- a/docs/asciidoc/static/advanced-pipeline.asciidoc
+++ b/docs/asciidoc/static/advanced-pipeline.asciidoc
@@ -1,5 +1,5 @@
 [[advanced-pipeline]]
-== Setting Up an Advanced Logstash Pipeline
+=== Setting Up an Advanced Logstash Pipeline
 
 A Logstash pipeline in most use cases has one or more input, filter, and output plugins. The scenarios in this section 
 build Logstash configuration files to specify these plugins and discuss what each plugin is doing.
@@ -34,7 +34,7 @@ examples in this tutorial build configuration files to address specific use case
 Paste the skeleton into a file named `first-pipeline.conf` in your home Logstash directory.
 
 [[parsing-into-es]]
-=== Parsing Apache Logs into Elasticsearch
+==== Parsing Apache Logs into Elasticsearch
 
 This example creates a Logstash pipeline that takes Apache web logs as input, parses those logs to create specific, 
 named fields from the logs, and writes the parsed data to an Elasticsearch cluster.
@@ -43,7 +43,7 @@ You can download the sample data set used in this example http://tbd.co/groksamp
 
 [float]
 [[configuring-file-input]]
-==== Configuring Logstash for File Input
+===== Configuring Logstash for File Input
 
 To start your Logstash pipeline, configure the Logstash instance to read from a file using the 
 {logstash}plugins-inputs-file.html[file] input plugin.
@@ -66,7 +66,7 @@ Replace `/path/to/` with the actual path to the location of `groksample.log` in
 
 [float]
 [[configuring-grok-filter]]
-==== Parsing Web Logs with the Grok Filter Plugin
+===== Parsing Web Logs with the Grok Filter Plugin
 
 The {logstash}plugin-filters-grok[`grok`] filter plugin is one of several plugins that are available by default in 
 Logstash. For details on how to manage Logstash plugins, see the <<working-with-plugins,reference documentation>> for 
@@ -126,7 +126,7 @@ After processing, the sample line has the following JSON representation:
 
 [float]
 [[indexing-parsed-data-into-elasticsearch]]
-==== Indexing Parsed Data into Elasticsearch
+===== Indexing Parsed Data into Elasticsearch
 
 Now that the web logs are broken down into specific fields, the Logstash pipeline can index the data into an 
 Elasticsearch cluster. Edit the `first-pipeline.conf` file to add the following text after the `input` section:
@@ -145,7 +145,7 @@ purposes of this example, however, the default behavior is sufficient.
 
 [float]
 [[configuring-geoip-plugin]]
-==== Enhancing Your Data with the Geoip Filter Plugin
+===== Enhancing Your Data with the Geoip Filter Plugin
 
 In addition to parsing log data for better searches, filter plugins can derive supplementary information from existing 
 data. As an example, the {logstash}plugins-filters-geoip.html[`geoip`] plugin looks up IP addresses, derives geographic 
@@ -166,7 +166,7 @@ Specify the name of the field that contains the IP address to look up. In this t
 
 [float]
 [[testing-initial-pipeline]]
-==== Testing Your Initial Pipeline
+===== Testing Your Initial Pipeline
 
 At this point, your `first-pipeline.conf` file has input, filter, and output sections properly configured, and looks
 like this:
@@ -308,7 +308,7 @@ Only one of the log entries comes from Buffalo, so the query produces a single r
 }
 
 [[multiple-input-output-plugins]]
-=== Multiple Input and Output Plugins
+==== Multiple Input and Output Plugins
 
 The information you need to manage often comes from several disparate sources, and use cases can require multiple 
 destinations for your data. Your Logstash pipeline can use multiple input and output plugins to handle these 
@@ -319,7 +319,7 @@ sends the information to an Elasticsearch cluster as well as writing the informa
 
 [float]
 [[twitter-configuration]]
-==== Reading from a Twitter feed
+===== Reading from a Twitter feed
 
 To add a Twitter feed, you need several pieces of information:
 
@@ -345,7 +345,7 @@ twitter {
 
 [float]
 [[configuring-lsf]]
-==== The Logstash Forwarder
+===== The Logstash Forwarder
 
 The https://github.com/elastic/logstash-forwarder[Logstash Forwarder] is a lightweight, resource-friendly tool that 
 collects logs from files on the server and forwards these logs to your Logstash instance for processing. The 
@@ -403,7 +403,7 @@ lumberjack {
 
 [float]
 [[logstash-file-output]]
-==== Writing Logstash Data to a File
+===== Writing Logstash Data to a File
 
 You can configure your Logstash pipeline to write data directly to a file with the 
 {logstash}plugins-outputs-file.html[`file`] output plugin.
@@ -418,7 +418,7 @@ file {
 
 [float]
 [[multiple-es-nodes]]
-==== Writing to multiple Elasticsearch nodes
+===== Writing to multiple Elasticsearch nodes
 
 Writing to multiple Elasticsearch nodes lightens the resource demands on a given Elasticsearch node, as well as 
 providing redundant points of entry into the cluster when a particular node is unavailable.
@@ -438,7 +438,7 @@ parameter lists multiple IP addresses, Logstash load-balances requests across th
 
 [float]
 [[testing-second-pipeline]]
-==== Testing the Pipeline
+===== Testing the Pipeline
 
 At this point, your `first-pipeline.conf` file looks like this:
 
diff --git a/docs/asciidoc/static/command-line-flags.asciidoc b/docs/asciidoc/static/command-line-flags.asciidoc
index 1868e0b1912..104647076f6 100644
--- a/docs/asciidoc/static/command-line-flags.asciidoc
+++ b/docs/asciidoc/static/command-line-flags.asciidoc
@@ -1,10 +1,7 @@
-== Command-line flags
+[[command-line-flags]]
+=== Command-line flags
 
-[float]
-=== Pipeline
-
-The Logstash pipeline has the following flags. (You can use the `--help` flag to
-display this information.)
+Logstash has the following flags. You can use the `--help` flag to display this information.
 
 [source,shell]
 ----------------------------------
@@ -55,4 +52,3 @@ display this information.)
  *DEPRECATED: see --verbose/debug* Increase verbosity. There are multiple levels
  of verbosity available with '-vv' currently being the highest
 ----------------------------------
-
diff --git a/docs/asciidoc/static/configuration.asciidoc b/docs/asciidoc/static/configuration.asciidoc
index 02dbaf71564..40f75864cd2 100644
--- a/docs/asciidoc/static/configuration.asciidoc
+++ b/docs/asciidoc/static/configuration.asciidoc
@@ -26,7 +26,7 @@ bin/logstash -f logstash-simple.conf
 Et voilà! Logstash reads  the specified configuration file and outputs to both Elasticsearch and stdout. Before we
 move on to some <<config-examples,more complex examples>>, let's take a closer look at what's in a config file.
 
-[float]
+[[configuration-file-structure]]
 === Structure of a Config File
 
 A Logstash config file has a separate section for each type of plugin you want to add to the event processing pipeline. For example:
@@ -54,7 +54,7 @@ multiple filters, they are applied in the order of their appearance in the confi
 
 [float]
 [[plugin_configuration]]
-=== Plugins
+=== Plugin Configuration
 
 The configuration of a plugin consists of the plugin name followed
 by a block of settings for that plugin. For example, this input section configures two file inputs:
@@ -79,6 +79,7 @@ In this example, two settings are configured for each of the file inputs: 'path'
 The settings you can configure vary according to the plugin type. For information about each plugin, see <<input-plugins,Input Plugins>>, <<output-plugins, Output Plugins>>, <<filter-plugins,Filter Plugins>>, and <<codec-plugins,Codec Plugins>>.
 
 [float]
+[[plugin-value-types]]
 === Value Types
 
 A plugin can require that the value for a setting be a
@@ -227,6 +228,7 @@ Example:
 ----------------------------------
 
 [float]
+[[comments]]
 === Comments
 
 Comments are the same as in perl, ruby, and python. A comment starts with a '#' character, and does not need to be at the beginning of a line. For example:
@@ -240,7 +242,6 @@ input { # comments can appear at the end of a line, too
 }
 ----------------------------------
 
-[float]
 [[event-dependent-configuration]]
 === Event Dependent Configuration
 
diff --git a/docs/asciidoc/static/deploying.asciidoc b/docs/asciidoc/static/deploying.asciidoc
index 54f829b4fdb..56ac9c9db74 100644
--- a/docs/asciidoc/static/deploying.asciidoc
+++ b/docs/asciidoc/static/deploying.asciidoc
@@ -1,5 +1,5 @@
 [[deploying-and-scaling]]
-== Deploying and Scaling Logstash
+=== Deploying and Scaling Logstash
 
 As your use case for Logstash evolves, the preferred architecture at a given scale will change. This section discusses 
 a range of Logstash architectures in increasing order of complexity, starting from a minimal installation and adding 
@@ -8,7 +8,7 @@ write to a large variety of {logstash}output-plugins.html[endpoints].
 
 [float]
 [[deploying-minimal-install]]
-=== The Minimal Installation
+==== The Minimal Installation
 
 The minimal Logstash installation has one Logstash instance and one Elasticsearch instance. These instances are 
 directly connected. Logstash uses an {logstash}input-plugins.html[_input plugin_] to ingest data and an 
@@ -21,7 +21,7 @@ image::static/images/deploy_1.png[]
 
 [float]
 [[deploying-filter-threads]]
-=== Using Filters
+==== Using Filters
 
 Log data is typically unstructured, often contains extraneous information that isn’t relevant to your use case, and 
 sometimes is missing relevant information that can be derived from the log contents. You can use a 
@@ -40,7 +40,7 @@ image::static/images/deploy_2.png[]
 
 [float]
 [[deploying-logstash-forwarder]]
-=== Using Logstash Forwarder
+==== Using Logstash Forwarder
 
 The https://github.com/elastic/logstash-forwarder[Logstash Forwarder] is a lightweight, resource-friendly tool written 
 in Go that collects logs from files on the server and forwards these logs to other machines for processing. The 
@@ -56,7 +56,7 @@ image::static/images/deploy_3.png[]
 
 [float]
 [[deploying-larger-cluster]]
-=== Scaling to a Larger Elasticsearch Cluster
+==== Scaling to a Larger Elasticsearch Cluster
 
 Typically, Logstash does not communicate with a single Elasticsearch node, but with a cluster that comprises several 
 nodes. Logstash can use any of the protocols that Elasticsearch supports to move data into the cluster: 
@@ -96,7 +96,7 @@ image::static/images/deploy_4.png[]
 
 [float]
 [[deploying-message-queueing]]
-=== Managing Throughput Spikes with Message Queueing
+==== Managing Throughput Spikes with Message Queueing
 
 When the data coming into a Logstash pipeline exceeds the Elasticsearch cluster's ability to ingest the data, you can 
 use a message queue as a buffer. By default, Logstash throttles incoming events when 
@@ -117,7 +117,7 @@ image::static/images/deploy_5.png[]
 
 [float]
 [[deploying-logstash-ha]]
-=== Multiple Connections for Logstash High Availability
+==== Multiple Connections for Logstash High Availability
 
 To make your Logstash deployment more resilient to individual instance failures, you can set up a load balancer between 
 your data source machines and the Logstash cluster. The load balancer handles the individual connections to the 
@@ -137,7 +137,7 @@ by eliminating single points of failure.
 
 [float]
 [[deploying-scaling]]
-=== Scaling Logstash
+==== Scaling Logstash
 
 A mature Logstash deployment typically has the following pipeline:
 
diff --git a/docs/asciidoc/static/getting-started-with-logstash.asciidoc b/docs/asciidoc/static/getting-started-with-logstash.asciidoc
index 3e19432ee81..487090ba47c 100644
--- a/docs/asciidoc/static/getting-started-with-logstash.asciidoc
+++ b/docs/asciidoc/static/getting-started-with-logstash.asciidoc
@@ -32,9 +32,8 @@ Download the https://www.elastic.co/downloads/logstash[Logstash installation fil
 Unpack the file. On supported Linux operating systems, you can <<package-repositories,use a package manager>> to 
 install Logstash.
 
-[float]
 [[first-event]]
-=== Stashing Your First Event
+=== Stashing Your First Event: Basic Logstash Example
 
 To test your Logstash installation, run the most basic Logstash pipeline:
 
diff --git a/docs/asciidoc/static/include/pluginbody.asciidoc b/docs/asciidoc/static/include/pluginbody.asciidoc
index 4a09f40cfb4..8d77b9aeed9 100644
--- a/docs/asciidoc/static/include/pluginbody.asciidoc
+++ b/docs/asciidoc/static/include/pluginbody.asciidoc
@@ -1,5 +1,6 @@
 pass::[<?edit_url https://github.com/elastic/logstash/edit/master/docs/asciidoc/static/include/pluginbody.asciidoc ?>]
-== How to write a Logstash {plugintype} plugin
+
+=== How to write a Logstash {plugintype} plugin
 
 To develop a new {plugintype} for Logstash, you build a self-contained Ruby gem
 whose source code lives in its own GitHub repository. The Ruby gem can then be
@@ -12,13 +13,11 @@ NOTE: As of Logstash 1.5, all plugins are self-contained Ruby gems. This change
 makes it possible to develop and release plugins separately. In previous
 versions, plugins were part of the core Logstash distribution.
 
-[float]
-== Get started
+==== Get started
 
 {getstarted}
 
-[float]
-=== Create a GitHub repo for your new plugin
+==== Create a GitHub repo for your new plugin
 Each Logstash plugin lives in its own GitHub repository. To create a new repository for your plugin:
 
 . Log in to GitHub.
@@ -30,11 +29,10 @@ Each Logstash plugin lives in its own GitHub repository. To create a new reposit
 ** **Initialize this repository with a README** -- enables you to immediately clone the repository to your computer.
 . Click **Create Repository**.
 
-[float]
-=== Copy the {plugintype} code
+==== Copy the {plugintype} code
+
+Build your local repository:
 
-[float]
-==== Build your local repository
 . **Clone your plugin.** Replace `GITUSERNAME` with your github username, and
 `MYPLUGINNAME` with your plugin name.
 ** `git clone https://github.com/GITUSERNAME/logstash-`+pass:attributes[{plugintype}]-MYPLUGINNAME.git+
@@ -90,8 +88,8 @@ For more information about the Ruby gem file structure and an excellent
 walkthrough of the Ruby gem creation process, see
 http://timelessrepo.com/making-ruby-gems
 
-[float]
-=== See what your plugin looks like
+==== See what your plugin looks like
+
 Before we dive into the details, open up the plugin file in your favorite text editor
 and take a look.
 
@@ -289,13 +287,11 @@ end # class LogStash::{pluginclass}::{pluginnamecap}
 ----------------------------------
 endif::receive_method[]
 
-[float]
-== Coding {plugintype} plugins
+==== Coding {plugintype} plugins
 
 Now let's take a line-by-line look at the example plugin.
 
-[float]
-=== `encoding`
+==== `encoding`
 
 It seems like a small thing, but remember to specify the encoding at the
 beginning of your plugin code:
@@ -308,8 +304,7 @@ beginning of your plugin code:
 Logstash depends on things being in UTF-8, so we put this here to tell the Ruby
 interpreter that we’re going to be using the UTF-8 encoding.
 
-[float]
-=== `require` Statements
+==== `require` Statements
 
 Logstash {plugintype} plugins require parent classes defined in
 +logstash/pass:attributes[{plugintype}]s/base+ and logstash/namespace:
@@ -324,12 +319,10 @@ require "logstash/namespace"
 Of course, the plugin you build may depend on other code, or even gems. Just put
 them here along with these Logstash dependencies.
 
-[float]
-=== Plugin Body
+==== Plugin Body
 
 Let's go through the various elements of the plugin itself.
 
-[float]
 ==== Inline Documentation
 Logstash provides infrastructure to automatically generate documentation for
 plugins. We use the asciidoc format to write documentation so _any_ comments in
@@ -355,7 +348,7 @@ Ruby code, use the asciidoc `[source,ruby]` directive:
 # ----------------------------------
 ----------------------------------
 
-In the rendered html document, this block would look like:
+In the rendered HTML document, this block would look like:
 
 []
 =========================
@@ -374,8 +367,7 @@ match => {
 TIP: For more asciidoc formatting tips, see the excellent reference at
 https://github.com/elastic/docs#asciidoc-guide
 
-[float]
-=== `class` Declaration
+==== `class` Declaration
 The {plugintype} plugin class should be a subclass of
 +LogStash::pass:attributes[{pluginclass}]::Base+:
 
@@ -392,8 +384,7 @@ The class name should closely mirror the plugin name, for example:
 LogStash::{pluginclass}::{pluginnamecap}
 ----
 
-[float]
-=== `config_name`
+==== `config_name`
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -445,8 +436,7 @@ output {
 endif::blockinput[]
 endif::encode_method[]
 
-[float]
-=== Configuration Parameters
+==== Configuration Parameters
 [source,ruby]
 ----------------------------------
   config :variable_name, :validate => :variable_type, :default => "Default value", :required => boolean, :deprecated => boolean
@@ -468,8 +458,7 @@ will become a valid boolean in the config.  This coercion works for the
 `false`)
 * `:deprecated` - informational (also a Boolean `true` or `false`)
 
-[float]
-=== Plugin Methods
+==== Plugin Methods
 
 {methodheader}
 
@@ -477,7 +466,7 @@ will become a valid boolean in the config.  This coercion works for the
 // If register_method is defined (should be all types)
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::register_method[]
-[float]
+
 ==== `register` Method
 [source,ruby]
 [subs="attributes"]
@@ -506,8 +495,9 @@ endif::register_method[]
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::filter_method[]
 ifndef::blockfilter[]
-[float]
+
 ==== `filter` Method
+
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -548,8 +538,9 @@ endif::filter_method[]
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::decode_method[]
 ifndef::blockcodec[]
-[float]
+
 ==== `decode` Method
+
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -577,8 +568,9 @@ endif::decode_method[]
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::encode_method[]
 ifndef::blockcodec[]
-[float]
+
 ==== `encode` Method
+
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -603,8 +595,9 @@ endif::encode_method[]
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::run_method[]
 ifndef::blockinput[]
-[float]
+
 ==== `run` Method
+
 The {pluginname} input plugin has the following `run` Method:
 
 [source,ruby]
@@ -690,8 +683,9 @@ endif::run_method[]
 // If receive_method is defined (should only be for output plugin page)
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::receive_method[]
-[float]
+
 ==== `receive` Method
+
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -750,13 +744,12 @@ endif::receive_method[]
 // you should include a teardown method.
 // endif::teardown_method[]
 
-[float]
-== Building the Plugin
+==== Building the Plugin
+
 At this point in the process you have coded your plugin and are ready to build
 a Ruby Gem from it.  The following steps will help you complete the process.
 
-[float]
-=== External dependencies
+==== External dependencies
 
 A `require` statement in Ruby is used to include necessary code. In some cases
 your plugin may require additional files.  For example, the collectd plugin
@@ -795,8 +788,8 @@ will be discussed further in the testing section of this document.
 Another kind of external dependency is on jar files.  This will be described
 in the "Add a `gemspec` file" section.
 
-[float]
-=== Add a Gemfile
+==== Add a Gemfile
+
 Gemfiles allow Ruby's Bundler to maintain the dependencies for your plugin.
 Currently, all we'll need is the Logstash gem, for testing, but if you require
 other gems, you should add them in here.
@@ -811,8 +804,7 @@ gemspec
 gem "logstash", :github => "elastic/logstash", :branch => "{branch}"
 ----------------------------------
 
-[float]
-=== Add a `gemspec` file
+==== Add a `gemspec` file
 Gemspecs define the Ruby gem which will be built and contain your plugin.
 
 TIP: More information can be found on the
@@ -883,8 +875,8 @@ This plugin should work but would benefit from use by folks like you. Please let
 You will no longer see a message indicating potential code immaturity when a
 plugin reaches version 1.0.0
 
-[float]
 ==== Runtime & Development Dependencies
+
 At the bottom of the `gemspec` file is a section with a comment:
 `Gem dependencies`.  This is where any other needed gems must be mentioned. If
 a gem is necessary for your plugin to function, it is a runtime dependency. If
@@ -911,8 +903,8 @@ and less than version 2.0 `'< 2.0.0'`.
 IMPORTANT: All plugins have a runtime dependency on the `logstash` core gem, and
 a development dependency on `logstash-devutils`.
 
-[float]
 ==== Jar dependencies
+
 In some cases, such as the
 https://github.com/logstash-plugins/logstash-output-elasticsearch/blob/master/logstash-output-elasticsearch.gemspec#L22-L23[Elasticsearch output plugin],
 your code may depend on a jar file.  In cases such as this, the dependency is
@@ -929,8 +921,8 @@ added in the gemspec file in this manner:
 With these both defined, the install process will search for the required jar
 file at http://mvnrepository.com and download the specified version.
 
-[float]
-=== Add Tests
+==== Add Tests
+
 Logstash loves tests. Lots of tests. If you're using your new {plugintype}
 plugin in a production environment, you'll want to have some tests to ensure you
 are not breaking any existing functionality.
@@ -942,8 +934,8 @@ For help learning about tests and testing, look in the
 +spec/pass:attributes[{plugintype}]s/+ directory of several other similar
 plugins.
 
-[float]
-=== Clone and test!
+==== Clone and test!
+
 Now let's start with a fresh clone of the plugin, build it and run the tests.
 
 * **Clone your plugin into a temporary location** Replace `GITUSERNAME` with
@@ -986,11 +978,10 @@ Finished in 0.034 seconds
 Hooray! You're almost there! (Unless you saw failures... you should fix those
   first).
 
-[float]
-=== Building and Testing
+==== Building and Testing
+
 Now you're ready to build your (well-tested) plugin into a Ruby gem.
 
-[float]
 ==== Build
 You already have all the necessary ingredients, so let's go ahead and run the
 build command:
@@ -1010,8 +1001,8 @@ logstash-{plugintype}-mypluginname-0.1.0.gem
 The `s.version` number from your gemspec file will provide the gem version, in
 this case, `0.1.0`.
 
-[float]
 ==== Test installation
+
 You should test install your plugin into a clean installation of Logstash.
 Download the latest version from the
 https://www.elastic.co/downloads/logstash/[Logstash downloads page].
@@ -1073,7 +1064,6 @@ ifndef::blockinput[]
 bin/logstash -e 'input { {pluginname}{} } output {stdout { codec => rubydebug }}'
 ----------------------------------
 
-
 The {pluginname} {plugintype} plugin will send the contents of `message` (with a
 default message of "Hello World!") every second.
 
@@ -1192,15 +1182,13 @@ endif::receive_method[]
 Congratulations! You've built, deployed and successfully run a Logstash
 {plugintype}.
 
-[float]
-== Submitting your plugin to http://rubygems.org[RubyGems.org] and https://github.com/logstash-plugins[logstash-plugins]
+==== Submitting your plugin to http://rubygems.org[RubyGems.org] and https://github.com/logstash-plugins[logstash-plugins]
 
 Logstash uses http://rubygems.org[RubyGems.org] as its repository for all plugin
 artifacts. Once you have developed your new plugin, you can make it available to
 Logstash users by simply publishing it to RubyGems.org.
 
-[float]
-=== Licensing
+==== Licensing
 Logstash and all its plugins are licensed under
 https://github.com/elasticsearch/logstash/blob/master/LICENSE[Apache License, version 2 ("ALv2")].
 If you make your plugin publicly available via http://rubygems.org[RubyGems.org],
@@ -1208,8 +1196,7 @@ please make sure to have this line in your gemspec:
 
 * `s.licenses = ['Apache License (2.0)']`
 
-[float]
-=== Publishing to http://rubygems.org[RubyGems.org]
+==== Publishing to http://rubygems.org[RubyGems.org]
 
 To begin, you’ll need an account on RubyGems.org
 
@@ -1264,13 +1251,12 @@ by running:
 bin/plugin install logstash-{plugintype}-mypluginname
 ----------------------------------
 
-[float]
-=== Contributing your source code to https://github.com/logstash-plugins[logstash-plugins]
+==== Contributing your source code to https://github.com/logstash-plugins[logstash-plugins]
+
 It is not required to contribute your source code to
 https://github.com/logstash-plugins[logstash-plugins] github organization, but
 we always welcome new plugins!
 
-[float]
 ==== Benefits
 
 Some of the many benefits of having your plugin in the logstash-plugins
@@ -1285,7 +1271,6 @@ tested against current and future releases of Logstash.  As a result, users will
 have the assurance that if incompatibilities arise, they will be quickly
 discovered and corrected.
 
-[float]
 ==== Acceptance Guidelines
 
 * **Code Review** Your plugin must be reviewed by members of the community for
@@ -1303,4 +1288,3 @@ facilitate the move to the logstash-plugins organization using the recommended
 https://help.github.com/articles/transferring-a-repository/#transferring-from-a-user-to-an-organization[github process].
 
 pass::[<?edit_url?>]
-
diff --git a/docs/asciidoc/static/life-of-an-event.asciidoc b/docs/asciidoc/static/life-of-an-event.asciidoc
index dc7ebdf9c26..569bd545f7c 100644
--- a/docs/asciidoc/static/life-of-an-event.asciidoc
+++ b/docs/asciidoc/static/life-of-an-event.asciidoc
@@ -1,5 +1,5 @@
 [[pipeline]]
-== Logstash Processing Pipeline
+=== Logstash Processing Pipeline
 
 The Logstash event processing pipeline has three stages: inputs -> filters ->
 outputs. Inputs generate events, filters modify them, and outputs ship them
