diff --git a/lib/logstash/pluginmanager/install.rb b/lib/logstash/pluginmanager/install.rb
index d2ace41a24e..944b7d72d23 100644
--- a/lib/logstash/pluginmanager/install.rb
+++ b/lib/logstash/pluginmanager/install.rb
@@ -26,12 +26,12 @@ def execute
 
     unless gem_path = (plugin =~ /\.gem$/ && File.file?(plugin)) ? plugin : LogStash::PluginManager::Util.download_gem(plugin, version)
       $stderr.puts ("Plugin does not exist '#{plugin}'. Aborting")
-      exit(99)
+      return 99
     end
 
     unless gem_meta = LogStash::PluginManager::Util.logstash_plugin?(gem_path)
       $stderr.puts ("Invalid logstash plugin gem '#{plugin}'. Aborting...")
-      exit(99)
+      return 99
     end
 
     puts ("valid logstash plugin. Continueing...")
@@ -42,7 +42,7 @@ def execute
       if Gem::Version.new(current.version) > Gem::Version.new(gem_meta.version)
         unless LogStash::PluginManager::Util.ask_yesno("Do you wish to downgrade this plugin?")
           $stderr.puts("Aborting installation")
-          exit(99)
+          return 99
         end
       end
 
@@ -58,7 +58,7 @@ def execute
     inst.install plugin, version
     specs, _ = inst.installed_gems
     puts ("Successfully installed '#{specs.name}' with version '#{specs.version}'")
-
+    return 0
   end
 
 end # class Logstash::PluginManager
diff --git a/lib/logstash/pluginmanager/list.rb b/lib/logstash/pluginmanager/list.rb
index 54081761b59..c897429a37b 100644
--- a/lib/logstash/pluginmanager/list.rb
+++ b/lib/logstash/pluginmanager/list.rb
@@ -29,10 +29,10 @@ def execute
             .select{|spec| group ? group == spec.metadata['logstash_group'] : true}
     if specs.empty?
       $stderr.puts ("No plugins found.")
-      exit(99)
+      return 0
     end
     specs.each {|spec| puts ("#{spec.name} (#{spec.version})") }
-
+    return 0
   end
 
 end # class Logstash::PluginManager
diff --git a/lib/logstash/pluginmanager/uninstall.rb b/lib/logstash/pluginmanager/uninstall.rb
index d139f5f5cd9..f5c247122ef 100644
--- a/lib/logstash/pluginmanager/uninstall.rb
+++ b/lib/logstash/pluginmanager/uninstall.rb
@@ -19,12 +19,12 @@ def execute
     
     unless gem_data = LogStash::PluginManager::Util.logstash_plugin?(plugin)
       $stderr.puts ("Trying to remove a non logstash plugin. Aborting")
-      exit(99)
+      return 99
     end
 
     puts ("Uninstalling plugin '#{plugin}' with version '#{gem_data.version}'.")
     ::Gem::Uninstaller.new(plugin, {}).uninstall
-
+    return 
   end
 
 end # class Logstash::PluginManager
diff --git a/lib/logstash/pluginmanager/update.rb b/lib/logstash/pluginmanager/update.rb
index e2ebbb6b35f..b3022538dc3 100644
--- a/lib/logstash/pluginmanager/update.rb
+++ b/lib/logstash/pluginmanager/update.rb
@@ -30,10 +30,10 @@ def execute
     specs = LogStash::PluginManager::Util.matching_specs(plugin).select{|spec| LogStash::PluginManager::Util.logstash_plugin?(spec) }
     if specs.empty?
       $stderr.puts ("No plugins found to update or trying to update a non logstash plugin.")
-      exit(99)
+      return 99
     end
     specs.each { |spec| update_gem(spec, version) }
-
+    return 0
   end
 
 
@@ -41,17 +41,17 @@ def update_gem(spec, version)
 
     unless gem_path = LogStash::PluginManager::Util.download_gem(spec.name, version)
       $stderr.puts ("Plugin '#{spec.name}' does not exist remotely. Skipping.")
-      return nil
+      return 0
     end
 
     unless gem_meta = LogStash::PluginManager::Util.logstash_plugin?(gem_path)
       $stderr.puts ("Invalid logstash plugin gem. skipping.")
-      return nil
+      return 99
     end
 
     unless Gem::Version.new(gem_meta.version) > Gem::Version.new(spec.version)
       puts ("No newer version available for #{spec.name}. skipping.")
-      return nil
+      return 0
     end
 
     puts ("Updating #{spec.name} from version #{spec.version} to #{gem_meta.version}")
@@ -68,7 +68,7 @@ def update_gem(spec, version)
     inst.install spec.name, gem_meta.version
     specs, _ = inst.installed_gems
     puts ("Update successful")
-
+    return 0
   end
 
 end # class Logstash::PluginManager
