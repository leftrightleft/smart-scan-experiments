diff --git a/lib/logstash/inputs/sqs.rb b/lib/logstash/inputs/sqs.rb
index cd3c8823fc4..0f04988b630 100644
--- a/lib/logstash/inputs/sqs.rb
+++ b/lib/logstash/inputs/sqs.rb
@@ -56,13 +56,19 @@
 #
 class LogStash::Inputs::SQS < LogStash::Inputs::Threadable
   include LogStash::PluginMixins::AwsConfig
-  
+
   config_name "sqs"
   plugin_status "experimental"
 
   # Name of the SQS Queue name to pull messages from. Note that this is just the name of the queue, not the URL or ARN.
   config :queue, :validate => :string, :required => true
 
+  # Name of the event field in which to store the SQS message ID
+  config :id_field, :validate => :string
+
+  # Name of the event field in which to store the SQS message MD5 checksum
+  config :md5_field, :validate => :string
+
   public
   def aws_service_endpoint(region)
     return {
@@ -95,10 +101,10 @@ def register
   public
   def run(output_queue)
     @logger.debug("Polling SQS queue", :queue => @queue)
-    
+
     receive_opts = {
-      :limit => 10,
-      :visibility_timeout => 30
+        :limit => 10,
+        :visibility_timeout => 30
     }
 
     continue_polling = true
@@ -108,6 +114,12 @@ def run(output_queue)
           if message
             e = to_event(message.body, @sqs_queue)
             if e
+              if @id_field
+                e[@id_field] = message.id
+              end
+              if @md5_field
+                e[@md5_field] = message.md5
+              end
               @logger.debug("Processed SQS message", :message_id => message.id, :message_md5 => message.md5, :queue => @queue)
               output_queue << e
               message.delete
@@ -135,7 +147,7 @@ def run_with_backoff(max_time, sleep_time, &block)
       @logger.error("AWS::EC2::Errors::RequestLimitExceeded ... failed.", :queue => @queue)
       return false
     end # retry limit exceeded
-    
+
     begin
       block.call
     rescue AWS::EC2::Errors::RequestLimitExceeded
