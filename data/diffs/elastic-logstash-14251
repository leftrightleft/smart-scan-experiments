diff --git a/buildSrc/src/main/resources/checkstyle/checkstyle-idea.xml b/buildSrc/src/main/resources/checkstyle/checkstyle-idea.xml
new file mode 100644
index 00000000000..e107c497fb4
--- /dev/null
+++ b/buildSrc/src/main/resources/checkstyle/checkstyle-idea.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CheckStyle-IDEA">
+    <option name="configuration">
+      <map>
+        <entry key="active-configuration" value="PROJECT_RELATIVE:$PROJECT_DIR$/checkstyle_ide.xml:Logstash" />
+        <entry key="checkstyle-version" value="9.2" />
+        <entry key="copy-libs" value="false" />
+        <entry key="location-0" value="BUNDLED:(bundled):Sun Checks" />
+        <entry key="location-1" value="BUNDLED:(bundled):Google Checks" />
+        <entry key="location-2" value="PROJECT_RELATIVE:$PROJECT_DIR$/checkstyle_ide.xml:Logstash" />
+        <entry key="scan-before-checkin" value="false" />
+        <entry key="scanscope" value="JavaOnlyWithTests" />
+        <entry key="suppress-errors" value="false" />
+        <entry key="thirdparty-classpath" value="$PROJECT_DIR$/build-conventions/build/libs/build-conventions.jar" />
+      </map>
+    </option>
+  </component>
+</project>
diff --git a/buildSrc/src/main/resources/checkstyle/checkstyle.xml b/buildSrc/src/main/resources/checkstyle/checkstyle.xml
new file mode 100644
index 00000000000..dcc5163c969
--- /dev/null
+++ b/buildSrc/src/main/resources/checkstyle/checkstyle.xml
@@ -0,0 +1,149 @@
+<?xml version="1.0"?>
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+
+<module name="Checker">
+  <module name="BeforeExecutionExclusionFileFilter">
+   <property name="fileNamePattern" value="module\-info\.java$"/>
+  </module>
+
+  <property name="charset" value="UTF-8" />
+
+  <module name="SuppressionFilter">
+    <property name="file" value="${config_loc}/checkstyle_suppressions.xml" />
+  </module>
+
+  <module name="SuppressWarningsFilter" />
+
+  <module name="RegexpMultiline">
+    <property name="id" value="MultipleHeaderJavadoc" />
+    <property name="format" value="^\s*\/\*\r?\n(\s\*[A-Za-z0-9 \.\/\;\,\.\-\(\)\\\x{22}\/\:\@\=\'\]\[\_\x{3E}\x{3C}]*\r?\n)+(\s\*\/)\s+package" />
+    <property name="fileExtensions" value="java" />
+    <property name="minimum" value="1" />
+    <property name="maximum" value="1" />
+    <property name="matchAcrossLines" value="true" />
+    <property name="message" value="Duplicate header javadocs are forbidden" />
+  </module>
+
+  <!-- Checks Java files and forbids empty Javadoc comments. -->
+  <!-- Although you can use the "JavadocStyle" rule for this, it considers Javadoc -->
+  <!-- that only contains a "@return" line to be empty. -->
+  <module name="RegexpMultiline">
+    <property name="id" value="EmptyJavadoc" />
+    <property name="format" value="\/\*[\s\*]*\*\/" />
+    <property name="fileExtensions" value="java" />
+    <property name="message" value="Empty javadoc comments are forbidden" />
+  </module>
+
+  <!-- Its our official line length! See checkstyle_suppressions.xml for the files that don't pass this. For now we
+    suppress the check there but enforce it everywhere else. This prevents the list from getting longer even if it is
+    unfair. -->
+  <module name="LineLength">
+    <property name="max" value="140" />
+    <property name="ignorePattern" value="^ *\* *https?://[^ ]+$" />
+  </module>
+
+  <module name="TreeWalker">
+    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
+    <module name="SuppressWarningsHolder" />
+
+    <module name="AvoidStarImport" />
+
+    <!-- Unused imports are forbidden -->
+    <module name="UnusedImports" />
+
+    <!-- Non-inner classes must be in files that match their names. -->
+    <module name="OuterTypeFilename" />
+
+    <!-- No line wraps inside of import and package statements. -->
+    <module name="NoLineWrap" />
+
+    <!-- only one statement per line should be allowed -->
+    <module name="OneStatementPerLine" />
+
+    <!-- Each java file has only one outer class -->
+    <module name="OneTopLevelClass" />
+
+    <!-- The suffix L is preferred, because the letter l (ell) is often
+      hard to distinguish from the digit 1 (one). -->
+    <module name="UpperEll" />
+
+    <module name="EqualsHashCode" />
+
+    <!-- Checks that the order of modifiers conforms to the suggestions in the
+    Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. It is not that
+    the standard is perfect, but having a consistent order makes the code more
+    readable and no other order is compellingly better than the standard.
+    The correct order is:
+            public
+            protected
+            private
+            abstract
+            static
+            final
+            transient
+            volatile
+            synchronized
+            native
+            strictfp
+    -->
+    <module name="ModifierOrder" />
+
+    <!-- Checks that we don't include modifier where they are implied. For
+      example, this does not allow interface methods to be declared public
+      because they are *always* public. -->
+    <module name="RedundantModifier" />
+    <!-- Checks that all java files have a package declaration and that it
+      lines up with the directory structure. -->
+    <module name="PackageDeclaration" />
+
+    <!--
+    <module name="org.elasticsearch.gradle.internal.checkstyle.StringFormattingCheck">
+        <message
+            key="forbidden.formatted"
+            value="''{0}'' format specifier is unsafe inside ''.formatted'' calls, as it uses the default locale. Use ''String.format'' for numeric formatting with ''Locale.ROOT'' instead." />
+    </module>-->
+
+    <!-- We don't use Java's builtin serialization and we suppress all warning
+      about it. The flip side of that coin is that we shouldn't _try_ to use
+      it. We can't outright ban it with ForbiddenApis because it complain about
+      every we reference a class that implements Serializable like String or
+      Exception.
+      -->
+    <module name="RegexpSinglelineJava">
+      <property name="format" value="serialVersionUID" />
+      <property name="message" value="Do not declare serialVersionUID." />
+      <property name="ignoreComments" value="true" />
+    </module>
+    <module name="RegexpSinglelineJava">
+      <property name="format" value="java\.io\.Serializable;" />
+      <property name="message" value="References java.io.Serializable." />
+      <property name="ignoreComments" value="true" />
+    </module>
+    <!-- end Orwellian suppression of Serializable -->
+
+    <!-- Forbid equality comparisons with `true` -->
+    <module name="DescendantToken">
+      <property name="id" value="EqualityWithTrue" />
+      <property name="tokens" value="EQUAL" />
+      <property name="limitedTokens" value="LITERAL_TRUE" />
+      <property name="maximumNumber" value="0" />
+      <property name="maximumDepth" value="1" />
+      <message key="descendant.token.max" value="Do not check for equality with 'true', since it is implied" />
+    </module>
+
+    <!-- Forbid using '!' for logical negations in favour of checking against 'false' explicitly. -->
+    <!-- This is only reported in the IDE for now because there are many violations -->
+    <module name="DescendantToken">
+        <property name="id" value="BooleanNegation" />
+        <property name="tokens" value="EXPR"/>
+        <property name="limitedTokens" value="LNOT"/>
+        <property name="maximumNumber" value="0"/>
+        <message
+            key="descendant.token.max"
+            value="Do not negate boolean expressions with '!', but check explicitly with '== false' as it is more explicit"/>
+    </module>
+
+  </module>
+</module>
diff --git a/buildSrc/src/main/resources/checkstyle/checkstyle_ide_fragment.xml b/buildSrc/src/main/resources/checkstyle/checkstyle_ide_fragment.xml
new file mode 100644
index 00000000000..db6b025dea2
--- /dev/null
+++ b/buildSrc/src/main/resources/checkstyle/checkstyle_ide_fragment.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0"?>
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+
+<!-- There are some rules that we only want to enable in an IDE. These  -->
+<!-- are extracted to a separate file, and merged into the IDE-specific -->
+<!-- Checkstyle config by the `:configureIdeCheckstyle` task.           -->
+
+<module name="IdeFragment">
+
+    <!-- See CONTRIBUTING.md for our guidelines on Javadoc -->
+
+    <module name="MissingJavadocMethod">
+        <property name="severity" value="info" />
+        <!-- Exclude short methods from this check - we don't want to have to document getters -->
+        <property name="minLineCount" value="5" />
+        <property name="allowedAnnotations" value="Override,Before,BeforeClass,After,AfterClass,Inject,TaskAction" />
+        <property name="ignoreMethodNamesRegex" value="^main$"/>
+        <message key="javadoc.missing" value="Public methods should be documented." />
+    </module>
+
+    <module name="MissingJavadocPackage">
+        <property name="severity" value="warning"/>
+        <message
+            key="package.javadoc.missing"
+            value="A description and other related documentation for a package should be written up in the package-info.java" />
+    </module>
+
+    <!-- Use our fork of this Checkstyle rule, so that we can ignore test classes -->
+    <module name="org.elasticsearch.gradle.internal.checkstyle.MissingJavadocTypeCheck">
+        <property name="ignorePattern" value="^.*(Tests?|IT|TestCase)$"/>
+        <property name="severity" value="info"/>
+        <message key="javadoc.missing" value="Types should explain their purpose" />
+    </module>
+
+    <!-- Check the Javadoc for a method e.g that it has the correct parameters, return type etc -->
+    <module name="JavadocMethod">
+        <property name="severity" value="info"/>
+        <property name="accessModifiers" value="public"/>
+    </module>
+</module>
diff --git a/buildSrc/src/main/resources/checkstyle/checkstyle_suppressions.xml b/buildSrc/src/main/resources/checkstyle/checkstyle_suppressions.xml
new file mode 100644
index 00000000000..b1b7700fdc5
--- /dev/null
+++ b/buildSrc/src/main/resources/checkstyle/checkstyle_suppressions.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0"?>
+<!DOCTYPE suppressions PUBLIC
+        "-//Puppy Crawl//DTD Suppressions 1.1//EN"
+        "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
+
+<suppressions>
+  <!-- On Windows, Checkstyle matches files using \ path separator -->
+
+  <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->
+
+  <!-- package-info java files can contain multiple javadoc statements in header  -->
+  <suppress files=".+package\-info\.java" id="MultipleHeaderJavadoc" />
+</suppressions>
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 3233a7ea197..83333bcf945 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -19,6 +19,10 @@
 
 import org.yaml.snakeyaml.Yaml
 
+import java.nio.file.Files
+import java.nio.file.Paths
+import java.nio.file.StandardCopyOption
+
 // fetch version from Logstash's main versions.yml file
 def versionMap = (Map) (new Yaml()).load(new File("$projectDir/../versions.yml").text)
 
@@ -152,6 +156,150 @@ idea {
     }
 }
 
+apply plugin: 'checkstyle'
+
+checkstyle {
+    showViolations = true
+    configFile = file("../buildSrc/src/main/resources/checkstyle/checkstyle.xml")
+}
+
+checkstyleMain {
+    source = 'src/main/java'
+}
+
+checkstyleTest {
+    source = 'src/test/java'
+}
+
+tasks.withType(Checkstyle) {
+    reports {
+        xml.enabled false
+        html.enabled true
+    }
+    .configureEach {
+        configDirectory.set(file("../buildSrc/src/main/resources/checkstyle"))
+    }
+}
+
+/*
+apply plugin: 'findbugs'
+findbugs {
+    ignoreFailures = false
+    toolVersion = "3.0.1"
+    sourceSets=[sourceSets.main]
+    excludeFilter = file("config/findbugs/excludeFilter.xml")
+    reportsDir = file("$project.buildDir/reports/findbugs")
+    effort = "max"
+}
+
+tasks.withType(FindBugs) {
+    reports {
+        xml.enabled false
+        html.enabled true
+    }
+}*/
+
+tasks.register('configureIdeCheckstyle') {
+    group = 'ide'
+    description = 'Generated a suitable checkstyle config for IDEs'
+
+    String resources = '../buildSrc/src/main/resources/checkstyle'
+    String checkstyleConfig = "${resources}/checkstyle.xml"
+    String checkstyleSuppression = "${resources}/checkstyle_suppressions.xml"
+    String checkstyleIdeFragment = "${resources}/checkstyle_ide_fragment.xml"
+    String checkstyleIdeConfig = "${rootDir}/checkstyle_ide.xml"
+
+    String checkstylePluginConfigTemplate = "${resources}/checkstyle-idea.xml"
+    String checkstylePluginConfig = "${rootDir}/.idea/checkstyle-idea.xml"
+
+    inputs.files(
+            file(checkstyleConfig),
+            file(checkstyleIdeFragment),
+            file(checkstylePluginConfigTemplate)
+    )
+    outputs.files(
+            file(checkstyleIdeConfig),
+            file(checkstylePluginConfig)
+    )
+
+    doLast {
+        // Configure the IntelliJ Checkstyle plugin by copying a standard file. We don't simply commit
+        // the result to version control, because the plugin has a habit of modifying the file and
+        // replacing the `$PROJECT_DIR$` placeholders, which developers must then revert.
+        Files.copy(
+                Paths.get(file(checkstylePluginConfigTemplate).getPath()),
+                Paths.get(file(checkstylePluginConfig).getPath()),
+                StandardCopyOption.REPLACE_EXISTING
+        )
+
+        // Create an IDE-specific checkstyle config by first copying the standard config
+        Files.copy(
+                Paths.get(file(checkstyleConfig).getPath()),
+                Paths.get(file(checkstyleIdeConfig).getPath()),
+                StandardCopyOption.REPLACE_EXISTING
+        )
+
+        // There are some rules that we only want to enable in an IDE. These
+        // are extracted to a separate file, and merged into the IDE-specific
+        // Checkstyle config.
+        Node xmlFragment = parseXml(checkstyleIdeFragment)
+
+        // Edit the copy so that IntelliJ can copy with it
+        modifyXml(checkstyleIdeConfig, { xml ->
+            // Add all the nodes from the fragment file
+            Node treeWalker = xml.module.find { it.'@name' == 'TreeWalker' }
+            xmlFragment.module.each { treeWalker.append(it) }
+
+            // Change the checkstyle config to inline the path to the
+            // suppression config. This removes a configuration step when using
+            // the checkstyle config in an IDE.
+            Node suppression = xml.module.find { it.'@name' == 'SuppressionFilter' }
+            suppression.property.findAll { it.'@name' == 'file' }.each { it.'@value' = checkstyleSuppression }
+        },
+                "<!DOCTYPE module PUBLIC\n" +
+                        "  \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n" +
+                        "  \"https://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n" +
+                        "<!-- Generated automatically from the following - do not edit this file directly. -->\n" +
+                        "<!--     ${checkstyleConfig} -->\n" +
+                        "<!--     ${checkstyleIdeFragment} -->\n"
+        )
+    }
+}
+
+/**
+ * Parses a given XML file, applies a set of changes, and writes those changes back to the original file.
+ *
+ * @param path Path to existing XML file
+ * @param action Action to perform on parsed XML document
+ * @param preface optional front matter to add after the XML declaration
+ * but before the XML document, e.g. a doctype or comment
+ */
+void modifyXml(Object path, Action<? super Node> action, String preface = null) {
+    Node xml = parseXml(path)
+    action.execute(xml)
+
+    File xmlFile = project.file(path)
+    xmlFile.withPrintWriter { writer ->
+        def printer = new XmlNodePrinter(writer)
+        printer.namespaceAware = true
+        printer.preserveWhitespace = true
+        writer.write("<?xml version=\"1.0\"?>\n")
+
+        if (preface != null) {
+            writer.write(preface)
+        }
+        printer.print(xml)
+    }
+}
+
+Node parseXml(Object path) {
+    File xmlFile = project.file(path)
+    XmlParser xmlParser = new XmlParser(false, true, true)
+    xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
+    Node xml = xmlParser.parse(xmlFile)
+    return xml
+}
+
 dependencies {
     api(files("../vendor/jruby/lib/jruby.jar") { // jruby-core.jar
         builtBy ':downloadAndInstallJRuby'
@@ -194,4 +342,6 @@ dependencies {
 
     api group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
     api group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'
+
+    implementation 'com.puppycrawl.tools:checkstyle:10.1'
 }
