diff --git a/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java b/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
index 6c5ba2e52e4..bdb760c8fa7 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/PipelineIR.java
@@ -21,6 +21,7 @@
 package org.logstash.config.ir;
 
 import java.util.List;
+import java.util.NoSuchElementException;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import org.logstash.common.Util;
@@ -56,8 +57,9 @@ public PipelineIR(Graph inputSection, Graph filterSection, Graph outputSection,
         Graph tempGraph = inputSection.copy(); // The input section are our roots, so we can import that wholesale
 
         // Connect all the input vertices out to the queue
-        queue = new QueueVertex();
-        tempGraph = tempGraph.chain(queue);
+        QueueVertex tempQueue = new QueueVertex();
+
+        tempGraph = tempGraph.chain(tempQueue);
 
         // Now we connect the queue to the root of the filter section
         tempGraph = tempGraph.chain(filterSection);
@@ -68,6 +70,8 @@ public PipelineIR(Graph inputSection, Graph filterSection, Graph outputSection,
         // Finally, connect the filter out node to all the outputs
         this.graph = tempGraph.chain(outputSection);
 
+        this.queue = selectQueueVertex(this.graph, tempQueue);
+
         this.graph.validate();
 
         if (this.getOriginalSource() != null && !this.getOriginalSource().matches("^\\s+$")) {
@@ -132,4 +136,13 @@ public Stream<PluginVertex> pluginVertices() {
     public String uniqueHash() {
         return this.uniqueHash;
     }
+
+    private static QueueVertex selectQueueVertex(final Graph graph, final QueueVertex tempQueue) {
+        try {
+            return (QueueVertex) graph.getVertexById(tempQueue.getId());
+        } catch(NoSuchElementException e) {
+            // it's a pipeline without a queue
+            return tempQueue;
+        }
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/PipelineIRTest.java b/logstash-core/src/test/java/org/logstash/config/ir/PipelineIRTest.java
index 4e7545a3a6e..1c1c8b3b044 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/PipelineIRTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/PipelineIRTest.java
@@ -25,8 +25,13 @@
 import org.logstash.common.Util;
 import org.logstash.config.ir.graph.Graph;
 import org.logstash.plugins.ConfigVariableExpander;
+import org.logstash.config.ir.graph.QueueVertex;
 
+import static org.hamcrest.Matchers.any;
+import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.hasItem;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.logstash.config.ir.DSL.*;
 import static org.logstash.config.ir.PluginDefinition.Type.*;
 import static org.logstash.config.ir.IRHelpers.randMeta;
@@ -73,4 +78,11 @@ public void hashingWithOriginalSource() throws InvalidIRException {
         PipelineIR pipelineIR = new PipelineIR(makeInputSection(), makeFilterSection(), makeOutputSection(), source);
         assertEquals(pipelineIR.uniqueHash(), Util.digest(source));
     }
+
+    @Test
+    public void testGetPostQueue() throws InvalidIRException {
+        String source = "input { stdin {} } output { stdout {} }";
+        PipelineIR pipelineIR = new PipelineIR(makeInputSection(), makeFilterSection(), makeOutputSection(), source);
+        assertThat(pipelineIR.getPostQueue(), not(hasItem(any(QueueVertex.class))));
+    }
 }
