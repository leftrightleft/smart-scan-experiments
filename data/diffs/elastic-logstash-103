diff --git a/lib/logstash/inputs/zeromq.rb b/lib/logstash/inputs/zeromq.rb
index c5460353eaa..3ab704d5316 100644
--- a/lib/logstash/inputs/zeromq.rb
+++ b/lib/logstash/inputs/zeromq.rb
@@ -38,6 +38,8 @@ class LogStash::Inputs::ZeroMQ < LogStash::Inputs::Base
   # This is used for the 'pubsub' topology only
   # On inputs, this allows you to filter messages by topic
   # On outputs, this allows you to tag a message for routing
+  # NOTE: ZeroMQ does subscriber side filtering.
+  # NOTE: All topics have an implicit wildcard at the end
   config :topic, :validate => :string, :default => ""
 
   # mode
@@ -83,6 +85,8 @@ def register
       setopts(@zsocket, @sockopt)
     end
 
+    setopts(@zsocket, {"ZMQ::SUBSCRIBE" => @topic}) if @topology == "pubsub"
+
     @address.each do |addr|
       setup(@zsocket, addr)
     end
@@ -99,6 +103,12 @@ def server?
   def run(output_queue)
     begin
       loop do
+        if @topology == "pubsub"
+          topic = ''
+          rc = @zsocket.recv_string(topic)
+          error_check(rc, "in recv_string")
+          @logger.debug("0mq input: got topic #{topic}")
+        end
         msg = ''
         rc = @zsocket.recv_string(msg)
         error_check(rc, "in recv_string")
diff --git a/lib/logstash/outputs/zeromq.rb b/lib/logstash/outputs/zeromq.rb
index db4a0426b31..2d6cfde59a4 100644
--- a/lib/logstash/outputs/zeromq.rb
+++ b/lib/logstash/outputs/zeromq.rb
@@ -37,6 +37,9 @@ class LogStash::Outputs::ZeroMQ < LogStash::Outputs::Base
   # This is used for the 'pubsub' topology only
   # On inputs, this allows you to filter messages by topic
   # On outputs, this allows you to tag a message for routing
+  # NOTE: ZeroMQ does subscriber-side filtering
+  # NOTE: Topic is evaluated with `event.sprintf` so 
+  #       macros are valid here
   config :topic, :validate => :string, :default => ""
 
   # mode
@@ -108,6 +111,10 @@ def receive(event)
 
     begin
       @logger.debug("0mq: sending", :event => wire_event)
+      if @topology == "pubsub"
+        @logger.debug("0mq output: setting topic to: #{event.sprintf(@topic)}")
+        error_check(@zsocket.send_string(event.sprintf(@topic), ZMQ::SNDMORE), "in topic send_string")
+      end
       error_check(@zsocket.send_string(wire_event), "in send_string")
     rescue => e
       @logger.warn("0mq output exception", :address => @address, :queue => @queue_name, :exception => e, :backtrace => e.backtrace)
