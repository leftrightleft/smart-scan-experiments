diff --git a/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb b/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
index e056c08d213..a8822ca0af5 100644
--- a/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
+++ b/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb
@@ -9,11 +9,25 @@ def initialize()
       @queue = java.util.concurrent.SynchronousQueue.new()
     end
 
+    # Push an object to the queue if the queue is full
+    # it will block until the object can be added to the queue.
+    #
+    # @param [Object] Object to add to the queue
     def push(obj)
       @queue.put(obj)
     end
     alias_method(:<<, :push)
 
+    # Offer an object to the queue, wait for the specified amout of time.
+    # If adding to the queue was successfull it wil return true, false otherwise.
+    #
+    # @param [Object] Object to add to the queue
+    # @param [Integer] Time in milliseconds to wait before giving up
+    # @return [Boolean] True if adding was successfull if not it return false
+    def offer(obj, timeout_ms)
+      @queue.offer(obj, timeout_ms, TimeUnit::MILLISECONDS)
+    end
+
     # Blocking
     def take
       @queue.take()
@@ -24,4 +38,4 @@ def poll(millis)
       @queue.poll(millis, TimeUnit::MILLISECONDS)
     end
   end
-end end
\ No newline at end of file
+end end
diff --git a/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb b/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb
new file mode 100644
index 00000000000..871952482aa
--- /dev/null
+++ b/logstash-core/spec/logstash/util/wrapped_synchronous_queue_spec.rb
@@ -0,0 +1,28 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/util/wrapped_synchronous_queue"
+
+describe LogStash::Util::WrappedSynchronousQueue do
+ context "#offer" do
+   context "queue is blocked" do
+     it "fails and give feedback" do
+       expect(subject.offer("Bonjour", 2)).to be_falsey
+     end
+   end
+
+   context "queue is not blocked" do
+     before do
+       @consumer = Thread.new { loop { subject.take } }
+       sleep(0.1)
+     end
+
+     after do
+       @consumer.kill
+     end
+     
+     it "inserts successfully" do
+       expect(subject.offer("Bonjour", 20)).to be_truthy
+     end
+   end
+ end
+end
