diff --git a/lib/logstash/outputs/csv.rb b/lib/logstash/outputs/csv.rb
new file mode 100644
index 00000000000..b30bf15a7a5
--- /dev/null
+++ b/lib/logstash/outputs/csv.rb
@@ -0,0 +1,24 @@
+require "csv"
+require "logstash/namespace"
+require "logstash/outputs/file"
+
+class LogStash::Outputs::CSV < LogStash::Outputs::File
+  config_name "csv"
+  milestone 1
+  config :fields, :validate => :array, :required => true
+
+  public 
+  def receive(event)
+  return unless output?(event)
+  path = event.sprintf(@path)
+  fd = open(path)
+  csv_values = @fields.map {|name| event[name]}
+  fd.write(csv_values.to_csv)
+  
+  flush(fd)
+  close_stale_files
+
+
+  end #def receive
+end # class LogStash::Outputs::CSV
+
diff --git a/spec/outputs/csv.rb b/spec/outputs/csv.rb
new file mode 100644
index 00000000000..22a908c50a4
--- /dev/null
+++ b/spec/outputs/csv.rb
@@ -0,0 +1,134 @@
+require "csv"
+require "tempfile"
+require "test_utils"
+require "logstash/outputs/csv"
+
+describe LogStash::Outputs::CSV do
+  extend LogStash::RSpec
+
+  describe "Write a single field to a csv file" do
+    tmpfile = Tempfile.new('logstash-spec-output-csv')
+    config <<-CONFIG
+      input {
+        generator {
+          add_field => ["foo","bar"]
+          count => 1
+        }
+      }
+      output {
+        csv {
+          path => "#{tmpfile.path}"
+          fields => "foo"
+        }
+      }
+    CONFIG
+
+    agent do
+      lines = File.readlines(tmpfile.path)
+      insist {lines.count} == 1
+      insist {lines[0]} == "bar\n"
+    end
+  end
+
+  describe "write multiple fields and lines to a csv file" do
+    tmpfile = Tempfile.new('logstash-spec-output-csv')
+    config <<-CONFIG
+      input {
+        generator {
+          add_field => ["foo", "bar", "baz", "quux"]
+          count => 2
+        }
+      }
+      output {
+        csv {
+          path => "#{tmpfile.path}"
+          fields => ["foo", "baz"]
+        }
+      }
+    CONFIG
+
+    agent do
+      lines = File.readlines(tmpfile.path)
+      insist {lines.count} == 2
+      insist {lines[0]} == "bar,quux\n"
+      insist {lines[1]} == "bar,quux\n"
+    end
+  end
+
+  describe "missing event fields are empty in csv" do
+    tmpfile = Tempfile.new('logstash-spec-output-csv')
+    config <<-CONFIG
+      input {
+        generator {
+          add_field => ["foo","bar", "baz", "quux"]
+          count => 1
+        }
+      }
+      output {
+        csv {
+          path => "#{tmpfile.path}"
+          fields => ["foo", "not_there", "baz"]
+        }
+      }
+    CONFIG
+
+    agent do
+      lines = File.readlines(tmpfile.path)
+      insist {lines.count} == 1
+      insist {lines[0]} == "bar,,quux\n"
+    end
+  end
+
+  describe "commas are quoted properly" do
+    tmpfile = Tempfile.new('logstash-spec-output-csv')
+    config <<-CONFIG
+      input {
+        generator {
+          add_field => ["foo","one,two", "baz", "quux"]
+          count => 1
+        }
+      }
+      output {
+        csv {
+          path => "#{tmpfile.path}"
+          fields => ["foo", "baz"]
+        }
+      }
+    CONFIG
+
+    agent do
+      lines = File.readlines(tmpfile.path)
+      insist {lines.count} == 1
+      insist {lines[0]} == "\"one,two\",quux\n"
+    end
+  end
+
+  describe "new lines are quoted properly" do
+    tmpfile = Tempfile.new('logstash-spec-output-csv')
+    config <<-CONFIG
+      input {
+        generator {
+          add_field => ["foo","one\ntwo", "baz", "quux"]
+          count => 1
+        }
+      }
+      output {
+        csv {
+          path => "#{tmpfile.path}"
+          fields => ["foo", "baz"]
+        }
+      }
+    CONFIG
+
+    agent do
+      lines = CSV.read(tmpfile.path)
+      insist {lines.count} == 1
+      insist {lines[0][0]} == "one\ntwo"
+    end
+  end
+end
+
+
+
+
+
diff --git a/spec/outputs/file.rb b/spec/outputs/file.rb
index e132565ec12..aabb82625d1 100644
--- a/spec/outputs/file.rb
+++ b/spec/outputs/file.rb
@@ -28,7 +28,7 @@
       line_num = 0
       # Now check all events for order and correctness.
       File.foreach(tmp_file) do |line|
-        event = LogStash::Event.from_json(line)
+        event = LogStash::Event.new(JSON.parse(line))
         insist {event["message"]} == "hello world"
         insist {event["sequence"]} == line_num
         line_num += 1
@@ -61,7 +61,7 @@
       line_num = 0
       # Now check all events for order and correctness.
       Zlib::GzipReader.new(File.open(tmp_file)).each_line do |line|
-        event = LogStash::Event.from_json(line)
+        event = LogStash::Event.new(JSON.parse(line))
         insist {event["message"]} == "hello world"
         insist {event["sequence"]} == line_num
         line_num += 1
@@ -71,7 +71,7 @@
       #LOGSTASH-997 confirm usage of zcat command on file
       line_num = 0
       `zcat #{tmp_file.path()}`.split("\n").each do |line|
-        event = LogStash::Event.from_json(line)
+        event = LogStash::Event.new(JSON.parse(line))
         insist {event["message"]} == "hello world"
         insist {event["sequence"]} == line_num
         line_num += 1
