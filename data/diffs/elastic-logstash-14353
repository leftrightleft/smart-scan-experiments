diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 04063782faa..20e3245d678 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -45,7 +45,7 @@ module LogStash; class JavaPipeline < JavaBasePipeline
 
   def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @logger = self.logger
-    super pipeline_config, namespaced_metric, @logger, agent
+    super pipeline_config, namespaced_metric, agent, nil
     open_queue
 
     @worker_threads = []
diff --git a/logstash-core/lib/logstash/pipeline_action/reload.rb b/logstash-core/lib/logstash/pipeline_action/reload.rb
index 9b7c66b5999..7be7f39783a 100644
--- a/logstash-core/lib/logstash/pipeline_action/reload.rb
+++ b/logstash-core/lib/logstash/pipeline_action/reload.rb
@@ -48,7 +48,7 @@ def execute(agent, pipelines_registry)
       end
 
       begin
-        pipeline_validator = LogStash::JavaBasePipeline.new(@pipeline_config, nil, logger, nil)
+        pipeline_validator = LogStash::JavaBasePipeline.new(@pipeline_config, nil, nil, nil)
       rescue => e
         return LogStash::ConvergeResult::FailedAction.from_exception(e)
       end
diff --git a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
index ece0df7b7c2..06567f2ad77 100644
--- a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
@@ -170,12 +170,10 @@ public AbstractPipelineExt(final Ruby runtime, final RubyClass metaClass) {
 
     @JRubyMethod
     public final AbstractPipelineExt initialize(final ThreadContext context,
-        final IRubyObject pipelineConfig, final IRubyObject namespacedMetric,
-        final IRubyObject rubyLogger)
+        final IRubyObject pipelineConfig, final IRubyObject namespacedMetric)
         throws NoSuchAlgorithmException {
         reporter = new PipelineReporterExt(
-            context.runtime, RubyUtil.PIPELINE_REPORTER_CLASS).initialize(context, rubyLogger, this
-        );
+            context.runtime, RubyUtil.PIPELINE_REPORTER_CLASS).initialize(context, this);
         pipelineSettings = pipelineConfig;
         configString = (RubyString) pipelineSettings.callMethod(context, "config_string");
         configParts = pipelineSettings.toJava(PipelineConfig.class).getConfigParts();
diff --git a/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java
index 1be5781862c..a8f63c3c200 100644
--- a/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/JavaBasePipelineExt.java
@@ -66,10 +66,13 @@ public JavaBasePipelineExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
 
-    @JRubyMethod(required = 4)
+    // This method uses effectively 3 parameters, but a forth (was an unused logger), valued to nil,
+    // is needed to distinguish from the constructor with 3 arguments defined in Ruby's subclass
+    // named JavaPipeline and present in java_pipeline.rb
+    @JRubyMethod(required = 3, optional = 1)
     public JavaBasePipelineExt initialize(final ThreadContext context, final IRubyObject[] args)
         throws IncompleteSourceWithMetadataException, NoSuchAlgorithmException {
-        initialize(context, args[0], args[1], args[2]);
+        initialize(context, args[0], args[1]);
         lirExecution = new CompiledPipeline(
             lir,
             new PluginFactoryExt(context.runtime, RubyUtil.PLUGIN_FACTORY_CLASS).init(
@@ -79,7 +82,7 @@ public JavaBasePipelineExt initialize(final ThreadContext context, final IRubyOb
                 ).initialize(context, pipelineId(), metric()),
                 new ExecutionContextFactoryExt(
                     context.runtime, RubyUtil.EXECUTION_CONTEXT_FACTORY_CLASS
-                ).initialize(context, args[3], this, dlqWriter(context)),
+                ).initialize(context, args[2], this, dlqWriter(context)),
                 RubyUtil.FILTER_DELEGATOR_CLASS
             ),
             getSecretStore(context)
diff --git a/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java b/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
index bc5110c2a5e..730931d5905 100644
--- a/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/PipelineReporterExt.java
@@ -81,8 +81,6 @@ public final class PipelineReporterExt extends RubyBasicObject {
     private static final RubyString DEAD_STATUS =
         RubyUtil.RUBY.newString("dead").newFrozen();
 
-    private transient IRubyObject logger;
-
     private transient IRubyObject pipeline;
 
     public PipelineReporterExt(final Ruby runtime, final RubyClass metaClass) {
@@ -90,9 +88,7 @@ public PipelineReporterExt(final Ruby runtime, final RubyClass metaClass) {
     }
 
     @JRubyMethod
-    public PipelineReporterExt initialize(final ThreadContext context, final IRubyObject logger,
-        final IRubyObject pipeline) {
-        this.logger = logger;
+    public PipelineReporterExt initialize(final ThreadContext context, final IRubyObject pipeline) {
         this.pipeline = pipeline;
         return this;
     }
@@ -102,11 +98,6 @@ public IRubyObject pipeline() {
         return pipeline;
     }
 
-    @JRubyMethod
-    public IRubyObject logger() {
-        return logger;
-    }
-
     /**
      * The main way of accessing data from the reporter,,
      * this provides a (more or less) consistent snapshot of what's going on in the
