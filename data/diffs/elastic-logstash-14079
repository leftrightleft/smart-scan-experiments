diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
index 50e0c2f2e53..f7e7a46b807 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
@@ -45,8 +45,9 @@
 import org.logstash.Timestamp;
 
 import java.io.IOException;
-import java.nio.file.Files;
 import java.nio.file.FileSystems;
+import java.nio.file.Files;
+import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.nio.file.StandardWatchEventKinds;
 import java.nio.file.WatchEvent;
@@ -54,6 +55,7 @@
 import java.nio.file.WatchService;
 import java.util.Comparator;
 import java.util.NoSuchElementException;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
@@ -82,11 +84,12 @@ public DeadLetterQueueReader(Path queuePath) throws IOException {
 
     public void seekToNextEvent(Timestamp timestamp) throws IOException {
         for (Path segment : segments) {
-            if (!Files.exists(segment)) {
-                segments.remove(segment);
+            Optional<RecordIOReader> optReader = openSegmentReader(segment);
+            if (!optReader.isPresent()) {
                 continue;
             }
-            currentReader = new RecordIOReader(segment);
+            currentReader = optReader.get();
+
             byte[] event = currentReader.seekToNextEventPosition(timestamp, DeadLetterQueueReader::extractEntryTimestamp, Timestamp::compareTo);
             if (event != null) {
                 return;
@@ -98,6 +101,21 @@ public void seekToNextEvent(Timestamp timestamp) throws IOException {
         }
     }
 
+    private Optional<RecordIOReader> openSegmentReader(Path segment) throws IOException {
+        if (!Files.exists(segment)) {
+            return Optional.empty();
+        }
+
+        try {
+            return Optional.of(new RecordIOReader(segment));
+        } catch (NoSuchFileException ex) {
+            logger.debug("Segment file {} was deleted by DLQ writer during DLQ reader opening", segment);
+            // file was deleted by upstream process and segments list wasn't yet updated
+            segments.remove(segment);
+            return Optional.empty();
+        }
+    }
+
     private static Timestamp extractEntryTimestamp(byte[] serialized) {
         try {
             return DLQEntry.deserialize(serialized).getEntryTime();
@@ -157,14 +175,22 @@ byte[] pollEntryBytes(long timeout) throws IOException, InterruptedException {
                 logger.debug("No entries found: no segment files found in dead-letter-queue directory");
                 return null;
             }
-            try {
-                final Path firstSegment = segments.first();
-                currentReader = new RecordIOReader(firstSegment);
-            } catch (NoSuchElementException ex) {
-                // all elements were removed after the empty check
-                logger.debug("No entries found: no segment files found in dead-letter-queue directory");
-                return null;
-            }
+            Optional<RecordIOReader> optReader;
+            do {
+                final Path firstSegment;
+                try {
+                    firstSegment = segments.first();
+                } catch (NoSuchElementException ex) {
+                    // all elements were removed after the empty check
+                    logger.debug("No entries found: no segment files found in dead-letter-queue directory");
+                    return null;
+                }
+
+                optReader = openSegmentReader(firstSegment);
+                if (optReader.isPresent()) {
+                    currentReader = optReader.get();
+                }
+            } while (!optReader.isPresent());
         }
 
         byte[] event = currentReader.readEvent();
@@ -173,12 +199,12 @@ byte[] pollEntryBytes(long timeout) throws IOException, InterruptedException {
                 pollNewSegments(timeoutRemaining);
             } else {
                 currentReader.close();
-                final Path nextSegment = nextExistingSegmentFile(currentReader.getPath());
-                if (nextSegment == null) {
+                Optional<RecordIOReader> optReader = openNextExistingReader(currentReader.getPath());
+                if (!optReader.isPresent()) {
                     // segments were all already deleted files, do a poll
                     pollNewSegments(timeoutRemaining);
                 } else {
-                    currentReader = new RecordIOReader(nextSegment);
+                    currentReader = optReader.get();
                     return pollEntryBytes(timeoutRemaining);
                 }
             }
@@ -214,24 +240,36 @@ private Path nextExistingSegmentFile(Path currentSegmentPath) {
 
     public void setCurrentReaderAndPosition(Path segmentPath, long position) throws IOException {
         // If the provided segment Path exist, then set the reader to start from the supplied position
-        if (Files.exists(segmentPath)) {
-            currentReader = new RecordIOReader(segmentPath);
+        Optional<RecordIOReader> optReader = openSegmentReader(segmentPath);
+        if (optReader.isPresent()) {
+            currentReader = optReader.get();
             currentReader.seekToOffset(position);
-        } else {
-            // Otherwise, set the current reader to be at the beginning of the next
-            // segment.
-            Path next = nextExistingSegmentFile(segmentPath);
-            if (next != null) {
-                currentReader = new RecordIOReader(next);
-            } else {
-                pollNewSegments();
-                // give a second try after a re-load of segments from filesystem
-                next = nextExistingSegmentFile(segmentPath);
-                if (next != null) {
-                    currentReader = new RecordIOReader(next);
-                }
+            return;
+        }
+        // Otherwise, set the current reader to be at the beginning of the next
+        // segment.
+        optReader = openNextExistingReader(segmentPath);
+        if (optReader.isPresent()) {
+            currentReader = optReader.get();
+            return;
+        }
+
+        pollNewSegments();
+
+        // give a second try after a re-load of segments from filesystem
+        openNextExistingReader(segmentPath)
+                .ifPresent(reader -> currentReader = reader);
+    }
+
+    private Optional<RecordIOReader> openNextExistingReader(Path segmentPath) throws IOException {
+        Path next;
+        while ( (next = nextExistingSegmentFile(segmentPath)) != null ) {
+            Optional<RecordIOReader> optReader = openSegmentReader(next);
+            if (optReader.isPresent()) {
+                return optReader;
             }
         }
+        return Optional.empty();
     }
 
     public Path getCurrentSegment() {
diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index 583a3d306fc..5f469199c97 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -219,15 +219,13 @@ boolean consumeToStartOfEvent() throws IOException {
         consumeBlock(false);
         while (true) {
             int eventStartPosition = seekToStartOfEventInBlock();
-            if (eventStartPosition < 0) {
-                if (isEndOfStream()) {
-                    return false;
-                } else {
-                    consumeBlock(true);
-                }
-            } else {
+            if (eventStartPosition >= 0) {
                 return true;
             }
+            if (isEndOfStream()) {
+                return false;
+            }
+            consumeBlock(true);
         }
     }
 
@@ -252,7 +250,7 @@ private void getRecord(ByteBuffer buffer, RecordHeader header) {
 
     public byte[] readEvent() throws IOException {
         try {
-            if (channel.isOpen() == false || consumeToStartOfEvent() == false) {
+            if (!channel.isOpen() || !consumeToStartOfEvent()) {
                 return null;
             }
             RecordHeader header = RecordHeader.get(currentBlock);
