diff --git a/tools/benchmark-cli/README.md b/tools/benchmark-cli/README.md
index d19325ea539..bde2d5d1a77 100644
--- a/tools/benchmark-cli/README.md
+++ b/tools/benchmark-cli/README.md
@@ -31,7 +31,9 @@ Option                           Description
 --local-path <String>            Path to the root of a local Logstash           
                                    distribution.                                
                                   E.g. `/opt/logstash`                          
---testcase <String>              Currently available test cases are 'baseline'    
+--repeat-data <Integer>          Sets how often the test's dataset should be    
+                                   run. (default: 1)                            
+--testcase <String>              Currently available test cases are 'baseline'  
                                    and 'apache'. (default: baseline)            
 --workdir <File>                 Working directory to store cached files in.    
                                    (default: ~/.logstash-benchmarks)  
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
index 69df041e547..94150ce83eb 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LogstashInstallation.java
@@ -34,7 +34,7 @@ public interface LogstashInstallation {
      * @throws IOException On I/O Exception
      * @throws InterruptedException Iff Interrupted
      */
-    void execute(String configuration, File data) throws IOException, InterruptedException;
+    void execute(String configuration, File data, int repeat) throws IOException, InterruptedException;
 
     /**
      * Returns the url under which the metrics from uri `_node/stats/?pretty` can be found.
@@ -63,9 +63,9 @@ public void execute(final String configuration) throws IOException, InterruptedE
         }
 
         @Override
-        public void execute(final String configuration, final File data)
+        public void execute(final String configuration, final File data, final int repeat)
             throws IOException, InterruptedException {
-            base.execute(configuration, data);
+            base.execute(configuration, data, repeat);
         }
 
         @Override
@@ -112,11 +112,11 @@ public FromLocalPath(final String path) {
 
         @Override
         public void execute(final String configuration) throws IOException, InterruptedException {
-            execute(configuration, null);
+            execute(configuration, null, 1);
         }
 
         @Override
-        public void execute(final String configuration, final File data)
+        public void execute(final String configuration, final File data, final int repeat)
             throws IOException, InterruptedException {
             final Path cfg = location.resolve("config.temp");
             Files.write(
@@ -128,13 +128,13 @@ public void execute(final String configuration, final File data)
             final Path lsbin = location.resolve("bin").resolve("logstash");
             LsBenchFileUtil.ensureExecutable(lsbin.toFile());
             final File output = Files.createTempFile(null, null).toFile();
-            final Process process = pbuilder.command(lsbin.toString(), "-w", "2", "-f", cfg.toString()).redirectOutput(
-                ProcessBuilder.Redirect.to(output)
-            ).start();
+            final Process process =
+                pbuilder.command(lsbin.toString(), "-w", "2", "-f", cfg.toString()).redirectOutput(
+                    ProcessBuilder.Redirect.to(output)
+                ).start();
             if (data != null) {
-                try (final InputStream file = new FileInputStream(data);
-                     final OutputStream out = process.getOutputStream()) {
-                    IOUtils.copy(file, out, 16 * 4096);
+                try (final OutputStream out = process.getOutputStream()) {
+                    pipeRepeatedly(data, out, repeat);
                 }
             }
             if (process.waitFor() != 0) {
@@ -148,6 +148,23 @@ public void execute(final String configuration, final File data)
         public String metrics() {
             return METRICS_URL;
         }
+
+        /**
+         * Pipes the content of the given input {@link File} to the given {@link OutputStream}
+         * repeatedly.
+         * @param input Input File
+         * @param out Output Stream
+         * @param count Number of repeats
+         * @throws IOException On Failure
+         */
+        private static void pipeRepeatedly(final File input, final OutputStream out,
+            final int count) throws IOException {
+            for (int i = 0; i < count; ++i) {
+                try (final InputStream file = new FileInputStream(input)) {
+                    IOUtils.copy(file, out, 16 * 4096);
+                }
+            }
+        }
     }
 
     final class FromGithub implements LogstashInstallation {
@@ -177,9 +194,9 @@ public void execute(final String configuration) throws IOException, InterruptedE
         }
 
         @Override
-        public void execute(final String configuration, final File data)
+        public void execute(final String configuration, final File data, final int repeat)
             throws IOException, InterruptedException {
-            base.execute(configuration, data);
+            base.execute(configuration, data, repeat);
         }
 
         @Override
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsBenchSettings.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsBenchSettings.java
new file mode 100644
index 00000000000..e793284d450
--- /dev/null
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsBenchSettings.java
@@ -0,0 +1,18 @@
+package org.logstash.benchmark.cli;
+
+/**
+ * Class holding setting constants.
+ */
+public final class LsBenchSettings {
+
+    /**
+     * Name of the property holding the URL to download the dataset used by
+     * {@link org.logstash.benchmark.cli.cases.ApacheLogsComplex} from.
+     */
+    public static final String APACHE_DATASET_URL = "org.logstash.benchmark.apache.dataset.url";
+
+    /**
+     * Property that sets how often the input dataset is to be repeated.
+     */
+    public static final String INPUT_DATA_REPEAT = "org.logstash.benchmark.input.repeat";
+}
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
index 4b948eaa9dc..a8bb6e51242 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
@@ -79,6 +79,9 @@ public static void main(final String... args) throws Exception {
         final OptionSpec<String> esout = parser.accepts(
             UserInput.ES_OUTPUT_PARAM, UserInput.ES_OUTPUT_HELP
         ).withRequiredArg().ofType(String.class).defaultsTo(UserInput.ES_OUTPUT_DEFAULT).forHelp();
+        final OptionSpec<Integer> repeats = parser.accepts(
+            UserInput.REPEAT_PARAM, UserInput.REPEAT_PARAM_HELP
+        ).withRequiredArg().ofType(Integer.class).defaultsTo(1).forHelp();
         final OptionSet options;
         try {
             options = parser.parse(args);
@@ -98,8 +101,12 @@ public static void main(final String... args) throws Exception {
             type = LsVersionType.LOCAL;
             version = options.valueOf(local);
         }
+        final Properties settings = loadSettings();
+        settings.setProperty(
+            LsBenchSettings.INPUT_DATA_REPEAT, String.valueOf(options.valueOf(repeats))
+        );
         execute(
-            new UserOutput(System.out), loadSettings(), options.valueOf(testcase),
+            new UserOutput(System.out), settings, options.valueOf(testcase),
             options.valueOf(pwd).toPath(), version, type, options.valueOf(esout)
         );
     }
@@ -122,7 +129,12 @@ public static void execute(final UserOutput output, final Properties settings,
         output.printBanner();
         output.printLine();
         output.green(String.format("Benchmarking Version: %s", version));
-        output.green(String.format("Running Test Case: %s", test));
+        output.green(
+            String.format(
+                "Running Test Case: %s (x%d)", test,
+                Integer.parseInt(settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT))
+            )
+        );
         output.printLine();
         Files.createDirectories(cwd);
         final LogstashInstallation logstash;
@@ -154,7 +166,7 @@ private static Case setupTestCase(final DataStore store, final LogstashInstallat
         throws IOException, NoSuchAlgorithmException {
         final Case testcase;
         if (GeneratorToStdout.IDENTIFIER.equalsIgnoreCase(test)) {
-            testcase = new GeneratorToStdout(store, logstash);
+            testcase = new GeneratorToStdout(store, logstash, settings);
         } else if (ApacheLogsComplex.IDENTIFIER.equalsIgnoreCase(test)) {
             testcase = new ApacheLogsComplex(store, logstash, cwd, settings);
         } else {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
index db5b7421bc0..79a0833b3fd 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
@@ -13,6 +13,7 @@
 import org.apache.commons.io.IOUtils;
 import org.logstash.benchmark.cli.DataStore;
 import org.logstash.benchmark.cli.LogstashInstallation;
+import org.logstash.benchmark.cli.LsBenchSettings;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
 import org.logstash.benchmark.cli.util.LsBenchDownloader;
@@ -35,13 +36,15 @@ public final class ApacheLogsComplex implements Case {
 
     private final DataStore store;
 
+    private final int repeats;
+    
     public ApacheLogsComplex(final DataStore store, final LogstashInstallation logstash,
-        final Path cwd,
-        final Properties settings) throws IOException, NoSuchAlgorithmException {
+        final Path cwd, final Properties settings) throws IOException, NoSuchAlgorithmException {
         this.data = cwd.resolve("data_apache").resolve("apache_access_logs").toFile();
         ensureDatafile(data.toPath().getParent().toFile(), settings);
         this.logstash = logstash;
         this.store = store;
+        repeats = Integer.parseInt(settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT));
     }
 
     @Override
@@ -55,7 +58,7 @@ public EnumMap<LsMetricStats, ListStatistics> run() {
                 IOUtils.copy(cfg, baos);
                 config = baos.toString();
             }
-            logstash.execute(config, data);
+            logstash.execute(config, data, repeats);
             return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
@@ -65,7 +68,7 @@ public EnumMap<LsMetricStats, ListStatistics> run() {
     private static void ensureDatafile(final File file, final Properties settings)
         throws IOException, NoSuchAlgorithmException {
         LsBenchDownloader.downloadDecompress(
-            file, settings.getProperty("org.logstash.benchmark.apache.dataset.url"), false
+            file, settings.getProperty(LsBenchSettings.APACHE_DATASET_URL), false
         );
     }
 }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
index 1dd9d0770e5..803def8b724 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
@@ -2,10 +2,12 @@
 
 import java.io.IOException;
 import java.util.EnumMap;
+import java.util.Properties;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
 import org.logstash.benchmark.cli.DataStore;
 import org.logstash.benchmark.cli.LogstashInstallation;
+import org.logstash.benchmark.cli.LsBenchSettings;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
 import org.openjdk.jmh.util.ListStatistics;
@@ -20,24 +22,30 @@ public final class GeneratorToStdout implements Case {
      */
     public static final String IDENTIFIER = "baseline";
 
-    private static final String CONFIGURATION =
-        "input { generator { threads => 1 count => 1000000 }  } output { stdout { } }";
+    private final String configuration;
 
     private final LogstashInstallation logstash;
 
     private final DataStore store;
 
-    public GeneratorToStdout(final DataStore store, final LogstashInstallation logstash) {
+    public GeneratorToStdout(final DataStore store, final LogstashInstallation logstash,
+        final Properties settings) {
         this.logstash = logstash;
         this.store = store;
-
+        configuration =
+            String.format(
+                "input { generator { threads => 1 count => %d }  } output { stdout { } }",
+                Long.parseLong(
+                    settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT)
+                ) * 1_000_000L
+            );
     }
 
     @Override
     public EnumMap<LsMetricStats, ListStatistics> run() {
         try (final LsMetricsMonitor.MonitorExecution monitor =
                  new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
-            logstash.execute(GeneratorToStdout.CONFIGURATION);
+            logstash.execute(configuration);
             return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
             throw new IllegalStateException(ex);
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
index 490b67d13c1..dccfa3813fc 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
@@ -8,6 +8,11 @@
  */
 public final class UserInput {
 
+    public static final String REPEAT_PARAM = "repeat-data";
+
+    public static final String REPEAT_PARAM_HELP =
+        "Sets how often the test's dataset should be run.";
+
     public static final String ES_OUTPUT_PARAM = "elasticsearch-export";
 
     public static final String ES_OUTPUT_HELP = "Optional Elasticsearch host URL to store detailed results at.";
diff --git a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
index 882529e0f0a..217d9daaa8e 100644
--- a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
+++ b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
@@ -58,6 +58,19 @@ public void runsAgainstRelease() throws Exception {
         );
     }
 
+    /**
+     * @throws Exception On Failure
+     */
+    @Test
+    public void runsRepeatedDatasetAgainstRelease() throws Exception {
+        final File pwd = temp.newFolder();
+        Main.main(
+            String.format("--%s=5.5.0", UserInput.DISTRIBUTION_VERSION_PARAM),
+            String.format("--workdir=%s", pwd.getAbsolutePath()),
+            String.format("--%s=%d", UserInput.REPEAT_PARAM, 2)
+        );
+    }
+
     /**
      * @throws Exception On Failure
      */
@@ -70,4 +83,18 @@ public void runsApacheAgainstRelease() throws Exception {
             String.format("--workdir=%s", pwd.getAbsolutePath())
         );
     }
+
+    /**
+     * @throws Exception On Failure
+     */
+    @Test
+    public void runsRepeatApacheAgainstRelease() throws Exception {
+        final File pwd = temp.newFolder();
+        Main.main(
+            String.format("--%s=5.5.0", UserInput.DISTRIBUTION_VERSION_PARAM),
+            String.format("--%s=apache", UserInput.TEST_CASE_PARAM),
+            String.format("--workdir=%s", pwd.getAbsolutePath()),
+            String.format("--%s=%d", UserInput.REPEAT_PARAM, 2)
+        );
+    }
 }
