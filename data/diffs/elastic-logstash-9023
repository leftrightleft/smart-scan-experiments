diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
index 4ccc1c0174b..0fc95860c20 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
@@ -4,7 +4,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import org.jruby.Ruby;
-import org.jruby.RubyBasicObject;
 import org.jruby.RubyClass;
 import org.jruby.RubyHash;
 import org.jruby.RubyNumeric;
@@ -101,7 +100,9 @@ public IRubyObject setPipelineMetric(final ThreadContext context, IRubyObject me
 
     @JRubyMethod(name = "inflight_batches")
     public IRubyObject rubyGetInflightBatches(final ThreadContext context) {
-        return RubyHash.newHash(context.runtime, inflightBatches, RubyBasicObject.UNDEF);
+        final RubyHash result = RubyHash.newHash(context.runtime);
+        result.putAll(inflightBatches);
+        return result;
     }
 
     // create a new, empty batch
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java
new file mode 100644
index 00000000000..1639aac68c5
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java
@@ -0,0 +1,34 @@
+package org.logstash.ext;
+
+import java.util.Map;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import org.jruby.RubyHash;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.junit.Test;
+import org.logstash.RubyUtil;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+/**
+ * Tests for {@link JrubyMemoryReadClientExt}.
+ */
+public final class JrubyMemoryReadClientExtTest {
+
+    @Test
+    public void testInflightBatchesTracking() throws InterruptedException {
+        final BlockingQueue<JrubyEventExtLibrary.RubyEvent> queue =
+            new ArrayBlockingQueue<>(10);
+        final JrubyMemoryReadClientExt client =
+            JrubyMemoryReadClientExt.create(queue, 5, 50);
+        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
+        final IRubyObject batch = client.readBatch(context);
+        final RubyHash inflight = (RubyHash) client.rubyGetInflightBatches(context);
+        assertThat(inflight.size(), is(1));
+        assertThat(inflight.get(Thread.currentThread().getId()), is(batch));
+        client.closeBatch(context, batch);
+        assertThat(((Map<?, ?>) client.rubyGetInflightBatches(context)).size(), is(0));
+    }
+}
