diff --git a/lib/logstash/codecs/oldlogstashjson.rb b/lib/logstash/codecs/oldlogstashjson.rb
index 2cc05979a51..80083e25860 100644
--- a/lib/logstash/codecs/oldlogstashjson.rb
+++ b/lib/logstash/codecs/oldlogstashjson.rb
@@ -44,7 +44,7 @@ def encode(data)
     end
 
     h.merge!(data["@fields"]) if data["@fields"].is_a?(Hash)
-    @on_event.call(h)
+    @on_event.call(h.to_json)
   end # def encode
 
 end # class LogStash::Codecs::OldLogStashJSON
diff --git a/spec/codecs/oldlogstashjson.rb b/spec/codecs/oldlogstashjson.rb
new file mode 100644
index 00000000000..b945c1ce851
--- /dev/null
+++ b/spec/codecs/oldlogstashjson.rb
@@ -0,0 +1,41 @@
+require "logstash/codecs/oldlogstashjson"
+require "logstash/event"
+require "insist"
+
+describe LogStash::Codecs::OldLogStashJSON do
+  subject do
+    next LogStash::Codecs::OldLogStashJSON.new
+  end
+
+  context "#decode" do
+    it "should return a new (v1) event from old (v0) json data" do
+      data = {"@message" => "bar", "@source_host" => "localhost",
+              "@tags" => ["a","b","c"]}
+      subject.decode(data.to_json) do |event|
+        insist { event.is_a? LogStash::Event }
+        insist { event["@timestamp"] } != nil
+        insist { event["type"] } == data["@type"]
+        insist { event["message"] } == data["@message"]
+        insist { event["host"] } == data["@source_host"]
+        insist { event["tags"] } == data["@tags"]
+      end
+    end
+  end
+
+  context "#encode" do
+    it "should return old (v0) json data" do
+      data = {"type" => "t", "message" => "wat!?",
+              "host" => "localhost", "path" => "/foo",
+              "tags" => ["a","b","c"]}
+      event = LogStash::Event.new(data)
+      got_event = false
+      subject.on_event do |d|
+        insist { JSON.parse(d)["@timestamp"] } != nil
+        insist { JSON.parse(d)["@message"] } == data["message"]
+        got_event = true
+      end
+      subject.encode(event)
+      insist { got_event }
+    end
+  end
+end
