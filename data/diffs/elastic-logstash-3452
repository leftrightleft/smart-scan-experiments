diff --git a/lib/logstash/runner.rb b/lib/logstash/runner.rb
index 340deb32d7a..9f425a6f8bb 100644
--- a/lib/logstash/runner.rb
+++ b/lib/logstash/runner.rb
@@ -16,6 +16,7 @@ class LogStash::Runner
 
   def main(args)
     require "logstash/util"
+    require "logstash/util/java_version"
     require "stud/trap"
     require "stud/task"
     @startup_interruption_trap = Stud::trap("INT") { puts "Interrupted"; exit 0 }
@@ -27,6 +28,9 @@ def main(args)
       return 1
     end
 
+    # Print a warning to STDERR for bad java versions
+    LogStash::Util::JavaVersion.warn_on_bad_java_version
+
     Stud::untrap("INT", @startup_interruption_trap)
 
     task = run(args)
diff --git a/lib/logstash/util/java_version.rb b/lib/logstash/util/java_version.rb
new file mode 100644
index 00000000000..092de78a9a7
--- /dev/null
+++ b/lib/logstash/util/java_version.rb
@@ -0,0 +1,61 @@
+require 'cabin'
+
+module LogStash::Util::JavaVersion
+  def self.logger
+    @logger ||= Cabin::Channel.get(LogStash)
+  end
+
+  # Print a warning if we're on a bad version of java
+  def self.warn_on_bad_java_version
+    if self.bad_java_version?(self.version)
+      msg = "!!! Please upgrade your java version, the current version '#{self.version}' may cause problems. We recommend a minimum version of 1.7.0_51"
+      STDERR.puts(msg)
+      logger.warn(msg)
+    end
+  end
+
+  # Return the current java version string. Returns nil if this is a non-java platform (e.g. MRI).
+  def self.version
+    return nil unless LogStash::Environment.jruby?
+    java.lang.System.getProperty("java.runtime.version")
+  end
+
+  # Takes a string of a java version ex: "1.8.0_24-beta"
+  # and returns a parsed map of the components.
+  # nil inputs will be returned as nil.
+  def self.parse_java_version(version_string)
+    return nil if version_string.nil?
+
+    # Crazy java versioning rules @ http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html
+    # The regex below parses this all correctly http://rubular.com/r/sInQc3Nc7f
+
+    match = version_string.match(/\A(\d+)\.(\d+)\.(\d+)(_(\d+))?(-(.+))?\Z/)
+    major, minor, patch, ufull, update, bfull, build = match.captures
+
+    {
+      :full => version_string,
+      :major => major.to_i,
+      :minor => minor.to_i,
+      :patch => patch.to_i,
+      :update => update.to_i, # this is always coerced to an int (a nil will be zero) to make comparisons easier
+      :build => build # not an integer, could be b06 for instance!,
+    }
+  end
+
+  # Determine if the given java version string is a bad version of java
+  # If it is, return true, if it isn't return false.
+  # Accepts nil, returning nil.
+  def self.bad_java_version?(version_string)
+    return nil if version_string.nil?
+
+    parsed = parse_java_version(version_string)
+
+    if parsed[:major] == 1 && parsed[:minor] == 7 && parsed[:patch] == 0 && parsed[:update] < 51
+      true
+    elsif parsed[:major] == 1 && parsed[:minor] < 7
+      true
+    else
+      false
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/util/java_version_spec.rb b/spec/util/java_version_spec.rb
new file mode 100644
index 00000000000..35a409644b3
--- /dev/null
+++ b/spec/util/java_version_spec.rb
@@ -0,0 +1,66 @@
+require 'spec_helper'
+require 'logstash/util/java_version'
+
+describe "LogStash::Util::JavaVersion" do
+  subject(:mod) { LogStash::Util::JavaVersion }
+
+  it "should get the current java version if we're on Java" do
+    if LogStash::Environment.jruby?
+      expect(LogStash::Util::JavaVersion.version).to be_a(String)
+    end
+  end
+
+  it "should mark a bad beta version as bad" do
+    expect(mod.bad_java_version?("1.7.0_45-beta")).to be_truthy
+  end
+
+  it "should mark a bad standard version as bad" do
+    expect(mod.bad_java_version?("1.6.0")).to be_truthy
+  end
+
+  it "should mark a good standard java version as good" do
+    expect(mod.bad_java_version?("1.7.0_51")).to be_falsey
+  end
+
+  it "should mark a good beta version as good" do
+    expect(mod.bad_java_version?("1.8.0-beta")).to be_falsey
+  end
+
+  describe "parsing java versions" do
+    it "should return nil on a nil version" do
+      expect(mod.parse_java_version(nil)).to be_nil
+    end
+
+    shared_examples("version parsing") do |desc, string, major, minor, patch, update, build|
+      context("#{desc} with version #{string}") do
+        subject(:parsed) { LogStash::Util::JavaVersion.parse_java_version(string) }
+
+        it "should have the correct major version" do
+          expect(parsed[:major]).to eql(major)
+        end
+
+        it "should have the correct minor version" do
+          expect(parsed[:minor]).to eql(minor)
+        end
+
+        it "should have the correct patch version" do
+          expect(parsed[:patch]).to eql(patch)
+        end
+
+        it "should have the correct update version" do
+          expect(parsed[:update]).to eql(update)
+        end
+
+        it "should have the correct build string" do
+          expect(parsed[:build]).to eql(build)
+        end
+      end
+    end
+
+    include_examples("version parsing", "a plain version", "1.3.0", 1, 3, 0, 0, nil)
+    include_examples("version parsing", "an update", "1.4.0_03", 1, 4, 0, 3, nil)
+    include_examples("version parsing", "a build", "1.4.0-beta", 1, 4, 0, 0,"beta")
+    include_examples("version parsing", "an update+build", "1.4.0_03-beta", 1, 4, 0, 3, "beta")
+  end
+
+end
\ No newline at end of file
