diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index baa47f3318e..8b14d467a16 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -24,8 +24,6 @@ module ::LogStash::Util::SubstitutionVariables
 
   include LogStash::Util::Loggable
 
-  SUBSTITUTION_PLACEHOLDER_REGEX = /\${(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?}/
-
   SECRET_STORE = ::LogStash::Util::LazySingleton.new { load_secret_store }
   private_constant :SECRET_STORE
 
@@ -58,26 +56,10 @@ def replace_placeholders(value)
     end
     return value unless value.is_a?(String)
 
-    value.gsub(SUBSTITUTION_PLACEHOLDER_REGEX) do |placeholder|
-      # Note: Ruby docs claim[1] Regexp.last_match is thread-local and scoped to
-      # the call, so this should be thread-safe.
-      #
-      # [1] http://ruby-doc.org/core-2.1.1/Regexp.html#method-c-last_match
-      name = Regexp.last_match(:name)
-      default = Regexp.last_match(:default)
-      logger.debug("Replacing `#{placeholder}` with actual value")
-
-      #check the secret store if it exists
-      secret_store = SECRET_STORE.instance
-      replacement = secret_store.nil? ? nil : secret_store.retrieveSecret(SecretStoreExt.getStoreId(name))
-      #check the environment
-      replacement = ENV.fetch(name, default) if replacement.nil?
-      if replacement.nil?
-        raise LogStash::ConfigurationError, "Cannot evaluate `#{placeholder}`. Replacement variable `#{name}` is not defined in a Logstash secret store " +
-            "or as an Environment entry and there is no default value given."
-      end
-      replacement.to_s
-    end
+    secret_store = SECRET_STORE.instance
+    org.logstash.common.SubstitutionVariables.replacePlaceholders(value, ENV, secret_store)
+  rescue org.logstash.common.SubstitutionVariables::MissingSubstitutionVariableError => e
+    raise ::LogStash::ConfigurationError, e.getMessage
   end # def replace_placeholders
 
   class << self
diff --git a/logstash-core/src/main/java/org/logstash/common/SubstitutionVariables.java b/logstash-core/src/main/java/org/logstash/common/SubstitutionVariables.java
new file mode 100644
index 00000000000..84e82318132
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/common/SubstitutionVariables.java
@@ -0,0 +1,80 @@
+package org.logstash.common;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.logstash.secret.SecretIdentifier;
+import org.logstash.secret.store.SecretStore;
+import org.logstash.secret.store.SecretStoreException;
+import org.logstash.secret.store.SecretStoreFactory;
+import org.logstash.secret.store.SecureConfig;
+
+import java.util.Map;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+
+public class SubstitutionVariables {
+    private static final Logger logger = LogManager.getLogger(SubstitutionVariables.class);
+
+    public static final Pattern SUBSTITUTION_PLACEHOLDER_REGEX = Pattern.compile("\\$\\{(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?\\}");
+
+    private static final SecretStoreFactory secretStoreFactory = SecretStoreFactory.fromEnvironment();
+
+    static String replacePlaceholders(final String input,
+                                      final Map<String, String> environmentVariables,
+                                      SecureConfig secureConfig) {
+        return replacePlaceholders(input, environmentVariables, (name) -> {
+            // TODO: This is an expensive operation, often 300ms if the SS exists, so we only do it on
+            // match results. In the future we should cache secret stores based on contents of the SS.
+            SecretStore secretStore = null;
+            try {
+                if (secretStoreFactory.exists(secureConfig)) {
+                    secretStore = secretStoreFactory.load(secureConfig);
+                }
+            } catch (SecretStoreException.AccessException e) {
+                // Non-fatal condition
+                logger.warn("Could not load secret store ", e);
+            }
+
+            if (secretStore != null) {
+                byte[] secretValue = secretStore.retrieveSecret(new SecretIdentifier(name));
+                if (secretValue != null) return new String(secretValue);
+            }
+
+            return null;
+        });
+    }
+
+    static String replacePlaceholders(final String input,
+                                      final Map<String, String> environmentVariables,
+                                      final Function<String, String> secretLookup) {
+
+        return Util.gsub(input, SUBSTITUTION_PLACEHOLDER_REGEX, (matchResult) -> {
+            String name = matchResult.group(1);
+            String defaultValue = matchResult.group(3);
+
+            final String secureValue = secretLookup != null ? secretLookup.apply(name) : null;
+            if (secureValue != null) {
+                return secureValue;
+            }
+
+            final String envValue = environmentVariables.getOrDefault(name, defaultValue);
+            if (envValue != null) {
+                return envValue;
+            }
+
+            String errMsg = String.format(
+                    "Cannot evaluate `%s`. Replacement variable `%s` is not defined in a Logstash secret store " +
+                            "or as an Environment entry and there is no default value given.",
+                    matchResult.group(0), name);
+            throw new MissingSubstitutionVariableError(errMsg);
+        });
+    }
+
+    static class MissingSubstitutionVariableError extends RuntimeException {
+        private static final long serialVersionUID = -5247458493558717395L;
+
+        public MissingSubstitutionVariableError(String errMsg) {
+            super(errMsg);
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/common/Util.java b/logstash-core/src/main/java/org/logstash/common/Util.java
index 0c47a53136e..9e75d104177 100644
--- a/logstash-core/src/main/java/org/logstash/common/Util.java
+++ b/logstash-core/src/main/java/org/logstash/common/Util.java
@@ -23,6 +23,10 @@
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.util.function.Function;
+import java.util.regex.MatchResult;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public class Util {
     // Modified from http://stackoverflow.com/a/11009612/11105
@@ -52,4 +56,43 @@ public static String bytesToHexString(byte[] bytes) {
 
         return hexString.toString();
     }
+
+    /**
+     * Replace the given regex with a new value based on the given function
+     * @param input The string to search
+     * @param pattern regex pattern string
+     * @param matchSubstituter function that does the replacement based on the match
+     * @return new string, with substitutions
+     */
+    public static String gsub(final String input, final String pattern, Function<MatchResult, String> matchSubstituter) {
+        return gsub(input, Pattern.compile(pattern), matchSubstituter);
+    }
+
+    /**
+     * Replace the given regex with a new value based on the given function
+     * @param input The string to search
+     * @param pattern Compiled regex pattern
+     * @param matchSubstituter function that does the replacement based on the match
+     * @return new string, with substitutions
+     */
+    public static String gsub(final String input, final Pattern pattern, Function<MatchResult, String> matchSubstituter) {
+        final StringBuilder output = new StringBuilder();
+        final Matcher matcher = pattern.matcher(input);
+
+        while (matcher.find()) {
+            // Add the non-matched text preceding the match to the output
+            output.append(input, matcher.regionStart(), matcher.start());
+
+            // Add the substituted match to the output
+            output.append(matchSubstituter.apply(matcher.toMatchResult()));
+
+            // Move the matched region to after the match
+            matcher.region(matcher.end(), input.length());
+        }
+
+        // slurp remaining into output
+        output.append(input, matcher.regionStart(), input.length());
+
+        return output.toString();
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java b/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
index a66037a0729..c157483c91d 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
@@ -27,6 +27,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.logstash.common.SubstitutionVariables;
 
 /**
  * Expand the configuration variables used in pipeline configuration, bringing them from secret store or from the
@@ -34,9 +35,7 @@
  * */
 public class ConfigVariableExpander implements AutoCloseable {
 
-    private static String SUBSTITUTION_PLACEHOLDER_REGEX = "\\$\\{(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?}";
-
-    private Pattern substitutionPattern = Pattern.compile(SUBSTITUTION_PLACEHOLDER_REGEX);
+    private final Pattern substitutionPattern = SubstitutionVariables.SUBSTITUTION_PLACEHOLDER_REGEX;
     private SecretStore secretStore;
     private EnvironmentVariableProvider envVarProvider;
 
diff --git a/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java b/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
index 31b8536f034..8dee0239db1 100644
--- a/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
@@ -28,8 +28,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Map;
-
-import static org.logstash.secret.store.SecretStoreFactoryTest.MemoryStore;
+import org.logstash.secret.MemoryStore;
 
 public class ConfigVariableExpanderTest {
 
diff --git a/logstash-core/src/test/java/org/logstash/common/SubstitutionVariablesTest.java b/logstash-core/src/test/java/org/logstash/common/SubstitutionVariablesTest.java
new file mode 100644
index 00000000000..00493fda4f7
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/common/SubstitutionVariablesTest.java
@@ -0,0 +1,56 @@
+package org.logstash.common;
+
+import org.junit.Test;
+import org.logstash.secret.MemoryStore;
+import org.logstash.secret.SecretIdentifier;
+import org.logstash.secret.store.SecretStore;
+
+import java.util.Collections;
+import java.util.function.Function;
+
+import static org.junit.Assert.*;
+
+public class SubstitutionVariablesTest {
+    @Test
+    public void substituteDefaultTest() {
+        assertEquals(
+            "Some bar Text",
+            SubstitutionVariables.replacePlaceholders(
+                    "Some ${foo:bar} Text",
+                    Collections.emptyMap(),
+                    (Function<String, String>) null
+            )
+        );
+    }
+
+    @Test
+    public void substituteEnvMatchTest() {
+        assertEquals(
+            "Some env Text",
+            SubstitutionVariables.replacePlaceholders(
+                "Some ${foo:bar} Text",
+                Collections.singletonMap("foo", "env"),
+                (Function<String, String>) null
+            )
+        );
+    }
+
+    @Test
+    public void substituteSecretMatchTest() {
+        SecretStore secretStore = new MemoryStore();
+        SecretIdentifier identifier = new SecretIdentifier("foo");
+        String secretValue = "SuperSekret";
+        secretStore.persistSecret(identifier, secretValue.getBytes());
+
+        assertEquals(
+            "Some " + secretValue + " Text",
+            SubstitutionVariables.replacePlaceholders(
+                "Some ${foo:bar} Text",
+                // Tests precedence over the env as well
+                Collections.singletonMap("foo", "env"),
+                (name) -> new String(secretStore.retrieveSecret(new SecretIdentifier(name)))
+            )
+        );
+    }
+
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/common/UtilTest.java b/logstash-core/src/test/java/org/logstash/common/UtilTest.java
new file mode 100644
index 00000000000..d0f08f5c930
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/common/UtilTest.java
@@ -0,0 +1,37 @@
+package org.logstash.common;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class UtilTest {
+
+    @Test
+    public void gsubSimple() {
+        assertEquals(
+            "fooREPLACEbarREPLACEbaz",
+            Util.gsub(
+                    "fooXbarXbaz",
+                    "X",
+                    (mRes) -> "REPLACE"
+            )
+        );
+    }
+
+    @Test
+    public void gsubGroups() {
+        assertEquals(
+            "fooYbarZbaz",
+            Util.gsub(
+                    "foo${Y}bar${Z}baz",
+                    "\\$\\{(.)\\}", (mRes) -> mRes.group(1)));
+    }
+
+    @Test
+    public void gsubNoMatch() {
+        assertEquals(
+            "foobarbaz",
+            Util.gsub("foobarbaz", "XXX", (mRes) -> "")
+        );
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/MemoryStore.java b/logstash-core/src/test/java/org/logstash/secret/MemoryStore.java
new file mode 100644
index 00000000000..117c1cf273e
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/MemoryStore.java
@@ -0,0 +1,68 @@
+package org.logstash.secret;
+
+import org.logstash.secret.store.SecretStore;
+import org.logstash.secret.store.SecureConfig;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.logstash.secret.store.SecretStoreFactory.LOGSTASH_MARKER;
+
+/**
+ * Valid alternate implementation of secret store
+ */
+public class MemoryStore implements SecretStore {
+
+    private Map<SecretIdentifier, ByteBuffer> secrets = new HashMap<>(1);
+
+    public MemoryStore() {
+        persistSecret(LOGSTASH_MARKER, LOGSTASH_MARKER.getKey().getBytes(StandardCharsets.UTF_8));
+    }
+
+    @Override
+    public SecretStore create(SecureConfig secureConfig) {
+        return this;
+    }
+
+    @Override
+    public void delete(SecureConfig secureConfig) {
+        secrets.clear();
+    }
+
+    @Override
+    public SecretStore load(SecureConfig secureConfig) {
+        return this;
+    }
+
+    @Override
+    public boolean exists(SecureConfig secureConfig) {
+        return true;
+    }
+
+    @Override
+    public Collection<SecretIdentifier> list() {
+        return secrets.keySet();
+    }
+
+    @Override
+    public void persistSecret(SecretIdentifier id, byte[] secret) {
+        secrets.put(id, ByteBuffer.wrap(secret));
+    }
+
+    @Override
+    public void purgeSecret(SecretIdentifier id) {
+        secrets.remove(id);
+    }
+
+    @Override
+    public boolean containsSecret(SecretIdentifier id) { return secrets.containsKey(id); }
+
+    @Override
+    public byte[] retrieveSecret(SecretIdentifier id) {
+        ByteBuffer bb = secrets.get(id);
+        return bb != null ? bb.array() : null;
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
index ab9f6ea3c7b..b0e336afef4 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
@@ -24,13 +24,12 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
+import org.logstash.secret.MemoryStore;
 import org.logstash.secret.SecretIdentifier;
 import org.logstash.secret.store.backend.JavaKeyStore;
 
 import java.io.IOException;
-import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
@@ -57,7 +56,7 @@ public class SecretStoreFactoryTest {
     @Test
     public void testAlternativeImplementation() {
         SecureConfig secureConfig = new SecureConfig();
-        secureConfig.add("keystore.classname", "org.logstash.secret.store.SecretStoreFactoryTest$MemoryStore".toCharArray());
+        secureConfig.add("keystore.classname", "org.logstash.secret.MemoryStore".toCharArray());
         SecretStore secretStore = secretStoreFactory.load(secureConfig);
         assertThat(secretStore).isInstanceOf(MemoryStore.class);
         validateMarker(secretStore);
@@ -150,60 +149,4 @@ private void validateMarker(SecretStore secretStore) {
         assertThat(new String(marker, StandardCharsets.UTF_8)).isEqualTo(LOGSTASH_MARKER.getKey());
     }
 
-    /**
-     * Valid alternate implementation
-     */
-    public static class MemoryStore implements SecretStore {
-
-        Map<SecretIdentifier, ByteBuffer> secrets = new HashMap(1);
-
-        public MemoryStore() {
-            persistSecret(LOGSTASH_MARKER, LOGSTASH_MARKER.getKey().getBytes(StandardCharsets.UTF_8));
-        }
-
-        @Override
-        public SecretStore create(SecureConfig secureConfig) {
-            return this;
-        }
-
-        @Override
-        public void delete(SecureConfig secureConfig) {
-            secrets.clear();
-        }
-
-        @Override
-        public SecretStore load(SecureConfig secureConfig) {
-            return this;
-        }
-
-        @Override
-        public boolean exists(SecureConfig secureConfig) {
-            return true;
-        }
-
-        @Override
-        public Collection<SecretIdentifier> list() {
-            return secrets.keySet();
-        }
-
-        @Override
-        public void persistSecret(SecretIdentifier id, byte[] secret) {
-            secrets.put(id, ByteBuffer.wrap(secret));
-        }
-
-        @Override
-        public void purgeSecret(SecretIdentifier id) {
-            secrets.remove(id);
-        }
-
-        @Override
-        public boolean containsSecret(SecretIdentifier id) { return secrets.containsKey(id); }
-
-        @Override
-        public byte[] retrieveSecret(SecretIdentifier id) {
-            ByteBuffer bb = secrets.get(id);
-            return bb != null ? bb.array() : null;
-        }
-    }
-
 }
\ No newline at end of file
