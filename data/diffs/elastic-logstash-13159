diff --git a/bin/logstash b/bin/logstash
index 25998c6ee70..01881363aad 100755
--- a/bin/logstash
+++ b/bin/logstash
@@ -56,6 +56,5 @@ if [ "$1" = "-V" ] || [ "$1" = "--version" ]; then
   fi
   echo "logstash $LOGSTASH_VERSION"
 else
-  CLASSPATH="$(setup_classpath $LOGSTASH_JARS)"
   exec "${JAVACMD}" ${JAVA_OPTS} -cp "${CLASSPATH}" org.logstash.Logstash "$@"
 fi
diff --git a/bin/logstash.bat b/bin/logstash.bat
index 28850bb8f73..560a9ec9d40 100644
--- a/bin/logstash.bat
+++ b/bin/logstash.bat
@@ -33,6 +33,10 @@ for /F "usebackq tokens=1-2* delims= " %%A in (!params!) do (
 	)
 )
 
+rem setup CLASSPATH for Java process
+set "JRUBY_HOME=%LS_HOME%\vendor\jruby"
+
+set "CLASSPATH=%JRUBY_HOME%\lib\jruby.jar"
 for %%i in ("%LS_HOME%\logstash-core\lib\jars\*.jar") do (
 	call :concat "%%i"
 )
diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index 0ce1479f09c..29680db94f3 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -47,6 +47,7 @@ export LS_HOME="${LOGSTASH_HOME}"
 SINCEDB_DIR="${LOGSTASH_HOME}"
 export SINCEDB_DIR
 LOGSTASH_JARS=${LOGSTASH_HOME}/logstash-core/lib/jars
+JRUBY_HOME="${LOGSTASH_HOME}/vendor/jruby"
 
 # iterate over the command line args and look for the argument
 # after --path.settings to see if the jvm.options file is in
@@ -77,14 +78,18 @@ setup_bundled_jdk_part() {
 
 # Accepts 1 parameter which is the path the directory where logstash jar are contained.
 setup_classpath() {
-  local jar_directory="${1?jar directory required}"
-  local classpath
+  local classpath="${1?classpath (and jar_directory) required}"
+  local jar_directory="${2}"
   for J in $(cd "${jar_directory}"; ls *.jar); do
     classpath=${classpath}${classpath:+:}${jar_directory}/${J}
   done
   echo "${classpath}"
 }
 
+# set up CLASSPATH once (we start more than one java process)
+CLASSPATH="${JRUBY_HOME}/lib/jruby.jar"
+CLASSPATH="$(setup_classpath $CLASSPATH $LOGSTASH_JARS)"
+
 setup_java() {
   # set the path to java into JAVACMD which will be picked up by JRuby to launch itself
   if [ -z "$JAVACMD" ]; then
@@ -137,20 +142,17 @@ setup_java() {
   # jruby launcher uses JAVACMD as its java executable and JAVA_OPTS as the JVM options
   export JAVACMD
 
-  CLASSPATH="$(setup_classpath $LOGSTASH_JARS)"
-
   JAVA_OPTS=`exec "${JAVACMD}" -cp "${CLASSPATH}" org.logstash.launchers.JvmOptionsParser "$LOGSTASH_HOME" "$LS_JVM_OPTS"`
   EXIT_CODE=$?
   if [ $EXIT_CODE -ne 0 ]; then
     exit $EXIT_CODE
   fi
 
-  unset CLASSPATH
   export JAVA_OPTS
 }
 
 setup_vendored_jruby() {
-  JRUBY_BIN="${LOGSTASH_HOME}/vendor/jruby/bin/jruby"
+  JRUBY_BIN="${JRUBY_HOME}/bin/jruby"
 
   if [ ! -f "${JRUBY_BIN}" ] ; then
     echo "Unable to find JRuby."
diff --git a/build.gradle b/build.gradle
index 465664a1077..00514ff3825 100644
--- a/build.gradle
+++ b/build.gradle
@@ -872,9 +872,11 @@ if (System.getenv('OSS') != 'true') {
   }
 }
 
- tasks.register("runXPackUnitTests"){
-   dependsOn ":logstash-xpack:rubyTests"
+ tasks.register("runXPackUnitTests") {
+     dependsOn copyPluginTestAlias
+     dependsOn ":logstash-xpack:rubyTests"
  }
  tasks.register("runXPackIntegrationTests"){
-   dependsOn ":logstash-xpack:rubyIntegrationTests"
+     dependsOn copyPluginTestAlias
+     dependsOn ":logstash-xpack:rubyIntegrationTests"
  }
diff --git a/buildSrc/src/main/groovy/org/logstash/gradle/tooling/ListProjectDependencies.groovy b/buildSrc/src/main/groovy/org/logstash/gradle/tooling/ListProjectDependencies.groovy
index d00ac9c7687..f867483a0ac 100644
--- a/buildSrc/src/main/groovy/org/logstash/gradle/tooling/ListProjectDependencies.groovy
+++ b/buildSrc/src/main/groovy/org/logstash/gradle/tooling/ListProjectDependencies.groovy
@@ -34,6 +34,13 @@ class ListProjectDependencies extends DefaultTask {
         moduleDeps.addAll(project.configurations.runtimeOnly.getAllDependencies())
 
         def depsInGAV = moduleDeps.collect {dep ->
+
+            // SelfResolvingDependency has no group or version information
+            if (!dep.group && !dep.version && dep.reason) {
+                def m = dep.reason =~ /DEPENDENCY: ([\w\.\-]+:[\w\.\-]+:[\w\.\-]+)/
+                if (m.matches()) return m[0][1]
+            }
+
             "${dep.group}:${dep.name}:${dep.version}"
         }
 
diff --git a/ci/integration_tests.sh b/ci/integration_tests.sh
index 5d65760223c..abf1a76f64a 100755
--- a/ci/integration_tests.sh
+++ b/ci/integration_tests.sh
@@ -9,7 +9,6 @@ export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false
 
 export SPEC_OPTS="--order rand --format documentation"
 export CI=true
-export OSS=true
 
 if [ -n "$BUILD_JAVA_HOME" ]; then
   GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.java.home=$BUILD_JAVA_HOME"
diff --git a/ci/unit_tests.sh b/ci/unit_tests.sh
index 5968dd7d4d4..d7a760d693e 100755
--- a/ci/unit_tests.sh
+++ b/ci/unit_tests.sh
@@ -9,7 +9,6 @@ export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false
 
 export SPEC_OPTS="--order rand --format documentation"
 export CI=true
-export OSS=true
 export TEST_DEBUG=true
 
 if [ -n "$BUILD_JAVA_HOME" ]; then
diff --git a/lib/bootstrap/rspec.rb b/lib/bootstrap/rspec.rb
index 14f37038801..267a4f6c2bd 100755
--- a/lib/bootstrap/rspec.rb
+++ b/lib/bootstrap/rspec.rb
@@ -20,13 +20,18 @@
 require "logstash-core"
 require "logstash/environment"
 
-$LOAD_PATH.unshift(File.join(LogStash::Environment::LOGSTASH_CORE, "spec"))
+# Bundler + gemspec already setup $LOAD_PATH << '.../lib'
+# but since we load specs from 2 locations we need to hook up these:
+[ LogStash::Environment::LOGSTASH_HOME, LogStash::Environment::LOGSTASH_CORE ].each do |path|
+  spec_path = File.join(path, "spec")
+  $LOAD_PATH.unshift(spec_path) unless $LOAD_PATH.include?(spec_path)
+end
 
 require "rspec/core"
 require "rspec"
 require 'ci/reporter/rake/rspec_loader'
 
-RSpec.world.reset # if multiple rspec runs occur in a single process, the RSpec "world" state needs to be reset.
+RSpec.clear_examples # if multiple rspec runs occur in a single process, the RSpec "world" state needs to be reset.
 
 status = RSpec::Core::Runner.run(ARGV.empty? ? ($JUNIT_ARGV || ["spec"]) : ARGV).to_i
 if ENV["IS_JUNIT_RUN"]
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 5332c275c94..013500cb8b9 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -17,18 +17,16 @@
  * under the License.
  */
 
-import java.nio.file.Files
-import java.nio.file.Paths
 import org.yaml.snakeyaml.Yaml
 
 // fetch version from Logstash's main versions.yml file
 def versionMap = (Map) (new Yaml()).load(new File("$projectDir/../versions.yml").text)
 
 description = """Logstash Core Java"""
-version = versionMap['logstash-core']
-String jrubyVersion = versionMap['jruby']['version']
+
 String jacksonVersion = versionMap['jackson']
 String jacksonDatabindVersion = versionMap['jackson-databind']
+String jrubyVersion = versionMap['jruby']['version']
 
 String log4jVersion = '2.17.1'
 
@@ -61,7 +59,9 @@ tasks.register("javadocJar", Jar) {
 
 tasks.register("copyRuntimeLibs", Copy) {
     into project.file('lib/jars/')
-    from configurations.compileClasspath, configurations.runtimeClasspath
+    from configurations.runtimeClasspath {
+        exclude { it.file.name == 'jruby.jar' }
+    }
 }
 
 // copy jar file into the gem lib dir but without the version number in filename
@@ -90,6 +90,7 @@ configurations.archives {
 }
 
 tasks.register("javaTests", Test) {
+    dependsOn ':bootstrap'
     exclude '/org/logstash/RSpecTests.class'
     exclude '/org/logstash/config/ir/ConfigCompilerTest.class'
     exclude '/org/logstash/config/ir/CompiledPipelineTest.class'
@@ -105,7 +106,7 @@ tasks.register("javaTests", Test) {
 tasks.register("rubyTests", Test) {
     inputs.files fileTree("${projectDir}/lib")
     inputs.files fileTree("${projectDir}/spec")
-    systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+    systemProperty 'logstash.root.dir', projectDir.parent
     include '/org/logstash/RSpecTests.class'
     include '/org/logstash/config/ir/ConfigCompilerTest.class'
     include '/org/logstash/config/ir/CompiledPipelineTest.class'
@@ -151,10 +152,10 @@ idea {
     }
 }
 
-def customJRubyDir = project.hasProperty("custom.jruby.path") ? project.property("custom.jruby.path") : ""
-def customJRubyVersion = customJRubyDir == "" ? "" : Files.readAllLines(Paths.get(customJRubyDir, "VERSION")).get(0).trim()
-
 dependencies {
+    api(files("../vendor/jruby/lib/jruby.jar") { // jruby-core.jar
+        builtBy ':downloadAndInstallJRuby'
+    }) { because "DEPENDENCY: org.jruby:jruby-core:${jrubyVersion}" } // meta-data for generateLicenseReport
     implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
     annotationProcessor "org.apache.logging.log4j:log4j-core:${log4jVersion}"
     api "org.apache.logging.log4j:log4j-core:${log4jVersion}"
@@ -177,11 +178,6 @@ dependencies {
     implementation 'org.codehaus.janino:janino:3.1.0'
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
-    if (customJRubyDir == "") {
-        api "org.jruby:jruby-complete:${jrubyVersion}"
-    } else {
-        api files(customJRubyDir + "/maven/jruby-complete/target/jruby-complete-${customJRubyVersion}.jar")
-    }
     implementation group: 'com.google.guava', name: 'guava', version: '24.1.1-jre'
     // WARNING: DO NOT UPGRADE "google-java-format"
     // later versions require GPL licensed code in javac-shaded that is
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 100094682f5..cb973084160 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -145,7 +145,7 @@ module Environment
   module Environment
     extend self
 
-    LOGSTASH_CORE = ::File.expand_path(::File.join(::File.dirname(__FILE__), "..", ".."))
+    LOGSTASH_CORE = ::File.expand_path(::File.join("..", ".."), ::File.dirname(__FILE__))
     LOGSTASH_ENV = (ENV["LS_ENV"] || 'production').to_s.freeze
 
     LINUX_OS_RE = /linux/
diff --git a/logstash-core/src/main/java/org/logstash/Logstash.java b/logstash-core/src/main/java/org/logstash/Logstash.java
index 22857e3dd1d..74ed6423af8 100644
--- a/logstash-core/src/main/java/org/logstash/Logstash.java
+++ b/logstash-core/src/main/java/org/logstash/Logstash.java
@@ -38,6 +38,8 @@
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.builtin.IRubyObject;
 
+import javax.annotation.Nullable;
+
 /**
  * Logstash Main Entrypoint.
  */
@@ -197,6 +199,40 @@ public void close() {
         ruby.tearDown(false);
     }
 
+    /**
+     * Initialize a runtime configuration.
+     * @param lsHome the LOGSTASH_HOME
+     * @param args extra arguments (ARGV) to process
+     * @return a runtime configuration instance
+     */
+    public static RubyInstanceConfig initRubyConfig(final Path lsHome,
+                                                    final String... args) {
+        return initRubyConfigImpl(lsHome, safePath(lsHome, "vendor", "jruby"), args);
+    }
+
+    /**
+     * Initialize a runtime configuration.
+     * @param lsHome the LOGSTASH_HOME
+     * @param args extra arguments (ARGV) to process
+     * @return a runtime configuration instance
+     */
+    public static RubyInstanceConfig initRubyConfig(final Path lsHome,
+                                                    final Path currentDir,
+                                                    final String... args) {
+
+        return initRubyConfigImpl(currentDir, safePath(lsHome, "vendor", "jruby"), args);
+    }
+
+    private static RubyInstanceConfig initRubyConfigImpl(@Nullable final Path currentDir,
+                                                     final String jrubyHome,
+                                                     final String[] args) {
+        final RubyInstanceConfig config = new RubyInstanceConfig();
+        if (currentDir != null) config.setCurrentDirectory(currentDir.toString());
+        config.setJRubyHome(jrubyHome);
+        config.processArguments(args);
+        return config;
+    }
+
     /**
      * Sets up the correct {@link RubyInstanceConfig} for a given Logstash installation and set of
      * CLI arguments.
@@ -209,9 +245,7 @@ private static RubyInstanceConfig buildConfig(final Path home, final String[] ar
         System.arraycopy(args, 0, arguments, 2, args.length);
         arguments[0] = safePath(home, "lib", "bootstrap", "environment.rb");
         arguments[1] = safePath(home, "logstash-core", "lib", "logstash", "runner.rb");
-        final RubyInstanceConfig config = new RubyInstanceConfig();
-        config.processArguments(arguments);
-        return config;
+        return initRubyConfig(home, arguments);
     }
 
     /**
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java b/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
index 77a7e237d2f..c92e94a4d89 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
@@ -23,7 +23,11 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.logstash.secret.SecretIdentifier;
-import org.logstash.secret.store.*;
+import org.logstash.secret.store.SecretStore;
+import org.logstash.secret.store.SecretStoreFactory;
+import org.logstash.secret.store.SecretStoreException;
+import org.logstash.secret.store.SecretStoreUtil;
+import org.logstash.secret.store.SecureConfig;
 
 import javax.crypto.SecretKey;
 import javax.crypto.SecretKeyFactory;
diff --git a/logstash-core/src/test/java/org/logstash/AccessorsTest.java b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
index e731ba276d7..272dc15e7a2 100644
--- a/logstash-core/src/test/java/org/logstash/AccessorsTest.java
+++ b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
@@ -32,7 +32,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public class AccessorsTest {
+public class AccessorsTest extends RubyTestBase {
 
     @Test
     public void testBareGet() throws Exception {
diff --git a/logstash-core/src/test/java/org/logstash/ClonerTest.java b/logstash-core/src/test/java/org/logstash/ClonerTest.java
index 738e211b771..83827b2049f 100644
--- a/logstash-core/src/test/java/org/logstash/ClonerTest.java
+++ b/logstash-core/src/test/java/org/logstash/ClonerTest.java
@@ -28,7 +28,7 @@
 
 import static org.junit.Assert.*;
 
-public class ClonerTest {
+public class ClonerTest extends RubyTestBase {
     @Test
     public void testRubyStringCloning() {
         String javaString = "fooBar";
diff --git a/logstash-core/src/test/java/org/logstash/DLQEntryTest.java b/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
index f1d250f3201..bd15ebea5e1 100644
--- a/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
+++ b/logstash-core/src/test/java/org/logstash/DLQEntryTest.java
@@ -48,7 +48,7 @@
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertNotNull;
 
-public class DLQEntryTest {
+public class DLQEntryTest extends RubyTestBase {
     @Test
     public void testConstruct() throws Exception {
         Event event = new Event(Collections.singletonMap("key", "value"));
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index 5b9d34f7fc4..203bb44971b 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -44,7 +44,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public final class EventTest {
+public final class EventTest extends RubyTestBase {
 
     @Test
     public void queueableInterfaceRoundTrip() throws Exception {
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index 1f1f46224fc..fcc10cbe4ee 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -34,7 +34,7 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
-public final class FieldReferenceTest {
+public final class FieldReferenceTest extends RubyTestBase {
     @Before
     @After
     public void clearInternalCaches() {
diff --git a/logstash-core/src/test/java/org/logstash/JavafierTest.java b/logstash-core/src/test/java/org/logstash/JavafierTest.java
index b33ae9ed333..8ed3de0af92 100644
--- a/logstash-core/src/test/java/org/logstash/JavafierTest.java
+++ b/logstash-core/src/test/java/org/logstash/JavafierTest.java
@@ -26,7 +26,7 @@
 import java.math.BigInteger;
 import static org.junit.Assert.assertEquals;
 
-public class JavafierTest {
+public class JavafierTest extends RubyTestBase {
 
     @Test
     public void testRubyBignum() {
diff --git a/logstash-core/src/test/java/org/logstash/RSpecTests.java b/logstash-core/src/test/java/org/logstash/RSpecTests.java
index eb728b13233..acc7b54a002 100644
--- a/logstash-core/src/test/java/org/logstash/RSpecTests.java
+++ b/logstash-core/src/test/java/org/logstash/RSpecTests.java
@@ -22,11 +22,9 @@
 
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.assertj.core.util.Files;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Assert;
 import org.junit.Test;
@@ -39,13 +37,13 @@
  * Runs the Logstash RSpec suit.
  */
 @RunWith(Parameterized.class)
-public final class RSpecTests {
+public class RSpecTests extends RubyTestBase {
 
     @Parameters(name="{0}")
     public static Collection<Object[]> data() {
         return Arrays.asList(new Object[][] {
-                { "compliance", "spec/compliance/**/*_spec.rb"},
-                { "core tests", "spec/unit/**/*_spec.rb,logstash-core/spec/**/*_spec.rb" }
+                { "compliance", "spec/compliance/**/*_spec.rb" },
+                { "core tests", "spec/unit/**/*_spec.rb" + ',' + "logstash-core/spec/**/*_spec.rb" }
         });
     }
 
@@ -57,9 +55,7 @@ public static Collection<Object[]> data() {
 
     @Test
     public void rspecTests() throws Exception {
-        final String root = Files.currentFolder().getParent();
         RubyUtil.RUBY.getENV().put("IS_JUNIT_RUN", "true");
-        RubyUtil.RUBY.setCurrentDirectory(root);
         RubyUtil.RUBY.getGlobalVariables().set(
             "$JUNIT_ARGV",
             Rubyfier.deep(
@@ -67,7 +63,7 @@ public void rspecTests() throws Exception {
                     "-fd", "--pattern", specGlob
                 ))
         );
-        final Path rspec = Paths.get(root, "lib/bootstrap/rspec.rb");
+        final Path rspec = LS_HOME.resolve("lib").resolve("bootstrap").resolve("rspec.rb");
         final IRubyObject result = RubyUtil.RUBY.executeScript(
             new String(java.nio.file.Files.readAllBytes(rspec), StandardCharsets.UTF_8),
             rspec.toFile().getAbsolutePath()
diff --git a/logstash-core/src/test/java/org/logstash/RubyTestBase.java b/logstash-core/src/test/java/org/logstash/RubyTestBase.java
new file mode 100644
index 00000000000..aaa3bdf8cf3
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/RubyTestBase.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash;
+
+import org.jruby.Ruby;
+
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/**
+ * The point of this testing base is to initialize the global runtime.
+ * This is necessary as LS relies on a static RubyUtil.RUBY to be the runtime used by LS.
+ *
+ * Any test using the org.jruby API directly or indirectly should depend on this class.
+ */
+public abstract class RubyTestBase {
+
+    public static final Path LS_HOME;
+
+    static {
+        Path root;
+        if (System.getProperty("logstash.root.dir") == null) {
+            // make sure we work from IDE as well as when run with Gradle
+            root = Paths.get("").toAbsolutePath();
+            if (root.endsWith("logstash-core")) root = root.getParent();
+        } else {
+            root = Paths.get(System.getProperty("logstash.root.dir")).toAbsolutePath();
+        }
+
+        if (!root.resolve("versions.yml").toFile().exists()) {
+            throw new AssertionError("versions.yml not found is logstash root dir: " + root);
+        }
+        LS_HOME = root;
+
+        initializeGlobalRuntime(LS_HOME);
+    }
+
+    static Ruby initializeGlobalRuntime(final Path currentDir) {
+        String[] args = new String[] { "--disable-did_you_mean" };
+        Ruby runtime = Ruby.newInstance(Logstash.initRubyConfig(LS_HOME, currentDir, args));
+        if (runtime != RubyUtil.RUBY) throw new AssertionError("runtime already initialized. perhaps a Test class isn't subclassing RubyTestBase as it should?");
+        return runtime;
+    }
+
+}
diff --git a/logstash-core/src/test/java/org/logstash/RubyfierTest.java b/logstash-core/src/test/java/org/logstash/RubyfierTest.java
index 43f8c4b1fdc..84921aeac8a 100644
--- a/logstash-core/src/test/java/org/logstash/RubyfierTest.java
+++ b/logstash-core/src/test/java/org/logstash/RubyfierTest.java
@@ -41,7 +41,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class RubyfierTest {
+public class RubyfierTest extends RubyTestBase {
 
     @Test
     public void testDeepWithString() {
diff --git a/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java b/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
index 7930837f29a..1e664c5d064 100644
--- a/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
+++ b/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
@@ -33,7 +33,8 @@
 import static org.junit.Assert.*;
 
 
-public class StringInterpolationTest {
+public class StringInterpolationTest extends RubyTestBase {
+
     @Test
     public void testCompletelyStaticTemplate() throws IOException {
         Event event = getTestEvent();
diff --git a/logstash-core/src/test/java/org/logstash/ValuefierTest.java b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
index 58982bca2bb..e4259d50bc1 100644
--- a/logstash-core/src/test/java/org/logstash/ValuefierTest.java
+++ b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
@@ -41,7 +41,8 @@
 
 import static junit.framework.TestCase.assertEquals;
 
-public class ValuefierTest {
+public class ValuefierTest extends RubyTestBase {
+
     @Test
     public void testMapJavaProxy() {
         Map<IRubyObject, IRubyObject> map = new HashMap<>();
diff --git a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
index 5209dfb7b46..ad35a9ef46a 100644
--- a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueWriterTest.java
@@ -36,13 +36,11 @@
 import org.logstash.DLQEntry;
 import org.logstash.Event;
 import org.logstash.LockException;
-import org.logstash.Timestamp;
 
 import static junit.framework.TestCase.assertFalse;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.core.IsNull.nullValue;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.logstash.common.io.RecordIOWriter.BLOCK_SIZE;
@@ -140,10 +138,10 @@ public void testDoesNotWriteBeyondLimit() throws Exception {
                 writer.writeEntry(entry);
 
             // Sleep to allow flush to happen
-            Thread.sleep(2000);
+            sleep(3000);
             assertThat(dlqLength(), is(MAX_QUEUE_LENGTH));
             writer.writeEntry(entry);
-            Thread.sleep(2000);
+            sleep(2000);
             assertThat(dlqLength(), is(MAX_QUEUE_LENGTH));
         }
     }
@@ -155,9 +153,9 @@ public void testSlowFlush() throws Exception {
             writer.writeEntry(entry);
             entry = new DLQEntry(new Event(), "type", "id", "2");
             // Sleep to allow flush to happen\
-            Thread.sleep(2000);
+            sleep(3000);
             writer.writeEntry(entry);
-            Thread.sleep(2000);
+            sleep(2000);
             // Do not close here - make sure that the slow write is processed
 
             try (DeadLetterQueueReader reader = new DeadLetterQueueReader(dir)) {
@@ -200,6 +198,11 @@ public void testCloseFlush() throws Exception {
         }
     }
 
+    private void sleep(long millis) throws InterruptedException {
+        Thread.sleep(millis);
+        Thread.yield();
+    }
+
     private long dlqLength() throws IOException {
         try(final Stream<Path> files = Files.list(dir)) {
             return files.filter(p -> p.toString().endsWith(".log"))
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
index c29622d4309..1d540876f4b 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
@@ -21,16 +21,14 @@
 package org.logstash.config.ir;
 
 import java.nio.file.Path;
-import java.nio.file.Paths;
+
 import org.jruby.RubyHash;
-import org.jruby.runtime.builtin.IRubyObject;
 import org.jruby.runtime.load.LoadService;
 import org.junit.BeforeClass;
+import org.logstash.RubyTestBase;
 import org.logstash.RubyUtil;
 
-import static org.logstash.RubyUtil.RUBY;
-
-public abstract class RubyEnvTestCase {
+public abstract class RubyEnvTestCase extends RubyTestBase {
 
     @BeforeClass
     public static void before() {
@@ -44,15 +42,14 @@ public static void before() {
     private static void ensureLoadpath() {
         final LoadService loader = RubyUtil.RUBY.getLoadService();
         if (loader.findFileForLoad("logstash/compiler").library == null) {
+            final String gems = LS_HOME.
+                    resolve("vendor").resolve("bundle").resolve("jruby").resolve("2.5.0").
+                    toFile().getAbsolutePath();
             final RubyHash environment = RubyUtil.RUBY.getENV();
-            final Path root = Paths.get(
-                System.getProperty("logstash.core.root.dir", "")
-            ).toAbsolutePath();
-            final String gems = root.getParent().resolve("vendor").resolve("bundle")
-                .resolve("jruby").resolve("2.5.0").toFile().getAbsolutePath();
             environment.put("GEM_HOME", gems);
             environment.put("GEM_PATH", gems);
-            loader.addPaths(root.resolve("lib").toFile().getAbsolutePath());
+            Path logstashCore = LS_HOME.resolve("logstash-core");
+            loader.addPaths(logstashCore.resolve("lib").toFile().getAbsolutePath());
         }
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/execution/ShutdownWatcherExtTest.java b/logstash-core/src/test/java/org/logstash/execution/ShutdownWatcherExtTest.java
index 8a22820b05d..0ddcd4fce17 100644
--- a/logstash-core/src/test/java/org/logstash/execution/ShutdownWatcherExtTest.java
+++ b/logstash-core/src/test/java/org/logstash/execution/ShutdownWatcherExtTest.java
@@ -32,13 +32,14 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Test;
+import org.logstash.RubyTestBase;
 import org.logstash.RubyUtil;
 
 /**
  * Tests for {@link ShutdownWatcherExt}.
  */
 @NotThreadSafe
-public final class ShutdownWatcherExtTest {
+public final class ShutdownWatcherExtTest extends RubyTestBase {
 
     @Test
     public void testShouldForceShutdown() throws InterruptedException {
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
index 533ab654af1..538d8695715 100644
--- a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
@@ -36,12 +36,13 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.logstash.ObjectMappers;
+import org.logstash.RubyTestBase;
 import org.logstash.RubyUtil;
 
 /**
  * Tests for {@link JrubyEventExtLibrary.RubyEvent}.
  */
-public final class JrubyEventExtLibraryTest {
+public final class JrubyEventExtLibraryTest extends RubyTestBase {
 
     @Test
     public void shouldSetJavaProxy() throws IOException {
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java
index c67877a5939..0af4dfdcd39 100644
--- a/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyMemoryReadClientExtTest.java
@@ -26,6 +26,7 @@
 import org.jruby.RubyHash;
 import org.jruby.runtime.ThreadContext;
 import org.junit.Test;
+import org.logstash.RubyTestBase;
 import org.logstash.execution.QueueBatch;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -34,7 +35,7 @@
 /**
  * Tests for {@link JrubyMemoryReadClientExt}.
  */
-public final class JrubyMemoryReadClientExtTest {
+public final class JrubyMemoryReadClientExtTest extends RubyTestBase {
 
     @Test
     public void testInflightBatchesTracking() throws InterruptedException, IOException {
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyTimestampExtLibraryTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyTimestampExtLibraryTest.java
index 4ad121d4bae..86a8b0f7ad7 100644
--- a/logstash-core/src/test/java/org/logstash/ext/JrubyTimestampExtLibraryTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyTimestampExtLibraryTest.java
@@ -30,13 +30,14 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Test;
+import org.logstash.RubyTestBase;
 import org.logstash.RubyUtil;
 import org.logstash.Timestamp;
 
 /**
  * Tests for {@link JrubyTimestampExtLibrary}.
  */
-public final class JrubyTimestampExtLibraryTest {
+public final class JrubyTimestampExtLibraryTest extends RubyTestBase {
 
     @Test
     public void testConstructorNew() {
@@ -63,10 +64,8 @@ public void testConstructorNow() {
     @Test
     public void testConstructFromRubyDateTime() {
         final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
-        final IRubyObject now =
-            context.runtime.evalScriptlet("require 'date'\nDateTime.now.to_time.utc");
-        final JrubyTimestampExtLibrary.RubyTimestamp t =
-            newRubyTimestamp(context, new IRubyObject[]{now});
+        final IRubyObject now = RubyTime.newTime(context.runtime, System.currentTimeMillis());
+        final JrubyTimestampExtLibrary.RubyTimestamp t = newRubyTimestamp(context, new IRubyObject[]{now});
         Assertions.assertThat(
             Math.abs(
                 t.ruby_time(context).to_f().getDoubleValue() - now.convertToFloat().getDoubleValue()
diff --git a/logstash-core/src/test/java/org/logstash/ext/TimestampTest.java b/logstash-core/src/test/java/org/logstash/ext/TimestampTest.java
index a85174d16cb..7fd5e72bf6c 100644
--- a/logstash-core/src/test/java/org/logstash/ext/TimestampTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/TimestampTest.java
@@ -21,13 +21,14 @@
 package org.logstash.ext;
 
 import org.junit.Test;
+import org.logstash.RubyTestBase;
 import org.logstash.RubyUtil;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class TimestampTest {
+public final class TimestampTest extends RubyTestBase {
 
     @Test
     public void testClone() {
diff --git a/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java b/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
index 67217d3dcbc..7ccf22bcd52 100644
--- a/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
+++ b/logstash-core/src/test/java/org/logstash/util/CloudSettingAuthTest.java
@@ -23,9 +23,11 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import org.logstash.RubyTestBase;
+
 import static org.junit.Assert.*;
 
-public class CloudSettingAuthTest {
+public class CloudSettingAuthTest extends RubyTestBase {
 
     @Rule
     public ExpectedException exceptionRule = ExpectedException.none();
diff --git a/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java b/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
index 118d6bd7b5f..808b439fb76 100644
--- a/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
+++ b/logstash-core/src/test/java/org/logstash/util/CloudSettingIdTest.java
@@ -24,9 +24,11 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import org.logstash.RubyTestBase;
+
 import static org.junit.Assert.*;
 
-public class CloudSettingIdTest {
+public class CloudSettingIdTest extends RubyTestBase {
 
     private String input = "foobar:dXMtZWFzdC0xLmF3cy5mb3VuZC5pbyRub3RhcmVhbCRpZGVudGlmaWVy";
     private CloudSettingId sut;
diff --git a/qa/integration/build.gradle b/qa/integration/build.gradle
index 004b74c9a8e..29649bca0ca 100644
--- a/qa/integration/build.gradle
+++ b/qa/integration/build.gradle
@@ -70,7 +70,8 @@ tasks.register("integrationTests", Test) {
   inputs.files fileTree("${projectDir}/framework")
   inputs.files fileTree("${projectDir}/fixtures")
   inputs.files fileTree("${projectDir}/specs")
-  systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+
+  systemProperty 'logstash.root.dir', projectDir.toPath().getParent().getParent().toString()
   include '/org/logstash/integration/RSpecTests.class'
 
   outputs.upToDateWhen {
diff --git a/qa/integration/framework/fixture.rb b/qa/integration/framework/fixture.rb
index 008bb9cbdee..143fab3f71e 100644
--- a/qa/integration/framework/fixture.rb
+++ b/qa/integration/framework/fixture.rb
@@ -56,7 +56,7 @@ def config(node = "root", options = nil)
     end
 
     if options != nil
-       ERB.new(config, nil, "-").result(TemplateContext.new(options).get_binding)
+      ERB.new(config, nil, "-").result(TemplateContext.new(options).get_binding)
     else
       config
     end
@@ -66,16 +66,7 @@ def get_service(name)
     @service_locator.get_service(name)
   end
 
-  def output_equals_expected?
-    FileUtils.identical?(@actual_output, @input)
-  end
-
-  def output_exists?
-    File.exists?(@actual_output)
-  end
-
   def teardown
-    File.delete(@actual_output) if @settings.is_set?("actual_output") && output_exists?
     puts "Tearing down services"
     services = @settings.get("services")
     services.each do |name|
@@ -87,7 +78,7 @@ def setup_services
     puts "Setting up services"
     services = @settings.get("services")
     services.each do |name|
-     @service_locator.get_service(name).setup
+      @service_locator.get_service(name).setup
     end
     if @settings.is_set?("setup_script")
       puts "Setting up test specific fixtures"
diff --git a/qa/integration/rspec.rb b/qa/integration/rspec.rb
index 5f62af9e32f..6b2740e5d8f 100644
--- a/qa/integration/rspec.rb
+++ b/qa/integration/rspec.rb
@@ -23,10 +23,15 @@
     ::File.join(__FILE__, "..", "..", "..", "build", "qa", "integration", "vendor", "jruby", "2.5.0")
 )
 
+::Gem.paths = ENV
+
 require "bundler"
 ::Bundler.setup
 
-require "rspec/core"
 require "rspec"
+require "rspec/core"
+
+RSpec.clear_examples
+
 
 return RSpec::Core::Runner.run($JUNIT_ARGV).to_i
diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index 2600e6525b8..aa4ff659d13 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -154,7 +154,7 @@ def build_child_process(*args)
       args << feature_config_dir
       puts "Found feature flag. Starting LS using --path.settings #{feature_config_dir}"
     end
-    puts "Starting Logstash: #{@logstash_bin} #{args}"
+    puts "Starting Logstash: #{@logstash_bin} #{args} (pwd: #{Dir.pwd})"
     ChildProcess.build(@logstash_bin, *args)
   end
 
diff --git a/qa/integration/specs/kafka_input_spec.rb b/qa/integration/specs/kafka_input_spec.rb
index 315b45efabc..fdd43d6cf11 100644
--- a/qa/integration/specs/kafka_input_spec.rb
+++ b/qa/integration/specs/kafka_input_spec.rb
@@ -25,27 +25,40 @@
   let(:num_retries) { 60 }
   let(:num_events) { 37 }
 
-  before(:all) {
+  before(:all) do
     @fixture = Fixture.new(__FILE__)
-  }
+  end
 
-  after(:all) {
+  after(:all) do
     @fixture.teardown unless @fixture.nil?
-  }
+  end
+
+  let(:logstash_service) do
+    @fixture.get_service("logstash")
+  end
+
+  let(:file_output_path) do
+    # output { file { path => "..." } } is LS_HOME relative
+    File.join(logstash_service.logstash_home, @fixture.actual_output)
+  end
+
+  before do
+    logstash_service.start_background(@fixture.config)
+    sleep(0.5)
+  end
+
+  after do
+    File.delete(file_output_path) if File.exists?(file_output_path)
+  end
 
   it "can ingest 37 apache log lines from Kafka broker" do
-    unless @fixture.nil?
-      logstash_service = @fixture.get_service("logstash")
-      logstash_service.start_background(@fixture.config)
-
-      try(num_retries) do
-        expect(@fixture.output_exists?).to be true
-      end
-
-      try(num_retries) do
-        count = File.foreach(@fixture.actual_output).inject(0) {|c, _| c+1}
-        expect(count).to eq(num_events)
-      end
+    try(num_retries) do
+      expect(File).to exist(file_output_path), "output file: #{file_output_path} does not exist"
+    end
+
+    try(num_retries) do
+      count = File.foreach(file_output_path).inject(0) {|c, _| c+1}
+      expect(count).to eq(num_events)
     end
   end
 end
diff --git a/qa/integration/src/test/java/org/logstash/integration/RSpecTests.java b/qa/integration/src/test/java/org/logstash/integration/RSpecTests.java
index edc5f1602b0..05a9671f7e1 100644
--- a/qa/integration/src/test/java/org/logstash/integration/RSpecTests.java
+++ b/qa/integration/src/test/java/org/logstash/integration/RSpecTests.java
@@ -25,9 +25,12 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Arrays;
+
+import org.jruby.Ruby;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Assert;
 import org.junit.Test;
+import org.logstash.Logstash;
 import org.logstash.RubyUtil;
 import org.logstash.Rubyfier;
 
@@ -36,6 +39,30 @@
  */
 public final class RSpecTests {
 
+    static {
+        Path root;
+        if (System.getProperty("logstash.root.dir") == null) {
+            // make sure we work from IDE as well as when run with Gradle
+            root = Paths.get("").toAbsolutePath(); // LS_HOME/qa/integration
+            if (root.endsWith("integration")) root = root.getParent().getParent();
+        } else {
+            root = Paths.get(System.getProperty("logstash.root.dir")).toAbsolutePath();
+        }
+
+        if (!root.resolve("versions.yml").toFile().exists()) {
+            throw new AssertionError("versions.yml not found is logstash root dir: " + root);
+        }
+
+        initializeGlobalRuntime(root);
+    }
+
+    private static Ruby initializeGlobalRuntime(final Path root) {
+        String[] args = new String[] { "--disable-did_you_mean" };
+        Ruby runtime = Ruby.newInstance(Logstash.initRubyConfig(root, null /* qa/integration */, args));
+        if (runtime != RubyUtil.RUBY) throw new AssertionError("runtime already initialized");
+        return runtime;
+    }
+
     @Test
     public void rspecTests() throws Exception {
         RubyUtil.RUBY.getGlobalVariables().set(
@@ -43,7 +70,7 @@ public void rspecTests() throws Exception {
                 "-fd", "--pattern", System.getProperty("org.logstash.integration.specs", "specs/**/*_spec.rb")
             ))
         );
-        final Path rspec = Paths.get("rspec.rb");
+        final Path rspec = Paths.get("rspec.rb"); // qa/integration/rspec.rb
         final IRubyObject result = RubyUtil.RUBY.executeScript(
             new String(Files.readAllBytes(rspec), StandardCharsets.UTF_8),
             rspec.toFile().getAbsolutePath()
diff --git a/tools/dependencies-report/src/main/resources/licenseMapping.csv b/tools/dependencies-report/src/main/resources/licenseMapping.csv
index 08eb48b72fe..00944eb568f 100644
--- a/tools/dependencies-report/src/main/resources/licenseMapping.csv
+++ b/tools/dependencies-report/src/main/resources/licenseMapping.csv
@@ -122,7 +122,7 @@ dependency,dependencyUrl,licenseOverride,copyright,sourceURL
 "org.eclipse.osgi:org.eclipse.osgi:",http://www.eclipse.org/jdt,EPL-1.0
 "org.eclipse.text:org.eclipse.text:",http://www.eclipse.org/jdt,EPL-1.0
 "org.javassist:javassist:",https://github.com/jboss-javassist/javassist,Apache-2.0
-"org.jruby:jruby-complete:",http://jruby.org/,EPL-2.0
+"org.jruby:jruby-core:",http://jruby.org/,EPL-2.0
 "org.reflections:reflections:",https://github.com/ronmamo/reflections,BSD-2-Clause
 "org.slf4j:slf4j-api:",http://www.slf4j.org/,MIT
 "paquet:",https://github.com/elastic/logstash,Apache-2.0
diff --git a/tools/dependencies-report/src/main/resources/notices/org.jruby!jruby-complete-NOTICE.txt b/tools/dependencies-report/src/main/resources/notices/org.jruby!jruby-core-NOTICE.txt
similarity index 100%
rename from tools/dependencies-report/src/main/resources/notices/org.jruby!jruby-complete-NOTICE.txt
rename to tools/dependencies-report/src/main/resources/notices/org.jruby!jruby-core-NOTICE.txt
diff --git a/versions.yml b/versions.yml
index 0669a542e7c..421415a94da 100644
--- a/versions.yml
+++ b/versions.yml
@@ -16,12 +16,10 @@ jruby:
   version: 9.2.20.1
   sha1: 7f45f8a3d53d5f19f69952014abcb542b2670846
 
-# jruby-runtime-override, if specified, will override the jruby version installed in vendor/jruby for logstash runtime only,
-# not for the compile-time jars
-#
+# jruby-runtime-override, if specified, will override the jruby version installed in vendor/jruby
 #jruby-runtime-override:
-#  url: http://ci.jruby.org/snapshots/previous/jruby-bin-9.2.0.0-SNAPSHOT.tar.gz
-#  version: 9.2.0.0-SNAPSHOT
+#  url: https://oss.sonatype.org/content/repositories/snapshots/org/jruby/jruby-dist/9.3.0.0-SNAPSHOT/jruby-dist-9.3.0.0-20210723.214927-259-bin.tar.gz
+#  version: 9.3.0.0-SNAPSHOT
 #  sha1: IGNORE
 
 # Note: this file is copied to the root of logstash-core because its gemspec needs it when
diff --git a/x-pack/build.gradle b/x-pack/build.gradle
index 8abc0114651..9aeb4515d32 100644
--- a/x-pack/build.gradle
+++ b/x-pack/build.gradle
@@ -47,7 +47,7 @@ tasks.register("rubyTests", Test) {
   inputs.files fileTree("${projectDir}/spec")
   inputs.files fileTree("${projectDir}/lib")
   inputs.files fileTree("${projectDir}/modules")
-  systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+  systemProperty 'logstash.root.dir', projectDir.parent
   include '/org/logstash/xpack/test/RSpecTests.class'
 }
 
@@ -59,6 +59,6 @@ tasks.register("rubyIntegrationTests", Test) {
   inputs.files fileTree("${projectDir}/qa")
   inputs.files fileTree("${projectDir}/lib")
   inputs.files fileTree("${projectDir}/modules")
-  systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+  systemProperty 'logstash.root.dir', projectDir.parent
   include '/org/logstash/xpack/test/RSpecIntegrationTests.class'
 }
diff --git a/x-pack/src/test/java/org/logstash/xpack/test/RSpecIntegrationTests.java b/x-pack/src/test/java/org/logstash/xpack/test/RSpecIntegrationTests.java
index d11d143c34b..c62f29f17a0 100644
--- a/x-pack/src/test/java/org/logstash/xpack/test/RSpecIntegrationTests.java
+++ b/x-pack/src/test/java/org/logstash/xpack/test/RSpecIntegrationTests.java
@@ -7,35 +7,22 @@
 
 package org.logstash.xpack.test;
 
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.Arrays;
-import org.jruby.runtime.builtin.IRubyObject;
-import org.junit.Assert;
 import org.junit.Test;
-import org.logstash.RubyUtil;
-import org.logstash.Rubyfier;
 
-public final class RSpecIntegrationTests {
+import java.util.Arrays;
+import java.util.List;
+
+public class RSpecIntegrationTests extends RSpecTests {
+
+    @Override
+    protected List<String> rspecArgs() {
+        return Arrays.asList("-fd", "qa/integration");
+    }
+
     @Test
+    @Override
     public void rspecTests() throws Exception {
-        RubyUtil.RUBY.getENV().put("IS_JUNIT_RUN", "true");
-        RubyUtil.RUBY.getGlobalVariables().set(
-            "$JUNIT_ARGV", Rubyfier.deep(RubyUtil.RUBY, Arrays.asList(
-                "-fd", "qa/integration"
-            ))
-        );
-        final Path rspec = Paths.get(
-            org.assertj.core.util.Files.currentFolder().getParent(), "lib/bootstrap/rspec.rb"
-        );
-        final IRubyObject result = RubyUtil.RUBY.executeScript(
-            new String(Files.readAllBytes(rspec), StandardCharsets.UTF_8),
-            rspec.toFile().getAbsolutePath()
-        );
-        if (!result.toJava(Long.class).equals(0L)) {
-            Assert.fail("RSpec test suit saw at least one failure.");
-        }
+        super.rspecTests();
     }
+
 }
diff --git a/x-pack/src/test/java/org/logstash/xpack/test/RSpecTests.java b/x-pack/src/test/java/org/logstash/xpack/test/RSpecTests.java
index 2e78e3cf549..1012f1e1a30 100644
--- a/x-pack/src/test/java/org/logstash/xpack/test/RSpecTests.java
+++ b/x-pack/src/test/java/org/logstash/xpack/test/RSpecTests.java
@@ -12,24 +12,57 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Arrays;
+import java.util.List;
+
+import org.jruby.Ruby;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.Assert;
 import org.junit.Test;
+
+import org.logstash.Logstash;
 import org.logstash.RubyUtil;
 import org.logstash.Rubyfier;
 
-public final class RSpecTests {
+public class RSpecTests {
+
+    static final Path LS_HOME;
+
+    static {
+        Path root;
+        if (System.getProperty("logstash.root.dir") == null) {
+            // make sure we work from IDE as well as when run with Gradle
+            root = Paths.get("").toAbsolutePath(); // LS_HOME/x-pack
+            if (root.endsWith("x-pack")) root = root.getParent();
+        } else {
+            root = Paths.get(System.getProperty("logstash.root.dir")).toAbsolutePath();
+        }
+
+        if (!root.resolve("versions.yml").toFile().exists()) {
+            throw new AssertionError("versions.yml not found is logstash root dir: " + root);
+        }
+        LS_HOME = root;
+
+        initializeGlobalRuntime(root);
+    }
+
+    private static Ruby initializeGlobalRuntime(final Path root) {
+        String[] args = new String[] { "--disable-did_you_mean" };
+        Ruby runtime = Ruby.newInstance(Logstash.initRubyConfig(root, null /* qa/integration */, args));
+        if (runtime != RubyUtil.RUBY) throw new AssertionError("runtime already initialized");
+        return runtime;
+    }
+
+    protected List<String> rspecArgs() {
+        return Arrays.asList("-fd", "--pattern", "spec/**/*_spec.rb");
+    }
+
     @Test
     public void rspecTests() throws Exception {
         RubyUtil.RUBY.getENV().put("IS_JUNIT_RUN", "true");
         RubyUtil.RUBY.getGlobalVariables().set(
-            "$JUNIT_ARGV", Rubyfier.deep(RubyUtil.RUBY, Arrays.asList(
-                "-fd", "--pattern", "spec/**/*_spec.rb"
-            ))
-        );
-        final Path rspec = Paths.get(
-            org.assertj.core.util.Files.currentFolder().getParent(), "lib/bootstrap/rspec.rb"
+            "$JUNIT_ARGV", Rubyfier.deep(RubyUtil.RUBY, rspecArgs())
         );
+        final Path rspec = LS_HOME.resolve("lib").resolve("bootstrap").resolve("rspec.rb");
         final IRubyObject result = RubyUtil.RUBY.executeScript(
             new String(Files.readAllBytes(rspec), StandardCharsets.UTF_8),
             rspec.toFile().getAbsolutePath()
