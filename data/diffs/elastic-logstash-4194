diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 1f307c61838..13debe50786 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -3,19 +3,29 @@
 require "logstash/errors"
 require "logstash/config/cpu_core_strategy"
 require "logstash/pipeline"
+require "logstash/config/loader"
 require "uri"
 require "stud/trap"
 
 LogStash::Environment.load_locale!
 
 class LogStash::Agent
+  attr_reader :logger
 
-  attr_writer :logger
-
-  def initialize
+  def initialize(logger)
+    @logger = logger
     @pipelines = {}
   end
 
+  def config_valid?(config_str)
+    begin
+      # There should be a better way to test this ideally
+      LogStash::Pipeline.new(config_str)
+    rescue Exception => e
+      e
+    end
+  end
+
   def execute
     # Make SIGINT/SIGTERM shutdown the pipeline.
     sigint_id = trap_sigint()
diff --git a/logstash-core/lib/logstash/agent_plugin_registry.rb b/logstash-core/lib/logstash/agent_plugin_registry.rb
new file mode 100644
index 00000000000..d7fb95f1ccf
--- /dev/null
+++ b/logstash-core/lib/logstash/agent_plugin_registry.rb
@@ -0,0 +1,66 @@
+# encoding: utf-8
+require "logstash/agent"
+
+module LogStash module AgentPluginRegistry
+  DEFAULT_AGENT_NAME = :default
+  class DuplicatePluginError < Error; end
+
+  REGISTRY = {}
+
+  # Reset plugin registry to just the default plugin
+  def self.reset!
+    REGISTRY.clear
+    REGISTRY[DEFAULT_AGENT_NAME] = LogStash::Agent
+  end
+  # Just have the defaults when the process starts
+  reset!
+
+  # Search gems for available plugins and load their libs
+  def self.load_all
+    find_plugins.each do |plugin|
+      name = plugin.name.split('-')[-1]
+      require "logstash/agents/#{name}"
+    end
+  end
+
+  # Return a list of Gem::Specification s that start with logstash-agent-
+  def self.find_plugins
+    ::Gem::Specification.find_all{|spec| spec.name =~ /logstash-agent-/ }
+  end
+
+  # To be called by a plugin when its class is first loaded
+  # Plugins should call this with the following code:
+  #
+  # require 'lib/logstash/agent_plugin_registry'
+  #
+  # class MyLogStashAgent < LogStash::Agent
+  #   LogStash::AgentPluginRegistry.register(:my_logstash_agent, self)
+  #
+  #   # ...
+  # end
+  def self.register(name, plugin_class)
+    name_sym = name.to_sym
+
+    if (conflicting_class = registry[name_sym])
+      raise DuplicatePluginError, "Could not register plugin '#{plugin_class}'" <<
+        " as '#{name}', this name is already taken by '#{conflicting_class}'"
+    end
+
+    registry[name_sym] = plugin_class
+  end
+
+  # A hash of plugin names to plugin classes
+  def self.registry
+    REGISTRY
+  end
+
+  # Get a plugin by name
+  def self.lookup(name)
+    registry[name.to_sym]
+  end
+
+  # List of available plugins
+  def self.available
+    registry.keys
+  end
+end end
diff --git a/logstash-core/lib/logstash/config/defaults.rb b/logstash-core/lib/logstash/config/defaults.rb
index ac3466f771d..c0c18fd7c04 100644
--- a/logstash-core/lib/logstash/config/defaults.rb
+++ b/logstash-core/lib/logstash/config/defaults.rb
@@ -6,6 +6,14 @@ module LogStash module Config module Defaults
 
   extend self
 
+  def input
+    "input { stdin { type => stdin } }"
+  end
+
+  def output
+    "output { stdout { codec => rubydebug } }"
+  end
+
   def cpu_cores
     Concurrent.processor_count
   end
diff --git a/logstash-core/lib/logstash/config/loader.rb b/logstash-core/lib/logstash/config/loader.rb
new file mode 100644
index 00000000000..e1f34661645
--- /dev/null
+++ b/logstash-core/lib/logstash/config/loader.rb
@@ -0,0 +1,99 @@
+require "logstash/config/defaults"
+
+module LogStash; module Config; class Loader
+  def initialize(logger, is_config_test)
+    @logger = logger
+    @is_config_test = is_config_test
+  end
+
+  def config_test?
+    !!@is_config_test
+  end
+
+  def format_config(config_path, config_string)
+    config_string = config_string.to_s
+    if config_path
+      # Append the config string.
+      # This allows users to provide both -f and -e flags. The combination
+      # is rare, but useful for debugging.
+      config_string = config_string + load_config(config_path)
+    else
+      # include a default stdin input if no inputs given
+      if config_string !~ /input *{/
+        config_string += LogStash::Config::Defaults.input
+      end
+      # include a default stdout output if no outputs given
+      if config_string !~ /output *{/
+        config_string += LogStash::Config::Defaults.output
+      end
+    end
+    config_string
+  end
+
+  def load_config(path)
+    begin
+      uri = URI.parse(path)
+
+      case uri.scheme
+      when nil then
+        local_config(path)
+      when /http/ then
+        fetch_config(uri)
+      when "file" then
+        local_config(uri.path)
+      else
+        fail(I18n.t("logstash.runner.configuration.scheme-not-supported", :path => path))
+      end
+    rescue URI::InvalidURIError
+      # fallback for windows.
+      # if the parsing of the file failed we assume we can reach it locally.
+      # some relative path on windows arent parsed correctly (.\logstash.conf)
+      local_config(path)
+    end
+  end
+
+  def local_config(path)
+    path = ::File.expand_path(path)
+    path = ::File.join(path, "*") if ::File.directory?(path)
+
+    if Dir.glob(path).length == 0
+      fail(I18n.t("logstash.runner.configuration.file-not-found", :path => path))
+    end
+
+    config = ""
+    encoding_issue_files = []
+    Dir.glob(path).sort.each do |file|
+      next unless ::File.file?(file)
+      if file.match(/~$/)
+        @logger.debug("NOT reading config file because it is a temp file", :config_file => file)
+        next
+      end
+      @logger.debug("Reading config file", :config_file => file)
+      cfg = ::File.read(file)
+      if !cfg.ascii_only? && !cfg.valid_encoding?
+        encoding_issue_files << file
+      end
+      config << cfg + "\n"
+      if config_test?
+        @logger.debug? && @logger.debug("\nThe following is the content of a file", :config_file => file.to_s)
+        @logger.debug? && @logger.debug("\n" + cfg + "\n\n")
+      end
+    end
+    if encoding_issue_files.any?
+      fail("The following config files contains non-ascii characters but are not UTF-8 encoded #{encoding_issue_files}")
+    end
+    if config_test?
+      @logger.debug? && @logger.debug("\nThe following is the merged configuration")
+      @logger.debug? && @logger.debug("\n" + config + "\n\n")
+    end
+    return config
+  end # def load_config
+
+  def fetch_config(uri)
+    begin
+      Net::HTTP.get(uri) + "\n"
+    rescue Exception => e
+      fail(I18n.t("logstash.runner.configuration.fetch-failed", :path => uri.to_s, :message => e.message))
+    end
+  end
+end end end
\ No newline at end of file
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index ee9c0dceb61..f0bb1d3866d 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -10,12 +10,12 @@
 LogStash::Environment.load_locale!
 
 require "logstash/namespace"
+require "logstash/agent_plugin_registry"
 require "logstash/agent"
+require "logstash/config/defaults"
 
 class LogStash::Runner < Clamp::Command
-
-  DEFAULT_INPUT = "input { stdin { type => stdin } }"
-  DEFAULT_OUTPUT = "output { stdout { codec => rubydebug } }"
+  class MissingAgentError < StandardError; end # Raised when the user asks for an agent plugin that doesn't exist
 
   option ["-f", "--config"], "CONFIG_PATH",
     I18n.t("logstash.runner.flag.config"),
@@ -23,7 +23,8 @@ class LogStash::Runner < Clamp::Command
 
   option "-e", "CONFIG_STRING",
     I18n.t("logstash.runner.flag.config-string",
-           :default_input => DEFAULT_INPUT, :default_output => DEFAULT_OUTPUT),
+           :default_input => LogStash::Config::Defaults.input,
+           :default_output => LogStash::Config::Defaults.output),
     :default => "", :attribute_name => :config_string
 
   option ["-w", "--filterworkers"], "COUNT",
@@ -65,10 +66,15 @@ class LogStash::Runner < Clamp::Command
     I18n.t("logstash.runner.flag.rubyshell"),
     :attribute_name => :ruby_shell
 
+  option ["-a", "--agent"], "AGENT",
+    I18n.t("logstash.runner.flag.agent"),
+    :attribute_name => :agent_name, :default => LogStash::AgentPluginRegistry::DEFAULT_AGENT_NAME
+
   attr_reader :agent
 
   def initialize(*args)
-    @agent = LogStash::Agent.new
+    LogStash::AgentPluginRegistry.load_all
+    @logger = Cabin::Channel.get(LogStash)
     super(*args)
   end
 
@@ -78,8 +84,6 @@ def execute
     require "stud/task"
     require "cabin" # gem 'cabin'
 
-    @logger = Cabin::Channel.get(LogStash)
-
     LogStash::Util::set_thread_name(self.class.name)
 
     if RUBY_VERSION < "1.9.2"
@@ -102,19 +106,31 @@ def execute
 
     return start_shell(@ruby_shell, binding) if @ruby_shell
 
-    if @config_string.nil? && @config_path.nil?
-      fail(I18n.t("logstash.runner.missing-configuration"))
+    @agent = create_agent
+    if !@agent
+      @logger.fatal("Could not load specified agent",
+                    :agent_name => agent_name,
+                    :valid_agent_names => LogStash::AgentPluginRegistry.available.map(&:to_s))
+      return 1
     end
 
-    @agent.logger = @logger
-
-    config_string = format_config(@config_path, @config_string)
+    if (config_string.nil? || config_string.empty?) && config_path.nil?
+      fail(I18n.t("logstash.runner.missing-configuration"))
+    end
 
-    @agent.add_pipeline("base", config_string, :filter_workers => filter_workers)
+    config_loader = LogStash::Config::Loader.new(@logger, config_test?)
+    config_str = config_loader.format_config(config_path, config_string)
 
     if config_test?
-      puts "Configuration OK"
+      config_error = @agent.config_valid?(config_str)
+      if config_error
+        @logger.fatal I18n.t("logstash.error", :error => config_error)
+        return 1
+      else
+        @logger.terminal "Configuration OK"
+      end
     else
+      @agent.add_pipeline("base", config_str, :filter_workers => filter_workers)
       task = Stud::Task.new { @agent.execute }
       return task.wait
     end
@@ -122,10 +138,8 @@ def execute
   rescue LoadError => e
     fail("Configuration problem.")
   rescue LogStash::ConfigurationError => e
+    @logger.warn I18n.t("logstash.runner.configtest-flag-information")
     @logger.fatal I18n.t("logstash.error", :error => e)
-    if !config_test?
-      @logger.warn I18n.t("logstash.runner.configtest-flag-information")
-    end
     show_short_help
     return 1
   rescue => e
@@ -184,6 +198,14 @@ def configure_plugin_paths(paths)
     end
   end
 
+  def create_agent
+    agent_class = LogStash::AgentPluginRegistry.lookup(agent_name)
+
+
+    @logger.info("Creating new agent", :class => agent_class)
+    agent_class ? agent_class.new(@logger) : nil
+  end
+
   # Point logging at a specific path.
   def configure_logging(path)
     # Set with the -v (or -vv...) flag
@@ -231,93 +253,6 @@ def configure_logging(path)
     # http://jira.codehaus.org/browse/JRUBY-7003
   end # def configure_logging
 
-  def format_config(config_path, config_string)
-    config_string = config_string.to_s
-    if config_path
-      # Append the config string.
-      # This allows users to provide both -f and -e flags. The combination
-      # is rare, but useful for debugging.
-      config_string = config_string + load_config(config_path)
-    else
-      # include a default stdin input if no inputs given
-      if config_string !~ /input *{/
-        config_string += DEFAULT_INPUT
-      end
-      # include a default stdout output if no outputs given
-      if config_string !~ /output *{/
-        config_string += DEFAULT_OUTPUT
-      end
-    end
-    config_string
-  end
-
-  def load_config(path)
-    begin
-      uri = URI.parse(path)
-
-      case uri.scheme
-      when nil then
-        local_config(path)
-      when /http/ then
-        fetch_config(uri)
-      when "file" then
-        local_config(uri.path)
-      else
-        fail(I18n.t("logstash.runner.configuration.scheme-not-supported", :path => path))
-      end
-    rescue URI::InvalidURIError
-      # fallback for windows.
-      # if the parsing of the file failed we assume we can reach it locally.
-      # some relative path on windows arent parsed correctly (.\logstash.conf)
-      local_config(path)
-    end
-  end
-
-  def local_config(path)
-    path = File.expand_path(path)
-    path = File.join(path, "*") if File.directory?(path)
-
-    if Dir.glob(path).length == 0
-      fail(I18n.t("logstash.runner.configuration.file-not-found", :path => path))
-    end
-
-    config = ""
-    encoding_issue_files = []
-    Dir.glob(path).sort.each do |file|
-      next unless File.file?(file)
-      if file.match(/~$/)
-        @logger.debug("NOT reading config file because it is a temp file", :config_file => file)
-        next
-      end
-      @logger.debug("Reading config file", :config_file => file)
-      cfg = File.read(file)
-      if !cfg.ascii_only? && !cfg.valid_encoding?
-        encoding_issue_files << file
-      end
-      config << cfg + "\n"
-      if config_test?
-        @logger.debug? && @logger.debug("\nThe following is the content of a file", :config_file => file.to_s)
-        @logger.debug? && @logger.debug("\n" + cfg + "\n\n")
-      end
-    end
-    if (encoding_issue_files.any?)
-      fail("The following config files contains non-ascii characters but are not UTF-8 encoded #{encoding_issue_files}")
-    end
-    if config_test?
-      @logger.debug? && @logger.debug("\nThe following is the merged configuration")
-      @logger.debug? && @logger.debug("\n" + config + "\n\n")
-    end
-    return config
-  end # def load_config
-
-  def fetch_config(uri)
-    begin
-      Net::HTTP.get(uri) + "\n"
-    rescue Exception => e
-      fail(I18n.t("logstash.runner.configuration.fetch-failed", :path => uri.to_s, :message => e.message))
-    end
-  end
-
   # Emit a failure message and abort.
   def fail(message)
     raise LogStash::ConfigurationError, message
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 1b2ce1dd51c..add62790e95 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -204,3 +204,5 @@ en:
         rubyshell: |+
           Drop to shell instead of running as normal.
           Valid shells are "irb" and "pry"
+        agent: |+
+          Specify an alternate agent plugin name.
\ No newline at end of file
diff --git a/logstash-core/spec/logstash/agent_plugin_registry_spec.rb b/logstash-core/spec/logstash/agent_plugin_registry_spec.rb
new file mode 100644
index 00000000000..79ad5816410
--- /dev/null
+++ b/logstash-core/spec/logstash/agent_plugin_registry_spec.rb
@@ -0,0 +1,43 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/runner"
+require "stud/task"
+
+describe LogStash::AgentPluginRegistry do
+  class TestAgent < LogStash::Agent; end
+  class TestAgent2 < LogStash::Agent; end
+
+  subject { described_class }
+
+  after(:each) do
+    LogStash::AgentPluginRegistry.reset!
+  end
+
+  describe "the default registry with no registered plugins" do
+    it "should have the default agent" do
+      expect(subject.lookup(LogStash::AgentPluginRegistry::DEFAULT_AGENT_NAME)).to eql(LogStash::Agent)
+    end
+
+    it "should only have one plugin registered" do
+      expect(subject.available.size).to eql(1)
+    end
+
+    it "should be able to register an additional plugin" do
+      subject.register(:foo, TestAgent)
+      expect(subject.lookup(:foo)).to eql(TestAgent)
+    end
+
+    context "with two plugins under the same name" do
+      before do
+        subject.register(:foo, TestAgent)
+      end
+
+      it "should not allow the second plugin to be registered" do
+        expect do
+          subject.register(:foo, TestAgent2)
+        end.to raise_error(LogStash::AgentPluginRegistry::DuplicatePluginError)
+      end
+    end
+  end
+
+end
diff --git a/logstash-core/spec/logstash/config/loader_spec.rb b/logstash-core/spec/logstash/config/loader_spec.rb
new file mode 100644
index 00000000000..cc5fba037ca
--- /dev/null
+++ b/logstash-core/spec/logstash/config/loader_spec.rb
@@ -0,0 +1,36 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/config/loader"
+
+describe LogStash::Config::Loader do
+  subject { described_class.new(Cabin::Channel.get, false) }
+  context "when local" do
+    before { expect(subject).to receive(:local_config).with(path) }
+
+    context "unix" do
+      let(:path) { './test.conf' }
+      it 'works with relative path' do
+        subject.load_config(path)
+      end
+    end
+
+    context "windows" do
+      let(:path) { '.\test.conf' }
+      it 'work with relative windows path' do
+        subject.load_config(path)
+      end
+    end
+  end
+
+  context "when remote" do
+    context 'supported scheme' do
+      let(:path) { "http://test.local/superconfig.conf" }
+      let(:dummy_config) { 'input {}' }
+
+      before { expect(Net::HTTP).to receive(:get) { dummy_config } }
+      it 'works with http' do
+        expect(subject.load_config(path)).to eq("#{dummy_config}\n")
+      end
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 3dec2c0e7ef..994fa57f7bd 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -17,15 +17,21 @@ def run(args); end
   end
 
   describe "argument parsing" do
-
     subject { LogStash::Runner.new("") }
     context "when -e is given" do
 
-      let(:args) { ["-e", ""] }
+      let(:args) { ["-e", "input {} output {}"] }
+      let(:agent) { double("agent") }
+      let(:agent_logger) { double("agent logger") }
+
+      before do
+        allow(agent).to receive(:logger=).with(anything)
+      end
 
       it "should execute the agent" do
-        expect(subject.agent).to receive(:add_pipeline).once
-        expect(subject.agent).to receive(:execute).once
+        expect(subject).to receive(:create_agent).and_return(agent)
+        expect(agent).to receive(:add_pipeline).once
+        expect(agent).to receive(:execute).once
         subject.run(args)
       end
     end
@@ -33,44 +39,28 @@ def run(args); end
     context "with no arguments" do
       let(:args) { [] }
       it "should show help" do
-        expect(subject).to receive(:show_short_help).once
-        expect(channel).to receive(:fatal).once
         expect(channel).to receive(:warn).once
+        expect(channel).to receive(:fatal).once
+        expect(subject).to receive(:show_short_help).once
         subject.run(args)
       end
     end
   end
 
-  context "when loading the configuration" do
+  context "--agent" do
+    class DummyAgent < LogStash::Agent; end
+
+    let(:agent_name) { "testagent" }
     subject { LogStash::Runner.new("") }
-    context "when local" do
-      before { expect(subject).to receive(:local_config).with(path) }
-
-      context "unix" do
-        let(:path) { './test.conf' }
-        it 'works with relative path' do
-          subject.load_config(path)
-        end
-      end
 
-      context "windows" do
-        let(:path) { '.\test.conf' }
-        it 'work with relative windows path' do
-          subject.load_config(path)
-        end
-      end
+    before do
+      LogStash::AgentPluginRegistry.register(agent_name, DummyAgent)
+      allow(subject).to receive(:execute) # stub this out to reduce test work/output
+      subject.run(["-a", "testagent", "-e" "input {} output {}"])
     end
 
-    context "when remote" do
-      context 'supported scheme' do
-        let(:path) { "http://test.local/superconfig.conf" }
-        let(:dummy_config) { 'input {}' }
-
-        before { expect(Net::HTTP).to receive(:get) { dummy_config } }
-        it 'works with http' do
-          expect(subject.load_config(path)).to eq("#{dummy_config}\n")
-        end
-      end
+    it "should set the proper agent" do
+      expect(subject.create_agent.class).to eql(DummyAgent)
     end
   end
 
