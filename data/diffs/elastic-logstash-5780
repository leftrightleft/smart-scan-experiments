diff --git a/docs/static/monitoring-apis.asciidoc b/docs/static/monitoring-apis.asciidoc
index 3c7ce70b98a..4ee5a54effb 100644
--- a/docs/static/monitoring-apis.asciidoc
+++ b/docs/static/monitoring-apis.asciidoc
@@ -110,7 +110,10 @@ Example response:
   "pipeline": {
     "workers": 8,
     "batch_size": 125,
-    "batch_delay": 5
+    "batch_delay": 5,
+    "config_reload_automatic": true,
+    "config_reload_interval": 3
+
   }
 --------------------------------------------------
 
@@ -491,7 +494,7 @@ Example of a human-readable response:
 ::: {}
 Hot threads at 2016-07-26T18:46:18-07:00, busiestThreads=3: 
 ================================================================================
- 0.15 % of of cpu usage by timed_waiting thread named 'LogStash::Runner'
+ 0.15 % of cpu usage by timed_waiting thread named 'LogStash::Runner'
 	java.lang.Object.wait(Native Method)
 	java.lang.Thread.join(Thread.java:1253)
 	org.jruby.internal.runtime.NativeThread.join(NativeThread.java:75)
@@ -503,7 +506,7 @@ Hot threads at 2016-07-26T18:46:18-07:00, busiestThreads=3:
 	org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:136)
 	org.jruby.ast.CallNoArgNode.interpret(CallNoArgNode.java:60)
  --------------------------------------------------------------------------------
- 0.11 % of of cpu usage by timed_waiting thread named 'Ruby-0-Thread-17'
+ 0.11 % of cpu usage by timed_waiting thread named 'Ruby-0-Thread-17'
  /Users/username/BuildTesting/logstash-5.0.0logstash-core/lib/logstash/pipeline.rb:471
 	java.lang.Object.wait(Native Method)
 	org.jruby.RubyThread.sleep(RubyThread.java:1002)
@@ -516,7 +519,7 @@ Hot threads at 2016-07-26T18:46:18-07:00, busiestThreads=3:
 	rubyjit.Module$$stoppable_sleep_c19c1639527ca7d373b5093f339d26538f1c21ef1028566121.__file__(/Users/username/BuildTesting/logstash-5.0.0/vendor/bundle/jruby/1.9/gems/stud-0.0.22/lib/stud/interval.rb)
 	org.jruby.ast.executable.AbstractScript.__file__(AbstractScript.java:46)
  --------------------------------------------------------------------------------
- 0.04 % of of cpu usage by timed_waiting thread named '[main]-pipeline-manager'
+ 0.04 % of cpu usage by timed_waiting thread named '[main]-pipeline-manager'
 	java.lang.Object.wait(Native Method)
 	java.lang.Thread.join(Thread.java:1253)
 	org.jruby.internal.runtime.NativeThread.join(NativeThread.java:75)
diff --git a/logstash-core/lib/logstash/api/commands/node.rb b/logstash-core/lib/logstash/api/commands/node.rb
index e27ecc3c954..816d6be8f8b 100644
--- a/logstash-core/lib/logstash/api/commands/node.rb
+++ b/logstash-core/lib/logstash/api/commands/node.rb
@@ -20,7 +20,7 @@ def all(selected_fields=[])
         def pipeline
           extract_metrics(
             [:stats, :pipelines, :main, :config],
-            :workers, :batch_size, :batch_delay
+            :workers, :batch_size, :batch_delay, :config_reload_automatic, :config_reload_interval
           )
         end
 
@@ -42,7 +42,7 @@ def jvm
             :vm_name => java.lang.System.getProperty("java.vm.name"),
             :vm_version => java.lang.System.getProperty("java.version"),
             :vm_vendor => java.lang.System.getProperty("java.vendor"),
-            :vm_name => java.lang.System.getProperty("java.vm.name"),            
+            :vm_name => java.lang.System.getProperty("java.vm.name"),
             :start_time_in_millis => started_at,
             :mem => {
               :heap_init_in_bytes => (memory_bean.getHeapMemoryUsage().getInit() < 0 ? 0 : memory_bean.getHeapMemoryUsage().getInit()),
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index d2bd7dddc13..ae8b6fa671f 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -87,7 +87,7 @@ def initialize(config_str, settings = LogStash::SETTINGS, namespaced_metric = ni
     queue = LogStash::Util::WrappedSynchronousQueue.new
     @input_queue_client = queue.write_client
     @filter_queue_client = queue.read_client
-    # Note that @infilght_batches as a central mechanism for tracking inflight
+    # Note that @inflight_batches as a central mechanism for tracking inflight
     # batches will fail if we have multiple read clients here.
     @filter_queue_client.set_events_metric(metric.namespace([:stats, :events]))
     @filter_queue_client.set_pipeline_metric(
@@ -198,6 +198,8 @@ def start_workers
       config_metric.gauge(:workers, pipeline_workers)
       config_metric.gauge(:batch_size, batch_size)
       config_metric.gauge(:batch_delay, batch_delay)
+      config_metric.gauge(:config_reload_automatic, @settings.get("config.reload.automatic"))
+      config_metric.gauge(:config_reload_interval, @settings.get("config.reload.interval"))
 
       @logger.info("Starting pipeline",
                    "id" => self.pipeline_id,
diff --git a/logstash-core/spec/api/lib/api/node_spec.rb b/logstash-core/spec/api/lib/api/node_spec.rb
index 357b3b5baa4..17cf5620958 100644
--- a/logstash-core/spec/api/lib/api/node_spec.rb
+++ b/logstash-core/spec/api/lib/api/node_spec.rb
@@ -111,7 +111,9 @@
         "pipeline" => {
           "workers" => Numeric,
           "batch_size" => Numeric,
-          "batch_delay" => Numeric
+          "batch_delay" => Numeric,
+          "config_reload_automatic" => Boolean,
+          "config_reload_interval" => Numeric
         },
         "os" => {
           "name" => String,
@@ -140,8 +142,8 @@
           "threads" => Array
         }
       }
-      
+
       test_api_and_resources(root_structure, :exclude_from_root => ["hot_threads"])
-    end   
+    end
   end
 end
diff --git a/logstash-core/spec/api/lib/api/support/resource_dsl_methods.rb b/logstash-core/spec/api/lib/api/support/resource_dsl_methods.rb
index 0e22176cd60..2bb57fbc5fd 100644
--- a/logstash-core/spec/api/lib/api/support/resource_dsl_methods.rb
+++ b/logstash-core/spec/api/lib/api/support/resource_dsl_methods.rb
@@ -1,3 +1,13 @@
+# Ruby doesn't have common class for boolean,
+# And to simplify the ResourceDSLMethods check it make sense to have it.
+module Boolean; end
+class TrueClass
+  include Boolean
+end
+class FalseClass
+  include Boolean
+end
+
 module ResourceDSLMethods
   # Convert a nested hash to a mapping of key paths to expected classes
   def hash_to_mapping(h, path=[], mapping={})
