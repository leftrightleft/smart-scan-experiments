diff --git a/spec/config_factory.rb b/spec/config_factory.rb
new file mode 100644
index 00000000000..24b05391658
--- /dev/null
+++ b/spec/config_factory.rb
@@ -0,0 +1,85 @@
+require 'pp'
+
+## Example
+##
+## ConfigFactory.filter.
+#               add_field("always" => "awesome").
+#               if("[foo] == 'bar'").
+#               add_field("hello" => "world").
+#               elseif("[bar] == 'baz'").
+#               add_field("fancy" => "pants").
+#               else.
+#               add_field("free" => "hugs")
+#
+#  ConfigFactory.filter.
+#                if("[foo] in [foobar]").add_tag("field in field").
+#                if("[foo] in 'foo'").add_tag("field in string").
+#                if("'hello' in [greeting]").add_tag("string in field")
+#                if("!('foo' in ['hello', 'world'])").add_tag("shouldexist")
+#
+
+module Conditionals
+
+  def if(criteria)
+    stack.push "if #{criteria} {"
+    self
+  end
+
+  def elseif(criteria)
+    stack.push "} else if #{criteria} {"
+    self
+  end
+
+  def else
+    stack.push "} else {"
+    self
+  end
+
+  def endif
+    stack.push "}"
+    self
+  end
+end
+
+class Filter
+
+  include Conditionals
+
+  attr_reader :stack
+
+  def initialize
+    @stack = []
+  end
+
+
+  def clones(*fields)
+    stack.push "clone { clones => #{fields} }"
+    self
+  end
+
+  def add_field(field)
+    stack.push "mutate { add_field => #{field} }"
+    self
+  end
+
+  def add_tag(tag)
+    stack.push "mutate { add_tag => '#{tag}'  }"
+    self
+  end
+
+  def %(patterns)
+    to_s % patterns
+  end
+
+  def to_s
+    "filter { #{stack.join(' ')} }"
+  end
+end
+
+class ConfigFactory
+
+  def self.filter
+    Filter.new
+  end
+
+end
diff --git a/spec/core/conditionals_spec.rb b/spec/core/conditionals_spec.rb
index cd3f3210238..edd0e69b10b 100644
--- a/spec/core/conditionals_spec.rb
+++ b/spec/core/conditionals_spec.rb
@@ -1,396 +1,160 @@
-require "logstash/devutils/rspec/spec_helper"
+require 'spec_helper'
 
-module ConditionalFanciness
-  def description
-    return example.metadata[:example_group][:description_args][0]
-  end
+describe "conditionals" do
 
-  def conditional(expression, &block)
-    describe(expression) do
-      config <<-CONFIG
-        filter {
-          if #{expression} {
-            mutate { add_tag => "success" }
-          } else {
-            mutate { add_tag => "failure" }
-          }
-        }
-      CONFIG
-      instance_eval(&block)
-    end
-  end
-end
+  let(:pipeline) { LogStash::Pipeline.new(config.to_s) }
 
-describe "conditionals in output" do
-  extend ConditionalFanciness
+  context "within outputs" do
 
-  describe "simple" do
-    config <<-CONFIG
-      input {
-        generator {
-          message => '{"foo":{"bar"},"baz": "quux"}'
-          count => 1
-        }
-      }
-      output {
-        if [foo] == "bar" {
-          stdout { }
+    describe "having a simple conditional" do
+      let(:config) {
+        <<-CONFIG
+          input {
+            generator {
+              message => '{"foo":{"bar"},"baz": "quux"}'
+              count => 1
+            }
+          }
+          output {
+             if [foo] == "bar" {
+             stdout { }
+          }
         }
+      CONFIG
       }
-    CONFIG
 
-    agent do
-      #LOGSTASH-2288, should not fail raising an exception
+      context"when starting an agent" do
+        it "doesn't not fail" do
+          expect { pipeline.run }.to_not raise_error
+        end
+      end
+
     end
   end
-end
 
-describe "conditionals in filter" do
-  extend ConditionalFanciness
-
-  describe "simple" do
-    config <<-CONFIG
-      filter {
-        mutate { add_field => { "always" => "awesome" } }
-        if [foo] == "bar" {
-          mutate { add_field => { "hello" => "world" } }
-        } else if [bar] == "baz" {
-          mutate { add_field => { "fancy" => "pants" } }
-        } else {
-          mutate { add_field => { "free" => "hugs" } }
-        }
-      }
-    CONFIG
+  context "within filters" do
 
-    sample({"foo" => "bar"}) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to eq("world")
-      expect(subject["fancy"]).to be_nil
-      expect(subject["free"]).to be_nil
-    end
+    describe "having a simple conditional" do
+      let(:config) { ConfigFactory.filter.add_field("always" => "awesome").
+                      if("[foo] == 'bar'").
+                        add_field("hello" => "world").
+                      elseif("[bar] == 'baz'").
+                        add_field("fancy" => "pants").
+                      else.
+                        add_field("free" => "hugs").
+                      endif }
 
-    sample({"notfoo" => "bar"}) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to be_nil
-      expect(subject["fancy"]).to be_nil
-      expect(subject["free"]).to eq("hugs")
-    end
+      it "include the default field" do include("always" => "awesome") end
 
-    sample({"bar" => "baz"}) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to be_nil
-      expect(subject["fancy"]).to eq("pants")
-      expect(subject["free"]).to be_nil
-    end
-  end
+      context "when the if is true" do
 
-  describe "nested" do
-    config <<-CONFIG
-      filter {
-        if [nest] == 123 {
-          mutate { add_field => { "always" => "awesome" } }
-          if [foo] == "bar" {
-            mutate { add_field => { "hello" => "world" } }
-          } else if [bar] == "baz" {
-            mutate { add_field => { "fancy" => "pants" } }
-          } else {
-            mutate { add_field => { "free" => "hugs" } }
-          }
-        }
-      }
-    CONFIG
+        subject      {  sample("foo" => "bar") }
 
-    sample("foo" => "bar", "nest" => 124) do
-      expect(subject["always"]).to be_nil
-      expect(subject["hello"]).to be_nil
-      expect(subject["fancy"]).to be_nil
-      expect(subject["free"]).to be_nil
-    end
+        it "include the if field"  do include("hello" => "world") end
+        it "not include the elseif field" do should_not include("fancy", "hugs") end
+      end
 
-    sample("foo" => "bar", "nest" => 123) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to eq("world")
-      expect(subject["fancy"]).to be_nil
-      expect(subject["free"]).to be_nil
-    end
+      context "when the else is true" do
 
-    sample("notfoo" => "bar", "nest" => 123) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to be_nil
-      expect(subject["fancy"]).to be_nil
-      expect(subject["free"]).to eq("hugs")
-    end
+        subject      {  sample("notfoo" => "bar") }
 
-    sample("bar" => "baz", "nest" => 123) do
-      expect(subject["always"]).to eq("awesome")
-      expect(subject["hello"]).to be_nil
-      expect(subject["fancy"]).to eq("pants")
-      expect(subject["free"]).to be_nil
-    end
-  end
+        it "include the else field" do include("free" => "hugs" ) end
+        it "not include the elseif field" do should_not include("hello", "fancy") end
+      end
 
-  describe "comparing two fields" do
-    config <<-CONFIG
-      filter {
-        if [foo] == [bar] {
-          mutate { add_tag => woot }
-        }
-      }
-    CONFIG
 
-    sample("foo" => 123, "bar" => 123) do
-      expect(subject["tags"] ).to include("woot")
-    end
-  end
+      context "when the elseif is true" do
 
-  describe "the 'in' operator" do
-    config <<-CONFIG
-      filter {
-        if [foo] in [foobar] {
-          mutate { add_tag => "field in field" }
-        }
-        if [foo] in "foo" {
-          mutate { add_tag => "field in string" }
-        }
-        if "hello" in [greeting] {
-          mutate { add_tag => "string in field" }
-        }
-        if [foo] in ["hello", "world", "foo"] {
-          mutate { add_tag => "field in list" }
-        }
-        if [missing] in [alsomissing] {
-          mutate { add_tag => "shouldnotexist" }
-        }
-        if !("foo" in ["hello", "world"]) {
-          mutate { add_tag => "shouldexist" }
-        }
-      }
-    CONFIG
-
-    sample("foo" => "foo", "foobar" => "foobar", "greeting" => "hello world") do
-      expect(subject["tags"]).to include("field in field")
-      expect(subject["tags"]).to include("field in string")
-      expect(subject["tags"]).to include("string in field")
-      expect(subject["tags"]).to include("field in list")
-      expect(subject["tags"]).not_to include("shouldnotexist")
-      expect(subject["tags"]).to include("shouldexist")
-    end
-  end
+        subject      {  sample("bar" => "baz") }
 
-  describe "the 'not in' operator" do
-    config <<-CONFIG
-      filter {
-        if "foo" not in "baz" { mutate { add_tag => "baz" } }
-        if "foo" not in "foo" { mutate { add_tag => "foo" } }
-        if !("foo" not in "foo") { mutate { add_tag => "notfoo" } }
-        if "foo" not in [somelist] { mutate { add_tag => "notsomelist" } }
-        if "one" not in [somelist] { mutate { add_tag => "somelist" } }
-        if "foo" not in [alsomissing] { mutate { add_tag => "no string in missing field" } }
-      }
-    CONFIG
-
-    sample("foo" => "foo", "somelist" => [ "one", "two" ], "foobar" => "foobar", "greeting" => "hello world", "tags" => [ "fancypantsy" ]) do
-      # verify the original exists
-      expect(subject["tags"]).to include("fancypantsy")
-
-      expect(subject["tags"]).to include("baz")
-      expect(subject["tags"]).not_to include("foo")
-      expect(subject["tags"]).to include("notfoo")
-      expect(subject["tags"]).to include("notsomelist")
-      expect(subject["tags"]).not_to include("somelist")
-      expect(subject["tags"]).to include("no string in missing field")
-    end
-  end
+        it "include the elseif field" do include("fancy" => "pants") end
+        it "not include the if field" do should_not include("hello", "free") end
+      end
 
-  describe "operators" do
-    conditional "[message] == 'sample'" do
-      sample("sample") { expect(subject["tags"] ).to include("success") }
-      sample("different") { expect(subject["tags"] ).to include("failure") }
     end
 
-    conditional "[message] != 'sample'" do
-      sample("sample") { expect(subject["tags"] ).to include("failure") }
-      sample("different") { expect(subject["tags"] ).to include("success") }
-    end
+    describe "having nested conditionals" do
+      let(:config) { ConfigFactory.filter.
+                             if("[nest] == 123").add_field("always" => "awesome").
+                             if("[foo] == 'bar'").add_field("hello" => "world").
+                             elseif("[bar] == 'baz'").add_field("fancy" => "pants").
+                             else.add_field("free" => "hugs").endif.
+                             endif }
 
-    conditional "[message] < 'sample'" do
-      sample("apple") { expect(subject["tags"] ).to include("success") }
-      sample("zebra") { expect(subject["tags"] ).to include("failure") }
-    end
+      context "when the main if is not true" do
 
-    conditional "[message] > 'sample'" do
-      sample("zebra") { expect(subject["tags"] ).to include("success") }
-      sample("apple") { expect(subject["tags"] ).to include("failure") }
-    end
+        subject { sample(["foo" => "bar", "nest" => 124])  }
 
-    conditional "[message] <= 'sample'" do
-      sample("apple") { expect(subject["tags"] ).to include("success") }
-      sample("zebra") { expect(subject["tags"] ).to include("failure") }
-      sample("sample") { expect(subject["tags"] ).to include("success") }
-    end
+        it "add no field" do should_not include("always", "hello", "fancy", "free") end
+      end
 
-    conditional "[message] >= 'sample'" do
-      sample("zebra") { expect(subject["tags"] ).to include("success") }
-      sample("sample") { expect(subject["tags"] ).to include("success") }
-      sample("apple") { expect(subject["tags"] ).to include("failure") }
-    end
+      context "if the main if is true" do
 
-    conditional "[message] =~ /sample/" do
-      sample("apple") { expect(subject["tags"] ).to include("failure") }
-      sample("sample") { expect(subject["tags"] ).to include("success") }
-      sample("some sample") { expect(subject["tags"] ).to include("success") }
-    end
+        it "include the primary if field" do include("always" => "awesome") end
 
-    conditional "[message] !~ /sample/" do
-      sample("apple") { expect(subject["tags"]).to include("success") }
-      sample("sample") { expect(subject["tags"]).to include("failure") }
-      sample("some sample") { expect(subject["tags"]).to include("failure") }
-    end
+        context "when the nested if is true" do
 
-  end
+          subject { sample(["foo" => "bar", "nest" => 123])  }
 
-  describe "negated expressions" do
-    conditional "!([message] == 'sample')" do
-      sample("sample") { expect(subject["tags"]).not_to include("success") }
-      sample("different") { expect(subject["tags"]).not_to include("failure") }
-    end
+          it "not include the elseif field" do should_not include("fancy", "free") end
+          it "include the nested if field"  do include("hello" => "world") end
+        end
 
-    conditional "!([message] != 'sample')" do
-      sample("sample") { expect(subject["tags"]).not_to include("failure") }
-      sample("different") { expect(subject["tags"]).not_to include("success") }
-    end
+        context "when the nested else is true" do
+          subject { sample(["notfoo" => "bar", "nest" => 123])  }
 
-    conditional "!([message] < 'sample')" do
-      sample("apple") { expect(subject["tags"]).not_to include("success") }
-      sample("zebra") { expect(subject["tags"]).not_to include("failure") }
-    end
+          it "not include the if field" do should_not include("hello") end
+          it "not include the elseif field" do should_not include("fancy") end
+          it "include the else field" do include("free" => "hugs") end
+        end
 
-    conditional "!([message] > 'sample')" do
-      sample("zebra") { expect(subject["tags"]).not_to include("success") }
-      sample("apple") { expect(subject["tags"]).not_to include("failure") }
-    end
+        context "when the nested elseif is true" do
 
-    conditional "!([message] <= 'sample')" do
-      sample("apple") { expect(subject["tags"]).not_to include("success") }
-      sample("zebra") { expect(subject["tags"]).not_to include("failure") }
-      sample("sample") { expect(subject["tags"]).not_to include("success") }
-    end
+          subject { sample(["bar" => "baz", "nest" => 123])  }
 
-    conditional "!([message] >= 'sample')" do
-      sample("zebra") { expect(subject["tags"]).not_to include("success") }
-      sample("sample") { expect(subject["tags"]).not_to include("success") }
-      sample("apple") { expect(subject["tags"]).not_to include("failure") }
+          it "not include the else field" do should_not include("free") end
+          it "not include the if field" do should_not include("hello") end
+          it "add the elseif field" do include("fancy" => "pants") end
+        end
+      end
     end
 
-    conditional "!([message] =~ /sample/)" do
-      sample("apple") { expect(subject["tags"]).not_to include("failure") }
-      sample("sample") { expect(subject["tags"]).not_to include("success") }
-      sample("some sample") { expect(subject["tags"]).not_to include("success") }
-    end
+      describe "when comparing two fields" do
+        let(:config) { ConfigFactry.filter.if("[foo] == [bar]").
+                       add_tag("woot").
+                       endif }
 
-    conditional "!([message] !~ /sample/)" do
-      sample("apple") { expect(subject["tags"]).not_to include("success") }
-      sample("sample") { expect(subject["tags"]).not_to include("failure") }
-      sample("some sample") { expect(subject["tags"]).not_to include("failure") }
-    end
+        subject { sample(["foo" => 123, "bar" => 123])  }
 
-  end
-
-  describe "value as an expression" do
-    # testing that a field has a value should be true.
-    conditional "[message]" do
-      sample("apple") { expect(subject["tags"]).to include("success") }
-      sample("sample") { expect(subject["tags"]).to include("success") }
-      sample("some sample") { expect(subject["tags"]).to include("success") }
-    end
+        context "when the if is true" do
+          it "include the if tag" do
+            include("tags" => ["woot"])
+          end
+        end
+      end
 
-    # testing that a missing field has a value should be false.
-    conditional "[missing]" do
-      sample("apple") { expect(subject["tags"]).to include("failure") }
-      sample("sample") { expect(subject["tags"]).to include("failure") }
-      sample("some sample") { expect(subject["tags"]).to include("failure") }
-    end
-  end
+    describe "when a new events is created" do
 
-  describe "logic operators" do
-    describe "and" do
-      conditional "[message] and [message]" do
-        sample("whatever") { expect(subject["tags"]).to include("success") }
-      end
-      conditional "[message] and ![message]" do
-        sample("whatever") { expect(subject["tags"]).to include("failure") }
-      end
-      conditional "![message] and [message]" do
-        sample("whatever") { expect(subject["tags"]).to include("failure") }
-      end
-      conditional "![message] and ![message]" do
-        sample("whatever") { expect(subject["tags"]).to include("failure") }
-      end
-    end
+      let(:config)  { ConfigFactory.filter.if("[type] == 'original'").
+                                           clones('clone').
+                                           add_field("cond1" => "true").
+                                           else.add_field("cond2" => "true").
+                                           endif }
 
-    describe "or" do
-      conditional "[message] or [message]" do
-        sample("whatever") { expect(subject["tags"]).to include("success") }
-      end
-      conditional "[message] or ![message]" do
-        sample("whatever") { expect(subject["tags"]).to include("success") }
-      end
-      conditional "![message] or [message]" do
-        sample("whatever") { expect(subject["tags"]).to include("success") }
-      end
-      conditional "![message] or ![message]" do
-        sample("whatever") { expect(subject["tags"]).to include("failure") }
-      end
-    end
-  end
+      subject { sample("type" => "original").to_a }
 
-  describe "field references" do
-    conditional "[field with space]" do
-      sample("field with space" => "hurray") do
-        expect(subject["tags"]).to include("success")
+      it "the first message has type original" do
+        expect(subject[0]).to include("type" => "original")
       end
-    end
 
-    conditional "[field with space] == 'hurray'" do
-      sample("field with space" => "hurray") do
-        expect(subject["tags"]).to include("success")
+      it "the first message has a new field" do
+        expect(subject[0]).to include("cond1" => "true")
       end
-    end
 
-    conditional "[nested field][reference with][some spaces] == 'hurray'" do
-      sample({"nested field" => { "reference with" => { "some spaces" => "hurray" } } }) do
-        expect(subject["tags"]).to include("success")
+      it "has a message with type clone" do
+        expect(subject[1]).to include("type" => "clone")
       end
-    end
-  end
-
-  describe "new events from root" do
-    config <<-CONFIG
-      filter {
-        if [type] == "original" {
-          clone {
-            clones => ["clone"]
-          }
-        }
-        if [type] == "original" {
-          mutate { add_field => { "cond1" => "true" } }
-        } else {
-          mutate { add_field => { "cond2" => "true" } }
-        }
-      }
-    CONFIG
-
-    sample({"type" => "original"}) do
-      expect(subject).to be_an(Array)
-      expect(subject.length).to eq(2)
-
-      expect(subject[0]["type"]).to eq("original")
-      expect(subject[0]["cond1"]).to eq("true")
-      expect(subject[0]["cond2"]).to eq(nil)
 
-      expect(subject[1]["type"]).to eq("clone")
-      # expect(subject[1]["cond1"]).to eq(nil)
-      # expect(subject[1]["cond2"]).to eq("true")
     end
   end
 end
diff --git a/spec/core/expressions_spec.rb b/spec/core/expressions_spec.rb
new file mode 100644
index 00000000000..4cac0e3d256
--- /dev/null
+++ b/spec/core/expressions_spec.rb
@@ -0,0 +1,87 @@
+require 'spec_helper'
+
+describe "operators" do
+
+  let(:defs)   { ConfigFactory.filter.if("%s").add_tag("success").
+                                else.add_tag("failure").
+                                endif
+                }
+  describe "value as expression" do
+
+    context "with a placeholder message" do
+      it "add the success tag to any message" do
+        config    = defs % ["[message]"]
+        expect(sample_from("apple", config)).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag to any message" do
+        config    = defs % ["[missing]"]
+        expect(sample_from("apple", config)).to include("tags" => ["failure"])
+      end
+    end
+
+    context "when using logic operators" do
+
+      describe "and" do
+        it "add the success tag for true expressions" do
+          config    = defs % ["[message] and [message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["success"])
+        end
+
+        it "add the failure tag for false expressions" do
+          config    = defs % ["[message] and ![message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["failure"])
+        end
+
+        it "add the failure tag for double negated expressions" do
+          config    = defs % ["![message] and ![message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["failure"])
+        end
+      end
+
+      describe "or" do
+        it "add the success tag for true expressions" do
+          config    = defs % ["[message] or [message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["success"])
+        end
+
+        it "add the success tag for one negated term expressions" do
+          config    = defs % ["[message] or ![message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["success"])
+        end
+
+        it "add the failure tag for double negated expressions" do
+          config    = defs % ["![message] or ![message]" ]
+          expect(sample_from("apple", config)).to include("tags" => ["failure"])
+        end
+      end
+
+    end
+
+    context "with field references" do
+
+      context "having spaces in the criteria" do
+
+        it "add the success tag when using a field" do
+          config    = defs % ["[field with space]"]
+          expect(sample_from({"field with space" => "hurray"}, config)).to include("tags" => ["success"])
+        end
+
+        it "add the success tag when using an eq comparison" do
+          patterns = ["[field with space] == 'hurray'"]
+          config   = defs % patterns
+          expect(sample_from({"field with space" => "hurray"}, config)).to include("tags" => ["success"])
+        end
+
+        it "add the success tag when using nested fields" do
+          patterns = ["[nested field][reference with][some spaces] == 'hurray'"]
+          config   = defs % patterns
+          event    = {"nested field" => { "reference with" => { "some spaces" => "hurray" } } }
+          expect(sample_from(event, config)).to include("tags" => ["success"])
+        end
+
+      end
+    end
+
+  end
+  end
diff --git a/spec/core/operators_spec.rb b/spec/core/operators_spec.rb
new file mode 100644
index 00000000000..3d4c7838a73
--- /dev/null
+++ b/spec/core/operators_spec.rb
@@ -0,0 +1,165 @@
+require 'spec_helper'
+
+describe "operators" do
+
+  let(:pipeline) {LogStash::Pipeline.new(config.to_s)}
+
+  describe "the in operator" do
+    let(:config) { ConfigFactory.filter.if("[foo] in [foobar]").add_tag("field in field").endif.
+                                        if('[foo] in "foo"').add_tag("field in string").endif.
+                                        if('"hello" in [greeting]').add_tag("string in field").endif.
+                                        if('[foo] in ["hello", "world", "foo"]').add_tag("field in list").endif.
+                                        if('[missing] in [alsomissing]').add_tag("shouldnotexist").endif.
+                                        if('!("foo" in ["hello", "world"])').add_tag("shouldexist").endif }
+    subject      {   sample("foo" => "foo", "foobar" => "foobar", "greeting" => "hello world") }
+
+    it "add the filds that meet the filter crieria" do
+      include("tags" => ["field in field", "field in string", "string in field", "field in list", "shouldexist"])
+    end
+
+    it "does not add values or cretiras not meet" do
+      should_not include("tags" => ["shouldnotexist"])
+    end
+  end
+
+  describe "the not in operator" do
+    let(:event)  { {"foo" => "foo", "somelist" => [ "one", "two" ],
+                    "foobar" => "foobar", "greeting" => "hello world",
+                    "tags" => [ "fancypantsy" ]} }
+    let(:config) { ConfigFactory.filter.if('"foo" not in "baz"').add_tag("baz").endif.
+                                        if('"foo" not in "foo"').add_tag("foo").endif.
+                                        if('!("foo" not in "foo")').add_tag("notfoo").endif.
+                                        if('"foo" not in [somelist]').add_tag("notsomelist").endif.
+                                        if('"one" not in [somelist]').add_tag("somelist").endif.
+                                        if('"foo" not in [alsomissing]').add_tag("no string in missing field").endif }
+    subject      { sample(event) }
+
+    it "add the filds that meet the filter crieria" do
+       include("tags" => ["fancypantsy", "baz", "notfoo", "notsomelist", "no string in missing field"])
+    end
+
+    it "does not add values or cretiras not meet" do
+      should_not include("tags" => ["somelist", "foo"])
+    end
+  end
+
+    describe "operators" do
+      let(:defs)   { ConfigFactory.filter.if("%s").add_tag("success").
+                                          else.add_tag("failure").
+                                          endif }
+      let(:config) { defs % [expression]}
+
+      context "operator equal" do
+      let (:expression) { "[message] == 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("sample")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("different")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator not equal" do
+      let (:expression) { "[message] != 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("different")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("sample")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator lt" do
+      let (:expression) { "[message] < 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("apple")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("zebra")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator gt" do
+      let (:expression) { "[message] > 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("zebra")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("apple")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator lte" do
+      let (:expression) { "[message] <= 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("apple")).to include("tags" => ["success"])
+      end
+
+      it "add the sucess tag if the message is equal" do
+        expect(sample("sample")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("zebra")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator gte" do
+      let (:expression) { "[message] >= 'sample'"}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("zebra")).to include("tags" => ["success"])
+      end
+
+      it "add the sucess tag if the message is equal" do
+        expect(sample("sample")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("apple")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator match" do
+      let (:expression) { "[message] =~ /sample/ "}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("some sample")).to include("tags" => ["success"])
+      end
+
+      it "add the sucess tag if the message is equal" do
+        expect(sample("sample")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag if the critieria is not meet" do
+        expect(sample("apple")).to include("tags" => ["failure"])
+      end
+    end
+
+    context "operator not match" do
+      let (:expression) { "[message] !~ /sample/ "}
+
+      it "add the success tag if the critieria is meet" do
+        expect(sample("apple")).to include("tags" => ["success"])
+      end
+
+      it "add the failure tag for the exact message" do
+        expect(sample("sample")).to include("tags" => ["failure"])
+      end
+
+      it "add the failure tag if the critieria is containt in the message" do
+        expect(sample("some sample")).to include("tags" => ["failure"])
+      end
+    end
+
+  end
+end
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
new file mode 100644
index 00000000000..5f94c8a313d
--- /dev/null
+++ b/spec/spec_helper.rb
@@ -0,0 +1,146 @@
+require 'config_factory'
+require "logstash/devutils/rspec/spec_helper"
+require "logstash/agent"
+require "logstash/event"
+require "logstash/pipeline"
+
+
+RSpec.configure do |config|
+  config.formatter = 'documentation'
+  config.color    = true
+end if ENV['LOGSTASH_TEST']
+
+module ConditionalFanciness
+  def description
+    return example.metadata[:example_group][:description_args][0]
+  end
+
+  def conditional(expression, &block)
+    describe(expression) do
+      config <<-CONFIG
+        filter {
+          if #{expression} {
+            mutate { add_tag => "success" }
+          } else {
+            mutate { add_tag => "failure" }
+          }
+        }
+      CONFIG
+      instance_eval(&block)
+    end
+  end
+end
+
+def load_fixtures(name, *pattern)
+  content = File.read(File.join('spec', 'fixtures', name))
+  content = content % pattern if !pattern.empty?
+  content
+end
+
+def sample_logstash_event
+  LogStash::Event.new(
+    "@timestamp" => Time.iso8601("2013-01-01T00:00:00.000Z"),
+    "type" => "sprintf",
+    "message" => "hello world",
+    "tags" => [ "tag1" ],
+    "source" => "/home/foo",
+    "a" => "b",
+    "c" => {
+      "d" => "f",
+      "e" => {"f" => "g"}
+    },
+    "f" => { "g" => { "h" => "i" } },
+    "j" => {
+      "k1" => "v",
+      "k2" => [ "w", "x" ],
+      "k3" => {"4" => "m"},
+      5 => 6,
+      "5" => 7
+    },
+    "@metadata" => { "fancy" => "pants", "have-to-go" => { "deeper" => "inception" } }
+  )
+end
+
+def sample_from(events, config)
+  pipeline = LogStash::Pipeline.new(config)
+  sample_with(events, pipeline)
+end
+
+def sample(events)
+  sample_with(events, pipeline)
+end
+
+def sample_with(events, pipeline)
+  events = [events] unless events.is_a?(Array)
+  events.map! do |e|
+    e = { "message" => e } if e.is_a?(String)
+    LogStash::Event.new(e)
+  end
+  results = []
+  pipeline.instance_eval { @filters.each(&:register) }
+
+  events.each do |e|
+    pipeline.filter(e) {|new_event| results << new_event }
+  end
+  pipeline.flush_filters(:final => true) do |e|
+    results << e unless e.cancelled?
+  end
+  results.to_a.map! { |m| m.to_hash }
+  (results.count == 1 ? results.first : results)
+end
+
+class DummyInput < LogStash::Inputs::Base
+  config_name "dummyinput"
+  milestone 2
+
+  def register
+  end
+
+  def run(queue)
+  end
+
+  def teardown
+  end
+end
+
+class DummyCodec < LogStash::Codecs::Base
+  config_name "dummycodec"
+  milestone 2
+
+  def decode(data) 
+    data
+  end
+
+  def encode(event) 
+    event
+  end
+
+  def teardown
+  end
+end
+
+class DummyOutput < LogStash::Outputs::Base
+  config_name "dummyoutput"
+  milestone 2
+
+  attr_reader :num_teardowns
+
+  def initialize(params={})
+    super
+    @num_teardowns = 0
+  end
+
+  def register
+  end
+
+  def receive(event)
+  end
+
+  def teardown
+    @num_teardowns += 1
+  end
+end
+
+class TestPipeline < LogStash::Pipeline
+  attr_reader :outputs
+end
