diff --git a/lib/logstash/inputs/gelf.rb b/lib/logstash/inputs/gelf.rb
index 44e6dd85758..a156bac2cb7 100644
--- a/lib/logstash/inputs/gelf.rb
+++ b/lib/logstash/inputs/gelf.rb
@@ -105,6 +105,12 @@ def remap_gelf(event)
     elsif event.fields["short_message"]
       event.message = event.fields["short_message"].dup
     end
+    if event.fields["host"]
+      event.source_host = event.fields["host"]
+    end
+    if event.fields["file"]
+      event.source_path = event.fields["file"]
+    end
     event.source = "gelf://#{event.fields["host"]}/#{event.fields["file"]}"
   end # def remap_gelf
 end # class LogStash::Inputs::Gelf
diff --git a/lib/logstash/outputs/gelf.rb b/lib/logstash/outputs/gelf.rb
index 2501f7e68e3..0b9240cf084 100644
--- a/lib/logstash/outputs/gelf.rb
+++ b/lib/logstash/outputs/gelf.rb
@@ -39,6 +39,16 @@ class LogStash::Outputs::Gelf < LogStash::Outputs::Base
   # is useful if you need to use a value from the event as the facility name.
   config :facility, :validate => :string, :default => "logstash-gelf"
 
+  # The GELF version designator. Dynamic values like %{foo} are permitted here.
+  config :version, :validate => :string, :default => "%{version}"
+
+  # The GELF line number. Dynamic values like %{foo} are permitted here, but the
+  # value should be a number.
+  config :line, :validate => :string, :default => "%{line}"
+
+  # The GELF file. Dynamic values like %{foo} are permitted here.
+  config :file, :validate => :string, :default => "%{source_path}"
+
   # Ship metadata within event object?
   config :ship_metadata, :validate => :boolean, :default => true
 
@@ -83,6 +93,8 @@ def register
       "alert" => 1, "a" => 1,
       "emergency" => 0, "e" => 0,
      }
+
+     @ignore_fields = [ "facility", "full_message", "short_message", "host", "level", "line", "timestamp", "version", "file" ]
   end # def register
 
   public
@@ -92,8 +104,8 @@ def receive(event)
     # We have to make our own hash here because GELF expects a hash
     # with a specific format.
     m = Hash.new
-    if event.fields["message"]
-      v = event.fields["message"]
+    if event.fields["short_message"]
+      v = event.fields["short_message"]
       m["short_message"] = (v.is_a?(Array) && v.length == 1) ? v.first : v
     else
       m["short_message"] = event.message
@@ -102,13 +114,17 @@ def receive(event)
     m["full_message"] = (event.message)
     
     m["host"] = event.sprintf(@sender)
-    m["file"] = event["@source_path"]
+    m["file"] = event.sprintf(@file)
+    m["version"] = event.sprintf(@version)
+    m["line"] = event.sprintf(@line)
+    m["line"] = Integer(m["line"]) if m["line"].is_a?(String) and m["line"] === /^[\d]+$/
 
     if @ship_metadata
         event.fields.each do |name, value|
           next if value == nil
+          name = name[1..-1] if name.start_with?('_')
           name = "_id" if name == "id"  # "_id" is reserved, so use "__id"
-          if !value.nil?
+          if !value.nil? and !@ignore_fields.include?(name)
             if value.is_a?(Array)
               # collapse single-element arrays, otherwise leave as array
               m["_#{name}"] = (value.length == 1) ? value.first : value
