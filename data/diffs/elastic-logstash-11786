diff --git a/logstash-core/src/main/java/org/logstash/LogstashJavaCompat.java b/logstash-core/src/main/java/org/logstash/LogstashJavaCompat.java
index 636b9452ea5..75e9da83061 100644
--- a/logstash-core/src/main/java/org/logstash/LogstashJavaCompat.java
+++ b/logstash-core/src/main/java/org/logstash/LogstashJavaCompat.java
@@ -90,4 +90,23 @@ private static boolean isAtLeastJava9() {
         final int end = version.indexOf('.');
         return Integer.parseInt(version.substring(0, end > 0 ? end : version.length())) >= 9;
     }
+
+    /**
+     * Identifies whether we are running on a versiongreater than or equal to the version parameter specified.
+     * @param version The version to test against. This must be the Major version of Java
+     * @return True if running on Java whose major version is greater than or equal to the
+     *         specified version.
+     */
+    public static boolean isJavaAtLeast(int version) {
+        final String value = System.getProperty("java.specification.version");
+        final int actualVersion;
+        // Java specification version prior to Java 9 were of the format `1.X`, and after the format `X`
+        // See https://openjdk.java.net/jeps/223
+        if (value.startsWith("1.")) {
+            actualVersion = Integer.parseInt(value.split("\\.")[1]);
+        } else {
+            actualVersion = Integer.parseInt(value);
+        }
+        return actualVersion >= version;
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java b/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
index c63db2af490..287fa061e44 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
@@ -23,14 +23,21 @@
 import com.sun.management.UnixOperatingSystemMXBean;
 import java.lang.management.ManagementFactory;
 import java.lang.management.OperatingSystemMXBean;
+import java.lang.reflect.Method;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
-import javax.management.MBeanServer;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.logstash.Logstash;
+import org.logstash.LogstashJavaCompat;
 
 public class ProcessMonitor {
+
     private static final OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();
-    private static final MBeanServer platformMxBean = ManagementFactory.getPlatformMBeanServer();
+    private static final Method CPU_LOAD_METHOD = getCpuLoadMethod();
+    private static final Logger LOGGER = LogManager.getLogger(ProcessMonitor.class);
 
     public static class Report {
         private long memTotalVirtualInBytes = -1;
@@ -55,7 +62,7 @@ public static class Report {
                     unixOsBean.getProcessCpuTime(), TimeUnit.NANOSECONDS
                 );
                 this.cpuProcessPercent = scaleLoadToPercent(unixOsBean.getProcessCpuLoad());
-                this.cpuSystemPercent = scaleLoadToPercent(unixOsBean.getSystemCpuLoad());
+                this.cpuSystemPercent = getSystemCpuLoad();
 
                 this.memTotalVirtualInBytes = unixOsBean.getCommittedVirtualMemorySize();
             }
@@ -90,6 +97,34 @@ private static short scaleLoadToPercent(double load) {
                 return -1;
             }
         }
+
+        // The method `getSystemCpuLoad` is deprecated in favour of `getCpuLoad` since JDK14
+        // This method uses reflection to use the correct method depending on the version of
+        // the JDK being used.
+        private short getSystemCpuLoad() {
+            if (CPU_LOAD_METHOD == null){
+                return -1;
+            }
+            try {
+                return scaleLoadToPercent((double)CPU_LOAD_METHOD.invoke(osMxBean));
+            } catch (Exception e){
+                return -1;
+            }
+        }
+    }
+
+    /**
+     * Retrieve the correct name of the method to get CPU load.
+     * @return Method if the method could be found, null otherwise
+     */
+    private static Method getCpuLoadMethod(){
+        try{
+            String methodName = (LogstashJavaCompat.isJavaAtLeast(14)) ? "getCpuLoad" : "getSystemCpuLoad";
+            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName);
+        } catch (ReflectiveOperationException e){
+            LOGGER.warn("OperatingSystemMXBean CPU load method not available, CPU load will not be measured", e);
+            return null;
+        }
     }
 
     public static Report detect() {
