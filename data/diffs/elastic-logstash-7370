diff --git a/logstash-core/lib/logstash/string_interpolation.rb b/logstash-core/lib/logstash/string_interpolation.rb
index 2eef6dfdff8..8f4df5ce3cd 100644
--- a/logstash-core/lib/logstash/string_interpolation.rb
+++ b/logstash-core/lib/logstash/string_interpolation.rb
@@ -6,12 +6,12 @@ module StringInterpolation
 
     # clear the global compiled templates cache
     def clear_cache
-      Java::OrgLogstash::StringInterpolation.get_instance.clear_cache;
+      Java::OrgLogstash::StringInterpolation.clear_cache;
     end
 
     # @return [Fixnum] the compiled templates cache size
     def cache_size
-      Java::OrgLogstash::StringInterpolation.get_instance.cache_size;
+      Java::OrgLogstash::StringInterpolation.cache_size;
     end
   end
 end
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 415ac3d213a..60a1994e1c2 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -255,7 +255,7 @@ public Object remove(String path) {
     }
 
     public String sprintf(String s) throws IOException {
-        return StringInterpolation.getInstance().evaluate(this, s);
+        return StringInterpolation.evaluate(this, s);
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/StringInterpolation.java b/logstash-core/src/main/java/org/logstash/StringInterpolation.java
index e2708454cdc..9c66e24a445 100644
--- a/logstash-core/src/main/java/org/logstash/StringInterpolation.java
+++ b/logstash-core/src/main/java/org/logstash/StringInterpolation.java
@@ -9,11 +9,7 @@
 
 public class StringInterpolation {
     static Pattern TEMPLATE_TAG = Pattern.compile("%\\{([^}]+)\\}");
-    static Map cache;
-
-    protected static class HoldCurrent {
-        private static final StringInterpolation INSTANCE = new StringInterpolation();
-    }
+    static final Map<String, TemplateNode> cache = new ConcurrentHashMap<>();
 
     private StringInterpolation() {
         // TODO:
@@ -25,23 +21,22 @@ private StringInterpolation() {
         //  - If the key doesn't contains a `%` do not cache it, this will reduce the key size at a performance cost.
         //  - Use some kind LRU cache
         //  - Create a new data structure that use weakref or use Google Guava for the cache https://code.google.com/p/guava-libraries/
-        this.cache = new ConcurrentHashMap<>();
     }
 
-    public void clearCache() {
-        this.cache.clear();
+    public static void clearCache() {
+        cache.clear();
     }
 
-    public int cacheSize() {
-        return this.cache.size();
+    public static int cacheSize() {
+        return cache.size();
     }
 
-    public String evaluate(Event event, String template) throws IOException {
-        TemplateNode compiledTemplate = (TemplateNode) this.cache.get(template);
+    public static String evaluate(Event event, String template) throws IOException {
+        TemplateNode compiledTemplate = cache.get(template);
 
         if (compiledTemplate == null) {
-            compiledTemplate = this.compile(template);
-            this.cache.put(template, compiledTemplate);
+            compiledTemplate = compile(template);
+            cache.put(template, compiledTemplate);
         }
 
         return compiledTemplate.evaluate(event);
@@ -94,7 +89,4 @@ public static TemplateNode identifyTag(String tag) {
         }
     }
 
-    static StringInterpolation getInstance() {
-        return HoldCurrent.INSTANCE;
-    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/Timestamp.java b/logstash-core/src/main/java/org/logstash/Timestamp.java
index 00f2c766417..acb7b778c93 100644
--- a/logstash-core/src/main/java/org/logstash/Timestamp.java
+++ b/logstash-core/src/main/java/org/logstash/Timestamp.java
@@ -64,7 +64,7 @@ public static Timestamp now() {
     }
 
     public String toIso8601() {
-        return this.iso8601Formatter.print(this.time);
+        return iso8601Formatter.print(this.time);
     }
 
     public String toString() {
diff --git a/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java b/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
index 2559a55b360..3eef0d6f0b7 100644
--- a/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
+++ b/logstash-core/src/test/java/org/logstash/StringInterpolationTest.java
@@ -18,87 +18,70 @@ public class StringInterpolationTest {
     public void testCompletelyStaticTemplate() throws IOException {
         Event event = getTestEvent();
         String path = "/full/path/awesome";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals(path, si.evaluate(event, path));
+        assertEquals(path, StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void testOneLevelField() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{bar}/awesome";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/foo/awesome", si.evaluate(event, path));
+        assertEquals("/full/foo/awesome", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void testMultipleLevelField() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{bar}/%{awesome}";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/foo/logstash", si.evaluate(event, path));
+        assertEquals("/full/foo/logstash", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void testMissingKey() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{do-not-exist}";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/%{do-not-exist}", si.evaluate(event, path));
+        assertEquals("/full/%{do-not-exist}", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void testDateFormatter() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{+YYYY}";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/2015", si.evaluate(event, path));
+        assertEquals("/full/2015", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void TestMixDateAndFields() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{+YYYY}/weeee/%{bar}";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/2015/weeee/foo", si.evaluate(event, path));
+        assertEquals("/full/2015/weeee/foo", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void testUnclosedTag() throws IOException {
         Event event = getTestEvent();
         String path = "/full/%{+YYY/web";
-        StringInterpolation si = StringInterpolation.getInstance();
-
-        assertEquals("/full/%{+YYY/web", si.evaluate(event, path));
+        assertEquals("/full/%{+YYY/web", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void TestStringIsOneDateTag() throws IOException {
         Event event = getTestEvent();
         String path = "%{+YYYY}";
-        StringInterpolation si = StringInterpolation.getInstance();
-        assertEquals("2015", si.evaluate(event, path));
+        assertEquals("2015", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void TestFieldRef() throws IOException {
         Event event = getTestEvent();
         String path = "%{[j][k1]}";
-        StringInterpolation si = StringInterpolation.getInstance();
-        assertEquals("v", si.evaluate(event, path));
+        assertEquals("v", StringInterpolation.evaluate(event, path));
     }
 
     @Test
     public void TestEpoch() throws IOException {
         Event event = getTestEvent();
         String path = "%{+%s}";
-        StringInterpolation si = StringInterpolation.getInstance();
-        assertEquals("1443657600", si.evaluate(event, path));
+        assertEquals("1443657600", StringInterpolation.evaluate(event, path));
     }
 
     @Test
@@ -111,8 +94,7 @@ public void TestValueIsArray() throws IOException {
         event.setField("message", l);
 
         String path = "%{message}";
-        StringInterpolation si = StringInterpolation.getInstance();
-        assertEquals("Hello,world", si.evaluate(event, path));
+        assertEquals("Hello,world", StringInterpolation.evaluate(event, path));
     }
 
     @Test
@@ -120,8 +102,7 @@ public void TestValueIsHash() throws IOException {
         Event event = getTestEvent();
 
         String path = "%{j}";
-        StringInterpolation si = StringInterpolation.getInstance();
-        assertEquals("{\"k1\":\"v\"}", si.evaluate(event, path));
+        assertEquals("{\"k1\":\"v\"}", StringInterpolation.evaluate(event, path));
     }
 
     public Event getTestEvent() {
