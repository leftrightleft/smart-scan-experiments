diff --git a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
index 7ca6c94e4a5..77e86bb69fb 100644
--- a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
+++ b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
@@ -111,7 +111,7 @@ def publisher(items, writer)
           output_strings << e.message
         end
 
-        queue.queue.close
+        queue.close
 
         if output_strings.any?
           output_strings << __memoized.reject{|k,v| reject_memo_keys.include?(k)}.inspect
@@ -287,4 +287,4 @@ def publisher(items, writer)
       end
     end
   end
-end
\ No newline at end of file
+end
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
index 54a783958a3..fc7661d5cc7 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
@@ -168,16 +168,6 @@ public boolean isEmpty() {
         return queue.isEmpty();
     }
 
-    @JRubyMethod(name = "close")
-    public IRubyObject ruby_close(ThreadContext context) {
-        try {
-            close();
-        } catch (IOException e) {
-            throw RubyUtil.newRubyIOError(context.runtime, e);
-        }
-        return context.nil;
-    }
-
     public void close() throws IOException {
         queue.close();
     }
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java
index 78de8d830ab..51ffed716aa 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java
@@ -1,7 +1,8 @@
 package org.logstash.ackedqueue.ext;
 
+import java.io.IOException;
+import java.util.concurrent.atomic.AtomicBoolean;
 import org.jruby.Ruby;
-import org.jruby.RubyBoolean;
 import org.jruby.RubyClass;
 import org.jruby.RubyFixnum;
 import org.jruby.RubyObject;
@@ -14,14 +15,11 @@
 import org.logstash.ext.JrubyAckedReadClientExt;
 import org.logstash.ext.JrubyAckedWriteClientExt;
 
-import java.io.IOException;
-import java.util.concurrent.atomic.AtomicBoolean;
-
 @JRubyClass(name = "WrappedAckedQueue")
-public class JRubyWrappedAckedQueueExt extends RubyObject {
+public final class JRubyWrappedAckedQueueExt extends RubyObject {
 
     private JRubyAckedQueueExt queue;
-    private AtomicBoolean isClosed = new AtomicBoolean();
+    private final AtomicBoolean isClosed = new AtomicBoolean();
 
     @JRubyMethod(name = "initialize", optional = 7)
     public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) throws IOException {
@@ -39,44 +37,15 @@ public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) th
         return context.nil;
     }
 
-    public static JRubyWrappedAckedQueueExt createFileBased(
-            String path, int capacity, int maxEvents, int checkpointMaxWrites,
-            int checkpointMaxAcks, long maxBytes) throws IOException {
-        JRubyWrappedAckedQueueExt wrappedQueue =
-                new JRubyWrappedAckedQueueExt(JRubyAckedQueueExt.create(path, capacity, maxEvents,
-                        checkpointMaxWrites, checkpointMaxAcks, maxBytes));
-        wrappedQueue.queue.open();
-        return wrappedQueue;
-    }
-
     public JRubyWrappedAckedQueueExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
 
-    private JRubyWrappedAckedQueueExt(JRubyAckedQueueExt queue) {
-        super(RubyUtil.RUBY, RubyUtil.WRAPPED_ACKED_QUEUE_CLASS);
-        this.queue = queue;
-    }
-
     @JRubyMethod(name = "queue")
     public IRubyObject rubyGetQueue(ThreadContext context) {
-        return getQueue();
-    }
-
-    public JRubyAckedQueueExt getQueue() {
         return queue;
     }
 
-    public boolean isClosed() {
-        return isClosed.get();
-    }
-
-    @JRubyMethod(name = "closed?")
-    public IRubyObject rubyIsClosed(ThreadContext context) {
-        return RubyBoolean.newBoolean(context.runtime, isClosed());
-    }
-
-
     public void close() throws IOException {
         queue.close();
         isClosed.set(true);
@@ -121,9 +90,8 @@ public IRubyObject rubyIsEmpty(ThreadContext context) {
     }
 
     private void checkIfClosed(String action) {
-        if (isClosed()) {
+        if (isClosed.get()) {
             throw new RuntimeException("Attempted to " + action + " on a closed AckedQueue");
         }
     }
-
-}
\ No newline at end of file
+}
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
index cdd92551791..e9169569183 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
@@ -9,7 +9,6 @@
 import org.logstash.RubyUtil;
 import org.logstash.ackedqueue.AckedReadBatch;
 import org.logstash.ackedqueue.ext.JRubyAckedQueueExt;
-import org.logstash.ackedqueue.ext.JRubyWrappedAckedQueueExt;
 import org.logstash.execution.QueueBatch;
 import org.logstash.execution.QueueReadClient;
 import org.logstash.execution.QueueReadClientBase;
