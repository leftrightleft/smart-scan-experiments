diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index cc87b28b232..100f774ea28 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -26,8 +26,6 @@ module LogStash module Plugins
   class Registry
     include LogStash::Util::Loggable
 
-    class UnknownPlugin < NameError; end
-
     # Add a bit more sanity with when interacting with the rubygems'
     # specifications database, most of out code interact directly with really low level
     # components of bundler/rubygems we need to encapsulate that and this is a start.
@@ -196,36 +194,22 @@ def lookup(type, plugin_name, &block)
     # a plugin and will do a lookup on the namespace of the required class to find a matching
     # plugin with the appropriate type.
     def legacy_lookup(type, plugin_name)
-      begin
-        path = "logstash/#{type}s/#{plugin_name}"
-
-        klass = begin
-          namespace_lookup(type, plugin_name)
-        rescue UnknownPlugin => e
-          # Plugin not registered. Try to load it.
-          begin
-            require path
-            namespace_lookup(type, plugin_name)
-          rescue LoadError => e
-            logger.error("Tried to load a plugin's code, but failed.", :exception => e, :path => path, :type => type, :name => plugin_name)
-            raise
-          end
-        end
-
-        plugin = lazy_add(type, plugin_name, klass)
-      rescue => e
-        logger.error("Problems loading a plugin with",
-                    :type => type,
-                    :name => plugin_name,
-                    :path => path,
-                    :error_message => e.message,
-                    :error_class => e.class,
-                    :error_backtrace => e.backtrace)
-
-        raise LoadError, "Problems loading the requested plugin named #{plugin_name} of type #{type}. Error: #{e.class} #{e.message}"
+      klass = load_plugin_class(type, plugin_name)
+
+      # if !klass && @alias_registry.alias?(type.to_java, plugin_name)
+      #   resolved_plugin_name = @alias_registry.original_from_alias(type.to_java, plugin_name)
+      #   logger.debug("Loading #{type} plugin #{resolved_plugin_name} via its alias #{plugin_name}...")
+      #   klass = load_plugin_class(type, resolved_plugin_name)
+      # end
+
+      unless klass
+        logger.error("Unable to load plugin.",
+                     :type => type,
+                     :name => plugin_name)
+        raise LoadError, "Unable to load the requested plugin named #{plugin_name} of type #{type}. The plugin is not installed."
       end
 
-      plugin
+      plugin = lazy_add(type, plugin_name, klass)
     end
 
     def lookup_pipeline_plugin(type, name)
@@ -268,8 +252,7 @@ def size
     # ex.: namespace_lookup("filter", "grok") looks for LogStash::Filters::Grok
     # @param type [String] plugin type, "input", "output", "filter"
     # @param name [String] plugin name, ex.: "grok"
-    # @return [Class] the plugin class or raises NameError
-    # @raise NameError if plugin class does not exist or is invalid
+    # @return [Class,nil] the plugin class or nil
     def namespace_lookup(type, name)
       type_const = "#{type.capitalize}s"
       namespace = LogStash.const_get(type_const)
@@ -277,10 +260,27 @@ def namespace_lookup(type, name)
       # namespace.constants is the shallow collection of all constants symbols in namespace
       # note that below namespace.const_get(c) should never result in a NameError since c is from the constants collection
       klass_sym = namespace.constants.find { |c| is_a_plugin?(namespace.const_get(c), name) }
-      klass = klass_sym && namespace.const_get(klass_sym)
+      klass_sym && namespace.const_get(klass_sym)
+    end
+
+    # load a plugin's class, or return nil if the plugin cannot be loaded.
+    # attempts to load the class purely through namespace lookup,
+    # and falls back to requiring the path of the expected plugin.
+    # @param type [String]: plugin type, such as "input", "output", "filter", "codec"
+    # @param plugin_name [String]: plugin name, such as "grok", "elasticsearch"
+    # @return [Class,nil] the plugin class, or nil
+    def load_plugin_class(type, plugin_name)
+      klass = namespace_lookup(type, plugin_name)
+
+      unless klass
+        require("logstash/#{type}s/#{plugin_name}")
+        klass = namespace_lookup(type, plugin_name)
+      end
 
-      raise(UnknownPlugin) unless klass
       klass
+    rescue LoadError => e
+      logger.debug("Tried to load a plugin's code, but failed.", :exception => e, :path => e.path, :type => type, :name => plugin_name)
+      nil
     end
 
     # check if klass is a valid plugin for name
