diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index b376bd7d71f..90c3d9d879f 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -23,8 +23,10 @@
 
 class LogStash::Plugin
   include LogStash::Util::Loggable
+  prepend ExecutionContextProvider
 
-  attr_accessor :params, :execution_context
+  attr_accessor :params
+  attr_reader :execution_context
 
   NL = "\n"
 
@@ -160,6 +162,27 @@ def self.lookup(type, name)
     LogStash::PLUGIN_REGISTRY.lookup_pipeline_plugin(type, name)
   end
 
+  def self.with_execution_context(execution_context)
+    # TODO: maybe force use of plugin factory instead of this shim.
+    ExecutionContextProxy.new(self, execution_context)
+  end
+
+  def init_plugin(type, name, params)
+    plugin_factory.init(type, name, params)
+  end
+
+  def plugin_factory
+    require "logstash/plugin_factory"
+    @plugin_factory ||= LogStash::PluginFactory.new(execution_context)
+  end
+
+  # TODO: actionable deprecation log message
+  # TODO: does this need to be atomic?
+  def execution_context=(new_execution_context)
+    @plugin_factory = nil
+    @execution_context = new_execution_context
+  end
+
   ##
   # Returns this plugin's metadata key/value store.
   #
@@ -177,4 +200,16 @@ def self.lookup(type, name)
   def plugin_metadata
     LogStash::PluginMetadata.for_plugin(self.id)
   end
+
+  class ExecutionContextProxy
+    def initialize(plugin_klass, execution_context)
+      @plugin_klass = plugin_klass
+      @plugin_factory = PluginFactory.new(execution_context)
+      freeze
+    end
+
+    def new(*args, &block)
+      @plugin_factory.init(@plugin_klass, *args, &block)
+    end
+  end
 end # class LogStash::Plugin
diff --git a/logstash-core/lib/logstash/plugin_factory.rb b/logstash-core/lib/logstash/plugin_factory.rb
new file mode 100644
index 00000000000..107959db2e2
--- /dev/null
+++ b/logstash-core/lib/logstash/plugin_factory.rb
@@ -0,0 +1,57 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+class LogStash::PluginFactory
+  module ExecutionContextInitializer
+    refine LogStash::Plugin do
+      def initialize(*args,&block)
+        @execution_context = Thread.current.thread_variable_get(:plugin_execution_context)
+        super
+      end
+    end
+  end
+
+  def initialize(execution_context, plugin_registry=LogStash::PLUGIN_REGISTRY)
+    @execution_context = execution_context
+    @plugin_registry = plugin_registry
+    freeze
+  end
+
+  %w(
+    input
+    output
+    filter
+    codec
+  ).each do |plugin_type|
+    define_method("new_#{plugin_type}") do |name, *args, &block|
+      plugin_klass = @plugin_registry.lookup_pipeline_plugin(type, name)
+      init(plugin_klass, *args, &block)
+    end
+  end
+
+  using ExecutionContextInitializer
+
+  def init(plugin_klass, *args, &block)
+    previous_execution_context = Thread.current.thread_variable_get(:plugin_execution_context)
+    Thread.current.thread_variable_set(:plugin_execution_context, @execution_context)
+
+    return plugin_klass.new(*args, &block)
+
+  ensure
+    Thread.current.thread_variable_set(:plugin_execution_context, previous_execution_context)
+  end
+end
\ No newline at end of file
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
index c5afaac0592..24d0093c301 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputStrategyExt.java
@@ -187,10 +187,10 @@ public IRubyObject initialize(final ThreadContext context, final IRubyObject[] a
             for (int i = 0; i < count; ++i) {
                 final RubyClass outputClass = (RubyClass) args[0];
                 // Calling "new" here manually to allow mocking the ctor in RSpec Tests
-                final IRubyObject output = outputClass.callMethod(context, "new", pluginArgs);
-                initOutputCallsite(outputClass);
+                final RubyClass outputClassWithContext = (RubyClass) args[0].callMethod(context, "with_execution_context", args[2]);
+                final IRubyObject output = outputClassWithContext.callMethod(context, "new", pluginArgs);
+                initOutputCallsite(outputClassWithContext);
                 output.callMethod(context, "metric=", args[1]);
-                output.callMethod(context, "execution_context=", args[2]);
                 workers.append(output);
                 workerQueue.add(output);
             }
@@ -249,10 +249,10 @@ protected SimpleAbstractOutputStrategyExt(final Ruby runtime, final RubyClass me
         public IRubyObject initialize(final ThreadContext context, final IRubyObject[] args) {
             final RubyClass outputClass = (RubyClass) args[0];
             // Calling "new" here manually to allow mocking the ctor in RSpec Tests
-            output = args[0].callMethod(context, "new", args[3]);
-            initOutputCallsite(outputClass);
+            final RubyClass outputClassWithContext = (RubyClass) outputClass.callMethod(context, "with_execution_context", args[2]);
+            output = outputClassWithContext.callMethod(context, "new", args[3]);
+            initOutputCallsite(outputClassWithContext);
             output.callMethod(context, "metric=", args[1]);
-            output.callMethod(context, "execution_context=", args[2]);
             return this;
         }
 
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
index a226e57d56d..1e6a8e68d0f 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
@@ -55,13 +55,13 @@ public interface PluginResolver {
     public static IRubyObject filterDelegator(final ThreadContext context,
                                               final IRubyObject recv, final IRubyObject... args) {
         final RubyHash arguments = (RubyHash) args[2];
-        final IRubyObject filterInstance = args[1].callMethod(context, "new", arguments);
+        IRubyObject filter_class = args[1].callMethod(context, "with_execution_context", args[4]);
+        final IRubyObject filterInstance = filter_class.callMethod(context, "new", arguments);
         final RubyString id = (RubyString) arguments.op_aref(context, ID_KEY);
         filterInstance.callMethod(
                 context, "metric=",
                 ((AbstractMetricExt) args[3]).namespace(context, id.intern())
         );
-        filterInstance.callMethod(context, "execution_context=", args[4]);
         return new FilterDelegatorExt(context.runtime, RubyUtil.FILTER_DELEGATOR_CLASS)
                 .initialize(context, filterInstance, id);
     }
@@ -201,11 +201,11 @@ private IRubyObject plugin(final ThreadContext context, final PluginLookup.Plugi
                         context, null,
                         filterClass, klass, rubyArgs, typeScopedMetric, executionCntx);
             } else {
-                final IRubyObject pluginInstance = klass.callMethod(context, "new", rubyArgs);
+                final IRubyObject klass_with_execution_context = klass.callMethod(context, "with_execution_context", executionCntx);
+                final IRubyObject pluginInstance = klass_with_execution_context.callMethod(context, "new", rubyArgs);
                 final AbstractNamespacedMetricExt scopedMetric = typeScopedMetric.namespace(context, RubyUtil.RUBY.newSymbol(id));
                 scopedMetric.gauge(context, MetricKeys.NAME_KEY, pluginInstance.callMethod(context, "config_name"));
                 pluginInstance.callMethod(context, "metric=", scopedMetric);
-                pluginInstance.callMethod(context, "execution_context=", executionCntx);
                 return pluginInstance;
             }
         } else {
