diff --git a/Gemfile b/Gemfile
index 192b71aafc5..f16e23bed22 100644
--- a/Gemfile
+++ b/Gemfile
@@ -9,7 +9,6 @@ gem "simplecov", :group => :development
 gem "coveralls", :group => :development
 gem "rspec", "~> 3.1.0", :group => :development
 gem "logstash-devutils", "~> 0.0.15", :group => :development
-# gem "logstash-devutils", ">= 0"
 gem "benchmark-ips", :group => :development
 gem "octokit", "3.8.0", :group => :build
 gem "stud", "~> 0.0.21", :group => :build
@@ -17,10 +16,3 @@ gem "fpm", "~> 1.3.3", :group => :build
 gem "rubyzip", "~> 1.1.7", :group => :build
 gem "gems", "~> 0.8.3", :group => :build
 gem "flores", "~> 0.0.6", :group => :development
-gem "logstash-filter-clone"
-gem "logstash-filter-mutate"
-gem "logstash-filter-multiline"
-gem "logstash-input-generator"
-gem "logstash-input-stdin"
-gem "logstash-input-tcp"
-gem "logstash-output-stdout"
diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
index 6fb83a705b1..d39a40f9226 100644
--- a/Gemfile.jruby-1.9.lock
+++ b/Gemfile.jruby-1.9.lock
@@ -20,8 +20,8 @@ GEM
     addressable (2.3.8)
     arr-pm (0.0.10)
       cabin (> 0)
-    backports (3.6.6)
-    benchmark-ips (2.3.0)
+    backports (3.6.4)
+    benchmark-ips (2.2.0)
     builder (3.2.2)
     cabin (0.7.1)
     childprocess (0.5.6)
@@ -33,8 +33,7 @@ GEM
       rspec (>= 2.14, < 4)
     clamp (0.6.5)
     coderay (1.1.0)
-    concurrent-ruby (0.9.1-java)
-    coveralls (0.8.2)
+    coveralls (0.8.1)
       json (~> 1.8)
       rest-client (>= 1.6.8, < 2)
       simplecov (~> 0.10.0)
@@ -46,7 +45,7 @@ GEM
       unf (>= 0.0.5, < 1.0.0)
     faraday (0.9.1)
       multipart-post (>= 1.2, < 3)
-    ffi (1.9.10-java)
+    ffi (1.9.8-java)
     file-dependencies (0.1.6)
       minitar
     filesize (0.0.4)
@@ -65,20 +64,9 @@ GEM
       domain_name (~> 0.5)
     i18n (0.6.9)
     insist (1.0.0)
-    jls-grok (0.11.2)
-      cabin (>= 0.6.0)
     jrjackson (0.2.9)
-    json (1.8.3-java)
+    json (1.8.2-java)
     kramdown (1.8.0)
-    logstash-codec-json (1.0.1)
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-codec-json_lines (1.0.1)
-      logstash-codec-line
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-codec-line (1.0.0)
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-codec-plain (1.0.0)
-      logstash-core (>= 1.4.0, < 2.0.0)
     logstash-devutils (0.0.15-java)
       gem_publisher
       insist (= 1.0.0)
@@ -87,44 +75,8 @@ GEM
       rake
       rspec (~> 3.1.0)
       stud (>= 0.0.20)
-    logstash-filter-clone (1.0.0)
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-filter-grok (1.0.0)
-      jls-grok (~> 0.11.1)
-      logstash-core (>= 1.4.0, < 2.0.0)
-      logstash-patterns-core
-    logstash-filter-multiline (1.0.0)
-      jls-grok (~> 0.11.0)
-      logstash-core (>= 1.4.0, < 2.0.0)
-      logstash-filter-mutate
-      logstash-patterns-core
-    logstash-filter-mutate (1.0.2)
-      logstash-core (>= 1.4.0, < 2.0.0)
-      logstash-filter-grok
-      logstash-patterns-core
-    logstash-input-generator (1.0.0)
-      logstash-codec-plain
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-input-stdin (1.0.0)
-      concurrent-ruby
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-input-tcp (1.0.0)
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-output-stdout (1.0.0)
-      logstash-codec-line
-      logstash-core (>= 1.4.0, < 2.0.0)
-    logstash-patterns-core (0.3.0)
-      logstash-core (>= 1.4.0, < 2.0.0)
     method_source (0.8.2)
-    mime-types (2.6.1)
+    mime-types (2.5)
     minitar (0.5.4)
     multipart-post (2.0.0)
     netrc (0.10.3)
@@ -166,11 +118,11 @@ GEM
     spoon (0.0.4)
       ffi
     stud (0.0.21)
-    term-ansicolor (1.3.2)
+    term-ansicolor (1.3.0)
       tins (~> 1.0)
     thor (0.19.1)
     thread_safe (0.3.5-java)
-    tins (1.6.0)
+    tins (1.5.1)
     treetop (1.4.15)
       polyglot
       polyglot (>= 0.3.1)
@@ -189,13 +141,6 @@ DEPENDENCIES
   gems (~> 0.8.3)
   logstash-core (= 2.0.0.dev)!
   logstash-devutils (~> 0.0.15)
-  logstash-filter-clone
-  logstash-filter-multiline
-  logstash-filter-mutate
-  logstash-input-generator
-  logstash-input-stdin
-  logstash-input-tcp
-  logstash-output-stdout
   octokit (= 3.8.0)
   rspec (~> 3.1.0)
   rubyzip (~> 1.1.7)
diff --git a/rakelib/default_plugins.rb b/rakelib/default_plugins.rb
index 9b082b709bf..ef7b7fe682f 100644
--- a/rakelib/default_plugins.rb
+++ b/rakelib/default_plugins.rb
@@ -110,13 +110,10 @@ module RakeLib
 
     # plugins required to run the logstash core specs
     CORE_SPECS_PLUGINS = %w(
-      logstash-filter-clone
-      logstash-filter-mutate
-      logstash-filter-multiline
-      logstash-input-generator
-      logstash-input-stdin
-      logstash-input-tcp
-      logstash-output-stdout
+      logstash-codec-plain
+      logstash-codec-line
+      logstash-codec-json
+      logstash-codec-json_lines
     )
 
     TEST_JAR_DEPENDENCIES_PLUGINS = %w(
diff --git a/spec/core/conditionals_spec.rb b/spec/core/conditionals_spec.rb
index dab6fc901e3..809101f800b 100644
--- a/spec/core/conditionals_spec.rb
+++ b/spec/core/conditionals_spec.rb
@@ -11,9 +11,9 @@ def conditional(expression, &block)
       config <<-CONFIG
         filter {
           if #{expression} {
-            mutate { add_tag => "success" }
+            noop { add_tag => "success" }
           } else {
-            mutate { add_tag => "failure" }
+            noop { add_tag => "failure" }
           }
         }
       CONFIG
@@ -28,14 +28,14 @@ def conditional(expression, &block)
   describe "simple" do
     config <<-CONFIG
       input {
-        generator {
+        mock_generator {
           message => '{"foo":{"bar"},"baz": "quux"}'
           count => 1
         }
       }
       output {
         if [foo] == "bar" {
-          stdout { }
+          mock_stdout { }
         }
       }
     CONFIG
@@ -52,13 +52,13 @@ def conditional(expression, &block)
   describe "simple" do
     config <<-CONFIG
       filter {
-        mutate { add_field => { "always" => "awesome" } }
+        noop { add_field => { "always" => "awesome" } }
         if [foo] == "bar" {
-          mutate { add_field => { "hello" => "world" } }
+          noop { add_field => { "hello" => "world" } }
         } else if [bar] == "baz" {
-          mutate { add_field => { "fancy" => "pants" } }
+          noop { add_field => { "fancy" => "pants" } }
         } else {
-          mutate { add_field => { "free" => "hugs" } }
+          noop { add_field => { "free" => "hugs" } }
         }
       }
     CONFIG
@@ -89,13 +89,13 @@ def conditional(expression, &block)
     config <<-CONFIG
       filter {
         if [nest] == 123 {
-          mutate { add_field => { "always" => "awesome" } }
+          noop { add_field => { "always" => "awesome" } }
           if [foo] == "bar" {
-            mutate { add_field => { "hello" => "world" } }
+            noop { add_field => { "hello" => "world" } }
           } else if [bar] == "baz" {
-            mutate { add_field => { "fancy" => "pants" } }
+            noop { add_field => { "fancy" => "pants" } }
           } else {
-            mutate { add_field => { "free" => "hugs" } }
+            noop { add_field => { "free" => "hugs" } }
           }
         }
       }
@@ -134,7 +134,7 @@ def conditional(expression, &block)
     config <<-CONFIG
       filter {
         if [foo] == [bar] {
-          mutate { add_tag => woot }
+          noop { add_tag => woot }
         }
       }
     CONFIG
@@ -148,22 +148,22 @@ def conditional(expression, &block)
     config <<-CONFIG
       filter {
         if [foo] in [foobar] {
-          mutate { add_tag => "field in field" }
+          noop { add_tag => "field in field" }
         }
         if [foo] in "foo" {
-          mutate { add_tag => "field in string" }
+          noop { add_tag => "field in string" }
         }
         if "hello" in [greeting] {
-          mutate { add_tag => "string in field" }
+          noop { add_tag => "string in field" }
         }
         if [foo] in ["hello", "world", "foo"] {
-          mutate { add_tag => "field in list" }
+          noop { add_tag => "field in list" }
         }
         if [missing] in [alsomissing] {
-          mutate { add_tag => "shouldnotexist" }
+          noop { add_tag => "shouldnotexist" }
         }
         if !("foo" in ["hello", "world"]) {
-          mutate { add_tag => "shouldexist" }
+          noop { add_tag => "shouldexist" }
         }
       }
     CONFIG
@@ -181,12 +181,12 @@ def conditional(expression, &block)
   describe "the 'not in' operator" do
     config <<-CONFIG
       filter {
-        if "foo" not in "baz" { mutate { add_tag => "baz" } }
-        if "foo" not in "foo" { mutate { add_tag => "foo" } }
-        if !("foo" not in "foo") { mutate { add_tag => "notfoo" } }
-        if "foo" not in [somelist] { mutate { add_tag => "notsomelist" } }
-        if "one" not in [somelist] { mutate { add_tag => "somelist" } }
-        if "foo" not in [alsomissing] { mutate { add_tag => "no string in missing field" } }
+        if "foo" not in "baz" { noop { add_tag => "baz" } }
+        if "foo" not in "foo" { noop { add_tag => "foo" } }
+        if !("foo" not in "foo") { noop { add_tag => "notfoo" } }
+        if "foo" not in [somelist] { noop { add_tag => "notsomelist" } }
+        if "one" not in [somelist] { noop { add_tag => "somelist" } }
+        if "foo" not in [alsomissing] { noop { add_tag => "no string in missing field" } }
       }
     CONFIG
 
@@ -369,14 +369,14 @@ def conditional(expression, &block)
     config <<-CONFIG
       filter {
         if [type] == "original" {
-          clone {
+          mock_clone {
             clones => ["clone"]
           }
         }
         if [type] == "original" {
-          mutate { add_field => { "cond1" => "true" } }
+          noop { add_field => { "cond1" => "true" } }
         } else {
-          mutate { add_field => { "cond2" => "true" } }
+          noop { add_field => { "cond2" => "true" } }
         }
       }
     CONFIG
@@ -399,14 +399,14 @@ def conditional(expression, &block)
     config <<-CONFIG
       filter {
         if [type] == "original" {
-          clone {
+          mock_clone {
             clones => ["clone1", "clone2"]
           }
         }
         if [type] == "clone1" {
-          mutate { add_field => { "cond1" => "true" } }
+          noop { add_field => { "cond1" => "true" } }
         } else if [type] == "clone2" {
-          mutate { add_field => { "cond2" => "true" } }
+          noop { add_field => { "cond2" => "true" } }
         }
       }
     CONFIG
diff --git a/spec/core/pipeline_spec.rb b/spec/core/pipeline_spec.rb
index d0021d4a396..c87788ee041 100644
--- a/spec/core/pipeline_spec.rb
+++ b/spec/core/pipeline_spec.rb
@@ -1,58 +1,6 @@
 # encoding: utf-8
 require "spec_helper"
 
-class DummyInput < LogStash::Inputs::Base
-  config_name "dummyinput"
-  milestone 2
-
-  def register
-  end
-
-  def run(queue)
-  end
-
-  def close
-  end
-end
-
-class DummyCodec < LogStash::Codecs::Base
-  config_name "dummycodec"
-  milestone 2
-
-  def decode(data)
-    data
-  end
-
-  def encode(event)
-    event
-  end
-
-  def close
-  end
-end
-
-class DummyOutput < LogStash::Outputs::Base
-  config_name "dummyoutput"
-  milestone 2
-
-  attr_reader :num_closes
-
-  def initialize(params={})
-    super
-    @num_closes = 0
-  end
-
-  def register
-  end
-
-  def receive(event)
-  end
-
-  def close
-    @num_closes += 1
-  end
-end
-
 class TestPipeline < LogStash::Pipeline
   attr_reader :outputs
 end
@@ -116,60 +64,69 @@ class TestPipeline < LogStash::Pipeline
     end
   end
 
-  context "compiled flush function" do
+context "compiled flush function" do
 
-    context "cancelled events should not propagate down the filters" do
-      config <<-CONFIG
-        filter {
-          multiline {
-           pattern => "hello"
-           what => next
-          }
-          multiline {
-           pattern => "hello"
-           what => next
+  let(:count)    { 1 }
+  let(:canceled) { true }
+
+  let(:config) do
+    <<-CONFIG
+       input  {
+          mock_generator {
+            count => #{count}
+            canceled => #{canceled}
           }
-        }
-      CONFIG
+       }
+       filter { noop {} }
+    CONFIG
+  end
 
-      sample("hello") do
-        expect(subject["message"]).to eq("hello")
+  let(:events) do
+    input(config) do |pipeline, queue|
+      sleep 0.5
+      events = []
+      count.times do
+        begin
+          events << queue.pop(true)
+        rescue
+          # pass
+        end
       end
+      events
     end
+  end
 
-    context "new events should propagate down the filters" do
-      config <<-CONFIG
-        filter {
-          clone {
-            clones => ["clone1"]
-          }
-          multiline {
-            pattern => "bar"
-            what => previous
-          }
-        }
-      CONFIG
+  context "compiled flush function" do
 
-      sample(["foo", "bar"]) do
-        expect(subject.size).to eq(2)
+    context "when events are canceled during the proccess" do
 
-        expect(subject[0]["message"]).to eq("foo\nbar")
-        expect(subject[0]["type"]).to be_nil
-        expect(subject[1]["message"]).to eq("foo\nbar")
-        expect(subject[1]["type"]).to eq("clone1")
+      it "cancelled events should not propagate down the filters" do
+        expect(events).to be_empty
+      end
+
+    end
+
+    context "when events are not canceled during the proccess" do
+
+      let(:canceled) { false }
+
+      it "eents should not propagate down the filters" do
+        expect(events).not_to be_empty
       end
     end
   end
 
+end
+
   context "compiled filter funtions" do
 
     context "new events should propagate down the filters" do
       config <<-CONFIG
         filter {
-          clone {
-            clones => ["clone1", "clone2"]
+          mock_clone {
+            clones => ["mock_clone1", "mock_clone2"]
           }
-          mutate {
+          noop {
             add_field => {"foo" => "bar"}
           }
         }
@@ -183,11 +140,11 @@ class TestPipeline < LogStash::Pipeline
         expect(subject[0]["foo"]).to eq("bar")
 
         expect(subject[1]["message"]).to eq("hello")
-        expect(subject[1]["type"]).to eq("clone1")
+        expect(subject[1]["type"]).to eq("mock_clone1")
         expect(subject[1]["foo"]).to eq("bar")
 
         expect(subject[2]["message"]).to eq("hello")
-        expect(subject[2]["type"]).to eq("clone2")
+        expect(subject[2]["type"]).to eq("mock_clone2")
         expect(subject[2]["foo"]).to eq("bar")
       end
     end
diff --git a/spec/filters/base_spec.rb b/spec/plugins/filter_spec.rb
similarity index 96%
rename from spec/filters/base_spec.rb
rename to spec/plugins/filter_spec.rb
index 0dfa31480b8..0ca91034176 100644
--- a/spec/filters/base_spec.rb
+++ b/spec/plugins/filter_spec.rb
@@ -2,19 +2,6 @@
 require "spec_helper"
 require "logstash/json"
 
-# use a dummy NOOP filter to test Filters::Base
-class LogStash::Filters::NOOP < LogStash::Filters::Base
-  config_name "noop"
-  milestone 2
-
-  def register; end
-
-  def filter(event)
-    return unless filter?(event)
-    filter_matched(event)
-  end
-end
-
 describe LogStash::Filters::Base do
   subject {LogStash::Filters::Base.new({})}
 
diff --git a/spec/inputs/base_spec.rb b/spec/plugins/input_spec.rb
similarity index 85%
rename from spec/inputs/base_spec.rb
rename to spec/plugins/input_spec.rb
index d87f07b49f6..1b13ecb5423 100644
--- a/spec/inputs/base_spec.rb
+++ b/spec/plugins/input_spec.rb
@@ -1,15 +1,6 @@
 # encoding: utf-8
 require "spec_helper"
 
-# use a dummy NOOP input to test Inputs::Base
-class LogStash::Inputs::NOOP < LogStash::Inputs::Base
-  config_name "noop"
-  milestone 2
-
-  def register; end
-
-end
-
 describe "LogStash::Inputs::Base#decorate" do
   it "should add tag" do
     input = LogStash::Inputs::NOOP.new("tags" => "value")
@@ -64,11 +55,10 @@ def register; end
 
 describe "LogStash::Inputs::Base#fix_streaming_codecs" do
   it "should carry the charset setting along when switching" do
-    require "logstash/inputs/tcp"
     require "logstash/codecs/plain"
     plain = LogStash::Codecs::Plain.new("charset" => "CP1252")
-    tcp = LogStash::Inputs::Tcp.new("codec" => plain, "port" => 3333)
-    tcp.instance_eval { fix_streaming_codecs }
-    expect(tcp.codec.charset).to eq("CP1252")
+    plugin = LogStash::Inputs::MockGenerator.new("codec" => plain)
+    plugin.instance_eval { fix_streaming_codecs }
+    expect(plugin.codec.charset).to eq("CP1252")
   end
 end
diff --git a/spec/outputs/base_spec.rb b/spec/plugins/output_spec.rb
similarity index 84%
rename from spec/outputs/base_spec.rb
rename to spec/plugins/output_spec.rb
index 2702d9603ce..d34fbe4f4e5 100644
--- a/spec/outputs/base_spec.rb
+++ b/spec/plugins/output_spec.rb
@@ -1,20 +1,6 @@
 # encoding: utf-8
 require "spec_helper"
 
-# use a dummy NOOP output to test Outputs::Base
-class LogStash::Outputs::NOOP < LogStash::Outputs::Base
-  config_name "noop"
-  milestone 2
-
-  config :dummy_option, :validate => :string
-
-  def register; end
-
-  def receive(event)
-    return output?(event)
-  end
-end
-
 describe "LogStash::Outputs::Base#worker_setup" do
   it "should create workers using original parameters except workers = 1" do
     params = { "dummy_option" => "potatoes", "codec" => "json", "workers" => 2 }
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
index 5428fd8fd90..be218a67441 100644
--- a/spec/spec_helper.rb
+++ b/spec/spec_helper.rb
@@ -1,10 +1,10 @@
 # encoding: utf-8
-require_relative 'coverage_helper'
+require_relative 'support/coverage_helper'
 # In order to archive an expected coverage analysis we need to eager load
 # all logstash code base, otherwise it will not get a good analysis.
 CoverageHelper.eager_load if ENV['COVERAGE']
-
 require "logstash/devutils/rspec/spec_helper"
+require_relative "support/plugins_helper"
 
 def installed_plugins
   Gem::Specification.find_all.select { |spec| spec.metadata["logstash_plugin"] }.map { |plugin| plugin.name }
diff --git a/spec/coverage_helper.rb b/spec/support/coverage_helper.rb
similarity index 100%
rename from spec/coverage_helper.rb
rename to spec/support/coverage_helper.rb
diff --git a/spec/support/plugins_helper.rb b/spec/support/plugins_helper.rb
new file mode 100644
index 00000000000..74759696316
--- /dev/null
+++ b/spec/support/plugins_helper.rb
@@ -0,0 +1,157 @@
+# encoding: utf-8
+
+
+class LogStash::Inputs::MockGenerator < LogStash::Inputs::Base
+
+  config_name "mock_generator"
+  default :codec, "plain"
+
+  config :message, :validate => :string, :default => "Hello world!"
+  config :lines, :validate => :array
+  config :count, :validate => :number, :default => 0
+  config :canceled, :validate => :boolean, :default => false
+
+  def register
+    @count = Array(@count).first
+  end
+
+  def run(queue)
+    i = 0
+    @lines = [@message] if @lines.nil?
+    while (i < @count)
+      @lines.each do |line|
+        @codec.decode(line.clone) do |event|
+          decorate(event)
+          event["sequence"] = i
+          event.cancel if @canceled
+          queue << event
+        end
+        i+=1
+      end
+    end
+  end
+end
+
+class LogStash::Filters::MockClone < LogStash::Filters::Base
+
+  config_name "mock_clone"
+
+  config :clones, :validate => :array, :default => []
+
+  def register; end
+
+  def filter(event)
+    return unless filter?(event)
+    @clones.each do |type|
+      clone = event.clone
+      clone["type"] = type
+      filter_matched(clone)
+      yield clone
+    end
+  end
+
+end
+
+class LogStash::Outputs::MockStdout < LogStash::Outputs::Base
+
+  config_name "mock_stdout"
+
+  default :codec, "line"
+
+  public
+  def register
+    @codec.on_event do |event, data|
+      $stdout.write(data)
+    end
+  end
+
+  def receive(event)
+    return unless output?(event)
+    return if event == LogStash::SHUTDOWN
+    @codec.encode(event)
+  end
+
+end # class LogStash::Outputs::Stdout
+
+# use a dummy NOOP input to test Inputs::Base
+class LogStash::Inputs::NOOP < LogStash::Inputs::Base
+  config_name "noop"
+
+  def register; end
+
+end
+
+# use a dummy NOOP filter to test Filters::Base
+class LogStash::Filters::NOOP < LogStash::Filters::Base
+  config_name "noop"
+
+  def register; end
+
+  def filter(event)
+    return unless filter?(event)
+    filter_matched(event)
+  end
+end
+
+
+# use a dummy NOOP output to test Outputs::Base
+class LogStash::Outputs::NOOP < LogStash::Outputs::Base
+  config_name "noop"
+
+  config :dummy_option, :validate => :string
+
+  def register; end
+
+  def receive(event)
+    return output?(event)
+  end
+end
+
+class DummyInput < LogStash::Inputs::Base
+  config_name "dummyinput"
+
+  def register
+  end
+
+  def run(queue)
+  end
+
+  def close
+  end
+end
+
+class DummyCodec < LogStash::Codecs::Base
+  config_name "dummycodec"
+
+  def decode(data)
+    data
+  end
+
+  def encode(event)
+    event
+  end
+
+  def close
+  end
+end
+
+class DummyOutput < LogStash::Outputs::Base
+  config_name "dummyoutput"
+
+  attr_reader :num_closes
+
+  def initialize(params={})
+    super
+    @num_closes = 0
+  end
+
+  def register
+  end
+
+  def receive(event)
+  end
+
+  def close
+    @num_closes += 1
+  end
+end
