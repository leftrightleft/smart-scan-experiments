diff --git a/tools/paquet/.gitignore b/tools/paquet/.gitignore
new file mode 100644
index 00000000000..ebcca5e3bda
--- /dev/null
+++ b/tools/paquet/.gitignore
@@ -0,0 +1,6 @@
+/.bundle/
+/.yardoc
+/Gemfile.lock
+/spec/support/dependencies
+/spec/support/.bundle
+/spec/support/*.lock
diff --git a/tools/paquet/Gemfile b/tools/paquet/Gemfile
new file mode 100644
index 00000000000..67dedf9c429
--- /dev/null
+++ b/tools/paquet/Gemfile
@@ -0,0 +1,4 @@
+source 'https://rubygems.org'
+
+# Specify your gem's dependencies in paquet.gemspec
+gemspec
diff --git a/tools/paquet/LICENSE b/tools/paquet/LICENSE
new file mode 100644
index 00000000000..43976b73b2b
--- /dev/null
+++ b/tools/paquet/LICENSE
@@ -0,0 +1,13 @@
+Copyright (c) 2012â€“2016 Elasticsearch <http://www.elastic.co>
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
diff --git a/tools/paquet/README.md b/tools/paquet/README.md
new file mode 100644
index 00000000000..ac61e149a0f
--- /dev/null
+++ b/tools/paquet/README.md
@@ -0,0 +1,70 @@
+# Paquet
+
+This gem allow a developer to create a uber gem, a uber gem is a gem that content the current gem and his dependencies and is distributed as a tarball.
+
+This tool allow to define what will be bundler and what should be ignored, it uses the dependencies defined in the gemspec and gemfile to know what to download.
+
+Note that by default no gems will be bundled.
+
+
+## Installation
+
+Add this line to your application's Gemfile:
+
+```ruby
+gem 'paquet'
+```
+
+And then execute:
+
+    $ bundle
+
+## Usage
+Define the dependencies in your Rakefile
+
+```ruby
+# encoding: utf-8
+require "paquet"
+
+TARGET_DIRECTORY = File.join(File.dirname(__FILE__), "dependencies")
+
+Paquet::Task.new(TARGET_DIRECTORY) do
+  pack "manticore"
+  pack "launchy"
+  pack "gemoji"
+  pack "logstash-output-elasticsearch"
+
+  # Everything not defined here will be assumed to be provided
+  # by the target installation
+  ignore "logstash-core-plugin-api"
+  ignore "logstash-core"
+end
+```
+
+And run
+
+```
+bundle exec rake paquet:vendor
+```
+
+The dependencies will be downloaded in your target directory.
+
+## Project Principles
+
+* Community: If a newbie has a bad time, it's a bug.
+* Software: Make it work, then make it right, then make it fast.
+* Technology: If it doesn't do a thing today, we can make it do it tomorrow.
+
+## Contributing
+
+All contributions are welcome: ideas, patches, documentation, bug reports,
+complaints, and even something you drew up on a napkin.
+
+Programming is not a required skill. Whatever you've seen about open source and
+maintainers or community members  saying "send patches or die" - you will not
+see that here.
+
+It is more important to me that you are able to contribute.
+
+For more information about contributing, see the
+[CONTRIBUTING](../CONTRIBUTING.md) file.
diff --git a/tools/paquet/Rakefile b/tools/paquet/Rakefile
new file mode 100644
index 00000000000..43022f711e2
--- /dev/null
+++ b/tools/paquet/Rakefile
@@ -0,0 +1,2 @@
+require "bundler/gem_tasks"
+task :default => :spec
diff --git a/tools/paquet/lib/paquet.rb b/tools/paquet/lib/paquet.rb
new file mode 100644
index 00000000000..0e19b6221eb
--- /dev/null
+++ b/tools/paquet/lib/paquet.rb
@@ -0,0 +1,9 @@
+# encoding: utf-8
+require "paquet/version"
+require "paquet/shell_ui"
+require "paquet/gem"
+require "paquet/dependency"
+require "paquet/rspec/tasks"
+
+module Paquet
+end
diff --git a/tools/paquet/lib/paquet/dependency.rb b/tools/paquet/lib/paquet/dependency.rb
new file mode 100644
index 00000000000..08fc739cc7a
--- /dev/null
+++ b/tools/paquet/lib/paquet/dependency.rb
@@ -0,0 +1,19 @@
+module Paquet
+  class Dependency
+    attr_reader :name, :version, :platform
+
+    def initialize(name, version, platform)
+      @name = name
+      @version = version
+      @platform = platform
+    end
+
+    def to_s
+      "#{name}-#{version}"
+    end
+
+    def ruby?
+      platform == "ruby"
+    end
+  end
+end
diff --git a/tools/paquet/lib/paquet/gem.rb b/tools/paquet/lib/paquet/gem.rb
new file mode 100644
index 00000000000..2e009c78f64
--- /dev/null
+++ b/tools/paquet/lib/paquet/gem.rb
@@ -0,0 +1,78 @@
+# encoding: utf-8
+require "paquet/dependency"
+require "paquet/shell_ui"
+require "paquet/utils"
+
+module Paquet
+  class Gem
+    RUBYGEMS_URI = "https://rubygems.org/downloads"
+
+    attr_reader :gems, :ignores
+
+    def initialize(target_path)
+      @target_path = target_path
+      @gems = []
+      @ignores = []
+    end
+
+    def add(name)
+      @gems << name
+    end
+
+    def ignore(name)
+      @ignores << name
+    end
+
+    def pack
+      Paquet::ui.info("Cleaning existing target path: #{@target_path}")
+
+      FileUtils.rm_rf(@target_path)
+      FileUtils.mkdir_p(@target_path)
+
+      download_gems(collect_required_gems)
+    end
+
+    def size
+      @gems.size
+    end
+
+    def ignore?(name)
+      ignores.include?(name)
+    end
+
+    def collect_required_gems()
+      candidates = []
+      @gems.each do |name|
+        candidates += resolve_dependencies(name)
+      end
+      candidates.flatten
+    end
+
+    def resolve_dependencies(name)
+      return [] if ignore?(name)
+
+      spec = ::Gem::Specification.find_by_name(name)
+      current_dependency = Dependency.new(name, spec.version, spec.platform)
+      dependencies = spec.dependencies.select { |dep| dep.type == :runtime }
+
+      if dependencies.size == 0
+        [current_dependency]
+      else
+        [dependencies.collect { |spec| resolve_dependencies(spec.name) }, current_dependency].flatten.uniq { |s| s.name }
+      end
+    end
+
+    def download_gems(required_gems)
+      required_gems
+        .collect { |gem| gem.ruby? ? "#{gem.name}-#{gem.version}.gem" : "#{gem.name}-#{gem.version}-#{gem.platform}.gem" }
+        .uniq
+        .each do |name|
+        source = "#{RUBYGEMS_URI}/#{name}"
+        destination = File.join(@target_path, name)
+
+        Paquet::ui.info("Vendoring: #{name}, downloading: #{source}")
+        Paquet::Utils::download_file(source, destination)
+      end
+    end
+  end
+end
diff --git a/tools/paquet/lib/paquet/rspec/tasks.rb b/tools/paquet/lib/paquet/rspec/tasks.rb
new file mode 100644
index 00000000000..bb352471d2a
--- /dev/null
+++ b/tools/paquet/lib/paquet/rspec/tasks.rb
@@ -0,0 +1,40 @@
+# encoding: utf-8
+require "bundler"
+require "rake"
+require "rake/tasklib"
+require "fileutils"
+require "net/http"
+require "paquet/gem"
+
+# This class add new rake methods to a an existing ruby gem,
+# these methods allow developpers to create a Uber gem, a uber gem is
+# a tarball that contains the current gems and one or more of his dependencies.
+#
+# This Tool will take care of looking at the current dependency tree defined in the Gemspec and the gemfile
+# and will traverse all graph and download the gem file into a specified directory.
+#
+# By default, the tool wont fetch everything and the developper need to declare what gems he want to download.
+module Paquet
+  class Task < Rake::TaskLib
+    def initialize(target_path, &block)
+      @gem = Gem.new(target_path)
+
+      instance_eval(&block)
+
+      namespace :paquet do
+        desc "Build a pack with #{@gem.size} gems: #{@gem.gems.join(",")}"
+        task :vendor do
+          @gem.pack
+        end
+      end
+    end
+
+    def pack(name)
+      @gem.add(name)
+    end
+
+    def ignore(name)
+      @gem.ignore(name)
+    end
+  end
+end
diff --git a/tools/paquet/lib/paquet/shell_ui.rb b/tools/paquet/lib/paquet/shell_ui.rb
new file mode 100644
index 00000000000..f1f73027528
--- /dev/null
+++ b/tools/paquet/lib/paquet/shell_ui.rb
@@ -0,0 +1,24 @@
+# encoding: utf-8
+module Paquet
+  class ShellUi
+    def debug(message)
+      report_message(:debug, message) if debug?
+    end
+
+    def info(message)
+      report_message(:info, message)
+    end
+
+    def report_message(level, message)
+      puts "[#{level.upcase}]: #{message}"
+    end
+
+    def debug?
+      ENV["DEBUG"]
+    end
+  end
+
+  def self.ui
+    @logger ||= ShellUi.new
+  end
+end
diff --git a/tools/paquet/lib/paquet/utils.rb b/tools/paquet/lib/paquet/utils.rb
new file mode 100644
index 00000000000..b12f2bd87cb
--- /dev/null
+++ b/tools/paquet/lib/paquet/utils.rb
@@ -0,0 +1,41 @@
+# encoding: utf-8
+require "fileutils"
+require "uri"
+
+module Paquet
+  class Utils
+    HTTPS_SCHEME = "https"
+    REDIRECTION_LIMIT = 5
+
+    def self.download_file(source, destination, counter = REDIRECTION_LIMIT)
+      raise "Too many redirection" if counter == 0
+
+      begin
+        f = File.open(destination, "w")
+
+        uri = URI.parse(source)
+
+        http = Net::HTTP.new(uri.host, uri.port, )
+        http.use_ssl = uri.scheme ==  HTTPS_SCHEME
+
+        response = http.get(uri.path)
+
+        case response
+        when Net::HTTPSuccess
+          f.write(response.body)
+        when Net::HTTPRedirection
+          counter -= 1
+          download_file(response['location'], destination, counter)
+        else
+          raise "Response not handled: #{response.class}"
+        end
+        f.path
+      rescue => e
+        FileUtils.rm_rf(f.path) rescue nil
+        raise e
+      ensure
+        f.close
+      end
+    end
+  end
+end
diff --git a/tools/paquet/lib/paquet/version.rb b/tools/paquet/lib/paquet/version.rb
new file mode 100644
index 00000000000..454bc4d4680
--- /dev/null
+++ b/tools/paquet/lib/paquet/version.rb
@@ -0,0 +1,3 @@
+module Paquet
+  VERSION = "0.1.1"
+end
diff --git a/tools/paquet/paquet.gemspec b/tools/paquet/paquet.gemspec
new file mode 100644
index 00000000000..b784ab3802b
--- /dev/null
+++ b/tools/paquet/paquet.gemspec
@@ -0,0 +1,28 @@
+# coding: utf-8
+lib = File.expand_path('../lib', __FILE__)
+$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
+require 'paquet/version'
+
+Gem::Specification.new do |spec|
+  spec.name          = "paquet"
+  spec.version       = Paquet::VERSION
+  spec.authors       = ["Elastic"]
+  spec.email         = ["info@elastic.co"]
+  spec.license       = "Apache License (2.0)"
+
+  spec.summary       = %q{Rake helpers to create a uber gem}
+  spec.description   = %q{This gem add a few rake tasks to create a uber gems that will be shipped as a zip}
+  spec.homepage      = "https://github.com/elastic/logstash"
+
+
+  spec.files         = Dir.glob(File.join(File.dirname(__FILE__), "lib", "**", "*.rb"))
+
+  spec.bindir        = "exe"
+  spec.executables   = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
+  spec.require_paths = ["lib"]
+
+  spec.add_development_dependency "rspec"
+  spec.add_development_dependency "pry"
+  spec.add_development_dependency "webmock"
+  spec.add_development_dependency "stud"
+end
diff --git a/tools/paquet/spec/integration/paquet_spec.rb b/tools/paquet/spec/integration/paquet_spec.rb
new file mode 100644
index 00000000000..267f65efe4c
--- /dev/null
+++ b/tools/paquet/spec/integration/paquet_spec.rb
@@ -0,0 +1,33 @@
+# encoding: utf-8
+require "bundler"
+require "fileutils"
+require "stud/temporary"
+
+describe "Pack the dependencies", :integration => true do
+  let(:path) { File.expand_path(File.join(File.dirname(__FILE__), "..", "support")) }
+  let(:vendor_path) { Stud::Temporary.pathname }
+  let(:dependecies_path) { File.join(path, "dependencies") }
+  let(:bundler_cmd) { "bundle install --path #{vendor_path}"}
+  let(:rake_cmd) { "bundler exec rake paquet:vendor" }
+  let(:bundler_config) { File.join(path, ".bundler") }
+
+  before do
+    FileUtils.rm_rf(bundler_config)
+    FileUtils.rm_rf(vendor_path)
+
+    Bundler.with_clean_env do
+      Dir.chdir(path) do
+        system(bundler_cmd)
+        system(rake_cmd)
+      end
+    end
+  end
+
+  it "download the dependencies" do
+    downloaded_dependencies = Dir.glob(File.join(dependecies_path, "*.gem"))
+
+    expect(downloaded_dependencies.size).to eq(2)
+    expect(downloaded_dependencies).to include(/flores-0\.0\.6/,/stud/)
+    expect(downloaded_dependencies).not_to include(/logstash-devutils/)
+  end
+end
diff --git a/tools/paquet/spec/paquet/dependency_spec.rb b/tools/paquet/spec/paquet/dependency_spec.rb
new file mode 100644
index 00000000000..aeab6663aa0
--- /dev/null
+++ b/tools/paquet/spec/paquet/dependency_spec.rb
@@ -0,0 +1,36 @@
+# encoding: utf-8
+require "paquet/dependency"
+
+describe Paquet::Dependency do
+  let(:name) { "mygem" }
+  let(:version) { "1.2.3" }
+  let(:platform) { "ruby" }
+
+  subject { described_class.new(name, version, platform) }
+
+  it "returns the name" do
+    expect(subject.name).to eq(name)
+  end
+
+  it "returns the version" do
+    expect(subject.version).to eq(version)
+  end
+
+  context "when the platform is mri" do
+    it "returns true" do
+      expect(subject.ruby?).to be_truthy
+    end
+  end
+
+  context "platform is jruby" do
+    let(:platform) { "java"}
+
+    it "returns false" do
+      expect(subject.ruby?).to be_falsey
+    end
+  end
+
+  it "return a meaninful string" do
+    expect(subject.to_s).to eq("#{name}-#{version}")
+  end
+end
diff --git a/tools/paquet/spec/paquet/gem_spec.rb b/tools/paquet/spec/paquet/gem_spec.rb
new file mode 100644
index 00000000000..5226c68e8d0
--- /dev/null
+++ b/tools/paquet/spec/paquet/gem_spec.rb
@@ -0,0 +1,24 @@
+# encoding: utf-8
+require "paquet/gem"
+require "stud/temporary"
+
+describe Paquet::Gem do
+  let(:target_path) { Stud::Temporary.pathname }
+  let(:dummy_gem) { "dummy-gem" }
+
+  subject { described_class.new(target_path) }
+
+  it "adds gem to pack" do
+    subject.add(dummy_gem)
+    expect(subject.gems).to include(dummy_gem)
+  end
+
+  it "allows to ignore gems" do
+    subject.ignore(dummy_gem)
+    expect(subject.ignore?(dummy_gem))
+  end
+
+  it "keeps track of the number of gem to pack" do
+    expect { subject.add(dummy_gem) }.to change { subject.size }.by(1)
+  end
+end
diff --git a/tools/paquet/spec/paquet/shell_ui_spec.rb b/tools/paquet/spec/paquet/shell_ui_spec.rb
new file mode 100644
index 00000000000..398274e9445
--- /dev/null
+++ b/tools/paquet/spec/paquet/shell_ui_spec.rb
@@ -0,0 +1,40 @@
+# encoding: utf-8
+require "paquet/shell_ui"
+
+describe Paquet::ShellUi do
+  let(:message) { "hello world" }
+
+  subject { described_class.new }
+
+  context "when debug is on" do
+    before :all do
+      @debug = ENV["debug"]
+      ENV["DEBUG"] = "1"
+    end
+
+    after :all do
+      ENV["DEBUG"] = @debug
+    end
+
+    it "show the debug statement" do
+      expect(subject).to receive(:puts).with("[DEBUG]: #{message}")
+      subject.debug(message)
+    end
+  end
+
+  context "not in debug" do
+    before :all do
+      @debug = ENV["debug"]
+      ENV["DEBUG"] = nil
+    end
+
+    after :all do
+      ENV["DEBUG"] = @debug
+    end
+
+    it "doesnt show the debug statement" do
+      expect(subject).not_to receive(:puts).with("[DEBUG]: #{message}")
+      subject.debug(message)
+    end
+  end
+end
diff --git a/tools/paquet/spec/paquet/utils_spec.rb b/tools/paquet/spec/paquet/utils_spec.rb
new file mode 100644
index 00000000000..de636526d7a
--- /dev/null
+++ b/tools/paquet/spec/paquet/utils_spec.rb
@@ -0,0 +1,93 @@
+# encoding: utf-8
+require "paquet/utils"
+require "stud/temporary"
+require "spec_helper"
+
+describe Paquet::Utils do
+  subject { described_class }
+
+  let(:url) { "https://localhost:8898/my-file.txt"}
+  let(:destination) do
+    p = Stud::Temporary.pathname
+    FileUtils.mkdir_p(p)
+    File.join(p, "tmp-file")
+  end
+
+  let(:content) { "its halloween, halloween!" }
+
+  context "when the file exist" do
+    before do
+      stub_request(:get, url).to_return(
+        { :status => 200,
+          :body => content,
+          :headers => {}}
+      )
+    end
+
+    it "download the file to local temporary file" do
+      expect(File.read(subject.download_file(url, destination))).to match(content)
+    end
+
+    context "when an exception occur" do
+      let(:temporary_path) { Stud::Temporary.pathname }
+
+      before do
+        expect(URI).to receive(:parse).with(anything).and_raise("something went wrong")
+      end
+
+      it "deletes the temporary file" do
+        subject.download_file(url, destination) rescue nil
+        expect(File.exist?(destination)).to be_falsey
+      end
+    end
+  end
+
+  context "on redirection" do
+    let(:redirect_response) { instance_double("Net::HTTP::Response", :code => "302", :headers => { "location" => "https://localhost:8888/new_path" }) }
+    let(:response_ok) { instance_double("Net::HTTP::Response", :code => "200") }
+
+    context "less than the maximun of redirection" do
+      let(:redirect_url) { "https://localhost:8898/redirect/my-file.txt"}
+
+      before do
+        stub_request(:get, url).to_return(
+          { :status => 302, :headers => { "location" => redirect_url }}
+        )
+
+        stub_request(:get, url).to_return(
+          { :status => 200, :body => content }
+        )
+      end
+
+      it "follows the redirection" do
+        expect(File.read(subject.download_file(url, destination))).to match(content)
+      end
+    end
+
+    context "too many redirection" do
+      before do
+        stub_request(:get, url).to_return(
+          { :status => 302, :headers => { "location" => url }}
+        )
+      end
+
+      it "raises an exception" do
+        expect { subject.download_file(url, destination) }.to raise_error(/Too many redirection/)
+      end
+    end
+  end
+
+  [404, 400, 401, 500].each do |code|
+    context "When the server return #{code}" do
+      before do
+        stub_request(:get, url).to_return(
+          { :status => code }
+        )
+      end
+
+      it "raises an exception" do
+        expect { subject.download_file(url, destination) }.to raise_error(/Response not handled/)
+      end
+    end
+  end
+end
diff --git a/tools/paquet/spec/spec_helper.rb b/tools/paquet/spec/spec_helper.rb
new file mode 100644
index 00000000000..a2d0aa45d42
--- /dev/null
+++ b/tools/paquet/spec/spec_helper.rb
@@ -0,0 +1,2 @@
+# encoding: utf-8
+require "webmock/rspec"
diff --git a/tools/paquet/spec/support/Gemfile b/tools/paquet/spec/support/Gemfile
new file mode 100644
index 00000000000..884cbedd8cc
--- /dev/null
+++ b/tools/paquet/spec/support/Gemfile
@@ -0,0 +1,4 @@
+source "https://rubygems.org"
+gemspec
+gem "paquet", :path => "../../"
+
diff --git a/tools/paquet/spec/support/Rakefile b/tools/paquet/spec/support/Rakefile
new file mode 100644
index 00000000000..3b8d26ce65f
--- /dev/null
+++ b/tools/paquet/spec/support/Rakefile
@@ -0,0 +1,11 @@
+# encoding: utf-8
+require "paquet"
+
+TARGET_DIRECTORY = File.join(File.dirname(__FILE__), "dependencies")
+
+Paquet::Task.new(TARGET_DIRECTORY) do
+  pack "stud"
+  pack "flores"
+
+  ignore "logstash-devutils"
+end
diff --git a/tools/paquet/spec/support/paquet.gemspec b/tools/paquet/spec/support/paquet.gemspec
new file mode 100644
index 00000000000..668d109a74a
--- /dev/null
+++ b/tools/paquet/spec/support/paquet.gemspec
@@ -0,0 +1,17 @@
+# coding: utf-8
+
+Gem::Specification.new do |spec|
+  spec.name          = "paquet-test"
+  spec.version       = "0.0.0"
+  spec.authors       = ["Elastic"]
+  spec.email         = ["info@elastic.co"]
+  spec.license       = "Apache License (2.0)"
+
+  spec.summary       = %q{testing gem}
+  spec.description   = %q{testing gem}
+  spec.homepage      = "https://github.com/elastic/logstash"
+
+  spec.add_runtime_dependency "stud"
+  spec.add_runtime_dependency "flores", "0.0.6"
+  spec.add_runtime_dependency "logstash-devutils", "0.0.6"
+end
