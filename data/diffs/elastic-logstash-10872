diff --git a/logstash-core/lib/logstash/pipelines_registry.rb b/logstash-core/lib/logstash/pipelines_registry.rb
index 15358db925e..6ba13679f19 100644
--- a/logstash-core/lib/logstash/pipelines_registry.rb
+++ b/logstash-core/lib/logstash/pipelines_registry.rb
@@ -35,6 +35,7 @@ def initialize
       # will block until the other compute finishes so no mutex is necessary
       # for synchronizing compute calls
       @states = java.util.concurrent.ConcurrentHashMap.new
+      @locks = java.util.concurrent.ConcurrentHashMap.new
     end
 
     # Execute the passed creation logic block and create a new state upon success
@@ -46,24 +47,28 @@ def initialize
     #
     # @return [Boolean] new pipeline creation success
     def create_pipeline(pipeline_id, pipeline, &create_block)
+      lock = get_lock(pipeline_id)
+      lock.lock
+
       success = false
 
-      @states.compute(pipeline_id) do |_, state|
-        if state
-          if state.terminated?
-            success = yield
-            state.set_pipeline(pipeline)
-          else
-            logger.error("Attempted to create a pipeline that already exists", :pipeline_id => pipeline_id)
-          end
-          state
-        else
+      state = @states.get(pipeline_id)
+      if state
+        if state.terminated?
           success = yield
-          success ? PipelineState.new(pipeline_id, pipeline) : nil
+          state.set_pipeline(pipeline)
+        else
+          logger.error("Attempted to create a pipeline that already exists", :pipeline_id => pipeline_id)
         end
+        @states.put(pipeline_id, state)
+      else
+        success = yield
+        @states.put(pipeline_id, PipelineState.new(pipeline_id, pipeline)) if success
       end
 
       success
+    ensure
+      lock.unlock
     end
 
     # Execute the passed termination logic block
@@ -72,15 +77,19 @@ def create_pipeline(pipeline_id, pipeline, &create_block)
     #
     # @yieldparam [Pipeline] the pipeline to terminate
     def terminate_pipeline(pipeline_id, &stop_block)
-      @states.compute(pipeline_id) do |_, state|
-        if state.nil?
-          logger.error("Attempted to terminate a pipeline that does not exists", :pipeline_id => pipeline_id)
-          nil
-        else
-          yield(state.pipeline)
-          state
-        end
+      lock = get_lock(pipeline_id)
+      lock.lock
+
+      state = @states.get(pipeline_id)
+      if state.nil?
+        logger.error("Attempted to terminate a pipeline that does not exists", :pipeline_id => pipeline_id)
+        @states.remove(pipeline_id)
+      else
+        yield(state.pipeline)
+        @states.put(pipeline_id, state)
       end
+    ensure
+      lock.unlock
     end
 
     # Execute the passed reloading logic block in the context of the reloading state and set new pipeline in state
@@ -91,25 +100,28 @@ def terminate_pipeline(pipeline_id, &stop_block)
     #
     # @return [Boolean] new pipeline creation success
     def reload_pipeline(pipeline_id, &reload_block)
+      lock = get_lock(pipeline_id)
+      lock.lock
       success = false
 
-      @states.compute(pipeline_id) do |_, state|
-        if state.nil?
-          logger.error("Attempted to reload a pipeline that does not exists", :pipeline_id => pipeline_id)
-          nil
-        else
-          state.set_reloading(true)
-          begin
-            success, new_pipeline = yield
-            state.set_pipeline(new_pipeline)
-          ensure
-            state.set_reloading(false)
-          end
-          state
+      state = @states.get(pipeline_id)
+      if state.nil?
+        logger.error("Attempted to reload a pipeline that does not exists", :pipeline_id => pipeline_id)
+        @states.remove(pipeline_id)
+      else
+        state.set_reloading(true)
+        begin
+          success, new_pipeline = yield
+          state.set_pipeline(new_pipeline)
+        ensure
+          state.set_reloading(false)
         end
+        @states.put(pipeline_id, state)
       end
 
-      success
+    success
+    ensure
+      lock.unlock
     end
 
     # @param pipeline_id [String, Symbol] the pipeline id
@@ -162,5 +174,11 @@ def select_pipelines(&optional_state_filter)
         end
       end
     end
+
+    def get_lock(pipeline_id)
+      @locks.compute_if_absent(pipeline_id) do |k|
+        java.util.concurrent.locks.ReentrantLock.new
+      end
+    end
   end
 end
diff --git a/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb b/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
index e08b8a85eeb..3e6e01cdb65 100644
--- a/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
+++ b/logstash-core/lib/logstash/plugins/builtin/pipeline/input.rb
@@ -48,9 +48,10 @@ def internalReceive(events)
   end
 
   def stop
-    # We stop receiving events before we unlisten to prevent races
-    @running.set(false) if @running # If register wasn't yet called, no @running!
     pipeline_bus.unlisten(self, address)
+    # We stop receiving events _after_ we unlisten to pick up any events sent by upstream outputs that
+    # have not yet stopped
+    @running.set(false) if @running # If register wasn't yet called, no @running!
   end
 
   def isRunning
diff --git a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
index b3d0234c864..d8bcebe8d72 100644
--- a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
+++ b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
@@ -101,6 +101,23 @@ def stop_input
         output.do_close
       end
     end
+
+    it "stopped input should process events until upstream outputs stop" do
+      start_input
+      output.register
+      pipeline_bus.setBlockOnUnlisten(true)
+
+      output.multi_receive([event])
+      expect(queue.pop(true).to_hash_with_metadata).to match(event.to_hash_with_metadata)
+
+      Thread.new { input.do_stop }
+
+      sleep 1
+      output.multi_receive([event])
+      expect(queue.pop(true).to_hash_with_metadata).to match(event.to_hash_with_metadata)
+
+      output.do_close
+    end
   end
 
   describe "one output to multiple inputs" do
diff --git a/logstash-core/src/main/java/org/logstash/plugins/pipeline/AddressState.java b/logstash-core/src/main/java/org/logstash/plugins/pipeline/AddressState.java
index 0266e59d5f1..48d05c8892d 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/pipeline/AddressState.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/pipeline/AddressState.java
@@ -11,8 +11,6 @@ public class AddressState {
     private final Set<PipelineOutput> outputs = ConcurrentHashMap.newKeySet();
     private volatile PipelineInput input = null;
 
-    AddressState(String address) {}
-
     /**
      * Add the given output and ensure associated input's receivers are updated
      * @param output output to be added
diff --git a/logstash-core/src/main/java/org/logstash/plugins/pipeline/PipelineBus.java b/logstash-core/src/main/java/org/logstash/plugins/pipeline/PipelineBus.java
index 11886569a48..bae5b6f8c94 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/pipeline/PipelineBus.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/pipeline/PipelineBus.java
@@ -1,5 +1,6 @@
 package org.logstash.plugins.pipeline;
 
+import com.google.common.annotations.VisibleForTesting;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.logstash.RubyUtil;
@@ -10,10 +11,12 @@
 import java.util.stream.Stream;
 
 /**
- * This class is essentially the communication bus / central state for the `pipeline` inputs/outputs to talk to each
- * other. This class is threadsafe.
+ * This class is the communication bus for the `pipeline` inputs and outputs to talk to each other.
+ *
+ * This class is threadsafe.
  */
 public class PipelineBus {
+
     final ConcurrentHashMap<String, AddressState> addressStates = new ConcurrentHashMap<>();
     final ConcurrentHashMap<PipelineOutput, ConcurrentHashMap<String, AddressState>> outputsToAddressStates = new ConcurrentHashMap<>();
     volatile boolean blockOnUnlisten = false;
@@ -31,30 +34,32 @@ public void sendEvents(final PipelineOutput sender,
                            final boolean ensureDelivery) {
         if (events.isEmpty()) return; // This can happen on pipeline shutdown or in some other situations
 
-        final ConcurrentHashMap<String, AddressState> addressesToInputs = outputsToAddressStates.get(sender);
-
-        addressesToInputs.forEach((address, addressState) -> {
-            final Stream<JrubyEventExtLibrary.RubyEvent> clones = events.stream().map(e -> e.rubyClone(RubyUtil.RUBY));
-
-            PipelineInput input = addressState.getInput(); // Save on calls to getInput since it's volatile
-            boolean sendWasSuccess = input != null && input.internalReceive(clones);
-
-            // Retry send if the initial one failed
-            while (ensureDelivery && !sendWasSuccess) {
-                // We need to refresh the input in case the mapping has updated between loops
-                String message = String.format("Attempted to send event to '%s' but that address was unavailable. " +
-                        "Maybe the destination pipeline is down or stopping? Will Retry.", address);
-                logger.warn(message);
-                input = addressState.getInput();
-                sendWasSuccess = input != null && input.internalReceive(clones);
-                try {
-                    Thread.sleep(1000);
-                } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt();
-                    logger.error("Sleep unexpectedly interrupted in bus retry loop", e);
+        synchronized (sender) {
+            final ConcurrentHashMap<String, AddressState> addressesToInputs = outputsToAddressStates.get(sender);
+
+            addressesToInputs.forEach((address, addressState) -> {
+                final Stream<JrubyEventExtLibrary.RubyEvent> clones = events.stream().map(e -> e.rubyClone(RubyUtil.RUBY));
+
+                PipelineInput input = addressState.getInput(); // Save on calls to getInput since it's volatile
+                boolean sendWasSuccess = input != null && input.internalReceive(clones);
+
+                // Retry send if the initial one failed
+                while (ensureDelivery && !sendWasSuccess) {
+                    // We need to refresh the input in case the mapping has updated between loops
+                    String message = String.format("Attempted to send event to '%s' but that address was unavailable. " +
+                            "Maybe the destination pipeline is down or stopping? Will Retry.", address);
+                    logger.warn(message);
+                    input = addressState.getInput();
+                    sendWasSuccess = input != null && input.internalReceive(clones);
+                    try {
+                        Thread.sleep(1000);
+                    } catch (InterruptedException e) {
+                        Thread.currentThread().interrupt();
+                        logger.error("Sleep unexpectedly interrupted in bus retry loop", e);
+                    }
                 }
-            }
-        });
+            });
+        }
     }
 
     /**
@@ -64,16 +69,18 @@ public void sendEvents(final PipelineOutput sender,
      * @param addresses collection of addresses on which to register this sender
      */
     public void registerSender(final PipelineOutput output, final Iterable<String> addresses) {
-        addresses.forEach((String address) -> {
-            addressStates.compute(address, (k, value) -> {
-                final AddressState state = value != null ? value : new AddressState(address);
-                state.addOutput(output);
-
-                return state;
+        synchronized (output) {
+            addresses.forEach((String address) -> {
+                addressStates.compute(address, (k, value) -> {
+                    final AddressState state = value != null ? value : new AddressState();
+                    state.addOutput(output);
+
+                    return state;
+                });
             });
-        });
 
-        updateOutputReceivers(output);
+            updateOutputReceivers(output);
+        }
     }
 
     /**
@@ -83,17 +90,19 @@ public void registerSender(final PipelineOutput output, final Iterable<String> a
      * @param addresses collection of addresses this sender was registered with
      */
     public void unregisterSender(final PipelineOutput output, final Iterable<String> addresses) {
-        addresses.forEach(address -> {
-            addressStates.computeIfPresent(address, (k, state) -> {
-                state.removeOutput(output);
+        synchronized (output) {
+            addresses.forEach(address -> {
+                addressStates.computeIfPresent(address, (k, state) -> {
+                    state.removeOutput(output);
 
-                if (state.isEmpty()) return null;
+                    if (state.isEmpty()) return null;
 
-                return state;
+                    return state;
+                });
             });
-        });
 
-        outputsToAddressStates.remove(output);
+            outputsToAddressStates.remove(output);
+        }
     }
 
     /**
@@ -123,22 +132,24 @@ private void updateOutputReceivers(final PipelineOutput output) {
      * @return true if the listener successfully subscribed
      */
     public boolean listen(final PipelineInput input, final String address) {
-        final boolean[] result = new boolean[1];
+        synchronized (input) {
+            final boolean[] result = new boolean[1];
 
-        addressStates.compute(address, (k, value) -> {
-            AddressState state = value != null ? value : new AddressState(address);
+            addressStates.compute(address, (k, value) -> {
+                AddressState state = value != null ? value : new AddressState();
 
-            if (state.assignInputIfMissing(input)) {
-                state.getOutputs().forEach(this::updateOutputReceivers);
-                result[0] = true;
-            } else {
-                result[0] = false;
-            }
+                if (state.assignInputIfMissing(input)) {
+                    state.getOutputs().forEach(this::updateOutputReceivers);
+                    result[0] = true;
+                } else {
+                    result[0] = false;
+                }
 
-            return state;
-        });
+                return state;
+            });
 
-        return result[0];
+            return result[0];
+        }
     }
 
     /**
@@ -151,21 +162,24 @@ public boolean listen(final PipelineInput input, final String address) {
      * @throws InterruptedException if interrupted while attempting to stop listening
      */
     public void unlisten(final PipelineInput input, final String address) throws InterruptedException {
-        if (isBlockOnUnlisten()) {
-            unlistenBlock(input, address);
-        } else {
-            unlistenNonblock(input, address);
+        synchronized (input) {
+            if (isBlockOnUnlisten()) {
+                unlistenBlock(input, address);
+            } else {
+                unlistenNonblock(input, address);
+            }
         }
     }
 
     /**
-     * Stop listening on the given address with the given listener
+     * Stop listening on the given address with the given listener. Blocks until upstream outputs have
+     * stopped.
      *
-     * @param input   Input that should stop listening
+     * @param input Input that should stop listening
      * @param address Address on which to stop listening
      * @throws InterruptedException if interrupted while attempting to stop listening
      */
-    public void unlistenBlock(final PipelineInput input, final String address) throws InterruptedException {
+    private void unlistenBlock(final PipelineInput input, final String address) throws InterruptedException {
         final boolean[] waiting = {true};
 
         // Block until all senders are done
@@ -203,7 +217,8 @@ public void unlistenBlock(final PipelineInput input, final String address) throw
      * @param input   Input that should stop listening
      * @param address Address on which to stop listening
      */
-    public void unlistenNonblock(final PipelineInput input, final String address) {
+    @VisibleForTesting
+    void unlistenNonblock(final PipelineInput input, final String address) {
         addressStates.computeIfPresent(address, (k, state) -> {
             state.unassignInput(input);
             state.getOutputs().forEach(this::updateOutputReceivers);
@@ -211,7 +226,8 @@ public void unlistenNonblock(final PipelineInput input, final String address) {
         });
     }
 
-    public boolean isBlockOnUnlisten() {
+    @VisibleForTesting
+    boolean isBlockOnUnlisten() {
         return blockOnUnlisten;
     }
 
