diff --git a/docs/static/include/pluginbody.asciidoc b/docs/static/include/pluginbody.asciidoc
index 2a073e03290..0cdfdee9c10 100644
--- a/docs/static/include/pluginbody.asciidoc
+++ b/docs/static/include/pluginbody.asciidoc
@@ -262,7 +262,7 @@ endif::filter_method[]
 // Output (conditionally recognized by the presence of the receive_method
 // attribute)
 // /////////////////////////////////////////////////////////////////////////////
-ifdef::receive_method[]
+ifdef::multi_receive_method[]
 [source,ruby]
 [subs="attributes"]
 ----------------------------------
@@ -275,17 +275,43 @@ require "logstash/namespace"
 class LogStash::{pluginclass}::{pluginnamecap} < LogStash::{pluginclass}::Base
   config_name "example"
 
+  # If declared logstash will only allow a single instance of this plugin
+  # to exist, regardless of how many CPU cores logstash detects. This is best
+  # used in cases like the File output, where separate threads writing to a single
+  # File would only cause problems.
+  #
+  # respond_to? check needed for backwards compatibility with < 2.2 Logstashes
+  declare_workers_not_supported! if self.respond_to?(:workers_not_supported!)
+
+  # If declared threadsafe logstash will only ever create one
+  # instance of this plugin per pipeline.
+  # That instance will be shared across all workers
+  # It is up to the plugin author to correctly write concurrent code!
+  #
+  # respond_to? check needed for backwards compatibility with < 2.2 Logstashes
+  declare_threadsafe! if self.respond_to?(:declare_threadsafe!)
+
   public
   def register
+    # Does the same thing as declare_workers_not_supported!
+    # But works in < 2.2 logstashes
+    # workers_not_supported
   end # def register
 
   public
+  # Takes an array of events
+  def multi_receive(events)
+  end # def multi_receive
+
+  public
+  # Needed for logstash < 2.2 compatibility
+  # Takes events one at a time
   def receive(event)
   end # def receive
 
 end # class LogStash::{pluginclass}::{pluginnamecap}
 ----------------------------------
-endif::receive_method[]
+endif::multi_receive_method[]
 
 ==== Coding {plugintype} plugins
 
@@ -681,7 +707,7 @@ endif::blockinput[]
 endif::run_method[]
 
 // /////////////////////////////////////////////////////////////////////////////
-// If receive_method is defined (should only be for output plugin page)
+// If multi_receive_method is defined (should only be for output plugin page)
 // /////////////////////////////////////////////////////////////////////////////
 ifdef::receive_method[]
 
diff --git a/docs/static/output.asciidoc b/docs/static/output.asciidoc
index ac6ccdee269..0f9b1b1c0a1 100644
--- a/docs/static/output.asciidoc
+++ b/docs/static/output.asciidoc
@@ -1,5 +1,5 @@
 :register_method:	true
-:receive_method:	true
+:multi_receive_method:	true
 :plugintype:    	output
 :pluginclass:   	Outputs
 :pluginname:    	example
@@ -9,6 +9,6 @@
 
 :getstarted: Let's step through creating an {plugintype} plugin using the https://github.com/logstash-plugins/logstash-output-example/[example {plugintype} plugin].
 
-:methodheader: Logstash outputs must implement the `register` and `receive` methods.
+:methodheader: Logstash outputs must implement the `register` and `multi_receive` methods.
 
 include::include/pluginbody.asciidoc[]
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 161e774d86a..260e6b15797 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -7,27 +7,94 @@
 # of 'workers' the output plugin is configured with.
 #
 # This plugin also records some basic statistics
-module LogStash; class OutputDelegator
-  attr_reader :workers, :config, :worker_count
+module LogStash class OutputDelegator
+  attr_reader :workers, :config, :worker_count, :threadsafe
 
   # The *args this takes are the same format that a Outputs::Base takes. A list of hashes with parameters in them
   # Internally these just get merged together into a single hash
-  def initialize(logger, klass, *args)
+  def initialize(logger, klass, default_worker_count, *args)
     @logger = logger
+    @threadsafe = klass.threadsafe?
     @config = args.reduce({}, :merge)
     @klass = klass
-    @worker_count = @config["workers"] || 1
 
+    # We define this as an array regardless of threadsafety
+    # to make reporting simpler, even though a threadsafe plugin will just have
+    # a single instance
+    #
+    # Older plugins invoke the instance method Outputs::Base#workers_not_supported
+    # To detect these we need an instance to be created first :()
+    # TODO: In the next major version after 2.x remove support for this
+    @workers = [@klass.new(*args)]
+    @workers.first.register # Needed in case register calls `workers_not_supported`
+
+    # DO NOT move this statement before the instantiation of the first single instance
+    # Read the note above to understand why
+    @worker_count = calculate_worker_count(default_worker_count)
+    @logger.debug("Will start workers for output", :worker_count => @worker_count, :class => klass)
+
+    warn_on_worker_override!
+    # This queue is used to manage sharing across threads
     @worker_queue = SizedQueue.new(@worker_count)
 
-    @workers = @worker_count.times.map do
-      w = @klass.new(*args)
-      w.register
-      @worker_queue << w
-      w
+    @workers += (@worker_count - 1).times.map do
+      inst = @klass.new(*args)
+      inst.register
+      inst
     end
 
+    @workers.each { |w| @worker_queue << w }
+
     @events_received = Concurrent::AtomicFixnum.new(0)
+
+
+    # One might wonder why we don't use something like
+    # define_singleton_method(:multi_receive, method(:threadsafe_multi_receive)
+    # and the answer is this is buggy on Jruby 1.7.x . It works 98% of the time!
+    # The other 2% you get weird errors about rebinding to the same object
+    # Until we switch to Jruby 9.x keep the define_singleton_method parts
+    # the way they are, with a block
+    # See https://github.com/jruby/jruby/issues/3582
+    if threadsafe?
+      @threadsafe_worker = @workers.first
+      define_singleton_method(:multi_receive) do |events|
+        threadsafe_multi_receive(events)
+      end
+    else
+      define_singleton_method(:multi_receive) do |events|
+        worker_multi_receive(events)
+      end
+    end
+  end
+
+  def threadsafe?
+    !!@threadsafe
+  end
+
+  def warn_on_worker_override!
+    # The user has configured extra workers, but this plugin doesn't support it :(
+    if worker_limits_overriden?
+      message = @klass.workers_not_supported_message
+      warning_meta = {:plugin => @klass.config_name, :worker_count => @config["workers"]}
+      if message
+        warning_meta[:message] = message
+        @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported-with-message", warning_meta))
+      else
+        @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported", warning_meta))
+      end
+    end
+  end
+
+  def worker_limits_overriden?
+    @config["workers"] && @config["workers"] > 1 && @klass.workers_not_supported?
+  end
+
+  def calculate_worker_count(default_worker_count)
+    if @threadsafe || @klass.workers_not_supported?
+      1
+    else
+      @config["workers"] || default_worker_count
+    end
   end
 
   def config_name
@@ -38,7 +105,13 @@ def register
     @workers.each {|w| w.register}
   end
 
-  def multi_receive(events)
+  def threadsafe_multi_receive(events)
+    @events_received.increment(events.length)
+
+    @threadsafe_worker.multi_receive(events)
+  end
+
+  def worker_multi_receive(events)
     @events_received.increment(events.length)
 
     worker = @worker_queue.pop
@@ -62,7 +135,16 @@ def events_received
     @events_received.value
   end
 
+  # There's no concept of 'busy' workers for a threadsafe plugin!
   def busy_workers
-    @worker_queue.size
+    if @threadsafe
+      0
+    else
+      @workers.size - @worker_queue.size
+    end
   end
+
+  private
+  # Needed for testing, so private
+  attr_reader :threadsafe_worker, :worker_queue
 end end
\ No newline at end of file
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index c552f202e28..bc72367e3c8 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -25,17 +25,36 @@ class LogStash::Outputs::Base < LogStash::Plugin
   # Note that this setting may not be useful for all outputs.
   config :workers, :validate => :number, :default => 1
 
-  attr_reader :worker_plugins, :available_workers, :workers, :worker_plugins
+  attr_reader :worker_plugins, :available_workers, :workers, :worker_plugins, :workers_not_supported
+
+  def self.declare_threadsafe!
+    declare_workers_not_supported!
+    @threadsafe = true
+  end
+
+  def self.threadsafe?
+    @threadsafe == true
+  end
+
+  def self.declare_workers_not_supported!(message=nil)
+    @workers_not_supported_message = message
+    @workers_not_supported = true
+  end
+
+  def self.workers_not_supported_message
+    @workers_not_supported_message
+  end
+
+  def self.workers_not_supported?
+    !!@workers_not_supported
+  end
 
   public
+  # TODO: Remove this in the next major version after Logstash 2.x
+  # Post 2.x it should raise an error and tell people to use the class level
+  # declaration
   def workers_not_supported(message=nil)
-    return if @workers == 1
-    if message
-      @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported-with-message", :plugin => self.class.config_name, :worker_count => @workers, :message => message))
-    else
-      @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported", :plugin => self.class.config_name, :worker_count => @workers))
-    end
-    @workers = 1
+    self.class.declare_workers_not_supported!(message)
   end
 
   public
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 8d148bc4108..849a66e270a 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -30,6 +30,8 @@ module LogStash; class Pipeline
   def initialize(config_str, settings = {})
     @pipeline_id = settings[:pipeline_id] || self.object_id
     @logger = Cabin::Channel.get(LogStash)
+    @settings = DEFAULT_SETTINGS.clone
+    settings.each {|setting, value| configure(setting, value) }
     @reporter = LogStash::PipelineReporter.new(@logger, self)
 
     @inputs = nil
@@ -65,12 +67,10 @@ def initialize(config_str, settings = {})
     # in-flight buffers
     @input_queue_pop_mutex = Mutex.new
     @input_threads = []
-    @settings = DEFAULT_SETTINGS.clone
     # @ready requires thread safety since it is typically polled from outside the pipeline thread
     @ready = Concurrent::AtomicBoolean.new(false)
     @running = Concurrent::AtomicBoolean.new(false)
     @flushing = Concurrent::AtomicReference.new(false)
-    settings.each {|setting, value| configure(setting, value) }
 
     start_flusher
   end # def initialize
@@ -379,12 +379,16 @@ def plugin(plugin_type, name, *args)
     klass = LogStash::Plugin.lookup(plugin_type, name)
 
     if plugin_type == "output"
-      LogStash::OutputDelegator.new(@logger, klass, *args)
+      LogStash::OutputDelegator.new(@logger, klass, default_output_workers, *args)
     else
       klass.new(*args)
     end
   end
 
+  def default_output_workers
+    @settings[:pipeline_workers] || @settings[:default_pipeline_workers]
+  end
+
   # for backward compatibility in devutils for the rspec helpers, this method is not used
   # in the pipeline anymore.
   def filter(event, &block)
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index a951265e1ba..f2d1666ee11 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -39,7 +39,7 @@ en:
       output-worker-unsupported-with-message: >-
         %{plugin} output plugin: setting 'workers => %{worker_count}' is not
         supported by this plugin. I will continue working as if you had not set
-        this setting.
+        this setting. Reason: %{message}
     plugin:
       deprecated_milestone: >-
         %{plugin} plugin is using the 'milestone' method to declare the version
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 913fb527947..dee26d95bc0 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -1,49 +1,126 @@
 # encoding: utf-8
 require 'spec_helper'
 
-
-
 describe LogStash::OutputDelegator do
   let(:logger) { double("logger") }
-  let(:out_klass) { double("output klass") }
-  let(:out_inst) { double("output instance") }
-
-  subject { described_class.new(logger, out_klass) }
-
-  before do
-    allow(out_klass).to receive(:new).with(any_args).and_return(out_inst)
-    allow(out_inst).to receive(:register)
-    allow(logger).to receive(:debug).with(any_args)
-  end
+  let(:events) { 7.times.map { LogStash::Event.new }}
+  let(:default_worker_count) { 1 }
 
-  it "should initialize cleanly" do
-    expect { subject }.not_to raise_error
-  end
+  subject { described_class.new(logger, out_klass, default_worker_count) }
 
-  context "after having received a batch of events" do
-    let(:events) { 7.times.map { LogStash::Event.new }}
+  context "with a plain output plugin" do
+    let(:out_klass) { double("output klass") }
+    let(:out_inst) { double("output instance") }
 
     before do
+      allow(out_klass).to receive(:new).with(any_args).and_return(out_inst)
+      allow(out_klass).to receive(:threadsafe?).and_return(false)
+      allow(out_klass).to receive(:workers_not_supported?).and_return(false)
+      allow(out_inst).to receive(:register)
       allow(out_inst).to receive(:multi_receive)
-      subject.multi_receive(events)
+      allow(logger).to receive(:debug).with(any_args)
     end
 
-    it "should pass the events through" do
-      expect(out_inst).to have_received(:multi_receive).with(events)
+    it "should initialize cleanly" do
+      expect { subject }.not_to raise_error
     end
 
-    it "should increment the number of events received" do
-      expect(subject.events_received).to eql(events.length)
+    context "after having received a batch of events" do
+      before do
+        subject.multi_receive(events)
+      end
+
+      it "should pass the events through" do
+        expect(out_inst).to have_received(:multi_receive).with(events)
+      end
+
+      it "should increment the number of events received" do
+        expect(subject.events_received).to eql(events.length)
+      end
+    end
+
+    it "should register all workers on register" do
+      expect(out_inst).to receive(:register)
+      subject.register
+    end
+
+    it "should close all workers when closing" do
+      expect(out_inst).to receive(:do_close)
+      subject.do_close
+    end
+
+    describe "concurrency and worker support" do
+      describe "non-threadsafe outputs that allow workers" do
+        let(:default_worker_count) { 3 }
+
+        before do
+          allow(out_klass).to receive(:threadsafe?).and_return(false)
+          allow(out_klass).to receive(:workers_not_supported?).and_return(false)
+        end
+
+        it "should instantiate multiple workers" do
+          expect(subject.workers.length).to eql(default_worker_count)
+        end
+
+        it "should send received events to the worker" do
+          expect(out_inst).to receive(:multi_receive).with(events)
+          subject.multi_receive(events)
+        end
+      end
+
+      describe "threadsafe outputs" do
+        before do
+          allow(out_klass).to receive(:threadsafe?).and_return(true)
+          allow(out_klass).to receive(:workers_not_supported?).and_return(false)
+        end
+
+        it "should return true when threadsafe? is invoked" do
+          expect(subject.threadsafe?).to eql(true)
+        end
+
+        it "should define a threadsafe_worker" do
+          expect(subject.send(:threadsafe_worker)).to eql(out_inst)
+        end
+
+        it "should utilize threadsafe_multi_receive" do
+          expect(subject.send(:threadsafe_worker)).to receive(:multi_receive).with(events)
+          subject.multi_receive(events)
+        end
+
+        it "should not utilize the worker queue" do
+          expect(subject.send(:worker_queue)).not_to receive(:pop)
+          subject.multi_receive(events)
+        end
+
+        it "should send received events to the worker" do
+          expect(out_inst).to receive(:multi_receive).with(events)
+          subject.multi_receive(events)
+        end
+      end
     end
   end
 
-  it "should register all workers on register" do
-    expect(out_inst).to receive(:register)
-    subject.register
+  # This may seem suspiciously similar to the class in outputs/base_spec
+  # but, in fact, we need a whole new class because using this even once
+  # will immutably modify the base class
+  class LogStash::Outputs::NOOPDelLegacyNoWorkers < ::LogStash::Outputs::Base
+    LEGACY_WORKERS_NOT_SUPPORTED_REASON = "legacy reason"
+
+    def register
+      workers_not_supported(LEGACY_WORKERS_NOT_SUPPORTED_REASON)
+    end
   end
 
-  it "should close all workers when closing" do
-    expect(out_inst).to receive(:do_close)
-    subject.do_close
+  describe "legacy output workers_not_supported" do
+    let(:default_worker_count) { 2 }
+    let(:out_klass) { LogStash::Outputs::NOOPDelLegacyNoWorkers }
+
+    before do
+      allow(logger).to receive(:debug).with(any_args)
+    end
+
+    it "should only setup one worker" do
+      expect(subject.worker_count).to eql(1)
+    end
   end
 end
diff --git a/logstash-core/spec/logstash/outputs/base_spec.rb b/logstash-core/spec/logstash/outputs/base_spec.rb
index 59c5a8919cc..44d49a60b99 100644
--- a/logstash-core/spec/logstash/outputs/base_spec.rb
+++ b/logstash-core/spec/logstash/outputs/base_spec.rb
@@ -15,6 +15,14 @@ def receive(event)
   end
 end
 
+class LogStash::Outputs::NOOPLegacyNoWorkers < ::LogStash::Outputs::Base
+  LEGACY_WORKERS_NOT_SUPPORTED_REASON = "legacy reason"
+
+  def register
+    workers_not_supported(LEGACY_WORKERS_NOT_SUPPORTED_REASON)
+  end
+end
+
 describe "LogStash::Outputs::Base#new" do
   it "should instantiate cleanly" do
     params = { "dummy_option" => "potatoes", "codec" => "json", "workers" => 2 }
@@ -24,4 +32,9 @@ def receive(event)
       LogStash::Outputs::NOOP.new(params.dup)
     end.not_to raise_error
   end
+
+  it "should move workers_not_supported declarations up to the class level" do
+    LogStash::Outputs::NOOPLegacyNoWorkers.new.register
+    expect(LogStash::Outputs::NOOPLegacyNoWorkers.workers_not_supported?).to eql(true)
+  end
 end
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index d0b07589b18..46f922b65bb 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -209,7 +209,7 @@ class TestPipeline < LogStash::Pipeline
         pipeline.run
 
         expect(pipeline.outputs.size ).to eq(1)
-        expect(pipeline.outputs.first.workers.size ).to eq(1)
+        expect(pipeline.outputs.first.workers.size ).to eq(pipeline.default_output_workers)
         expect(pipeline.outputs.first.workers.first.num_closes ).to eq(1)
       end
 
