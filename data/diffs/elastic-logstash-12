diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index fde344217a1..7e0e4c3a03c 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -3,6 +3,7 @@
 require "logstash/namespace"
 require "mq" # rubygem 'amqp'
 require "uuidtools" # rubygem 'uuidtools'
+require "cgi"
 
 class LogStash::Inputs::Amqp < LogStash::Inputs::Base
   MQTYPES = [ "fanout", "queue", "topic" ]
@@ -13,26 +14,33 @@ def initialize(url, type, config={}, &block)
 
     @mq = nil
 
-    # Handle path /<type>/<name>
-    unused, @mqtype, @name = @url.path.split("/", 3)
-    if @mqtype == nil or @name == nil
-      raise "amqp urls must have a path of /<type>/name where <type> is #{MQTYPES.join(", ")}"
+    # Handle path /<vhost>/<type>/<name> or /<type>/<name>
+    # vhost allowed to contain slashes
+    if @url.path =~ %r{^/((.*)/)?([^/]+)/([^/]+)}
+      unused, @vhost, @mqtype, @name = $~.captures
+    else
+      raise "amqp urls must have a path of /<type>/name or /vhost/<type>/name where <type> is #{MQTYPES.join(", ")}"
     end
 
     if !MQTYPES.include?(@mqtype)
-      raise "Invalid type '#{@mqtype}' must be one of #{MQTYPES.JOIN(", ")}"
+      raise "Invalid type '#{@mqtype}' must be one of #{MQTYPES.join(", ")}"
     end
   end # def initialize
 
   public
   def register
     @logger.info("Registering input #{@url}")
+    query_args = @url.query ? CGI.parse(@url.query) : {}
     amqpsettings = {
+      :vhost => (@vhost or "/"),
       :host => @url.host,
       :port => (@url.port or 5672),
+      :logging => true
     }
     amqpsettings[:user] = @url.user if @url.user
     amqpsettings[:pass] = @url.password if @url.password
+    amqpsettings[:logging] = query_args.include? "debug"
+    @logger.debug("Connecting with AMQP settings #{amqpsettings.inspect} to set up #{@mqtype.inspect} queue #{@name.inspect}")
     @amqp = AMQP.connect(amqpsettings)
     @mq = MQ.new(@amqp)
     @target = nil
diff --git a/lib/logstash/outputs/amqp.rb b/lib/logstash/outputs/amqp.rb
index 282a2b4b027..7331a9b10ec 100644
--- a/lib/logstash/outputs/amqp.rb
+++ b/lib/logstash/outputs/amqp.rb
@@ -2,6 +2,7 @@
 require "logstash/outputs/base"
 require "logstash/namespace"
 require "mq" # rubygem 'amqp'
+require "cgi"
 
 class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   MQTYPES = [ "fanout", "queue", "topic" ]
@@ -10,26 +11,33 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   def initialize(url, config={}, &block)
     super
 
-    # Handle path /<type>/<name>
-    unused, @mqtype, @name = @url.path.split("/", 3)
-    if @mqtype == nil or @name == nil
-      raise "amqp urls must have a path of /<type>/name where <type> is #{MQTYPES.join(", ")}"
+    # Handle path /<vhost>/<type>/<name> or /<type>/<name>
+    # vhost allowed to contain slashes
+    if @url.path =~ %r{^/((.*)/)?([^/]+)/([^/]+)}
+      unused, @vhost, @mqtype, @name = $~.captures
+    else
+      raise "amqp urls must have a path of /<type>/name or /vhost/<type>/name where <type> is #{MQTYPES.join(", ")}"
     end
 
     if !MQTYPES.include?(@mqtype)
-      raise "Invalid type '#{@mqtype}' must be one #{MQTYPES.join(", ")}"
+      raise "Invalid type '#{@mqtype}' must be one of #{MQTYPES.join(", ")}"
     end
   end # def initialize
 
   public
   def register
     @logger.info("Registering output #{@url}")
+    query_args = @url.query ? CGI.parse(@url.query) : {}
     amqpsettings = {
+      :vhost => (@vhost or "/"),
       :host => @url.host,
       :port => (@url.port or 5672),
+      :logging => true
     }
     amqpsettings[:user] = @url.user if @url.user
     amqpsettings[:pass] = @url.password if @url.password
+    amqpsettings[:logging] = query_args.include? "debug"
+    @logger.debug("Connecting with AMQP settings #{amqpsettings.inspect} to set up #{@mqtype.inspect} queue #{@name.inspect}")
     @amqp = AMQP.connect(amqpsettings)
     @mq = MQ.new(@amqp)
     @target = nil
