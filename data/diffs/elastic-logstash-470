diff --git a/CHANGELOG b/CHANGELOG
index 38fef25fd38..0ca22b53e98 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -18,6 +18,7 @@
   - bugfix: useragent filter now ships with a default regexes.yaml file
     that is used by default unless you otherwise specify (LOGSTASH-1051)
   - bugfix: add_field now correctly sets top-level fields like @message
+  - feature: specify timezone in date filter
 
   ## outputs
   - feature: irc output now supports 'secure' setting to use ssl (LOGSTASH-139)
diff --git a/lib/logstash/filters/date.rb b/lib/logstash/filters/date.rb
index 75c89cd3184..4f678b1c9ad 100644
--- a/lib/logstash/filters/date.rb
+++ b/lib/logstash/filters/date.rb
@@ -25,6 +25,15 @@ class LogStash::Filters::Date < LogStash::Filters::Base
   config_name "date"
   plugin_status "stable"
 
+  # specify a timezone canonical ID to be used for date parsing.
+  # The valid ID are listed on http://joda-time.sourceforge.net/timezones.html
+  # Useful in case the timezone cannot be extracted from the value,
+  # and is not the platform default
+  # If this is not specified the platform default will be used.
+  # Canonical ID is good as it takes care of daylight saving time for you
+  # For example, America/Los_Angeles or Europe/France are valid IDs
+  config :timezone, :validate => :string
+
   # specify a locale to be used for date parsing. If this is not specified the
   # platform default will be used
   #
@@ -119,7 +128,7 @@ def register
     locale = parseLocale(@config["locale"][0]) if @config["locale"] != nil and @config["locale"][0] != nil
     missing = []
     @config.each do |field, value|
-      next if (RESERVED + ["locale", "match"]).include?(field)
+      next if (RESERVED + ["timezone", "locale", "match"]).include?(field)
 
       recommended_setting = value.map { |v| "\"#{v}\"" }.join(", ")
       @logger.warn("#{self.class.config_name}: You used a deprecated setting '#{field} => #{value}'. You should use 'match => [ \"#{field}\", #{recommended_setting} ]'")
@@ -133,7 +142,12 @@ def setupMatcher(field, locale, missing, value)
     value.each do |format|
       case format
         when "ISO8601"
-          joda_parser = org.joda.time.format.ISODateTimeFormat.dateTimeParser.withOffsetParsed
+          joda_parser = org.joda.time.format.ISODateTimeFormat.dateTimeParser
+          if @timezone
+            joda_parser = joda_parser.withZone(org.joda.time.DateTimeZone.forID(@timezone))
+          else
+            joda_parser = joda_parser.withOffsetParsed
+          end
           parser = lambda { |date| joda_parser.parseDateTime(date) }
         when "UNIX" # unix epoch
           parser = lambda { |date| org.joda.time.Instant.new((date.to_f * 1000).to_i).toDateTime }
@@ -147,7 +161,12 @@ def setupMatcher(field, locale, missing, value)
             org.joda.time.Instant.new((date[1..15].hex * 1000 - 10000)+(date[16..23].hex/1000000)).toDateTime 
           end
         else
-          joda_parser = org.joda.time.format.DateTimeFormat.forPattern(format).withOffsetParsed
+          joda_parser = org.joda.time.format.DateTimeFormat.forPattern(format)
+          if @timezone
+            joda_parser = joda_parser.withZone(org.joda.time.DateTimeZone.forID(@timezone))
+          else
+            joda_parser = joda_parser.withOffsetParsed
+          end
           if (locale != nil)
             joda_parser = joda_parser.withLocale(locale)
           end
diff --git a/spec/filters/date.rb b/spec/filters/date.rb
index c708886fea6..d6c1cfce328 100644
--- a/spec/filters/date.rb
+++ b/spec/filters/date.rb
@@ -242,4 +242,28 @@
     end
   end
 
+  describe "parsing with timezone parameter" do
+    config <<-CONFIG
+      filter {
+        date {
+          match => ["mydate", "yyyy MMM dd HH:mm:ss"]
+          timezone => "America/Los_Angeles"
+        }
+      }
+    CONFIG
+
+    require 'java'
+    times = {
+      "2013 Nov 24 01:29:01" => "2013-11-24T09:29:01.000Z",
+      "2013 Jun 24 01:29:01" => "2013-06-24T08:29:01.000Z",
+    }
+    times.each do |input, output|
+      sample({"@fields" => {"mydate" => input}}) do
+        insist { subject["mydate"] } == input
+        insist { subject.timestamp } == output
+        insist { subject["@timestamp"] } == output
+      end
+    end # times.each
+  end
+
 end
