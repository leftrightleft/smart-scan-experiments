diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 5960d5cf28d..4b813746b44 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -29,7 +29,7 @@
 java_import org.logstash.common.SourceWithMetadata
 java_import org.logstash.common.io.DeadLetterQueueWriter
 java_import org.logstash.config.ir.CompiledPipeline
-java_import org.logstash.config.ir.ConfigCompiler
+java_import org.logstash.LogstashSession
 
 module LogStash; class JavaBasePipeline
   include LogStash::Util::Loggable
@@ -47,7 +47,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @settings = pipeline_config.settings
     @config_hash = Digest::SHA1.hexdigest(@config_str)
 
-    @lir = ConfigCompiler.configToPipelineIR(
+    @lir = LogstashSession.get_or_create(self).config_compiler.configToPipelineIR(
       @config_str, @settings.get_value("config.support_escapes")
     )
 
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 5d64b20309b..cf4c38a7ba5 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -30,7 +30,7 @@
 java_import org.logstash.common.DeadLetterQueueFactory
 java_import org.logstash.common.SourceWithMetadata
 java_import org.logstash.common.io.DeadLetterQueueWriter
-java_import org.logstash.config.ir.ConfigCompiler
+java_import org.logstash.LogstashSession
 
 module LogStash; class BasePipeline
   include LogStash::Util::Loggable
@@ -48,7 +48,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @settings = pipeline_config.settings
     @config_hash = Digest::SHA1.hexdigest(@config_str)
 
-    @lir = ConfigCompiler.configToPipelineIR(
+    @lir = LogstashSession.get_or_create(self).config_compiler.configToPipelineIR(
       @config_str, @settings.get_value("config.support_escapes")
     )
 
diff --git a/logstash-core/src/main/java/org/logstash/LogstashJRubySession.java b/logstash-core/src/main/java/org/logstash/LogstashJRubySession.java
new file mode 100644
index 00000000000..72ff2dcbb29
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/LogstashJRubySession.java
@@ -0,0 +1,227 @@
+package org.logstash;
+
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import org.jruby.Ruby;
+import org.jruby.RubyClass;
+import org.jruby.RubyHash;
+import org.jruby.RubyModule;
+import org.jruby.anno.JRubyClass;
+import org.jruby.runtime.ObjectAllocator;
+import org.jruby.runtime.load.LoadService;
+import org.logstash.ackedqueue.ext.AbstractJRubyQueue;
+import org.logstash.ackedqueue.ext.RubyAckedBatch;
+import org.logstash.ext.JrubyEventExtLibrary;
+import org.logstash.ext.JrubyTimestampExtLibrary;
+
+public final class LogstashJRubySession implements AutoCloseable {
+
+    private final Ruby ruby;
+
+    private final RubyModule logstashModule;
+
+    private final RubyClass event;
+
+    private final RubyClass ackedBatch;
+
+    private final RubyClass timestamp;
+
+    private final RubyClass logstashError;
+
+    private final RubyClass parserError;
+
+    private final RubyClass timestampParserError;
+
+    private final RubyClass generatorError;
+
+    public LogstashJRubySession(final Ruby ruby) {
+        this.ruby = ruby;
+        logstashModule = ruby.getOrCreateModule("LogStash");
+        event = setupEvent();
+        ackedBatch = setupAckedBatch();
+        timestamp = setupLogstashClass(
+            JrubyTimestampExtLibrary.RubyTimestamp::new,
+            JrubyTimestampExtLibrary.RubyTimestamp.class
+        );
+        logstashError = setupLogstashStdError(
+            RubyUtil.LogstashRubyError::new, RubyUtil.LogstashRubyError.class
+        );
+        final RubyModule json = logstashModule.defineOrGetModuleUnder("Json");
+        parserError = setupClass(
+            json, logstashError, RubyUtil.LogstashRubyParserError::new,
+            RubyUtil.LogstashRubyParserError.class
+        );
+        generatorError = setupClass(
+            json, logstashError, RubyUtil.LogstashRubyGeneratorError::new,
+            RubyUtil.LogstashRubyGeneratorError.class
+        );
+        timestampParserError = setupLogstashStdError(
+            RubyUtil.LogstashTimestampParserError::new, RubyUtil.LogstashTimestampParserError.class
+        );
+        ensureLoadpath();
+    }
+
+    public Ruby getRuby() {
+        return ruby;
+    }
+
+    public RubyClass getEvent() {
+        return event;
+    }
+
+    public RubyClass getAckedBatch() {
+        return ackedBatch;
+    }
+
+    public RubyClass getTimestamp() {
+        return timestamp;
+    }
+
+    public RubyClass getLogstashError() {
+        return logstashError;
+    }
+
+    public RubyClass getParserError() {
+        return parserError;
+    }
+
+    public RubyClass getGeneratorError() {
+        return generatorError;
+    }
+
+    public RubyClass getTimestampParserError() {
+        return timestampParserError;
+    }
+
+    public RubyModule getLogstashModule() {
+        return logstashModule;
+    }
+
+    @Override
+    public void close() {
+        ruby.tearDown(false);
+    }
+
+    /**
+     * Sets up the Ruby {@code Event} Class.
+     * @return RubyClass for Event
+     */
+    private RubyClass setupEvent() {
+        final RubyClass eventClass = setupLogstashClass(
+            JrubyEventExtLibrary.RubyEvent::new, JrubyEventExtLibrary.RubyEvent.class
+        );
+        defineStringConstant(eventClass, "METADATA", Event.METADATA);
+        defineStringConstant(eventClass, "METADATA_BRACKETS", Event.METADATA_BRACKETS);
+        defineStringConstant(eventClass, "TIMESTAMP", Event.TIMESTAMP);
+        defineStringConstant(eventClass, "TIMESTAMP_FAILURE_TAG", Event.TIMESTAMP_FAILURE_TAG);
+        defineStringConstant(
+            eventClass, "TIMESTAMP_FAILURE_FIELD", Event.TIMESTAMP_FAILURE_FIELD
+        );
+        defineStringConstant(eventClass, "VERSION", Event.VERSION);
+        defineStringConstant(eventClass, "VERSION_ONE", Event.VERSION_ONE);
+        return eventClass;
+    }
+
+    /**
+     * Sets up the AckedBatch RubyClass including its dependencies.
+     * @return AckedBatch RubyClass
+     */
+    private RubyClass setupAckedBatch() {
+        final RubyClass ackedBatch = setupLogstashClass(RubyAckedBatch::new, RubyAckedBatch.class);
+        final RubyClass abstractQueue = setupLogstashClass(
+            ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR, AbstractJRubyQueue.class
+        );
+        setupLogstashClass(
+            abstractQueue, AbstractJRubyQueue.RubyAckedQueue::new,
+            AbstractJRubyQueue.RubyAckedQueue.class
+        );
+        setupLogstashClass(
+            abstractQueue, AbstractJRubyQueue.RubyAckedMemoryQueue::new,
+            AbstractJRubyQueue.RubyAckedMemoryQueue.class
+        );
+        return ackedBatch;
+    }
+
+    /**
+     * Defines a {@link org.jruby.RubyString String} constant on a {@link RubyClass}.
+     * @param clazz RubyClass
+     * @param name Name of the Constant
+     * @param value Value of the Constant
+     */
+    private void defineStringConstant(final RubyClass clazz, final String name,
+        final String value) {
+        clazz.setConstant(name, ruby.newString(value));
+    }
+
+    /**
+     * Sets up a Java-defined {@link RubyClass} in the Logstash Ruby module.
+     * @param allocator Allocator of the class
+     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
+     * @return RubyClass
+     */
+    private RubyClass setupLogstashClass(final ObjectAllocator allocator,
+        final Class<?> jclass) {
+        return setupLogstashClass(ruby.getObject(), allocator, jclass);
+    }
+
+    /**
+     * Sets up a Java-defined {@link RubyClass} as a subclass of {@link Ruby#standardError}
+     * in the Logstash Ruby module.
+     * @param allocator Allocator of the class
+     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
+     * @return RubyClass
+     */
+    private RubyClass setupLogstashStdError(final ObjectAllocator allocator,
+        final Class<?> jclass) {
+        return setupClass(logstashModule, ruby.getStandardError(), allocator, jclass);
+    }
+
+    /**
+     * Sets up a Java-defined {@link RubyClass} in the Logstash Ruby module.
+     * @param parent Parent RubyClass
+     * @param allocator Allocator of the class
+     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
+     * @return RubyClass
+     */
+    private RubyClass setupLogstashClass(final RubyClass parent,
+        final ObjectAllocator allocator, final Class<?> jclass) {
+        return setupClass(logstashModule, parent, allocator, jclass);
+    }
+
+    /**
+     * Sets up a Java-defined {@link RubyClass}.
+     * @param module RubyModule to define class under
+     * @param parent Parent RubyClass
+     * @param allocator Allocator of the class
+     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
+     * @return RubyClass
+     */
+    private RubyClass setupClass(final RubyModule module, final RubyClass parent,
+        final ObjectAllocator allocator, final Class<?> jclass) {
+        final RubyClass clazz = ruby.defineClassUnder(
+            jclass.getAnnotation(JRubyClass.class).name()[0], parent, allocator, module
+        );
+        clazz.defineAnnotatedMethods(jclass);
+        clazz.defineAnnotatedConstants(jclass);
+        return clazz;
+    }
+
+    /**
+     * Loads the logstash-core/lib path if the load service can't find {@code logstash/compiler}.
+     */
+    private void ensureLoadpath() {
+        final LoadService loader = ruby.getLoadService();
+        if (loader.findFileForLoad("logstash/compiler").library == null) {
+            final RubyHash environment = ruby.getENV();
+            final Path root = Paths.get(
+                System.getProperty("logstash.core.root.dir", "")
+            ).toAbsolutePath();
+            final String gems = root.getParent().resolve("vendor").resolve("bundle")
+                .resolve("jruby").resolve("2.3.0").toFile().getAbsolutePath();
+            environment.put("GEM_HOME", gems);
+            environment.put("GEM_PATH", gems);
+            loader.addPaths(root.resolve("lib").toFile().getAbsolutePath()
+            );
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/LogstashSession.java b/logstash-core/src/main/java/org/logstash/LogstashSession.java
new file mode 100644
index 00000000000..45b60a17d69
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/LogstashSession.java
@@ -0,0 +1,45 @@
+package org.logstash;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import org.jruby.Ruby;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.config.ir.ConfigCompiler;
+
+public final class LogstashSession implements AutoCloseable {
+
+    private static final Map<Ruby, LogstashSession> SESSIONS = new ConcurrentHashMap<>();
+
+    private final LogstashJRubySession rubySession;
+
+    private final ConfigCompiler configCompiler;
+
+    public static LogstashSession getOrCreate(final IRubyObject any) {
+        return getOrCreate(any.getRuntime());
+    }
+
+    public static LogstashSession getOrCreate(final Ruby ruby) {
+        return SESSIONS.computeIfAbsent(
+            ruby, runtime -> new LogstashSession(new LogstashJRubySession(runtime))
+        );
+    }
+
+    private LogstashSession(final LogstashJRubySession rubySession) {
+        this.rubySession = rubySession;
+        this.configCompiler = new ConfigCompiler(this);
+    }
+
+    public LogstashJRubySession getRubySession() {
+        return rubySession;
+    }
+
+    public ConfigCompiler getConfigCompiler() {
+        return configCompiler;
+    }
+
+    @Override
+    public void close() {
+        rubySession.close();
+        SESSIONS.remove(this.rubySession.getRuby());
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index d83dd29a887..566d9206e23 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -7,11 +7,6 @@
 import org.jruby.RubyModule;
 import org.jruby.anno.JRubyClass;
 import org.jruby.exceptions.RaiseException;
-import org.jruby.runtime.ObjectAllocator;
-import org.logstash.ackedqueue.ext.AbstractJRubyQueue;
-import org.logstash.ackedqueue.ext.RubyAckedBatch;
-import org.logstash.ext.JrubyEventExtLibrary;
-import org.logstash.ext.JrubyTimestampExtLibrary;
 
 /**
  * Utilities around interaction with the {@link Ruby} runtime.
@@ -23,9 +18,6 @@ public final class RubyUtil {
      */
     public static final Ruby RUBY;
 
-    /**
-     * Logstash Ruby Module.
-     */
     public static final RubyModule LOGSTASH_MODULE;
 
     public static final RubyClass RUBY_EVENT_CLASS;
@@ -44,58 +36,15 @@ public final class RubyUtil {
 
     static {
         RUBY = Ruby.getGlobalRuntime();
-        LOGSTASH_MODULE = RUBY.getOrCreateModule("LogStash");
-        RUBY_TIMESTAMP_CLASS = setupLogstashClass(
-            "Timestamp",
-            JrubyTimestampExtLibrary.RubyTimestamp::new, JrubyTimestampExtLibrary.RubyTimestamp.class
-        );
-        RUBY_EVENT_CLASS = setupLogstashClass(
-            "Event", JrubyEventExtLibrary.RubyEvent::new, JrubyEventExtLibrary.RubyEvent.class
-        );
-        final RubyModule json = LOGSTASH_MODULE.defineOrGetModuleUnder("Json");
-        final RubyClass stdErr = RUBY.getStandardError();
-        LOGSTASH_ERROR = LOGSTASH_MODULE.defineClassUnder(
-            "Error", stdErr, RubyUtil.LogstashRubyError::new
-        );
-        PARSER_ERROR = json.defineClassUnder(
-            "ParserError", LOGSTASH_ERROR, RubyUtil.LogstashRubyParserError::new
-        );
-        TIMESTAMP_PARSER_ERROR = LOGSTASH_MODULE.defineClassUnder(
-            "TimestampParserError", stdErr, RubyUtil.LogstashTimestampParserError::new
-        );
-        GENERATOR_ERROR = json.defineClassUnder("GeneratorError", LOGSTASH_ERROR,
-            RubyUtil.LogstashRubyGeneratorError::new
-        );
-        RUBY_EVENT_CLASS.setConstant("METADATA", RUBY.newString(Event.METADATA));
-        RUBY_EVENT_CLASS.setConstant(
-            "METADATA_BRACKETS", RUBY.newString(Event.METADATA_BRACKETS)
-        );
-        RUBY_EVENT_CLASS.setConstant("TIMESTAMP", RUBY.newString(Event.TIMESTAMP));
-        RUBY_EVENT_CLASS.setConstant(
-            "TIMESTAMP_FAILURE_TAG", RUBY.newString(Event.TIMESTAMP_FAILURE_TAG)
-        );
-        RUBY_EVENT_CLASS.setConstant(
-            "TIMESTAMP_FAILURE_FIELD", RUBY.newString(Event.TIMESTAMP_FAILURE_FIELD)
-        );
-        RUBY_EVENT_CLASS.setConstant("VERSION", RUBY.newString(Event.VERSION));
-        RUBY_EVENT_CLASS.setConstant("VERSION_ONE", RUBY.newString(Event.VERSION_ONE));
-        RUBY_EVENT_CLASS.defineAnnotatedMethods(JrubyEventExtLibrary.RubyEvent.class);
-        RUBY_EVENT_CLASS.defineAnnotatedConstants(JrubyEventExtLibrary.RubyEvent.class);
-        final RubyClass abstractQueue = setupLogstashClass(
-            "AbstractAckedQueue", ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR,
-            AbstractJRubyQueue.class
-        );
-        RUBY_ACKED_BATCH_CLASS = setupLogstashClass(
-            "AckedBatch", RubyAckedBatch::new, RubyAckedBatch.class
-        );
-        setupLogstashClass(
-            "AckedQueue", abstractQueue, AbstractJRubyQueue.RubyAckedQueue::new,
-            AbstractJRubyQueue.RubyAckedQueue.class
-        );
-        setupLogstashClass(
-            "AckedMemoryQueue", abstractQueue, AbstractJRubyQueue.RubyAckedMemoryQueue::new,
-            AbstractJRubyQueue.RubyAckedMemoryQueue.class
-        );
+        final LogstashJRubySession rubySession = LogstashSession.getOrCreate(RUBY).getRubySession();
+        RUBY_TIMESTAMP_CLASS = rubySession.getTimestamp();
+        RUBY_EVENT_CLASS = rubySession.getEvent();
+        LOGSTASH_ERROR = rubySession.getLogstashError();
+        PARSER_ERROR = rubySession.getParserError();
+        GENERATOR_ERROR = rubySession.getGeneratorError();
+        TIMESTAMP_PARSER_ERROR = rubySession.getTimestampParserError();
+        RUBY_ACKED_BATCH_CLASS = rubySession.getAckedBatch();
+        LOGSTASH_MODULE = rubySession.getLogstashModule();
     }
 
     private RubyUtil() {
@@ -113,33 +62,6 @@ public static RaiseException newRubyIOError(Ruby runtime, Throwable e) {
         return new RaiseException(e, new NativeException(runtime, runtime.getIOError(), e));
     }
 
-    /**
-     * Sets up a Java-defined {@link RubyClass} in the Logstash Ruby module.
-     * @param name Name of the class
-     * @param allocator Allocator of the class
-     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
-     * @return RubyClass
-     */
-    private static RubyClass setupLogstashClass(final String name,
-        final ObjectAllocator allocator, final Class<?> jclass) {
-        return setupLogstashClass(name, RUBY.getObject(), allocator, jclass);
-    }
-
-    /**
-     * Sets up a Java-defined {@link RubyClass} in the Logstash Ruby module.
-     * @param name Name of the class
-     * @param parent Parent RubyClass
-     * @param allocator Allocator of the class
-     * @param jclass Underlying Java class that is annotated by {@link JRubyClass}
-     * @return RubyClass
-     */
-    private static RubyClass setupLogstashClass(final String name, final RubyClass parent,
-        final ObjectAllocator allocator, final Class<?> jclass) {
-        final RubyClass clazz = RUBY.defineClassUnder(name, parent, allocator, LOGSTASH_MODULE);
-        clazz.defineAnnotatedMethods(jclass);
-        return clazz;
-    }
-
     @JRubyClass(name = "Error")
     public static final class LogstashRubyError extends RubyException {
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
index 98b48f75de3..80a922385e0 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
@@ -1,12 +1,9 @@
 package org.logstash.config.ir;
 
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import org.jruby.RubyHash;
+import org.jruby.Ruby;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.jruby.runtime.load.LoadService;
-import org.logstash.RubyUtil;
+import org.logstash.LogstashSession;
 import org.logstash.common.IncompleteSourceWithMetadataException;
 import org.logstash.common.SourceWithMetadata;
 
@@ -16,8 +13,10 @@
  */
 public final class ConfigCompiler {
 
-    private ConfigCompiler() {
-        // Utility Class
+    private final Ruby ruby;
+
+    public ConfigCompiler(final LogstashSession logstashSession) {
+        this.ruby = logstashSession.getRubySession().getRuby();
     }
 
     /**
@@ -26,44 +25,23 @@ private ConfigCompiler() {
      * @return Compiled {@link PipelineIR}
      * @throws IncompleteSourceWithMetadataException On Broken Configuration
      */
-    public static PipelineIR configToPipelineIR(final String config, final boolean supportEscapes)
+    public PipelineIR configToPipelineIR(final String config, final boolean supportEscapes)
         throws IncompleteSourceWithMetadataException {
-        ensureLoadpath();
-        final IRubyObject compiler = RubyUtil.RUBY.executeScript(
+        final IRubyObject compiler = ruby.executeScript(
             "require 'logstash/compiler'\nLogStash::Compiler",
             ""
         );
         final IRubyObject code =
-            compiler.callMethod(RubyUtil.RUBY.getCurrentContext(), "compile_sources",
+            compiler.callMethod(ruby.getCurrentContext(), "compile_sources",
                 new IRubyObject[]{
-                    RubyUtil.RUBY.newArray(
+                    ruby.newArray(
                         JavaUtil.convertJavaToRuby(
-                            RubyUtil.RUBY,
-                            new SourceWithMetadata("str", "pipeline", 0, 0, config)
+                            ruby, new SourceWithMetadata("str", "pipeline", 0, 0, config)
                         )
                     ),
-                    RubyUtil.RUBY.newBoolean(supportEscapes)
+                    ruby.newBoolean(supportEscapes)
                 }
             );
         return (PipelineIR) code.toJava(PipelineIR.class);
     }
-
-    /**
-     * Loads the logstash-core/lib path if the load service can't find {@code logstash/compiler}.
-     */
-    private static void ensureLoadpath() {
-        final LoadService loader = RubyUtil.RUBY.getLoadService();
-        if (loader.findFileForLoad("logstash/compiler").library == null) {
-            final RubyHash environment = RubyUtil.RUBY.getENV();
-            final Path root = Paths.get(
-                System.getProperty("logstash.core.root.dir", "")
-            ).toAbsolutePath();
-            final String gems = root.getParent().resolve("vendor").resolve("bundle")
-                .resolve("jruby").resolve("2.3.0").toFile().getAbsolutePath();
-            environment.put("GEM_HOME", gems);
-            environment.put("GEM_PATH", gems);
-            loader.addPaths(root.resolve("lib").toFile().getAbsolutePath()
-            );
-        }
-    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
index 6a2f89f33d7..7f52b3edcec 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
@@ -1,6 +1,8 @@
 package org.logstash.config.ir;
 
+import org.jruby.Ruby;
 import org.junit.Test;
+import org.logstash.LogstashSession;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -9,9 +11,12 @@ public class ConfigCompilerTest {
 
     @Test
     public void testConfigToPipelineIR() throws Exception {
-        final PipelineIR pipelineIR =
-            ConfigCompiler.configToPipelineIR("input {stdin{}} output{stdout{}}", false);
-        assertThat(pipelineIR.getOutputPluginVertices().size(), is(1));
-        assertThat(pipelineIR.getFilterPluginVertices().size(), is(0));
+        try (final LogstashSession logstash = LogstashSession.getOrCreate(Ruby.newInstance())) {
+            final PipelineIR pipelineIR = logstash.getConfigCompiler().configToPipelineIR(
+                "input {stdin{}} output{stdout{}}", false
+            );
+            assertThat(pipelineIR.getOutputPluginVertices().size(), is(1));
+            assertThat(pipelineIR.getFilterPluginVertices().size(), is(0));
+        }
     }
 }
