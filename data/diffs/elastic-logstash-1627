diff --git a/lib/logstash/config/config_ast.rb b/lib/logstash/config/config_ast.rb
index f240e507430..c170492c9f2 100644
--- a/lib/logstash/config/config_ast.rb
+++ b/lib/logstash/config/config_ast.rb
@@ -211,7 +211,7 @@ def compile
 
             new_events = []
             #{variable_name}.filter(event){|new_event| new_events << new_event}
-            event.cancelled? ? new_events : new_events << event
+            event.cancelled? ? new_events : new_events.unshift(event)
           end
         CODE
       when "output"
diff --git a/spec/filters/clone.rb b/spec/filters/clone.rb
index e8693920afe..900539f3a76 100644
--- a/spec/filters/clone.rb
+++ b/spec/filters/clone.rb
@@ -81,36 +81,5 @@
     end
   end
 
-  describe "with conditionals, see bug #1548" do
-    type "original"
-    config <<-CONFIG
-      filter {
-        clone {
-          clones => ["clone"]
-        }
-        if [type] == "clone" {
-          mutate { add_field => { "clone" => "true" } }
-        } else {
-          mutate { add_field => { "original" => "true" } }
-        }
-      }
-    CONFIG
-
-    sample("message" => "hello world") do
-      insist { subject }.is_a? Array
-      # subject.each{|event| puts(event.inspect + "\n")}
-      insist { subject.length } == 2
-
-      insist { subject.first["type"] } == nil
-      insist { subject.first["original"] } == "true"
-      insist { subject.first["clone"]} == nil
-      insist { subject.first["message"] } == "hello world"
-
-      insist { subject.last["type"]} == "clone"
-      insist { subject.last["original"] } == nil
-      insist { subject.last["clone"]} == "true"
-      insist { subject.last["message"] } == "hello world"
-    end
-  end
 
 end
diff --git a/spec/filters/filter_chains.rb b/spec/filters/filter_chains.rb
new file mode 100644
index 00000000000..edff7979bc6
--- /dev/null
+++ b/spec/filters/filter_chains.rb
@@ -0,0 +1,122 @@
+# encoding: utf-8
+
+require "test_utils"
+require "logstash/filters/split"
+require "logstash/filters/clone"
+
+describe LogStash::Filters do
+  extend LogStash::RSpec
+
+  describe "chain split with mutate filter" do
+    config <<-CONFIG
+      filter {
+        split { }
+        mutate { replace => [ "message", "test" ] }
+      }
+    CONFIG
+
+    sample "hello\nbird" do
+      insist { subject.length } == 2
+      insist { subject[0]["message"] } == "test"
+      insist { subject[1]["message"] } == "test"
+    end
+  end
+
+
+  describe "new events bug #793" do
+    config <<-CONFIG
+      filter {
+        split { terminator => "," }
+        mutate { rename => { "message" => "fancypants" } }
+      }
+    CONFIG
+
+    sample "hello,world" do
+      insist { subject.length } == 2
+      insist { subject[0]["fancypants"] } == "hello"
+      insist { subject[1]["fancypants"] } == "world"
+    end
+  end
+
+  describe "split then multiple mutate" do
+    config <<-CONFIG
+      filter {
+        split { }
+        mutate { replace => [ "message", "test" ] }
+        mutate { replace => [ "message", "test2" ] }
+        mutate { replace => [ "message", "test3" ] }
+        mutate { replace => [ "message", "test4" ] }
+      }
+    CONFIG
+
+    sample "big\nbird" do
+      insist { subject.length } == 2
+      insist { subject[0]["message"] } == "test4"
+      insist { subject[1]["message"] } == "test4"
+    end
+  end
+
+  describe "split then clone" do
+    config <<-CONFIG
+      filter {
+        split { }
+        clone { clones => ['clone1', 'clone2'] }
+      }
+    CONFIG
+
+    sample "big\nbird" do
+      insist { subject.length } == 6
+
+      insist { subject[0]["message"] } == "big"
+      insist { subject[0]["type"] } == nil
+
+      insist { subject[1]["message"] } == "big"
+      insist { subject[1]["type"] } == "clone1"
+
+      insist { subject[2]["message"] } == "big"
+      insist { subject[2]["type"] } == "clone2"
+
+      insist { subject[3]["message"] } == "bird"
+      insist { subject[3]["type"] } == nil
+
+      insist { subject[4]["message"] } == "bird"
+      insist { subject[4]["type"] } == "clone1"
+
+      insist { subject[5]["message"] } == "bird"
+      insist { subject[5]["type"] } == "clone2"
+    end
+  end
+
+  describe "clone with conditionals, see bug #1548" do
+    type "original"
+    config <<-CONFIG
+      filter {
+        clone {
+          clones => ["clone"]
+        }
+        if [type] == "clone" {
+          mutate { add_field => { "clone" => "true" } }
+        } else {
+          mutate { add_field => { "original" => "true" } }
+        }
+      }
+    CONFIG
+
+    sample("message" => "hello world") do
+      insist { subject }.is_a? Array
+      # subject.each{|event| puts(event.inspect + "\n")}
+      insist { subject.length } == 2
+
+      insist { subject.first["type"] } == nil
+      insist { subject.first["original"] } == "true"
+      insist { subject.first["clone"]} == nil
+      insist { subject.first["message"] } == "hello world"
+
+      insist { subject.last["type"]} == "clone"
+      insist { subject.last["original"] } == nil
+      insist { subject.last["clone"]} == "true"
+      insist { subject.last["message"] } == "hello world"
+    end
+  end
+
+end
diff --git a/spec/filters/split.rb b/spec/filters/split.rb
index 7be3110afb5..7e95c80894c 100644
--- a/spec/filters/split.rb
+++ b/spec/filters/split.rb
@@ -21,61 +21,6 @@
     end
   end
 
-  describe "all defaults chain w/ other filter" do
-    config <<-CONFIG
-      filter {
-        split { }
-        mutate { replace => [ "message", "test" ] }
-      }
-    CONFIG
-
-    sample "big\nbird" do
-      insist { subject.length } == 2
-      insist { subject[0]["message"] } == "test"
-      insist { subject[1]["message"] } == "test"
-    end
-  end
-
-  describe "all defaults chain w/ many other filters" do
-    config <<-CONFIG
-      filter {
-        split { }
-        mutate { replace => [ "message", "test" ] }
-        mutate { replace => [ "message", "test2" ] }
-        mutate { replace => [ "message", "test3" ] }
-        mutate { replace => [ "message", "test4" ] }
-      }
-    CONFIG
-
-    sample "big\nbird" do
-      insist { subject.length } == 2
-      insist { subject[0]["message"] } == "test4"
-      insist { subject[1]["message"] } == "test4"
-    end
-  end
-
-  describe "all defaults chain w/ mutate and clone filters" do
-    config <<-CONFIG
-      filter {
-        split { }
-        mutate { replace => [ "message", "test" ] }
-        clone { clones => ['clone1', 'clone2'] }
-        mutate { replace => [ "message", "test2" ] }
-        mutate { replace => [ "message", "test3" ] }
-      }
-    CONFIG
-
-    sample "big\nbird" do
-      insist { subject.length } == 6
-      insist { subject[0]["message"] } == "test3"
-      insist { subject[1]["message"] } == "test3"
-      insist { subject[2]["message"] } == "test3"
-      insist { subject[3]["message"] } == "test3"
-      insist { subject[4]["message"] } == "test3"
-      insist { subject[5]["message"] } == "test3"
-    end
-  end
-
   describe "custome terminator" do
     config <<-CONFIG
       filter {
@@ -113,50 +58,4 @@
     end
   end
 
-  describe "chain split with another filter" do
-    config <<-CONFIG
-      filter {
-        split { }
-        mutate { replace => [ "message", "test" ] }
-      }
-    CONFIG
-
-    sample "hello\nbird" do
-      insist { subject.length } == 2
-      insist { subject[0]["message"] } == "test"
-      insist { subject[1]["message"] } == "test"
-    end
-  end
-
-
-  describe "chain split with another filter" do
-    config <<-CONFIG
-      filter {
-        split { }
-        mutate { replace => [ "message", "test" ] }
-      }
-    CONFIG
-
-    sample "hello\nbird" do
-    insist { subject.length } == 2
-      insist { subject[0]["message"] } == "test"
-      insist { subject[1]["message"] } == "test"
-    end
-  end
-
-  describe "new events bug #793" do
-    config <<-CONFIG
-      filter {
-        split { terminator => "," }
-        mutate { rename => { "message" => "fancypants" } }
-      }
-    CONFIG
-
-    sample "hello,world" do
-    insist { subject.length } == 2
-      insist { subject[0]["fancypants"] } == "hello"
-      insist { subject[1]["fancypants"] } == "world"
-    end
-  end
-
-end
\ No newline at end of file
+end
