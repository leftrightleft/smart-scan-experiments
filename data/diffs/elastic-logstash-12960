diff --git a/.gitignore b/.gitignore
index 3a87424ee3e..4b797a76a13 100644
--- a/.gitignore
+++ b/.gitignore
@@ -57,3 +57,7 @@ logstash-core/versions-gem-copy.yml
 logstash-core-plugin-api/versions-gem-copy.yml
 config/logstash.keystore
 html_docs
+lib/pluginmanager/plugin_aliases.yml
+logstash-core/src/main/resources/org/logstash/plugins/plugin_aliases.yml
+spec/unit/plugin_manager/plugin_aliases.yml
+logstash-core/src/test/resources/org/logstash/plugins/plugin_aliases.yml 
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index def0f039001..c8f0d53c129 100644
--- a/build.gradle
+++ b/build.gradle
@@ -181,6 +181,73 @@ tasks.register("configureArtifactInfo") {
     project.ext.set("stackArtifactSuffix", qualifiedVersion)
 }
 
+abstract class SignAliasDefinitionsTask extends DefaultTask {
+
+    String registryPath = "logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml"
+    String hashedFileName = 'plugin_aliases_hashed.yml'
+
+    @InputFile
+    File aliasPath = project.file("${project.projectDir}/${registryPath}")
+
+    @OutputFile
+    File hashedFile = project.file("${project.buildDir}/${hashedFileName}")
+
+    @TaskAction
+    def sign() {
+        String aliases_defs = new File("${project.projectDir}/${registryPath}").text
+        String hash = aliases_defs.digest('SHA-256')
+        new File(project.buildDir, hashedFileName).withWriter('utf-8') { writer ->
+            writer.writeLine "#CHECKSUM: ${hash}"
+            writer.writeLine "# DON'T EDIT THIS FILE, PLEASE REFER TO ${registryPath}"
+            writer.write aliases_defs
+        }
+    }
+}
+
+tasks.register("markAliasDefinitions", SignAliasDefinitionsTask) {
+    description "Create an hashes aliases file from original aliases yml definition"
+}
+
+tasks.register("markTestAliasDefinitions", SignAliasDefinitionsTask) {
+    description "Create an hashes aliases file for testing aliases yml definition"
+    registryPath = 'logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml'
+    hashedFileName = 'plugin_aliases_hashed_test.yml'
+}
+
+tasks.register("copyPluginAlias", Copy) {
+    description "Copy the marked plugin_aliases.yml file to destination folders"
+    dependsOn "markAliasDefinitions"
+
+    inputs.file("${buildDir}/plugin_aliases_hashed.yml")
+    destinationDir = projectDir
+    from("${buildDir}/plugin_aliases_hashed.yml") {
+        into "lib/pluginmanager/"
+        rename "plugin_aliases_hashed.yml", "plugin_aliases.yml"
+    }
+    from("${buildDir}/plugin_aliases_hashed.yml") {
+        into "logstash-core/src/main/resources/org/logstash/plugins/"
+        rename "plugin_aliases_hashed.yml", "plugin_aliases.yml"
+    }
+}
+
+tasks.register("copyPluginTestAlias", Copy) {
+    description "Copy the marked test plugin_aliases.yml file to destination folders"
+    dependsOn "markTestAliasDefinitions"
+
+    inputs.file("${buildDir}/plugin_aliases_hashed_test.yml")
+    destinationDir = projectDir
+    from("${buildDir}/plugin_aliases_hashed_test.yml") {
+        into "spec/unit/plugin_manager/"
+        rename "plugin_aliases_hashed_test.yml", "plugin_aliases.yml"
+    }
+    from("${buildDir}/plugin_aliases_hashed_test.yml") {
+        into "logstash-core/src/test/resources/org/logstash/plugins/"
+        rename "plugin_aliases_hashed_test.yml", "plugin_aliases.yml"
+    }
+}
+
+processResources.dependsOn(copyPluginAlias)
+tasks.findByPath(':logstash-core:processTestResources').dependsOn(copyPluginTestAlias)
 
 
 // Tasks
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index 6a88aad4f3f..9da3874a028 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -16,12 +16,38 @@
 # under the License.
 
 require "rubygems/package"
+require "yaml"
 require_relative "../bootstrap/patches/remote_fetcher"
 
 module LogStash::PluginManager
 
+  def self.load_aliases_definitions(path = File.expand_path('plugin_aliases.yml', __dir__))
+    content = IO.read(path)
+
+    #Verify header
+    header = content.lines[0]
+    if !header.start_with?('#CHECKSUM:')
+      raise ValidationError.new "Bad header format, expected '#CHECKSUM: ...' but found #{header}"
+    end
+    yaml_body = content.lines[2..-1].join
+    extracted_sha = header.delete_prefix('#CHECKSUM:').chomp.strip
+    sha256_hex = Digest::SHA256.hexdigest(yaml_body)
+    if sha256_hex != extracted_sha
+      raise ValidationError.new "Bad checksum value, expected #{sha256_hex} but found #{extracted_sha}"
+    end
+
+    yaml = YAML.safe_load(yaml_body) || {}
+    result = {}
+    yaml.each do |type, alias_defs|
+      alias_defs.each do |alias_name, aliased|
+        result["logstash-#{type}-#{alias_name}"] = "logstash-#{type}-#{aliased}"
+      end
+    end
+    result
+  end
+
   # Defines the plugin alias, must be kept in synch with Java class org.logstash.plugins.AliasRegistry
-  ALIASES = {"logstash-input-elastic_agent" => "logstash-input-beats"}
+  ALIASES = load_aliases_definitions()
 
   class ValidationError < StandardError; end
 
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 4083bb962c3..c2b88896d64 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -176,6 +176,7 @@ dependencies {
     api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
     implementation 'org.codehaus.janino:janino:3.1.0'
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
+    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
     if (customJRubyDir == "") {
         api "org.jruby:jruby-complete:${jrubyVersion}"
     } else {
diff --git a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
index 485b61a232c..7a49c2ed4d4 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
@@ -1,15 +1,27 @@
 package org.logstash.plugins;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
+import org.apache.commons.codec.digest.DigestUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 import org.logstash.plugins.PluginLookup.PluginType;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Scanner;
 
 public class AliasRegistry {
 
+    private static final Logger LOGGER = LogManager.getLogger(AliasRegistry.class);
+
     private final static class PluginCoordinate {
         private final PluginType type;
         private final String name;
@@ -37,13 +49,111 @@ PluginCoordinate withName(String name) {
         }
     }
 
+    private static class YamlWithChecksum {
+
+        static YamlWithChecksum load(final String filePath) {
+            final InputStream in = YamlWithChecksum.class.getClassLoader().getResourceAsStream(filePath);
+            if (in == null) {
+                throw new IllegalArgumentException("Can't find aliases yml definition file in jar resources: " + filePath);
+            }
+
+            try (Scanner scanner = new Scanner(in, StandardCharsets.UTF_8.name())) {
+                // read the header line
+                final String header = scanner.nextLine();
+                if (!header.startsWith("#CHECKSUM:")) {
+                    throw new IllegalArgumentException("Bad header format, expected '#CHECKSUM: ...' but found " + header);
+                }
+                final String extractedHash = header.substring("#CHECKSUM:".length()).trim();
+
+                // read the comment
+                scanner.nextLine();
+
+                // collect all remaining lines
+                final StringBuilder yamlBuilder = new StringBuilder();
+                scanner.useDelimiter("\\z"); // EOF
+                if (scanner.hasNext()) {
+                    yamlBuilder.append(scanner.next());
+                }
+                final String yamlContents = yamlBuilder.toString();
+                return new YamlWithChecksum(yamlContents, extractedHash);
+            }
+        }
+
+        final String yamlContents;
+        final String checksumHash;
+
+        private YamlWithChecksum(final String yamlContents, final String checksumHash) {
+            this.yamlContents = yamlContents;
+            this.checksumHash = checksumHash;
+        }
+
+        @SuppressWarnings("unchecked")
+        private Map<String, Map<String, String>> decodeYaml() throws IOException {
+            ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
+            return mapper.readValue(yamlContents, Map.class);
+        }
+
+        private String computeHashFromContent() {
+            return DigestUtils.sha256Hex(yamlContents);
+        }
+    }
+
+    private static class AliasYamlLoader {
+
+        private Map<PluginCoordinate, String> loadAliasesDefinitions() {
+            final YamlWithChecksum aliasYml;
+            try {
+                aliasYml = YamlWithChecksum.load("org/logstash/plugins/plugin_aliases.yml");
+            } catch (IllegalArgumentException badSyntaxExcp) {
+                LOGGER.warn("Malformed yaml file", badSyntaxExcp);
+                return Collections.emptyMap();
+            }
+
+            final String calculatedHash = aliasYml.computeHashFromContent();
+            if (!calculatedHash.equals(aliasYml.checksumHash)) {
+                LOGGER.warn("Bad checksum value, expected {} but found {}", calculatedHash, aliasYml.checksumHash);
+                return Collections.emptyMap();
+            }
+
+            // decode yaml to nested maps
+            final Map<String, Map<String, String>> aliasedDescriptions;
+            try {
+                aliasedDescriptions = aliasYml.decodeYaml();
+            } catch (IOException ioex) {
+                LOGGER.error("Error decoding the yaml aliases file", ioex);
+                return Collections.emptyMap();
+            }
+
+            // convert aliases nested maps definitions to plugin alias definitions
+            final Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
+            defaultDefinitions.putAll(extractDefinitions(PluginType.INPUT, aliasedDescriptions));
+            defaultDefinitions.putAll(extractDefinitions(PluginType.CODEC, aliasedDescriptions));
+            defaultDefinitions.putAll(extractDefinitions(PluginType.FILTER, aliasedDescriptions));
+            defaultDefinitions.putAll(extractDefinitions(PluginType.OUTPUT, aliasedDescriptions));
+            return defaultDefinitions;
+        }
+
+        private Map<PluginCoordinate, String> extractDefinitions(PluginType pluginType,
+                                                                 Map<String, Map<String, String>> aliasesYamlDefinitions) {
+            Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
+            final Map<String, String> pluginDefinitions = aliasesYamlDefinitions.get(pluginType.name().toLowerCase());
+            if (pluginDefinitions == null) {
+                return Collections.emptyMap();
+            }
+            for (Map.Entry<String, String> aliasDef : pluginDefinitions.entrySet()) {
+                defaultDefinitions.put(new PluginCoordinate(pluginType, aliasDef.getKey()), aliasDef.getValue());
+            }
+            return defaultDefinitions;
+        }
+    }
+
 
     private final Map<PluginCoordinate, String> aliases = new HashMap<>();
     private final Map<PluginCoordinate, String> reversedAliases = new HashMap<>();
 
     public AliasRegistry() {
-        Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
-        defaultDefinitions.put(new PluginCoordinate(PluginType.INPUT, "elastic_agent"), "beats");
+        final AliasYamlLoader loader = new AliasYamlLoader();
+        final Map<PluginCoordinate, String> defaultDefinitions = loader.loadAliasesDefinitions();
         configurePluginAliases(defaultDefinitions);
     }
 
diff --git a/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml b/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml
new file mode 100644
index 00000000000..2b715c2959a
--- /dev/null
+++ b/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml
@@ -0,0 +1,2 @@
+input:
+  elastic_agent: beats
diff --git a/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java b/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java
new file mode 100644
index 00000000000..ffb45ed9bdd
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java
@@ -0,0 +1,21 @@
+package org.logstash.plugins;
+
+import org.junit.Test;
+import org.logstash.plugins.PluginLookup.PluginType;
+
+import static org.junit.Assert.*;
+
+public class AliasRegistryTest {
+
+    @Test
+    public void testLoadAliasesFromYAML() {
+        final AliasRegistry sut = new AliasRegistry();
+
+        assertEquals("aliased_input1 should be the alias for beats input",
+                "beats", sut.originalFromAlias(PluginType.INPUT, "aliased_input1"));
+        assertEquals("aliased_input2 should be the alias for tcp input",
+                "tcp", sut.originalFromAlias(PluginType.INPUT, "aliased_input2"));
+        assertEquals("aliased_filter should be the alias for json filter",
+                "json", sut.originalFromAlias(PluginType.FILTER, "aliased_filter"));
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml b/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml
new file mode 100644
index 00000000000..06a5fed770a
--- /dev/null
+++ b/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml
@@ -0,0 +1,6 @@
+input:
+  aliased_input1: beats
+  aliased_input2: tcp
+
+filter:
+  aliased_filter: json
diff --git a/spec/unit/plugin_manager/util_spec.rb b/spec/unit/plugin_manager/util_spec.rb
index bdf9705d8b4..26623859d8d 100644
--- a/spec/unit/plugin_manager/util_spec.rb
+++ b/spec/unit/plugin_manager/util_spec.rb
@@ -84,4 +84,15 @@
       expect(Gem.sources.map { |source| source }).to eq(sources)
     end
   end
+
+  describe "process alias yaml definition" do
+    let(:path) { File.expand_path('plugin_aliases.yml', __dir__) }
+
+    it "should decode correctly" do
+      aliases = subject.load_aliases_definitions(path)
+      expect(aliases['logstash-input-aliased_input1']).to eq('logstash-input-beats')
+      expect(aliases['logstash-input-aliased_input2']).to eq('logstash-input-tcp')
+      expect(aliases['logstash-filter-aliased_filter']).to eq('logstash-filter-json')
+    end
+  end
 end
