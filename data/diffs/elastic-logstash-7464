diff --git a/logstash-core/src/main/java/org/logstash/DLQEntry.java b/logstash-core/src/main/java/org/logstash/DLQEntry.java
index 78624901519..fd44dc53415 100644
--- a/logstash-core/src/main/java/org/logstash/DLQEntry.java
+++ b/logstash-core/src/main/java/org/logstash/DLQEntry.java
@@ -112,4 +112,15 @@ public String getReason() {
     public Timestamp getEntryTime() {
         return entryTime;
     }
+
+    @Override
+    public String toString() {
+        return "DLQEntry{" +
+                "event=" + event +
+                ", pluginType='" + pluginType + '\'' +
+                ", pluginId='" + pluginId + '\'' +
+                ", reason='" + reason + '\'' +
+                ", entryTime=" + entryTime +
+                '}';
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index 9df8271c6f9..a21f60a3214 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -43,6 +43,7 @@ public class RecordIOReader {
     private int currentBlockSizeReadFromChannel;
     private final Path path;
     private long channelPosition;
+    private static final int UNSET = -1;
 
     public RecordIOReader(Path path) throws IOException {
         this.path = path;
@@ -74,7 +75,7 @@ public void seekToOffset(long channelOffset) throws IOException {
     }
 
     public <T> byte[] seekToNextEventPosition(T target, Function<byte[], T> keyExtractor, Comparator<T> keyComparator) throws IOException {
-        int matchingBlock;
+        int matchingBlock = UNSET;
         int lowBlock = 0;
         int highBlock = (int) (channel.size() - VERSION_SIZE) / BLOCK_SIZE;
 
@@ -96,7 +97,9 @@ public <T> byte[] seekToNextEventPosition(T target, Function<byte[], T> keyExtra
                 break;
             }
         }
-        matchingBlock = lowBlock;
+        if (matchingBlock == UNSET) {
+            matchingBlock = lowBlock;
+        }
 
         // now sequential scan to event
         seekToBlock(matchingBlock);
