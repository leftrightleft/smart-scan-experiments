diff --git a/Makefile b/Makefile
index 1fe081722ff..34610355558 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@
 #   wget or curl
 #
 JRUBY_VERSION=1.7.8
-ELASTICSEARCH_VERSION=0.90.3
+ELASTICSEARCH_VERSION=0.90.7
 
 WITH_JRUBY=java -jar $(shell pwd)/$(JRUBY) -S
 JRUBY=vendor/jar/jruby-complete-$(JRUBY_VERSION).jar
diff --git a/lib/logstash/outputs/elasticsearch.rb b/lib/logstash/outputs/elasticsearch.rb
index 30a4241d0ba..d7cc214f0b7 100644
--- a/lib/logstash/outputs/elasticsearch.rb
+++ b/lib/logstash/outputs/elasticsearch.rb
@@ -43,6 +43,32 @@ class LogStash::Outputs::ElasticSearch < LogStash::Outputs::Base
   # similar events to the same 'type'. String expansion '%{foo}' works here.
   config :index_type, :validate => :string
 
+  # Starting in Logstash 1.3 (unless you set option "manage_template" to false)
+  # a default mapping template for Elasticsearch will be applied, if you do not 
+  # already have one set to match the index pattern defined (default of 
+  # "logstash-%{+YYYY.MM.dd}"), minus any variables.  For example, in this case
+  # the template will be applied to all indices starting with logstash-* 
+  #
+  # If you have dynamic templating (e.g. creating indices based on field names)
+  # then you should set "manage_template" to false and use the REST API to upload
+  # your templates manually.
+  config :manage_template, :validate => :boolean, :default => true
+
+  # This configuration option defines how the template is named inside Elasticsearch
+  # Note that if you have used the template management features and subsequently
+  # change this you will need to prune the old template manually, e.g.
+  # curl -XDELETE http://localhost:9200/_template/OLD_template_name?pretty
+  # where OLD_template_name is whatever the former setting was.
+  config :template_name, :validate => :string, :default => "logstash"
+
+  # You can set the path to your own template here, if you so desire.  
+  # If not the included template will be used.
+  config :template, :validate => :path
+
+  # Overwrite the current template with whatever is configured 
+  # in the template and template_name directives.
+  config :template_overwrite, :validate => :boolean, :default => false
+
   # The document ID for the index. Useful for overwriting existing entries in
   # elasticsearch with the same ID.
   config :document_id, :validate => :string, :default => nil
@@ -149,7 +175,60 @@ def register
     options[:port] = options[:port].to_i if options[:type] == :transport
 
     @client = ElasticSearch::Client.new(options)
-
+    
+    if @manage_template
+      @logger.info("Automatic template configuration enabled", :manage_template => @manage_template.to_s)      
+      java_client = @client.instance_eval{@client}
+
+      if @template_overwrite
+        @logger.info("Template overwrite enabled.  Deleting template if it exists.", :template_overwrite => @template_overwrite.to_s)
+        check_template = ElasticSearch::GetIndexTemplatesRequest.new(java_client, @template_name)
+        result = check_template.execute
+        if !result.getIndexTemplates.isEmpty
+          delete_template = ElasticSearch::DeleteIndexTemplateRequest.new(java_client, @template_name)
+          result = delete_template.execute
+          if result.isAcknowledged
+            @logger.info("Successfully deleted template", :template_name => @template_name)
+          else
+            @logger.error("Failed to delete template", :template_name => @template_name)
+          end
+        end  
+      end # end if @template_overwrite
+      has_template = false
+      @logger.debug("Fetching all templates...")
+      gettemplates = ElasticSearch::GetIndexTemplatesRequest.new(java_client, "*")
+      result = gettemplates.execute
+      # Results of this come as a list, so we need to iterate through it
+      if !result.getIndexTemplates.isEmpty
+        template_metadata_list = result.getIndexTemplates
+        templates = {}
+        i = 0
+        template_metadata_list.size.times do
+          template_data = template_metadata_list.get(i)
+          templates[template_data.name] = template_data.template
+          i += 1
+        end
+        template_idx_name = @index.sub(/%{[^}]+}/,'*')
+        alt_template_idx_name = @index.sub(/-%{[^}]+}/,'*')
+        if !templates.any? { |k,v| v == template_idx_name || v == alt_template_idx_name }
+          @logger.debug("No logstash template found in Elasticsearch", :has_template => has_template, :name => template_idx_name, :alt => alt_template_idx_name)
+        else
+          has_template = true
+          @logger.info("Found existing Logstash template match.", :has_template => has_template, :name => template_idx_name, :alt => alt_template_idx_name, :templates => templates.to_s)
+        end
+      end
+      if !has_template #=> No template found, we're going to add one
+        get_template_json
+        put_template = ElasticSearch::PutIndexTemplateRequest.new(java_client, @template_name, @template_json)
+        result = put_template.execute
+        if result.isAcknowledged
+          @logger.info("Successfully inserted template", :template_name => @template_name)
+        else
+          @logger.error("Failed to insert template", :template_name => @template_name)
+        end
+      end 
+    end # if @manage_templates  
+    
     buffer_initialize(
       :max_items => @flush_size,
       :max_interval => @idle_flush_time,
@@ -157,6 +236,31 @@ def register
     )
   end # def register
 
+  public
+  def get_template_json
+    if @template.nil?
+      if __FILE__ =~ /^(jar:)?file:\/.+!.+/
+        begin
+          # Running from a jar, assume types.db is at the root.
+          jar_path = [__FILE__.split("!").first, "/elasticsearch-template.json"].join("!")
+          @template = jar_path
+        rescue => ex
+          raise "Failed to cache, due to: #{ex}\n#{ex.backtrace}"
+        end
+      else
+        if File.exists?("elasticsearch-template.json")
+          @template = "elasticsearch-template.json"
+        elsif File.exists?("lib/logstash/outputs/elasticsearch-template.json")
+          @template = "lib/logstash/outputs/elasticsearch-template.json"
+        else
+          raise "You must specify 'template => ...' in your elasticsearch_http output"
+        end
+      end
+    end
+    @template_json = IO.read(@template).gsub(/\n/,'')
+    @logger.info("Using mapping template", :template => @template_json)
+  end # def get_template
+
   protected
   def start_local_elasticsearch
     @logger.info("Starting embedded ElasticSearch local node.")
diff --git a/lib/logstash/outputs/elasticsearch_http.rb b/lib/logstash/outputs/elasticsearch_http.rb
index 9dba034d6cc..a9f22ea3ac0 100644
--- a/lib/logstash/outputs/elasticsearch_http.rb
+++ b/lib/logstash/outputs/elasticsearch_http.rb
@@ -24,29 +24,32 @@ class LogStash::Outputs::ElasticSearchHTTP < LogStash::Outputs::Base
   # The index type to write events to. Generally you should try to write only
   # similar events to the same 'type'. String expansion '%{foo}' works here.
   config :index_type, :validate => :string
-  
-  # Starting in Logstash 1.3 (unless you set option "manage_template" to false) 
-  # a default mapping template for Elasticsearch will be applied if you do not 
+
+  # Starting in Logstash 1.3 (unless you set option "manage_template" to false)
+  # a default mapping template for Elasticsearch will be applied, if you do not 
   # already have one set to match the index pattern defined (default of 
   # "logstash-%{+YYYY.MM.dd}"), minus any variables.  For example, in this case
   # the template will be applied to all indices starting with logstash-* 
+  #
   # If you have dynamic templating (e.g. creating indices based on field names)
   # then you should set "manage_template" to false and use the REST API to upload
   # your templates manually.
+  config :manage_template, :validate => :boolean, :default => true
+
   # This configuration option defines how the template is named inside Elasticsearch
-  config :template_name, :validate => :string, :default => "logstash_per_index"
-  
+  # Note that if you have used the template management features and subsequently
+  # change this you will need to prune the old template manually, e.g.
+  # curl -XDELETE http://localhost:9200/_template/OLD_template_name?pretty
+  # where OLD_template_name is whatever the former setting was.
+  config :template_name, :validate => :string, :default => "logstash"
+
   # You can set the path to your own template here, if you so desire.  
   # If not the included template will be used.
   config :template, :validate => :path
-  
+
   # Overwrite the current template with whatever is configured 
   # in the template and template_name directives.
   config :template_overwrite, :validate => :boolean, :default => false
-  
-  # Logstash will install the default template unless it finds one pre-existing
-  # or you have set this option to false.
-  config :manage_template, :validate => :boolean, :default => true
 
   # The hostname or ip address to reach your elasticsearch server.
   config :host, :validate => :string, :required => true
diff --git a/logstash.gemspec b/logstash.gemspec
index 6d67482fab5..fd36d57a6c1 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -80,7 +80,7 @@ Gem::Specification.new do |gem|
 
   if RUBY_PLATFORM == 'java'
     gem.platform = RUBY_PLATFORM
-    gem.add_runtime_dependency "jruby-elasticsearch", ["0.0.16"]  #(BSD license)
+    gem.add_runtime_dependency "jruby-elasticsearch", ["0.0.17"]  #(BSD license)
     gem.add_runtime_dependency "jruby-httpclient"                 #(Apache 2.0 license)
     gem.add_runtime_dependency "bouncy-castle-java", "1.5.0147"   #(MIT license)
     gem.add_runtime_dependency "jruby-openssl", "0.8.7"           #(CPL/GPL/LGPL license)
