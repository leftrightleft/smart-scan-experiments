diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
index f76b6eb35fb..329951bc8d0 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
@@ -19,6 +19,7 @@
 import org.logstash.config.ir.expression.BooleanExpression;
 import org.logstash.config.ir.expression.EventValueExpression;
 import org.logstash.config.ir.expression.Expression;
+import org.logstash.config.ir.expression.RegexValueExpression;
 import org.logstash.config.ir.expression.ValueExpression;
 import org.logstash.config.ir.expression.binary.And;
 import org.logstash.config.ir.expression.binary.Eq;
@@ -184,6 +185,11 @@ private static boolean eAndE(final BinaryBooleanExpression expression) {
                 expression.getRight() instanceof EventValueExpression;
         }
 
+        private static boolean vAndR(final BinaryBooleanExpression expression) {
+            return expression.getLeft() instanceof ValueExpression &&
+                    expression.getRight() instanceof RegexValueExpression;
+        }
+
         private static EventCondition truthy(final Truthy truthy) {
             final EventCondition condition;
             final Expression inner = truthy.getExpression();
@@ -201,8 +207,13 @@ private static EventCondition regex(final RegexEq regex) {
             final Expression uright = regex.getRight();
             if (eAndV(regex)) {
                 condition = new EventCondition.Compiler.FieldMatches(
-                    ((EventValueExpression) uleft).getFieldName(),
-                    ((ValueExpression) uright).get().toString()
+                        ((EventValueExpression) uleft).getFieldName(),
+                        ((ValueExpression) uright).get().toString()
+                );
+            } else if (vAndR(regex)) {
+                condition = new EventCondition.Compiler.ConstantMatches(
+                        ((ValueExpression) uleft).get(),
+                        ((RegexValueExpression) uright).get().toString()
                 );
             } else {
                 throw new EventCondition.Compiler.UnexpectedTypeException(uleft, uright);
@@ -463,6 +474,24 @@ public boolean fulfilled(final JrubyEventExtLibrary.RubyEvent event) {
             }
         }
 
+        private static final class ConstantMatches implements EventCondition {
+
+            private final boolean matches;
+
+            private ConstantMatches(final Object constant, final String regex) {
+                this.matches = constant instanceof String &&
+                        !(RubyUtil.RUBY.newString((String) constant).match(
+                                WorkerLoop.THREAD_CONTEXT.get(),
+                                RubyUtil.RUBY.newString(regex)).isNil());
+            }
+
+            @Override
+            public boolean fulfilled(final JrubyEventExtLibrary.RubyEvent event) {
+                return matches;
+            }
+
+        }
+
         private static final class ConstantStringInField implements EventCondition {
 
             private final FieldReference field;
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
index 4017509b8d0..9c1b17b6e89 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -249,6 +249,43 @@ public void correctlyCompilesGreaterOrEqualThan() throws Exception {
         assertCorrectFieldToFieldComparison(gte, 7, 8, false);
     }
 
+    @Test
+    public void correctlyCompilesRegexMatchesWithConstant() throws IncompleteSourceWithMetadataException {
+        verifyRegex("=~", 1);
+    }
+
+    @Test
+    public void correctlyCompilesRegexNoMatchesWithConstant() throws IncompleteSourceWithMetadataException {
+        verifyRegex("!~", 0);
+    }
+
+    private void verifyRegex(String operator, int expectedEvents)
+            throws IncompleteSourceWithMetadataException {
+        final Event event = new Event();
+
+        final JrubyEventExtLibrary.RubyEvent testEvent =
+                JrubyEventExtLibrary.RubyEvent.newRubyEvent(RubyUtil.RUBY, event);
+
+        new CompiledPipeline(
+                ConfigCompiler.configToPipelineIR(
+                        "input {mockinput{}} output { " +
+                                String.format("if \"z\" %s /z/ { ", operator) +
+                                " mockoutput{} } }",
+                        false
+                ),
+                new CompiledPipelineTest.MockPluginFactory(
+                        Collections.singletonMap("mockinput", () -> null),
+                        Collections.singletonMap("mockaddfilter", () -> null),
+                        Collections.singletonMap("mockoutput", mockOutputSupplier())
+                )
+        ).buildExecution()
+                .compute(RubyUtil.RUBY.newArray(testEvent), false, false);
+        final Collection<JrubyEventExtLibrary.RubyEvent> outputEvents = EVENT_SINKS.get(runId);
+        MatcherAssert.assertThat(outputEvents.size(), CoreMatchers.is(expectedEvents));
+        MatcherAssert.assertThat(outputEvents.contains(testEvent), CoreMatchers.is(expectedEvents >= 1));
+        outputEvents.clear();
+    }
+
     @Test
     public void equalityCheckOnCompositeField() throws Exception {
         final PipelineIR pipelineIR = ConfigCompiler.configToPipelineIR(
@@ -386,6 +423,7 @@ private void verifyComparison(final boolean expected, final String conditional,
         final Event event) throws IncompleteSourceWithMetadataException {
         final JrubyEventExtLibrary.RubyEvent testEvent =
             JrubyEventExtLibrary.RubyEvent.newRubyEvent(RubyUtil.RUBY, event);
+
         new CompiledPipeline(
             ConfigCompiler.configToPipelineIR(
                 "input {mockinput{}} filter { " +
