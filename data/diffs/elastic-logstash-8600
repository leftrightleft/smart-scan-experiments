diff --git a/logstash-core/lib/logstash/elasticsearch_client.rb b/logstash-core/lib/logstash/elasticsearch_client.rb
index fa11c4df95e..910469d0ee4 100644
--- a/logstash-core/lib/logstash/elasticsearch_client.rb
+++ b/logstash-core/lib/logstash/elasticsearch_client.rb
@@ -29,7 +29,9 @@ def initialize(settings, logger)
 
       ssl_options = {}
 
-      if @settings["var.elasticsearch.ssl.enabled"] == "true"
+      # boolean settings may be strings if set through the cli
+      # or booleans if set through the yaml file, so we use .to_s
+      if @settings["var.elasticsearch.ssl.enabled"].to_s == "true"
         ssl_options[:verify] = @settings.fetch("var.elasticsearch.ssl.verification_mode", true)
         ssl_options[:ca_file] = @settings.fetch("var.elasticsearch.ssl.certificate_authority", nil)
         ssl_options[:client_cert] = @settings.fetch("var.elasticsearch.ssl.certificate", nil)
diff --git a/logstash-core/lib/logstash/modules/kibana_client.rb b/logstash-core/lib/logstash/modules/kibana_client.rb
index 094e6cab47e..896820db19e 100644
--- a/logstash-core/lib/logstash/modules/kibana_client.rb
+++ b/logstash-core/lib/logstash/modules/kibana_client.rb
@@ -40,7 +40,10 @@ def initialize(settings, client = nil) # allow for test mock injection
     }
 
     ssl_options = {}
-    ssl_enabled = @settings["var.kibana.ssl.enabled"] == "true"
+
+    # boolean settings may be strings if set through the cli
+    # or booleans if set through the yaml file, so we use .to_s
+    ssl_enabled = @settings["var.kibana.ssl.enabled"].to_s == "true"
     if ssl_enabled
       ssl_options[:verify] = @settings.fetch("var.kibana.ssl.verification_mode", "strict").to_sym
       ssl_options[:ca_file] = @settings.fetch("var.kibana.ssl.certificate_authority", nil)
diff --git a/logstash-core/spec/logstash/elasticsearch_client_spec.rb b/logstash-core/spec/logstash/elasticsearch_client_spec.rb
new file mode 100644
index 00000000000..52356aa4830
--- /dev/null
+++ b/logstash-core/spec/logstash/elasticsearch_client_spec.rb
@@ -0,0 +1,38 @@
+# encoding: utf-8
+#
+require "logstash/elasticsearch_client"
+
+describe LogStash::ElasticsearchClient do
+  describe LogStash::ElasticsearchClient::RubyClient do
+    let(:settings) { {} }
+    let(:logger) { nil }
+
+    describe "ssl option handling" do
+      context "when using a string for ssl.enabled" do
+        let(:settings) do
+          { "var.elasticsearch.ssl.enabled" => "true" }
+        end
+
+        it "should set the ssl options" do
+          expect(Elasticsearch::Client).to receive(:new) do |args|
+            expect(args[:ssl]).to_not be_empty
+          end
+          described_class.new(settings, logger)
+        end
+      end
+
+      context "when using a boolean for ssl.enabled" do
+        let(:settings) do
+          { "var.elasticsearch.ssl.enabled" => true }
+        end
+
+        it "should set the ssl options" do
+          expect(Elasticsearch::Client).to receive(:new) do |args|
+            expect(args[:ssl]).to_not be_empty
+          end
+          described_class.new(settings, logger)
+        end
+      end
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/modules/kibana_client_spec.rb b/logstash-core/spec/logstash/modules/kibana_client_spec.rb
index d37b979c265..946c2824073 100644
--- a/logstash-core/spec/logstash/modules/kibana_client_spec.rb
+++ b/logstash-core/spec/logstash/modules/kibana_client_spec.rb
@@ -56,5 +56,33 @@ def call
         expect(kibana_client.endpoint).to eq(kibana_host)
       end
     end
+
+    describe "ssl option handling" do
+      context "when using a string for ssl.enabled" do
+        let(:settings) do
+          { "var.kibana.ssl.enabled" => "true" }
+        end
+
+        it "should set the ssl options" do
+          expect(Manticore::Client).to receive(:new) do |args|
+            expect(args[:ssl]).to_not be_empty
+          end.and_return(test_client)
+          described_class.new(settings)
+        end
+      end
+
+      context "when using a boolean for ssl.enabled" do
+        let(:settings) do
+          { "var.kibana.ssl.enabled" => true }
+        end
+
+        it "should set the ssl options" do
+          expect(Manticore::Client).to receive(:new) do |args|
+            expect(args[:ssl]).to_not be_empty
+          end.and_return(test_client)
+          described_class.new(settings)
+        end
+      end
+    end
   end
-end end
\ No newline at end of file
+end end
