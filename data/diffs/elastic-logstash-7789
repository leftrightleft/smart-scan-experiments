diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index 2dea36ac3ca..c867dfdf120 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -80,10 +80,6 @@ public <T> byte[] seekToNextEventPosition(T target, Function<byte[], T> keyExtra
         int lowBlock = 0;
         int highBlock = (int) (channel.size() - VERSION_SIZE) / BLOCK_SIZE;
 
-        if (highBlock == 0) {
-            return null;
-        }
-
         while (lowBlock < highBlock) {
             int middle = (int) Math.ceil((highBlock + lowBlock) / 2.0);
             seekToBlock(middle);
diff --git a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
index 850fbdbe026..3f477d8257e 100644
--- a/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/io/DeadLetterQueueReaderTest.java
@@ -29,6 +29,7 @@
 import org.logstash.Timestamp;
 import org.logstash.ackedqueue.StringElement;
 
+import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Collections;
 
@@ -113,30 +114,65 @@ public void testReadFromTwoSegments() throws Exception {
 
     @Test
     public void testSeek() throws Exception {
-        DeadLetterQueueWriter writeManager = new DeadLetterQueueWriter(dir, 10000000, 10000000);
         Event event = new Event(Collections.emptyMap());
-        Timestamp target = null;
         long currentEpoch = System.currentTimeMillis();
-        for (int i = 0; i < 1000; i++){
-            DLQEntry entry = new DLQEntry(event, "foo", "bar", String.valueOf(i), new Timestamp(currentEpoch++));
-            writeManager.writeEntry(entry);
-            if (i == 543) {
-                target = entry.getEntryTime();
-            }
+        int TARGET_EVENT = 543;
 
-        }
-        writeManager.close();
+        writeEntries(event, 0, 1000, currentEpoch);
+        seekReadAndVerify(new Timestamp(currentEpoch + TARGET_EVENT),
+                          String.valueOf(TARGET_EVENT));
+    }
+
+
+    @Test
+    public void testWriteStopSmallWriteSeekByTimestamp() throws Exception {
+        int FIRST_WRITE_EVENT_COUNT = 100;
+        int SECOND_WRITE_EVENT_COUNT = 100;
+        int OFFSET = 200;
 
-        DeadLetterQueueReader readManager = new DeadLetterQueueReader(dir);
-        readManager.seekToNextEvent(target);
-        DLQEntry entry = readManager.pollEntry(100);
-        assertThat(entry.getEntryTime().toIso8601(), equalTo(target.toIso8601()));
-        assertThat(entry.getReason(), equalTo("543"));
+        Event event = new Event(Collections.emptyMap());
+        long startTime = System.currentTimeMillis();
+
+        writeEntries(event, 0, FIRST_WRITE_EVENT_COUNT, startTime);
+        writeEntries(event, OFFSET, SECOND_WRITE_EVENT_COUNT, startTime + 1_000);
+
+        seekReadAndVerify(new Timestamp(startTime + FIRST_WRITE_EVENT_COUNT),
+                          String.valueOf(FIRST_WRITE_EVENT_COUNT));
     }
 
     @Test
-    public void testInvalidDirectory()  throws Exception {
-        DeadLetterQueueReader reader = new DeadLetterQueueReader(dir);
-        assertThat(reader.pollEntry(100), is(nullValue()));
+    public void testWriteStopBigWriteSeekByTimestamp() throws Exception {
+        int FIRST_WRITE_EVENT_COUNT = 100;
+        int SECOND_WRITE_EVENT_COUNT = 2000;
+        int OFFSET = 200;
+
+        Event event = new Event(Collections.emptyMap());
+        long startTime = System.currentTimeMillis();
+
+        writeEntries(event, 0, FIRST_WRITE_EVENT_COUNT, startTime);
+        writeEntries(event, OFFSET, SECOND_WRITE_EVENT_COUNT, startTime + 1_000);
+
+        seekReadAndVerify(new Timestamp(startTime + FIRST_WRITE_EVENT_COUNT),
+                          String.valueOf(FIRST_WRITE_EVENT_COUNT));
+    }
+
+
+    private void seekReadAndVerify(final Timestamp seekTarget, final String expectedValue) throws Exception {
+        try(DeadLetterQueueReader readManager = new DeadLetterQueueReader(dir)) {
+            readManager.seekToNextEvent(new Timestamp(seekTarget));
+            DLQEntry readEntry = readManager.pollEntry(100);
+            assertThat(readEntry.getReason(), equalTo(expectedValue));
+            assertThat(readEntry.getEntryTime().toIso8601(), equalTo(seekTarget.toIso8601()));
+        }
     }
+
+    private void writeEntries(final Event event, int offset, final int numberOfEvents, long startTime) throws IOException {
+        try(DeadLetterQueueWriter writeManager = new DeadLetterQueueWriter(dir, 10000000, 10000000)) {
+            for (int i = offset; i <= offset + numberOfEvents; i++) {
+                DLQEntry entry = new DLQEntry(event, "foo", "bar", String.valueOf(i), new Timestamp(startTime++));
+                writeManager.writeEntry(entry);
+            }
+        }
+    }
+
 }
