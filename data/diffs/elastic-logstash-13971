diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index d41e8169eb5..4d963f785e6 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -38,8 +38,8 @@ def self.load_aliases_definitions(path = File.expand_path('plugin_aliases.yml',
     yaml = YAML.safe_load(yaml_body) || {}
     result = {}
     yaml.each do |type, alias_defs|
-      alias_defs.each do |alias_name, aliased|
-        result["logstash-#{type}-#{alias_name}"] = "logstash-#{type}-#{aliased}"
+      alias_defs.each do |alias_def|
+        result["logstash-#{type}-#{alias_def["alias"]}"] = "logstash-#{type}-#{alias_def["from"]}"
       end
     end
     result
diff --git a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
index 28a42323283..5218a1261f0 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
@@ -1,11 +1,13 @@
 package org.logstash.plugins;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.logstash.plugins.PluginLookup.PluginType;
+import org.logstash.plugins.aliases.AliasPlugin;
 
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -95,9 +97,9 @@ private YamlWithChecksum(final String yamlContents, final String checksumHash) {
         }
 
         @SuppressWarnings("unchecked")
-        private Map<String, Map<String, String>> decodeYaml() throws IOException {
+        private Map<PluginType, List<AliasPlugin>> decodeYaml() throws IOException {
             ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
-            return mapper.readValue(yamlContents, Map.class);
+            return mapper.readValue(yamlContents, new TypeReference<Map<PluginType, List<AliasPlugin>>>() {});
         }
 
         private String computeHashFromContent() {
@@ -138,8 +140,8 @@ private Map<PluginCoordinate, String> loadAliasesDefinitionsFromInputStream(Inpu
                 return Collections.emptyMap();
             }
 
-            // decode yaml to nested maps
-            final Map<String, Map<String, String>> aliasedDescriptions;
+            // decode yaml to Map<PluginType, List<AliasPlugin>> structure
+            final Map<PluginType, List<AliasPlugin>> aliasedDescriptions;
             try {
                 aliasedDescriptions = aliasYml.decodeYaml();
             } catch (IOException ioex) {
@@ -157,15 +159,16 @@ private Map<PluginCoordinate, String> loadAliasesDefinitionsFromInputStream(Inpu
         }
 
         private Map<PluginCoordinate, String> extractDefinitions(PluginType pluginType,
-                                                                 Map<String, Map<String, String>> aliasesYamlDefinitions) {
-            Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
-            final Map<String, String> pluginDefinitions = aliasesYamlDefinitions.get(pluginType.name().toLowerCase());
-            if (pluginDefinitions == null) {
+                                                                 Map<PluginType, List<AliasPlugin>> aliasesYamlDefinitions) {
+            final List<AliasPlugin> aliasedPlugins = aliasesYamlDefinitions.get(pluginType);
+            if (Objects.isNull(aliasedPlugins)) {
                 return Collections.emptyMap();
             }
-            for (Map.Entry<String, String> aliasDef : pluginDefinitions.entrySet()) {
-                defaultDefinitions.put(new PluginCoordinate(pluginType, aliasDef.getKey()), aliasDef.getValue());
-            }
+
+            Map<PluginCoordinate, String> defaultDefinitions = new HashMap<>();
+            aliasedPlugins.forEach(aliasPlugin -> {
+                defaultDefinitions.put(new PluginCoordinate(pluginType, aliasPlugin.getAliasName()), aliasPlugin.getFrom());
+            });
             return defaultDefinitions;
         }
     }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
index 663c1bb867c..dd20e847c0c 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
@@ -25,6 +25,7 @@
 import co.elastic.logstash.api.Input;
 import co.elastic.logstash.api.Output;
 import co.elastic.logstash.api.Plugin;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import org.jruby.RubyClass;
 import org.jruby.RubyString;
 import org.jruby.java.proxies.JavaProxy;
@@ -43,6 +44,11 @@
  */
 public final class PluginLookup implements PluginFactoryExt.PluginResolver {
 
+    private static final String INPUT_PLUGIN_TYPE_NAME = "input";
+    private static final String FILTER_PLUGIN_TYPE_NAME = "filter";
+    private static final String OUTPUT_PLUGIN_TYPE_NAME = "output";
+    private static final String CODEC_PLUGIN_TYPE_NAME = "codec";
+
     private static final IRubyObject RUBY_REGISTRY = RubyUtil.RUBY.executeScript(
             "require 'logstash/plugins/registry'\nrequire 'logstash/plugin'\nLogStash::Plugin",
             ""
@@ -134,10 +140,18 @@ public enum PluginLanguage {
      * Enum all the plugins types used inside Logstash
      * */
     public enum PluginType {
-        INPUT("input", "inputs", Input.class),
-        FILTER("filter", "filters", Filter.class),
-        OUTPUT("output", "outputs", Output.class),
-        CODEC("codec", "codecs", Codec.class);
+
+        @JsonProperty(INPUT_PLUGIN_TYPE_NAME)
+        INPUT(INPUT_PLUGIN_TYPE_NAME, "inputs", Input.class),
+
+        @JsonProperty(FILTER_PLUGIN_TYPE_NAME)
+        FILTER(FILTER_PLUGIN_TYPE_NAME, "filters", Filter.class),
+
+        @JsonProperty(OUTPUT_PLUGIN_TYPE_NAME)
+        OUTPUT(OUTPUT_PLUGIN_TYPE_NAME, "outputs", Output.class),
+
+        @JsonProperty(CODEC_PLUGIN_TYPE_NAME)
+        CODEC(CODEC_PLUGIN_TYPE_NAME, "codecs", Codec.class);
 
         private final RubyString rubyLabel;
         private final String metricNamespace;
diff --git a/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasDocumentReplace.java b/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasDocumentReplace.java
new file mode 100644
index 00000000000..4cfac9add4e
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasDocumentReplace.java
@@ -0,0 +1,29 @@
+package org.logstash.plugins.aliases;
+
+import javax.annotation.Nonnull;
+
+/**
+ * A POJO class linked to {@link AliasPlugin} to map AliasRegistry.yml structure.
+ */
+public class AliasDocumentReplace {
+
+    /**
+     * A document entry need to be replaced.
+     */
+    @Nonnull
+    private String replace;
+
+    /**
+     * A value where document entry need to be replaced with.
+     */
+    @Nonnull
+    private String with;
+
+    public String getReplace() {
+        return this.replace;
+    }
+
+    public String getWith() {
+        return this.with;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasPlugin.java b/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasPlugin.java
new file mode 100644
index 00000000000..941a22cdbb3
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/aliases/AliasPlugin.java
@@ -0,0 +1,43 @@
+package org.logstash.plugins.aliases;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.List;
+
+/**
+ * A POJO class to map AliasRegistry.yml structure.
+ */
+public class AliasPlugin {
+
+    /**
+     * Name of the aliased plugin.
+     */
+    @Nonnull
+    @JsonProperty("alias")
+    private String aliasName;
+
+    /**
+     * The plugin name where aliased plugin made from.
+     */
+    @Nonnull
+    private String from;
+
+    /**
+     * List of replace entries when transforming artifact doc to aliased plugin doc.
+     */
+    @Nullable
+    @JsonProperty("docs")
+    private List<AliasDocumentReplace> docHeaderReplaces;
+
+    @Nonnull
+    public String getAliasName() {
+        return aliasName;
+    }
+
+    @Nonnull
+    public String getFrom() {
+        return from;
+    }
+}
diff --git a/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml b/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml
index 2b715c2959a..39ab241a6db 100644
--- a/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml
+++ b/logstash-core/src/main/resources/org/logstash/plugins/AliasRegistry.yml
@@ -1,2 +1,10 @@
 input:
-  elastic_agent: beats
+  - alias: elastic_agent
+    from: beats
+    docs:
+      - replace: ":plugin: beats"
+        with: ":plugin: elastic_agent"
+      - replace: ":plugin-uc: Beats"
+        with: ":plugin-uc: Elastic Agent"
+      - replace: ":plugin-singular: Beat"
+        with: ":plugin-singular: Elastic Agent"
\ No newline at end of file
diff --git a/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml b/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml
index 06a5fed770a..48b852bdc7c 100644
--- a/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml
+++ b/logstash-core/src/test/resources/org/logstash/plugins/AliasRegistry.yml
@@ -1,6 +1,16 @@
 input:
-  aliased_input1: beats
-  aliased_input2: tcp
+  - alias: aliased_input1
+    from: beats
+    docs:
+      - replace: ":plugin: beats"
+        with: ":plugin: elastic_agent"
+      - replace: ":plugin-uc: Beats"
+        with: ":plugin-uc: Elastic Agent"
+      - replace: ":plugin-singular: Beat"
+        with: ":plugin-singular: Elastic Agent"
+  - alias: aliased_input2
+    from: tcp
 
 filter:
-  aliased_filter: json
+  - alias: aliased_filter
+    from: json
diff --git a/spec/unit/plugin_manager/util_spec.rb b/spec/unit/plugin_manager/util_spec.rb
index a62262426ba..cc98746c7b4 100644
--- a/spec/unit/plugin_manager/util_spec.rb
+++ b/spec/unit/plugin_manager/util_spec.rb
@@ -88,7 +88,7 @@
   describe "process alias yaml definition" do
     let(:path) { File.expand_path('plugin_aliases.yml', __dir__) }
 
-    it "should decode correctly" do
+    it "decodes correctly" do
       aliases = subject.load_aliases_definitions(path)
       expect(aliases['logstash-input-aliased_input1']).to eq('logstash-input-beats')
       expect(aliases['logstash-input-aliased_input2']).to eq('logstash-input-tcp')
