diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index ff27a30a75e..a70694e24b9 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -7,6 +7,7 @@
 require "logstash/util/accessors"
 require "logstash/timestamp"
 require "logstash/json"
+require "logstash/string_interpolation"
 
 # transcient pipeline events for normal in-flow signaling as opposed to
 # flow altering exceptions. for now having base classes is adequate and
@@ -217,57 +218,10 @@ def remove(fieldref)
   #
   # If a %{name} value is an array, then we will join by ','
   # If a %{name} value does not exist, then no substitution occurs.
-  #
-  # TODO(sissel): It is not clear what the value of a field that
-  # is an array (or hash?) should be. Join by comma? Something else?
   public
   def sprintf(format)
-    if format.is_a?(Float) and
-        (format < MIN_FLOAT_BEFORE_SCI_NOT or format >= MAX_FLOAT_BEFORE_SCI_NOT) then
-      format = ("%.15f" % format).sub(/0*$/,"")
-    else
-      format = format.to_s
-    end
-    if format.index("%").nil?
-      return format
-    end
-
-    return format.gsub(/%\{[^}]+\}/) do |tok|
-      # Take the inside of the %{ ... }
-      key = tok[2 ... -1]
-
-      if key[0] == "+" && !@data.has_key?(TIMESTAMP)
-        raise LogStash::Error, "Unable to format \"#{key}\" in string \"#{format}\", #{TIMESTAMP} field not found"
-      end
-
-      if key == "+%s"
-        # Got %{+%s}, support for unix epoch time
-        next @data[TIMESTAMP].to_i
-      elsif key[0,1] == "+"
-        t = @data[TIMESTAMP]
-        formatter = org.joda.time.format.DateTimeFormat.forPattern(key[1 .. -1])\
-          .withZone(org.joda.time.DateTimeZone::UTC)
-        #next org.joda.time.Instant.new(t.tv_sec * 1000 + t.tv_usec / 1000).toDateTime.toString(formatter)
-        # Invoke a specific Instant constructor to avoid this warning in JRuby
-        #  > ambiguous Java methods found, using org.joda.time.Instant(long)
-        org.joda.time.Instant.java_class.constructor(Java::long).new_instance(
-          t.tv_sec * 1000 + t.tv_usec / 1000
-        ).to_java.toDateTime.toString(formatter)
-      else
-        value = self[key]
-        case value
-          when nil
-            tok # leave the %{foo} if this field does not exist in this event.
-          when Array
-            value.join(",") # Join by ',' if value is an array
-          when Hash
-            LogStash::Json.dump(value) # Convert hashes to json
-          else
-            value # otherwise return the value
-        end # case value
-      end # 'key' checking
-    end # format.gsub...
-  end # def sprintf
+    LogStash::StringInterpolation.evaluate(self, format)
+  end
 
   def tag(value)
     # Generalize this method for more usability
diff --git a/lib/logstash/string_interpolation.rb b/lib/logstash/string_interpolation.rb
new file mode 100644
index 00000000000..237c1ffbbd5
--- /dev/null
+++ b/lib/logstash/string_interpolation.rb
@@ -0,0 +1,139 @@
+require "thread_safe"
+require "forwardable"
+
+module LogStash
+  module StringInterpolation
+    extend self 
+
+    # Floats outside of these upper and lower bounds are forcibly converted
+    # to scientific notation by Float#to_s
+    MIN_FLOAT_BEFORE_SCI_NOT = 0.0001
+    MAX_FLOAT_BEFORE_SCI_NOT = 1000000000000000.0
+
+    CACHE = ThreadSafe::Cache.new
+    TEMPLATE_TAG_REGEXP = /%\{[^}]+\}/
+
+    def evaluate(event, template)
+      if template.is_a?(Float) && (template < MIN_FLOAT_BEFORE_SCI_NOT || template >= MAX_FLOAT_BEFORE_SCI_NOT)
+        return ("%.15f" % template).sub(/0*$/,"")
+      end
+      
+      template = template.to_s
+      
+      return template if not_cachable?(template)
+
+      compiled = CACHE.get_or_default(template, nil) || CACHE.put(template, compile_template(template))
+      compiled.evaluate(event)
+    end
+
+    private
+    def not_cachable?(template)
+      template.index("%").nil?
+    end
+
+    def compile_template(template)
+      nodes = Template.new
+
+      position = 0
+      matches = template.to_enum(:scan, TEMPLATE_TAG_REGEXP).map { |m| $~ }
+
+      matches.each do |match|
+        tag = match[0][2..-2]
+        start = match.offset(0).first
+        nodes << StaticNode.new(template[position..(start-1)]) if start > 0
+        nodes << identify(tag)
+        position = match.offset(0).last
+      end
+
+      if position < template.size - 1
+        nodes << StaticNode.new(template[position..-1])
+      end
+
+      optimize(nodes)
+    end
+
+    def optimize(nodes)
+      nodes.size == 1 ?  nodes.first : nodes
+    end
+
+    def identify(tag)
+      if tag == "+%s"
+        EpocNode.new
+      elsif tag[0, 1] == "+"
+        DateNode.new(tag[1..-1])
+      else
+        KeyNode.new(tag)
+      end
+    end
+  end
+
+  class Template
+    extend Forwardable
+    def_delegators :@nodes, :<<, :push, :size, :first
+
+    def initialize
+      @nodes = []
+    end
+
+    def evaluate(event)
+      @nodes.collect { |node| node.evaluate(event) }.join
+    end
+  end
+
+  class EpocNode
+    def evaluate(event)
+      t = event.timestamp
+      raise LogStash::Error, "Unable to format in string \"#{@format}\", #{LogStash::Event::TIMESTAMP} field not found" unless t
+      t.to_i.to_s
+    end
+  end
+
+  class StaticNode
+    def initialize(content)
+      @content = content
+    end
+
+    def evaluate(event)
+      @content
+    end
+  end
+
+  class KeyNode
+    def initialize(key)
+      @key = key
+    end
+
+    def evaluate(event)
+      value = event[@key]
+
+      case value
+      when nil
+        "%{#{@key}}"
+      when Array
+        value.join(",")
+      when Hash
+        Logstash::Json.dump(value)
+      else
+        value
+      end
+    end
+  end
+
+  class DateNode
+    def initialize(format)
+      @format = format
+      @formatter = org.joda.time.format.DateTimeFormat.forPattern(@format)
+          .withZone(org.joda.time.DateTimeZone::UTC)
+    end
+
+    def evaluate(event)
+      t = event.timestamp
+
+      raise LogStash::Error, "Unable to format in string \"#{@format}\", #{LogStash::Event::TIMESTAMP} field not found" unless t
+
+      org.joda.time.Instant.java_class.constructor(Java::long).new_instance(
+        t.tv_sec * 1000 + t.tv_usec / 1000
+      ).to_java.toDateTime.toString(@formatter)
+    end
+  end
+end
diff --git a/spec/core/event_spec.rb b/spec/core/event_spec.rb
index efbdb7a8ba5..9e343ae0758 100644
--- a/spec/core/event_spec.rb
+++ b/spec/core/event_spec.rb
@@ -63,6 +63,10 @@
         expect(subject.sprintf("%{+HH}")).to eq("00")
       end
 
+      it "should support mixed string" do
+        expect(subject.sprintf("foo %{+YYYY-MM-dd} %{type}")).to eq("foo 2013-01-01 sprintf")
+      end
+
       it "should raise error with %{+format} syntax when @timestamp field is missing", :if => RUBY_ENGINE == "jruby" do
         str = "logstash-%{+YYYY}"
         subj = subject.clone
