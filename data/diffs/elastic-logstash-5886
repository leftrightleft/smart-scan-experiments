diff --git a/config/log4j2.properties b/config/log4j2.properties
index 52026f20d3c..975eae8a257 100644
--- a/config/log4j2.properties
+++ b/config/log4j2.properties
@@ -38,3 +38,19 @@ appender.json_rolling.layout.eventEol = true
 rootLogger.level = ${sys:ls.log.level}
 rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console
 rootLogger.appenderRef.rolling.ref = ${sys:ls.log.format}_rolling
+
+# SlowLog Appender
+appender.slowlog_rolling.type = RollingFile
+appender.slowlog_rolling.name = slowlog_rolling
+appender.slowlog_rolling.fileName = ${sys:ls.logs}/logstash-slowlog.log
+appender.slowlog_rolling.layout.type = PatternLayout
+appender.slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %.10000m%n
+appender.slowlog_rolling.filePattern = ${sys:ls.logs}/logstash-slowlog-%d{yyyy-MM-dd}.log
+appender.slowlog_rolling.policies.type = Policies
+appender.slowlog_rolling.policies.time.type = TimeBasedTriggeringPolicy
+appender.slowlog_rolling.policies.time.interval = 1
+appender.slowlog_rolling.policies.time.modulate = true
+
+logger.slowlog_rolling.name = slowlog_rolling
+logger.slowlog_rolling.level = trace
+logger.slowlog_rolling.appenderRef.slowlog_rolling.ref = slowlog_rolling
diff --git a/config/logstash.yml b/config/logstash.yml
index bce9f417e36..4678848cabe 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -113,3 +113,20 @@
 #
 # Where to find custom plugins
 # path.plugins: []
+#
+#
+# ------------ Slow log Settings -----------
+# 
+# Show the context information, event, plugin, etc for the plugins slow log.
+# slowlog.plugins.context: true
+#
+# ------------ Slow log thresholds ---------
+#
+# An slow log threshold is a time limit for an operation that when is overcome it will
+# be reported at the related log file. Time is seconds.
+#
+# Attach the context information in every log message (default: true)
+# slowlog.plugins.context: true
+#
+# The last building block of the component is the log level (default: warn)
+# slowlog.filters.dns.warn: 10
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index a69312f99bd..d9f9cc9e647 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -21,7 +21,7 @@ class LogStash::Agent
   include LogStash::Util::Loggable
   STARTED_AT = Time.now.freeze
 
-  attr_reader :metric, :node_name, :pipelines, :settings, :webserver
+  attr_reader :metric, :node_name, :pipelines, :settings, :webserver, :slowlog_manager
   attr_accessor :logger
 
   # initialize method for LogStash::Agent
@@ -50,6 +50,7 @@ def initialize(settings = LogStash::SETTINGS)
     configure_metrics_collectors
 
     @reload_metric = metric.namespace([:stats, :pipelines])
+    configure_slowlog_managers
   end
 
   def execute
@@ -154,6 +155,10 @@ def stop_webserver
     @webserver.stop if @webserver
   end
 
+  def configure_slowlog_managers
+    @slowlog_manager = LogStash::Logging::SlowLogManager.new
+  end
+
   def configure_metrics_collectors
     @collector = LogStash::Instrument::Collector.new
 
@@ -192,7 +197,7 @@ def create_pipeline(settings, config=nil)
     end
 
     begin
-      LogStash::Pipeline.new(config, settings, metric)
+      LogStash::Pipeline.new(config, settings, metric, slowlog_manager)
     rescue => e
       @reload_metric.namespace([settings.get("pipeline.id").to_sym, :reloads]).tap do |n|
         n.increment(:failures)
diff --git a/logstash-core/lib/logstash/api/commands/node.rb b/logstash-core/lib/logstash/api/commands/node.rb
index 816d6be8f8b..2187f00b18d 100644
--- a/logstash-core/lib/logstash/api/commands/node.rb
+++ b/logstash-core/lib/logstash/api/commands/node.rb
@@ -17,6 +17,11 @@ def all(selected_fields=[])
           payload
         end
 
+        def slowlog
+          slowlog    = service.slowlog
+          { :top_items => slowlog.top_items, :freq_items => freq_items(slowlog) }
+        end
+
         def pipeline
           extract_metrics(
             [:stats, :pipelines, :main, :config],
@@ -57,6 +62,12 @@ def jvm
         def hot_threads(options={})
           HotThreadsReport.new(self, options)
         end
+
+        private
+
+        def freq_items(slowlog)
+          slowlog.freq_items
+        end
       end
     end
   end
diff --git a/logstash-core/lib/logstash/api/modules/node.rb b/logstash-core/lib/logstash/api/modules/node.rb
index 32bf09149fa..f71ab49e1ff 100644
--- a/logstash-core/lib/logstash/api/modules/node.rb
+++ b/logstash-core/lib/logstash/api/modules/node.rb
@@ -10,6 +10,11 @@ def node
           factory.build(:node)
         end
 
+        get "/slowlog" do
+          slowlog = node.slowlog
+          respond_with slowlog
+        end
+
         get "/hot_threads" do
           ignore_idle_threads = params["ignore_idle_threads"] || true
 
diff --git a/logstash-core/lib/logstash/api/service.rb b/logstash-core/lib/logstash/api/service.rb
index 32563fc994e..fae1b9cb99f 100644
--- a/logstash-core/lib/logstash/api/service.rb
+++ b/logstash-core/lib/logstash/api/service.rb
@@ -18,6 +18,10 @@ def started?
         true
       end
 
+      def slowlog
+       agent.slowlog_manager
+      end
+
       def snapshot
         agent.metric.collector.snapshot_metric
       end
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 010989753df..4aad4444b5d 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -40,8 +40,17 @@ module Environment
             Setting::String.new("http.host", "127.0.0.1"),
             Setting::PortRange.new("http.port", 9600..9700),
             Setting::String.new("http.environment", "production"),
+            Setting::Boolean.new("slowlog.plugins.context", true),
   ].each {|setting| SETTINGS.register(setting) }
 
+
+  default_values = { "slowlog.filters.dns" => 10 }
+  default_values.each_pair do |key, value|
+    ["debug", "info", "error", "warn", "fatal", "trace" ].each do |log_level|
+      setting = Setting::Numeric.new("#{key}.#{log_level}", value)
+      SETTINGS.register(setting)
+    end
+  end
   module Environment
     extend self
 
diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index 02a4f3599ea..3e2e287fbf0 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -13,8 +13,9 @@ class FilterDelegator
     ]
     def_delegators :@filter, *DELEGATED_METHODS
 
-    def initialize(logger, klass, metric, plugin_args)
+    def initialize(logger, slow_logger, klass, metric, plugin_args)
       @logger = logger
+      @slow_logger = slow_logger
       @klass = klass
       @id = plugin_args["id"]
       @filter = klass.new(plugin_args)
@@ -22,6 +23,7 @@ def initialize(logger, klass, metric, plugin_args)
       # Scope the metrics to the plugin
       namespaced_metric = metric.namespace("#{@klass.config_name}_#{@id}".to_sym)
       @filter.metric = namespaced_metric
+      @filter.slow_logger = slow_logger
 
       @metric_events = namespaced_metric.namespace(:events)
       namespaced_metric.gauge(:name, config_name)
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index 35bf49e46ab..bc0a82627b8 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -123,7 +123,7 @@ def self.plugin_type
   end
 
   public
-  def initialize(params)
+  def initialize(params, settings=LogStash::SETTINGS)
     super
     config_init(@params)
     @threadsafe = true
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index ca769278893..a961ead10bf 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -55,7 +55,7 @@ def self.plugin_type
   end
 
   public
-  def initialize(params={})
+  def initialize(params={}, settings=LogStash::SETTINGS)
     super
     @threadable = false
     @stop_called = Concurrent::AtomicBoolean.new(false)
diff --git a/logstash-core/lib/logstash/logging.rb b/logstash-core/lib/logstash/logging.rb
index 201d706bc75..a9ec1265b4c 100644
--- a/logstash-core/lib/logstash/logging.rb
+++ b/logstash-core/lib/logstash/logging.rb
@@ -1,3 +1,4 @@
 # encoding: utf-8
 require "logstash/logging/logger"
+require "logstash/logging/slowlog_manager"
 require "logstash/namespace"
diff --git a/logstash-core/lib/logstash/logging/slow_logger.rb b/logstash-core/lib/logstash/logging/slow_logger.rb
new file mode 100644
index 00000000000..ab65c1a7f34
--- /dev/null
+++ b/logstash-core/lib/logstash/logging/slow_logger.rb
@@ -0,0 +1,66 @@
+# encoding: utf-8
+require "logstash/namespace"
+require "logstash/logging/slow_logger/freq_items"
+
+# This module contains necessary classes to handle slow log
+# operations.
+module LogStash; module Logging
+
+  # Slow log null logger, this logger does
+  # nothing when used.
+  class NullLogger
+    def log(event, threshold, time, data={})
+    end
+  end
+
+  # Generic slow logger, this class is responsible of
+  # reporting to the specific logger and holding an
+  # aggregated view of it's reported events.
+  class SlowLogger
+
+    attr_reader :logger, :freq_items, :settings
+
+    def initialize(name="loggers.slow", settings=LogStash::SETTINGS, params={})
+      @logger     = LogStash::Logging::Logger.new(name)
+      @freq_items = LogStash::Logging::Util::FreqItems.new
+      @settings   = settings
+    end
+
+    def log(event, threshold, took_in_seconds, data={})
+      max_time = setting(threshold).to_i
+      return if max_time == 0 || took_in_seconds <= max_time
+
+      level, operation_namespace = split_fields(threshold)
+      if setting("slowlog.plugins.context")
+        data[:context] = { :event => event, :threshold => operation_namespace }
+      end
+      data[:took_in_seconds] = took_in_seconds
+      message = "Threshold #{threshold} has been overcome with #{took_in_seconds}"
+
+      freq_items.add(threshold, took_in_seconds)
+      to_logger(level.to_sym, message, data)
+    end
+
+    def logger=(logger)
+      @logger = logger
+    end
+
+    private
+
+    def to_logger(level, message, data)
+      level = :warn if !logger.respond_to?(level)
+      logger.send(level, message, data)
+    end
+
+    def split_fields(threshold)
+      parts = threshold.split('.')
+      [parts[-1], parts[0..-2].join('.')]
+    end
+
+    def setting(key)
+      @settings.get_value(key) rescue nil
+    end
+
+  end
+
+end; end
diff --git a/logstash-core/lib/logstash/logging/slow_logger/freq_items.rb b/logstash-core/lib/logstash/logging/slow_logger/freq_items.rb
new file mode 100644
index 00000000000..dea7b1187be
--- /dev/null
+++ b/logstash-core/lib/logstash/logging/slow_logger/freq_items.rb
@@ -0,0 +1,94 @@
+# encoding: utf-8
+require "logstash/namespace"
+
+module LogStash; module Logging; module Util
+
+    class FreqItems
+
+      # This statistics class it provides the necessary methods
+      # calculate basic statistics, (min, max, mean and variance) on demand.
+      class Statistics
+
+        attr_reader :mean, :min, :max
+
+        def initialize
+          @n = 0 # Total number of elements in the series
+          @mean = 0.0
+          @m2 = 0.0
+          @min = -1
+          @max = 0
+        end
+
+        # Update the current statistics adding a new value to the series
+        #
+        # @param [Number] x The new element of the series
+        def update(x)
+          @n += 1 # update the total counter
+          # Update the variance related counters
+          delta = x - @mean
+          @mean += delta/@n
+          @m2 += delta*(x - @mean)
+
+          # Update max and min counters
+          @max = x if x > @max
+          @min = x if x < @min || @min == -1
+        end
+
+        # Return variance in the current series of values, the standard deviation would be
+        # the square root of this value.
+        def variance
+          return Float::NAN if @n < 2
+          @m2 / (@n - 1)
+        end
+
+        def to_hash
+          {
+            :mean_in_seconds => mean,
+            :variance => variance,
+            :min_in_seconds => min,
+            :max_in_seconds => max
+          }
+        end
+      end
+
+      def initialize
+        @count = Hash.new(0)
+        @report = Hash.new
+      end
+
+      def add(key, value=0)
+        @count[key] = @count[key] + 1
+
+        if @report[key].nil?
+          @report[key] ||= Hash.new(0)
+          @report[key][:statistics] = Statistics.new
+        end
+        @report[key][:statistics].update(value)
+      end
+
+      # Return the top K items based on ocurrences.
+      #
+      # @param [Number] k The number of items selected. default 10
+      def top_k(k=10)
+        @count.sort_by { |_,v| -v}.first(k)
+      end
+
+      # Return the top K items by time, based on mean seconds and variance.
+      #
+      # @param [Number] k The number of items selected. default 10
+      def top_k_by_time(k=10)
+        @report.sort_by do |a|
+          -( a[1]["mean_in_seconds"] + a[1]["variance"])
+        end.first(k).map { |a| a[0] }
+      end
+
+      def report(key)
+        @report[key].clone
+      end
+
+      def size
+        @count.size
+      end
+    end
+
+end; end; end
diff --git a/logstash-core/lib/logstash/logging/slowlog_manager.rb b/logstash-core/lib/logstash/logging/slowlog_manager.rb
new file mode 100644
index 00000000000..3e567c17e55
--- /dev/null
+++ b/logstash-core/lib/logstash/logging/slowlog_manager.rb
@@ -0,0 +1,58 @@
+# encoding: utf-8
+require "logstash/namespace"
+require "logstash/logging/slow_logger"
+
+module LogStash; module Logging
+
+  # The slow log manager is he central component for
+  # the rest of logstash to manage slow log instances
+  class SlowLogManager
+
+    attr_reader :loggers
+
+    def initialize
+      @loggers = {}
+    end
+
+    # Return the frequent items for the given slow log, data is
+    # aggregated per each logger.
+    def freq_items
+      items = {}
+      @loggers.each do |key, logger|
+        report = {}
+        logger.freq_items.top_k.each do |item|
+          _key = item[0]
+          _report = logger.freq_items.report(_key)
+          stats   = _report.delete(:statistics)
+          _report[:number_of_events] = item[1]
+          _report.merge!(stats.to_hash)
+          report[_key] = _report
+        end
+        items[key] = report
+      end
+      items
+    end
+
+    # Return the top itema by ime
+    def top_items
+      items = {}
+      @loggers.each do |key, logger|
+        items[key] = logger.freq_items.top_k_by_time
+      end
+      items
+    end
+
+    # Builder method that setup specific slowlogger instances
+    # per each kind of component.
+    def build(type)
+      key = nil
+      case type
+      when :plugin
+        key = "slowlog_rolling.plugins"
+      else
+        raise Exception.new("Unknown logger")
+      end
+      @loggers[key] = LogStash::Logging::SlowLogger.new(key)
+    end
+  end
+end; end
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 39a7fdb1f0a..58bedf35655 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -7,8 +7,9 @@
 module LogStash class OutputDelegator
   attr_reader :metric, :metric_events, :strategy, :namespaced_metric, :metric_events, :id
 
-  def initialize(logger, output_class, metric, strategy_registry, plugin_args)
+  def initialize(logger, slow_logger, output_class, metric, strategy_registry, plugin_args)
     @logger = logger
+    @slow_logger = slow_logger
     @output_class = output_class
     @metric = metric
     @id = plugin_args["id"]
@@ -18,7 +19,7 @@ def initialize(logger, output_class, metric, strategy_registry, plugin_args)
     
     @strategy = strategy_registry.
                   class_for(self.concurrency).
-                  new(@logger, @output_class, @metric, plugin_args)
+                  new(@logger, @slow_logger, @output_class, @metric, plugin_args)
     
     @namespaced_metric = metric.namespace(id.to_sym)
     @namespaced_metric.gauge(:name, config_name)
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
index 81f695afc9d..523b453c458 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
@@ -2,10 +2,13 @@
 module LogStash module OutputDelegatorStrategies class Legacy
   attr_reader :worker_count, :workers
   
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, slow_logger, klass, metric, plugin_args)
     @worker_count = (plugin_args["workers"] || 1).to_i
     @workers = @worker_count.times.map { klass.new(plugin_args) }
-    @workers.each {|w| w.metric = metric }
+    @workers.each do |w|
+      w.metric = metric
+      w.slow_logger = slow_logger
+    end
     @worker_queue = SizedQueue.new(@worker_count)
     @workers.each {|w| @worker_queue << w}
   end
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
index 9650cf7ee22..dea42380a82 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
@@ -1,7 +1,8 @@
 module LogStash module OutputDelegatorStrategies class Shared
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, slow_logger, klass, metric, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
+    @output.slow_logger = slow_logger
   end
   
   def register
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/single.rb b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
index d576a22df6f..e96f4e93a28 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/single.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
@@ -1,7 +1,8 @@
 module LogStash module OutputDelegatorStrategies class Single
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, slow_logger, klass, metric, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
+    @output.slow_logger = slow_logger
     @mutex = Mutex.new
   end
 
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 453d0cbdf98..32e60502867 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -58,7 +58,7 @@ def self.plugin_type
   end
 
   public
-  def initialize(params={})
+  def initialize(params={}, settings=LogStash::SETTINGS)
     super
     config_init(@params)
 
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 1c256885667..69b8d83bcc0 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -18,6 +18,7 @@
 require "logstash/instrument/collector"
 require "logstash/output_delegator"
 require "logstash/filter_delegator"
+require "logstash/logging/slow_logger"
 
 module LogStash; class Pipeline
   include LogStash::Util::Loggable
@@ -45,8 +46,9 @@ module LogStash; class Pipeline
     "LogStash::Inputs::Stdin"
   ]
 
-  def initialize(config_str, settings = SETTINGS, namespaced_metric = nil)
+  def initialize(config_str, settings = SETTINGS, namespaced_metric = nil, slowlog_manager = nil)
     @logger = self.logger
+    @slow_logger = slowlog_manager.nil? ? LogStash::Logging::NullLogger.new : slowlog_manager.build(:plugin)
     @config_str = config_str
     @config_hash = Digest::SHA1.hexdigest(@config_str)
     # Every time #plugin is invoked this is incremented to give each plugin
@@ -420,14 +422,15 @@ def plugin(plugin_type, name, *args)
     # Scope plugins of type 'input' to 'inputs'
     type_scoped_metric = pipeline_scoped_metric.namespace("#{plugin_type}s".to_sym)
     plugin = if plugin_type == "output"
-               OutputDelegator.new(@logger, klass, type_scoped_metric,
+               OutputDelegator.new(@logger, @slow_logger, klass, type_scoped_metric,
                                    OutputDelegatorStrategyRegistry.instance,
                                    args)
              elsif plugin_type == "filter"
-               FilterDelegator.new(@logger, klass, type_scoped_metric, args)
+               FilterDelegator.new(@logger, @slow_logger, klass, type_scoped_metric, args)
              else # input
                input_plugin = klass.new(args)
-               input_plugin.metric = type_scoped_metric.namespace(id)
+               input_plugin.metric      = type_scoped_metric.namespace(id)
+               input_plugin.slow_logger = @slow_logger
                input_plugin
              end
     
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 80f0bd04e62..7dcc5342f48 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -8,8 +8,26 @@
 require "logstash/plugins/registry"
 
 class LogStash::Plugin
+
+
+  class Timer
+
+    def initialize
+      @timer = 0
+    end
+
+    def start(now=::Time.now)
+      @timer = now
+    end
+
+    def stop(now=::Time.now)
+      now - @timer
+    end
+  end
+
   include LogStash::Util::Loggable
   attr_accessor :params
+  attr_reader :settings
 
   NL = "\n"
 
@@ -31,7 +49,7 @@ class LogStash::Plugin
   # }
   # ```
   #
-  # If you don't explicitely set this variable Logstash will generate a unique name.
+  # If you don't explicitly set this variable Logstash will generate a unique name.
   config :id, :validate => :string
 
   def hash
@@ -44,12 +62,13 @@ def eql?(other)
     self.class.name == other.class.name && @params == other.params
   end
 
-  def initialize(params=nil)
+  def initialize(params=nil, settings=LogStash::SETTINGS)
     @logger = self.logger
     @params = LogStash::Util.deep_clone(params)
     # The id should always be defined normally, but in tests that might not be the case
     # In the future we may make this more strict in the Plugin API
     @params["id"] ||= "#{self.class.config_name}_#{SecureRandom.uuid}"
+    @settings = settings
   end
 
   # Return a uniq ID for this plugin configuration, by default
@@ -98,6 +117,23 @@ def metric=(new_metric)
     @metric = new_metric
   end
 
+  def slow_logger=(slow_logger)
+    @slow_logger = slow_logger
+  end
+
+  def timer
+    @timer ||= Timer.new
+  end
+
+  def slowlog(event, threshold, end_time, start_time=0, data={})
+    @slow_logger ||= LogStash::Logging::NullLogger.new
+    @slow_logger.log(event, threshold, end_time-start_time, data)
+  end
+
+  def setting(key)
+    @settings.get_value(key) rescue nil
+  end
+
   def metric
     # We can disable metric per plugin if we want in the configuration
     # we will use the NullMetric in this case.
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index 98586a1736d..156ecced8a9 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -6,6 +6,7 @@
 
 describe LogStash::FilterDelegator do
   let(:logger) { double(:logger) }
+  let(:slow_logger) { double("slowlogger") }
   let(:filter_id) { "my-filter" }
   let(:config) do
     { "host" => "127.0.0.1", "id" => filter_id }
@@ -25,11 +26,11 @@ def register; end
     end
   end
 
-  subject { described_class.new(logger, plugin_klass, metric, config) }
+  subject { described_class.new(logger, slow_logger, plugin_klass, metric, config) }
 
   it "create a plugin with the passed options" do
     expect(plugin_klass).to receive(:new).with(config).and_return(plugin_klass.new(config))
-    described_class.new(logger, plugin_klass, metric, config)
+    described_class.new(logger, slow_logger, plugin_klass, metric, config)
   end
 
   context "when the plugin support flush" do
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 9c3808a027c..ef166d368ee 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -8,7 +8,9 @@
   let(:plugin_args) { {"id" => "foo", "arg1" => "val1"} }
   let(:metric) { LogStash::Instrument::NullMetric.new }
 
-  subject { described_class.new(logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
+  let(:slow_logger) { double("slow.logger") }
+
+  subject { described_class.new(logger, slow_logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
 
   context "with a plain output plugin" do
     let(:out_klass) { double("output klass") }
@@ -26,6 +28,7 @@
       allow(out_inst).to receive(:register)
       allow(out_inst).to receive(:multi_receive)
       allow(out_inst).to receive(:metric=).with(any_args)
+      allow(out_inst).to receive(:slow_logger=).with(any_args)
       allow(out_inst).to receive(:id).and_return("a-simple-plugin")
 
       allow(subject.metric_events).to receive(:increment).with(any_args)
@@ -38,7 +41,7 @@
 
     it "should push the name of the plugin to the metric" do
       expect(metric).to receive(:gauge).with(:name, out_klass.config_name)
-      described_class.new(logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
+      described_class.new(logger, slow_logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
     end
 
     context "after having received a batch of events" do
diff --git a/logstash-core/spec/logstash/plugin_spec.rb b/logstash-core/spec/logstash/plugin_spec.rb
index 9747d463886..62edf77de61 100644
--- a/logstash-core/spec/logstash/plugin_spec.rb
+++ b/logstash-core/spec/logstash/plugin_spec.rb
@@ -271,6 +271,19 @@ def register; end
     end
   end
 
+  context "When the plugin record an slow operation" do
+    let(:base) { LogStash::Inputs::Base }
+    let(:plugin) do
+      Class.new(base) do
+        #include LogStash::Util::Loggable
+        config_name "testing"
+
+        def register
+          metric.gauge("power_level", 9000)
+        end
+      end
+    end
+  end
 
   context "When the plugin record a metric" do
     let(:config) { {} }
diff --git a/logstash-core/spec/logstash/plugins/logging_spec.rb b/logstash-core/spec/logstash/plugins/logging_spec.rb
new file mode 100644
index 00000000000..bb915689adc
--- /dev/null
+++ b/logstash-core/spec/logstash/plugins/logging_spec.rb
@@ -0,0 +1,26 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/plugin"
+require "logstash/outputs/base"
+require "logstash/codecs/base"
+require "logstash/inputs/base"
+require "logstash/filters/base"
+require "logstash/logging"
+
+describe LogStash::Logging::Util::FreqItems do
+
+  subject { described_class.new }
+
+  it "should be possible to add an item" do
+    subject.add("foo.bar.zet")
+    expect(subject.size).to eq(1)
+  end
+
+  it "should return the top K items in order" do
+    10.times { subject.add("foo.bar.zet") }
+    5.times { subject.add("x.y.z") }
+    15.times { subject.add("a.b.c") }
+
+    expect(subject.top_k(2).map { |e| e[0] }).to eq(["a.b.c", "foo.bar.zet"])
+  end
+end
diff --git a/logstash-core/spec/logstash/plugins/slow_logger_spec.rb b/logstash-core/spec/logstash/plugins/slow_logger_spec.rb
new file mode 100644
index 00000000000..878460b3868
--- /dev/null
+++ b/logstash-core/spec/logstash/plugins/slow_logger_spec.rb
@@ -0,0 +1,157 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/logging/slowlog_manager"
+require "logstash/plugin"
+require "logstash/outputs/base"
+require "logstash/codecs/base"
+require "logstash/inputs/base"
+require "logstash/filters/base"
+
+describe "slowlog interface" do
+
+  let(:config) { {} }
+
+  [LogStash::Inputs::Base, LogStash::Filters::Base, LogStash::Outputs::Base].each do |plugin_base|
+
+    subject(:plugin) do
+      Class.new(plugin_base,) do
+        config_name "dummy"
+      end.new(config)
+    end
+
+    let(:slowlog_manager) { LogStash::Logging::SlowLogManager.new }
+    let(:slow_logger) { slowlog_manager.build(:plugin) }
+    let(:logger) { double("logger") }
+    let(:event) { LogStash::Event.new }
+
+    it "should respond to slow_logger" do
+      expect(plugin.respond_to?(:slow_logger=)).to eq(true)
+      expect(plugin.respond_to?(:slowlog)).to  eq(true)
+    end
+
+    describe "notify slow operations" do
+
+      before(:each) do
+        allow(logger).to receive(:respond_to?).with(:info).and_return(true)
+        allow(logger).to receive(:respond_to?).with(:warn).and_return(true)
+        slow_logger.logger = logger
+        plugin.slow_logger = slow_logger
+      end
+
+      context "when threshold is not overcome"do
+        it "should not report to the logger" do
+          expect(slow_logger).to receive(:setting).with("your.op.warn").and_return(15)
+          expect(logger).not_to receive(:warn)
+          plugin.slowlog(event, "your.op.warn",20,10)
+        end
+      end
+
+      context "when threshold is overcome"do
+        it "should not report to the logger" do
+          expect(slow_logger).to receive(:setting).with("slowlog.plugins.context").and_return(true)
+          expect(slow_logger).to receive(:setting).with("your.op.warn").and_return(15)
+          expect(logger).to receive(:warn)
+          plugin.slowlog(event, "your.op.warn",20,0)
+        end
+      end
+
+      context "when threshold is not defined"do
+        it "should not report to the logger" do
+          expect(slow_logger).to receive(:setting).with("your.op.warn").and_return(nil)
+          expect(logger).not_to receive(:warn)
+          plugin.slowlog(event, "your.op.warn",10,0)
+        end
+      end
+
+      context "when using a custom level" do
+
+        it "should log as the level if valid" do
+          expect(slow_logger).to receive(:setting).with("slowlog.plugins.context").and_return(true)
+          expect(slow_logger).to receive(:setting).with("your.op.info").and_return(15)
+          expect(logger).to receive(:info)
+          plugin.slowlog(event, "your.op.info",20,0)
+        end
+
+        it "should log as the default level (warn) if not valid" do
+          allow(logger).to receive(:respond_to?).with(:foobar).and_return(false)
+          expect(slow_logger).to receive(:setting).with("slowlog.plugins.context").and_return(true)
+          expect(slow_logger).to receive(:setting).with("your.op.foobar").and_return(15)
+          expect(logger).to receive(:warn)
+          plugin.slowlog(event, "your.op.foobar",20,3)
+        end
+      end
+
+    end
+
+    describe LogStash::Plugin::Timer do
+
+      it "should respond to timer" do
+        expect(plugin.respond_to?(:timer)).to eq(true)
+      end
+
+      it "should enable timinig operations" do
+        plugin.timer.start
+        sleep 0.1
+        expect(plugin.timer.stop).to be > 0
+      end
+    end
+
+  end
+
+  describe LogStash::Logging::SlowLogger do
+
+    subject { described_class.new }
+    let(:event) { LogStash::Event.new }
+
+    it "should respond to log" do
+      expect(subject.respond_to?(:log)).to eq(true)
+    end
+
+    describe "notify slow operations" do
+      let(:logger) { double("logger") }
+
+      before(:each) do
+        allow(logger).to receive(:warn)
+        subject.logger = logger
+      end
+
+      context "when the threshold is not defined" do
+        it "should not report" do
+          expect(logger).not_to receive(:warn)
+          subject.log(event, "not.defined.op.warn", 9)
+        end
+      end
+
+      context "when the threshold is defined" do
+
+        before(:each) do
+          expect(subject).to receive(:setting).with("your.op.warn").and_return(15)
+        end
+
+        it "should not report to the logger if not overcome" do
+          expect(logger).not_to receive(:warn)
+          subject.log(event, "your.op.warn", 14)
+        end
+
+        it "should report to the logger if overcome" do
+          expect(subject).to receive(:setting).with("slowlog.plugins.context").and_return(true)
+          expect(logger).to receive(:warn)
+          subject.log(event, "your.op.warn", 16)
+        end
+      end
+
+      context "when no context is requested" do
+        before(:each) do
+          expect(subject).to receive(:setting).with("slowlog.plugins.context").and_return(false)
+          expect(subject).to receive(:setting).with("your.op.warn").and_return(15)
+        end
+
+        it "should not attach the event to the payload" do
+          expect(subject).not_to receive(:to_logger).with(:warn, kind_of(String), hash_including(:context => { :event => event, :threshold => "your.op" } ))
+          subject.log(event, "your.op.warn", 20)
+        end 
+      end
+    end
+
+  end
+end
