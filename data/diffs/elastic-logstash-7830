diff --git a/tools/benchmark-cli/README.md b/tools/benchmark-cli/README.md
index de361870949..d19325ea539 100644
--- a/tools/benchmark-cli/README.md
+++ b/tools/benchmark-cli/README.md
@@ -18,6 +18,8 @@ Option                           Description
 ------                           -----------                                    
 --distribution-version <String>  The version of a Logstash build to download    
                                    from elastic.co.                             
+--elasticsearch-export <String>  Optional Elasticsearch host URL to store       
+                                   detailed results at. (default: )                       
 --git-hash <String>              Either a git tree (tag/branch or commit hash), 
                                    optionally prefixed by a Github username,    
                                  if ran against forks.                          
diff --git a/tools/benchmark-cli/build.gradle b/tools/benchmark-cli/build.gradle
index 07ee7d305e8..cbe7fa17f3a 100644
--- a/tools/benchmark-cli/build.gradle
+++ b/tools/benchmark-cli/build.gradle
@@ -23,7 +23,8 @@ buildscript {
 }
 
 ext {
-  jmh = 1.18
+  jmh = '1.18'
+  elasticsearch = '5.5.0'
 }
 
 dependencies {
@@ -34,6 +35,7 @@ dependencies {
   compile group: 'commons-io', name: 'commons-io', version: '2.5'
   compile 'com.fasterxml.jackson.core:jackson-core:2.7.4'
   compile 'com.fasterxml.jackson.core:jackson-databind:2.7.4'
+  compile group: 'org.elasticsearch.client', name: 'rest', version: elasticsearch
   compile "org.openjdk.jmh:jmh-core:$jmh"
   testCompile group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.6.0'
   testCompile "junit:junit:4.12"
@@ -45,6 +47,7 @@ javadoc {
 
 test {
   exclude '**/org/logstash/benchmark/cli/MainTest*'
+  exclude '**/org/logstash/benchmark/cli/MainEsStorageTest*'
 }
 
 apply plugin: 'com.github.johnrengelman.shadow'
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java
new file mode 100644
index 00000000000..cfa0c3c7135
--- /dev/null
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/DataStore.java
@@ -0,0 +1,84 @@
+package org.logstash.benchmark.cli;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Map;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpStatus;
+import org.apache.http.entity.ContentType;
+import org.apache.http.nio.entity.NStringEntity;
+import org.elasticsearch.client.RestClient;
+import org.logstash.benchmark.cli.ui.LsMetricStats;
+import org.logstash.benchmark.cli.util.LsBenchJsonUtil;
+import org.openjdk.jmh.util.ListStatistics;
+
+public interface DataStore extends Closeable {
+
+    /**
+     * Dummy {@link DataStore} that does nothing.
+     */
+    DataStore NONE = new DataStore() {
+        @Override
+        public void store(final Map<LsMetricStats, ListStatistics> data) {
+        }
+
+        @Override
+        public void close() {
+        }
+    };
+
+    /**
+     * @param data Measured Data
+     * @throws IOException On Failure
+     */
+    void store(Map<LsMetricStats, ListStatistics> data) throws IOException;
+
+    /**
+     * Datastore backed by Elasticsearch.
+     */
+    final class ElasticSearch implements DataStore {
+
+        /**
+         * Low Level Elasticsearch {@link RestClient}.
+         */
+        private final RestClient client;
+
+        /**
+         * Metadata for the current benchmark run.
+         */
+        private final Map<String, Object> meta;
+
+        /**
+         * Ctor.
+         * @param host Elasticsearch Hostname
+         * @param port Elasticsearch Port
+         * @param schema {@code "http"} or {@code "https"} 
+         * @param meta Metadata
+         */
+        ElasticSearch(final String host, final int port, final String schema,
+            final Map<String, Object> meta) {
+            client = RestClient.builder(new HttpHost(host, port, schema)).build();
+            this.meta = meta;
+        }
+
+        @Override
+        public void store(final Map<LsMetricStats, ListStatistics> data) throws IOException {
+            if (client.performRequest(
+                "POST", "/logstash-benchmarks/measurement/",
+                Collections.emptyMap(),
+                new NStringEntity(
+                    LsBenchJsonUtil.serializeEsResult(data, meta), ContentType.APPLICATION_JSON
+                )
+            ).getStatusLine().getStatusCode() != HttpStatus.SC_CREATED) {
+                throw new IllegalStateException(
+                    "Failed to save measurement to Elasticsearch.");
+            }
+        }
+
+        @Override
+        public void close() throws IOException {
+            client.close();
+        }
+    }
+}
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
index 8b31b349f57..09499b2ec54 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
@@ -1,11 +1,8 @@
 package org.logstash.benchmark.cli;
 
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.EnumMap;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
@@ -19,25 +16,26 @@
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
+import org.logstash.benchmark.cli.util.LsBenchJsonUtil;
 import org.openjdk.jmh.util.ListStatistics;
 
 public final class LsMetricsMonitor implements Callable<EnumMap<LsMetricStats, ListStatistics>> {
 
-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
-
-    private static final JavaType MAP_TYPE =
-        OBJECT_MAPPER.getTypeFactory().constructMapType(HashMap.class, String.class, Object.class);
+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();
 
+    private final DataStore store;
+    
     private final String metrics;
 
     private volatile boolean running = true;
 
-    LsMetricsMonitor(final String metrics) {
+    private LsMetricsMonitor(final String metrics, final DataStore store) {
         this.metrics = metrics;
+        this.store = store;
     }
 
     @Override
-    public EnumMap<LsMetricStats, ListStatistics> call() {
+    public EnumMap<LsMetricStats, ListStatistics> call() throws IOException {
         final ListStatistics stats = new ListStatistics();
         long count = 0L;
         final ListStatistics counts = new ListStatistics();
@@ -69,6 +67,7 @@ public EnumMap<LsMetricStats, ListStatistics> call() {
         result.put(LsMetricStats.THROUGHPUT, stats);
         result.put(LsMetricStats.COUNT, counts);
         result.put(LsMetricStats.CPU_USAGE, cpu);
+        store.store(result);
         return result;
     }
 
@@ -77,7 +76,6 @@ public void stop() {
     }
 
     private long[] getCounts() {
-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
         try (final CloseableHttpClient client = HttpClientBuilder.create().build()) {
             baos.reset();
             try (final CloseableHttpResponse response = client
@@ -86,7 +84,7 @@ private long[] getCounts() {
             } catch (final IOException ex) {
                 return new long[]{-1L, -1L};
             }
-            final Map<String, Object> data = OBJECT_MAPPER.readValue(baos.toByteArray(), MAP_TYPE);
+            final Map<String, Object> data = LsBenchJsonUtil.deserializeMetrics(baos.toByteArray());
             final long count;
             if (data.containsKey("pipeline")) {
                 count = readNestedLong(data, "pipeline", "events", "filtered");
@@ -107,7 +105,7 @@ private long[] getCounts() {
             throw new IllegalStateException(ex);
         }
     }
-    
+
     private static long readNestedLong(final Map<String, Object> map, final String ... path) {
         Map<String, Object> nested = map;
         for (int i = 0; i < path.length - 1; ++i) {
@@ -120,7 +118,7 @@ private static long readNestedLong(final Map<String, Object> map, final String .
      * Runs a {@link LsMetricsMonitor} instance in a background thread.
      */
     public static final class MonitorExecution implements AutoCloseable {
-        
+
         private final Future<EnumMap<LsMetricStats, ListStatistics>> future;
 
         private final ExecutorService exec;
@@ -130,9 +128,10 @@ public static final class MonitorExecution implements AutoCloseable {
         /**
          * Ctor.
          * @param metrics Logstash Metrics URL
+         * @param store {@link DataStore} to persist benchmark results
          */
-        public MonitorExecution(final String metrics) {
-            monitor = new LsMetricsMonitor(metrics);
+        public MonitorExecution(final String metrics, final DataStore store) {
+            monitor = new LsMetricsMonitor(metrics, store);
             exec = Executors.newSingleThreadExecutor();
             future = exec.submit(monitor);
         }
@@ -155,4 +154,5 @@ public void close() {
             exec.shutdownNow();
         }
     }
+
 }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
index 86d055fd661..4b948eaa9dc 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
@@ -3,9 +3,15 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.URI;
+import java.net.UnknownHostException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.security.NoSuchAlgorithmException;
 import java.util.AbstractMap;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.TimeUnit;
 import joptsimple.OptionException;
@@ -13,6 +19,7 @@
 import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
 import joptsimple.OptionSpecBuilder;
+import org.apache.commons.lang3.SystemUtils;
 import org.logstash.benchmark.cli.cases.ApacheLogsComplex;
 import org.logstash.benchmark.cli.cases.Case;
 import org.logstash.benchmark.cli.cases.GeneratorToStdout;
@@ -69,6 +76,9 @@ public static void main(final String... args) throws Exception {
             UserInput.WORKING_DIRECTORY_PARAM, UserInput.WORKING_DIRECTORY_HELP
         ).withRequiredArg().ofType(File.class).defaultsTo(UserInput.WORKING_DIRECTORY_DEFAULT)
             .forHelp();
+        final OptionSpec<String> esout = parser.accepts(
+            UserInput.ES_OUTPUT_PARAM, UserInput.ES_OUTPUT_HELP
+        ).withRequiredArg().ofType(String.class).defaultsTo(UserInput.ES_OUTPUT_DEFAULT).forHelp();
         final OptionSet options;
         try {
             options = parser.parse(args);
@@ -90,7 +100,7 @@ public static void main(final String... args) throws Exception {
         }
         execute(
             new UserOutput(System.out), loadSettings(), options.valueOf(testcase),
-            options.valueOf(pwd).toPath(), version, type
+            options.valueOf(pwd).toPath(), version, type, options.valueOf(esout)
         );
     }
 
@@ -102,10 +112,12 @@ public static void main(final String... args) throws Exception {
      * @param cwd Working Directory to run in and write cache files to
      * @param version Version of Logstash to benchmark
      * @param type Type of Logstash version to benchmark
+     * @param esout Elastic Search URL (empty string is interpreted as not using ES output)
      * @throws Exception On Failure
      */
     public static void execute(final UserOutput output, final Properties settings,
-        final String test, final Path cwd, final String version, final LsVersionType type)
+        final String test, final Path cwd, final String version, final LsVersionType type,
+        final String esout)
         throws Exception {
         output.printBanner();
         output.printLine();
@@ -121,38 +133,60 @@ public static void execute(final UserOutput output, final Properties settings,
         } else {
             logstash = LsBenchLsSetup.setupLS(cwd.toAbsolutePath().toString(), version, type);
         }
+        try (final DataStore store = setupDataStore(esout, test, version, type)) {
+            final Case testcase = setupTestCase(store, logstash, cwd, settings, test);
+            output.printStartTime();
+            final long start = System.currentTimeMillis();
+            final AbstractMap<LsMetricStats, ListStatistics> stats = testcase.run();
+            output.green("Statistical Summary:\n");
+            output.green(String.format(
+                "Elapsed Time: %ds",
+                TimeUnit.SECONDS.convert(
+                    System.currentTimeMillis() - start, TimeUnit.MILLISECONDS
+                )
+            ));
+            output.printStatistics(stats);
+        }
+    }
+
+    private static Case setupTestCase(final DataStore store, final LogstashInstallation logstash,
+        final Path cwd, final Properties settings, final String test)
+        throws IOException, NoSuchAlgorithmException {
         final Case testcase;
         if (GeneratorToStdout.IDENTIFIER.equalsIgnoreCase(test)) {
-            testcase = new GeneratorToStdout(logstash);
+            testcase = new GeneratorToStdout(store, logstash);
         } else if (ApacheLogsComplex.IDENTIFIER.equalsIgnoreCase(test)) {
-            testcase = new ApacheLogsComplex(logstash, cwd, settings);
+            testcase = new ApacheLogsComplex(store, logstash, cwd, settings);
         } else {
             throw new IllegalArgumentException(String.format("Unknown test case %s", test));
         }
-        output.printStartTime();
-        final long start = System.currentTimeMillis();
-        final AbstractMap<LsMetricStats, ListStatistics> stats = testcase.run();
-        output.green("Statistical Summary:\n");
-        output.green(String.format(
-            "Elapsed Time: %ds",
-            TimeUnit.SECONDS.convert(
-                System.currentTimeMillis() - start, TimeUnit.MILLISECONDS
-            )
-        ));
-        output.green(
-            String.format("Num Events: %d", (long) stats.get(LsMetricStats.COUNT).getMax())
-        );
-        final ListStatistics throughput = stats.get(LsMetricStats.THROUGHPUT);
-        output.green(String.format("Throughput Min: %.2f", throughput.getMin()));
-        output.green(String.format("Throughput Max: %.2f", throughput.getMax()));
-        output.green(String.format("Throughput Mean: %.2f", throughput.getMean()));
-        output.green(String.format("Throughput StdDev: %.2f", throughput.getStandardDeviation()));
-        output.green(String.format("Throughput Variance: %.2f", throughput.getVariance()));
-        output.green(
-            String.format(
-                "Mean CPU Usage: %.2f%%", stats.get(LsMetricStats.CPU_USAGE).getMean()
-            )
-        );
+        return testcase;
+    }
+
+    private static DataStore setupDataStore(final String elastic, final String test,
+        final String version, final LsVersionType vtype) throws UnknownHostException {
+        if (elastic.isEmpty()) {
+            return DataStore.NONE;
+        } else {
+            final URI elasticsearch = URI.create(elastic);
+            return new DataStore.ElasticSearch(
+                elasticsearch.getHost(), elasticsearch.getPort(), elasticsearch.getScheme(),
+                meta(test, version, vtype)
+            );
+        }
+    }
+
+    private static Map<String, Object> meta(final String testcase, final String version,
+        final LsVersionType vtype) throws UnknownHostException {
+        final Map<String, Object> result = new HashMap<>();
+        result.put("test_name", testcase);
+        result.put("os_name", SystemUtils.OS_NAME);
+        result.put("os_version", SystemUtils.OS_VERSION);
+        result.put("host_name", InetAddress.getLocalHost().getHostName());
+        result.put("cpu_cores", Runtime.getRuntime().availableProcessors());
+        result.put("version_type", vtype);
+        result.put("version", version);
+        return result;
     }
 
     private static Properties loadSettings() throws IOException {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
index 88c37ad02f6..db5b7421bc0 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/ApacheLogsComplex.java
@@ -11,6 +11,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
 import org.apache.commons.io.IOUtils;
+import org.logstash.benchmark.cli.DataStore;
 import org.logstash.benchmark.cli.LogstashInstallation;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
@@ -32,17 +33,21 @@ public final class ApacheLogsComplex implements Case {
 
     private final File data;
 
-    public ApacheLogsComplex(final LogstashInstallation logstash, final Path cwd,
+    private final DataStore store;
+
+    public ApacheLogsComplex(final DataStore store, final LogstashInstallation logstash,
+        final Path cwd,
         final Properties settings) throws IOException, NoSuchAlgorithmException {
         this.data = cwd.resolve("data_apache").resolve("apache_access_logs").toFile();
         ensureDatafile(data.toPath().getParent().toFile(), settings);
         this.logstash = logstash;
+        this.store = store;
     }
 
     @Override
     public EnumMap<LsMetricStats, ListStatistics> run() {
         try (final LsMetricsMonitor.MonitorExecution monitor =
-                 new LsMetricsMonitor.MonitorExecution(logstash.metrics())) {
+                 new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
             final String config;
             try (final InputStream cfg = ApacheLogsComplex.class
                 .getResourceAsStream("apache.cfg")) {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
index 226c96a5af9..1dd9d0770e5 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/GeneratorToStdout.java
@@ -4,6 +4,7 @@
 import java.util.EnumMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
+import org.logstash.benchmark.cli.DataStore;
 import org.logstash.benchmark.cli.LogstashInstallation;
 import org.logstash.benchmark.cli.LsMetricsMonitor;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
@@ -24,14 +25,18 @@ public final class GeneratorToStdout implements Case {
 
     private final LogstashInstallation logstash;
 
-    public GeneratorToStdout(final LogstashInstallation logstash) {
+    private final DataStore store;
+
+    public GeneratorToStdout(final DataStore store, final LogstashInstallation logstash) {
         this.logstash = logstash;
+        this.store = store;
+
     }
 
     @Override
     public EnumMap<LsMetricStats, ListStatistics> run() {
         try (final LsMetricsMonitor.MonitorExecution monitor =
-                 new LsMetricsMonitor.MonitorExecution(logstash.metrics())) {
+                 new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
             logstash.execute(GeneratorToStdout.CONFIGURATION);
             return monitor.stopAndGet();
         } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
index d8833f037c9..490b67d13c1 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
@@ -8,6 +8,12 @@
  */
 public final class UserInput {
 
+    public static final String ES_OUTPUT_PARAM = "elasticsearch-export";
+
+    public static final String ES_OUTPUT_HELP = "Optional Elasticsearch host URL to store detailed results at.";
+
+    public static final String ES_OUTPUT_DEFAULT = "";
+
     /**
      * The Default Cache/Working-Directory.
      */
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
index 56dfa4b684d..6e11dddadc7 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
@@ -4,7 +4,9 @@
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
+import java.util.Map;
 import org.apache.commons.lang3.SystemUtils;
+import org.openjdk.jmh.util.ListStatistics;
 
 public final class UserOutput {
 
@@ -54,6 +56,23 @@ public void green(final String line) {
         target.println(colorize(line, GREEN_ANSI_OPEN));
     }
 
+    public void printStatistics(final Map<LsMetricStats, ListStatistics> stats) {
+        green(
+            String.format("Num Events: %d", (long) stats.get(LsMetricStats.COUNT).getMax())
+        );
+        final ListStatistics throughput = stats.get(LsMetricStats.THROUGHPUT);
+        green(String.format("Throughput Min: %.2f", throughput.getMin()));
+        green(String.format("Throughput Max: %.2f", throughput.getMax()));
+        green(String.format("Throughput Mean: %.2f", throughput.getMean()));
+        green(String.format("Throughput StdDev: %.2f", throughput.getStandardDeviation()));
+        green(String.format("Throughput Variance: %.2f", throughput.getVariance()));
+        green(
+            String.format(
+                "Mean CPU Usage: %.2f%%", stats.get(LsMetricStats.CPU_USAGE).getMean()
+            )
+        );
+    }
+    
     private static String colorize(final String line, final String prefix) {
         final String reset = ANSI_CLOSE;
         return new StringBuilder(line.length() + 2 * reset.length())
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchJsonUtil.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchJsonUtil.java
new file mode 100644
index 00000000000..6e4c34711d7
--- /dev/null
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/util/LsBenchJsonUtil.java
@@ -0,0 +1,57 @@
+package org.logstash.benchmark.cli.util;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import org.logstash.benchmark.cli.ui.LsMetricStats;
+import org.openjdk.jmh.util.ListStatistics;
+
+/**
+ * Json Utilities.
+ */
+public final class LsBenchJsonUtil {
+
+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
+
+    private static final JavaType LS_METRIC_TYPE =
+        OBJECT_MAPPER.getTypeFactory().constructMapType(HashMap.class, String.class, Object.class);
+
+    private LsBenchJsonUtil() {
+        // Utility Class
+    }
+
+    /**
+     * Deserializes metrics read from LS HTTP Api.
+     * @param data raw bytes read from HTTP API
+     * @return Deserialized JSON Map of Metrics
+     * @throws IOException On Deserialization Failure
+     */
+    public static Map<String, Object> deserializeMetrics(final byte[] data) throws IOException {
+        return LsBenchJsonUtil.OBJECT_MAPPER.readValue(data, LsBenchJsonUtil.LS_METRIC_TYPE);
+    }
+
+    /**
+     * Serializes result for storage in Elasticsearch.
+     * @param data Measurement Data
+     * @param meta Metadata
+     * @return JSON String
+     * @throws JsonProcessingException On Failure to Serialize
+     */
+    public static String serializeEsResult(final Map<LsMetricStats, ListStatistics> data,
+        final Map<String, Object> meta) throws JsonProcessingException {
+        final Map<String, Object> measurement = new HashMap<>(4);
+        measurement.put("@timestamp", System.currentTimeMillis());
+        final ListStatistics throughput = data.get(LsMetricStats.THROUGHPUT);
+        measurement.put("throughput_min", throughput.getMin());
+        measurement.put("throughput_max", throughput.getMax());
+        measurement.put("throughput_mean", Math.round(throughput.getMean()));
+        measurement.put(
+            "cpu_usage_mean_percent", Math.round(data.get(LsMetricStats.CPU_USAGE).getMean())
+        );
+        measurement.put("meta", meta);
+        return OBJECT_MAPPER.writeValueAsString(measurement);
+    }
+}
diff --git a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/LsMetricsMonitorTest.java b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/LsMetricsMonitorTest.java
index 4af3ce4dd7b..cd7b0380881 100644
--- a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/LsMetricsMonitorTest.java
+++ b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/LsMetricsMonitorTest.java
@@ -6,10 +6,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
-import java.util.EnumMap;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import org.apache.commons.io.IOUtils;
 import org.hamcrest.CoreMatchers;
@@ -17,7 +13,6 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
-import org.openjdk.jmh.util.ListStatistics;
 import org.openjdk.jmh.util.Statistics;
 
 /**
@@ -34,17 +29,15 @@ public void parsesFilteredCount() throws Exception {
         http.stubFor(WireMock.get(WireMock.urlEqualTo(path)).willReturn(WireMock.okJson(
             metricsFixture()
         )));
-        final ExecutorService executor = Executors.newSingleThreadExecutor();
-        try {
-            final LsMetricsMonitor monitor =
-                new LsMetricsMonitor(String.format("http://127.0.0.1:%d/%s", http.port(), path));
-            final Future<EnumMap<LsMetricStats, ListStatistics>> future = executor.submit(monitor);
+        try (final LsMetricsMonitor.MonitorExecution monitor =
+                 new LsMetricsMonitor.MonitorExecution(
+                     String.format("http://127.0.0.1:%d/%s", http.port(), path),
+                     DataStore.NONE
+                 )
+        ) {
             TimeUnit.SECONDS.sleep(5L);
-            monitor.stop();
-            final Statistics stats = future.get().get(LsMetricStats.THROUGHPUT);
+            final Statistics stats = monitor.stopAndGet().get(LsMetricStats.THROUGHPUT);
             MatcherAssert.assertThat(stats.getMax(), CoreMatchers.is(21052.0D));
-        } finally {
-            executor.shutdownNow();
         }
     }
 
@@ -54,17 +47,15 @@ public void parsesCpuUsage() throws Exception {
         http.stubFor(WireMock.get(WireMock.urlEqualTo(path)).willReturn(WireMock.okJson(
             metricsFixture()
         )));
-        final ExecutorService executor = Executors.newSingleThreadExecutor();
-        try {
-            final LsMetricsMonitor monitor =
-                new LsMetricsMonitor(String.format("http://127.0.0.1:%d/%s", http.port(), path));
-            final Future<EnumMap<LsMetricStats, ListStatistics>> future = executor.submit(monitor);
+        try (final LsMetricsMonitor.MonitorExecution monitor =
+                 new LsMetricsMonitor.MonitorExecution(
+                     String.format("http://127.0.0.1:%d/%s", http.port(), path),
+                     DataStore.NONE
+                 )
+        ) {
             TimeUnit.SECONDS.sleep(5L);
-            monitor.stop();
-            final Statistics stats = future.get().get(LsMetricStats.CPU_USAGE);
+            final Statistics stats = monitor.stopAndGet().get(LsMetricStats.CPU_USAGE);
             MatcherAssert.assertThat(stats.getMax(), CoreMatchers.is(63.0D));
-        } finally {
-            executor.shutdownNow();
         }
     }
 
diff --git a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainEsStorageTest.java b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainEsStorageTest.java
new file mode 100644
index 00000000000..9b48a2c9851
--- /dev/null
+++ b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainEsStorageTest.java
@@ -0,0 +1,29 @@
+package org.logstash.benchmark.cli;
+
+import java.io.File;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+import org.logstash.benchmark.cli.ui.UserInput;
+
+/**
+ * Tests for {@link Main}.
+ */
+public final class MainEsStorageTest {
+
+    @Rule
+    public final TemporaryFolder temp = new TemporaryFolder();
+    
+    /**
+     * @throws Exception On Failure
+     */
+    @Test
+    public void runsAgainstRelease() throws Exception {
+        final File pwd = temp.newFolder();
+        Main.main(
+            String.format("--%s=5.5.0", UserInput.DISTRIBUTION_VERSION_PARAM),
+            String.format("--workdir=%s", pwd.getAbsolutePath()),
+            String.format("--%s=%s", UserInput.ES_OUTPUT_PARAM, "http://127.0.0.1:9200/")
+        );
+    }
+}
