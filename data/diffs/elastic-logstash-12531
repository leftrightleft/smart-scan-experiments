diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 812d0a0b257..afb301ce040 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -222,110 +222,109 @@ def flatten_hash(h,f="",g={})
     end
   end
 
-  class Setting
-    include LogStash::Util::Loggable
-
-    attr_reader :name, :default
-
-    def initialize(name, klass, default=nil, strict=true, &validator_proc)
-      @name = name
-      unless klass.is_a?(Class)
-        raise ArgumentError.new("Setting \"#{@name}\" must be initialized with a class (received #{klass})")
-      end
-      @klass = klass
-      @validator_proc = validator_proc
-      @value = nil
-      @value_is_set = false
-      @strict = strict
-
-      validate(default) if @strict
-      @default = default
-    end
-
-    def value
-      @value_is_set ? @value : default
-    end
-
-    def set?
-      @value_is_set
-    end
-
-    def strict?
-      @strict
-    end
-
-    def set(value)
-      validate(value) if @strict
-      @value = value
-      @value_is_set = true
-      @value
-    end
-
-    def reset
-      @value = nil
-      @value_is_set = false
-    end
-
-    def to_hash
-      {
-        "name" => @name,
-        "klass" => @klass,
-        "value" => @value,
-        "value_is_set" => @value_is_set,
-        "default" => @default,
-        # Proc#== will only return true if it's the same obj
-        # so no there's no point in comparing it
-        # also thereś no use case atm to return the proc
-        # so let's not expose it
-        #"validator_proc" => @validator_proc
-      }
-    end
-
-    def ==(other)
-      self.to_hash == other.to_hash
-    end
-
-    def validate_value
-      validate(value)
-    end
-
-    protected
-    def validate(input)
-      if !input.is_a?(@klass)
-        raise ArgumentError.new("Setting \"#{@name}\" must be a #{@klass}. Received: #{input} (#{input.class})")
-      end
 
-      if @validator_proc && !@validator_proc.call(input)
-        raise ArgumentError.new("Failed to validate setting \"#{@name}\" with value: #{input}")
-      end
-    end
+  class Setting
+#     include LogStash::Util::Loggable
+#
+#     attr_reader :name, :default
+#
+#     def initialize(name, klass, default=nil, strict=true, &validator_proc)
+#       @name = name
+#       unless klass.is_a?(Class)
+#         raise ArgumentError.new("Setting \"#{@name}\" must be initialized with a class (received #{klass})")
+#       end
+#       @klass = klass
+#       @validator_proc = validator_proc
+#       @value = nil
+#       @value_is_set = false
+#       @strict = strict
+#
+#       validate(default) if @strict
+#       @default = default
+#     end
+#
+#     def value
+#       @value_is_set ? @value : default
+#     end
+#
+#     def set?
+#       @value_is_set
+#     end
+#
+#     def strict?
+#       @strict
+#     end
+#
+#     def set(value)
+#       validate(value) if @strict
+#       @value = value
+#       @value_is_set = true
+#       @value
+#     end
+#
+#     def reset
+#       @value = nil
+#       @value_is_set = false
+#     end
+#
+#     def to_hash
+#       {
+#         "name" => @name,
+#         "klass" => @klass,
+#         "value" => @value,
+#         "value_is_set" => @value_is_set,
+#         "default" => @default,
+#         # Proc#== will only return true if it's the same obj
+#         # so no there's no point in comparing it
+#         # also thereś no use case atm to return the proc
+#         # so let's not expose it
+#         #"validator_proc" => @validator_proc
+#       }
+#     end
+#
+#     def ==(other)
+#       self.to_hash == other.to_hash
+#     end
+#
+#     def validate_value
+#       validate(value)
+#     end
+#
+#     protected
+#     def validate(input)
+#       if !input.is_a?(@klass)
+#         raise ArgumentError.new("Setting \"#{@name}\" must be a #{@klass}. Received: #{input} (#{input.class})")
+#       end
+#
+#       if @validator_proc && !@validator_proc.call(input)
+#         raise ArgumentError.new("Failed to validate setting \"#{@name}\" with value: #{input}")
+#       end
+#     end
 
     class Coercible < Setting
       def initialize(name, klass, default=nil, strict=true, &validator_proc)
-        @name = name
+        # this call is needed to instantiate the Java Setting in parent SettingExt
+        coercible_init(name, klass, default, strict, &validator_proc)
         unless klass.is_a?(Class)
-          raise ArgumentError.new("Setting \"#{@name}\" must be initialized with a class (received #{klass})")
+          raise ArgumentError.new("Setting \"#{name}\" must be initialized with a class (received #{klass})")
         end
-        @klass = klass
-        @validator_proc = validator_proc
-        @value = nil
-        @value_is_set = false
 
         if strict
           coerced_default = coerce(default)
           validate(coerced_default)
-          @default = coerced_default
+          new_default = coerced_default
         else
-          @default = default
+          new_default = default
         end
+        set_default(new_default)
       end
 
       def set(value)
         coerced_value = coerce(value)
         validate(coerced_value)
-        @value = coerce(coerced_value)
-        @value_is_set = true
-        @value
+        new_value = coerce(coerced_value)
+        assign_value(new_value)
+        new_value
       end
 
       def coerce(value)
@@ -461,6 +460,7 @@ def validate(value)
       end
     end
 
+#     java_import org.logstash.settings.StringSetting
     class String < Setting
       def initialize(name, default=nil, strict=true, possible_strings=[])
         @possible_strings = possible_strings
@@ -620,16 +620,16 @@ def coerce(value)
 
       protected
       def validate(input)
-        if !input.is_a?(@klass)
-          raise ArgumentError.new("Setting \"#{@name}\" must be a #{@klass}. Received: #{input} (#{input.class})")
+        if !input.is_a?(klass)
+          raise ArgumentError.new("Setting \"#{name}\" must be a #{klass}. Received: #{input} (#{input.class})")
         end
 
         unless input.all? {|el| el.kind_of?(@element_class) }
-          raise ArgumentError.new("Values of setting \"#{@name}\" must be #{@element_class}. Received: #{input.map(&:class)}")
+          raise ArgumentError.new("Values of setting \"#{name}\" must be #{@element_class}. Received: #{input.map(&:class)}")
         end
 
         if @validator_proc && !@validator_proc.call(input)
-          raise ArgumentError.new("Failed to validate setting \"#{@name}\" with value: #{input}")
+          raise ArgumentError.new("Failed to validate setting \"#{name}\" with value: #{input}")
         end
       end
     end
@@ -660,16 +660,16 @@ def initialize(name, klass, default = nil)
       end
 
       def set(value)
-        @value = coerce(value)
-        @value_is_set = true
-        @value
+        coerced_value = coerce(value)
+        assign_value(coerced_value)
+        coerced_value
       end
 
       def coerce(value)
-        if value.is_a?(@klass)
+        if value.is_a?(klass)
           return value
         end
-        @klass.new(value)
+        klass.new(value)
       end
 
       protected
diff --git a/logstash-core/spec/logstash/settings/numeric_spec.rb b/logstash-core/spec/logstash/settings/numeric_spec.rb
index 29bbe2f782f..43079a32644 100644
--- a/logstash-core/spec/logstash/settings/numeric_spec.rb
+++ b/logstash-core/spec/logstash/settings/numeric_spec.rb
@@ -30,7 +30,7 @@
       context "float" do
         it "should coerce that string to the number" do
           subject.set("1.1")
-          expect(subject.value).to eq(1.1)
+          expect(subject.value).to be_within(0.01).of(1.1)
         end
       end
       context "int" do
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index abf86480298..20ef556d0f9 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -76,6 +76,7 @@
 import org.logstash.plugins.HooksRegistryExt;
 import org.logstash.plugins.UniversalPluginExt;
 import org.logstash.plugins.factory.ContextualizerExt;
+import org.logstash.settings.SettingExt;
 import org.logstash.util.UtilExt;
 import org.logstash.plugins.factory.ExecutionContextFactoryExt;
 import org.logstash.plugins.factory.PluginMetricsFactoryExt;
@@ -250,6 +251,10 @@ public final class RubyUtil {
 
     private static final RubyModule PLUGINS_MODULE;
 
+//    private static final RubyClass SETTINGS_CLASS;
+
+    public static final RubyClass SETTING_CLASS;
+
     static {
         RUBY = Ruby.getGlobalRuntime();
         LOGSTASH_MODULE = RUBY.getOrCreateModule("LogStash");
@@ -340,6 +345,11 @@ public final class RubyUtil {
             "AbstractDeadLetterQueueWriter", RUBY.getObject(),
             ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR
         );
+
+//        SETTINGS_CLASS = LOGSTASH_MODULE.defineOrGetClassUnder("Settings", RUBY.getObject());
+        SETTING_CLASS = LOGSTASH_MODULE.defineClassUnder("Setting", RUBY.getObject(), SettingExt::new);
+        SETTING_CLASS.defineAnnotatedMethods(SettingExt.class);
+
         ABSTRACT_DLQ_WRITER_CLASS.defineAnnotatedMethods(AbstractDeadLetterQueueWriterExt.class);
         DUMMY_DLQ_WRITER_CLASS = UTIL_MODULE.defineClassUnder(
             "DummyDeadLetterQueueWriter", ABSTRACT_DLQ_WRITER_CLASS,
diff --git a/logstash-core/src/main/java/org/logstash/settings/Range.java b/logstash-core/src/main/java/org/logstash/settings/Range.java
new file mode 100644
index 00000000000..84f83ebad42
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/Range.java
@@ -0,0 +1,24 @@
+package org.logstash.settings;
+
+public class Range<T> {
+    private T min;
+    private T max;
+
+    public Range(T min, T max) {
+        this.min = min;
+        this.max = max;
+    }
+
+    public T getMin() {
+        return min;
+    }
+
+    public T getMax() {
+        return max;
+    }
+
+    @Override
+    public String toString() {
+        return "Range: [" + min + ".." + max + ']';
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/settings/Setting.java b/logstash-core/src/main/java/org/logstash/settings/Setting.java
new file mode 100644
index 00000000000..18d9a68c697
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/Setting.java
@@ -0,0 +1,136 @@
+package org.logstash.settings;
+
+import org.jruby.anno.JRubyMethod;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.Predicate;
+
+public class Setting {
+
+    private final String name;
+    final Class<? extends Object> klass;
+    protected Object defaultValue;
+    private boolean valueIsSet;
+    private Object value;
+    private final boolean strict;
+    private final Predicate<Object> validator;
+
+    Setting(String name, Class<? extends Object> klass, Object defaultValue, boolean strict) {
+        this(name, klass, defaultValue, strict, null);
+    }
+
+    Setting(String name, Class<? extends Object> klass, Object defaultValue, boolean strict, Predicate<Object> validator) {
+        this.name = name;
+        this.klass = klass;
+        this.strict = strict;
+        this.validator = validator;
+        this.value = null;
+        this.valueIsSet = false;
+        this.defaultValue = defaultValue;
+    }
+
+    void init() {
+        if (strict) {
+            validate(defaultValue);
+        }
+    }
+
+    // Copy constructor
+    Setting(Setting copy) {
+        this.name = copy.name;
+        this.klass = copy.klass;
+        this.defaultValue = copy.defaultValue;
+        this.strict = copy.strict;
+        this.validator = copy.validator;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Object getDefault() {
+        return defaultValue;
+    }
+
+    public Object getValue() {
+        if (valueIsSet) {
+            return value;
+        } else {
+            return defaultValue;
+        }
+    }
+
+    @JRubyMethod(name = "set?")
+    public boolean isValueIsSet() {
+        return valueIsSet;
+    }
+
+    public boolean isStrict() {
+        return strict;
+    }
+
+    public Object set(Object value) {
+        if (strict) {
+            validate(value);
+        }
+        this.value = value;
+        this.valueIsSet = true;
+        return value;
+    }
+
+    /**
+     * Used by Ruby subclasses to assign value without any validation
+     * */
+    protected void assignValue(Object value) {
+        this.value = value;
+        this.valueIsSet = true;
+    }
+
+    public void reset() {
+        value = null;
+        valueIsSet = false;
+    }
+
+    public Map<String, Object> toHash() {
+        Map<String, Object> map = new HashMap<>(5);
+        map.put("name", name);
+        map.put("klass", klass);
+        map.put("value", value);
+        map.put("value_is_set", valueIsSet);
+        map.put("default", defaultValue);
+        return map;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Setting setting = (Setting) o;
+        return valueIsSet == setting.valueIsSet &&
+                name.equals(setting.name) &&
+                klass.equals(setting.klass) &&
+                Objects.equals(defaultValue, setting.defaultValue) &&
+                Objects.equals(value, setting.value);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, klass, defaultValue, valueIsSet, value);
+    }
+
+    public void validateValue(Object value) {
+        validate(value);
+    }
+
+    protected void validate(Object input) {
+        if (!klass.isInstance(input)) {
+            throw new IllegalArgumentException("Setting \"" + name + "\" must be a " + klass + ". Received: " + input + " (" + input.getClass() + ")");
+        }
+        if (validator != null && !validator.test(input)) {
+            throw new IllegalArgumentException("Failed to validate setting \"" + name + "\" with value: " + input);
+        }
+    }
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/settings/SettingExt.java b/logstash-core/src/main/java/org/logstash/settings/SettingExt.java
new file mode 100644
index 00000000000..720c3c47c6f
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/SettingExt.java
@@ -0,0 +1,347 @@
+package org.logstash.settings;
+
+import org.jruby.Ruby;
+import org.jruby.RubyArray;
+import org.jruby.RubyBoolean;
+import org.jruby.RubyClass;
+import org.jruby.RubyFixnum;
+import org.jruby.RubyHash;
+import org.jruby.RubyModule;
+import org.jruby.RubyObject;
+import org.jruby.RubyRange;
+import org.jruby.RubyString;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.Visibility;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.jruby.runtime.builtin.InstanceVariables;
+import org.logstash.RubyUtil;
+import org.logstash.util.ByteValue;
+import org.logstash.util.CloudSettingAuth;
+import org.logstash.util.CloudSettingId;
+import org.logstash.util.ModulesSettingArray;
+import org.logstash.util.TimeValue;
+
+import java.util.ArrayList;
+import java.util.Locale;
+import java.util.Map;
+import java.util.function.Predicate;
+
+/**
+ * This class is a Ruby wrapper class over {@link Setting} to that is can be an easy drop-in replacement of Ruby implementation.
+ * */
+@JRubyClass(name = "Setting")
+public class SettingExt extends RubyObject {
+
+    private static final long serialVersionUID = -4283509226931417677L;
+
+    private ProxyJavaSetting setting;
+
+    private RubyModule klass;
+
+    public SettingExt(Ruby runtime, RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    /**
+     * This class is necessary to let Java code use the validate method provided by Ruby's settings.
+     * It's also used by SettingExt.validate to invoke the Java validate, without create an infinite loop call stack.
+     * */
+    private final class ProxyJavaSetting extends Setting {
+
+        private IRubyObject validateResult;
+
+        ProxyJavaSetting(String name, Class<?> klass, Object defaultValue, boolean strict) {
+            super(name, klass, defaultValue, strict);
+        }
+
+        ProxyJavaSetting(String name, Class<?> klass, Object defaultValue, boolean strict, Predicate<Object> validator) {
+            super(name, klass, defaultValue, strict, validator);
+        }
+
+        ProxyJavaSetting(Setting copy) {
+            super(copy);
+        }
+
+        @Override
+        protected void validate(Object input) {
+            // invoke validate on the subclass
+            final IRubyObject rubyInput = javaToRuby(RubyUtil.RUBY.getCurrentContext(), input);
+            // Ruby's validate result has to be returned as validateValue result
+            validateResult = SettingExt.this.callMethod(RubyUtil.RUBY.getCurrentContext(), "validate", rubyInput);
+        }
+
+        public void invokeJavaValidate(Object value) {
+            super.validate(value);
+        }
+
+        private void updateDefault(Object defaultValue) {
+            this.defaultValue = defaultValue;
+        }
+    }
+
+    @JRubyMethod(required = 2, optional = 2, visibility = Visibility.PRIVATE)
+    @SuppressWarnings("unchecked")
+    public SettingExt initialize(ThreadContext context, IRubyObject[] args, final Block block) {
+        createProxySetting(context, args, block);
+        setting.init();
+        return this;
+    }
+
+    @JRubyMethod(name = "coercible_init", required = 2, optional = 2, visibility = Visibility.PRIVATE)
+    @SuppressWarnings("unchecked")
+    public SettingExt coercibleInit(ThreadContext context, IRubyObject[] args, final Block block) {
+        createProxySetting(context, args, block);
+        return this;
+    }
+
+    private void createProxySetting(ThreadContext context, IRubyObject[] args, Block block) {
+        final RubyString name = (RubyString) args[0];
+        RubyModule clazz = (RubyModule) args[1];
+        RubyObject defaultValue = null;
+        if (args.length >= 3) {
+            defaultValue = (RubyObject) args[2];
+        }
+        boolean strict = true;
+        if (args.length >= 4) {
+            strict = args[3].toJava(Boolean.class);
+        }
+
+        klass = clazz;
+        final Class<?> javaClass = rubyClassToJava(clazz);
+        if (block.isGiven()) {
+            Predicate<Object> validator = o -> {
+                // cast Java instance to Ruby one
+                IRubyObject arg = javaToRuby(context, o);
+                return block.yield(context, arg).toJava(Boolean.class);
+            };
+            setting = new ProxyJavaSetting(name.asJavaString(), javaClass, convertToByClass(defaultValue), strict, validator);
+        } else {
+            final Object coercedValue = convertToByClass(defaultValue);
+            setting = new ProxyJavaSetting(name.asJavaString(), javaClass, coercedValue, strict);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private static IRubyObject javaToRuby(ThreadContext context, Object o) {
+        if (o == null) {
+            return context.nil;
+        }
+
+        if (o instanceof Integer) {
+            return RubyFixnum.newFixnum(context.runtime, ((Integer) o).longValue());
+        } else if (o instanceof Range) {
+            Range<Integer> r = (Range<Integer>) o;
+            return RubyRange.newRange(context, javaToRuby(context, r.getMin()), javaToRuby(context, r.getMax()),
+                    false);
+        } else if (o instanceof String) {
+            return RubyString.newString(context.runtime, (String) o);
+        } else if (o instanceof Boolean) {
+            return RubyBoolean.newBoolean(context, (Boolean) o);
+        } else if (o instanceof TimeValue) {
+            return RubyUtil.toRubyObject(o);
+        }
+        return RubyUtil.toRubyObject(o);
+    }
+
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    private Object convertToByClass(IRubyObject rubyValue) {
+        if (rubyValue instanceof org.jruby.RubyNil) {
+            return null;
+        }
+        if (rubyValue instanceof RubyArray) {
+            // RubyArray toJava converts to Object[] and not to ArrayList, so force it
+            final RubyArray castedValue = (RubyArray) rubyValue;
+            return new ArrayList((RubyArray) castedValue.toJava(rubyValue.getJavaClass()));
+        }
+        if (rubyValue instanceof RubyRange) {
+            final RubyRange range = (RubyRange) rubyValue;
+            return new Range(range.begin(RubyUtil.RUBY.getCurrentContext()).toJava(Integer.class),
+                    range.end(RubyUtil.RUBY.getCurrentContext()).toJava(Integer.class));
+        }
+        if (TimeValue.class.equals(rubyValue.getJavaClass()) && rubyValue instanceof RubyString) {
+            return TimeValue.fromValue(rubyValue.asJavaString());
+        }
+        if (rubyValue instanceof RubyString && ByteValue.isSizeMeasure(rubyValue.toJava(String.class))) {
+            return ByteValue.parse(rubyValue.toJava(String.class));
+        }
+        return rubyValue.toJava(rubyValue.getJavaClass());
+    }
+
+    private Class<?> rubyClassToJava(RubyModule rclass) {
+        switch(rclass.getName()) {
+            case "String":
+                return String.class;
+            case "Array":
+                return ArrayList.class;
+            case "Java::OrgLogstashUtil::ModulesSettingArray":
+                return ModulesSettingArray.class;
+            case "Java::OrgLogstashUtil::CloudSettingId":
+                return CloudSettingId.class;
+            case "Java::OrgLogstashUtil::CloudSettingAuth":
+                return CloudSettingAuth.class;
+            case "Java::OrgLogstashUtil::TimeValue":
+                return TimeValue.class;
+            case "Object":
+                return Object.class;
+            case "Integer":
+                // Ruby Integer is Java long
+                return Long.class;
+            case "Numeric":
+                return Number.class;
+            case "Range":
+                return Range.class;
+            case "Float":
+                return Float.class;
+            case "TrueClass":
+            case "FalseClass":
+                // this cover Boolean (Ruby doesn't have a class for it) and StringCoercible
+                return Boolean.class;
+            default:
+                throw new IllegalArgumentException("Cannot find matching Java class for: " + rclass.getName());
+        }
+    }
+
+    @JRubyMethod(name = "value")
+    public IRubyObject value(ThreadContext context) {
+        final Object javaValue = setting.getValue();
+        return javaToRuby(context, javaValue);
+    }
+
+    @JRubyMethod(name = "set?")
+    public RubyBoolean isSet() {
+        return RubyBoolean.newBoolean(RubyUtil.RUBY, setting.isValueIsSet());
+    }
+
+    @JRubyMethod(name = "strict?")
+    public RubyBoolean isStrict() {
+        return RubyBoolean.newBoolean(RubyUtil.RUBY, setting.isStrict());
+    }
+
+    @JRubyMethod(name = "assign_value", visibility = Visibility.PROTECTED)
+    public IRubyObject assignValue(ThreadContext context, IRubyObject value) {
+        final Object javaValue = convertToByClass(value);
+        setting.assignValue(javaValue);
+        return context.nil;
+    }
+
+    @JRubyMethod
+    public IRubyObject set(ThreadContext context, IRubyObject value) {
+        final Object old = setting.getValue();
+        final Object javaValue = convertToByClass(value);
+        setting.set(javaValue);
+        if (old == null) {
+            return context.nil;
+        }
+        return javaToRuby(context, old);
+    }
+
+    @JRubyMethod
+    public IRubyObject reset(ThreadContext context) {
+        setting.reset();
+        return context.nil;
+    }
+
+    @JRubyMethod(name = "to_hash")
+    public RubyHash toHash() {
+        final Map<String, Object> result = setting.toHash();
+        final RubyHash wrappedMap = new RubyHash(RubyUtil.RUBY);
+        wrappedMap.putAll(result);
+        return wrappedMap;
+    }
+
+    @JRubyMethod(name = "==")
+    public RubyBoolean equals(IRubyObject other) {
+        if (other instanceof SettingExt) {
+            final boolean result = setting.equals(((SettingExt) other).setting);
+            return RubyBoolean.newBoolean(RubyUtil.RUBY, result);
+        }
+        return RubyBoolean.newBoolean(RubyUtil.RUBY, false);
+    }
+
+    /**
+     * Invokes wrapped setting validate on the value retrieved by the setting itself.
+     * Both calls to validate and value methods start from leaf Ruby classes down to the Java Setting root class.
+     * */
+    @JRubyMethod(name = "validate_value")
+    public IRubyObject validateValue(ThreadContext context) {
+        final IRubyObject rubyValue = callMethod(RubyUtil.RUBY.getCurrentContext(), "value");
+        final Object javaValue = convertToByClass(rubyValue);
+        setting.validateValue(javaValue);
+        if (setting.validateResult != null) {
+            return setting.validateResult;
+        } else {
+            return context.nil;
+        }
+    }
+
+    @JRubyMethod(visibility = Visibility.PROTECTED)
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    public IRubyObject validate(ThreadContext context, IRubyObject input) {
+        try {
+            // avoid looping in call and stack overflow (ProxySetting.validate -> Ruby class.validate -> SettingExt.validate
+            // so use a bridge method (invokeJavaValidate) to invoke the original Setting.validate
+            setting.invokeJavaValidate(convertToByClass(input));
+        } catch (IllegalArgumentException ex) {
+            throw RubyUtil.RUBY.newArgumentError(ex.getMessage());
+        }
+        return context.nil;
+    }
+
+    @JRubyMethod(name = "name")
+    public IRubyObject getName() {
+        return RubyString.newString(RubyUtil.RUBY, setting.getName());
+    }
+
+    @JRubyMethod(name = "default")
+    public IRubyObject getDefault() {
+        return javaToRuby(RubyUtil.RUBY.getCurrentContext(), setting.getDefault());
+    }
+
+    @JRubyMethod(name = "set_default")
+    public IRubyObject setDefault(ThreadContext context, IRubyObject rubyDefaultValue) {
+        final Object javaDefaultValue = convertToByClass(rubyDefaultValue);
+        setting.updateDefault(javaDefaultValue);
+        return context.nil;
+    }
+
+    @JRubyMethod(name = "clone")
+    public IRubyObject rubyClone(ThreadContext context) {
+//        this doesn't work
+//        final SettingExt settingExt = new SettingExt(context.runtime, RubyUtil.SETTING_CLASS);
+//        settingExt.setting = new ProxyJavaSetting(setting);
+//        return settingExt;
+//        this works
+        try {
+            return (IRubyObject) this.clone();
+        } catch (CloneNotSupportedException ex) {
+            throw new RuntimeException(ex);
+        }
+    }
+
+    @JRubyMethod(name = "klass")
+    public IRubyObject getKlass(ThreadContext context) {
+        return klass;
+    }
+
+    @JRubyMethod
+    public IRubyObject logger(final ThreadContext context) {
+        final SettingExt self = this;
+        final InstanceVariables instanceVariables;
+        instanceVariables = self.getInstanceVariables();
+        IRubyObject logger = instanceVariables.getInstanceVariable("logger");
+        if (logger == null || logger.isNil()) {
+            final String loggerName = log4jName(self);
+            logger = RubyUtil.LOGGER.callMethod(context, "new", context.runtime.newString(loggerName));
+            instanceVariables.setInstanceVariable("logger", logger);
+        }
+        return logger;
+    }
+
+    private static String log4jName(final SettingExt self) {
+        String name = self.getMetaClass().getRealClass().getName();
+        return name.replace("::", ".").toLowerCase(Locale.ENGLISH);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/settings/StringSetting.java b/logstash-core/src/main/java/org/logstash/settings/StringSetting.java
new file mode 100644
index 00000000000..5b9269aedbb
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/settings/StringSetting.java
@@ -0,0 +1,63 @@
+package org.logstash.settings;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.function.Predicate;
+
+public class StringSetting extends Setting {
+
+    public static class Builder {
+        private final String name;
+        private Object defaultValue = null;
+        private boolean strict = true;
+        private List<String> possibleStrings = Collections.emptyList();
+
+        public Builder(String name) {
+            this.name = name;
+        }
+
+        public Builder defaultValue(Object defaultValue) {
+            this.defaultValue = defaultValue;
+            return this;
+        }
+
+        public Builder strict(boolean strict) {
+            this.strict = strict;
+            return this;
+        }
+
+        public Builder possibleStrings(List<String> possibleStrings) {
+            this.possibleStrings = possibleStrings;
+            return this;
+        }
+
+        public StringSetting build() {
+            return new StringSetting(name, defaultValue, strict, possibleStrings);
+        }
+    }
+
+    private List<String> possibleStrings;
+
+    private StringSetting(String name, Object defaultValue, boolean strict, List<String> possibleStrings) {
+        this(name, java.lang.String.class, defaultValue, strict);
+        this.possibleStrings = possibleStrings;
+    }
+
+    // inherited
+    public StringSetting(String name, Class<? extends Object> klass, Object defaultValue, boolean strict) {
+        super(name, klass, defaultValue, strict);
+    }
+
+    public StringSetting(String name, Class<? extends Object> klass, Object defaultValue, boolean strict, Predicate<Object> validator) {
+        super(name, klass, defaultValue, strict, validator);
+    }
+
+    @Override
+    protected void validate(Object value) {
+        super.validate(value);
+        if (!(possibleStrings.isEmpty() || possibleStrings.contains(value))) {
+            throw new IllegalArgumentException("Invalid value " + value + ". Options are: " + possibleStrings);
+        }
+    }
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/util/ByteValue.java b/logstash-core/src/main/java/org/logstash/util/ByteValue.java
new file mode 100644
index 00000000000..9a91ceb8865
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/util/ByteValue.java
@@ -0,0 +1,41 @@
+package org.logstash.util;
+
+public final class ByteValue {
+
+    public static int parse(String s) {
+        //TODO reimplement this in generic way
+        if (s.matches("(?:k|kb)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("kb"))) * 1024;
+        } else if (s.matches("(?:m|mb)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("mb"))) * 1024 * 1024;
+        } else if (s.matches("(?:g|gb)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("gb"))) * 1024 * 1024 * 1024;
+        } else if (s.matches("(?:t|tb)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("tb"))) * 1024 * 1024 * 1024 * 1024;
+        } else if (s.matches("(?:p|pb)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("pb"))) * 1024 * 1024 * 1024 * 1024 * 1024;
+        } else if (s.matches("(?:b)$")) {
+            return Integer.parseInt(s.substring(0, s.indexOf("b")));
+        } else {
+            throw new IllegalArgumentException("Unknown bytes value '" + s + "'");
+        }
+    }
+
+    public static boolean isSizeMeasure(String s) {
+        if (s.matches("(?:k|kb)$")) {
+            return true;
+        } else if (s.matches("(?:m|mb)$")) {
+            return true;
+        } else if (s.matches("(?:g|gb)$")) {
+            return true;
+        } else if (s.matches("(?:t|tb)$")) {
+            return true;
+        } else if (s.matches("(?:p|pb)$")) {
+            return true;
+        } else if (s.matches("(?:b)$")) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/util/CloudSettingAuth.java b/logstash-core/src/main/java/org/logstash/util/CloudSettingAuth.java
index c251bf41554..0e639332197 100644
--- a/logstash-core/src/main/java/org/logstash/util/CloudSettingAuth.java
+++ b/logstash-core/src/main/java/org/logstash/util/CloudSettingAuth.java
@@ -59,6 +59,6 @@ public Password getPassword() {
 
     @Override
     public String toString() {
-        return String.join(":", username, password.toString());
+        return String.join(":", username, password != null ? password.toString() : "<no password defined>");
     }
 }
