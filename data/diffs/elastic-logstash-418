diff --git a/lib/logstash/filters/translate.rb b/lib/logstash/filters/translate.rb
index 5edd7a4aee5..fa101f1473d 100644
--- a/lib/logstash/filters/translate.rb
+++ b/lib/logstash/filters/translate.rb
@@ -3,69 +3,114 @@
 
 # Originally written to translate HTTP response codes 
 # but turned into a general translation tool which uses
-# .yaml files as a dictionary.
+# configured has or/and .yaml files as a dictionary.
 # response codes in default dictionary were scraped from 
 # 'gem install cheat; cheat status_codes'
+#
+# Alternatively for simple string search and replacements for just a few values
+# use the gsub function of the mutate filter.
 
 class LogStash::Filters::Translate < LogStash::Filters::Base
   config_name "translate"
   plugin_status "experimental"
 
-
   # The field containing a response code If this field is an
   # array, only the first value will be used.
   config :field, :validate => :string, :required => true
 
+  # In case dstination field already exists should we skip translation(default) or override it with new translation
+  config :override, :validate => :boolean, :default => false
+
+  # Dictionary to use for translation.
+  # Example:
+  #
+  #     filter {
+  #       %PLUGIN% {
+  #         dictionary => [ "100", "Continue",
+  #                         "101", "Switching Protocols",
+  #                         "200", "OK",
+  #                         "201", "Created",
+  #                         "202", "Accepted" ]
+  #       }
+  #     }
+  config :dictionary, :validate => :hash,  :default => {}
+
   # name with full path of external dictionary file.    
-  # format of the table should be a YAML file. 
+  # format of the table should be a YAML file which will be merged with the @dictionary.
   # make sure you encase any integer based keys in quotes.
-  # For simple string search and replacements for just a few values
-  # use the gsub function of the mutate filter.
-  config :dictionary_path, :validate => :path, :required => true
+  config :dictionary_path, :validate => :path
 
-  # The destination you wish to populate with the response code.    
-  # default is http_response_code.  set to the same value as source
-  # if you want to do a substitution.
+  # The destination field you wish to populate with the translation code.
+  # default is "translation".
+  # Set to the same value as source if you want to do a substitution, in this case filter will allways succeed.
   config :destination, :validate => :string, :default => "translation"
 
-  # set to false if you want to match multiple terms.   
+  # set to false if you want to match multiple terms
   # a large dictionary could get expensive if set to false.
   config :exact, :validate => :boolean, :default => true
 
+  # treat dictionary keys as regular expressions to match against, used only then @exact enabled.
+  config :regex, :validate => :boolean, :default => false
 
+  # Incase no translation was made add default translation string
+  config :fallback, :validate => :string
 
   public
   def register
-    if File.exists?(@dictionary_path)
+    if @dictionary_path
+      raise "#{self.class.name}: dictionary file #{@dictionary_path} does not exists" unless File.exists?(@dictionary_path)
       begin
-        @dictionary = YAML.load_file(@dictionary_path)
+        @dictionary.merge!(YAML.load_file(@dictionary_path))
       rescue Exception => e
-        raise "Bad Syntax in dictionary file" 
+        raise "#{self.class.name}: Bad Syntax in dictionary file #{@dictionary_path}"
       end
-    end # if File.exists?
-    @logger.info("Dictionary - ", :dictionary => @dictionary)
+    end
+    
+    @logger.debug? and @logger.debug("#{self.class.name}: Dictionary - ", :dictionary => @dictionary)
     if @exact
-      @logger.info("Dictionary translation method - Exact")
-    else 
-      @logger.info("Dictionary translation method - Fuzzy")
-    end # if @exact
+      @logger.debug? and @logger.debug("#{self.class.name}: Dictionary translation method - Exact")
+    else
+      @logger.debug? and @logger.debug("#{self.class.name}: Dictionary translation method - Fuzzy")
+    end
   end # def register
 
   public
   def filter(event)
     return unless filter?(event)
-      begin
-        source = event[@field]
-        source = source.first if source.is_a? Array # if array,  just use first value 
-        source = source.to_s # make sure its a string.  Is this really needed?
-        if @exact
-          translation = @dictionary[source] if @dictionary.include?(source)
-        else 
-          translation = source.gsub(Regexp.union(@dictionary.keys), @dictionary)
-        end # if @exact
-      rescue Exception => e
-          @logger.error("Something went wrong when attempting to translate from dictionary", :exception => e, :field => @field, :event => event)
+
+    return unless event.include?(@field) # Skip translation in case event does not have @event field.
+    return if event.include?(@destination) and not @override # Skip translation in case @destination field already exists and @override is disabled.
+
+    begin
+      #If source field is array use first value and make sure source value is string
+      source = event[@field].is_a?(Array) ? event[@field].first.to_s : event[@field].to_s
+      matched = false
+      if @exact
+        if @regex
+          key = @dictionary.keys.detect{|k| source.match(Regexp.new(k))}
+          if key
+            event[@destination] = @dictionary[key]
+            matched = true
+          end
+        elsif @dictionary.include?(source)
+          event[@destination] = @dictionary[source]
+          matched = true
+        end
+      else 
+        translation = source.gsub(Regexp.union(@dictionary.keys), @dictionary)
+        if source != translation
+          event[@destination] = translation
+          matched = true
+        end
+      end
+
+      if not matched and @fallback
+        event[@destination] = @fallback
+        matched = true
       end
-      event[@destination] = translation
+      filter_matched(event) if matched or @field == @destination
+    rescue Exception => e
+      @logger.error("Something went wrong when attempting to translate from dictionary", :exception => e, :field => @field, :event => event)
+    end
   end # def filter
 end # class LogStash::Filters::Translate
diff --git a/spec/filters/translate.rb b/spec/filters/translate.rb
new file mode 100644
index 00000000000..6aaaa8bfbbd
--- /dev/null
+++ b/spec/filters/translate.rb
@@ -0,0 +1,76 @@
+require "test_utils"
+require "logstash/filters/translate"
+
+describe LogStash::Filters::Translate do
+  extend LogStash::RSpec
+
+  describe "exact translation" do
+    config <<-CONFIG
+      filter {
+        translate {
+          field       => "status"
+          destination => "translation"
+          dictionary  => [ "200", "OK",
+                           "300", "Redirect",
+                           "400", "Client Error",
+                           "500", "Server Error" ]
+          exact       => true
+          regex       => false
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {
+      "status" => 200
+    } do
+      insist { subject["translation"] } == "OK"
+    end
+  end
+
+  describe "multi translation" do
+    config <<-CONFIG
+      filter {
+        translate {
+          field       => "status"
+          destination => "translation"
+          dictionary  => [ "200", "OK",
+                           "300", "Redirect",
+                           "400", "Client Error",
+                          "500", "Server Error" ]
+          exact       => false
+          regex       => false
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {
+     "status" => "200 & 500"
+    } do
+      insist { subject["translation"] } == "OK & Server Error"
+    end
+  end
+
+  describe "regex translation" do
+    config <<-CONFIG
+      filter {
+        translate {
+          field       => "status"
+          destination => "translation"
+          dictionary  => [ "^2[0-9][0-9]$", "OK",
+                           "^3[0-9][0-9]$", "Redirect",
+                           "^4[0-9][0-9]$", "Client Error",
+                           "^5[0-9][0-9]$", "Server Error" ]
+          exact       => true
+          regex       => true
+        }
+      }
+    CONFIG
+
+    sample "@fields" => {
+      "status" => "200"
+    } do
+      insist { subject["translation"] } == "OK"
+    end
+  end
+
+end
\ No newline at end of file
