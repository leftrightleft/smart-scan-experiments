diff --git a/docs/asciidoc/static/configuration.asciidoc b/docs/asciidoc/static/configuration.asciidoc
index 28c9965064d..d06fc98d8cb 100644
--- a/docs/asciidoc/static/configuration.asciidoc
+++ b/docs/asciidoc/static/configuration.asciidoc
@@ -48,7 +48,7 @@ output {
 }
 ----------------------------------
 
-Each section contains the configuration options for one or more plugins. If you specify 
+Each section contains the configuration options for one or more plugins. If you specify
 multiple filters, they are applied in the order of their appearance in the configuration file.
 
 
@@ -56,7 +56,7 @@ multiple filters, they are applied in the order of their appearance in the confi
 [[plugin_configuration]]
 === Plugins
 
-The configuration of a plugin consists of the plugin name followed 
+The configuration of a plugin consists of the plugin name followed
 by a block of settings for that plugin. For example, this input section configures two file inputs:
 
 [source,js]
@@ -74,7 +74,7 @@ input {
 }
 ----------------------------------
 
-In this example, two settings are configured for each of the file inputs: 'path' and 'type'. 
+In this example, two settings are configured for each of the file inputs: 'path' and 'type'.
 
 The settings you can configure vary according to the plugin type. For information about each plugin, see <<input-plugins,Input Plugins>>, <<output-plugins, Output Plugins>>, <<filter-plugins,Filter Plugins>>, and <<codec-plugins,Codec Plugins>>.
 
@@ -121,10 +121,10 @@ Example:
 [float]
 ==== Bytes
 
-A bytes field is a string field that represents a valid unit of bytes. It is a 
+A bytes field is a string field that represents a valid unit of bytes. It is a
 convenient way to declare specific sizes in your plugin options. Both SI (k M G T P E Z Y)
-and Binary (Ki Mi Gi Ti Pi Ei Zi Yi) units are supported. Binary units are in 
-base-1024 and SI units are in base-1000. This field is case-insensitive 
+and Binary (Ki Mi Gi Ti Pi Ei Zi Yi) units are supported. Binary units are in
+base-1024 and SI units are in base-1000. This field is case-insensitive
 and accepts space between the value and the unit. If no unit is specified, the integer string
 represents the number of bytes.
 
@@ -160,8 +160,8 @@ Example:
 [float]
 ==== Hash
 
-A hash is a collection of key value pairs specified in the format `"field1" => "value1"`. 
-Note that mutliple key value entries are separated by spaces rather than commas. 
+A hash is a collection of key value pairs specified in the format `"field1" => "value1"`.
+Note that mutliple key value entries are separated by spaces rather than commas.
 
 Example:
 
@@ -240,24 +240,42 @@ input { # comments can appear at the end of a line, too
 }
 ----------------------------------
 
-[[logstash-config-field-references]]
 [float]
-=== Field References
+[[event-dependent-configuration]]
+=== Event Dependent Configuration
+
+The logstash agent is a processing pipeline with 3 stages: inputs -> filters ->
+outputs. Inputs generate events, filters modify them, outputs ship them
+elsewhere.
+
+All events have properties. For example, an apache access log would have things
+like status code (200, 404), request path ("/", "index.html"), HTTP verb
+(GET, POST), client IP address, etc. Logstash calls these properties "fields."
+
+Some of the configuration options in Logstash require the existence of fields in
+order to function.  Because inputs generate events, there are no fields to
+evaluate within the input block--they do not exist yet!
 
-All events have properties. For example, an apache access log has things
-like status code (200, 404), request path ("/", "index.html"), HTTP verb (GET, POST),
-and client IP address. Logstash calls these properties fields.
+Because of their dependency on events and fields, the following configuration
+options will only work within filter and output blocks.
+
+IMPORTANT: Field references, sprintf format and conditionals, described below,
+will not work in an input block.
+
+[float]
+[[logstash-config-field-references]]
+==== Field References
 
 It is often useful to be able to refer to a field by name. To do this,
 you can use the Logstash field reference syntax.
 
-The syntax to access a field is `[fieldname]`. If you are referring to a 
+The syntax to access a field is `[fieldname]`. If you are referring to a
 **top-level field**, you can omit the `[]` and simply use `fieldname`.
 To refer to a **nested field**, you specify
 the full path to that field: `[top-level field][nested field]`.
 
-For example, the following event has five top-level fields (agent, ip, request, response, 
-ua) and three nested fields (status, bytes, os). 
+For example, the following event has five top-level fields (agent, ip, request, response,
+ua) and three nested fields (status, bytes, os).
 
 [source,js]
 ----------------------------------
@@ -280,6 +298,7 @@ To reference the `os` field, you specify `[ua][os]`. To reference a top-level
 field such as `request`, you can simply specify the field name.
 
 [float]
+[[sprintf]]
 ==== sprintf format
 
 The field reference format is also used in what Logstash calls 'sprintf format'. This format
@@ -312,7 +331,7 @@ output {
 
 [float]
 [[conditionals]]
-=== Conditionals
+==== Conditionals
 
 Sometimes you only want to filter or output an event under
 certain conditions. For that, you can use a conditional.
@@ -351,7 +370,7 @@ The supported unary operators are:
 * !
 
 Expressions can be long and complex. Expressions can contain other expressions,
-you can negate expressions with `!`, and you can group them with parentheses `(...)`. 
+you can negate expressions with `!`, and you can group them with parentheses `(...)`.
 
 For example, the following conditional uses the mutate filter to remove the field `secret` if the field
 `action` has a value of `login`:
@@ -599,9 +618,9 @@ Similarly, you can use conditionals to direct events to particular outputs. For
 * record all status code hits via statsd
 
 To tell nagios about any http event that has a 5xx status code, you
-first need to check the value of the `type` field. If it's apache, then you can 
-check to see if the `status` field contains a 5xx error. If it is, send it to nagios. If it isn't 
-a 5xx error, check to see if the `status` field contains a 4xx error. If so, send it to Elasticsearch. 
+first need to check the value of the `type` field. If it's apache, then you can
+check to see if the `status` field contains a 5xx error. If it is, send it to nagios. If it isn't
+a 5xx error, check to see if the `status` field contains a 4xx error. If so, send it to Elasticsearch.
 Finally, send all apache status codes to statsd no matter what the `status` field contains:
 
 [source,js]
diff --git a/docs/configuration.md b/docs/configuration.md
index 77696213b9c..6f524c5b01f 100644
--- a/docs/configuration.md
+++ b/docs/configuration.md
@@ -32,7 +32,8 @@ configuration file.
 
 ## Comments
 
-Comments are the same as in ruby, perl, and python. Starts with a '#' character. Example:
+Comments are the same as in ruby, perl, and python. Starts with a '#' character.
+Example:
 
     # this is a comment
 
@@ -75,7 +76,8 @@ etc.
 
 ### <a name="boolean"></a>Boolean
 
-A boolean must be either `true` or `false`. Note the lack of quotes around `true` and `false`.
+A boolean must be either `true` or `false`. Note the lack of quotes around
+`true` and `false`.
 
 Examples:
 
@@ -113,7 +115,7 @@ The above makes 'path' a 3-element array including all 3 strings.
 
 ### <a name="hash"></a>Hash
 
-A hash is basically the same syntax as Ruby hashes. 
+A hash is basically the same syntax as Ruby hashes.
 The key and value are simply pairs, such as:
 
     match => {
@@ -122,11 +124,27 @@ The key and value are simply pairs, such as:
       ...
     }
 
-## <a name="fieldreferences"></a>Field References
+## <a name="eventdependent"></a>Event Dependent Configuration
+
+The logstash agent is a processing pipeline with 3 stages: inputs -> filters ->
+outputs. Inputs generate events, filters modify them, outputs ship them
+elsewhere.
 
 All events have properties. For example, an apache access log would have things
-like status code (200, 404), request path ("/", "index.html"), HTTP verb (GET, POST),
-client IP address, etc. Logstash calls these properties "fields." 
+like status code (200, 404), request path ("/", "index.html"), HTTP verb
+(GET, POST), client IP address, etc. Logstash calls these properties "fields."
+
+Some of the configuration options in Logstash require the existence of fields in
+order to function.  Because inputs generate events, there are no fields to
+evaluate within the input block--they do not exist yet!  
+
+Because of their dependency on events and fields, the following configuration
+options will only work within filter and output blocks.
+
+**IMPORTANT: Field references, sprintf format and conditionals, described below,
+will not work in an input block.
+
+### <a name="fieldreferences"></a>Field References
 
 In many cases, it is useful to be able to refer to a field by name. To do this,
 you can use the Logstash field reference syntax.
@@ -152,7 +170,7 @@ simply say `fieldname`.
 - in the case of **nested fields**, like the "os" field above, you need
 the full path to that field: `[ua][os]`.
 
-## <a name="sprintf"></a>sprintf format
+### <a name="sprintf"></a>sprintf format
 
 This syntax is also used in what Logstash calls 'sprintf format'. This format
 allows you to refer to field values from within other strings. For example, the
@@ -165,7 +183,9 @@ apache logs by status code:
       }
     }
 
-You can also do time formatting in this sprintf format. Instead of specifying a field name, use the `+FORMAT` syntax where `FORMAT` is a [time format](http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html). 
+You can also do time formatting in this sprintf format. Instead of specifying a
+field name, use the `+FORMAT` syntax where `FORMAT` is a
+[time format](http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html).
 
 For example, if you want to use the file output to write to logs based on the
 hour and the 'type' field:
@@ -176,7 +196,7 @@ hour and the 'type' field:
       }
     }
 
-## <a name="conditionals"></a>Conditionals
+### <a name="conditionals"></a>Conditionals
 
 Sometimes you only want a filter or output to process an event under
 certain conditions. For that, you'll want to use a conditional!
@@ -199,8 +219,8 @@ What's an expression? Comparison tests, boolean logic, etc!
 
 The following comparison operators  are supported:
 
-* equality, etc: ==,  !=,  <,  >,  <=,  >= 
-* regexp: =~, !~ 
+* equality, etc: ==,  !=,  <,  >,  <=,  >=
+* regexp: =~, !~
 * inclusion: in, not in
 
 The following boolean operators are supported:
