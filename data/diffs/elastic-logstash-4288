diff --git a/integration/plugin_manager/logstash_spec.rb b/integration/plugin_manager/logstash_spec.rb
index 8c2f4c97d73..f7047e986a2 100644
--- a/integration/plugin_manager/logstash_spec.rb
+++ b/integration/plugin_manager/logstash_spec.rb
@@ -1,10 +1,10 @@
 # Encoding: utf-8
 require_relative "../spec_helper"
-require_relative "../../lib/logstash/version"
+require_relative "../../logstash-core/lib/logstash/version"
 
 describe "bin/logstash" do
   it "returns the logstash version" do
-    result = command("bin/logstash version")
+    result = command("bin/logstash --version")
     expect(result.exit_status).to eq(0)
     expect(result.stdout).to match(/^logstash\s#{LOGSTASH_VERSION}/)
   end
diff --git a/integration/plugin_manager/plugin_uninstall_spec.rb b/integration/plugin_manager/plugin_uninstall_spec.rb
index 87f2fd747e2..876e42b33da 100644
--- a/integration/plugin_manager/plugin_uninstall_spec.rb
+++ b/integration/plugin_manager/plugin_uninstall_spec.rb
@@ -20,5 +20,12 @@
       expect(result.stdout).to match(/^Uninstalling logstash-filter-ruby/)
       expect(result.exit_status).to eq(0)
     end
+
+    it "fails if has dependencies" do
+      result  = command("bin/plugin uninstall logstash-input-tcp")
+      message = "logstash-input-tcp is a dependency of logstash-input-graphite."
+      expect(result.stderr).to match(/ERROR: Uninstall Aborted, message: #{message}/)
+      expect(result.exit_status).to eq(1)
+    end
   end
 end
diff --git a/integration/spec_helper.rb b/integration/spec_helper.rb
index 0076b8b2cdf..f4cddfa713d 100644
--- a/integration/spec_helper.rb
+++ b/integration/spec_helper.rb
@@ -1,6 +1,6 @@
 # encoding: utf-8
 require_relative "support/integration_test_helpers"
-require_relative "../lib/logstash/environment"
+require_relative "../logstash-core/lib/logstash/environment"
 require "fileutils"
 
 if LogStash::Environment.windows?
diff --git a/lib/pluginmanager/command.rb b/lib/pluginmanager/command.rb
index 4adc46544c1..1e28d201cf2 100644
--- a/lib/pluginmanager/command.rb
+++ b/lib/pluginmanager/command.rb
@@ -4,6 +4,10 @@ def gemfile
     @gemfile ||= LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, 'r+')).load
   end
 
+  def gemfilelock
+    @gemfilelock ||= LogStash::GemfileLock.parse(Bundler.default_lockfile)
+  end
+
   # If set in debug mode we will raise an exception and display the stacktrace
   def report_exception(readable_message, exception)
     if ENV["DEBUG"]
diff --git a/lib/pluginmanager/gemfilelock.rb b/lib/pluginmanager/gemfilelock.rb
new file mode 100644
index 00000000000..23b81f4d4b4
--- /dev/null
+++ b/lib/pluginmanager/gemfilelock.rb
@@ -0,0 +1,164 @@
+# encoding: utf-8
+module LogStash
+  class GemfileLock
+
+    HEADERS = [ "PATH", "GEM", "DEPENDENCIES" ]
+
+    attr_reader :lock_file, :dependency_graph
+
+    def initialize(lock_file)
+      @lock_file        = lock_file
+      @dependency_graph = DependencyGraph.new(lock_file)
+    end
+
+    def self.parse(file)
+      lock_file = []
+      File.open(file, "r") do |file|
+        parsing, specs  = false, false
+        section = {}
+        file.each_line do |line|
+          if HEADERS.include?(line.strip)
+            parsing = true
+            section = { type: line.strip, remote: "", specs: [] }
+          elsif line == "\n"
+            parsing, specs = false, false
+            lock_file << section
+          elsif parsing
+            line = line[2..-1]
+            if line.start_with?("remote:")
+              remote = line.gsub("remote:","").strip
+              section[:remote] << remote
+            elsif line.start_with?("specs:")
+              specs = true
+            else
+              line = line[2..-1].rstrip if section[:type] != "DEPENDENCIES"
+              if !line[0..1].strip.empty?
+                section[:specs] << { :gem => Gems.parse(line), :deps => [] }
+              else
+                # dependency
+                section[:specs].last[:deps] << Gems.parse(line.strip)
+              end
+            end
+          end
+        end
+        if section[:type] == "DEPENDENCIES" && !section[:specs].empty?
+          lock_file << section
+        end
+      end
+      self.new(lock_file)
+    end
+
+    def find_dependencies(plugin)
+      dependency_graph.index[plugin].in.map { |e| e.from }
+    end
+
+    def has_dependencies?(plugin)
+      entry = dependency_graph.index[plugin]
+      !entry.nil? && !entry.in.empty?
+    end
+
+  end
+
+  class DependencyGraph
+
+    attr_reader :index, :dependencies
+
+    class Node
+      attr_reader :gem, :edges
+
+      def initialize(gem)
+        @gem       = gem
+        @edges = []
+      end
+
+      def add_edge(edge, direction)
+        @edges << { :edge => edge, :dir => direction }
+      end
+
+      def out
+        @edges.select { |edge| edge[:dir] == :out }.map { |e| e[:edge] }
+      end
+
+      def in
+        @edges.select { |edge| edge[:dir] == :in }.map { |e| e[:edge] }
+      end
+
+      def to_s
+        "#{gem}"
+      end
+    end
+
+    class Edge
+      attr_reader :from, :to
+      def initialize(from, to)
+        @from = from
+        @to   = to
+      end
+
+      def to_s
+        "#{from} --> #{to}"
+      end
+    end
+
+    def initialize(lock_file)
+      @lock_file    = lock_file
+      @dependencies = extract_dependencies(lock_file)
+      @dag          = build_dag(lock_file)
+    end
+
+    def build_dag(lock_file)
+      @index = Hash.new
+      gems = lock_file.select { |section| section[:type] == "GEM" }.first
+      gems[:specs].each do |spec|
+        gem  = spec[:gem]
+        next unless dependencies.include?(gem.name)
+        node = fetch_or_create_node(gem.name)
+        spec[:deps].each do |dep|
+          next unless dependencies.include?(dep.name)
+          dep_node = fetch_or_create_node(dep.name)
+          node.add_edge(Edge.new(node, dep_node), :out)
+          dep_node.add_edge(Edge.new(node, dep_node), :in)
+        end
+      end
+    end
+
+    def extract_dependencies(lock_file)
+      dependencies = lock_file.select { |section| section[:type] == "DEPENDENCIES" }.first
+      dependencies[:specs].map do |spec|
+        spec[:gem].name
+      end
+    end
+
+    private
+
+    def fetch_or_create_node(name)
+      return index[name] if index[name]
+      index[name] = Node.new(name)
+      index[name]
+    end
+
+  end
+
+  class Gems
+
+    attr_reader :name, :requirements
+
+    def initialize(name, requirements=[])
+      @name = name
+      @requirements = requirements
+    end
+
+    def self.parse(definition)
+      parts = definition.split(" ")
+      name  = parts[0]
+      requirements = parts[1..-1].join(' ').gsub(/\(|\)/,"").split(",")
+      self.new(name, requirements)
+    end
+
+    def to_s
+      "#{@name} #{@requirements}"
+    end
+
+  end
+
+end
diff --git a/lib/pluginmanager/main.rb b/lib/pluginmanager/main.rb
index e14a131c84e..976662d635a 100644
--- a/lib/pluginmanager/main.rb
+++ b/lib/pluginmanager/main.rb
@@ -14,6 +14,7 @@ module PluginManager
 require "clamp"
 require "pluginmanager/util"
 require "pluginmanager/gemfile"
+require "pluginmanager/gemfilelock"
 require "pluginmanager/install"
 require "pluginmanager/uninstall"
 require "pluginmanager/list"
diff --git a/lib/pluginmanager/uninstall.rb b/lib/pluginmanager/uninstall.rb
index e7598a4ebc9..cacaa91f7d0 100644
--- a/lib/pluginmanager/uninstall.rb
+++ b/lib/pluginmanager/uninstall.rb
@@ -19,6 +19,11 @@ def execute
     # it is not possible to uninstall a dependency not listed in the Gemfile, for example a dependent codec
     signal_error("This plugin has not been previously installed, aborting") unless LogStash::PluginManager.installed_plugin?(plugin, gemfile)
 
+    if gemfilelock.has_dependencies?(plugin)
+      dependencies = gemfilelock.find_dependencies(plugin)
+      signal_error("#{plugin} is a dependency of #{dependencies.join(',')}.")
+    end
+
     # since we previously did a gemfile.find(plugin) there is no reason why
     # remove would not work (return nil) here
     if gemfile.remove(plugin)
