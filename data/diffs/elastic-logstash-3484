diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
index e6ded156016..2a0f11820f6 100644
--- a/Gemfile.jruby-1.9.lock
+++ b/Gemfile.jruby-1.9.lock
@@ -5,11 +5,13 @@ PATH
       cabin (~> 0.7.0)
       clamp (~> 0.6.5)
       filesize (= 0.0.4)
+      gems (~> 0.8.3)
       i18n (= 0.6.9)
       jrjackson (~> 0.2.8)
       minitar (~> 0.5.4)
       pry (~> 0.10.1)
       stud (~> 0.0.19)
+      thread_safe (~> 0.3.5)
       treetop (< 1.5.0)
 
 GEM
@@ -114,6 +116,7 @@ GEM
     term-ansicolor (1.3.0)
       tins (~> 1.0)
     thor (0.19.1)
+    thread_safe (0.3.5-java)
     tins (1.5.1)
     treetop (1.4.15)
       polyglot
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 44a3bfe079b..831f5fb806d 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -33,7 +33,7 @@ class LogStash::Outputs::Base < LogStash::Plugin
   # Note that this setting may not be useful for all outputs.
   config :workers, :validate => :number, :default => 1
 
-  attr_reader :worker_plugins
+  attr_reader :worker_plugins, :worker_queue
 
   public
   def workers_not_supported(message=nil)
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index b6b1a30f4d3..0089e3f1688 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -8,6 +8,7 @@
 require "logstash/filters/base"
 require "logstash/inputs/base"
 require "logstash/outputs/base"
+require "logstash/util/reporter"
 
 class LogStash::Pipeline
 
@@ -252,6 +253,8 @@ def outputworker
   #
   # This method is intended to be called from another thread
   def shutdown
+    InflightEventsReporter.logger = @logger
+    InflightEventsReporter.start(@input_to_filter, @filter_to_output, @outputs)
     @input_threads.each do |thread|
       # Interrupt all inputs
       @logger.info("Sending shutdown signal to input thread", :thread => thread)
diff --git a/lib/logstash/util/reporter.rb b/lib/logstash/util/reporter.rb
new file mode 100644
index 00000000000..7ea5f260ebf
--- /dev/null
+++ b/lib/logstash/util/reporter.rb
@@ -0,0 +1,27 @@
+class InflightEventsReporter
+  def self.logger=(logger)
+    @logger = logger
+  end
+
+  def self.start(input_to_filter, filter_to_output, outputs)
+    Thread.new do
+      loop do
+        sleep 5
+        report(input_to_filter, filter_to_output, outputs)
+      end
+    end
+  end
+
+  def self.report(input_to_filter, filter_to_output, outputs)
+    report = {
+      "input_to_filter" => input_to_filter.size,
+      "filter_to_output" => filter_to_output.size,
+      "outputs" => []
+    }
+    outputs.each do |output|
+      next unless output.worker_queue && output.worker_queue.size > 0
+      report["outputs"] << [output.inspect, output.worker_queue.size]
+    end
+    @logger.warn ["INFLIGHT_EVENTS_REPORT", Time.now.iso8601, report]
+  end
+end
