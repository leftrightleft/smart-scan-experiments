diff --git a/conf/logstash.yml b/conf/logstash.yml
new file mode 100644
index 00000000000..615e6c06f7e
--- /dev/null
+++ b/conf/logstash.yml
@@ -0,0 +1,47 @@
+# Settings file in YAML
+#
+# Settings can be specified either in hierarchical form, e.g.:
+#
+#   pipeline:
+#     batch:
+#       size: 125
+#       delay: 5
+#
+# Or as flat keys:
+#
+#   pipeline.batch.size: 125
+#   pipeline.batch.delay: 5
+#
+# ------------  Node identity ------------
+#
+# Use a descriptive name for the node:
+#
+# node.name: test
+#
+# If omitted the node name will default to the machine's host name
+#
+# ------------ Pipeline Settings --------------
+#
+# Set the number of workers that will, in parallel, execute the filters+outputs
+# stage of the pipeline.
+#
+# This defaults to half the number of the host's CPU cores.
+#
+# pipeline.workers: 2
+#
+# How many events to retrieve from inputs before sending to filters+workers
+#
+# pipeline.batch.size: 125
+#
+# How long to wait before dispatching an undersized batch to filters+workers
+# Value is in seconds.
+#
+# pipeline.batch.delay: 5
+#
+# Force Logstash to exit during shutdown even if there are still inflight
+# events in memory. By default, logstash will refuse to quit until all
+# received events have been pushed to the outputs.
+#
+# WARNING: enabling this can lead to data loss during shutdown
+#
+# pipeline.unsafe_shutdown: false
diff --git a/docs/static/command-line-flags.asciidoc b/docs/static/command-line-flags.asciidoc
index 881face8027..0e52a3930de 100644
--- a/docs/static/command-line-flags.asciidoc
+++ b/docs/static/command-line-flags.asciidoc
@@ -5,30 +5,30 @@ Logstash has the following flags. You can use the `--help` flag to display this
 
 [source,shell]
 ----------------------------------
--f, --config CONFIGFILE
+-f, --config.path CONFIGFILE
  Load the Logstash config from a specific file, directory, or a wildcard. If
  given a directory or wildcard, config files will be read from the directory in
  alphabetical order.
 
--e CONFIGSTRING
+-e, --config.string CONFIGSTRING
  Use the given string as the configuration data. Same syntax as the config file.
  If not input is specified, 'stdin { type => stdin }' is default. If no output
  is specified, 'stdout { codec => rubydebug }}' is default.
 
--w, --filterworkers COUNT
+-w, --pipeline.workers COUNT
  Sets the number of pipeline workers (threads) to run for filter and output
  processing (default: number of cores).
  If you find that events are backing up, or that the CPU is not saturated, consider increasing
  this number to better utilize machine processing power.
 
--b, --pipeline-batch-size SIZE
+-b, --pipeline.batch.size SIZE
  This parameter defines the maximum number of events an individual worker thread will collect
  before attempting to execute its filters and outputs. Default is 125 events.
  Larger batch sizes are generally more efficient, but come at the cost of increased memory
  overhead. You may have to increase the JVM heap size by setting the `LS_HEAP_SIZE`
  variable to effectively use the option.
 
--u, --pipeline-batch-delay DELAY_IN_MS
+-u, --pipeline.batch.delay DELAY_IN_MS
  When creating pipeline event batches, how long to wait while polling for the next event.
  Default is 5ms.
 
@@ -44,13 +44,13 @@ Logstash has the following flags. You can use the `--help` flag to display this
 -V, --version
   Display the version of Logstash.
 
--p, --pluginpath
+-p, --plugin.path
   A path of where to find plugins. This flag can be given multiple times to include
   multiple paths. Plugins are expected to be in a specific directory hierarchy:
   'PATH/logstash/TYPE/NAME.rb' where TYPE is 'inputs' 'filters', 'outputs' or 'codecs'
   and NAME is the name of the plugin.
 
--t, --configtest
+-t, --config.test
   Checks configuration and then exit. Note that grok patterns are not checked for
   correctness with this flag.
   Logstash can read multiple config files from a directory. If you combine this
@@ -63,6 +63,11 @@ Logstash has the following flags. You can use the `--help` flag to display this
 --reload-interval RELOAD_INTERVAL
   Specifies how often Logstash checks the config files for changes. The default is every 3 seconds.
 
+--pipeline.unsafe_shutdown
+  Force logstash to exit during shutdown even if there are still inflight events
+  in memory. By default, logstash will refuse to quit until all received events
+  have been pushed to the outputs.
+
 -h, --help
   Print help
 ----------------------------------
diff --git a/docs/static/life-of-an-event.asciidoc b/docs/static/life-of-an-event.asciidoc
index 3a5f72055c6..7baaba3a745 100644
--- a/docs/static/life-of-an-event.asciidoc
+++ b/docs/static/life-of-an-event.asciidoc
@@ -119,12 +119,12 @@ num_pipeline_workers.times do
 end
 wait_for_threads_to_terminate()
 
-There are three configurable options in the pipeline, `--pipeline-workers`, `--pipeline-batch-size`, and `--pipeline-batch-delay`.
-The `--pipeline-workers` or `-w` parameter determines how many threads to run for filter and output processing. If you find that events are backing up, or that the CPU is not saturated, consider increasing the value of this parameter to make better use of available processing power. Good results can even be found increasing this number past the number of available processors as these threads may spend significant time in an I/O wait state when writing to external systems. Legal values for this parameter are positive integers.
+There are three configurable options in the pipeline, `--pipeline.workers`, `--pipeline.batch.size`, and `--pipeline.batch.delay`.
+The `--pipeline.workers` or `-w` parameter determines how many threads to run for filter and output processing. If you find that events are backing up, or that the CPU is not saturated, consider increasing the value of this parameter to make better use of available processing power. Good results can even be found increasing this number past the number of available processors as these threads may spend significant time in an I/O wait state when writing to external systems. Legal values for this parameter are positive integers.
 
-The `--pipeline-batch-size` or `-b` parameter defines the maximum number of events an individual worker thread collects before attempting to execute filters and outputs. Larger batch sizes are generally more efficient, but increase memory overhead. Some hardware configurations require you to increase JVM heap size by setting the `LS_HEAP_SIZE` variable to avoid performance degradation with this option. Values of this parameter in excess of the optimum range cause performance degradation due to frequent garbage collection or JVM crashes related to out-of-memory exceptions. Output plugins can process each batch as a logical unit. The Elasticsearch output, for example, issues https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html[bulk requests] for each batch received. Tuning the `-b` parameter adjusts the size of bulk requests sent to Elasticsearch.
+The `--pipeline.batch.size` or `-b` parameter defines the maximum number of events an individual worker thread collects before attempting to execute filters and outputs. Larger batch sizes are generally more efficient, but increase memory overhead. Some hardware configurations require you to increase JVM heap size by setting the `LS_HEAP_SIZE` variable to avoid performance degradation with this option. Values of this parameter in excess of the optimum range cause performance degradation due to frequent garbage collection or JVM crashes related to out-of-memory exceptions. Output plugins can process each batch as a logical unit. The Elasticsearch output, for example, issues https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html[bulk requests] for each batch received. Tuning the `-b` parameter adjusts the size of bulk requests sent to Elasticsearch.
 
-The `--pipeline-batch-delay` option rarely needs to be tuned. This option adjusts the latency of the Logstash pipeline. Pipeline batch delay is the maximum amount of time in milliseconds that Logstash waits for new messages after receiving an event in the current pipeline worker thread. After this time elapses, Logstash beings to execute filters and outputs.The maximum time that Logstash waits between receiving an event and processing that event in a filter is the product of the `pipeline_batch_delay` and  `pipeline_batch_size` settings.
+The `--pipeline.batch.delay` option rarely needs to be tuned. This option adjusts the latency of the Logstash pipeline. Pipeline batch delay is the maximum amount of time in milliseconds that Logstash waits for new messages after receiving an event in the current pipeline worker thread. After this time elapses, Logstash beings to execute filters and outputs.The maximum time that Logstash waits between receiving an event and processing that event in a filter is the product of the `pipeline.batch.delay` and  `pipeline.batch.size` settings.
 
 [float]
 ==== Notes on Pipeline Configuration and Performance
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index 2316f993abe..f915ffa893d 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -17,6 +17,7 @@ module Environment
     GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "Gemfile")
     LOCAL_GEM_PATH = ::File.join(LOGSTASH_HOME, 'vendor', 'local_gems')
     CACHE_PATH = File.join(LOGSTASH_HOME, "vendor", "cache")
+    SETTINGS_PATH = ::File.join(LOGSTASH_HOME, "conf", "logstash.yml")
 
     # @return [String] the ruby version string bundler uses to craft its gem path
     def gem_ruby_version
@@ -56,6 +57,31 @@ def pattern_path(path)
   end
 end
 
+def fetch_yml_settings(settings_path)
+  if settings = YAML.parse(IO.read(settings_path))
+    settings = settings.to_ruby
+    flat_settings_hash = LogStash::Util.flatten_hash(settings)
+    LogStash::Util.flatten_arguments(flat_settings_hash)
+  else
+    []
+  end
+end
+
+public
+def format_argv(argv)
+  # TODO deprecate these two arguments in the next major version.
+  # use -i irb or -i pry for console
+  if argv == ["irb"] || argv == ["pry"]
+    puts "Warn: option \"#{argv.first}\" is deprecated, use \"-i #{argv.first}\" or \"--interactive=#{argv.first}\" instead"
+    ["--interactive", argv.first]
+  else
+    # The Clamp library supports specifying the same argument multiple times
+    # and it keeps the last occurrence in an array. So in order for cli args
+    # to override the logstash.yml args, we can do `settings_from_yml + argv`
+    settings_from_yml = fetch_yml_settings(LogStash::Environment::SETTINGS_PATH)
+    settings_from_yml + argv
+  end
+end
 
 # when launched as a script, not require'd, (currently from bin/logstash and bin/plugin) the first
 # argument is the path of a Ruby file to require and a LogStash::Runner class is expected to be
@@ -64,12 +90,6 @@ def pattern_path(path)
 if $0 == __FILE__
   LogStash::Bundler.setup!({:without => [:build, :development]})
   require ARGV.shift
-  # TODO deprecate these arguments in the next major version. use -i only
-  if ARGV == ["irb"] || ARGV == ["pry"]
-    puts "Warn: option \"#{ARGV.first}\" is deprecated, use \"-i #{ARGV.first}\" or \"--interactive=#{ARGV.first}\" instead"
-    exit_status = LogStash::Runner.run("bin/logstash", ["--interactive", ARGV.first])
-  else
-    exit_status = LogStash::Runner.run("bin/logstash", ARGV)
-  end
+  exit_status = LogStash::Runner.run("bin/logstash", format_argv(ARGV))
   exit(exit_status || 0)
 end
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 5d2fde3201d..3d26f8c164c 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -28,12 +28,11 @@ class LogStash::Agent
   #   :auto_reload [Boolean] - enable reloading of pipelines
   #   :reload_interval [Integer] - reload pipelines every X seconds
   #   :logger [Cabin::Channel] - logger instance
-  def initialize(params)
+  def initialize(params = {})
     @logger = params[:logger]
     @auto_reload = params[:auto_reload]
-
     @pipelines = {}
-    @node_name = params[:node_name] || Socket.gethostname
+    @node_name = params[:node_name] || LogStash::DEFAULT_SETTINGS["node.name"]
     @web_api_http_host = params[:web_api_http_host]
     @web_api_http_port = params[:web_api_http_port]
 
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 79e7f24d86c..10ee4e1dfed 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -1,7 +1,27 @@
 # encoding: utf-8
 require "logstash/errors"
+require "logstash/config/cpu_core_strategy"
 
 module LogStash
+
+  DEFAULT_SETTINGS = {
+    "node.name" => Socket.gethostname,
+    "config.path" => nil,
+    "config.string" => nil,
+    "config.test" => false,
+    "pipeline.workers" => LogStash::Config::CpuCoreStrategy.maximum,
+    "pipeline.batch.size" => 125,
+    "pipeline.batch.delay" => 5, # in milliseconds
+    "pipeline.flush_interval" => 5, # in seconds
+    "pipeline.flush_timeout_interval" => 60, # in seconds
+    "pipeline.unsafe_shutdown" => false,
+    "plugin.paths" => [],
+    "log" => nil,
+    "debug" => false,
+    "verbose" => false,
+    "quiet" => false,
+  }
+
   module Environment
     extend self
 
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 9fcb77e9101..a16778cb468 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -9,8 +9,6 @@
 require "logstash/filters/base"
 require "logstash/inputs/base"
 require "logstash/outputs/base"
-require "logstash/config/cpu_core_strategy"
-require "logstash/util/defaults_printer"
 require "logstash/shutdown_watcher"
 require "logstash/util/wrapped_synchronous_queue"
 require "logstash/pipeline_reporter"
@@ -37,13 +35,6 @@ module LogStash; class Pipeline
     :config_str,
     :original_settings
 
-  DEFAULT_SETTINGS = {
-    :default_pipeline_workers => LogStash::Config::CpuCoreStrategy.maximum,
-    :pipeline_batch_size => 125,
-    :pipeline_batch_delay => 5, # in milliseconds
-    :flush_interval => 5, # in seconds
-    :flush_timeout_interval => 60 # in seconds
-  }
   MAX_INFLIGHT_WARN_THRESHOLD = 10_000
 
   def self.validate_config(config_str, settings = {})
@@ -60,8 +51,7 @@ def initialize(config_str, settings = {})
     @original_settings = settings
     @logger = Cabin::Channel.get(LogStash)
     @pipeline_id = settings[:pipeline_id] || self.object_id
-    @settings = DEFAULT_SETTINGS.clone
-    settings.each {|setting, value| configure(setting, value) }
+    @settings = LogStash::DEFAULT_SETTINGS.merge(settings)
     @reporter = LogStash::PipelineReporter.new(@logger, self)
 
     @inputs = nil
@@ -120,13 +110,9 @@ def ready?
     @ready.value
   end
 
-  def configure(setting, value)
-    @settings[setting] = value
-  end
-
   def safe_pipeline_worker_count
-    default = DEFAULT_SETTINGS[:default_pipeline_workers]
-    thread_count = @settings[:pipeline_workers] #override from args "-w 8" or config
+    default = @settings["pipeline.workers"]
+    thread_count = @original_settings["pipeline.workers"] #override from args "-w 8" or config
     safe_filters, unsafe_filters = @filters.partition(&:threadsafe?)
 
     if unsafe_filters.any?
@@ -161,9 +147,8 @@ def filters?
   def run
     @started_at = Time.now
 
-    LogStash::Util.set_thread_name("[#{pipeline_id}]-pipeline-manager")
-    @logger.terminal(LogStash::Util::DefaultsPrinter.print(@settings))
     @thread = Thread.current
+    LogStash::Util.set_thread_name("[#{pipeline_id}]-pipeline-manager")
 
     start_workers
 
@@ -214,15 +199,15 @@ def start_workers
       @filters.each {|f| f.register }
 
       pipeline_workers = safe_pipeline_worker_count
-      batch_size = @settings[:pipeline_batch_size]
-      batch_delay = @settings[:pipeline_batch_delay]
+      batch_size = @settings["pipeline.batch.size"]
+      batch_delay = @settings["pipeline.batch.delay"]
       max_inflight = batch_size * pipeline_workers
       @logger.info("Starting pipeline",
-                   :id => self.pipeline_id,
-                   :pipeline_workers => pipeline_workers,
-                   :batch_size => batch_size,
-                   :batch_delay => batch_delay,
-                   :max_inflight => max_inflight)
+                   "id" => self.pipeline_id,
+                   "pipeline.workers" => pipeline_workers,
+                   "pipeline.batch.size" => batch_size,
+                   "pipeline.batch.delay" => batch_delay,
+                   "pipeline.max_inflight" => max_inflight)
       if max_inflight > MAX_INFLIGHT_WARN_THRESHOLD
         @logger.warn "CAUTION: Recommended inflight events max exceeded! Logstash will run with up to #{max_inflight} events in memory in your current configuration. If your message sizes are large this may cause instability with the default heap size. Please consider setting a non-standard heap size, changing the batch size (currently #{batch_size}), or changing the number of pipeline workers (currently #{pipeline_workers})"
       end
@@ -465,7 +450,7 @@ def plugin(plugin_type, name, *args)
   end
 
   def default_output_workers
-    @settings[:pipeline_workers] || @settings[:default_pipeline_workers]
+    @settings["pipeline.workers"] || LogStash::DEFAULT_SETTINGS["pipeline.workers"]
   end
 
   # for backward compatibility in devutils for the rspec helpers, this method is not used
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index a8984244a46..035875940e5 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -15,68 +15,74 @@
 
 class LogStash::Runner < Clamp::Command
 
-  option ["-f", "--config"], "CONFIG_PATH",
+  # Node Settings
+  option ["-n", "--node.name"], "NAME",
+    I18n.t("logstash.runner.flag.node_name"),
+    :attribute_name => :node_name,
+    :default => LogStash::DEFAULT_SETTINGS["node.name"]
+
+  # Config Settings
+  option ["-f", "--config.path"], "CONFIG_PATH",
     I18n.t("logstash.runner.flag.config"),
     :attribute_name => :config_path
 
-  option "-e", "CONFIG_STRING",
+  option ["-e", "--config.string"], "CONFIG_STRING",
     I18n.t("logstash.runner.flag.config-string",
-           :default_input => LogStash::Config::Defaults.input,
-           :default_output => LogStash::Config::Defaults.output),
+      :default_input => LogStash::Config::Defaults.input,
+      :default_output => LogStash::Config::Defaults.output),
     :default => nil, :attribute_name => :config_string
 
-  option ["-w", "--pipeline-workers"], "COUNT",
+  # Pipeline settings
+  option ["-w", "--pipeline.workers"], "COUNT",
     I18n.t("logstash.runner.flag.pipeline-workers"),
     :attribute_name => :pipeline_workers,
-    :default => LogStash::Pipeline::DEFAULT_SETTINGS[:default_pipeline_workers]
+    :default => LogStash::DEFAULT_SETTINGS["pipeline.workers"]
+
+  option ["-b", "--pipeline.batch.size"], "SIZE",
+    I18n.t("logstash.runner.flag.pipeline-batch-size"),
+    :attribute_name => :pipeline_batch_size,
+    :default => LogStash::DEFAULT_SETTINGS["pipeline.batch.size"]
+
+  option ["-u", "--pipeline.batch.delay"], "DELAY_IN_MS",
+    I18n.t("logstash.runner.flag.pipeline-batch-delay"),
+    :attribute_name => :pipeline_batch_delay,
+    :default => LogStash::DEFAULT_SETTINGS["pipeline.batch.delay"]
 
-  option ["-b", "--pipeline-batch-size"], "SIZE",
-         I18n.t("logstash.runner.flag.pipeline-batch-size"),
-         :attribute_name => :pipeline_batch_size,
-         :default => LogStash::Pipeline::DEFAULT_SETTINGS[:pipeline_batch_size]
+  option ["--[no-]pipeline.unsafe_shutdown"], :flag,
+    I18n.t("logstash.runner.flag.unsafe_shutdown"),
+    :attribute_name => :unsafe_shutdown
+  #  :default => LogStash::DEFAULT_SETTINGS["pipeline.unsafe_shutdown"]
 
-  option ["-u", "--pipeline-batch-delay"], "DELAY_IN_MS",
-         I18n.t("logstash.runner.flag.pipeline-batch-delay"),
-         :attribute_name => :pipeline_batch_delay,
-         :default => LogStash::Pipeline::DEFAULT_SETTINGS[:pipeline_batch_delay]
+  # Plugins Settings
+  option ["-p", "--plugin.paths"] , "PATH",
+    I18n.t("logstash.runner.flag.pluginpath"),
+    :multivalued => true, :attribute_name => :plugin_paths,
+    :default => LogStash::DEFAULT_SETTINGS["plugin.paths"]
 
+  # Logging Settings
   option ["-l", "--log"], "FILE",
     I18n.t("logstash.runner.flag.log"),
     :attribute_name => :log_file
 
-  # Old support for the '-v' flag'
-  option "-v", :flag,
-    I18n.t("logstash.runner.flag.verbosity"),
-    :attribute_name => :verbosity, :multivalued => true
+  option "--[no-]debug", :flag, I18n.t("logstash.runner.flag.debug"),
+    :default => LogStash::DEFAULT_SETTINGS["debug"]
+  option "--[no-]quiet", :flag, I18n.t("logstash.runner.flag.quiet"),
+    :default => LogStash::DEFAULT_SETTINGS["quiet"]
+  option "--[no-]verbose", :flag, I18n.t("logstash.runner.flag.verbose"),
+    :default => LogStash::DEFAULT_SETTINGS["verbose"]
 
-  option "--quiet", :flag, I18n.t("logstash.runner.flag.quiet")
-  option "--verbose", :flag, I18n.t("logstash.runner.flag.verbose")
-  option "--debug", :flag, I18n.t("logstash.runner.flag.debug")
+  # Other settings
+  option ["-i", "--interactive"], "SHELL",
+    I18n.t("logstash.runner.flag.rubyshell"),
+    :attribute_name => :ruby_shell
 
   option ["-V", "--version"], :flag,
     I18n.t("logstash.runner.flag.version")
 
-  option ["-p", "--pluginpath"] , "PATH",
-    I18n.t("logstash.runner.flag.pluginpath"),
-    :multivalued => true,
-    :attribute_name => :plugin_paths
-
-  option ["-t", "--configtest"], :flag,
+  option ["-t", "--[no-]config.test"], :flag,
     I18n.t("logstash.runner.flag.configtest"),
-    :attribute_name => :config_test
-
-  option "--[no-]allow-unsafe-shutdown", :flag,
-    I18n.t("logstash.runner.flag.unsafe_shutdown"),
-    :attribute_name => :unsafe_shutdown,
-    :default => false
-
-  option ["-i", "--interactive"], "SHELL",
-    I18n.t("logstash.runner.flag.rubyshell"),
-    :attribute_name => :ruby_shell
-
-  option ["-n", "--node-name"], "NAME",
-    I18n.t("logstash.runner.flag.node_name"),
-    :attribute_name => :node_name
+    :attribute_name => :config_test,
+    :default => LogStash::DEFAULT_SETTINGS["config.test"]
 
   option ["-r", "--[no-]auto-reload"], :flag,
     I18n.t("logstash.runner.flag.auto_reload"),
@@ -95,21 +101,22 @@ class LogStash::Runner < Clamp::Command
     :attribute_name => :web_api_http_port, :default => 9600
 
   def pipeline_workers=(pipeline_workers_value)
-    @pipeline_settings[:pipeline_workers] = validate_positive_integer(pipeline_workers_value)
+    @pipeline_settings["pipeline.workers"] = validate_positive_integer(pipeline_workers_value)
   end
 
   def pipeline_batch_size=(pipeline_batch_size_value)
-    @pipeline_settings[:pipeline_batch_size] = validate_positive_integer(pipeline_batch_size_value)
+    @pipeline_settings["pipeline.batch.size"] = validate_positive_integer(pipeline_batch_size_value)
   end
 
   def pipeline_batch_delay=(pipeline_batch_delay_value)
-    @pipeline_settings[:pipeline_batch_delay] = validate_positive_integer(pipeline_batch_delay_value)
+    @pipeline_settings["pipeline.batch.delay"] = validate_positive_integer(pipeline_batch_delay_value)
   end
 
-  def validate_positive_integer(str_arg)
-    int_arg = str_arg.to_i
+  def validate_positive_integer(arg)
+    int_arg = arg.to_i
+    str_arg = arg.to_s
     if str_arg !~ /^\d+$/ || int_arg < 1
-      raise ArgumentError, "Expected a positive integer, got '#{str_arg}'"
+      raise ArgumentError, "Expected a positive integer, got '#{arg}'"
     end
 
     int_arg
@@ -129,7 +136,6 @@ def execute
     require "stud/task"
     require "cabin" # gem 'cabin'
 
-
     # Configure Logstash logging facility, this need to be done before everything else to
     # make sure the logger has the correct settings and the log level is correctly defined.
     configure_logging(log_file)
@@ -147,7 +153,7 @@ def execute
     LogStash::ShutdownWatcher.unsafe_shutdown = unsafe_shutdown?
     LogStash::ShutdownWatcher.logger = @logger
 
-    configure
+    configure_plugin_paths(plugin_paths)
 
     if version?
       show_version
@@ -156,11 +162,15 @@ def execute
 
     return start_shell(@ruby_shell, binding) if @ruby_shell
 
+    settings = build_settings_hash
+    settings.merge!(@pipeline_settings)
+    format_settings(settings).each {|line| @logger.log(line) }
+
     if config_string.nil? && config_path.nil?
       fail(I18n.t("logstash.runner.missing-configuration"))
     end
 
-    if @auto_reload && config_path.nil?
+    if auto_reload? && config_path.nil?
       # there's nothing to reload
       signal_usage_error(I18n.t("logstash.runner.reload-without-config-path"))
     end
@@ -170,7 +180,7 @@ def execute
       config_str = config_loader.format_config(config_path, config_string)
       config_error = LogStash::Pipeline.config_valid?(config_str)
       if config_error == true
-        @logger.terminal "Configuration OK"
+        @logger.log "Configuration OK"
         return 0
       else
         @logger.fatal I18n.t("logstash.error", :error => config_error)
@@ -179,7 +189,7 @@ def execute
     end
 
     @agent = create_agent(:logger => @logger,
-                          :auto_reload => @auto_reload,
+                          :auto_reload => auto_reload?,
                           :reload_interval => @reload_interval,
                           :collect_metric => true,
                           :debug => debug?,
@@ -285,19 +295,7 @@ def configure_logging(path)
     elsif debug?
       @logger.level = :debug
     else
-      # Old support for the -v and -vv stuff.
-      if verbosity? && verbosity?.any?
-        # this is an array with length of how many times the flag is given
-        if verbosity?.length == 1
-          @logger.warn("The -v flag is deprecated and will be removed in a future release. You should use --verbose instead.")
-          @logger.level = :info
-        else
-          @logger.warn("The -vv flag is deprecated and will be removed in a future release. You should use --debug instead.")
-          @logger.level = :debug
-        end
-      else
-        @logger.level = :warn
-      end
+      @logger.level = :warn
     end
 
     if log_file
@@ -375,4 +373,36 @@ def trap_sigint
     end
   end
 
-end # class LogStash::Runner
+  def build_settings_hash
+    hash = {}
+    self.class.declared_options.each do |opt|
+      option_name = opt.long_switch.sub("--", "").sub("[no-]", "")
+      value = self.send(opt.read_method)
+      if opt.flag?
+        hash[option_name] = value ? value : false
+      elsif value
+        hash[option_name] = value
+      end
+    end
+    hash
+  end
+
+  def format_settings(settings)
+    output = []
+    output << "-------- Logstash Settings (* means modified) ---------"
+    LogStash::DEFAULT_SETTINGS.each do |setting, default_value|
+      value = settings[setting]
+      if default_value == value # print setting and its default value
+        output << "#{setting}: #{value.inspect}" unless value.nil?
+      elsif default_value.nil? # print setting and warn it has been set
+        output << "*#{setting}: #{value.inspect}"
+      elsif value.nil? # default setting not set by user
+        output << "#{setting}: #{default_value.inspect}"
+      else # print setting, warn it has been set, and show default value
+        output << "*#{setting}: #{value.inspect} (default: #{default_value.inspect})"
+      end
+    end
+    output << "--------------- Logstash Settings -------------------"
+    output
+  end
+end
diff --git a/logstash-core/lib/logstash/util.rb b/logstash-core/lib/logstash/util.rb
index 88f8b999200..7362c7abd22 100644
--- a/logstash-core/lib/logstash/util.rb
+++ b/logstash-core/lib/logstash/util.rb
@@ -209,4 +209,31 @@ def self.deep_clone(o)
       Marshal.load(Marshal.dump(o))
     end
   end
+
+
+  def self.flatten_hash(h,f="",g={})
+    return g.update({ f => h }) unless h.is_a? Hash
+    if f.empty?
+      h.each { |k,r| flatten_hash(r,k,g) }
+    else
+      h.each { |k,r| flatten_hash(r,"#{f}.#{k}",g) }
+    end
+    g
+  end
+
+  def self.flatten_arguments(hash)
+    args = []
+    hash.each do |key, value|
+      next if value.nil?
+      if value == true
+        args << "--#{key}"
+      elsif value == false
+        args << "--no-#{key}"
+      else
+        args << "--#{key}"
+        args << value
+      end
+    end
+    args
+  end
 end # module LogStash::Util
diff --git a/logstash-core/lib/logstash/util/defaults_printer.rb b/logstash-core/lib/logstash/util/defaults_printer.rb
deleted file mode 100644
index 6dd850e1d50..00000000000
--- a/logstash-core/lib/logstash/util/defaults_printer.rb
+++ /dev/null
@@ -1,31 +0,0 @@
-# encoding: utf-8
-require "logstash/namespace"
-require "logstash/util"
-require "logstash/util/worker_threads_default_printer"
-
-
-# This class exists to format the settings for defaults used
-module LogStash module Util class DefaultsPrinter
-  def self.print(settings)
-    new(settings).print
-  end
-
-  def initialize(settings)
-    @settings = settings
-    @printers = [workers]
-  end
-
-  def print
-    collector = []
-    @printers.each do |printer|
-      printer.visit(collector)
-    end
-    "Settings: " + collector.join(', ')
-  end
-
-  private
-
-  def workers
-    WorkerThreadsDefaultPrinter.new(@settings)
-  end
-end end end
diff --git a/logstash-core/lib/logstash/util/worker_threads_default_printer.rb b/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
index 43869162865..b35058ac24e 100644
--- a/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
+++ b/logstash-core/lib/logstash/util/worker_threads_default_printer.rb
@@ -6,8 +6,8 @@
 module LogStash module Util class WorkerThreadsDefaultPrinter
 
   def initialize(settings)
-    @setting = settings.fetch(:pipeline_workers, 0)
-    @default = settings.fetch(:default_pipeline_workers, 0)
+    @setting = settings.fetch('pipeline.workers', 0)
+    @default = settings.fetch('default-pipeline-workers', 0)
   end
 
   def visit(collector)
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index b7ad9065e04..14729c37db2 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -17,6 +17,10 @@
     end
   end
 
+  it "fallback to hostname when no name is provided" do
+    expect(LogStash::Agent.new.node_name).to eq(Socket.gethostname)
+  end
+
   describe "register_pipeline" do
     let(:pipeline_id) { "main" }
     let(:settings) { {
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index 3753ccaae00..3b24cf6886f 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -107,7 +107,7 @@ class TestPipeline < LogStash::Pipeline
 end
 
 describe LogStash::Pipeline do
-  let(:worker_thread_count)     { LogStash::Pipeline::DEFAULT_SETTINGS[:default_pipeline_workers] }
+  let(:worker_thread_count)     { LogStash::DEFAULT_SETTINGS["pipeline.workers"] }
   let(:safe_thread_count)       { 1 }
   let(:override_thread_count)   { 42 }
 
@@ -149,12 +149,13 @@ class TestPipeline < LogStash::Pipeline
       end
 
       context "when there is command line -w N set" do
+        let(:pipeline_settings) { {"pipeline.workers" => override_thread_count } }
         it "starts multiple filter thread" do
-          msg = "Warning: Manual override - there are filters that might not work with multiple worker threads"
-          pipeline = TestPipeline.new(test_config_with_filters)
+          msg = "Warning: Manual override - there are filters that might" +
+                " not work with multiple worker threads"
+          pipeline = TestPipeline.new(test_config_with_filters, pipeline_settings)
           expect(pipeline.logger).to receive(:warn).with(msg,
             {:worker_threads=> override_thread_count, :filters=>["dummyfilter"]})
-          pipeline.configure(:pipeline_workers, override_thread_count)
           pipeline.run
           expect(pipeline.worker_threads.size).to eq(override_thread_count)
         end
@@ -314,7 +315,7 @@ class TestPipeline < LogStash::Pipeline
   describe "max inflight warning" do
     let(:config) { "input { dummyinput {} } output { dummyoutput {} }" }
     let(:batch_size) { 1 }
-    let(:pipeline) { LogStash::Pipeline.new(config, :pipeline_batch_size => batch_size, :pipeline_workers => 1) }
+    let(:pipeline) { LogStash::Pipeline.new(config, "pipeline.batch.size" => batch_size, "pipeline.workers" => 1) }
     let(:logger) { pipeline.logger }
     let(:warning_prefix) { /CAUTION: Recommended inflight events max exceeded!/ }
 
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index f8bcd9a6f35..445333fed66 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -16,10 +16,31 @@ def run(args); end
 
   before :each do
     allow(Cabin::Channel).to receive(:get).with(LogStash).and_return(channel)
+    allow(LogStash::ShutdownWatcher).to receive(:logger).and_return(channel)
+    allow(channel).to receive(:log) {}
+  end
+
+  after :all do
+    LogStash::ShutdownWatcher.logger = nil
+  end
+
+  describe "argument precedence" do
+    let(:config) { "input {} output {}" }
+    let(:cli_args) { ["-e", config, "-w", 20] }
+    let(:settings_yml) { ["--pipeline.workers", 2] }
+
+    it "favors the last occurence of an option" do
+      expect(LogStash::Pipeline).to receive(:new).
+        with(config, hash_including("pipeline.workers" => 20)).and_call_original
+      subject.run("bin/logstash", settings_yml + cli_args)
+    end
   end
 
   describe "argument parsing" do
     subject { LogStash::Runner.new("") }
+    before :each do
+      allow(Cabin::Channel.get(LogStash)).to receive(:terminal)
+    end
     context "when -e is given" do
 
       let(:args) { ["-e", "input {} output {}"] }
@@ -118,7 +139,7 @@ def run(args); end
 
     context "when :pipeline_workers is defined by the user" do
       it "should pass the value to the pipeline" do
-        main_pipeline_settings[:pipeline_workers] = 2
+        main_pipeline_settings["pipeline.workers"] = 2
         expect(LogStash::Pipeline).to receive(:new).with(pipeline_string, hash_including(main_pipeline_settings)).and_return(pipeline)
 
         args = ["-w", "2", "-e", pipeline_string]
diff --git a/logstash-core/spec/logstash/util/defaults_printer_spec.rb b/logstash-core/spec/logstash/util/defaults_printer_spec.rb
deleted file mode 100644
index b3f0576a3a9..00000000000
--- a/logstash-core/spec/logstash/util/defaults_printer_spec.rb
+++ /dev/null
@@ -1,50 +0,0 @@
-# encoding: utf-8
-require "spec_helper"
-require "logstash/util/defaults_printer"
-
-describe LogStash::Util::DefaultsPrinter do
-  shared_examples "a defaults printer" do
-    it 'the .print method returns a defaults description' do
-      expect(actual_block.call).to eq(expected)
-    end
-  end
-
-  let(:workers)  { 1 }
-  let(:expected) { "Settings: User set pipeline workers: #{workers}" }
-  let(:settings) { {} }
-
-  describe 'class methods API' do
-    let(:actual_block) do
-      -> {described_class.print(settings)}
-    end
-
-    context 'when the settings hash is empty' do
-      let(:expected) { "Settings: " }
-      it_behaves_like "a defaults printer"
-    end
-
-    context 'when the settings hash has content' do
-      let(:worker_queue) { 42 }
-      let(:settings) { {:pipeline_workers => workers} }
-      it_behaves_like "a defaults printer"
-    end
-  end
-
-  describe 'instance method API' do
-    let(:actual_block) do
-      -> {described_class.new(settings).print}
-    end
-
-    context 'when the settings hash is empty' do
-      let(:expected) { "Settings: " }
-      it_behaves_like "a defaults printer"
-    end
-
-    context 'when the settings hash has content' do
-      let(:workers) { 13 }
-      let(:settings) { {:pipeline_workers => workers} }
-
-      it_behaves_like "a defaults printer"
-    end
-  end
-end
diff --git a/logstash-core/spec/logstash/util/worker_threads_default_printer_spec.rb b/logstash-core/spec/logstash/util/worker_threads_default_printer_spec.rb
deleted file mode 100644
index 1842b4373ad..00000000000
--- a/logstash-core/spec/logstash/util/worker_threads_default_printer_spec.rb
+++ /dev/null
@@ -1,45 +0,0 @@
-# encoding: utf-8
-require "spec_helper"
-require "logstash/util/worker_threads_default_printer"
-
-describe LogStash::Util::WorkerThreadsDefaultPrinter do
-  let(:settings)  { {} }
-  let(:collector) { [] }
-
-  subject { described_class.new(settings) }
-
-  before { subject.visit(collector) }
-
-  describe "the #visit method" do
-    context 'when the settings hash is empty' do
-      it 'adds nothing to the collector' do
-        subject.visit(collector)
-        expect(collector).to eq([])
-      end
-    end
-
-    context 'when the settings hash has both user and default content' do
-      let(:settings) { {:pipeline_workers => 42, :default_pipeline_workers => 5} }
-
-      it 'adds two strings' do
-        expect(collector).to eq(["User set pipeline workers: 42", "Default pipeline workers: 5"])
-      end
-    end
-
-    context 'when the settings hash has only user content' do
-      let(:settings) { {:pipeline_workers => 42} }
-
-      it 'adds a string with user set pipeline workers' do
-        expect(collector.first).to eq("User set pipeline workers: 42")
-      end
-    end
-
-    context 'when the settings hash has only default content' do
-      let(:settings) { {:default_pipeline_workers => 5} }
-
-      it 'adds a string with default pipeline workers' do
-        expect(collector.first).to eq("Default pipeline workers: 5")
-      end
-    end
-  end
-end
diff --git a/spec/bootstrap/environment_spec.rb b/spec/bootstrap/environment_spec.rb
new file mode 100644
index 00000000000..069161072cc
--- /dev/null
+++ b/spec/bootstrap/environment_spec.rb
@@ -0,0 +1,31 @@
+# encoding: utf-8
+require "spec_helper"
+require "bootstrap/environment"
+
+describe LogStash::Environment do
+  describe "format_argv" do
+    context "when passing just irb/pry" do
+      before(:each) do
+        allow(subject).to receive(:puts)
+      end
+      ["pry", "irb"].each do |console|
+        it "transforms [\"#{console}\"] to --interactive switches" do
+          expect(subject.format_argv([console])).to eq(["--interactive", console])
+        end
+      end
+    end
+
+    context "when passing cli arguments" do
+      let(:argv) { ["--pipeline.workers", 4] }
+      let(:yml_settings) { ["--pipeline.workers", 2] }
+
+      before(:each) do
+        allow(subject).to receive(:fetch_yml_settings).and_return(yml_settings)
+      end
+
+      it "should place settings from yaml before settings from cli" do
+        expect(subject.format_argv(argv)).to eq(yml_settings + argv)
+      end
+    end
+  end
+end
