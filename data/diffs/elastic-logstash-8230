diff --git a/logstash-core/src/main/java/org/logstash/plugin/Input.java b/logstash-core/src/main/java/org/logstash/plugin/Input.java
new file mode 100644
index 00000000000..3bcd0892938
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Input.java
@@ -0,0 +1,44 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.function.Consumer;
+
+/**
+ * A Logstash input plugin.
+ * <p>
+ * Input plugins produce events intended given to Processors.
+ * <p>
+ * Inputs will generally run forever until there is some terminating condition such as a pipeline shutdown.
+ */
+public interface Input {
+    /**
+     * The method contract is as follows:
+     * <p>
+     * 1) When `Thread.interrupted()` is true, you MUST close all open resources and return.
+     * 2) When this method returns, it is assumed all work for this input is completed.
+     * 3) consumer.accept(...) may block
+     * <p>
+     * Acknowledging Data:
+     * <p>
+     * When `consumer.accept(...)` returns, the given Events have been successfully written into the consumer, and it is now
+     * safe to acknowledge these events to the upstream data source. The consumer is generally the Logstash internal queue,
+     * such as the persistent queue.
+     *
+     * @param consumer Send batches of events with consumer.accept(batch).
+     */
+    void run(Consumer<Collection<Event>> consumer);
+
+    /**
+     * Return this Input as a Callable for use with an ExecutorService.
+     *
+     * @param consumer the
+     * @return A Callable which wraps the `run` method.
+     */
+    default Callable<Void> toCallable(Consumer<Collection<Event>> consumer) {
+        return Executors.callable(() -> run(consumer), null);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Output.java b/logstash-core/src/main/java/org/logstash/plugin/Output.java
new file mode 100644
index 00000000000..fb0fa54a56f
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Output.java
@@ -0,0 +1,15 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+
+public interface Output {
+    /**
+     * Process a batch with the intent of sending the event externally.
+     *
+     *
+     * @param events the events to output.
+     */
+    void process(Collection<Event> events);
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/Processor.java b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
new file mode 100644
index 00000000000..b0172fe08a4
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/Processor.java
@@ -0,0 +1,15 @@
+package org.logstash.plugin;
+
+import org.logstash.Event;
+
+import java.util.Collection;
+
+public interface Processor {
+    /**
+     * Process events. In the past, this was called a `filter` in Logstash.
+     *
+     * @param events The events to be processed
+     * @return Any new events created by this processor.
+     */
+    Collection<Event> process(Collection<Event> events);
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/RubyOutput.java b/logstash-core/src/main/java/org/logstash/plugin/RubyOutput.java
new file mode 100644
index 00000000000..55a0750b397
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/RubyOutput.java
@@ -0,0 +1,29 @@
+package org.logstash.plugin;
+
+import org.jruby.RubyArray;
+import org.jruby.RubyObject;
+import org.logstash.Event;
+import org.logstash.ext.JrubyEventExtLibrary;
+
+import java.util.Collection;
+
+public class RubyOutput implements Output {
+    private static final String MULTI_RECEIVE_METHOD = "multi_receive";
+    private RubyObject plugin;
+    private RubyArray events;
+    private Output handler;
+
+    public RubyOutput(RubyObject plugin) {
+        // XXX: assert that `plugin` is a subclass of LogStash::Filter::Base
+        this.plugin = plugin;
+        events = RubyArray.newArray(plugin.getRuntime());
+
+
+    }
+    @Override
+    public void process(Collection<Event> events) {
+        final RubyArray rubyEvents = RubyArray.newArray(plugin.getRuntime());
+        events.forEach(event -> rubyEvents.add(JrubyEventExtLibrary.RubyEvent.newRubyEvent(plugin.getRuntime(), event)));
+        plugin.callMethod(plugin.getRuntime().getCurrentContext(), MULTI_RECEIVE_METHOD, rubyEvents);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugin/RubyProcessor.java b/logstash-core/src/main/java/org/logstash/plugin/RubyProcessor.java
new file mode 100644
index 00000000000..690dc36f6d4
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugin/RubyProcessor.java
@@ -0,0 +1,45 @@
+package org.logstash.plugin;
+
+import org.jruby.RubyArray;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.Event;
+import org.logstash.ext.JrubyEventExtLibrary.RubyEvent;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class RubyProcessor implements Processor {
+    private static final Collection<Event> EMPTY_RESULT = Collections.emptyList();
+
+    private static final String MULTI_FILTER_METHOD = "multi_filter";
+    private IRubyObject plugin;
+    private Processor handler;
+
+    public RubyProcessor(IRubyObject plugin) {
+        this.plugin = plugin;
+    }
+
+    @Override
+    public Collection<Event> process(Collection<Event> events) {
+        final RubyArray rubyEvents = RubyArray.newArray(plugin.getRuntime());
+        events.forEach(event -> rubyEvents.add(RubyEvent.newRubyEvent(plugin.getRuntime(), event)));
+
+        // filters/base.rb provides a basic multi_filter even if the actual plugin itself does not.
+        IRubyObject result = plugin.callMethod(plugin.getRuntime().getCurrentContext(), MULTI_FILTER_METHOD, rubyEvents);
+
+        if (result.isNil()) {
+            return EMPTY_RESULT;
+        }
+
+        // `result` must be a RubyArray containing RubyEvent's
+        if (result instanceof RubyArray) {
+            @SuppressWarnings("unchecked") // RubyArray is not generic, but satisfies `List`.
+            final List<RubyEvent> newRubyEvents = (RubyArray) result;
+            return newRubyEvents.stream().map(RubyEvent::getEvent).collect(Collectors.toList());
+        } else {
+            throw new IllegalArgumentException("Return value from a filter must be nil or an array of events, but got " + result.getClass().getCanonicalName());
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/TestUtil.java b/logstash-core/src/test/java/org/logstash/TestUtil.java
new file mode 100644
index 00000000000..6d21168af0c
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/TestUtil.java
@@ -0,0 +1,10 @@
+package org.logstash;
+
+import java.util.Random;
+
+public class TestUtil {
+    /**
+     * A random instance to share in the test suite.
+     */
+    public static final Random random = new Random();
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/InputTest.java b/logstash-core/src/test/java/org/logstash/plugin/InputTest.java
new file mode 100644
index 00000000000..bdd79d69b81
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/InputTest.java
@@ -0,0 +1,46 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.TestUtil;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.function.Consumer;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+
+public class InputTest {
+    private Collection<Collection<Event>> batches = new LinkedList<>();
+    private int batchCount = TestUtil.random.nextInt(10) + 1;
+
+    @Test
+    public void testInput() {
+        Input i = new TestInput();
+        i.run(batches::add);
+        assertEquals(batchCount, batches.size());
+        for (Collection<Event> events : batches) {
+            assertFalse(events.isEmpty());
+        }
+    }
+
+    private class TestInput implements Input {
+        @Override
+        public void run(Consumer<Collection<Event>> consumer) {
+            for (int b = 0; b < batchCount; b++) {
+                int eventCountPerBatch = TestUtil.random.nextInt(100) + 1;
+                Collection<Event> events = new LinkedList<>();
+                for (int i = 0; i < eventCountPerBatch; i++) {
+                    Event e = new Event();
+                    e.setField("message", "hello world");
+                    e.setField("i", i);
+                    e.setField("b", b);
+                    events.add(e);
+                }
+                consumer.accept(Collections.unmodifiableCollection(events));
+            }
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
new file mode 100644
index 00000000000..76cd6ff45da
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/ProcessorTest.java
@@ -0,0 +1,51 @@
+package org.logstash.plugin;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.TestUtil;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedList;
+
+import static org.junit.Assert.assertEquals;
+
+public class ProcessorTest {
+    static Collection<Event> generateEvents(int count) {
+        Collection<Event> events = new LinkedList<>();
+        for (long i = 0; i < count; i++) {
+            Event event = new Event();
+            event.setField("message", "hello world");
+            event.setField("i", i);
+            events.add(event);
+        }
+        return Collections.unmodifiableCollection(events);
+    }
+
+    private class TestFilter implements Processor {
+        @Override
+        public Collection<Event> process(Collection<Event> events) {
+            for (Event e : events) {
+                e.setField("visited", "testFilter");
+            }
+            return null;
+        }
+    }
+
+    private Processor processor = new TestFilter();
+    private int eventCount = TestUtil.random.nextInt(100);
+    private Collection<Event> events = generateEvents(eventCount);
+
+    @Test
+    public void testFilter() {
+        Collection<Event> newEvents = processor.process(events);
+
+        assertEquals(null, newEvents);
+
+        long i = 0;
+        for (Event event : events) {
+            assertEquals(i, event.getField("i"));
+            i++;
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/plugin/RubyProcessorTest.java b/logstash-core/src/test/java/org/logstash/plugin/RubyProcessorTest.java
new file mode 100644
index 00000000000..fbd6d29ee13
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugin/RubyProcessorTest.java
@@ -0,0 +1,85 @@
+package org.logstash.plugin;
+
+import org.jruby.Ruby;
+import org.jruby.RubyClass;
+import org.jruby.RubyHash;
+import org.jruby.RubyModule;
+import org.jruby.embed.ScriptingContainer;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.junit.Before;
+import org.junit.Test;
+import org.logstash.Event;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class RubyProcessorTest {
+    private ScriptingContainer container = new ScriptingContainer();
+    private Ruby ruby = container.getProvider().getRuntime();
+
+    static {
+        //setupRuby();
+    }
+
+    @Before
+    public void setup() throws IOException {
+        Path root = Paths.get("..").toRealPath();
+
+        // Setup the load path.
+        // XXX: I did this before with ScriptContainer.getLoadPath + setLoadPath but it wasn't working correctly...
+        // XXX: So I choose to modify $: instead.
+        Object loadPath = container.runScriptlet("$:");
+        container.callMethod(loadPath, "<<", root.resolve("lib").toString());
+        container.callMethod(loadPath, "<<", root.resolve("logstash-core/lib").toString());
+        container.callMethod(loadPath, "<<", root.resolve("logstash-core/src/test/resources/org/logstash/plugin/lib/").toString());
+
+        Map env = container.getEnvironment();
+        env.put("GEM_HOME", root.resolve("vendor/bundle/jruby/2.3.0").toString());
+        env.put("GEM_PATH", root.resolve("vendor/bundle/jruby/2.3.0").toString());
+        env.put("GEM_SPEC_CACHE", root.resolve("vendor/bundle/jruby/2.3.0/specifications").toString());
+        container.setEnvironment(env);
+
+        RubyModule kernel = ruby.getKernel();
+        container.callMethod(kernel, "require", "bootstrap/environment");
+        long n = System.nanoTime();
+        container.runScriptlet("LogStash::Bundler.setup!({:without => [:build, :development]})");
+        System.out.println("Bundler setup took: " + (System.nanoTime() - n) / 1000000 + "ms");
+        container.callMethod(kernel, "require", "logstash/plugin");
+    }
+
+    private IRubyObject plugin(String type, String name, Map<String, Object> config) {
+        RubyHash hash = new RubyHash(ruby);
+        if (config != null) {
+            hash.putAll(config);
+        }
+        RubyClass pluginClass = (RubyClass) container.runScriptlet("LogStash::Plugin.lookup('filter', 'test')");
+        IRubyObject plugin = pluginClass.newInstance(ruby.getCurrentContext(), hash, Block.NULL_BLOCK);
+        plugin.callMethod(ruby.getCurrentContext(), "register");
+
+        return plugin;
+    }
+
+    @Test
+    public void testRubyFilter() throws IOException {
+        IRubyObject plugin = plugin("filter", "test", null);
+
+        RubyProcessor processor = new RubyProcessor(plugin);
+
+        Collection<Event> events = Collections.singletonList(new Event());
+        Collection<Event> newEvents = processor.process(events);
+
+        for (Event event : events) {
+            assertEquals(1L, event.getField("test"));
+        }
+
+        assertTrue("The test filter should return null and not create any additional events", newEvents.isEmpty());
+    }
+}
\ No newline at end of file
