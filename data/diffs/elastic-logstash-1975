diff --git a/lib/logstash/codecs/es_bulk.rb b/lib/logstash/codecs/es_bulk.rb
new file mode 100644
index 00000000000..7e74ad1b30e
--- /dev/null
+++ b/lib/logstash/codecs/es_bulk.rb
@@ -0,0 +1,53 @@
+# encoding: utf-8
+require "logstash/codecs/base"
+require "logstash/codecs/line"
+require "logstash/json"
+
+# This codec will decode the Elasticsearch bulk format into
+# individual events, plus metadata into the @metadata field.
+# 
+# Encoding is not supported at this time as the Elasticsearch
+# output submits Logstash events in bulk format.
+class LogStash::Codecs::ESBulk < LogStash::Codecs::Base
+  config_name "es_bulk"
+
+  milestone 1
+
+  public
+  def initialize(params={})
+    super(params)
+    @lines = LogStash::Codecs::Line.new
+    @lines.charset = "UTF-8"
+  end
+
+  public
+  def decode(data)
+    state = :initial
+    metadata = Hash.new
+    @lines.decode(data) do |bulk|
+      begin
+        line = LogStash::Json.load(bulk["message"])
+        case state
+        when :metadata
+          event = LogStash::Event.new(line)
+          event["@metadata"] = metadata
+          yield event
+          state = :initial
+        when :initial
+          metadata = line[line.keys[0]]
+          metadata["action"] = line.keys[0].to_s
+          state = :metadata
+          if line.keys[0] == 'delete'
+            event = LogStash::Event.new()
+            event["@metadata"] = metadata
+            yield event
+            state = :initial
+          end
+        end
+      rescue LogStash::Json::ParserError => e
+        @logger.error("JSON parse failure. ES Bulk messages must in be UTF-8 JSON", :error => e, :data => data)
+      end
+    end
+  end # def decode
+
+end # class LogStash::Codecs::ESBulk
diff --git a/spec/codecs/es_bulk_spec.rb b/spec/codecs/es_bulk_spec.rb
new file mode 100644
index 00000000000..8c76070ed3d
--- /dev/null
+++ b/spec/codecs/es_bulk_spec.rb
@@ -0,0 +1,57 @@
+require "logstash/codecs/es_bulk"
+require "logstash/event"
+require "insist"
+
+describe LogStash::Codecs::ESBulk do
+  subject do
+    next LogStash::Codecs::ESBulk.new
+  end
+
+  context "#decode" do
+    it "should return 4 events from json data" do
+      data = <<-HERE
+      { "index" : { "_index" : "test", "_type" : "type1", "_id" : "1" } }
+      { "field1" : "value1" }
+      { "delete" : { "_index" : "test", "_type" : "type1", "_id" : "2" } }
+      { "create" : { "_index" : "test", "_type" : "type1", "_id" : "3" } }
+      { "field1" : "value3" }
+      { "update" : {"_id" : "1", "_type" : "type1", "_index" : "index1"} }
+      { "doc" : {"field2" : "value2"} }
+      HERE
+
+      count = 0
+      subject.decode(data) do |event|
+        case count
+        when 0
+          insist { event['@metadata']['_id'] } == "1"
+          insist { event['@metadata']['action'] } == "index"
+          insist { event['field1'] } == "value1"
+        when 1
+          insist { event['@metadata']['_id'] } == "2"
+          insist { event['@metadata']['action'] } == "delete"
+        when 2
+          insist { event['@metadata']['_id'] } == "3"
+          insist { event['@metadata']['action'] } == "create"
+          insist { event['field1'] } == "value3"
+        when 3
+          insist { event['@metadata']['_id'] } == "1"
+          insist { event['@metadata']['action'] } == "update"
+          insist { event['doc']['field2'] } == "value2"
+        end
+        count += 1
+      end
+      insist { count } == 4
+    end
+  end
+
+  context "fail to process non-bulk event then continue" do
+    it "continues after a fail" do
+      decoded = false
+      subject.decode("something that isn't a bulk event\n") do |event|
+        decoded = true
+      end
+      insist { decoded } == false
+    end
+  end
+
+end
