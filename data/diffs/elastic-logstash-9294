diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index e84a976b56b..7c3c74ca425 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -297,16 +297,25 @@ private Dataset outputDataset(final Vertex vertex, final Collection<Dataset> dat
          */
         private SplitDataset split(final Collection<Dataset> datasets,
             final EventCondition condition, final Vertex vertex) {
-            return iffs.computeIfAbsent(
-                vertex.getId(), v -> {
+            final String key = vertex.getId();
+            SplitDataset conditional = iffs.get(key);
+            if (conditional == null) {
+                final Collection<Dataset> dependencies = flatten(datasets, vertex);
+                conditional = iffs.get(key);
+                // Check that compiling the dependencies did not already instantiate the conditional
+                // by requiring its else branch.
+                if (conditional == null) {
                     final ComputeStepSyntaxElement<SplitDataset> prepared =
-                        DatasetCompiler.splitDataset(flatten(datasets, vertex), condition);
+                        DatasetCompiler.splitDataset(dependencies, condition);
                     LOGGER.debug(
                         "Compiled conditional\n {} \n into \n {}", vertex, prepared
                     );
-                    return prepared.instantiate();
+                    conditional = prepared.instantiate();
+                    iffs.put(key, conditional);
                 }
-            );
+
+            }
+            return conditional;
         }
 
         /**
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ClassFields.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ClassFields.java
index a906db50089..15c02d7bab8 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ClassFields.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ClassFields.java
@@ -10,11 +10,9 @@
  */
 final class ClassFields {
 
-    private final Collection<FieldDefinition> definitions;
+    private final Collection<FieldDefinition> definitions = new ArrayList<>();
 
-    ClassFields() {
-        definitions = new ArrayList<>();
-    }
+    private final Collection<Closure> afterInit = new ArrayList<>();
 
     /**
      * Add a field of given type that is initialized by the given {@link SyntaxElement} that will
@@ -48,6 +46,24 @@ public ValueSyntaxElement add(final Class<?> type) {
         return addField(FieldDefinition.mutableUnassigned(definitions.size(), type));
     }
 
+    /**
+     * Add a {@link Closure} that should be executed in the constructor after field assignments
+     * have been executed.
+     * @param closure Closure to run after field assignments
+     */
+    public void addAfterInit(final Closure closure) {
+        afterInit.add(closure);
+    }
+
+    /**
+     * Returns a closure of actions that should be run in the constructor after all field
+     * assignments have been executed.
+     * @return Closure that should be executed after field assignments are done
+     */
+    public Closure afterInit() {
+        return Closure.wrap(afterInit.toArray(new Closure[0]));
+    }
+
     /**
      * Returns the subset of fields that are assigned in the constructor.
      * @return Subset of fields to be assigned by the constructor
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
index 99b96cf452a..79d0cab2821 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/ComputeStepSyntaxElement.java
@@ -204,7 +204,10 @@ private String fieldsAndCtor() {
                 ctor.add(argVar);
             }
         }
-        return combine(ctorFields, MethodSyntaxElement.constructor(name, constructor, ctor));
+        return combine(
+            ctorFields,
+            MethodSyntaxElement.constructor(name, constructor.add(fields.afterInit()), ctor)
+        );
     }
 
     /**
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
index 902a881cbd9..2d1711c0b52 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
@@ -72,9 +72,21 @@ public static ComputeStepSyntaxElement<SplitDataset> splitDataset(final Collecti
         final ValueSyntaxElement elseData = fields.add(RubyArray.class, arrayInit);
         final ValueSyntaxElement buffer = fields.add(RubyArray.class, arrayInit);
         final ValueSyntaxElement done = fields.add(boolean.class);
+        final ValueSyntaxElement right = fields.add(DatasetCompiler.Complement.class);
         final VariableDefinition event =
             new VariableDefinition(JrubyEventExtLibrary.RubyEvent.class, "event");
         final ValueSyntaxElement eventVal = event.access();
+        fields.addAfterInit(
+            Closure.wrap(
+                SyntaxFactory.assignment(right,
+                    SyntaxFactory.cast(
+                        DatasetCompiler.Complement.class, SyntaxFactory.constant(
+                            DatasetCompiler.class, DatasetCompiler.Complement.class.getSimpleName()
+                        ).call("from", SyntaxFactory.THIS, elseData)
+                    )
+                )
+            )
+        );
         return new ComputeStepSyntaxElement<>(
             Arrays.asList(
                 MethodSyntaxElement.compute(
@@ -96,10 +108,15 @@ public static ComputeStepSyntaxElement<SplitDataset> splitDataset(final Collecti
                         .add(SyntaxFactory.ret(ifData))
                 ),
                 MethodSyntaxElement.clear(
-                    clearSyntax(parentFields).add(clear(ifData)).add(clear(elseData))
-                        .add(SyntaxFactory.assignment(done, SyntaxFactory.FALSE))
+                    Closure.wrap(
+                        SyntaxFactory.ifCondition(
+                            done,
+                            clearSyntax(parentFields).add(clear(ifData)).add(clear(elseData))
+                                .add(SyntaxFactory.assignment(done, SyntaxFactory.FALSE))
+                        )
+                    )
                 ),
-                MethodSyntaxElement.right(elseData)
+                MethodSyntaxElement.right(right)
             ), fields, SplitDataset.class
         );
     }
@@ -150,8 +167,13 @@ public static ComputeStepSyntaxElement<Dataset> filterDataset(final Collection<D
             body.add(SyntaxFactory.assignment(done, SyntaxFactory.TRUE))
                 .add(SyntaxFactory.ret(outputBuffer)),
             Closure.wrap(
-                clearSyntax(parentFields), clear(outputBuffer),
-                SyntaxFactory.assignment(done, SyntaxFactory.FALSE)
+                SyntaxFactory.ifCondition(
+                    done,
+                    Closure.wrap(
+                        clearSyntax(parentFields), clear(outputBuffer),
+                        SyntaxFactory.assignment(done, SyntaxFactory.FALSE)
+                    )
+                )
             ), fields
         );
     }
@@ -420,8 +442,10 @@ public Collection<JrubyEventExtLibrary.RubyEvent> compute(final RubyArray batch,
 
         @Override
         public void clear() {
-            parent.clear();
-            done = false;
+            if (done) {
+                parent.clear();
+                done = false;
+            }
         }
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/MethodSyntaxElement.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/MethodSyntaxElement.java
index 71af048cd53..b0ea9f9c3d8 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/MethodSyntaxElement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/MethodSyntaxElement.java
@@ -55,13 +55,7 @@ static MethodSyntaxElement compute(final Closure body) {
      */
     static MethodSyntaxElement right(final ValueSyntaxElement elseData) {
         return new MethodSyntaxElement.MethodSyntaxElementImpl(Dataset.class, "right",
-            Closure.wrap(
-                SyntaxFactory.ret(
-                    SyntaxFactory.constant(
-                        DatasetCompiler.class, DatasetCompiler.Complement.class.getSimpleName()
-                    ).call("from", SyntaxFactory.THIS, elseData)
-                )
-            )
+            Closure.wrap(SyntaxFactory.ret(elseData))
         );
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
index 4a67c015598..7b25b811bf6 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -2,6 +2,7 @@
 
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.LinkedTransferQueue;
@@ -91,6 +92,37 @@ public void buildsStraightPipeline() throws Exception {
         MatcherAssert.assertThat(outputEvents.contains(testEvent), CoreMatchers.is(true));
     }
 
+    @Test
+    public void buildsForkedPipeline() throws Exception {
+        final PipelineIR pipelineIR = ConfigCompiler.configToPipelineIR(
+            "input {mockinput{}} filter { " +
+                "if [foo] != \"bar\" { " +
+                "mockfilter {} " +
+                "mockaddfilter {} " +
+                "if [foo] != \"bar\" { " +
+                "mockfilter {} " +
+                "}} " +
+                "} output {mockoutput{} }",
+            false
+        );
+        final JrubyEventExtLibrary.RubyEvent testEvent =
+            JrubyEventExtLibrary.RubyEvent.newRubyEvent(RubyUtil.RUBY, new Event());
+        final Map<String, Supplier<RubyIntegration.Filter>> filters = new HashMap<>();
+        filters.put("mockfilter", CompiledPipelineTest.IdentityFilter::new);
+        filters.put("mockaddfilter", CompiledPipelineTest.AddFieldFilter::new);
+        new CompiledPipeline(
+            pipelineIR,
+            new CompiledPipelineTest.MockPluginFactory(
+                Collections.singletonMap("mockinput", () -> null),
+                filters,
+                Collections.singletonMap("mockoutput", mockOutputSupplier())
+            )
+        ).buildExecution().compute(RubyUtil.RUBY.newArray(testEvent), false, false);
+        final Collection<JrubyEventExtLibrary.RubyEvent> outputEvents = EVENT_SINKS.get(runId);
+        MatcherAssert.assertThat(outputEvents.size(), CoreMatchers.is(1));
+        MatcherAssert.assertThat(outputEvents.contains(testEvent), CoreMatchers.is(true));
+    }
+
     private Supplier<IRubyObject> mockOutputSupplier() {
         return () -> RubyUtil.RUBY.evalScriptlet(
             String.join(
@@ -161,6 +193,39 @@ private static <T> T setupPlugin(final RubyString name,
         }
     }
 
+    /**
+     * Mock filter that adds the value 'bar' to the field 'foo' for every event in the batch.
+     */
+    private static final class AddFieldFilter implements RubyIntegration.Filter {
+        @Override
+        public IRubyObject toRuby() {
+            return RubyUtil.RUBY.evalScriptlet(
+                String.join(
+                    "\n",
+                    "output = Object.new",
+                    "output.define_singleton_method(:multi_filter) do |batch|",
+                    "batch.each { |e| e.set('foo', 'bar')}",
+                    "end",
+                    "output"
+                )
+            );
+        }
+
+        @Override
+        public boolean hasFlush() {
+            return false;
+        }
+
+        @Override
+        public boolean periodicFlush() {
+            return false;
+        }
+
+        @Override
+        public void register() {
+        }
+    }
+
     /**
      * Mock filter that does not modify the batch.
      */
