diff --git a/Makefile b/Makefile
index b10e85408cf..6fc94955bfa 100644
--- a/Makefile
+++ b/Makefile
@@ -31,7 +31,7 @@ else
 TAR_OPTS=--wildcards
 endif
 
-TESTS=$(wildcard spec/support/*.rb spec/filters/*.rb spec/examples/*.rb spec/codecs/*.rb spec/conditionals/*.rb spec/event.rb spec/jar.rb)
+TESTS=$(wildcard spec/inputs/gelf.rb spec/support/*.rb spec/filters/*.rb spec/examples/*.rb spec/codecs/*.rb spec/conditionals/*.rb spec/event.rb spec/jar.rb)
 #spec/outputs/graphite.rb spec/outputs/email.rb)
 default:
 	@echo "Make targets you might be interested in:"
diff --git a/lib/logstash/inputs/gelf.rb b/lib/logstash/inputs/gelf.rb
index 186c8d8b0f8..bffcea60914 100644
--- a/lib/logstash/inputs/gelf.rb
+++ b/lib/logstash/inputs/gelf.rb
@@ -79,7 +79,10 @@ def udp_listener(output_queue)
         @logger.warn("Gelfd failed to parse a message skipping", :exception => ex, :backtrace => ex.backtrace)
         next
       end
-
+      
+      # Gelfd parser outputs null if it received and cached a non-final chunk
+      next if data.nil?    
+ 
       event = LogStash::Event.new(JSON.parse(data))
       event["host"] = client[3]
       if event["timestamp"].is_a?(Numeric)
diff --git a/spec/inputs/gelf.rb b/spec/inputs/gelf.rb
new file mode 100644
index 00000000000..3af278ff81a
--- /dev/null
+++ b/spec/inputs/gelf.rb
@@ -0,0 +1,52 @@
+
+require "test_utils"
+require "gelf"
+describe "inputs/gelf" do
+  extend LogStash::RSpec
+
+  describe "reads chunked gelf messages " do
+    port = 12209
+    host = "127.0.0.9"
+    chunksize = 1420
+    gelfclient = GELF::Notifier.new(host,port,chunksize)
+
+    config <<-CONFIG
+input {
+  gelf {
+    port => "#{port}"
+    host => "#{host}"
+  }
+}
+    CONFIG
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 while !pipeline.ready?
+      
+      # generate random characters (message is zipped!) from printable ascii ( SPACE till ~ )  
+      # to trigger gelf chunking
+      s = StringIO.new
+      for i in 1..2000 
+          s << 32 + rand(126-32)
+      end
+      large_random = s.string
+      
+      [ "hello", 
+        "world", 
+        large_random, 
+        "we survived gelf!" 
+      ].each do |m| 
+  	gelfclient.notify!( "short_message" => m )
+        # poll at most 10 times 
+        waits = 0 
+        while waits < 10 and queue.size == 0
+           sleep 0.1 
+           waits += 1
+        end
+        insist { queue.size } > 0  
+        insist { queue.pop["message"] } == m
+      end
+
+    end
+  end
+end
