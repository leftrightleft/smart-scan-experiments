diff --git a/lib/logstash/filters/kv.rb b/lib/logstash/filters/kv.rb
index a4a806849e8..bb0c1186f9b 100644
--- a/lib/logstash/filters/kv.rb
+++ b/lib/logstash/filters/kv.rb
@@ -103,6 +103,43 @@ class LogStash::Filters::KV < LogStash::Filters::Base
   #     filter { kv { target => "kv" } }
   config :target, :validate => :string, :default => '@fields'
 
+  # An array that specifies the parsed keys which should be added to event.
+  # By default all keys will be added.
+  #
+  # Example, to include only "from" and "to" from a source like "Hey, from=<abc>, to=def foo=bar"
+  # while "foo" key will not be added to event.
+  #
+  #     filter {
+  #       kv {
+  #         include_keys = [ "from", "to" ]
+  #       }
+  #     }
+  config :include_keys, :validate => :array, :default => []
+
+  # An array that specifies the parsed keys which should not be added to event.
+  # By default no keys will be excluded.
+  #
+  # Example, to exclude "from" and "to" from a source like "Hey, from=<abc>, to=def foo=bar"
+  # while "foo" key will be added to event.
+  #
+  #     filter {
+  #       kv {
+  #         exclude_keys = [ "from", "to" ]
+  #       }
+  #     }
+  config :exclude_keys, :validate => :array, :default => []
+
+  # A hash that specifies the default keys and their values that should be added to event
+  # in case these keys do no exist in the source field being parsed.
+  #
+  #     filter {
+  #       kv {
+  #         default_keys = [ "from", "logstash@example.com",
+  #                          "to", "default@dev.null" ]
+  #       }
+  #     }
+  config :default_keys, :validate => :hash, :default => {}
+
   def register
     @trim_re = Regexp.new("[#{@trim}]") if !@trim.nil?
 
@@ -119,7 +156,7 @@ def register
       if @fields
         logger.error("'fields' and 'source' are the same setting, but 'fields' is deprecated. Please use only 'source'")
       end
-      @fields=Array.new if @fields.nil?
+      @fields = Array.new if @fields.nil?
       @fields << @source
     end
 
@@ -128,7 +165,7 @@ def register
   def filter(event)
     return unless filter?(event)
 
-    kv_keys=Hash.new
+    kv_keys = Hash.new
 
     #TODO(electrical): Remove this loop when we remove the fields variable
     @fields.each do |fieldname|
@@ -143,12 +180,16 @@ def filter(event)
                        :type => value.class, :value => value)
       end # case value
     end
+
+    # Add default key-values for missing keys
+    kv_keys = @default_keys.merge(kv_keys)
+
     # If we have any keys, create/append the hash
     if kv_keys.length > 0
       if !event[@target].nil?
         event[@target].merge!(kv_keys)
       else
-        event[@target]= kv_keys
+        event[@target] = kv_keys
       end
       filter_matched(event)
     end
@@ -162,11 +203,10 @@ def parse(text, event, kv_keys)
     scan_re = Regexp.new("((?:\\\\ |[^"+@field_split+@value_split+"])+)["+@value_split+"](?:\"([^\"]+)\"|'([^']+)'|((?:\\\\ |[^"+@field_split+"])+))")
     text.scan(scan_re) do |key, v1, v2, v3|
       value = v1 || v2 || v3
-      if !@trim.nil?
-        value = value.gsub(@trim_re, "")
-      end
       key = @prefix + key
-      kv_keys[key] = value
+      next if not @include_keys.empty? and not @include_keys.include?(key)
+      next if @exclude_keys.include?(key)
+      kv_keys[key] = @trim.nil? ? value : value.gsub(@trim_re, "")
     end
     return kv_keys
   end
diff --git a/spec/filters/kv.rb b/spec/filters/kv.rb
index 9afdaa344d9..bd5e0784749 100644
--- a/spec/filters/kv.rb
+++ b/spec/filters/kv.rb
@@ -320,4 +320,74 @@
     end
   end
 
+  describe "test include_keys" do
+    config <<-CONFIG
+      filter {
+        kv {
+          include_keys => [ "foo", "singlequoted" ]
+        }
+      }
+    CONFIG
+
+    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world'" do
+      insist { subject["foo"] } == "bar"
+      insist { subject["singlequoted"] } == "hello world"
+      insist {subject['@fields'].count } == 2
+    end
+  end
+
+  describe "test exclude_keys" do
+    config <<-CONFIG
+      filter {
+        kv {
+          exclude_keys => [ "foo", "singlequoted" ]
+        }
+      }
+    CONFIG
+
+    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world'" do
+      insist { subject["hello"] } == "world"
+      insist { subject["baz"] } == "fizz"
+      insist { subject["doublequoted"] } == "hello world"
+      insist {subject['@fields'].count } == 3
+    end
+  end
+
+  describe "test include_keys and exclude_keys" do
+    config <<-CONFIG
+      filter {
+        kv {
+          include_keys => [ "foo", "singlequoted" ]
+          exclude_keys => [ "foo", "singlequoted" ]
+        }
+      }
+    CONFIG
+
+    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world'" do
+      insist {subject['@fields'].count } == 0
+    end
+  end
+
+
+  describe "test default_keys" do
+    config <<-CONFIG
+      filter {
+        kv {
+          default_keys => [ "foo", "xxx",
+                            "goo", "yyy" ]
+        }
+      }
+    CONFIG
+
+    sample "hello=world foo=bar baz=fizz doublequoted=\"hello world\" singlequoted='hello world'" do
+      insist { subject["hello"] } == "world"
+      insist { subject["foo"] } == "bar"
+      insist { subject["goo"] } == "yyy"
+      insist { subject["baz"] } == "fizz"
+      insist { subject["doublequoted"] } == "hello world"
+      insist { subject["singlequoted"] } == "hello world"
+      insist {subject['@fields'].count } == 6
+    end
+  end
+
 end
