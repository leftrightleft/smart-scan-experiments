diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index ce2c71d6644..eb04da4282f 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -3,14 +3,15 @@
 module LogStash
   class FilterDelegator
     extend Forwardable
-
-    def_delegators :@filter,
+    DELEGATED_METHODS = [
       :register,
       :close,
       :threadsafe?,
       :do_close,
       :do_stop,
       :periodic_flush
+    ]
+    def_delegators :@filter, *DELEGATED_METHODS
 
     def initialize(logger, klass, metric, *args)
       options = args.reduce({}, :merge)
@@ -20,7 +21,7 @@ def initialize(logger, klass, metric, *args)
       @filter = klass.new(options)
 
       # Scope the metrics to the plugin
-      namespaced_metric = metric.namespace(@filter.id.to_sym)
+      namespaced_metric = metric.namespace(@filter.plugin_unique_name.to_sym)
       @filter.metric = metric
 
       @metric_events = namespaced_metric.namespace(:events)
@@ -41,7 +42,7 @@ def multi_filter(events)
       # There is no garantee in the context of filter
       # that EVENTS_INT == EVENTS_OUT, see the aggregates and
       # the split filter
-      @metric_events.increment(:out, new_events.size) unless new_events.nil?
+      @metric_events.increment(:out, new_events.count { |event| !event.cancelled? })
 
       return new_events
     end
diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index 1666810bf95..614ba372a40 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -28,8 +28,6 @@ def initialize
       @metric_store = MetricStore.new
       @agent = nil
       start_periodic_snapshotting
-
-      @async_worker_pool
     end
 
     # The metric library will call this unique interface
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 7ac962dfeb7..50a5a9d49c7 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -22,7 +22,9 @@ def initialize(logger, klass, default_worker_count, metric, *args)
     output = @klass.new(*args)
 
     # Scope the metrics to the plugin
-    @metric = metric.namespace(output.id.to_sym)
+    namespaced_metric = metric.namespace(output.plugin_unique_name.to_sym)
+    @metric_events = namespaced_metric.namespace(:events)
+
 
     # We define this as an array regardless of threadsafety
     # to make reporting simpler, even though a threadsafe plugin will just have
@@ -114,17 +116,20 @@ def register
 
   def threadsafe_multi_receive(events)
     @events_received.increment(events.length)
-    @metric.increment(:events_in, events.length)
+    @metric_events.increment(:in, events.length)
 
     @threadsafe_worker.multi_receive(events)
+    @metric_events.increment(:out, events.length)
   end
 
   def worker_multi_receive(events)
     @events_received.increment(events.length)
+    @metric_events.increment(:in, events.length)
 
     worker = @worker_queue.pop
     begin
       worker.multi_receive(events)
+      @metric_events.increment(:out, events.length)
     ensure
       @worker_queue.push(worker)
     end
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 0ac1fc78ce5..d6c335e7279 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -59,6 +59,14 @@ def id
     (@params["id"].nil? || @params["id"].empty?) ? SecureRandom.uuid : @params["id"]
   end
 
+  # Return a unique_name, This is composed by the name of
+  # the plugin and the generated ID (of the configured one)
+  #
+  # @return [String] a unique name
+  def plugin_unique_name
+    "#{config_name}_#{id}"
+  end
+
   # close is called during shutdown, after the plugin worker
   # main task terminates
   def do_close
@@ -99,6 +107,13 @@ def metric
     @metric_plugin ||= enable_metric ? @metric : LogStash::Instrument::NullMetric.new
   end
 
+  # return the configured name of this plugin
+  # @return [String] The name of the plugin defined by `config_name`
+  def config_name
+    self.class.config_name
+  end
+
+
   # Look up a plugin by type and name.
   def self.lookup(type, name)
     path = "logstash/#{type}s/#{name}"
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
new file mode 100644
index 00000000000..94e499ff7f0
--- /dev/null
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -0,0 +1,156 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/filter_delegator"
+require "logstash/instrument/null_metric"
+require "logstash/event"
+
+describe LogStash::FilterDelegator do
+  let(:logger) { double(:logger) }
+  let(:filter_id) { "my-filter" }
+  let(:config) do
+    { "host" => "127.0.0.1", "id" => filter_id }
+  end
+  let(:metric) { LogStash::Instrument::NullMetric.new }
+  let(:events) { [LogStash::Event.new, LogStash::Event.new] }
+
+  before :each do
+    allow(metric).to receive(:namespace).with(anything).and_return(metric)
+  end
+
+  let(:plugin_klass) do
+    Class.new(LogStash::Filters::Base) do
+      config_name "super_plugin"
+      config :host, :validate => :string
+      def register; end
+    end
+  end
+
+  subject { described_class.new(logger, plugin_klass, metric, config) }
+
+  it "Create a plugin with the passed options" do
+    expect(plugin_klass).to receive(:new).with(config).and_return(plugin_klass.new(config))
+    described_class.new(logger, plugin_klass, metric, config)
+  end
+
+  context "when the plugin support flush" do
+    let(:plugin_klass) do
+      Class.new(LogStash::Filters::Base) do
+        config_name "super_plugin"
+        config :host, :validate => :string
+        def register; end
+        def flush(options = {}); @events ; end
+        def filter(event)
+          @events ||= []
+          @events << event
+        end
+      end
+    end
+
+    it "defines a flush method" do
+      expect(subject.respond_to?(:flush)).to be_truthy
+    end
+
+    context "when the flush return events" do
+      it "increments the out" do
+        subject.multi_filter([LogStash::Event.new])
+        expect(metric).to receive(:increment).with(:out, 1)
+        subject.flush({})
+      end
+    end
+
+    context "when the flush doesn't return anything" do
+      it "doesnt increment the out" do
+        expect(metric).not_to receive(:increment)
+        subject.flush({})
+      end
+    end
+
+    context "when the filter buffer events" do
+      let(:plugin_klass) do
+        Class.new(LogStash::Filters::Base) do
+          config_name "super_plugin"
+          config :host, :validate => :string
+          def register; end
+          def flush(options = {}); @events ; end
+          def filter(event)
+            # remove the event from the pipeline flow.
+            event.cancel
+            return
+          end
+        end
+      end
+
+      it "doesn't increment out" do
+        expect(metric).to receive(:increment).with(:in, events.size)
+        expect(metric).to receive(:increment).with(:out, 0 )
+
+        subject.multi_filter(events)
+      end
+    end
+
+    context "when the fitler create more events" do
+      let(:plugin_klass) do
+        Class.new(LogStash::Filters::Base) do
+          config_name "super_plugin"
+          config :host, :validate => :string
+          def register; end
+          def flush(options = {}); @events ; end
+
+          # naive split filter implementation
+          def filter(event)
+            event.cancel
+            2.times { yield LogStash::Event.new }
+          end
+        end
+      end
+
+      it "increments the in/out of the metric" do
+        expect(metric).to receive(:increment).with(:in, events.size)
+        expect(metric).to receive(:increment).with(:out, events.size * 2)
+
+        subject.multi_filter(events)
+      end
+    end
+  end
+
+  context "when the plugin doesnt support flush" do
+    let(:plugin_klass) do
+      Class.new(LogStash::Filters::Base) do
+        config_name "super_plugin"
+        config :host, :validate => :string
+        def register; end
+        def filter(event)
+          event
+        end
+      end
+    end
+
+    it "doesnt define a flush method" do
+      expect(subject.respond_to?(:flush)).to be_falsey
+    end
+
+    it "increments the in/out of the metric" do
+      expect(metric).to receive(:increment).with(:in, events.size)
+      expect(metric).to receive(:increment).with(:out, events.size)
+
+      subject.multi_filter(events)
+    end
+  end
+
+  context "#config_name" do
+    it "proxy the config_name to the class method" do
+      expect(subject.config_name).to eq("super_plugin")
+    end
+  end
+
+  context "delegate methods to the original plugin" do
+    # I am not testing the behavior of these methods
+    # this is done in the plugin tests. I just want to make sure
+    # the proxy delegates the methods.
+    LogStash::FilterDelegator::DELEGATED_METHODS.each do |method|
+      it "delegate method: `#{method}` to the filter" do
+        expect(subject.respond_to?(method))
+      end
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index c3683a9526a..524ad779ec9 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -21,6 +21,7 @@
       allow(out_inst).to receive(:multi_receive)
       allow(out_inst).to receive(:metric=).with(any_args)
       allow(out_inst).to receive(:id).and_return("a-simple-plugin")
+      allow(out_inst).to receive(:plugin_unique_name).and_return("hello-123")
       allow(logger).to receive(:debug).with(any_args)
     end
 
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index d594a84592a..8c38432bfce 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -529,26 +529,45 @@ class TestPipeline < LogStash::Pipeline
     end
   end
 
-  context "when collecting metric in the pipeline" do
+  context "when collecting metrics in the pipeline" do
     subject { described_class.new(config, { :metric => metric, :pipeline_id => pipeline_id }) }
     let(:pipeline_id) { :main }
     let(:metric) { LogStash::Instrument::Metric.new }
     let(:number_of_events) { 1000 }
+    let(:multiline_id) { "my-multiline" }
+    let(:multiline_id_2) { "my-multiline_2" }
+    let(:dummy_output_id) { "my-dummyoutput" }
+    let(:generator_id) { "my-generator" }
     let(:config) do
       <<-EOS
-      input { generator { count => #{number_of_events}} }
+      input {
+        generator {
+           count => #{number_of_events}
+           id => "#{generator_id}"
+        }
+      }
       filter {
          multiline {
+              id => "#{multiline_id}"
               pattern => "hello"
               what => next
           }
+          multiline {
+               id => "#{multiline_id_2}"
+               pattern => "hello"
+               what => next
+           }
+      }
+      output {
+        dummyoutput {
+          id => "#{dummy_output_id}"
+        }
       }
-      output { dummyoutput {} }
       EOS
     end
-    let(:dummyoutput) { DummyOutput.new }
+    let(:dummyoutput) { DummyOutput.new({ "id" => dummy_output_id }) }
 
-    before do
+    before :each do
       allow(DummyOutput).to receive(:new).with(any_args).and_return(dummyoutput)
       allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_return(LogStash::Inputs::Generator)
       allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_return(LogStash::Codecs::Plain)
@@ -557,30 +576,47 @@ class TestPipeline < LogStash::Pipeline
 
       # Reset the metric store
       LogStash::Instrument::Collector.instance.clear
-    end
 
-    it "populates the differents core metrics" do
-      t = Thread.new { subject.run }
+      Thread.new { subject.run }
       # make sure we have received all the generated events
-      sleep 0.01 while dummyoutput.events.size < number_of_events
+      sleep 0.1 while dummyoutput.events.size < number_of_events
+    end
 
-      collected_metric = LogStash::Instrument::Collector.instance.snapshot_metric.metric_store.get_with_path("stats/events")
+    after :each do
+      subject.shutdown
+    end
 
+    it "populates the differents core metrics" do
+      collected_metric = LogStash::Instrument::Collector.instance.snapshot_metric.metric_store.get_with_path("stats/events")
       expect(collected_metric[:stats][:events][:in].value).to eq(number_of_events)
       expect(collected_metric[:stats][:events][:filtered].value).to eq(number_of_events)
       expect(collected_metric[:stats][:events][:out].value).to eq(number_of_events)
     end
 
     it "populates the pipelines core metrics" do
-      t = Thread.new { subject.run }
-      # make sure we have received all the generated events
-      sleep 0.01 while dummyoutput.events.size < number_of_events
-
       collected_metric = LogStash::Instrument::Collector.instance.snapshot_metric.metric_store.get_with_path("stats/pipelines/")
 
       expect(collected_metric[:stats][:pipelines][:main][:events][:in].value).to eq(number_of_events)
       expect(collected_metric[:stats][:pipelines][:main][:events][:filtered].value).to eq(number_of_events)
       expect(collected_metric[:stats][:pipelines][:main][:events][:out].value).to eq(number_of_events)
     end
+
+    it "populates the filter metrics" do
+      collected_metric = LogStash::Instrument::Collector.instance.snapshot_metric.metric_store.get_with_path("stats/pipelines/")
+
+      plugin_name = "multiline_#{multiline_id}".to_sym
+      expect(collected_metric[:stats][:pipelines][:main][:plugins][:filters][plugin_name][:events][:in].value).to eq(number_of_events)
+      expect(collected_metric[:stats][:pipelines][:main][:plugins][:filters][plugin_name][:events][:out].value).to eq(number_of_events)
+
+      plugin_name = "multiline_#{multiline_id_2}".to_sym
+      expect(collected_metric[:stats][:pipelines][:main][:plugins][:filters][plugin_name][:events][:in].value).to eq(number_of_events)
+      expect(collected_metric[:stats][:pipelines][:main][:plugins][:filters][plugin_name][:events][:out].value).to eq(number_of_events)
+    end
+
+    it "populates the output metrics" do
+      collected_metric = LogStash::Instrument::Collector.instance.snapshot_metric.metric_store.get_with_path("stats/pipelines/")
+      plugin_name = "dummyoutput_#{dummy_output_id}".to_sym
+      expect(collected_metric[:stats][:pipelines][:main][:plugins][:outputs][plugin_name][:events][:out].value).to eq(number_of_events)
+    end
   end
 end
diff --git a/logstash-core/spec/logstash/plugin_spec.rb b/logstash-core/spec/logstash/plugin_spec.rb
index fa94ca7350d..3950fbcc6e3 100644
--- a/logstash-core/spec/logstash/plugin_spec.rb
+++ b/logstash-core/spec/logstash/plugin_spec.rb
@@ -222,4 +222,39 @@ def register; end
       end
     end
   end
+
+  describe "#plugin_unique_name" do
+    let(:plugin) do
+      Class.new(LogStash::Filters::Base,) do
+        config_name "simple_plugin"
+        config :host, :validate => :string
+
+        def register; end
+      end
+    end
+
+    let(:config) do
+      {
+        "host" => "127.0.0.1"
+      }
+    end
+
+    context "when the id is provided" do
+      let(:my_id) { "mysuper-plugin" }
+      let(:config) { super.merge({ "id" => my_id })}
+      subject { plugin.new(config) }
+
+      it "return a human readable ID" do
+        expect(subject.plugin_unique_name).to eq("simple_plugin_#{my_id}")
+      end
+    end
+
+    context "when the id is not provided provided" do
+      subject { plugin.new(config) }
+
+      it "return a human readable ID" do
+        expect(subject.plugin_unique_name).to match(/^simple_plugin_/)
+      end
+    end
+  end
 end
