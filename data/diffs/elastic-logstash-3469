diff --git a/ci/ci_test.sh b/ci/ci_test.sh
index c0eadda6424..7b7515c5a23 100755
--- a/ci/ci_test.sh
+++ b/ci/ci_test.sh
@@ -15,6 +15,11 @@ elif [[ $SELECTED_TEST_SUITE == $"all" ]]; then
   echo "Running all plugins tests"
   rake test:install-all     # Install all plugins in this logstash instance, including development dependencies
   rake test:plugins         # Run all plugins tests
+elif [[ $SELECTED_TEST_SUITE == "license" ]]; then
+  echo "License generation, install core"
+  rake test:install-core
+  echo "License generation, generating dependency license information"
+  rake license
 else
   echo "Running core tests"
   rake test:install-core    # Install core dependencies for testing.
diff --git a/rakelib/license.rake b/rakelib/license.rake
new file mode 100644
index 00000000000..7ce3e0bd256
--- /dev/null
+++ b/rakelib/license.rake
@@ -0,0 +1,16 @@
+# we need to call exit explicity  in order to set the proper exit code, otherwise
+# most common CI systems can not know whats up with this tests.
+require_relative "default_plugins"
+require_relative "license"
+
+namespace "license" do
+
+  desc "run core specs"
+  task "core" do
+    require 'yaml'
+    generate_license_information
+  end
+
+end
+
+task "license" => [ "license:core" ]
diff --git a/rakelib/license.rb b/rakelib/license.rb
new file mode 100644
index 00000000000..8c2dd39ba72
--- /dev/null
+++ b/rakelib/license.rb
@@ -0,0 +1,40 @@
+# we need to call exit explicity  in order to set the proper exit code, otherwise
+# most common CI systems can not know whats up with this tests.
+require_relative "default_plugins"
+require "rubygems/specification"
+require "bootstrap/environment"
+
+
+def all_installed_gems
+  ENV["GEM_HOME"] = ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
+  Gem.use_paths(LogStash::Environment.logstash_gem_home)
+
+  Gem::Specification.all = nil
+  all = Gem::Specification
+  Gem::Specification.reset
+  all
+end
+
+def gem_license_info(x)
+  license = {:name => x.name, :version => x.version.to_s, :homepage => x.homepage, :email => x.email}
+  if(x.license) #ah gem has license information
+    license[:license] = x.license
+  else
+    license_file =  Dir.glob(File.join(x.gem_dir,'LICENSE*')).first #see if there is a license file
+    if(license_file)
+      license[:license] = File.read(license_file)
+    else
+      license = license.merge({:license=> 'unknown', :gem_dir => x.gem_dir, :gem_path => x.files.join("\n")})
+    end
+  end
+  license
+end
+
+def generate_license_information
+  licenses = []
+  all_installed_gems.select {|y| y.gem_dir.include?('vendor') }.each do |x|
+    licenses.push(gem_license_info(x))
+  end
+  puts YAML.dump(licenses.sort{|u, v| u[:name] <=> v[:name] })
+end
+
