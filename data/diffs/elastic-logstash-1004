diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index dba1848bdc1..b04d7b13951 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -9,24 +9,6 @@ class LogStash::Filters::Base < LogStash::Plugin
 
   config_name "filter"
 
-  # Note that all of the specified routing options (type,tags.exclude\_tags,include\_fields,exclude\_fields)
-  # must be met in order for the event to be handled by the filter.
-
-  # The type to act on. If a type is given, then this filter will only
-  # act on messages with the same type. See any input plugin's "type"
-  # attribute for more.
-  # Optional.
-  config :type, :validate => :string, :default => "", :deprecated => "You can achieve this same behavior with the new conditionals, like: `if [type] == \"sometype\" { %PLUGIN% { ... } }`."
-
-  # Only handle events with all/any (controlled by include\_any config option) of these tags.
-  # Optional.
-  config :tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if \"sometag\" in [tags] { %PLUGIN% { ... } }`"
-
-  # Only handle events without all/any (controlled by exclude\_any config
-  # option) of these tags.
-  # Optional.
-  config :exclude_tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if !(\"sometag\" in [tags]) { %PLUGIN% { ... } }`"
-
   # If this filter is successful, add arbitrary tags to the event.
   # Tags can be dynamic and include parts of the event using the %{field}
   # syntax. Example:
@@ -121,8 +103,6 @@ class LogStash::Filters::Base < LogStash::Plugin
   # example would remove an additional, non-dynamic field.
   config :remove_field, :validate => :array, :default => []
 
-  RESERVED = ["type", "tags", "exclude_tags", "include_fields", "exclude_fields", "add_tag", "remove_tag", "add_field", "remove_field", "include_any", "exclude_any"]
-
   public
   def initialize(params)
     super
@@ -195,32 +175,6 @@ def filter_matched(event)
 
   protected
   def filter?(event)
-    if !@type.empty?
-      if event["type"] != @type
-        @logger.debug? and @logger.debug(["filters/#{self.class.name}: Skipping event because type doesn't match #{@type}", event])
-        return false
-      end
-    end
-
-    if !@tags.empty?
-      # this filter has only works on events with certain tags,
-      # and this event has no tags.
-      return false if !event["tags"]
-
-      # Is @tags a subset of the event's tags? If not, skip it.
-      if (event["tags"] & @tags).size != @tags.size
-        @logger.debug(["filters/#{self.class.name}: Skipping event because tags don't match #{@tags.inspect}", event])
-        return false
-      end
-    end
-
-    if !@exclude_tags.empty? && event["tags"]
-      if (diff_tags = (event["tags"] & @exclude_tags)).size != 0
-        @logger.debug(["filters/#{self.class.name}: Skipping event because tags contains excluded tags: #{diff_tags.inspect}", event])
-        return false
-      end
-    end
-
     return true
   end
 end # class LogStash::Filters::Base
diff --git a/lib/logstash/filters/grok.rb b/lib/logstash/filters/grok.rb
index f0ffcdbff9d..80b2b89348c 100644
--- a/lib/logstash/filters/grok.rb
+++ b/lib/logstash/filters/grok.rb
@@ -138,12 +138,6 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
   config_name "grok"
   milestone 3
 
-  # Specify a pattern to parse with. This will match the 'message' field.
-  #
-  # If you want to match other fields than message, use the 'match' setting.
-  # Multiple patterns is fine.
-  config :pattern, :validate => :array, :deprecated => "You should use this instead: match => { \"message\" => \"your pattern here\" }"
-
   # A hash of matches of field => value
   #
   # For example:
@@ -185,10 +179,6 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
   # If true, keep empty captures as event fields.
   config :keep_empty_captures, :validate => :boolean, :default => false
 
-  # If true, make single-value fields simply that value, not an array
-  # containing that one value.
-  config :singles, :validate => :boolean, :default => true, :deprecated => "This behavior is the default now, you don't need to set it."
-
   # Append values to the 'tags' field when there has been no
   # successful match
   config :tag_on_failure, :validate => :array, :default => ["_grokparsefailure"]
@@ -225,8 +215,7 @@ class LogStash::Filters::Grok < LogStash::Filters::Base
   public
   def initialize(params)
     super(params)
-    @match["message"] ||= []
-    @match["message"] += @pattern if @pattern # the config 'pattern' value (array)
+
     # a cache of capture name handler methods.
     @handlers = {}
   end
diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index 8ef29a5b112..99438d42171 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -22,20 +22,6 @@ class LogStash::Filters::Mutate < LogStash::Filters::Base
   #     }
   config :rename, :validate => :hash
 
-  # Remove one or more fields.
-  #
-  # Example:
-  #
-  #     filter {
-  #       mutate {
-  #         remove => [ "client" ]  # Removes the 'client' field
-  #       }
-  #     }
-  #
-  # This option is deprecated, instead use remove_field option available in all
-  # filters.
-  config :remove, :validate => :array, :deprecated => true
-
   # Replace a field with a new value. The new value can include %{foo} strings
   # to help you build a new value from other parts of the event.
   #
diff --git a/lib/logstash/inputs/base.rb b/lib/logstash/inputs/base.rb
index 9cdc9773737..b0e94395964 100644
--- a/lib/logstash/inputs/base.rb
+++ b/lib/logstash/inputs/base.rb
@@ -28,30 +28,9 @@ class LogStash::Inputs::Base < LogStash::Plugin
   # Set this to true to enable debugging on an input.
   config :debug, :validate => :boolean, :default => false
 
-  # The format of input data (plain, json, json_event)
-  config :format, :validate => ["plain", "json", "json_event", "msgpack_event"], :deprecated => "You should use the newer 'codec' setting instead."
-
   # The codec used for input data
   config :codec, :validate => :codec, :default => "plain"
 
-  # The character encoding used in this input. Examples include "UTF-8"
-  # and "cp1252"
-  #
-  # This setting is useful if your log files are in Latin-1 (aka cp1252)
-  # or in another character set other than UTF-8.
-  #
-  # This only affects "plain" format logs since json is UTF-8 already.
-  config :charset, :validate => ::Encoding.name_list, :deprecated => true
-
-  # If format is "json", an event sprintf string to build what
-  # the display @message should be given (defaults to the raw JSON).
-  # sprintf format strings look like %{fieldname}
-  #
-  # If format is "json_event", ALL fields except for @type
-  # are expected to be present. Not receiving all fields
-  # will cause unexpected results.
-  config :message_format, :validate => :string, :deprecated => true
-
   # Add any number of arbitrary tags to your event.
   #
   # This can help with processing later.
@@ -69,25 +48,6 @@ def initialize(params={})
     @threadable = false
     config_init(params)
     @tags ||= []
-
-    if @charset && @codec.class.get_config.include?("charset")
-      # charset is deprecated on inputs, but provide backwards compatibility
-      # by copying the charset setting into the codec.
-
-      @logger.info("Copying input's charset setting into codec", :input => self, :codec => @codec)
-      charset = @charset
-      @codec.instance_eval { @charset = charset }
-    end
-
-    # Backwards compat for the 'format' setting
-    case @format
-      when "plain"; # do nothing
-      when "json"
-        @codec = LogStash::Plugin.lookup("codec", "json").new
-      when "json_event"
-        @codec = LogStash::Plugin.lookup("codec", "oldlogstashjson").new
-    end
-
   end # def initialize
 
   public
diff --git a/lib/logstash/inputs/redis.rb b/lib/logstash/inputs/redis.rb
index 47545fccf6e..9cc6899b771 100644
--- a/lib/logstash/inputs/redis.rb
+++ b/lib/logstash/inputs/redis.rb
@@ -22,10 +22,6 @@ class LogStash::Inputs::Redis < LogStash::Inputs::Threadable
 
   default :codec, "json"
 
-  # Name is used for logging in case there are multiple instances.
-  # This feature has no real function and will be removed in future versions.
-  config :name, :validate => :string, :default => "default", :deprecated => true
-
   # The hostname of your redis server.
   config :host, :validate => :string, :default => "127.0.0.1"
 
@@ -41,10 +37,6 @@ class LogStash::Inputs::Redis < LogStash::Inputs::Threadable
   # Password to authenticate with. There is no authentication by default.
   config :password, :validate => :password
 
-  # The name of the redis queue (we'll use BLPOP against this).
-  # TODO: remove soon.
-  config :queue, :validate => :string, :deprecated => true
-
   # The name of a redis list or channel.
   # TODO: change required to true
   config :key, :validate => :string, :required => false
@@ -64,17 +56,6 @@ def register
     @redis = nil
     @redis_url = "redis://#{@password}@#{@host}:#{@port}/#{@db}"
 
-    # TODO remove after setting key and data_type to true
-    if @queue
-      if @key or @data_type
-        raise RuntimeError.new(
-          "Cannot specify queue parameter and key or data_type"
-        )
-      end
-      @key = @queue
-      @data_type = 'list'
-    end
-
     if not @key or not @data_type
       raise RuntimeError.new(
         "Must define queue, or key and data_type parameters"
@@ -86,11 +67,9 @@ def register
   end # def register
 
   # A string used to identify a redis instance in log messages
-  # TODO(sissel): Use instance variables for this once the @name config
-  # option is removed.
   private
   def identity
-    @name || "#{@redis_url} #{@data_type}:#{@key}"
+    "#{@redis_url} #{@data_type}:#{@key}"
   end
 
   private
diff --git a/lib/logstash/inputs/s3.rb b/lib/logstash/inputs/s3.rb
index 4f30937367b..bceb45a3e9e 100644
--- a/lib/logstash/inputs/s3.rb
+++ b/lib/logstash/inputs/s3.rb
@@ -27,12 +27,6 @@ class LogStash::Inputs::S3 < LogStash::Inputs::Base
   # The name of the S3 bucket.
   config :bucket, :validate => :string, :required => true
 
-  # The AWS region for your bucket.
-  config :region, :validate => ["us-east-1", "us-west-1", "us-west-2",
-                                "eu-west-1", "ap-southeast-1", "ap-southeast-2",
-                                "ap-northeast-1", "sa-east-1", "us-gov-west-1"],
-                                :deprecated => "'region' has been deprecated in favor of 'region_endpoint'"
-
   # The AWS region for your bucket.
   config :region_endpoint, :validate => ["us-east-1", "us-west-1", "us-west-2",
                                 "eu-west-1", "ap-southeast-1", "ap-southeast-2",
@@ -64,8 +58,6 @@ def register
     require "digest/md5"
     require "aws-sdk"
 
-    @region_endpoint = @region if @region && !@region.empty?
-
     @logger.info("Registering s3 input", :bucket => @bucket, :region_endpoint => @region_endpoint)
 
     if @credentials.nil?
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 6c6142851d9..64d34378355 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -12,20 +12,6 @@ class LogStash::Outputs::Base < LogStash::Plugin
 
   config_name "output"
 
-  # The type to act on. If a type is given, then this output will only
-  # act on messages with the same type. See any input plugin's "type"
-  # attribute for more.
-  # Optional.
-  config :type, :validate => :string, :default => "", :deprecated => "You can achieve this same behavior with the new conditionals, like: `if [type] == \"sometype\" { %PLUGIN% { ... } }`."
-
-  # Only handle events with all of these tags.  Note that if you specify
-  # a type, the event must also match that type.
-  # Optional.
-  config :tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if \"sometag\" in [tags] { %PLUGIN% { ... } }`"
-
-  # Only handle events without any of these tags. Note this check is additional to type and tags.
-  config :exclude_tags, :validate => :array, :default => [], :deprecated => "You can achieve similar behavior with the new conditionals, like: `if !(\"sometag\" in [tags]) { %PLUGIN% { ... } }`"
-
   # The codec used for output data
   config :codec, :validate => :codec, :default => "plain"
 
@@ -92,29 +78,6 @@ def handle_worker(event)
 
   private
   def output?(event)
-    if !@type.empty?
-      if event["type"] != @type
-        @logger.debug? and @logger.debug(["outputs/#{self.class.name}: Dropping event because type doesn't match #{@type}", event])
-        return false
-      end
-    end
-
-    if !@tags.empty?
-      return false if !event["tags"]
-      @include_method = :any?
-      if !@tags.send(@include_method) {|tag| event["tags"].include?(tag)}
-        @logger.debug? and @logger.debug("outputs/#{self.class.name}: Dropping event because tags don't match #{@tags.inspect}", event)
-        return false
-      end
-    end
-
-    if !@exclude_tags.empty? && event["tags"]
-      if @exclude_tags.send(@exclude_method) {|tag| event["tags"].include?(tag)}
-        @logger.debug? and @logger.debug("outputs/#{self.class.name}: Dropping event because tags contains excluded tags: #{exclude_tags.inspect}", event)
-        return false
-      end
-    end
-
     return true
   end
 end # class LogStash::Outputs::Base
diff --git a/lib/logstash/outputs/elasticsearch.rb b/lib/logstash/outputs/elasticsearch.rb
index 28a589ec3d5..88db5d53d91 100644
--- a/lib/logstash/outputs/elasticsearch.rb
+++ b/lib/logstash/outputs/elasticsearch.rb
@@ -111,10 +111,6 @@ class LogStash::Outputs::ElasticSearch < LogStash::Outputs::Base
   # default.
   config :embedded_http_port, :validate => :string, :default => "9200-9300"
 
-  # This setting no longer does anything. It exists to keep config validation
-  # from failing. It will be removed in future versions.
-  config :max_inflight_requests, :validate => :number, :default => 50, :deprecated => true
-
   # The node name Elasticsearch will use when joining a cluster.
   #
   # By default, this is generated internally by the ES client.
diff --git a/lib/logstash/outputs/email.rb b/lib/logstash/outputs/email.rb
index 340e2f93d0a..a84dcb30c59 100644
--- a/lib/logstash/outputs/email.rb
+++ b/lib/logstash/outputs/email.rb
@@ -8,14 +8,6 @@ class LogStash::Outputs::Email < LogStash::Outputs::Base
   config_name "email"
   milestone 1
 
-  # This setting is deprecated in favor of logstash's "conditionals" feature
-  # If you were using this setting previously, please use conditionals instead.
-  #
-  # If you need help converting your older 'match' setting to a conditional,
-  # I welcome you to join the #logstash irc channel on freenode or to email
-  # the logstash-users@googlegroups.com mailling list and ask for help! :)
-  config :match, :validate => :hash, :deprecated => true
-
   # Who to send this email to?
   # A fully qualified email address to send to
   #
diff --git a/lib/logstash/outputs/redis.rb b/lib/logstash/outputs/redis.rb
index 6bde3e3667d..9fbcab870c7 100644
--- a/lib/logstash/outputs/redis.rb
+++ b/lib/logstash/outputs/redis.rb
@@ -18,11 +18,6 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   config_name "redis"
   milestone 2
 
-  # Name is used for logging in case there are multiple instances.
-  # TODO: delete
-  config :name, :validate => :string, :default => 'default',
-    :deprecated => true
-
   # The hostname(s) of your redis server(s). Ports may be specified on any
   # hostname, which will override the global port config.
   #
@@ -48,11 +43,6 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   # Password to authenticate with.  There is no authentication by default.
   config :password, :validate => :password
 
-  # The name of the redis queue (we'll use RPUSH on this). Dynamic names are
-  # valid here, for example "logstash-%{type}"
-  # TODO: delete
-  config :queue, :validate => :string, :deprecated => true
-
   # The name of a redis list or channel. Dynamic names are
   # valid here, for example "logstash-%{type}".
   # TODO set required true
@@ -97,17 +87,6 @@ class LogStash::Outputs::Redis < LogStash::Outputs::Base
   def register
     require 'redis'
 
-    # TODO remove after setting key and data_type to true
-    if @queue
-      if @key or @data_type
-        raise RuntimeError.new(
-          "Cannot specify queue parameter and key or data_type"
-        )
-      end
-      @key = @queue
-      @data_type = 'list'
-    end
-
     if not @key or not @data_type
       raise RuntimeError.new(
         "Must define queue, or key and data_type parameters"
diff --git a/lib/logstash/outputs/stdout.rb b/lib/logstash/outputs/stdout.rb
index 34afbc5ec4e..481121fd9fe 100644
--- a/lib/logstash/outputs/stdout.rb
+++ b/lib/logstash/outputs/stdout.rb
@@ -14,28 +14,10 @@ class LogStash::Outputs::Stdout < LogStash::Outputs::Base
   default :codec, "line"
 
   # Enable debugging. Tries to pretty-print the entire event object.
-  config :debug, :validate => :boolean, :default => false
-
-  # Debug output format: ruby (default), json
-  config :debug_format, :default => "ruby", :validate => ["ruby", "dots", "json"], :deprecated => true
-
-  # The message to emit to stdout.
-  config :message, :validate => :string, :deprecated => "You can use the 'line' codec instead. For example: output { stdout { codec => line { format => \"%{somefield} your message\" } } }"
+  config :debug, :validate => :boolean, :default => false, :deprecated => "This setting has no effect. Please use `codec => rubydebug` if you wish to have the original behavior this setting provided."
 
   public
   def register
-    if @debug
-      require "logstash/codecs/rubydebug"
-      require "logstash/codecs/dots"
-      require "logstash/codecs/json"
-      case @debug_format
-        when "ruby"; @codec = LogStash::Codecs::RubyDebug.new
-        when "json"; @codec = LogStash::Codecs::JSON.new
-        when "dots"; @codec = LogStash::Codecs::Dots.new
-      end
-    elsif @message
-      @codec = LogStash::Codecs::Line.new("format" => @message)
-    end
     @codec.on_event do |event|
       $stdout.write(event)
     end
diff --git a/lib/logstash/outputs/syslog.rb b/lib/logstash/outputs/syslog.rb
index 988ebc9ede6..e5871563fc3 100644
--- a/lib/logstash/outputs/syslog.rb
+++ b/lib/logstash/outputs/syslog.rb
@@ -67,9 +67,6 @@ class LogStash::Outputs::Syslog < LogStash::Outputs::Base
   # source host for syslog message
   config :sourcehost, :validate => :string, :default => "%{host}"
 
-  # timestamp for syslog message
-  config :timestamp, :validate => :string, :default => "%{@timestamp}", :deprecated => "This setting is no longer necessary. The RFC setting will determine what time format is used."
-
   # application name for syslog message
   config :appname, :validate => :string, :default => "LOGSTASH"
 
diff --git a/lib/logstash/outputs/tcp.rb b/lib/logstash/outputs/tcp.rb
index 5176de967b0..10ecb17c55c 100644
--- a/lib/logstash/outputs/tcp.rb
+++ b/lib/logstash/outputs/tcp.rb
@@ -31,14 +31,6 @@ class LogStash::Outputs::Tcp < LogStash::Outputs::Base
   # `client` connects to a server.
   config :mode, :validate => ["server", "client"], :default => "client"
 
-  # The format to use when writing events to the file. This value
-  # supports any string and can include %{name} and other dynamic
-  # strings.
-  #
-  # If this setting is omitted, the full json representation of the
-  # event will be written as a single line.
-  config :message_format, :validate => :string, :deprecated => true
-
   class Client
     public
     def initialize(socket, logger)
diff --git a/spec/event.rb b/spec/event.rb
index a9c1ed2fa53..dc577be236f 100644
--- a/spec/event.rb
+++ b/spec/event.rb
@@ -163,7 +163,7 @@
     puts "event @timestamp parse rate: #{count / duration}/sec"
   end
 
-  context "acceptable @timestamp formats" do
+  context "acceptable @timestamp formats", :if => RUBY_ENGINE == "jruby" do
     subject { LogStash::Event.new }
 
     formats = [ 
diff --git a/spec/examples/fail2ban.rb b/spec/examples/fail2ban.rb
index 0e5960fda42..2c04f96c68d 100644
--- a/spec/examples/fail2ban.rb
+++ b/spec/examples/fail2ban.rb
@@ -8,14 +8,11 @@
   config <<-CONFIG
     filter {
       grok {
-        pattern => "^%{TIMESTAMP_ISO8601:timestamp} fail2ban\.actions: %{WORD:level} \\[%{WORD:program}\\] %{WORD:action} %{IP:ip}"
-        singles => true
+        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} fail2ban\.actions: %{WORD:level} \\[%{WORD:program}\\] %{WORD:action} %{IP:ip}" }
       }
       date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
-      }
-      mutate {
-        remove => timestamp
+        remove_field => "timestamp"
       }
     }
   CONFIG
diff --git a/spec/examples/graphite-input.rb b/spec/examples/graphite-input.rb
index eb78318813d..898bf323270 100644
--- a/spec/examples/graphite-input.rb
+++ b/spec/examples/graphite-input.rb
@@ -15,14 +15,11 @@
     # }
     filter {
       grok {
-        pattern => "%{DATA:name} %{NUMBER:value:float} %{POSINT:ts}"
-        singles => true
+        match => { "message" => "%{DATA:name} %{NUMBER:value:float} %{POSINT:ts}" }
       }
       date {
         match => ["ts", UNIX]
-      }
-      mutate {
-        remove => ts
+        remove_field => "ts"
       }
     }
   CONFIG
diff --git a/spec/examples/parse-apache-logs.rb b/spec/examples/parse-apache-logs.rb
index 2bc2a539ecb..ba24e03f53e 100644
--- a/spec/examples/parse-apache-logs.rb
+++ b/spec/examples/parse-apache-logs.rb
@@ -8,8 +8,7 @@
   config <<-CONFIG
     filter {
       grok {
-        pattern => "%{COMBINEDAPACHELOG}"
-        singles => true
+        match => { "message" => "%{COMBINEDAPACHELOG}" }
       }
       date {
         match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
diff --git a/spec/examples/parse-haproxy-logs.rb b/spec/examples/parse-haproxy-logs.rb
index 33bc83954fd..93523da2ff5 100644
--- a/spec/examples/parse-haproxy-logs.rb
+++ b/spec/examples/parse-haproxy-logs.rb
@@ -8,7 +8,7 @@
   config <<-CONFIG
   filter {
     grok {
-      pattern => "%{HAPROXYHTTP}"
+      match => { "message" => "%{HAPROXYHTTP}" }
     }
   }
   CONFIG
diff --git a/spec/examples/syslog.rb b/spec/examples/syslog.rb
index 885cf9467f7..f13d350c372 100644
--- a/spec/examples/syslog.rb
+++ b/spec/examples/syslog.rb
@@ -5,29 +5,16 @@
 
   config <<-'CONFIG'
     filter {
-      grok {
-          type => "syslog"
-          singles => true
-          pattern => [ "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" ]
-          add_field => [ "received_at", "%{@timestamp}" ]
-          add_field => [ "received_from", "%{source_host}" ]
-      }
-      syslog_pri {
-          type => "syslog"
-      }
-      date {
-          type => "syslog"
-          match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
-      }
-      mutate {
-          type => "syslog"
-          exclude_tags => "_grokparsefailure"
-          replace => [ "source_host", "%{syslog_hostname}" ]
-          replace => [ "message", "%{syslog_message}" ]
-      }
-      mutate {
-          type => "syslog"
-          remove => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
+      if [type] == "syslog" {
+        grok {
+          match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:host} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:message}" }
+          overwrite => [ "message", "host" ]
+        }
+        syslog_pri { }
+        date {
+            match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
+            remove_field => "syslog_timestamp"
+        }
       }
     }
   CONFIG
diff --git a/spec/filters/clone.rb b/spec/filters/clone.rb
index 83152f52c36..e491eb8260d 100644
--- a/spec/filters/clone.rb
+++ b/spec/filters/clone.rb
@@ -8,9 +8,10 @@
     type "original"
     config <<-CONFIG
       filter {
-        clone {
-          type => "original"
-          clones => ["clone", "clone", "clone"]
+        if [type] == "original" {
+          clone {
+            clones => ["clone", "clone", "clone"]
+          }
         }
       }
     CONFIG
@@ -32,12 +33,12 @@
   describe "Complex use" do
     config <<-CONFIG
       filter {
-        clone {
-          type => "nginx-access"
-          tags => ['TESTLOG']
-          clones => ["nginx-access-clone1", "nginx-access-clone2"]
-          add_tag => ['RABBIT','NO_ES']
-          remove_tag => ["TESTLOG"]
+        if [type] == "nginx-access" and "TESTLOG" in [tags] {
+          clone {
+            clones => ["nginx-access-clone1", "nginx-access-clone2"]
+            add_tag => ['RABBIT','NO_ES']
+            remove_tag => ["TESTLOG"]
+          }
         }
       }
     CONFIG
diff --git a/spec/filters/environment.rb b/spec/filters/environment.rb
index d0d54505de7..1a40ad10022 100644
--- a/spec/filters/environment.rb
+++ b/spec/filters/environment.rb
@@ -27,9 +27,10 @@
     # At this time, only filters are supported.
     config <<-CONFIG
       filter {
-        environment {
-          type => "foo"
-          add_field_from_env => [ "newfield", "MY_ENV_VAR" ]
+        if [type] == "foo" {
+          environment {
+            add_field_from_env => [ "newfield", "MY_ENV_VAR" ]
+          }
         }
       }
     CONFIG
diff --git a/spec/filters/grep.rb b/spec/filters/grep.rb
index dae37a3deb6..0308753c070 100644
--- a/spec/filters/grep.rb
+++ b/spec/filters/grep.rb
@@ -252,23 +252,6 @@
     end
   end
 
-  #LOGSTASH-599
-  describe "drop line based on type and tags 'matching' only but otherwise pattern matching" do
-    config <<-CONFIG
-    filter {
-      grep {
-        type => "testing"
-        tags => ["_grokparsefailure"]
-        negate => true
-      }
-    }
-    CONFIG
-
-    sample("type" => "testing", "tags" => ["_grokparsefailure"], "str" => "test") do
-      insist { subject }.nil?
-    end
-  end
-
   #LOGSTASH-894 and LOGSTASH-919
   describe "repeat a field in match config, similar to piped grep command line" do
     config <<-CONFIG
diff --git a/spec/filters/grok.rb b/spec/filters/grok.rb
index 45cfe3f93b5..d3c13f2b4e5 100644
--- a/spec/filters/grok.rb
+++ b/spec/filters/grok.rb
@@ -10,8 +10,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message", "%{SYSLOGLINE}" ]
-          singles => true
+          match => { "message" => "%{SYSLOGLINE}" }
           overwrite => [ "message" ]
         }
       }
@@ -33,8 +32,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{SYSLOG5424LINE}" ]
-          singles => true
+          match => { "message" =>  "%{SYSLOG5424LINE}" }
         }
       }
     CONFIG
@@ -135,7 +133,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "(?:hello|world) %{NUMBER}" ]
+          match => { "message" =>  "(?:hello|world) %{NUMBER}" }
           named_captures_only => false
         }
       }
@@ -150,8 +148,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{NUMBER:foo:int} %{NUMBER:bar:float}" ]
-          singles => true
+          match => { "message" =>  "%{NUMBER:foo:int} %{NUMBER:bar:float}" }
         }
       }
     CONFIG
@@ -168,9 +165,8 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{FIZZLE=\\d+}" ]
+          match => { "message" =>  "%{FIZZLE=\\d+}" }
           named_captures_only => false
-          singles => true
         }
       }
     CONFIG
@@ -184,10 +180,9 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{WORD:word}" ]
-          match => [ "examplefield", "%{NUMBER:num}" ]
+          match => { "message" =>  "%{WORD:word}" }
+          match => { "examplefield" => "%{NUMBER:num}" }
           break_on_match => false
-          singles => true
         }
       }
     CONFIG
@@ -202,8 +197,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "matchme %{NUMBER:fancy}" ]
-          singles => true
+          match => { "message" =>  "matchme %{NUMBER:fancy}" }
           add_field => [ "new_field", "%{fancy}" ]
         }
       }
@@ -225,7 +219,7 @@
       config <<-CONFIG
         filter {
           grok {
-            match => [ "message",  "1=%{WORD:foo1} *(2=%{WORD:foo2})?" ]
+            match => { "message" =>  "1=%{WORD:foo1} *(2=%{WORD:foo2})?" }
           }
         }
       CONFIG
@@ -243,7 +237,7 @@
       config <<-CONFIG
         filter {
           grok {
-            match => [ "message",  "1=%{WORD:foo1} *(2=%{WORD:foo2})?" ]
+            match => { "message" =>  "1=%{WORD:foo1} *(2=%{WORD:foo2})?" }
             keep_empty_captures => true
           }
         }
@@ -264,9 +258,8 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "Hello %{WORD}. %{WORD:foo}" ]
+          match => { "message" =>  "Hello %{WORD}. %{WORD:foo}" }
           named_captures_only => false
-          singles => true
         }
       }
     CONFIG
@@ -284,8 +277,7 @@
       config <<-'CONFIG'
         filter {
           grok {
-            singles => true
-            match => [ "message",  "(?<foo>\w+)" ]
+            match => { "message" =>  "(?<foo>\w+)" }
           }
         }
       CONFIG
@@ -299,8 +291,7 @@
       config <<-'CONFIG'
         filter {
           grok {
-            singles => true
-            match => [ "message",  "(?<timestamp>%{DATE_EU} %{TIME})" ]
+            match => { "message" =>  "(?<timestamp>%{DATE_EU} %{TIME})" }
           }
         }
       CONFIG
@@ -316,7 +307,7 @@
     config <<-'CONFIG'
       filter {
         grok {
-          match => [ "status", "^403$" ]
+          match => { "status" => "^403$" }
           add_tag => "four_oh_three"
         }
       }
@@ -332,7 +323,7 @@
     config <<-'CONFIG'
       filter {
         grok {
-          match => [ "version", "^1.0$" ]
+          match => { "version" => "^1.0$" }
           add_tag => "one_point_oh"
         }
       }
@@ -348,7 +339,7 @@
     config <<-'CONFIG'
       filter {
         grok {
-          pattern => "%{LOGLEVEL:level}: error!"
+          match => { "message" => "%{LOGLEVEL:level}: error!" }
         }
       }
     CONFIG
@@ -376,7 +367,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "matchme %{NUMBER:fancy}" ]
+          match => { "message" =>  "matchme %{NUMBER:fancy}" }
           tag_on_failure => false
         }
       }
@@ -395,8 +386,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{DATE_EU:stimestamp}" ]
-          singles => true
+          match => { "message" =>  "%{DATE_EU:stimestamp}" }
         }
       }
     CONFIG
@@ -410,8 +400,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message",  "%{WORD:foo-bar}" ]
-          singles => true
+          match => { "message" =>  "%{WORD:foo-bar}" }
         }
       }
     CONFIG
@@ -436,8 +425,7 @@
       }
       filter {
         grok {
-          match => [ "message", "%{SYSLOGLINE}" ]
-          singles => true
+          match => { "message" => "%{SYSLOGLINE}" }
           overwrite => [ "message" ]
         }
       }
@@ -456,8 +444,7 @@
     config <<-CONFIG
       filter {
         grok {
-          match => [ "message", "%{INT:foo}|%{WORD:foo}" ]
-          singles => true
+          match => { "message" => "%{INT:foo}|%{WORD:foo}" }
         }
       }
     CONFIG
diff --git a/spec/filters/metrics.rb b/spec/filters/metrics.rb
index de75c91701d..d7b453317a1 100644
--- a/spec/filters/metrics.rb
+++ b/spec/filters/metrics.rb
@@ -83,31 +83,6 @@
     end
   end
 
-  context "with multiple instances" do
-    it "counts should be independent" do
-      config_tag1 = {"meter" => ["http.%{response}"], "tags" => ["tag1"]}
-      config_tag2 = {"meter" => ["http.%{response}"], "tags" => ["tag2"]}
-      filter_tag1 = LogStash::Filters::Metrics.new config_tag1
-      filter_tag2 = LogStash::Filters::Metrics.new config_tag2
-      event_tag1 = LogStash::Event.new({"response" => 200, "tags" => [ "tag1" ]})
-      event_tag2 = LogStash::Event.new({"response" => 200, "tags" => [ "tag2" ]})
-      event2_tag2 = LogStash::Event.new({"response" => 200, "tags" => [ "tag2" ]})
-      filter_tag1.register
-      filter_tag2.register
-
-      [event_tag1, event_tag2, event2_tag2].each do |event|
-        filter_tag1.filter event
-        filter_tag2.filter event
-      end
-
-      events_tag1 = filter_tag1.flush
-      events_tag2 = filter_tag2.flush
-
-      insist { events_tag1.first["http.200.count"] } == 1
-      insist { events_tag2.first["http.200.count"] } == 2
-    end
-  end
-
   context "with timer config" do
     context "on the first flush" do
       subject {
diff --git a/spec/filters/mutate.rb b/spec/filters/mutate.rb
index 61f0c76e72a..c56d7f9f1ab 100644
--- a/spec/filters/mutate.rb
+++ b/spec/filters/mutate.rb
@@ -16,7 +16,7 @@
           replace => [ "newfield", "newnew" ]
           update => [ "nosuchfield", "weee" ]
           update => [ "updateme", "updated" ]
-          remove => [ "removeme" ]
+          remove_field => [ "removeme" ]
         }
       }
     CONFIG
@@ -52,7 +52,7 @@
     config '
       filter {
         mutate {
-          remove => [ "remove-me", "remove-me2", "diedie", "[one][two]" ]
+          remove_field => [ "remove-me", "remove-me2", "diedie", "[one][two]" ]
         }
       }'
 
diff --git a/spec/filters/noop.rb b/spec/filters/noop.rb
index 810d2fbab12..b470fcd4659 100644
--- a/spec/filters/noop.rb
+++ b/spec/filters/noop.rb
@@ -20,130 +20,13 @@
     end
   end
 
-  describe "type parsing" do
-    config <<-CONFIG
-    filter {
-      noop {
-        type => "noop"
-        add_tag => ["test"]
-      }
-    }
-    CONFIG
-
-    sample("type" => "noop") do
-      insist { subject["tags"] } == ["test"]
-    end
-
-    sample("type" => "not_noop") do
-      insist { subject["tags"] }.nil?
-    end
-  end
-
-  describe "tags parsing with one tag" do
-    config <<-CONFIG
-    filter {
-      noop {
-        type => "noop"
-        tags => ["t1"]
-        add_tag => ["test"]
-      }
-    }
-    CONFIG
-
-    sample("type" => "noop") do
-      insist { subject["tags"] }.nil?
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject["tags"] } == ["t1", "t2", "test"]
-    end
-  end
-
-  describe "tags parsing with multiple tags" do
-    config <<-CONFIG
-    filter {
-      noop {
-        type => "noop"
-        tags => ["t1", "t2"]
-        add_tag => ["test"]
-      }
-    }
-    CONFIG
-
-    sample("type" => "noop") do
-      insist { subject["tags"] }.nil?
-    end
-
-    sample("type" => "noop", "tags" => ["t1"]) do
-      insist { subject["tags"] } == ["t1"]
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject["tags"] } == ["t1", "t2", "test"]
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t2", "t3"]) do
-      insist { subject["tags"] } == ["t1", "t2", "t3", "test"]
-    end
-  end
-
-  describe "exclude_tags with 1 tag" do
-    config <<-CONFIG
-    filter {
-      noop {
-        type => "noop"
-        tags => ["t1"]
-        add_tag => ["test"]
-        exclude_tags => ["t2"]
-      }
-    }
-    CONFIG
-
-    sample("type" => "noop") do
-      insist { subject["tags"] }.nil?
-    end
-
-    sample("type" => "noop", "tags" => ["t1"]) do
-      insist { subject["tags"] } == ["t1", "test"]
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t2"]) do
-      insist { subject["tags"] } == ["t1", "t2"]
-    end
-  end
-
-  describe "exclude_tags with >1 tags" do
-    config <<-CONFIG
-    filter {
-      noop {
-        type => "noop"
-        tags => ["t1"]
-        add_tag => ["test"]
-        exclude_tags => ["t2", "t3"]
-      }
-    }
-    CONFIG
-
-    sample("type" => "noop", "tags" => ["t1", "t2", "t4"]) do
-      insist { subject["tags"] } == ["t1", "t2", "t4"]
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t3", "t4"]) do
-      insist { subject["tags"] } == ["t1", "t3", "t4"]
-    end
-
-    sample("type" => "noop", "tags" => ["t1", "t4", "t5"]) do
-      insist { subject["tags"] } == ["t1", "t4", "t5", "test"]
-    end
-  end
-
   describe "remove_tag" do
     config <<-CONFIG
     filter {
-      noop {
-        type => "noop"
-        tags => ["t1"]
-        remove_tag => ["t2", "t3"]
+      if [type] == "noop" and "t1" in [tags] {
+        noop {
+          remove_tag => ["t2", "t3"]
+        }
       }
     }
     CONFIG
@@ -164,10 +47,10 @@
   describe "remove_tag with dynamic value" do
     config <<-CONFIG
     filter {
-      noop {
-        type => "noop"
-        tags => ["t1"]
-        remove_tag => ["%{blackhole}"]
+      if [type] == "noop" and "t1" in [tags] {
+        noop {
+          remove_tag => ["%{blackhole}"]
+        }
       }
     }
     CONFIG
@@ -180,9 +63,10 @@
   describe "remove_field" do
     config <<-CONFIG
     filter {
-      noop {
-        type => "noop"
-        remove_field => ["t2", "t3"]
+      if [type] == "noop" {
+        noop {
+          remove_field => ["t2", "t3"]
+        }
       }
     }
     CONFIG
@@ -206,9 +90,10 @@
   describe "remove_field with dynamic value in field name" do
     config <<-CONFIG
     filter {
-      noop {
-        type => "noop"
-        remove_field => ["%{blackhole}"]
+      if [type] == "noop" {
+        noop {
+          remove_field => ["%{blackhole}"]
+        }
       }
     }
     CONFIG
diff --git a/spec/support/LOGSTASH-820.rb b/spec/support/LOGSTASH-820.rb
index 251b1f0e5bc..26036d020a6 100644
--- a/spec/support/LOGSTASH-820.rb
+++ b/spec/support/LOGSTASH-820.rb
@@ -10,8 +10,7 @@
     config <<-CONFIG
       filter {
         grok {
-          #pattern => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
-          pattern => "<%{POSINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(:?)(?:\\[%{GREEDYDATA:syslog_pid}\\])?(:?) %{GREEDYDATA:syslog_message}"
+          match => { "message" => "<%{POSINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(:?)(?:\\[%{GREEDYDATA:syslog_pid}\\])?(:?) %{GREEDYDATA:syslog_message}" }
         }
       }
     CONFIG
diff --git a/spec/support/postwait1.rb b/spec/support/postwait1.rb
index 303a3fa8ea5..15d895bbad5 100644
--- a/spec/support/postwait1.rb
+++ b/spec/support/postwait1.rb
@@ -5,16 +5,14 @@
 
   config <<-'CONFIG'
     filter {
-      grep {
-          tags => web
-          drop => false
-          add_field => [ "application", "web" ]
-      }
-     
       mutate {
-          tags => web
-          #replace => [ "message", "%{request}" ]
+        add_field => [ "application", "web" ]
+      }
+
+      if "web" in [tags] and "web" in [application]  {
+        mutate {
           add_field => [ "message", "%{request}" ]
+        }
       }
     }
   CONFIG
diff --git a/spec/support/pull375.rb b/spec/support/pull375.rb
index 3ab2e8f9b2c..2792f7c685d 100644
--- a/spec/support/pull375.rb
+++ b/spec/support/pull375.rb
@@ -8,7 +8,7 @@
   describe  "kv after grok" do
     config <<-CONFIG
       filter {
-        grok { pattern => "%{URIPATH:mypath}%{URIPARAM:myparams}" }
+        grok { match => { "message" => "%{URIPATH:mypath}%{URIPARAM:myparams}" } }
         kv { source => "myparams" field_split => "&?" }
       }
     CONFIG
