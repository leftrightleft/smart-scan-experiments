diff --git a/lib/logstash/filters/csv.rb b/lib/logstash/filters/csv.rb
index 118437a5b8c..6b683416144 100644
--- a/lib/logstash/filters/csv.rb
+++ b/lib/logstash/filters/csv.rb
@@ -20,16 +20,16 @@ class LogStash::Filters::CSV < LogStash::Filters::Base
   config :columns, :validate => :array, :default => []
 
   # Define the column separator value. If this is not specified the default
-  # is a comma ','
+  # is a comma ','.
   # Optional.
   config :separator, :validate => :string, :default => ","
 
   # Define the character used to quote CSV fields. If this is not specified
-  # the default is a double quote '"'
+  # the default is a double quote '"'.
   # Optional.
   config :quote_char, :validate => :string, :default => '"'
 
-  # Define target for placing the data
+  # Define target for placing the data.
   # Defaults to writing to the root of the event.
   config :target, :validate => :string
 
diff --git a/lib/logstash/filters/date.rb b/lib/logstash/filters/date.rb
index 1b63d2b3f13..2df39498415 100644
--- a/lib/logstash/filters/date.rb
+++ b/lib/logstash/filters/date.rb
@@ -27,13 +27,13 @@ class LogStash::Filters::Date < LogStash::Filters::Base
   config_name "date"
   milestone 3
 
-  # specify a timezone canonical ID to be used for date parsing.
+  # Specify a timezone canonical ID to be used for date parsing.
   # The valid ID are listed on http://joda-time.sourceforge.net/timezones.html
   # Useful in case the timezone cannot be extracted from the value,
-  # and is not the platform default
+  # and is not the platform default.
   # If this is not specified the platform default will be used.
   # Canonical ID is good as it takes care of daylight saving time for you
-  # For example, America/Los_Angeles or Europe/France are valid IDs
+  # For example, America/Los_Angeles or Europe/France are valid IDs.
   config :timezone, :validate => :string
 
   # specify a locale to be used for date parsing. If this is not specified the
diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index e2fd5a4710c..33623a351c5 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -75,14 +75,14 @@ class LogStash::Filters::Mutate < LogStash::Filters::Base
   config :convert, :validate => :hash
 
   # Convert a string field by applying a regular expression and a replacement
-  # if the field is not a string, no action will be taken
+  # if the field is not a string, no action will be taken.
   # 
   # This configuration takes an array consisting of 3 elements per
   # field/substitution.
   #
-  # be aware of escaping any backslash in the config file
+  # Be aware of escaping any backslash in the config file.
   #
-  # for example:
+  # Example:
   #
   #     filter {
   #       mutate {
diff --git a/lib/logstash/filters/range.rb b/lib/logstash/filters/range.rb
index 00b0e8ece05..74feb8df3eb 100644
--- a/lib/logstash/filters/range.rb
+++ b/lib/logstash/filters/range.rb
@@ -6,17 +6,17 @@
 # Numbers are checked to be within numeric value range.
 # Strings are checked to be within string length range.
 # More than one range can be specified for same fieldname, actions will be applied incrementally.
-# Then field value is with in a specified range and action will be taken
-# supported actions are drop event add tag or add field with specified value.
+# When field value is within a specified range an action will be taken.
+# Supported actions are drop event, add tag, or add field with specified value.
 #
-# Example usecases are for histogram like tagging of events
+# Example use cases are for histogram-like tagging of events
 # or for finding anomaly values in fields or too big events that should be dropped.
 
 class LogStash::Filters::Range < LogStash::Filters::Base
   config_name "range"
   milestone 1
 
-  # An array of field, min, max ,action tuples.
+  # An array of field, min, max, action tuples.
   # Example:
   #
   #     filter {
@@ -28,8 +28,8 @@ class LogStash::Filters::Range < LogStash::Filters::Base
   #                     "duration", 0, 100, "field:latency:fast",
   #                     "duration", 101, 200, "field:latency:normal",
   #                     "duration", 201, 1000, "field:latency:slow",
-  #                     "duration", 1001, 1e1000, "field:latency:outlier" 
-  #                     "requests", 0, 10, "tag:to_few_%{host}_requests" ]
+  #                     "duration", 1001, 1e1000, "field:latency:outlier",
+  #                     "requests", 0, 10, "tag:too_few_%{host}_requests" ]
   #       }
   #     }
   #
@@ -40,7 +40,7 @@ class LogStash::Filters::Range < LogStash::Filters::Base
   # TODO(piavlo): simple not nested hashses as values in addition to numaric and string values to prettify the syntax.
   config :ranges, :validate => :array, :default => []
 
-  # Negate the range match logic, events should be outsize of the specificed range to match.
+  # Negate the range match logic, events should be outsize of the specified range to match.
   config :negate, :validate => :boolean, :default => false
 
   public
