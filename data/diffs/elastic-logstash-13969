diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index a011c00c6ba..701dfec56ec 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -391,7 +391,7 @@ def converge_state(pipeline_actions)
           end
         rescue SystemExit, Exception => e
           logger.error("Failed to execute action", :action => action, :exception => e.class.name, :message => e.message, :backtrace => e.backtrace)
-          converge_result.add(action, e)
+          converge_result.add(action, LogStash::ConvergeResult::FailedAction.from_exception(e))
         end
       end
     end.each(&:join)
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 73e9ae58b8c..dda728575b2 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -280,6 +280,13 @@
           expect(json_document["message"]).to eq("foo-bar")
         end
       end
+
+      context "referenced environment variable does not exist" do
+
+        it "does not converge the pipeline" do
+          expect(subject.converge_state_and_update).not_to be_a_successful_converge
+        end
+      end
     end
 
     describe "#upgrade_pipeline" do
@@ -304,6 +311,15 @@
         subject.shutdown
       end
 
+      context "when the upgrade contains a bad environment variable" do
+        let(:new_pipeline_config) { "input { generator {} } filter { if '${NOEXIST}' { mutate { add_tag => 'x' } } } output { }" }
+
+        it "leaves the state untouched" do
+          expect(subject.converge_state_and_update).not_to be_a_successful_converge
+          expect(subject.get_pipeline(default_pipeline_id).config_str).to eq(pipeline_config)
+        end
+      end
+
       context "when the upgrade fails" do
         it "leaves the state untouched" do
           expect(subject.converge_state_and_update).not_to be_a_successful_converge
