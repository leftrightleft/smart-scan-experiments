diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index 3d4f0c63c1c..9e51bd776ef 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -2,7 +2,6 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -37,17 +36,20 @@ public final class Valuefier {
     private static final Valuefier.Converter LONG_CONVERTER
         = input -> RubyUtil.RUBY.newFixnum(((Number) input).longValue());
 
+    /**
+     * Unwraps a {@link JavaProxy} and passes the result to {@link Valuefier#convert(Object)}.
+     * Handles {code IRubyObject[]} as a special case, since we do only receive this type wrapped
+     * in a {@link JavaProxy} and never directly as an argument to
+     * {@link Valuefier#convert(Object)}.
+     */
     private static final Valuefier.Converter JAVAPROXY_CONVERTER =
         input -> {
             final Object obj = JavaUtil.unwrapJavaObject((JavaProxy) input);
             if (obj instanceof IRubyObject[]) {
                 return ConvertedList.newFromRubyArray((IRubyObject[]) obj);
             }
-            if (obj instanceof List) {
-                return ConvertedList.newFromList((Collection<?>) obj);
-            }
             try {
-                return BiValues.newBiValue(input);
+                return Valuefier.convert(obj);
             } catch (IllegalArgumentException e) {
                 final Class<?> cls = obj.getClass();
                 throw new IllegalArgumentException(String.format(
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
index 5a19b747a0b..11be18239ce 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
@@ -3,8 +3,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import org.jruby.RubyNil;
-import org.jruby.java.proxies.ConcreteJavaProxy;
-import org.jruby.java.proxies.JavaProxy;
 
 public final class BiValues {
     private BiValues() {
@@ -38,12 +36,6 @@ private interface BiValueType {
     private static Map<Class<?>, BiValues.BiValueType> initCache() {
         final Map<Class<?>, BiValues.BiValueType> hm = new HashMap<>(50, 0.2F);
         hm.put(RubyNil.class, value -> NULL_BI_VALUE);
-        hm.put(ConcreteJavaProxy.class, value -> {
-            if (value instanceof JavaProxy) {
-                return new JavaProxyBiValue((JavaProxy) value);
-            }
-            return new JavaProxyBiValue(value);
-        });
         return hm;
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java
deleted file mode 100644
index 0e07d65747a..00000000000
--- a/logstash-core/src/main/java/org/logstash/bivalues/JavaProxyBiValue.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package org.logstash.bivalues;
-
-import org.jruby.Ruby;
-import org.jruby.java.proxies.JavaProxy;
-import org.jruby.javasupport.JavaUtil;
-
-import java.io.ObjectStreamException;
-
-public class JavaProxyBiValue extends BiValue<JavaProxy, Object> {
-
-    public JavaProxyBiValue(JavaProxy rubyValue) {
-        this.rubyValue = rubyValue;
-        javaValue = null;
-    }
-
-    public JavaProxyBiValue(Object javaValue) {
-        this.javaValue = javaValue;
-        rubyValue = null;
-    }
-
-    private JavaProxyBiValue() {
-    }
-
-    protected void addRuby(Ruby runtime) {
-        rubyValue = (JavaProxy) JavaUtil.convertJavaToUsableRubyObject(runtime, javaValue);
-    }
-
-    protected void addJava() {
-        javaValue = rubyValue.getObject();
-    }
-
-    // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
-    private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
-    }
-}
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index be1d16ee3c1..b1794fabb3f 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -9,11 +9,17 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.jruby.RubySymbol;
 import org.jruby.RubyTime;
+import org.jruby.java.proxies.ConcreteJavaProxy;
 import org.junit.Test;
+import org.logstash.ext.JrubyTimestampExtLibrary;
 
 import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 
@@ -362,4 +368,14 @@ public void toStringwithoutTimestamp() throws Exception {
         e.remove("@timestamp");
         assertEquals(e.toString(), "%{host} %{message}");
     }
+
+    @Test
+    public void unwrapsJavaProxyValues() throws Exception {
+        final Event event = new Event();
+        final Timestamp timestamp = new Timestamp();
+        event.setField("timestamp", new ConcreteJavaProxy(RubyUtil.RUBY,
+            JrubyTimestampExtLibrary.createTimestamp(RubyUtil.RUBY).getRealClass(), timestamp
+        ));
+        assertThat(event.getField("timestamp"), is(timestamp));
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/ValuefierTest.java b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
index d864219bdcb..1f0b08df7f8 100644
--- a/logstash-core/src/test/java/org/logstash/ValuefierTest.java
+++ b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import org.joda.time.DateTime;
@@ -18,7 +17,6 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import org.logstash.bivalues.BiValue;
 import org.logstash.ext.JrubyTimestampExtLibrary;
 
 import static junit.framework.TestCase.assertEquals;
@@ -85,16 +83,6 @@ public void testUnhandledObject() {
         Valuefier.convert(md);
     }
 
-    @Test
-    public void testUnhandledProxyObject() {
-        HashSet<Integer> hs = new HashSet<>();
-        hs.add(42);
-        RubyClass proxyClass = (RubyClass) Java.getProxyClass(ruby, HashSet.class);
-        ConcreteJavaProxy cjp = new ConcreteJavaProxy(ruby, proxyClass, hs);
-        BiValue result = (BiValue) Valuefier.convert(cjp);
-        assertEquals(hs, result.javaValue());
-    }
-
     @Test
     public void scratch() {
         String[] parts = "foo/1_4".split("\\W|_");
