diff --git a/Gemfile b/Gemfile
index f4aab97ef6c..508a3c4e89b 100644
--- a/Gemfile
+++ b/Gemfile
@@ -23,4 +23,5 @@ gem "rubyzip", "~> 1.1.7", :group => :build
 gem "gems", "~> 0.8.3", :group => :build
 gem "rack-test", :require => "rack/test", :group => :development
 gem "flores", "~> 0.0.6", :group => :development
+gem "webmock", "~> 1.22", ">= 1.22.6", :group => :development
 gem "pleaserun"
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index ab73f5e37e4..8a770034b95 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -5,6 +5,7 @@
 
 require_relative "bundler"
 require_relative "rubygems"
+require_relative "../logstash/version"
 
 module LogStash
   module Environment
diff --git a/lib/logstash/version.rb b/lib/logstash/version.rb
new file mode 100644
index 00000000000..c4bf42c931d
--- /dev/null
+++ b/lib/logstash/version.rb
@@ -0,0 +1,8 @@
+# encoding: utf-8
+
+# The version of the logstash package (not the logstash-core gem version).
+#
+# Note to authors: this should not include dashes because 'gem' barfs if
+# you include a dash in the version string.
+
+LOGSTASH_VERSION = "5.0.0.dev"
diff --git a/lib/pluginmanager/commands/install_command.rb b/lib/pluginmanager/commands/install_command.rb
new file mode 100644
index 00000000000..94a3170ede7
--- /dev/null
+++ b/lib/pluginmanager/commands/install_command.rb
@@ -0,0 +1,98 @@
+# encoding: utf-8
+require "pluginmanager/command"
+require "bootstrap/util/compress"
+require "fileutils"
+require "pluginmanager/sources/http"
+require "pluginmanager/sources/local"
+require "stud/temporary"
+
+class LogStash::PluginManager::InstallCommand < LogStash::PluginManager::Command
+
+  # Relocate a set of plugins within a pack directory into the logstash cache location. This gems
+  # are going to be used later on during installation time.
+  # @param pack_dir [String] The location of an uncompressed packaged plugin
+  def copy_packaged_gems(pack_dir)
+    FileUtils.cp(Dir.glob(File.join(pack_dir, "**", "*.gem")), LogStash::Environment::CACHE_PATH)
+  end
+
+  # Check if the installtion should be made in local mode, it's based on either having the local
+  # flag provided or on having packaged plugins to be installed.
+  # @return [Boolean] True in case of performing a local installation
+  def local?
+    @local || @packs
+  end
+
+  # Find in the extracted packaged plugins the list of plugins to be installed
+  # @param [String] The packaged plugin location in the file system, should be uncompressed.
+  # @return [Array] The list of plugins to be installed
+  def select_plugins(pack_dir)
+    Dir.glob(File.join(pack_dir, "*.gem")).map do |path|
+      fields = File.basename(path, ".gem").split("-")
+      (fields.count > 1 ? fields[0...-1] : fields).join("-")
+    end
+  end
+
+  # Fetch a package from a URI, either from a web uri or from the local file system.
+  # @param [URI] The package url
+  # @param [String] A temporary directy used to store the fetched package.
+  # @return [String] The location of the fetched package.
+  def fetch_pack(source, temp_dir)
+    file, _ =  source.fetch(temp_dir)
+    return file
+  end
+
+  # Extract a package of plugins
+  # @param [String] The package location
+  # @return [String] The location of the extracted content
+  def extract_pack(file)
+    filename = File.basename(file, ".zip").split("-")[0]
+    output_dir = File.join(File.dirname(file), "out")
+    zip.extract(file, output_dir)
+    return File.join(output_dir, "logstash", filename)
+  end
+
+  def find_packs(args=[])
+    packs = []
+    args.clone.each do |arg|
+      next if (arg.start_with?("logstash-") || File.extname(arg) == ".gem")
+      source = LogStash::PluginManager::Sources.factory(arg)
+      # We should not remove packages called by name that does not exist, they
+      # could still be plugins to be installed from rubygems
+      if !(source.is_a?(LogStash::PluginManager::Sources::HTTP) &&
+          source.fallback &&
+          !source.exist? )
+        args.delete(arg)
+      end
+      packs << source
+    end
+    packs
+  end
+
+  # Finds and makes sure if there are packages willing to be installed they are
+  # available inside the system.
+  # @return [Array] The list of plugins to be installed from within the package.
+  def fetch_and_copy_packs(args=[], &block)
+    FileUtils.mkdir_p(LogStash::Environment::CACHE_PATH) unless args.empty?
+    plugins = []
+    Stud::Temporary.directory("logstash-plugin-manager") do |temp_dir|
+      args.each do |arg|
+        pack_dir = block.call(arg, temp_dir)
+        next if pack_dir.nil? || pack_dir.empty?
+        plugins << select_plugins(pack_dir)
+        copy_packaged_gems(pack_dir)
+      end
+    end
+    @packs = true if plugins.size > 0
+    plugins.flatten
+  end
+
+  def verify_pack!(pack)
+    puts("Validating #{pack}")
+    signal_error("Installation aborted, verification failed for #{pack}, version #{pack.version}.") unless pack.valid?
+  end
+
+  def zip
+    @zip ||= LogStash::Util::Zip
+  end
+
+end
diff --git a/lib/pluginmanager/pack_command.rb b/lib/pluginmanager/commands/pack_command.rb
similarity index 100%
rename from lib/pluginmanager/pack_command.rb
rename to lib/pluginmanager/commands/pack_command.rb
diff --git a/lib/pluginmanager/install.rb b/lib/pluginmanager/install.rb
index 0e6383d725b..d2914d318c0 100644
--- a/lib/pluginmanager/install.rb
+++ b/lib/pluginmanager/install.rb
@@ -4,8 +4,11 @@
 require "jar_install_post_install_hook"
 require "file-dependencies/gem"
 require "fileutils"
+require "uri"
+require "pluginmanager/commands/install_command"
 
-class LogStash::PluginManager::Install < LogStash::PluginManager::Command
+
+class LogStash::PluginManager::Install < LogStash::PluginManager::InstallCommand
   parameter "[PLUGIN] ...", "plugin name(s) or file", :attribute_name => :plugins_arg
   option "--version", "VERSION", "version of the plugin to install"
   option "--[no-]verify", :flag, "verify plugin validity before installation", :default => true
@@ -17,8 +20,25 @@ class LogStash::PluginManager::Install < LogStash::PluginManager::Command
   # but the argument parsing does not support it for now so currently if specifying --version only
   # one plugin name can be also specified.
   def execute
+
     validate_cli_options!
 
+    packs = find_packs(plugins_arg).each do |pack|
+      # Verify each selected pack to be valid
+      verify_pack!(pack)
+    end.select do |pack|
+      # This is necessary because a package installed by name could be also a
+      # plugin name, so if not exist, we still need to validate if it's a plugin.
+      pack.exist?
+    end
+
+    pack_plugins = fetch_and_copy_packs(packs) do |pack, temp_dir|
+      pack_file = fetch_pack(pack, temp_dir)
+      extract_pack(pack_file)
+    end
+
+    merge_into_plugin_list(pack_plugins)
+
     if local_gems?
       gems = extract_local_gems_plugins
     elsif development?
@@ -33,6 +53,12 @@ def execute
   end
 
   private
+
+  def merge_into_plugin_list(packs)
+    plugins_arg.concat(packs).flatten!
+    plugins_arg.compact!
+  end
+
   def validate_cli_options!
     if development?
       signal_usage_error("Cannot specify plugin(s) with --development, it will add the development dependencies of the currently installed plugins") unless plugins_arg.empty?
diff --git a/lib/pluginmanager/pack.rb b/lib/pluginmanager/pack.rb
index 18b46e18511..6dedcd74243 100644
--- a/lib/pluginmanager/pack.rb
+++ b/lib/pluginmanager/pack.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require_relative "pack_command"
+require "pluginmanager/commands/pack_command"
 
 class LogStash::PluginManager::Pack < LogStash::PluginManager::PackCommand
   option "--tgz", :flag, "compress package as a tar.gz file", :default => !LogStash::Environment.windows?
diff --git a/lib/pluginmanager/sources/base.rb b/lib/pluginmanager/sources/base.rb
new file mode 100644
index 00000000000..41aae8fd562
--- /dev/null
+++ b/lib/pluginmanager/sources/base.rb
@@ -0,0 +1,55 @@
+# encoding: utf-8
+require "rubygems/package"
+
+module LogStash::PluginManager::Sources
+
+  def self.factory(arg)
+    zip_file = ::File.extname("#{arg}") == ".zip"
+    if !zip_file || ( zip_file && arg.start_with?("http") )
+      return HTTP.new(arg)
+    end
+    Local.new(arg)
+  end
+
+  class Base
+
+    attr_reader :uri
+
+    def initialize(uri)
+      @uri = URI(uri)
+    end
+
+    def exist?
+      raise "NotImplemented"
+    end
+
+    def fetch(dest="")
+      raise "NotImplemented"
+    end
+
+    def version
+      File.basename("#{uri}", ".zip").split("-")[1]
+    end
+
+    def to_s
+      uri.to_s
+    end
+
+    def valid?
+      return false if version.nil? || version.empty?
+      is_zip_file? && valid_version?
+    end
+
+    def valid_version?
+      LOGSTASH_VERSION == version
+    end
+
+    private
+
+    def is_zip_file?
+      ::File.extname("#{uri}") == ".zip"
+    end
+
+  end
+
+end
diff --git a/lib/pluginmanager/sources/http.rb b/lib/pluginmanager/sources/http.rb
new file mode 100644
index 00000000000..ce9ea0a9c69
--- /dev/null
+++ b/lib/pluginmanager/sources/http.rb
@@ -0,0 +1,77 @@
+# encoding: utf-8
+require "rubygems/package"
+require "pluginmanager/sources/base"
+require "net/http"
+
+module LogStash::PluginManager::Sources
+
+  class HTTP < Base
+
+    attr_reader :uri, :fallback, :header_options
+
+    ##
+    # Fallback URL used by default when installing packs given
+    # by name, if you require to install a pack from a custom URL
+    # you will need to pass the full URL.
+    ##
+    ROOT_URI = "https://download.elastic.co".freeze
+
+    ##
+    # User agent string used to identify the requester is a
+    # LogStash agent
+    ##
+    USER_AGENT = "Logstash/#{LOGSTASH_VERSION}".freeze
+
+    def initialize(uri)
+      @fallback = !uri.start_with?("http")
+      if fallback
+        @uri = super(fallback_uri(uri))
+      else
+        @uri = super(uri)
+      end
+      @header_options = {'User-Agent' => USER_AGENT}
+    end
+
+    def fallback_uri(uri)
+      "#{ROOT_URI}/#{uri}.zip"
+    end
+
+    def valid?
+      valid_format = super
+      fallback ? valid_format : valid_format && exist?
+    end
+
+    def exist?
+      response = Net::HTTP.start(*http_start_args(uri)) do |http|
+        http.head(uri.request_uri, header_options)
+      end
+      response.kind_of?(Net::HTTPSuccess)
+    rescue
+      false
+    end
+
+    def fetch(dest="")
+      path   = File.join(dest, File.basename(uri.path))
+      status = nil
+      Net::HTTP.start(*http_start_args(uri)) do |http|
+        response = http.get(uri.request_uri, header_options)
+        status   = response.code
+        break unless status == "200"
+        write_to_file(path, response.body)
+      end
+      [path, status]
+    end
+
+    private
+    def write_to_file(path, data)
+      File.open(path, "w") do |file|
+        file.write(data)
+      end
+    end
+
+    def http_start_args(uri)
+      options = { :use_ssl => uri.scheme == "https" }
+      [uri.host, uri.port, nil, nil, nil, nil, options]
+    end
+  end
+end
diff --git a/lib/pluginmanager/sources/local.rb b/lib/pluginmanager/sources/local.rb
new file mode 100644
index 00000000000..a3588fa798b
--- /dev/null
+++ b/lib/pluginmanager/sources/local.rb
@@ -0,0 +1,26 @@
+# encoding: utf-8
+require "rubygems/package"
+require "pluginmanager/sources/base"
+require "fileutils"
+
+module LogStash::PluginManager::Sources
+
+  class Local < Base
+
+    def exist?
+      ::File.exist?(uri.to_s)
+    end
+
+    def fetch(dest="")
+      base_dir = (dest.empty? ? LogStash::Environment::LOGSTASH_HOME : dest )
+      current_path = ::File.join(base_dir, ::File.basename(uri.to_s))
+      ::FileUtils.cp(uri.to_s, current_path)
+      [ current_path, "200" ]
+    end
+
+    def valid?
+      super && exist?
+    end
+  end
+
+end
diff --git a/lib/pluginmanager/unpack.rb b/lib/pluginmanager/unpack.rb
index 7937e7d2e24..4faa93a7e92 100644
--- a/lib/pluginmanager/unpack.rb
+++ b/lib/pluginmanager/unpack.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require_relative "pack_command"
+require "pluginmanager/commands/pack_command"
 
 class LogStash::PluginManager::Unpack < LogStash::PluginManager::PackCommand
   option "--tgz", :flag, "unpack a packaged tar.gz file", :default => !LogStash::Environment.windows?
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index d5a1637f354..0143e1b754c 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -4,7 +4,6 @@
 require "logstash/plugins/registry"
 require "logstash/logging"
 require "logstash/util/password"
-require "logstash/version"
 require "logstash/environment"
 require "logstash/util/plugin_version"
 require "filesize"
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index f0a630a324a..aedea1303af 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -256,7 +256,6 @@ def show_version
   end # def show_version
 
   def show_version_logstash
-    require "logstash/version"
     puts "logstash #{LOGSTASH_VERSION}"
   end # def show_version_logstash
 
diff --git a/logstash-core/lib/logstash/version.rb b/logstash-core/lib/logstash/version.rb
deleted file mode 100644
index 676dde5ac32..00000000000
--- a/logstash-core/lib/logstash/version.rb
+++ /dev/null
@@ -1,14 +0,0 @@
-# encoding: utf-8
-
-# The version of the logstash package (not the logstash-core gem version).
-#
-# Note to authors: this should not include dashes because 'gem' barfs if
-# you include a dash in the version string.
-
-# TODO: (colin) the logstash-core gem uses it's own version number in logstash-core/lib/logstash-core/version.rb
-#       there are some dependencies in logstash-core on the LOGSTASH_VERSION constant this is why
-#       the logstash version is currently defined here in logstash-core/lib/logstash/version.rb but
-#       eventually this file should be in the root logstash lib fir and dependencies in logstash-core should be
-#       fixed.
-
-LOGSTASH_VERSION = "5.0.0.dev"
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 581d8c798cb..0d005db885a 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -10,6 +10,7 @@ namespace "artifact" do
       "CONTRIBUTORS",
       "bin/**/*",
       "config/**/*",
+      "lib/logstash/**/*",
       "lib/bootstrap/**/*",
       "lib/pluginmanager/**/*",
       "lib/systeminstall/**/*",
diff --git a/spec/integration/plugin_manager/logstash_spec.rb b/spec/integration/plugin_manager/logstash_spec.rb
index 3f839f060f2..f51f010ed63 100644
--- a/spec/integration/plugin_manager/logstash_spec.rb
+++ b/spec/integration/plugin_manager/logstash_spec.rb
@@ -1,6 +1,6 @@
 # Encoding: utf-8
 require_relative "../spec_helper"
-require_relative "../../../logstash-core/lib/logstash/version"
+require_relative "../../lib/logstash/version"
 
 describe "bin/logstash" do
   it "returns the logstash version" do
diff --git a/spec/integration/plugin_manager/plugin_install_spec.rb b/spec/integration/plugin_manager/plugin_install_spec.rb
index db31bc95740..e6e0dbb9c5b 100644
--- a/spec/integration/plugin_manager/plugin_install_spec.rb
+++ b/spec/integration/plugin_manager/plugin_install_spec.rb
@@ -1,41 +1,90 @@
 # Encoding: utf-8
 require_relative "../spec_helper"
 require "fileutils"
+require_relative "../../lib/logstash/version"
 
-context "bin/logstash-plugin install" do
-  context "with a local gem" do
-    let(:gem_name) { "logstash-input-wmi" }
-    let(:local_gem) { gem_fetch(gem_name) }
+describe "bin/logstash-plugin install" do
 
-    it "install the gem succesfully" do
-      result = command("bin/logstash-plugin install --no-verify #{local_gem}")
-      expect(result.exit_status).to eq(0)
-      expect(result.stdout).to match(/^Installing\s#{gem_name}\nInstallation\ssuccessful$/)
+  describe "#plugins as gems" do
+    context "with a local gem" do
+      let(:gem_name) { "logstash-input-wmi" }
+      let(:local_gem) { gem_fetch(gem_name) }
+
+      it "install the gem succesfully" do
+        result = command("bin/logstash-plugin install --no-verify #{local_gem}")
+        expect(result.exit_status).to eq(0)
+        expect(result.stdout).to match(/^Installing\s#{gem_name}\nInstallation\ssuccessful$/)
+      end
+    end
+
+    context "when the plugin exist" do
+      let(:plugin_name) { "logstash-input-drupal_dblog" }
+
+      it "sucessfully install" do
+        result = command("bin/logstash-plugin install #{plugin_name}")
+        expect(result.exit_status).to eq(0)
+        expect(result.stdout).to match(/^Validating\s#{plugin_name}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+      end
+
+      it "allow to install a specific version" do
+        version = "2.0.2"
+        result = command("bin/logstash-plugin install --version 2.0.2 #{plugin_name}")
+        expect(result.exit_status).to eq(0)
+        expect(result.stdout).to match(/^Validating\s#{plugin_name}-#{version}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+      end
+    end
+
+    context "when the plugin doesn't exist" do
+      it "fails to install" do
+        result = command("bin/logstash-plugin install --no-verify logstash-output-impossible-plugin")
+        expect(result.exit_status).to eq(1)
+        expect(result.stderr).to match(/Installation Aborted, message: Could not find gem/)
+      end
     end
   end
 
-  context "when the plugin exist" do
-    let(:plugin_name) { "logstash-input-drupal_dblog" }
+  describe "#packs" do
 
-    it "sucessfully install" do
-      result = command("bin/logstash-plugin install #{plugin_name}")
+    let(:pack)        { "https://s3.amazonaws.com/test.elasticsearch.org/logstash/jdbc_pack-#{LOGSTASH_VERSION}.zip" }
+    let(:plugin_name) { "logstash-input-jdbc" }
+
+    it "install sucessfully" do
+      result = command("bin/logstash-plugin install #{pack}")
       expect(result.exit_status).to eq(0)
-      expect(result.stdout).to match(/^Validating\s#{plugin_name}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+      expect(result.stdout).to match(/^Validating\s#{pack}\nValidating\s#{plugin_name}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
     end
 
-    it "allow to install a specific version" do
-      version = "2.0.2"
-      result = command("bin/logstash-plugin install --version 2.0.2 #{plugin_name}")
-      expect(result.exit_status).to eq(0)
-      expect(result.stdout).to match(/^Validating\s#{plugin_name}-#{version}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+    context "when the version does not match" do
+      let(:pack)        { "https://s3.amazonaws.com/test.elasticsearch.org/logstash/jdbc_pack-2.0.0.zip" }
+
+      it "fails to install" do
+        result = command("bin/logstash-plugin install #{pack}")
+        expect(result.exit_status).to eq(1)
+        expect(result.stdout).to match(/^Validating\s#{pack}$/)
+        expect(result.stderr).to match(/^ERROR:\sInstallation\saborted,\sverification\sfailed\sfor\s#{pack},\sversion\s2.0.0.$/)
+      end
     end
-  end
 
-  context "when the plugin doesn't exist" do
-    it "fails to install" do
-      result = command("bin/logstash-plugin install --no-verify logstash-output-impossible-plugin")
-      expect(result.exit_status).to eq(1)
-      expect(result.stderr).to match(/Installation Aborted, message: Could not find gem/)
+    context "without version" do
+      let(:pack)        { "https://s3.amazonaws.com/test.elasticsearch.org/logstash/jdbc_pack.zip" }
+
+      it "fails to install" do
+        result = command("bin/logstash-plugin install #{pack}")
+        expect(result.exit_status).to eq(1)
+        expect(result.stdout).to match(/^Validating\s#{pack}$/)
+        expect(result.stderr).to match(/^ERROR:\sInstallation\saborted,\sverification\sfailed\sfor\s#{pack},\sversion\s.$/)
+      end
+    end
+
+    context "when the pack does not exist" do
+      let(:pack)        { "https://s3.amazonaws.com/test.elasticsearch.org/logstash/foobar-99.0.0.zip" }
+
+      it "fails to install" do
+        result = command("bin/logstash-plugin install #{pack}")
+        expect(result.exit_status).to eq(1)
+        expect(result.stdout).to match(/^Validating\s#{pack}$/)
+        expect(result.stderr).to match(/^ERROR:\sInstallation\saborted,\sverification\sfailed\sfor\s#{pack},\sversion\s99.0.0.$/)
+      end
     end
   end
 end
diff --git a/spec/unit/plugin_manager/commands/install_spec.rb b/spec/unit/plugin_manager/commands/install_spec.rb
new file mode 100644
index 00000000000..e6601e138ed
--- /dev/null
+++ b/spec/unit/plugin_manager/commands/install_spec.rb
@@ -0,0 +1,69 @@
+# encoding: utf-8
+require "spec_helper"
+require "clamp"
+require "pluginmanager/commands/install_command"
+require "uri"
+require 'webmock/rspec'
+
+describe LogStash::PluginManager::InstallCommand do
+
+  subject { described_class.new("install") }
+
+  let(:server)     { "https://download.elastic.co/" }
+  let(:user_agent) { LogStash::PluginManager::Sources::HTTP::USER_AGENT }
+
+  describe "#packs" do
+
+    let(:jdbc_source)   { LogStash::PluginManager::Sources::HTTP.new("https://download.elastic.co/jdbc_pack-3.0.0.dev.zip") }
+    let(:syslog_source) { LogStash::PluginManager::Sources::HTTP.new("https://download.elastic.co/syslog_pack-3.0.0.dev.zip") }
+
+
+    it "select plugins to be installed" do
+      files = [ "/foo/bar/plugin.gem", "/foo/bar/bar-2.0.gem" ]
+      expect(Dir).to receive(:glob).with(File.join("/foo/bar", "*.gem")).and_return(files)
+      expect(subject.select_plugins("/foo/bar")).to eq(["plugin", "bar"])
+    end
+
+    context "#find packs" do
+      let(:syslog_pack_url) { "https://download.elastic.co:443/syslog_pack-3.0.0.dev.zip" }
+
+      it "finds the packs to be installed" do
+        stub_request(:head, syslog_pack_url ).to_return(:status => 200)
+
+        args    = [ "https://download.elastic.co/jdbc_pack-3.0.0.dev.zip", "syslog_pack-3.0.0.dev", "logstash-input-foo" ]
+        sources = subject.find_packs(args).map { |source| source.to_s }
+        uris    = [ "https://download.elastic.co/jdbc_pack-3.0.0.dev.zip", "https://download.elastic.co/syslog_pack-3.0.0.dev.zip" ]
+        expect(sources).to eq(uris)
+      end
+
+      it "uses a descriptive user agent" do
+        stub_request(:head, syslog_pack_url).
+          with(:headers => {'User-Agent'=>"#{user_agent}"}).to_return(:status => 200)
+        subject.find_packs([ "syslog_pack-3.0.0.dev" ])
+      end
+    end
+
+    context "#fetch packs" do
+
+      it "yield the sources to process the extractions as requested" do
+        args = [ jdbc_source, syslog_source ]
+
+        yield_values = [
+          [jdbc_source, kind_of(String)],
+          [syslog_source, kind_of(String)]
+        ]
+
+        expect { |b|
+          subject.fetch_and_copy_packs(args, &b)
+        }.to yield_successive_args(*yield_values)
+      end
+
+      it "uses a descriptive user agent" do
+        stub_request(:get, "https://download.elastic.co:443/syslog_pack-3.0.0.dev.zip").
+          with(:headers => {'User-Agent'=>"#{user_agent}"}).to_return(:status => 200)
+        subject.fetch_pack(syslog_source, Dir.tmpdir)
+      end
+
+    end
+  end
+end
diff --git a/spec/unit/plugin_manager/sources_spec.rb b/spec/unit/plugin_manager/sources_spec.rb
new file mode 100644
index 00000000000..249c548b176
--- /dev/null
+++ b/spec/unit/plugin_manager/sources_spec.rb
@@ -0,0 +1,150 @@
+# encoding: utf-8
+require "spec_helper"
+require 'webmock/rspec'
+require "tmpdir"
+require "pluginmanager/sources/http"
+require "pluginmanager/sources/local"
+
+describe LogStash::PluginManager::Sources::HTTP do
+
+  subject   {  described_class.new(uri) }
+
+  let(:uri) { "http://localhost:8080/pack.zip"}
+
+  describe "#exist?" do
+
+    it "should verify if a plugin exist in the repository" do
+      stub_request(:head, uri).and_return(:status => 200)
+      expect(subject.exist?).to eq(true)
+    end
+
+    it "should fail if a plugin does not exist in the repository" do
+      stub_request(:head, uri).and_return(:status => 404)
+      expect(subject.exist?).to eq(false)
+    end
+
+  end
+
+  describe "#fetch" do
+
+    before(:each) do
+      File.delete("pack.zip") if File.exist?("pack.zip")
+    end
+
+   # after(:each) do
+   #   File.delete("pack.zip") if File.exist?("pack.zip")
+   # end
+
+    it "should start the download process" do
+      stub_request(:get, uri).and_return(:body => "foo", :status => 404)
+      Dir.mktmpdir do |tmp_dir|
+        filename, _ = subject.fetch(tmp_dir)
+        expect(File).not_to exist(filename)
+      end
+    end
+
+    it "should start the download process" do
+      stub_request(:get, uri).and_return(:body => "foo", :status => 200)
+      Dir.mktmpdir do |tmp_dir|
+        filename, _ = subject.fetch(tmp_dir)
+        expect(File).to exist(filename)
+        expect(File.read(filename)).to eq("foo")
+      end
+    end
+  end
+
+  describe "#valid?" do
+
+    let(:uri) { "http://localhost:8080/pack-#{LOGSTASH_VERSION}.zip"}
+
+    it "validates resource existance" do
+      stub_request(:head, uri).to_return(:status => 200)
+      expect(subject.exist?).to be_truthy
+    end
+
+    context "when does not exist" do
+
+      it "fails the validation" do
+        stub_request(:head, uri).to_return(:status => 404)
+        expect(subject.valid?).to be_falsey
+      end
+    end
+
+    context "when does not have a valid format" do
+
+      let(:uri) { "http://localhost:8080/pack-.gzip"}
+
+      it "fails the validation" do
+        stub_request(:head, uri).to_return(:status => 200)
+        expect(subject.valid?).to be_falsey
+      end
+    end
+
+  end
+end
+
+describe LogStash::PluginManager::Sources::Local do
+
+  subject   {  described_class.new(uri) }
+
+  let(:uri) { "/foo/bar-#{LOGSTASH_VERSION}.zip"}
+
+  it "validates a file existance" do
+    allow(::File).to receive(:exist?).with(uri).and_return(true)
+    expect(subject.exist?).to be_truthy
+  end
+
+  context "#valid?" do
+
+    before(:each) do
+      allow(::File).to receive(:exist?).with(uri).and_return(true)
+    end
+
+    it "check for plugin validation" do
+      expect(subject.valid?).to be_truthy
+    end
+
+    context "when having wrong version" do
+      let(:uri) { "/foo/bar-1.0.zip"}
+
+      it "fails the falidation" do
+        expect(subject.valid?).to be_falsey
+      end
+    end
+
+    context "when having wrong file ending" do
+      let(:uri) { "/foo/bar-#{LOGSTASH_VERSION}.gzip"}
+
+      it "fails the validation" do
+        expect(subject.valid?).to be_falsey
+      end
+    end
+
+    context "when no version is provided" do
+      let(:uri) { "/foo/bar.zip"}
+
+      it "fails the validation" do
+        expect(subject.valid?).to be_falsey
+      end
+    end
+
+  end
+
+  describe "#fetch" do
+
+    let(:destination) { "/destination/path" }
+
+    it "copy a file from a given path to a destination" do
+      destination_path = File.join(destination, "bar-#{LOGSTASH_VERSION}.zip")
+      expect(::FileUtils).to receive(:cp).with(uri, destination_path).and_return(true)
+      subject.fetch(destination)
+    end
+
+    it "uses LOSTASH_HOME if no destination is given" do
+      destination_path = File.join(LogStash::Environment::LOGSTASH_HOME, "bar-#{LOGSTASH_VERSION}.zip")
+      expect(::FileUtils).to receive(:cp).with(uri, destination_path).and_return(true)
+      subject.fetch
+    end
+  end
+
+end
