diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index d1318804946..5c2a8f4c0db 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/instrument/snapshot"
 require "logstash/instrument/metric_store"
 require "concurrent/timer_task"
 require "observer"
diff --git a/logstash-core/lib/logstash/instrument/snapshot.rb b/logstash-core/lib/logstash/instrument/snapshot.rb
deleted file mode 100644
index 1520981bac9..00000000000
--- a/logstash-core/lib/logstash/instrument/snapshot.rb
+++ /dev/null
@@ -1,14 +0,0 @@
-# encoding: utf-8
-
-module LogStash module Instrument
-  class Snapshot
-    include LogStash::Util::Loggable
-
-    attr_reader :metric_store, :created_at
-
-    def initialize(metric_store, created_at = Time.now)
-      @metric_store = metric_store
-      @created_at = created_at
-    end
-  end
-end; end
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 69463a7ba7a..b74048e06bc 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -35,6 +35,7 @@
 import org.logstash.instrument.metrics.NamespacedMetricExt;
 import org.logstash.instrument.metrics.NullMetricExt;
 import org.logstash.instrument.metrics.NullNamespacedMetricExt;
+import org.logstash.instrument.metrics.SnapshotExt;
 import org.logstash.log.LoggableExt;
 import org.logstash.log.LoggerExt;
 import org.logstash.log.SlowLoggerExt;
@@ -123,6 +124,8 @@ public final class RubyUtil {
 
     public static final RubyClass METRIC_NO_NAMESPACE_PROVIDED_CLASS;
 
+    public static final RubyClass METRIC_SNAPSHOT_CLASS;
+
     public static final RubyClass TIMED_EXECUTION_CLASS;
 
     public static final RubyClass NULL_TIMED_EXECUTION_CLASS;
@@ -180,6 +183,9 @@ public final class RubyUtil {
         PLUGINS_MODULE = RUBY.defineModuleUnder("Plugins", LOGSTASH_MODULE);
         final RubyModule instrumentModule =
             RUBY.defineModuleUnder("Instrument", LOGSTASH_MODULE);
+        METRIC_SNAPSHOT_CLASS =
+            instrumentModule.defineClassUnder("Snapshot", RUBY.getObject(), SnapshotExt::new);
+        METRIC_SNAPSHOT_CLASS.defineAnnotatedMethods(SnapshotExt.class);
         EXECUTION_CONTEXT_FACTORY_CLASS = PLUGINS_MODULE.defineClassUnder(
             "ExecutionContextFactory", RUBY.getObject(),
             PluginFactoryExt.ExecutionContext::new
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/SnapshotExt.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/SnapshotExt.java
new file mode 100644
index 00000000000..930b3e934b4
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/SnapshotExt.java
@@ -0,0 +1,43 @@
+package org.logstash.instrument.metrics;
+
+import org.jruby.Ruby;
+import org.jruby.RubyBasicObject;
+import org.jruby.RubyClass;
+import org.jruby.RubyTime;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+
+@JRubyClass(name = "Snapshot")
+public final class SnapshotExt extends RubyBasicObject {
+
+    private IRubyObject metricStore;
+
+    private RubyTime createdAt;
+
+    public SnapshotExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    @JRubyMethod(required = 1, optional = 1)
+    public SnapshotExt initialize(final ThreadContext context, final IRubyObject[] args) {
+        metricStore = args[0];
+        if (args.length == 2) {
+            createdAt = (RubyTime) args[1];
+        } else {
+            createdAt = (RubyTime) RubyTime.newInstance(context, context.runtime.getTime());
+        }
+        return this;
+    }
+
+    @JRubyMethod(name = "metric_store")
+    public IRubyObject metricStore() {
+        return metricStore;
+    }
+
+    @JRubyMethod(name = "created_at")
+    public RubyTime createdAt() {
+        return createdAt;
+    }
+}
