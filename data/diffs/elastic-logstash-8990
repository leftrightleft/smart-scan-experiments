diff --git a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
index 33c9c1415da..66431f66e88 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
@@ -23,8 +23,6 @@ public final class JRubyWrappedWriteClientExt extends RubyObject {
 
     private static final RubySymbol IN_KEY = RubyUtil.RUBY.newSymbol("in");
 
-    private static final LongCounter DUMMY_COUNTER = new LongCounter("dummy");
-
     private DynamicMethod pushOne;
     private DynamicMethod pushBatch;
 
@@ -50,18 +48,19 @@ public IRubyObject ruby_initialize(final ThreadContext context, final IRubyObjec
         final IRubyObject metric = args[2];
         final IRubyObject pluginId = args[3];
         final IRubyObject eventsMetrics = getMetric(metric, "stats", "events");
-        eventsMetricsCounter = getCounter(eventsMetrics, IN_KEY);
-        eventsMetricsTime = getCounter(eventsMetrics, PUSH_DURATION_KEY);
+        eventsMetricsCounter = LongCounter.fromRubyBase(eventsMetrics, IN_KEY);
+        eventsMetricsTime = LongCounter.fromRubyBase(eventsMetrics, PUSH_DURATION_KEY);
         final IRubyObject pipelineMetrics =
             getMetric(metric, "stats", "pipelines", pipelineId, "events");
-        pipelineMetricsCounter = getCounter(pipelineMetrics, IN_KEY);
-        pipelineMetricsTime = getCounter(pipelineMetrics, PUSH_DURATION_KEY);
+        pipelineMetricsCounter = LongCounter.fromRubyBase(pipelineMetrics, IN_KEY);
+        pipelineMetricsTime = LongCounter.fromRubyBase(pipelineMetrics, PUSH_DURATION_KEY);
         final IRubyObject pluginMetrics = getMetric(
             metric, "stats", "pipelines", pipelineId, "plugins", "inputs",
             pluginId.asJavaString(), "events"
         );
-        pluginMetricsCounter = getCounter(pluginMetrics, context.runtime.newSymbol("out"));
-        pluginMetricsTime = getCounter(pluginMetrics, PUSH_DURATION_KEY);
+        pluginMetricsCounter =
+            LongCounter.fromRubyBase(pluginMetrics, context.runtime.newSymbol("out"));
+        pluginMetricsTime = LongCounter.fromRubyBase(pluginMetrics, PUSH_DURATION_KEY);
         final RubyClass writerClass = writeClient.getMetaClass();
         pushOne = writerClass.searchMethod("push");
         pushBatch = writerClass.searchMethod("push_batch");
@@ -131,17 +130,4 @@ private static IRubyObject toSymbolArray(final String... strings) {
         }
         return RubyUtil.RUBY.newArray(res);
     }
-
-    private static LongCounter getCounter(final IRubyObject metric, final RubySymbol key) {
-        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
-        final IRubyObject counter = metric.callMethod(context, "counter", key);
-        counter.callMethod(context, "increment", context.runtime.newFixnum(0));
-        if(LongCounter.class.isAssignableFrom(counter.getJavaClass())) {
-            return (LongCounter) counter.toJava(LongCounter.class);
-        } else {
-            // Metrics deactivated, we didn't get an actual counter from the base metric.
-            return DUMMY_COUNTER;
-        }
-    }
-
 }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
index f8508d426cd..9cbfd502751 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
@@ -28,8 +28,6 @@ public class JrubyMemoryReadClientExt extends RubyObject {
     private static final RubySymbol DURATION_IN_MILLIS_KEY =
             RubyUtil.RUBY.newSymbol("duration_in_millis");
 
-    private static final LongCounter DUMMY_COUNTER = new LongCounter("dummy");
-
     private BlockingQueue queue;
     private ConcurrentHashMap<Long, IRubyObject> inflightBatches;
     private ConcurrentHashMap<Long, Long> inflightClocks;
@@ -92,17 +90,17 @@ public IRubyObject rubySetBatchDimensions(final ThreadContext context, IRubyObje
 
     @JRubyMethod(name = "set_events_metric", required = 1)
     public IRubyObject setEventsMetric(final ThreadContext context, IRubyObject metric) {
-        eventMetricOut = getCounter(metric, OUT_KEY);
-        eventMetricFiltered = getCounter(metric, FILTERED_KEY);
-        eventMetricTime = getCounter(metric, DURATION_IN_MILLIS_KEY);
+        eventMetricOut = LongCounter.fromRubyBase(metric, OUT_KEY);
+        eventMetricFiltered = LongCounter.fromRubyBase(metric, FILTERED_KEY);
+        eventMetricTime = LongCounter.fromRubyBase(metric, DURATION_IN_MILLIS_KEY);
         return this;
     }
 
     @JRubyMethod(name = "set_pipeline_metric", required = 1)
     public IRubyObject setPipelineMetric(final ThreadContext context, IRubyObject metric) {
-        pipelineMetricOut = getCounter(metric, OUT_KEY);
-        pipelineMetricFiltered = getCounter(metric, FILTERED_KEY);
-        pipelineMetricTime = getCounter(metric, DURATION_IN_MILLIS_KEY);
+        pipelineMetricOut = LongCounter.fromRubyBase(metric, OUT_KEY);
+        pipelineMetricFiltered = LongCounter.fromRubyBase(metric, FILTERED_KEY);
+        pipelineMetricTime = LongCounter.fromRubyBase(metric, DURATION_IN_MILLIS_KEY);
         return this;
     }
 
@@ -167,16 +165,4 @@ public IRubyObject addOutputMetrics(final ThreadContext context, IRubyObject fil
         return this;
     }
 
-    private static LongCounter getCounter(final IRubyObject metric, final RubySymbol key) {
-        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
-        final IRubyObject counter = metric.callMethod(context, "counter", key);
-        counter.callMethod(context, "increment", context.runtime.newFixnum(0));
-        if (LongCounter.class.isAssignableFrom(counter.getJavaClass())) {
-            return (LongCounter) counter.toJava(LongCounter.class);
-        } else {
-            // Metrics deactivated, we didn't get an actual counter from the base metric.
-            return DUMMY_COUNTER;
-        }
-    }
-
 }
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
index 69aeceafb05..9ee3d16a06d 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
@@ -1,19 +1,47 @@
 package org.logstash.instrument.metrics.counter;
 
-
+import java.util.concurrent.atomic.LongAdder;
+import org.jruby.RubySymbol;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
 import org.logstash.instrument.metrics.AbstractMetric;
 import org.logstash.instrument.metrics.MetricType;
 
-import java.util.concurrent.atomic.LongAdder;
-
 /**
  * A {@link CounterMetric} that is backed by a {@link Long} type.
  */
 public class LongCounter extends AbstractMetric<Long> implements CounterMetric<Long> {
 
+    /**
+     * Dummy counter used by some functionality as a placeholder when metrics are disabled.
+     */
+    private static final LongCounter DUMMY_COUNTER = new LongCounter("dummy");
+
     private static final IllegalArgumentException NEGATIVE_COUNT_EXCEPTION = new IllegalArgumentException("Counters can not be incremented by negative values");
     private LongAdder longAdder;
 
+    /**
+     * Extracts the backing LongCounter from a Ruby
+     * {@code LogStash::Instrument::MetricType::Counter} for efficient access by Java code.
+     * @param metric Ruby {@code Logstash::Instrument::Metric}
+     * @param key Identifier of the Counter
+     * @return either the backing LongCounter or {@link #DUMMY_COUNTER} in case the input
+     * {@code metric} was a Ruby {@code LogStash::Instrument::NullMetric}
+     */
+    public static LongCounter fromRubyBase(final IRubyObject metric, final RubySymbol key) {
+        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
+        final IRubyObject counter = metric.callMethod(context, "counter", key);
+        counter.callMethod(context, "increment", context.runtime.newFixnum(0));
+        final LongCounter javaCounter;
+        if (LongCounter.class.isAssignableFrom(counter.getJavaClass())) {
+            javaCounter = (LongCounter) counter.toJava(LongCounter.class);
+        } else {
+            javaCounter = DUMMY_COUNTER;
+        }
+        return javaCounter;
+    }
+
     /**
      * Constructor
      *
