diff --git a/Gemfile.template b/Gemfile.template
index 0787bf967f3..333020b0007 100644
--- a/Gemfile.template
+++ b/Gemfile.template
@@ -9,7 +9,7 @@ gem "paquet", "~> 0.2"
 gem "pleaserun", "~>0.0.28", require: false
 gem "rake", "~> 12", require: false
 gem "ruby-progressbar", "~> 1", require: false
-gem "logstash-output-elasticsearch", ">= 11.6.0"
+gem "logstash-output-elasticsearch", ">= 11.14.0"
 gem "polyglot", require: false
 gem "treetop", require: false
 gem "faraday", "~> 1", :require => false # due elasticsearch-transport (elastic-transport) depending faraday '~> 1'
diff --git a/config/logstash.yml b/config/logstash.yml
index e240bf251ca..9fab4b9cb2e 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -335,9 +335,13 @@
 #xpack.monitoring.elasticsearch.ssl.ca_trusted_fingerprint: xxxxxxxxxx
 #xpack.monitoring.elasticsearch.ssl.truststore.path: path/to/file
 #xpack.monitoring.elasticsearch.ssl.truststore.password: password
+# use either keystore.path/keystore.password or certificate/key configurations
 #xpack.monitoring.elasticsearch.ssl.keystore.path: /path/to/file
 #xpack.monitoring.elasticsearch.ssl.keystore.password: password
-#xpack.monitoring.elasticsearch.ssl.verification_mode: certificate
+#xpack.monitoring.elasticsearch.ssl.certificate: /path/to/file
+#xpack.monitoring.elasticsearch.ssl.key: /path/to/key
+#xpack.monitoring.elasticsearch.ssl.verification_mode: full
+#xpack.monitoring.elasticsearch.ssl.cipher_suites: []
 #xpack.monitoring.elasticsearch.sniffing: false
 #xpack.monitoring.collection.interval: 10s
 #xpack.monitoring.collection.pipeline.details.enabled: true
@@ -359,9 +363,13 @@
 #xpack.management.elasticsearch.ssl.certificate_authority: "/path/to/ca.crt"
 #xpack.management.elasticsearch.ssl.truststore.path: /path/to/file
 #xpack.management.elasticsearch.ssl.truststore.password: password
+# use either keystore.path/keystore.password or certificate/key configurations
 #xpack.management.elasticsearch.ssl.keystore.path: /path/to/file
 #xpack.management.elasticsearch.ssl.keystore.password: password
-#xpack.management.elasticsearch.ssl.verification_mode: certificate
+#xpack.management.elasticsearch.ssl.certificate: /path/to/file
+#xpack.management.elasticsearch.ssl.key: /path/to/certificate_key_file
+#xpack.management.elasticsearch.ssl.cipher_suites: []
+#xpack.management.elasticsearch.ssl.verification_mode: full
 #xpack.management.elasticsearch.sniffing: false
 #xpack.management.logstash.poll_interval: 5s
 
diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.go
index 5073d47d0e3..ce8cda1c2a4 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.go
@@ -125,6 +125,9 @@ func normalizeSetting(setting string) (string, error) {
 		"xpack.monitoring.elasticsearch.ssl.truststore.password",
 		"xpack.monitoring.elasticsearch.ssl.keystore.path",
 		"xpack.monitoring.elasticsearch.ssl.keystore.password",
+		"xpack.monitoring.elasticsearch.ssl.certificate",
+		"xpack.monitoring.elasticsearch.ssl.key",
+		"xpack.monitoring.elasticsearch.ssl.cipher_suites",
 		"xpack.management.enabled",
 		"xpack.management.logstash.poll_interval",
 		"xpack.management.pipeline.id",
@@ -143,6 +146,9 @@ func normalizeSetting(setting string) (string, error) {
 		"xpack.management.elasticsearch.ssl.truststore.password",
 		"xpack.management.elasticsearch.ssl.keystore.path",
 		"xpack.management.elasticsearch.ssl.keystore.password",
+		"xpack.management.elasticsearch.ssl.certificate",
+		"xpack.management.elasticsearch.ssl.key",
+		"xpack.management.elasticsearch.ssl.cipher_suites",
 		"xpack.geoip.download.endpoint",
 		"xpack.geoip.downloader.enabled",
 		"cloud.id",
diff --git a/docs/static/monitoring/monitoring-internal-legacy.asciidoc b/docs/static/monitoring/monitoring-internal-legacy.asciidoc
index 37fbd4783fb..af2a5e7236c 100644
--- a/docs/static/monitoring/monitoring-internal-legacy.asciidoc
+++ b/docs/static/monitoring/monitoring-internal-legacy.asciidoc
@@ -128,7 +128,7 @@ xpack.monitoring.elasticsearch.ssl.truststore.password: password
 --------------------------------------------------
 
 Also, optionally, you can set up client certificate using a keystore
-(a Java Keystore file that contains the certificate):
+(a Java Keystore file that contains the certificate) or using a certificate and key file pair:
 
 [source,yaml]
 --------------------------------------------------
@@ -136,6 +136,12 @@ xpack.monitoring.elasticsearch.ssl.keystore.path: /path/to/file
 xpack.monitoring.elasticsearch.ssl.keystore.password: password
 --------------------------------------------------
 
+[source,yaml]
+--------------------------------------------------
+xpack.monitoring.elasticsearch.ssl.certificate: /path/to/certificate
+xpack.monitoring.elasticsearch.ssl.key: /path/to/key
+--------------------------------------------------
+
 Set sniffing to `true` to enable discovery of other nodes of the {es} cluster.
 It defaults to `false`.
 
diff --git a/docs/static/settings/configuration-management-settings.asciidoc b/docs/static/settings/configuration-management-settings.asciidoc
index 45142a94c6a..450ba0e33f7 100644
--- a/docs/static/settings/configuration-management-settings.asciidoc
+++ b/docs/static/settings/configuration-management-settings.asciidoc
@@ -90,6 +90,8 @@ certificate authority for your {es} instance.
 Optional setting that provides the path to the Java keystore (JKS) to validate
 the server’s certificate.
 
+NOTE: You cannot use this setting and `xpack.management.elasticsearch.ssl.certificate_authority` at the same time.
+
 `xpack.management.elasticsearch.ssl.truststore.password`::
 
 Optional setting that provides the password to the truststore.
@@ -99,10 +101,35 @@ Optional setting that provides the password to the truststore.
 Optional setting that provides the path to the Java keystore (JKS) to validate
 the client’s certificate.
 
+NOTE: You cannot use this setting and `xpack.management.elasticsearch.ssl.keystore.certificate` at the same time.
+
 `xpack.management.elasticsearch.ssl.keystore.password`::
 
 Optional setting that provides the password to the keystore.
 
+`xpack.management.elasticsearch.ssl.certificate`::
+
+Optional setting that provides the path to an SSL certificate to use to authenticate the client.
+This certificate should be an OpenSSL-style X.509 certificate file.
+
+NOTE: This setting can be used only if `xpack.management.elasticsearch.ssl.key` is set.
+
+`xpack.management.elasticsearch.ssl.key`::
+
+Optional setting that provides the path to an OpenSSL-style RSA private key that corresponds to the `xpack.management.elasticsearch.ssl.certificate`.
+
+NOTE: This setting can be used only if `xpack.management.elasticsearch.ssl.certificate` is set.
+
+`xpack.management.elasticsearch.ssl.verification_mode`::
+
+Option to validate the server’s certificate. Defaults to `full`. To
+disable, set to `none`. Disabling this severely compromises security.
+
+`xpack.management.elasticsearch.ssl.cipher_suites`::
+
+Optional setting that provides the list of cipher suites to use, listed by priorities.
+Supported cipher suites vary depending on the Java and protocol versions.
+
 `xpack.management.elasticsearch.cloud_id`::
 
 If you're using {es} in {ecloud}, you should specify the identifier here.
diff --git a/docs/static/settings/monitoring-settings-legacy.asciidoc b/docs/static/settings/monitoring-settings-legacy.asciidoc
index 039b4ec3959..414dd6361f2 100644
--- a/docs/static/settings/monitoring-settings-legacy.asciidoc
+++ b/docs/static/settings/monitoring-settings-legacy.asciidoc
@@ -104,11 +104,29 @@ the client’s certificate.
 
 Optional settings that provide the password to the keystore.
 
+`xpack.monitoring.elasticsearch.ssl.certificate`::
+
+Optional setting that provides the path to an SSL certificate to use to authenticate the client.
+This certificate should be an OpenSSL-style X.509 certificate file.
+
+NOTE: This setting can be used only if `xpack.monitoring.elasticsearch.ssl.key` is set.
+
+`xpack.monitoring.elasticsearch.ssl.key`::
+
+Optional setting that provides the path to an OpenSSL-style RSA private key that corresponds to the `xpack.monitoring.elasticsearch.ssl.certificate`.
+
+NOTE: This setting can be used only if `xpack.monitoring.elasticsearch.ssl.certificate` is set.
+
 `xpack.monitoring.elasticsearch.ssl.verification_mode`::
 
-Option to validate the server’s certificate. Defaults to `certificate`. To
+Option to validate the server’s certificate. Defaults to `full`. To
 disable, set to `none`. Disabling this severely compromises security.
 
+`xpack.monitoring.elasticsearch.ssl.cipher_suites`::
+
+Optional setting that provides the list of cipher suites to use, listed by priorities.
+Supported cipher suites vary depending on the Java and protocol versions.
+
 [[monitoring-additional-settings-legacy]]
 ===== Additional settings
 
diff --git a/logstash-core/lib/logstash/modules/logstash_config.rb b/logstash-core/lib/logstash/modules/logstash_config.rb
index eb70d73e7f1..dd05a1ae2b0 100644
--- a/logstash-core/lib/logstash/modules/logstash_config.rb
+++ b/logstash-core/lib/logstash/modules/logstash_config.rb
@@ -101,9 +101,9 @@ def elasticsearch_output_config(type_string = nil, index_suffix = "-%{+YYYY.MM.d
     lines.push(user ? "user => \"#{user}\"" : nil)
     lines.push(password ? "password => \"#{password.value}\"" : nil)
     lines.push(type_string ? "document_type => #{type_string}" : nil)
-    lines.push("ssl => #{@settings.fetch('var.elasticsearch.ssl.enabled', false)}")
+    lines.push("ssl_enabled => #{@settings.fetch('var.elasticsearch.ssl.enabled', false)}")
     if cacert = @settings["var.elasticsearch.ssl.certificate_authority"]
-      lines.push("cacert => \"#{cacert}\"") if cacert
+      lines.push("ssl_certificate_authorities => \"#{cacert}\"") if cacert
     end
     # NOTE: the first line should be indented in the conf.erb
     <<-CONF
diff --git a/x-pack/lib/config_management/extension.rb b/x-pack/lib/config_management/extension.rb
index 1c98065711b..205dd6beaf2 100644
--- a/x-pack/lib/config_management/extension.rb
+++ b/x-pack/lib/config_management/extension.rb
@@ -37,7 +37,10 @@ def additionals_settings(settings)
         settings.register(LogStash::Setting::NullableString.new("xpack.management.elasticsearch.ssl.truststore.password"))
         settings.register(LogStash::Setting::NullableString.new("xpack.management.elasticsearch.ssl.keystore.path"))
         settings.register(LogStash::Setting::NullableString.new("xpack.management.elasticsearch.ssl.keystore.password"))
-        settings.register(LogStash::Setting::String.new("xpack.management.elasticsearch.ssl.verification_mode", "certificate", true, ["none", "certificate"]))
+        settings.register(LogStash::Setting::NullableString.new("xpack.management.elasticsearch.ssl.certificate"))
+        settings.register(LogStash::Setting::NullableString.new("xpack.management.elasticsearch.ssl.key"))
+        settings.register(LogStash::Setting::ArrayCoercible.new("xpack.management.elasticsearch.ssl.cipher_suites", String, []))
+        settings.register(LogStash::Setting::String.new("xpack.management.elasticsearch.ssl.verification_mode", "full", true, %w[none certificate full]))
         settings.register(LogStash::Setting::Boolean.new("xpack.management.elasticsearch.sniffing", false))
       rescue => e
         logger.error("Cannot register new settings", :message => e.message, :backtrace => e.backtrace)
diff --git a/x-pack/lib/helpers/elasticsearch_options.rb b/x-pack/lib/helpers/elasticsearch_options.rb
index c3afb64fe72..5f6c5e5a2df 100644
--- a/x-pack/lib/helpers/elasticsearch_options.rb
+++ b/x-pack/lib/helpers/elasticsearch_options.rb
@@ -29,12 +29,15 @@ module ElasticsearchOptions
       "api_key" => "api_key",
       "proxy" => "proxy",
       "sniffing" => "sniffing",
-      "ssl.certificate_authority" => "cacert",
+      "ssl.certificate_authority" => "ssl_certificate_authorities",
+      "ssl.cipher_suites" => "ssl_cipher_suites",
       "ssl.ca_trusted_fingerprint" => "ca_trusted_fingerprint",
-      "ssl.truststore.path" => "truststore",
-      "ssl.truststore.password" => "truststore_password",
-      "ssl.keystore.path" => "keystore",
-      "ssl.keystore.password" => "keystore_password",
+      "ssl.truststore.path" => "ssl_truststore_path",
+      "ssl.truststore.password" => "ssl_truststore_password",
+      "ssl.keystore.path" => "ssl_keystore_path",
+      "ssl.keystore.password" => "ssl_keystore_password",
+      "ssl.certificate" => "ssl_certificate",
+      "ssl.key" => "ssl_key",
     }
 
     # Retrieve elasticsearch options from either specific settings, or modules if the setting is not there and the
@@ -57,16 +60,29 @@ def es_options_from_settings(feature, settings)
         opts[es_setting] = v unless v.nil?
       end
 
+      # avoid passing an empty array to the plugin configuration
+      if opts['ssl_cipher_suites']&.empty?
+        opts.delete('ssl_cipher_suites')
+      end
+
       # process remaining settings
 
       unless settings.get("#{prefix}#{feature}.elasticsearch.cloud_id")
         opts['hosts'] = settings.get("#{prefix}#{feature}.elasticsearch.hosts")
       end
-      opts['ssl_certificate_verification'] = settings.get("#{prefix}#{feature}.elasticsearch.ssl.verification_mode") == 'certificate'
+
+      # The `certificate` mode is currently not supported by the ES output plugin. This value was used by Logstash to set the
+      # deprecated `ssl_certificate_verification` boolean option. To keep it backward compatible with the x-pack settings,
+      # it fallbacks any value different of `none` to `full` so the behaviour stills the same.
+      if settings.get("#{prefix}#{feature}.elasticsearch.ssl.verification_mode") == "none"
+        opts['ssl_verification_mode'] = "none"
+      else
+        opts['ssl_verification_mode'] = "full"
+      end
 
       # if all hosts are using https or any of the ssl related settings are set
       if ssl?(feature, settings, prefix)
-        opts['ssl'] = true
+        opts['ssl_enabled'] = true
       end
 
       # the username setting has a default value and should not be included when using another authentication such as cloud_auth or api_key.
@@ -96,8 +112,10 @@ def ssl?(feature, settings, prefix)
       return true if settings.set?("#{prefix}#{feature}.elasticsearch.cloud_id") # cloud_id always resolves to https hosts
       return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.certificate_authority")
       return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.ca_trusted_fingerprint")
+      return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.cipher_suites") && settings.get("#{prefix}#{feature}.elasticsearch.ssl.cipher_suites")&.any?
       return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.truststore.path") && settings.set?("#{prefix}#{feature}.elasticsearch.ssl.truststore.password")
       return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.keystore.path") && settings.set?("#{prefix}#{feature}.elasticsearch.ssl.keystore.password")
+      return true if settings.set?("#{prefix}#{feature}.elasticsearch.ssl.certificate") && settings.set?("#{prefix}#{feature}.elasticsearch.ssl.key")
 
       return false
     end
@@ -131,8 +149,8 @@ def es_options_from_modules(settings)
       # Sniffing is not supported for modules.
       opts['sniffing'] = false
       if cacert = module_settings["var.elasticsearch.ssl.certificate_authority"]
-        opts['cacert'] = cacert
-        opts['ssl'] = true
+        opts['ssl_certificate_authorities'] = cacert
+        opts['ssl_enabled'] = true
       end
       opts
     end
diff --git a/x-pack/lib/monitoring/monitoring.rb b/x-pack/lib/monitoring/monitoring.rb
index c8ad7c8aac9..72f0e6a1e04 100644
--- a/x-pack/lib/monitoring/monitoring.rb
+++ b/x-pack/lib/monitoring/monitoring.rb
@@ -33,20 +33,24 @@ def initialize(node_uuid,
         @cloud_auth = es_settings['cloud_auth']
         @api_key = es_settings['api_key']
         @proxy = es_settings['proxy']
-        @ssl = es_settings['ssl']
-        @ca_path = es_settings['cacert']
+        @ssl_enabled = es_settings['ssl_enabled']
+        @ssl_certificate_authorities = es_settings['ssl_certificate_authorities']
         @ca_trusted_fingerprint = es_settings['ca_trusted_fingerprint']
-        @truststore_path = es_settings['truststore']
-        @truststore_password = es_settings['truststore_password']
-        @keystore_path = es_settings['keystore']
-        @keystore_password = es_settings['keystore_password']
+        @ssl_truststore_path = es_settings['ssl_truststore_path']
+        @ssl_truststore_password = es_settings['ssl_truststore_password']
+        @ssl_keystore_path = es_settings['ssl_keystore_path']
+        @ssl_keystore_password = es_settings['ssl_keystore_password']
+        @ssl_verification_mode = es_settings.fetch('ssl_verification_mode', 'full')
+        @ssl_certificate = es_settings['ssl_certificate']
+        @ssl_key = es_settings['ssl_key']
+        @ssl_cipher_suites = es_settings['ssl_cipher_suites']
         @sniffing = es_settings['sniffing']
-        @ssl_certificate_verification = es_settings.fetch('ssl_certificate_verification', true)
+
       end
 
       attr_accessor :system_api_version, :es_hosts, :user, :password, :node_uuid, :cloud_id, :cloud_auth, :api_key
-      attr_accessor :proxy, :ssl, :ca_path, :ca_trusted_fingerprint, :truststore_path, :truststore_password
-      attr_accessor :keystore_path, :keystore_password, :sniffing, :ssl_certificate_verification
+      attr_accessor :proxy, :ssl_enabled, :ssl_certificate_authorities, :ca_trusted_fingerprint, :ssl_truststore_path, :ssl_truststore_password
+      attr_accessor :ssl_keystore_path, :ssl_keystore_password, :sniffing, :ssl_verification_mode, :ssl_cipher_suites, :ssl_certificate, :ssl_key
 
       def collection_interval
         TimeUnit::SECONDS.convert(@collection_interval, TimeUnit::NANOSECONDS)
@@ -76,16 +80,20 @@ def api_key?
         api_key
       end
 
-      def ssl?
-        ssl || ca_path || ca_trusted_fingerprint || truststore? || keystore?
+      def ssl_enabled?
+        ssl_enabled || ssl_certificate_authorities || ca_trusted_fingerprint || ssl_truststore_path? || ssl_keystore_path? || ssl_certificate?
+      end
+
+      def ssl_truststore_path?
+        ssl_truststore_path && ssl_truststore_password
       end
 
-      def truststore?
-        truststore_path && truststore_password
+      def ssl_keystore_path?
+        ssl_keystore_path && ssl_keystore_password
       end
 
-      def keystore?
-        keystore_path && keystore_password
+      def ssl_certificate?
+        ssl_certificate && ssl_key
       end
 
       def extended_performance_collection?
@@ -269,7 +277,10 @@ def register_monitoring_settings(settings, prefix = "")
       settings.register(LogStash::Setting::NullableString.new("#{prefix}monitoring.elasticsearch.ssl.truststore.password"))
       settings.register(LogStash::Setting::NullableString.new("#{prefix}monitoring.elasticsearch.ssl.keystore.path"))
       settings.register(LogStash::Setting::NullableString.new("#{prefix}monitoring.elasticsearch.ssl.keystore.password"))
-      settings.register(LogStash::Setting::String.new("#{prefix}monitoring.elasticsearch.ssl.verification_mode", "certificate", true, ["none", "certificate"]))
+      settings.register(LogStash::Setting::String.new("#{prefix}monitoring.elasticsearch.ssl.verification_mode", "full", true, ["none", "certificate", "full"]))
+      settings.register(LogStash::Setting::NullableString.new("#{prefix}monitoring.elasticsearch.ssl.certificate"))
+      settings.register(LogStash::Setting::NullableString.new("#{prefix}monitoring.elasticsearch.ssl.key"))
+      settings.register(LogStash::Setting::ArrayCoercible.new("#{prefix}monitoring.elasticsearch.ssl.cipher_suites", String, []))
       settings.register(LogStash::Setting::Boolean.new("#{prefix}monitoring.elasticsearch.sniffing", false))
       settings.register(LogStash::Setting::Boolean.new("#{prefix}monitoring.collection.pipeline.details.enabled", true))
       settings.register(LogStash::Setting::Boolean.new("#{prefix}monitoring.collection.config.enabled", true))
diff --git a/x-pack/lib/template.cfg.erb b/x-pack/lib/template.cfg.erb
index c85faee991d..5f1b8e7cf13 100644
--- a/x-pack/lib/template.cfg.erb
+++ b/x-pack/lib/template.cfg.erb
@@ -36,23 +36,30 @@ output {
   <% if proxy? %>
     proxy => "<%= proxy %>"
   <% end %>
-  <% if ssl? %>
-    ssl => true
-    <% if ca_path %>
-        cacert => "<%= ca_path %>"
+  <% if ssl_enabled? %>
+    ssl_enabled => true
+    <% if ssl_certificate_authorities %>
+        ssl_certificate_authorities => "<%= ssl_certificate_authorities %>"
     <% end %>
     <% if ca_trusted_fingerprint %>
         ca_trusted_fingerprint => <%= ca_trusted_fingerprint.inspect %>
     <% end %>
-    <% if truststore? %>
-        truststore => "<%= truststore_path %>"
-        truststore_password => "<%= truststore_password %>"
+    <% if ssl_truststore_path? %>
+        ssl_truststore_path => "<%= ssl_truststore_path %>"
+        ssl_truststore_password => "<%= ssl_truststore_password %>"
     <% end %>
-    <% if keystore? %>
-        keystore => "<%= keystore_path %>"
-        keystore_password => "<%= keystore_password %>"
+    <% if ssl_keystore_path? %>
+        ssl_keystore_path => "<%= ssl_keystore_path %>"
+        ssl_keystore_password => "<%= ssl_keystore_password %>"
     <% end %>
-    ssl_certificate_verification => <%= ssl_certificate_verification %>
+    <% if ssl_certificate? %>
+        ssl_certificate => "<%= ssl_certificate %>"
+        ssl_key => "<%= ssl_key %>"
+    <% end %>
+    <% if ssl_cipher_suites %>
+        ssl_cipher_suites => <%= ssl_cipher_suites %>
+    <% end %>
+    ssl_verification_mode => <%= ssl_verification_mode %>
   <% else %>
     # In the case where the user does not want SSL we don't set ssl => false
     # the reason being that the user can still turn ssl on by using https in their URL
diff --git a/x-pack/spec/config_management/extension_spec.rb b/x-pack/spec/config_management/extension_spec.rb
index 0dca5f4a4de..7891bcc20b3 100644
--- a/x-pack/spec/config_management/extension_spec.rb
+++ b/x-pack/spec/config_management/extension_spec.rb
@@ -39,7 +39,10 @@
         "xpack.management.elasticsearch.ssl.truststore.path" => [LogStash::Setting::NullableString, nil],
         "xpack.management.elasticsearch.ssl.truststore.password" => [LogStash::Setting::NullableString, nil],
         "xpack.management.elasticsearch.ssl.keystore.path" => [LogStash::Setting::NullableString, nil],
-        "xpack.management.elasticsearch.ssl.keystore.password" => [LogStash::Setting::NullableString, nil]
+        "xpack.management.elasticsearch.ssl.keystore.password" => [LogStash::Setting::NullableString, nil],
+        "xpack.management.elasticsearch.ssl.certificate" => [LogStash::Setting::NullableString, nil],
+        "xpack.management.elasticsearch.ssl.key" => [LogStash::Setting::NullableString, nil],
+        "xpack.management.elasticsearch.ssl.cipher_suites" => [LogStash::Setting::ArrayCoercible, []],
       )
 
       it "has a cloud_id setting" do
diff --git a/x-pack/spec/helpers/elasticsearch_options_spec.rb b/x-pack/spec/helpers/elasticsearch_options_spec.rb
index 1fee8e6962b..1b42c6fdfd7 100644
--- a/x-pack/spec/helpers/elasticsearch_options_spec.rb
+++ b/x-pack/spec/helpers/elasticsearch_options_spec.rb
@@ -29,8 +29,8 @@
                                                                                         "hosts" => elasticsearch_url,
                                                                                         "user" => elasticsearch_username,
                                                                                         "password" => elasticsearch_password,
-                                                                                        "ssl" => true,
-                                                                                        "cacert" => elasticsearch_ca
+                                                                                        "ssl_enabled" => true,
+                                                                                        "ssl_certificate_authorities" => elasticsearch_ca
                                                                                     )
     end
   end
@@ -44,7 +44,7 @@
                                                                                       "hosts" => elasticsearch_url,
                                                                                       "user" => elasticsearch_username,
                                                                                       "password" => elasticsearch_password,
-                                                                                      "ssl" => true,
+                                                                                      "ssl_enabled" => true,
                                                                                       "ca_trusted_fingerprint" => ca_trusted_fingerprint
                                                                                     )
     end
@@ -65,9 +65,9 @@
                                                                                         "hosts" => elasticsearch_url,
                                                                                         "user" => elasticsearch_username,
                                                                                         "password" => elasticsearch_password,
-                                                                                        "ssl" => true,
-                                                                                        "truststore" => elasticsearch_truststore_path,
-                                                                                        "truststore_password" => elasticsearch_truststore_password
+                                                                                        "ssl_enabled" => true,
+                                                                                        "ssl_truststore_path" => elasticsearch_truststore_path,
+                                                                                        "ssl_truststore_password" => elasticsearch_truststore_password
                                                                                     )
     end
   end
@@ -88,12 +88,67 @@
                                                                                         "hosts" => elasticsearch_url,
                                                                                         "user" => elasticsearch_username,
                                                                                         "password" => elasticsearch_password,
-                                                                                        "ssl" => true,
-                                                                                        "keystore" => elasticsearch_keystore_path,
-                                                                                        "keystore_password" => elasticsearch_keystore_password
+                                                                                        "ssl_enabled" => true,
+                                                                                        "ssl_keystore_path" => elasticsearch_keystore_path,
+                                                                                        "ssl_keystore_password" => elasticsearch_keystore_password
                                                                                     )
     end
   end
+
+  context "with certificate and key" do
+    let(:elasticsearch_certificate_path) { Stud::Temporary.file.path }
+    let(:elasticsearch_key_path) { Stud::Temporary.file.path }
+
+    let(:settings) do
+      super().merge({
+        "xpack.monitoring.elasticsearch.ssl.certificate" => elasticsearch_certificate_path,
+        "xpack.monitoring.elasticsearch.ssl.key" => elasticsearch_key_path,
+      })
+    end
+
+    it "creates the elasticsearch output options hash" do
+      expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
+                                                                                        "hosts" => elasticsearch_url,
+                                                                                        "user" => elasticsearch_username,
+                                                                                        "password" => elasticsearch_password,
+                                                                                        "ssl_enabled" => true,
+                                                                                        "ssl_certificate" => elasticsearch_certificate_path,
+                                                                                        "ssl_key" => elasticsearch_key_path
+                                                                                      )
+    end
+  end
+
+  context "with cipher suites" do
+    context "provided" do
+      let(:settings) do
+        super().merge({
+          "xpack.monitoring.elasticsearch.ssl.cipher_suites" => ["FOO", "BAR"],
+        })
+      end
+
+      it "creates the elasticsearch output options hash" do
+        expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
+                                                                                          "hosts" => elasticsearch_url,
+                                                                                          "user" => elasticsearch_username,
+                                                                                          "password" => elasticsearch_password,
+                                                                                          "ssl_enabled" => true,
+                                                                                          "ssl_cipher_suites" => ["FOO", "BAR"],
+                                                                                        )
+      end
+    end
+
+    context "empty" do
+      let(:settings) do
+        super().merge({
+          "xpack.monitoring.elasticsearch.ssl.cipher_suites" => [],
+        })
+      end
+
+      it "creates the elasticsearch output options hash" do
+        expect(test_class.es_options_from_settings('monitoring', system_settings)).to_not have_key("ssl_cipher_suites")
+      end
+    end
+  end
 end
 
 describe LogStash::Helpers::ElasticsearchOptions do
diff --git a/x-pack/spec/monitoring/pipeline_register_hook_spec.rb b/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
index 8c2965c8ab7..7b71e053fac 100644
--- a/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
+++ b/x-pack/spec/monitoring/pipeline_register_hook_spec.rb
@@ -8,6 +8,15 @@
 
   subject(:monitoring_extension) { described_class.new }
 
+  let(:settings) {
+                   settings = @sys_settings.clone
+                   settings.set_value("xpack.monitoring.enabled", true)
+                   settings.set_value("xpack.monitoring.elasticsearch.hosts", "http://localhost:9200")
+                   settings.set_value("xpack.monitoring.elasticsearch.username", "elastic")
+                   settings.set_value("xpack.monitoring.elasticsearch.password", "changeme")
+                   settings
+                 }
+
   before(:all) {
     @extension = LogStash::MonitoringExtension.new
     # used to register monitoring xpack's settings
@@ -17,16 +26,11 @@
 
   context 'validate monitoring settings' do
     it "work without any monitoring settings" do
-      settings = @sys_settings.clone
       settings.set_value("xpack.monitoring.enabled", true)
-      settings.set_value("xpack.monitoring.elasticsearch.hosts", "http://localhost:9200")
-      settings.set_value("xpack.monitoring.elasticsearch.username", "elastic")
-      settings.set_value("xpack.monitoring.elasticsearch.password", "changeme")
       expect(subject.generate_pipeline_config(settings)).to be_truthy
     end
 
     it "monitoring.enabled should conflict with xpack.monitoring.enabled" do
-      settings = @sys_settings.clone
       settings.set_value("xpack.monitoring.enabled", true)
       settings.set_value("monitoring.enabled", true)
 
@@ -36,7 +40,6 @@
     end
 
     it "monitoring.* should conflict with any xpack.monitoring.*" do
-      settings = @sys_settings.clone
       settings.set_value("xpack.monitoring.collection.interval", "10s")
       settings.set_value("monitoring.enabled", true)
 
@@ -46,24 +49,20 @@
     end
 
     context 'ssl certificate verification setting' do
-      {
-        'certificate' => 'true',
-        'none'        => 'false',
-        nil           => 'true', # unset, uses default
-      }.each do |setting_value, expected_result|
-        context "with `xpack.monitoring.elasticsearch.ssl.verification_mode` #{setting_value ? "set to `#{setting_value}`" : 'unset'}" do
-          it "the generated pipeline includes `ssl_certificate_verification => #{expected_result}`" do
-            settings = @sys_settings.clone.tap(&:reset)
-            settings.set_value("xpack.monitoring.enabled", true)
-            settings.set_value("xpack.monitoring.elasticsearch.hosts", "https://localhost:9200")
-            settings.set_value("xpack.monitoring.elasticsearch.username", "elastic")
-            settings.set_value("xpack.monitoring.elasticsearch.password", "changeme")
-
-            settings.set_value("xpack.monitoring.elasticsearch.ssl.verification_mode", setting_value) unless setting_value.nil?
-
+    { 'full' => 'full',
+      'certificate' => 'full',
+      'none' => 'none',
+       nil => 'full', # unset, uses default
+    }.each do |setting_value, expected_result|
+        context "ssl certificate verification setting with `xpack.monitoring.elasticsearch.ssl.verification_mode` #{setting_value ? "set to `#{setting_value}`" : 'unset'}" do
+          let(:settings) {
+                           settings = super().merge("xpack.monitoring.elasticsearch.hosts" => "https://localhost:9200")
+                           setting_value.nil? ? settings : settings.merge("xpack.monitoring.elasticsearch.ssl.verification_mode" => setting_value)
+                         }
+
+          it "the generated pipeline includes `ssl_verification_mode => #{expected_result}`" do
             generated_pipeline_config = subject.generate_pipeline_config(settings)
-
-            expect(generated_pipeline_config).to include("ssl_certificate_verification => #{expected_result}")
+            expect(generated_pipeline_config).to include("ssl_verification_mode => #{expected_result}")
           end
         end
       end
@@ -71,27 +70,83 @@
 
     context 'ssl ca_trusted_fingerprint setting' do
       let(:ca_trusted_fingerprint) { SecureRandom.hex(32) }
+      let(:settings) { super().merge("xpack.monitoring.elasticsearch.ssl.ca_trusted_fingerprint" => ca_trusted_fingerprint) }
+
+      context 'the generated pipeline' do
+        subject(:generated_pipeline_config) { monitoring_extension.generate_pipeline_config(settings) }
+
+        it %Q(includes `ca_trusted_fingerprint` with the value of the provided `ssl.ca_trusted_fingerprint`) do
+          expect(generated_pipeline_config).to include(%Q(ca_trusted_fingerprint => "#{ca_trusted_fingerprint}"))
+        end
+      end
+    end
+
+    context 'ssl cipher suites setting' do
+      let(:settings) { super().merge("xpack.monitoring.elasticsearch.ssl.cipher_suites" => ["FOO", "BAR"]) }
+
+      context 'the generated pipeline' do
+        subject(:generated_pipeline_config) { monitoring_extension.generate_pipeline_config(settings) }
+
+        it 'The generated pipeline includes `ssl_cipher_suites`' do
+          expect(generated_pipeline_config).to include('ssl_cipher_suites => ["FOO", "BAR"]')
+        end
+      end
+    end
 
+    context 'ssl keystore setting' do
+      let(:ssl_keystore_path) { Tempfile.new('ssl_keystore_file') }
+      let(:settings) { super().merge(
+        "xpack.monitoring.elasticsearch.ssl.keystore.path" => ssl_keystore_path.path,
+        "xpack.monitoring.elasticsearch.ssl.keystore.password" => "foo"
+      ) }
+
+      context 'the generated pipeline' do
+        subject(:generated_pipeline_config) { monitoring_extension.generate_pipeline_config(settings) }
+
+        it 'The generated pipeline includes `ssl_keystore_path` and `ssl_keystore_password`' do
+          expect(generated_pipeline_config).to include("ssl_keystore_path => \"#{ssl_keystore_path.path}\"")
+          expect(generated_pipeline_config).to include('ssl_keystore_password => "foo"')
+        end
+      end
+    end
+
+    context 'ssl truststore setting' do
+      let(:ssl_truststore_path) { Tempfile.new('ssl_truststore_file') }
       let(:settings) do
-        @sys_settings.clone.tap do |s|
-          s.reset
-          s.set_value("xpack.monitoring.enabled", true)
-          s.set_value("xpack.monitoring.elasticsearch.hosts", "https://localhost:9200")
-          s.set_value("xpack.monitoring.elasticsearch.username", "elastic")
-          s.set_value("xpack.monitoring.elasticsearch.password", "changeme")
-
-          s.set_value("xpack.monitoring.elasticsearch.ssl.ca_trusted_fingerprint", ca_trusted_fingerprint)
+        super().merge(
+          "xpack.monitoring.elasticsearch.ssl.truststore.path" => ssl_truststore_path.path,
+          "xpack.monitoring.elasticsearch.ssl.truststore.password" => "foo"
+        )
+      end
+
+      context 'the generated pipeline' do
+        subject(:generated_pipeline_config) { monitoring_extension.generate_pipeline_config(settings) }
+
+        it 'The generated pipeline includes `ssl_truststore_path` and `ssl_truststore_password`' do
+          expect(generated_pipeline_config).to include("ssl_truststore_path => \"#{ssl_truststore_path.path}\"")
+          expect(generated_pipeline_config).to include('ssl_truststore_password => "foo"')
         end
       end
+    end
+
+    context 'ssl certificate setting' do
+      let(:ssl_certificate_path) { Tempfile.new('ssl_certificate_file') }
+      let(:ssl_key_path) { Tempfile.new('ssl_key_file') }
+      let(:settings) do
+        super().merge(
+          "xpack.monitoring.elasticsearch.ssl.certificate" => ssl_certificate_path.path,
+          "xpack.monitoring.elasticsearch.ssl.key" => ssl_key_path.path
+        )
+      end
 
       context 'the generated pipeline' do
         subject(:generated_pipeline_config) { monitoring_extension.generate_pipeline_config(settings) }
 
-        it %Q(includes `ca_trusted_fingerprint` with the value of the provided `ssl.ca_trusted_fingerprint`) do
-          expect(generated_pipeline_config).to include(%Q(ca_trusted_fingerprint => "#{ca_trusted_fingerprint}"))
+        it 'The generated pipeline includes `ssl_truststore_path` and `ssl_truststore_password`' do
+          expect(generated_pipeline_config).to include("ssl_certificate => \"#{ssl_certificate_path.path}\"")
+          expect(generated_pipeline_config).to include("ssl_key => \"#{ssl_key_path.path}\"")
         end
       end
     end
   end
-
 end
