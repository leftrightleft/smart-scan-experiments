diff --git a/logstash-core/lib/logstash/patches/puma.rb b/logstash-core/lib/logstash/patches/puma.rb
index 3b6567d088f..bc4e1a2a967 100644
--- a/logstash-core/lib/logstash/patches/puma.rb
+++ b/logstash-core/lib/logstash/patches/puma.rb
@@ -23,32 +23,22 @@ def self.debug(message)
     end
   end
 
-  # Puma uses by default the STDERR an the STDOUT for all his error
-  # handling, the server class accept custom a events object that can accept custom io object,
-  # so I just wrap the logger into an IO like object.
-  class IOWrappedLogger
+  # Puma still uses the STDERR an the STDOUT for a few error
+  # handling, the server class accept custom a log writer object that can accept custom io object,
+  # so it just wrap the logger into an IO like object.
+  class IOWrappedLogger < ::Puma::NullIO
     def initialize(new_logger)
       @logger_lock = Mutex.new
       @logger = new_logger
     end
 
-    def sync=(v)
-      # noop
-    end
-
-    def sync
-      # noop
-    end
-
-    def flush
-      # noop
-    end
-
     def logger=(logger)
       @logger_lock.synchronize { @logger = logger }
     end
 
+    # @overload
     def puts(str)
+      return unless @logger.debug?
       # The logger only accept a str as the first argument
       @logger_lock.synchronize { @logger.debug(str.to_s) }
     end
@@ -56,13 +46,86 @@ def puts(str)
     alias_method :<<, :puts
   end
 
-  # ::Puma::Events#error(str) sends Kernel#exit
-  # let's raise something sensible instead.
+  # ::Puma::LogWriter#error(str) sends Kernel#exit
+  # This error will be raised instead.
   UnrecoverablePumaError = Class.new(RuntimeError)
-  class NonCrashingPumaEvents < ::Puma::Events
+
+  # Replacement for Puma's `LogWriter` to redirect all logging to a logger.
+  # @private
+  class DelegatingLogWriter
+    attr_reader :stdout, :stderr
+
+    def initialize(logger)
+      @logger = logger
+      @stdout = @stderr = IOWrappedLogger.new(self)
+    end
+
+    # @overload
+    def write(str)
+      # raw write - no formatting
+      @logger.debug(str) if @logger.debug?
+    end
+
+    # @overload
+    def debug(str)
+      @logger.debug(format(str)) if @logger.debug?
+    end
+    alias_method :log, :debug
+
+    # @overload
     def error(str)
+      @logger.error(format(str))
       raise UnrecoverablePumaError.new(str)
     end
+
+    # @overload
+    def format(str)
+      str.to_s
+    end
+
+    # An HTTP connection error has occurred.
+    # +error+ a connection exception, +req+ the request,
+    # and +text+ additional info
+    # @version 5.0.0
+    # @overload
+    def connection_error(error, req, text="HTTP connection error")
+      @logger.debug(text, { error: error, req: req, backtrace: error&.backtrace }) if @logger.debug?
+    end
+
+    # An HTTP parse error has occurred.
+    # +error+ a parsing exception, and +req+ the request.
+    def parse_error(error, req)
+      @logger.debug('HTTP parse error, malformed request', { error: error, req: req }) if @logger.debug?
+    end
+
+    # An SSL error has occurred.
+    # @param error <Puma::MiniSSL::SSLError>
+    # @param ssl_socket <Puma::MiniSSL::Socket>
+    # @overload
+    def ssl_error(error, ssl_socket)
+      return unless @logger.debug?
+      peeraddr = ssl_socket.peeraddr.last rescue "<unknown>"
+      subject = ssl_socket.peercert&.subject
+      @logger.debug("SSL error, peer: #{peeraddr}, peer cert: #{subject}", error: error)
+    end
+
+    # An unknown error has occurred.
+    # +error+ an exception object, +req+ the request,
+    # and +text+ additional info
+    # @overload
+    def unknown_error(error, req=nil, text="Unknown error")
+      details = { error: error, req: req }
+      details[:backtrace] = error.backtrace if @logger.debug?
+      @logger.error(text, details)
+    end
+
+    # Log occurred error debug dump.
+    # +error+ an exception object, +req+ the request,
+    # and +text+ additional info
+    # @overload
+    def debug_error(error, req=nil, text="")
+      @logger.debug(text, { error: error, req: req, backtrace: error&.backtrace }) if @logger.debug?
+    end
   end
 end
 
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 3cbb9f23d1e..e92fa322409 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -195,10 +195,7 @@ def ssl_enabled?
     private
 
     def _init_server
-      io_wrapped_logger = LogStash::IOWrappedLogger.new(logger)
-      events = LogStash::NonCrashingPumaEvents.new(io_wrapped_logger, io_wrapped_logger)
-
-      ::Puma::Server.new(@app, events)
+      ::Puma::Server.new(@app, nil, log_writer: LogStash::DelegatingLogWriter.new(logger))
     end
 
     def create_server_thread
@@ -232,7 +229,7 @@ def bind_to_port(candidate_port)
             'keystore' => @ssl_params.fetch(:keystore_path),
             'keystore-pass' => @ssl_params.fetch(:keystore_password).value
         }
-        ssl_context = Puma::MiniSSL::ContextBuilder.new(unwrapped_ssl_params, @server.events).context
+        ssl_context = Puma::MiniSSL::ContextBuilder.new(unwrapped_ssl_params, @server.log_writer).context
         @server.add_ssl_listener(http_host, candidate_port, ssl_context)
       else
         @server.add_tcp_listener(http_host, candidate_port)
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index d1440438e05..13b31a0aae4 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -55,7 +55,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "concurrent-ruby", "~> 1", "< 1.1.10" # pinned until https://github.com/elastic/logstash/issues/13956
   gem.add_runtime_dependency "rack", '~> 2'
   gem.add_runtime_dependency "sinatra", '~> 2'
-  gem.add_runtime_dependency 'puma', '~> 5', '>= 5.6.2'
+  gem.add_runtime_dependency 'puma', '~> 6.3', '>= 6.0.0'
   gem.add_runtime_dependency "jruby-openssl", "~> 0.11"
 
   gem.add_runtime_dependency "treetop", "~> 1" #(MIT license)
diff --git a/logstash-core/spec/logstash/patches/puma_spec.rb b/logstash-core/spec/logstash/patches/puma_spec.rb
new file mode 100644
index 00000000000..4490d537663
--- /dev/null
+++ b/logstash-core/spec/logstash/patches/puma_spec.rb
@@ -0,0 +1,114 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+require "spec_helper"
+
+describe LogStash::DelegatingLogWriter do
+  let(:logger) { double("Logger") }
+  let(:text) { 'foo bar'}
+  let(:req) { { status: 200 } }
+  let(:error) do
+    Class.new(StandardError) do
+      def self.backtrace
+        %w[foo.rb bar.rb]
+      end
+    end
+  end
+
+  subject { LogStash::DelegatingLogWriter.new(logger) }
+
+  before(:each) do
+    allow(logger).to receive(:debug?).and_return(true)
+  end
+
+  context "#log" do
+    it "should log a :debug message" do
+      expect(logger).to receive(:debug).with(text)
+      subject.send(:log, text)
+    end
+  end
+
+  context "#write" do
+    it "should log a raw :debug message" do
+      expect(logger).to receive(:debug).with(1)
+      subject.send(:write, 1)
+    end
+  end
+
+  context "#debug" do
+    it "should log a :debug message" do
+      expect(logger).to receive(:debug).with(text)
+      subject.send(:debug, text)
+    end
+  end
+
+  context "#error" do
+    it "should log an :error message and raise LogStash::UnrecoverablePumaError" do
+      expect(logger).to receive(:error).with(text)
+      expect{ subject.send(:error, text) }.to raise_error(LogStash::UnrecoverablePumaError, text)
+    end
+  end
+
+  context "#connection_error" do
+    it "should log a :debug message" do
+      expect(logger).to receive(:debug).with(text, { error: error, req: req, backtrace: error.backtrace })
+      subject.send(:connection_error, error, req, text)
+    end
+  end
+
+  context "#parse_error" do
+    it "should log a :debug message" do
+      expect(logger).to receive(:debug).with(anything, { error: error, req: req })
+      subject.send(:parse_error, error, req)
+    end
+  end
+
+  context "#ssl_error" do
+    it "should log a :debug message with the peer certificate details" do
+      socket = double("Socket")
+      peercert = double("Peercert")
+
+      allow(socket).to receive(:peeraddr).and_return(%w[first second last])
+      allow(peercert).to receive(:subject).and_return("logstash")
+      allow(socket).to receive(:peercert).and_return(peercert)
+
+      expect(logger).to receive(:debug).with('SSL error, peer: last, peer cert: logstash', { error: error })
+      subject.send(:ssl_error, error, socket)
+    end
+  end
+
+  context "#unknown_error" do
+    it "should log an :error message" do
+      expect(logger).to receive(:error).with(text, { error: error, req: req, backtrace: error.backtrace })
+      subject.send(:unknown_error, error, req, text)
+    end
+
+    context 'when debug log level is disabled' do
+      it "should not include the :backtrace field on the :error log message" do
+        allow(logger).to receive(:debug?).and_return(false)
+        expect(logger).to receive(:error).with(text, { error: error, req: req })
+        subject.send(:unknown_error, error, req, text)
+      end
+    end
+  end
+
+  context "#debug_error" do
+    it "should log a :debug message" do
+      expect(logger).to receive(:debug).with(text, { error: error, req: req, backtrace: error.backtrace })
+      subject.send(:debug_error, error, req, text)
+    end
+  end
+end
\ No newline at end of file
