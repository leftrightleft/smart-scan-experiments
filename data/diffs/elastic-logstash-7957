diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index c0bf4967239..729d0d7668c 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -13,7 +13,6 @@
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
 import org.logstash.ackedqueue.Queueable;
-import org.logstash.bivalues.BiValues;
 import org.logstash.bivalues.NullBiValue;
 import org.logstash.ext.JrubyTimestampExtLibrary;
 
@@ -335,7 +334,7 @@ public void tag(final String tag) {
      */
     private void initTag(final String tag) {
         final ConvertedList list = new ConvertedList(1);
-        list.add(BiValues.RUBY.newString(tag));
+        list.add(RubyUtil.RUBY.newString(tag));
         Accessors.set(data, TAGS_FIELD, list);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
new file mode 100644
index 00000000000..4bfeba342a9
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -0,0 +1,28 @@
+package org.logstash;
+
+import org.jruby.Ruby;
+
+/**
+ * Utilities around interaction with the {@link Ruby} runtime.
+ */
+public final class RubyUtil {
+
+    /**
+     * Reference to the global {@link Ruby} runtime.
+     */
+    public static final Ruby RUBY = setupRuby();
+
+    private RubyUtil() {
+    }
+
+    /**
+     * Sets up the global {@link Ruby} runtime and ensures the creation of the "LogStash" module
+     * on it.
+     * @return Global {@link Ruby} Runtime
+     */
+    private static Ruby setupRuby() {
+        final Ruby ruby = Ruby.getGlobalRuntime();
+        ruby.getOrCreateModule("LogStash");
+        return ruby;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/Rubyfier.java b/logstash-core/src/main/java/org/logstash/Rubyfier.java
index e5c912ea0aa..26ad9bd0249 100644
--- a/logstash-core/src/main/java/org/logstash/Rubyfier.java
+++ b/logstash-core/src/main/java/org/logstash/Rubyfier.java
@@ -32,13 +32,13 @@ public static IRubyObject deep(Ruby runtime, final Object input) {
             || input instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
             return (IRubyObject) input;
         }
-        if (input instanceof String) return BiValues.RUBY.newString((String) input);
+        if (input instanceof String) return RubyUtil.RUBY.newString((String) input);
         if (input instanceof Double || input instanceof Float) {
-            return BiValues.RUBY.newFloat(((Number) input).doubleValue());
+            return RubyUtil.RUBY.newFloat(((Number) input).doubleValue());
         }
         if (input instanceof Timestamp) {
             return JrubyTimestampExtLibrary.RubyTimestamp.newRubyTimestamp(
-                BiValues.RUBY, (Timestamp) input
+                RubyUtil.RUBY, (Timestamp) input
             );
         }
         if (input instanceof BiValue) return ((BiValue) input).rubyValue(runtime);
diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index 32b4331b0cb..89a19cb3c24 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -59,24 +59,24 @@ public static Object convert(final Object o) {
             return o;
         }
         if (o instanceof String) {
-            return BiValues.RUBY.newString((String) o);
+            return RubyUtil.RUBY.newString((String) o);
         }
         if (o instanceof Float || o instanceof Double) {
-            return BiValues.RUBY.newFloat(((Number) o).doubleValue());
+            return RubyUtil.RUBY.newFloat(((Number) o).doubleValue());
         }
         if (o instanceof Timestamp) {
             return JrubyTimestampExtLibrary.RubyTimestamp.newRubyTimestamp(
-                BiValues.RUBY, (Timestamp) o
+                RubyUtil.RUBY, (Timestamp) o
             );
         }
         if (o instanceof RubyTime) {
             return JrubyTimestampExtLibrary.RubyTimestamp.newRubyTimestamp(
-                BiValues.RUBY, new Timestamp(((RubyTime) o).getDateTime())
+                RubyUtil.RUBY, new Timestamp(((RubyTime) o).getDateTime())
             );
         }
         if (o instanceof DateTime) {
             return JrubyTimestampExtLibrary.RubyTimestamp.newRubyTimestamp(
-                BiValues.RUBY, new Timestamp((DateTime) o)
+                RubyUtil.RUBY, new Timestamp((DateTime) o)
             );
         }
         if (o instanceof RubyHash) {
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
index 20e26e9339e..2e7a16f0a7e 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
@@ -3,7 +3,6 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.HashMap;
-import org.jruby.Ruby;
 import org.jruby.RubyBignum;
 import org.jruby.RubyBoolean;
 import org.jruby.RubyInteger;
@@ -50,8 +49,6 @@ private static HashMap<String, String> initCache() {
         return hm;
     }
 
-    public static final Ruby RUBY = Ruby.getGlobalRuntime();
-
     public static final NullBiValue NULL_BI_VALUE = NullBiValue.newNullBiValue();
 
     private final BiValueType biValueType;
diff --git a/logstash-core/src/test/java/org/logstash/AccessorsTest.java b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
index 80d357b3e5a..0008ed3f70f 100644
--- a/logstash-core/src/test/java/org/logstash/AccessorsTest.java
+++ b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
@@ -6,7 +6,6 @@
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
-import org.logstash.bivalues.BiValues;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -21,7 +20,7 @@ public void testBareGet() throws Exception {
         data.put("foo", "bar");
         String reference = "foo";
         assertEquals(
-            BiValues.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
+            RubyUtil.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
         );
     }
 
@@ -39,7 +38,7 @@ public void testBareBracketsGet() throws Exception {
         data.put("foo", "bar");
         String reference = "[foo]";
         assertEquals(
-            BiValues.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
+            RubyUtil.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
         );
     }
 
@@ -51,7 +50,7 @@ public void testDeepMapGet() throws Exception {
         inner.put("bar", "baz");
         String reference = "[foo][bar]";
         assertEquals(
-            BiValues.RUBY.newString("baz"), get(ConvertedMap.newFromMap(data), reference)
+            RubyUtil.RUBY.newString("baz"), get(ConvertedMap.newFromMap(data), reference)
         );
     }
 
@@ -73,7 +72,7 @@ public void testDeepListGet() throws Exception {
         inner.add("bar");
         String reference = "[foo][0]";
         assertEquals(
-            BiValues.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
+            RubyUtil.RUBY.newString("bar"), get(ConvertedMap.newFromMap(data), reference)
         );
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index 7fb594eb437..efc8b897819 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -6,9 +6,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import org.junit.BeforeClass;
 import org.junit.Test;
-import org.logstash.bivalues.BiValues;
 
 import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
 import static org.junit.Assert.assertEquals;
@@ -16,15 +14,6 @@
 
 public final class EventTest {
 
-    /**
-     * Some of these tests require a fully initialized global {@link org.jruby.Ruby} instance
-     * so we force the creation of the "LogStash" module here.
-     */
-    @BeforeClass
-    public static void before() {
-        BiValues.RUBY.getOrCreateModule("LogStash");
-    }
-
     @Test
     public void queueableInterfaceRoundTrip() throws Exception {
         Event e = new Event();
