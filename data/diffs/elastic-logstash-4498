diff --git a/logstash-core/lib/logstash/instrument/metric.rb b/logstash-core/lib/logstash/instrument/metric.rb
index b51007c5440..6482a65a115 100644
--- a/logstash-core/lib/logstash/instrument/metric.rb
+++ b/logstash-core/lib/logstash/instrument/metric.rb
@@ -31,7 +31,7 @@ def decrement(key, value = 1)
     # might be worth to create a block interface for time based gauge
     def gauge(key, value)
       validate_key!(key)
-      collector.push(namespace_information, key, :gauge, value)
+      collector.push(namespace_information, key, :gauge, :set, value)
     end
 
     def time(key, &block)
diff --git a/logstash-core/lib/logstash/instrument/metric_type.rb b/logstash-core/lib/logstash/instrument/metric_type.rb
index e26799b51a9..6245bd157dd 100644
--- a/logstash-core/lib/logstash/instrument/metric_type.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type.rb
@@ -1,12 +1,14 @@
 # encoding: utf-8
 require "logstash/instrument/metric_type/counter"
 require "logstash/instrument/metric_type/mean"
+require "logstash/instrument/metric_type/gauge"
 
 module LogStash module Instrument
   module MetricType
     METRIC_TYPE_LIST = {
       :counter => LogStash::Instrument::MetricType::Counter,
-      :mean => LogStash::Instrument::MetricType::Mean
+      :mean => LogStash::Instrument::MetricType::Mean,
+      :gauge => LogStash::Instrument::MetricType::Gauge
     }.freeze
 
     # Use the string to generate a concrete class for this metrics
diff --git a/logstash-core/lib/logstash/instrument/metric_type/base.rb b/logstash-core/lib/logstash/instrument/metric_type/base.rb
index ea868332bb9..211a52c777f 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/base.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/base.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/instrument/metric_type/counter"
+require "logstash/event"
 require "logstash/util"
 
 module LogStash module Instrument module MetricType
@@ -9,7 +10,15 @@ def initialize(namespaces, key)
       @key = key
     end
 
-    private
+    def to_event(created_at = Time.now)
+      LogStash::Event.new(to_hash.merge({ "@timestamp" => created_at }))
+    end
+
+    def inspect
+      "#{self.class.name} - namespaces: #{namespaces} key: #{@key} value: #{value}"
+    end
+
+    protected
     def type
       @type ||= LogStash::Util.class_name(self).downcase
     end
diff --git a/logstash-core/lib/logstash/instrument/metric_type/counter.rb b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
index 19fc6663b63..bbb08bbe235 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/counter.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/counter.rb
@@ -40,13 +40,5 @@ def to_hash
         "value" => value 
       }
     end
-    
-    def to_event(created_at = Time.now)
-      LogStash::Event.new(to_hash.merge({ "@timestamp" => created_at }))
-    end
-
-    def inspect
-      "#{self.class.name} - namespaces: #{namespaces} key: #{@key} value: #{value}"
-    end
   end
 end; end; end
diff --git a/logstash-core/lib/logstash/instrument/metric_type/gauge.rb b/logstash-core/lib/logstash/instrument/metric_type/gauge.rb
new file mode 100644
index 00000000000..d913a079c3f
--- /dev/null
+++ b/logstash-core/lib/logstash/instrument/metric_type/gauge.rb
@@ -0,0 +1,30 @@
+# encoding: utf-8
+require "logstash/instrument/metric_type/base"
+require "concurrent/atomic_reference/mutex_atomic"
+
+module LogStash module Instrument module MetricType
+  class Gauge < Base
+    def initialize(namespaces, key)
+      super(namespaces, key)
+
+      @gauge = Concurrent::MutexAtomicReference.new()
+    end
+
+    def execute(action, value = nil)
+      @gauge.set(value)
+    end
+
+    def value
+      @gauge.get
+    end
+
+    def to_hash
+      { 
+        "namespaces" => @namespaces,
+        "key" => @key,
+        "type" => type,
+        "value" => value 
+      }
+    end
+  end
+end; end; end
diff --git a/logstash-core/lib/logstash/instrument/metric_type/mean.rb b/logstash-core/lib/logstash/instrument/metric_type/mean.rb
index f465fddd00b..bf4e176a7cb 100644
--- a/logstash-core/lib/logstash/instrument/metric_type/mean.rb
+++ b/logstash-core/lib/logstash/instrument/metric_type/mean.rb
@@ -33,9 +33,5 @@ def to_hash
         "value" => mean
       }
     end
-
-    def inspect
-      "#{self.class.name} - namespaces: #{@namespaces} key: #{@key} value: #{value}"
-    end
   end
 end; end; end
diff --git a/logstash-core/spec/logstash/instrument/metric_spec.rb b/logstash-core/spec/logstash/instrument/metric_spec.rb
index 0013152a66b..962601ff96e 100644
--- a/logstash-core/spec/logstash/instrument/metric_spec.rb
+++ b/logstash-core/spec/logstash/instrument/metric_spec.rb
@@ -52,7 +52,7 @@
   context "#gauge" do
     it "set the value of a key" do
       metric = subject.gauge(:size_queue, 20)
-      expect(collector).to be_a_metric_event([:root, :size_queue], :gauge, 20)
+      expect(collector).to be_a_metric_event([:root, :size_queue], :gauge, :set, 20)
     end
 
     it "raises an exception if the key is an empty string" do
diff --git a/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb b/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb
new file mode 100644
index 00000000000..ea5d86bd5e8
--- /dev/null
+++ b/logstash-core/spec/logstash/instrument/metric_type/gauge_spec.rb
@@ -0,0 +1,31 @@
+# encoding: utf-8
+require "logstash/instrument/metric_type/gauge"
+require "spec_helper"
+
+describe LogStash::Instrument::MetricType::Gauge do
+  let(:namespaces) { [:root, :pipelines, :pipeline_01] }
+  let(:key) { :mykey }
+  let(:value) { "hello" }
+
+  subject { described_class.new(namespaces, key) }
+
+  before :each do
+    subject.execute(:set, value)
+  end
+
+  describe "#execute" do
+    it "set the value of the gauge" do
+      expect(subject.value).to eq(value)
+    end
+  end
+
+  describe "#to_hash" do
+
+    it "return the details of the gauge" do
+      expect(subject.to_hash).to include({ "namespaces" => namespaces,
+                                           "key" => key,
+                                           "value" => value,
+                                           "type" => "gauge" })
+    end
+  end
+end
