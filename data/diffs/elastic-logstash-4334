diff --git a/logstash-core/api/init.ru b/logstash-core/api/init.ru
new file mode 100644
index 00000000000..3cc433bba68
--- /dev/null
+++ b/logstash-core/api/init.ru
@@ -0,0 +1,22 @@
+ROOT = File.expand_path(File.dirname(__FILE__))
+$LOAD_PATH.unshift File.join(ROOT, 'lib')
+Dir.glob('lib/**').each{ |d| $LOAD_PATH.unshift(File.join(ROOT, d)) }
+
+require 'sinatra'
+require 'app/root'
+require 'app/pipeline'
+require 'app/system'
+
+env = ENV["RACK_ENV"].to_sym
+set :environment, env
+
+run LogStash::Api::Root
+
+namespaces = { "/_pipeline" => LogStash::Api::Pipeline,
+               "/_system"   => LogStash::Api::System }
+
+namespaces.each_pair do |namespace, app|
+  map(namespace) do
+    run app
+  end
+end
diff --git a/logstash-core/api/lib/app.rb b/logstash-core/api/lib/app.rb
new file mode 100644
index 00000000000..b95582cdf15
--- /dev/null
+++ b/logstash-core/api/lib/app.rb
@@ -0,0 +1,45 @@
+# encoding: utf-8
+require "cabin"
+require "logstash/json"
+require "app_helpers"
+require "app/service"
+require "app/command_factory"
+
+module LogStash::Api
+  class BaseApp < ::Sinatra::Application
+
+    attr_reader :factory
+
+    if settings.environment == :production
+
+      ::Cabin::Outputs::IO.class_eval { alias :write :'<<' }
+      ::Cabin::Outputs::StdlibLogger.class_eval { alias :write :'<<' }
+
+      access_logger = Cabin::Channel.get(LogStash::Api)
+      access_logger.subscribe(STDOUT)
+      access_logger.level = :debug
+
+      error_logger  = ::File.new(::File.join(::File.dirname(::File.expand_path(__FILE__)),'../../..','error.log'),"a+")
+      error_logger.sync = true
+
+      configure do
+        use ::Rack::CommonLogger, access_logger
+      end
+
+      before do
+        env["rack.errors"] =  error_logger
+      end
+    else
+      set :show_exceptions, :after_handler
+    end
+
+    helpers AppHelpers
+
+    def initialize(app=nil)
+      super(app)
+      @service = LogStash::Api::Service.instance
+      @factory = CommandFactory.new(@service)
+    end
+
+  end
+end
diff --git a/logstash-core/api/lib/app/command.rb b/logstash-core/api/lib/app/command.rb
new file mode 100644
index 00000000000..bada3443174
--- /dev/null
+++ b/logstash-core/api/lib/app/command.rb
@@ -0,0 +1,18 @@
+# encoding: utf-8
+require "app/service"
+
+module LogStash::Api
+  class Command
+
+    attr_reader :service
+
+    def initialize(service = LogStash::Api::Service.instane)
+      @service = service
+    end
+
+    def run
+      raise "Not implemented"
+    end
+
+  end
+end
diff --git a/logstash-core/api/lib/app/command_factory.rb b/logstash-core/api/lib/app/command_factory.rb
new file mode 100644
index 00000000000..cda6837bebc
--- /dev/null
+++ b/logstash-core/api/lib/app/command_factory.rb
@@ -0,0 +1,23 @@
+# encoding: utf-8
+require "app/service"
+require "app/system/info_command"
+require "app/pipeline/stats_command"
+
+module LogStash::Api
+  class CommandFactory
+
+    attr_reader :factory, :service
+
+    def initialize(service)
+      @service = service
+      @factory = {}.merge(
+        :system_info => SystemInfoCommand,
+        :stats_command => PipelineStatsCommand
+      )
+    end
+
+    def build(klass)
+      factory[klass].new(service)
+    end
+  end
+end
diff --git a/logstash-core/api/lib/app/pipeline.rb b/logstash-core/api/lib/app/pipeline.rb
new file mode 100644
index 00000000000..39d797fbaad
--- /dev/null
+++ b/logstash-core/api/lib/app/pipeline.rb
@@ -0,0 +1,42 @@
+# encoding: utf-8
+require "app"
+require "app/pipeline/stats_command"
+
+module LogStash::Api
+  class Pipeline < BaseApp
+
+    helpers AppHelpers
+
+    # Show general information about the pipeline
+    #  - pipeline status
+    #  - pipeline uptime
+    get "/info" do
+      respond_with({ "pipeline" => { "info" => true}})
+    end
+
+
+    # Show stats information
+    # (for ingested, emitted, dropped)
+    # - #events since startup
+    # - #data (bytes) since startup
+    # - events/s
+    # - bytes/s
+    # - dropped events/s
+    # - events in the pipeline
+    get "/stats" do
+      command = factory.build(:stats_command)
+      respond_with command.run
+    end
+
+    # Show information of
+    # - list of active pipeline plugins (with versions)
+    # - # of active input plugins
+    # - # of active fitler plugins
+    # - # of active codec plugins
+    # - # of active output plugins
+    get "/plugins" do
+      respond_with({ "pipeline" => { "plugins" => true}})
+    end
+
+  end
+end
diff --git a/logstash-core/api/lib/app/pipeline/stats_command.rb b/logstash-core/api/lib/app/pipeline/stats_command.rb
new file mode 100644
index 00000000000..70d3d707444
--- /dev/null
+++ b/logstash-core/api/lib/app/pipeline/stats_command.rb
@@ -0,0 +1,20 @@
+# encoding: utf-8
+require "app/command"
+
+class LogStash::Api::PipelineStatsCommand < LogStash::Api::Command
+
+  def run
+    #return whatever is comming out of the snapshot event, this obvoiusly
+    #need to be tailored to the right metrics for this command.
+    stats = service.get(:pipeline_stats)
+    snapshot = { "events" => {} }
+    stats.each_pair do |key, value|
+      if key.start_with?("events_")
+        field = key.gsub("events_", "")
+        snapshot["events"][field] = value
+      end
+    end
+    snapshot
+  end
+
+end
diff --git a/logstash-core/api/lib/app/root.rb b/logstash-core/api/lib/app/root.rb
new file mode 100644
index 00000000000..4a47ede4eb7
--- /dev/null
+++ b/logstash-core/api/lib/app/root.rb
@@ -0,0 +1,15 @@
+# encoding: utf-8
+require "app"
+
+module LogStash::Api
+  class Root < BaseApp
+
+    get "/" do
+      content = { "name" => "Logstash API",
+                  "version" => { "number" => "0.1.0" },
+                }
+      respond_with content
+    end
+
+  end
+end
diff --git a/logstash-core/api/lib/app/service.rb b/logstash-core/api/lib/app/service.rb
new file mode 100644
index 00000000000..5a0b69f369a
--- /dev/null
+++ b/logstash-core/api/lib/app/service.rb
@@ -0,0 +1,31 @@
+# encoding: utf-8
+require "logstash/instrument/collector"
+
+class LogStash::Api::Service
+
+  include Singleton
+
+  def initialize
+    @snapshot_rotation_mutex = Mutex.new
+    @snapshot = nil
+
+    LogStash::Instrument::Collector.instance.add_observer(self)
+  end
+
+  def stop
+    LogStash::Instrument::Collector.instance.delete_observer(self)
+  end
+
+  def update(time, snapshot)
+    if @snapshot_rotation_mutex.try_lock
+      @snapshot = snapshot
+      @snapshot_rotation_mutex.unlock
+    end
+  end
+
+  def get(key=:service_metrics)
+    @snapshot.to_event.to_hash
+  rescue
+    {}
+  end
+end
diff --git a/logstash-core/api/lib/app/system.rb b/logstash-core/api/lib/app/system.rb
new file mode 100644
index 00000000000..d0719ef43f7
--- /dev/null
+++ b/logstash-core/api/lib/app/system.rb
@@ -0,0 +1,27 @@
+# encoding: utf-8
+require "app"
+require "app/system/info_command"
+
+module LogStash::Api
+  class System < BaseApp
+
+    # Show general information about the system
+    #  - Logstash version
+    #  - host name
+    #  - # of installed plugins
+    #  - list of installed plugins (with versions)
+    get "/" do
+      command = factory.build(:system_info)
+      respond_with command.run
+    end
+
+    # Show stats information
+    # - CPU
+    # - Memory
+    # - # open file descriptors
+    get "/stats" do
+      respond_with({ "system" => { "stats" => true}})
+    end
+
+  end
+end
diff --git a/logstash-core/api/lib/app/system/info_command.rb b/logstash-core/api/lib/app/system/info_command.rb
new file mode 100644
index 00000000000..09942daed68
--- /dev/null
+++ b/logstash-core/api/lib/app/system/info_command.rb
@@ -0,0 +1,23 @@
+# encoding: utf-8
+require "app/command"
+
+class LogStash::Api::SystemInfoCommand < LogStash::Api::Command
+
+  def run
+    report = { "version"   => "1.0.0",
+               "host_name" => "foobar",
+               "plugins"   => { "count" => 10, "list" => [] }
+    }
+    report
+  end
+
+  private
+
+  def type
+    ["input", "output", "filter"][rand(3)]
+  end
+
+  def name
+    ["elasticsearch", "json", "yaml", "translate"][rand(4)]
+  end
+end
diff --git a/logstash-core/api/lib/app_helpers.rb b/logstash-core/api/lib/app_helpers.rb
new file mode 100644
index 00000000000..adaba94febe
--- /dev/null
+++ b/logstash-core/api/lib/app_helpers.rb
@@ -0,0 +1,9 @@
+# encoding: utf-8
+require "logstash/json"
+
+module LogStash::Api::AppHelpers
+
+  def respond_with(data)
+    LogStash::Json.dump(data)
+  end
+end
diff --git a/logstash-core/api/spec/lib/api/pipeline_spec.rb b/logstash-core/api/spec/lib/api/pipeline_spec.rb
new file mode 100644
index 00000000000..02c51b02abe
--- /dev/null
+++ b/logstash-core/api/spec/lib/api/pipeline_spec.rb
@@ -0,0 +1,29 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "sinatra"
+require "app/pipeline"
+
+describe LogStash::Api::Pipeline do
+
+  include Rack::Test::Methods
+
+  def app()
+    described_class
+  end
+
+  it "respond to the info resource" do
+    get "/info"
+    expect(last_response).to be_ok
+  end
+
+  it "respond to the stats resource" do
+    get "/stats"
+    expect(last_response).to be_ok
+  end
+
+  it "respond to the stats resource" do
+    get "/plugins"
+    expect(last_response).to be_ok
+  end
+
+end
diff --git a/logstash-core/api/spec/lib/api/root_spec.rb b/logstash-core/api/spec/lib/api/root_spec.rb
new file mode 100644
index 00000000000..e0f40408912
--- /dev/null
+++ b/logstash-core/api/spec/lib/api/root_spec.rb
@@ -0,0 +1,32 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "sinatra"
+require "app/root"
+
+describe LogStash::Api::Root do
+
+  include Rack::Test::Methods
+
+  def app()
+    described_class
+  end
+
+  let(:body) { JSON.parse(last_response.body) }
+
+  before(:each) do
+    get "/"
+  end
+
+  it "should respond to root resource" do
+    expect(last_response).to be_ok
+  end
+
+  it "contain a hostname" do
+    expect(body).to include("name" => a_kind_of(String))
+  end
+
+  it "contain a version number" do
+    expect(body).to include("version" => { "number" => a_kind_of(String) } )
+  end
+
+end
diff --git a/logstash-core/api/spec/lib/api/system_spec.rb b/logstash-core/api/spec/lib/api/system_spec.rb
new file mode 100644
index 00000000000..1db3fb97774
--- /dev/null
+++ b/logstash-core/api/spec/lib/api/system_spec.rb
@@ -0,0 +1,24 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "sinatra"
+require "app/system"
+
+describe LogStash::Api::System do
+
+  include Rack::Test::Methods
+
+  def app()
+    described_class
+  end
+
+  it "respond to the root resource" do
+    get "/"
+    expect(last_response).to be_ok
+  end
+
+   it "respond to the stats resource" do
+    get "/stats"
+    expect(last_response).to be_ok
+  end
+
+end
diff --git a/logstash-core/api/spec/lib/commands/plugins_spec.rb b/logstash-core/api/spec/lib/commands/plugins_spec.rb
new file mode 100644
index 00000000000..7d854a6c4cc
--- /dev/null
+++ b/logstash-core/api/spec/lib/commands/plugins_spec.rb
@@ -0,0 +1,27 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "app/pipeline/stats_command"
+
+describe LogStash::Api::PipelineStatsCommand do
+
+  let(:service) { double("snapshot-service") }
+
+  subject { described_class.new(service) }
+
+  let(:stats) do
+    { "events_startup" => 10, "events_in" => 100, "events_filtered" => 200 }
+  end
+
+  before(:each) do
+    allow(service).to receive(:get).with(:pipeline_stats).and_return(stats)
+  end
+
+  context "#schema" do
+    let(:report) { subject.run }
+
+    it "return events information" do
+      expect(report).to include("events" => { "startup" => 10, "in" => 100, "filtered" => 200 })
+    end
+
+  end
+end
diff --git a/logstash-core/api/spec/lib/commands/systems_spec.rb b/logstash-core/api/spec/lib/commands/systems_spec.rb
new file mode 100644
index 00000000000..88a9826fb3a
--- /dev/null
+++ b/logstash-core/api/spec/lib/commands/systems_spec.rb
@@ -0,0 +1,27 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "app/system/info_command"
+
+describe LogStash::Api::SystemInfoCommand do
+
+  let(:service) { double("snapshot-service") }
+
+  subject { described_class.new(service) }
+
+  context "#schema" do
+    let(:report) { subject.run }
+
+    it "return a list of plugins" do
+      expect(report).to include("plugins" => { "count" => a_kind_of(Fixnum), "list" => a_kind_of(Array)})
+    end
+
+    it "include version information" do
+      expect(report).to include("version" => a_kind_of(String))
+    end
+
+    it "include hostname information" do
+      expect(report).to include("host_name" => a_kind_of(String))
+    end
+
+  end
+end
diff --git a/logstash-core/api/spec/spec_helper.rb b/logstash-core/api/spec/spec_helper.rb
new file mode 100644
index 00000000000..9ffc5e88f8f
--- /dev/null
+++ b/logstash-core/api/spec/spec_helper.rb
@@ -0,0 +1,11 @@
+# encoding: utf-8
+ROOT = File.expand_path(File.join(File.dirname(__FILE__), ".."))
+$LOAD_PATH.unshift File.join(ROOT, 'lib')
+Dir.glob('lib/**').each{ |d| $LOAD_PATH.unshift(File.join(ROOT, d)) }
+
+require "logstash/devutils/rspec/spec_helper"
+
+require 'rack/test'
+require 'rspec'
+
+ENV['RACK_ENV'] = 'test'
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 2e649151817..dcb04c572b8 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -8,6 +8,7 @@
 require "logstash/instrument/collector"
 require "logstash/instrument/metric"
 require "logstash/pipeline"
+require "logstash/webserver"
 require "uri"
 require "stud/trap"
 
@@ -16,13 +17,13 @@
 class LogStash::Agent
 
   attr_writer :logger
-  attr_reader :metric
+  attr_reader :metric, :debug
 
   def initialize(options = {})
     @pipelines = {}
     @collect_metric = options.fetch(:collect_metric, false)
     @logger = options[:logger]
-
+    @debug  = options.fetch(:debug, false)
     configure_metric
   end
 
@@ -34,6 +35,8 @@ def execute
     start_background_services
 
     @pipelines.each { |_, p| Thread.new { p.run } }
+    start_webserver
+
     sleep(1) while true
     return 0
   rescue => e
@@ -55,6 +58,19 @@ def add_pipeline(pipeline_id, config_str, settings = {})
   end
 
   private
+
+  def start_webserver
+    options = { :debug => debug }
+    @webserver = LogStash::WebServer.new(@logger, options)
+    Thread.new(@webserver) do |webserver|
+      webserver.run
+    end
+  end
+
+  def stop_webserver
+    @webserver.stop
+  end
+
   def start_background_services
     if collect_metric?
       @logger.debug("Agent: Starting metric periodic pollers")
@@ -134,6 +150,7 @@ def trap_sigterm
     Stud::trap("TERM") do
       @logger.warn(I18n.t("logstash.agent.sigterm"))
       shutdown_pipelines
+      stop_webserver
     end
   end
 
@@ -147,6 +164,7 @@ def trap_sigint
         Thread.new(@logger) {|logger| sleep 5; logger.warn(I18n.t("logstash.agent.slow_shutdown")) }
         @interrupted_once = true
         shutdown_pipelines
+        stop_webserver
       end
     end
   end
diff --git a/logstash-core/lib/logstash/namespace.rb b/logstash-core/lib/logstash/namespace.rb
index 44701c38450..355f0ac25fa 100644
--- a/logstash-core/lib/logstash/namespace.rb
+++ b/logstash-core/lib/logstash/namespace.rb
@@ -10,4 +10,5 @@ module Web; end
   module Util; end
   module PluginMixins; end
   module PluginManager; end
+  module Api; end
 end # module LogStash
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 4ffecfb0a52..81669a5174c 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -92,7 +92,7 @@ def execute
     # make sure the logger has the correct settings and the log level is correctly defined.
     configure_logging(log_file)
 
-    @agent = LogStash::Agent.new({ :collect_metric => metric?, :logger => @logger })
+    @agent = LogStash::Agent.new({ :collect_metric => metric?, :logger => @logger, :debug => debug? })
 
     LogStash::Util::set_thread_name(self.class.name)
 
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
new file mode 100644
index 00000000000..093c5113490
--- /dev/null
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -0,0 +1,86 @@
+# encoding: utf-8
+require "puma"
+require 'puma/single'
+require 'puma/binder'
+require 'puma/configuration'
+require 'puma/commonlogger'
+
+module LogStash
+  class WebServer
+
+  extend Forwardable
+
+  attr_reader :logger, :status, :config, :options, :cli_options, :runner, :binder, :events
+
+  def_delegator :@runner, :stats
+
+  def initialize(logger, options={})
+    @logger      = logger
+    @options     = {}
+    @cli_options = options.merge({ :rackup => ::File.join(::File.dirname(__FILE__), "../..", "api", "init.ru")  })
+    @status      = nil
+
+    parse_options
+
+    @runner  = nil
+    @events  = ::Puma::Events.strings
+    @binder  = ::Puma::Binder.new(@events)
+    @binder.import_from_env
+
+    set_environment
+  end
+
+  def run
+    log "=== puma start: #{Time.now} ==="
+
+    @runner = Puma::Single.new(self)
+    @status = :run
+    @runner.run
+    stop(:graceful => true)
+  end
+
+  def log(str)
+    logger.debug(str) if logger.debug?
+  end
+
+  def error(str)
+    logger.error(str) if logger.error?
+  end
+
+  # Empty method, this method is required because of the puma usage we make through
+  # the Single interface, https://github.com/puma/puma/blob/master/lib/puma/single.rb#L82
+  # for more details. This can always be implemented when we want to keep track of this
+  # bit of data.
+  def write_state; end
+
+  def stop(options={})
+    graceful = options.fetch(:graceful, true)
+
+    if graceful
+      @runner.stop_blocked
+    else
+      @runner.stop
+    end
+    @status = :stop
+    log "=== puma shutdown: #{Time.now} ==="
+  end
+
+  private 
+
+  def env
+    @options[:debug] ? "development" : "production"
+  end
+
+  def set_environment
+    @options[:environment] = env
+    ENV['RACK_ENV']        = env
+  end
+
+  def parse_options
+    @config  = ::Puma::Configuration.new(cli_options)
+    @config.load
+    @options = @config.options
+  end
+
+  end
+end
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index d3aef5930cd..c52dc22942c 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -11,10 +11,10 @@ Gem::Specification.new do |gem|
   gem.homepage      = "http://www.elastic.co/guide/en/logstash/current/index.html"
   gem.license       = "Apache License (2.0)"
 
-  gem.files         = Dir.glob(["logstash-core.gemspec", "lib/**/*.rb", "spec/**/*.rb", "locales/*"])
+  gem.files         = Dir.glob(["logstash-core.gemspec", "api/**/*" "lib/**/*.rb", "spec/**/*.rb", "locales/*"])
   gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
   gem.name          = "logstash-core"
-  gem.require_paths = ["lib"]
+  gem.require_paths = ["lib", "api"]
   gem.version       = LOGSTASH_CORE_VERSION
 
   gem.add_runtime_dependency "logstash-core-event", "~> 3.0.0.dev"
@@ -27,6 +27,8 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "gems", "~> 0.8.3"  #(MIT license)
   gem.add_runtime_dependency "concurrent-ruby", "1.0.0"
   gem.add_runtime_dependency "jruby-openssl", ">= 0.9.11" # Required to support TLSv1.2
+  gem.add_runtime_dependency "sinatra", '~> 1.4', '>= 1.4.6'
+  gem.add_runtime_dependency "puma", '~> 2.15', '>= 2.15.3'
 
   # TODO(sissel): Treetop 1.5.x doesn't seem to work well, but I haven't
   # investigated what the cause might be. -Jordan
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 8c0d16ff4ef..0d1a0607895 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -52,6 +52,11 @@ namespace "test" do
     exit(RSpec::Core::Runner.run([Rake::FileList[args.specfile]]))
   end
 
+  desc "run api specs"
+  task "api" => ["setup"] do
+    exit(RSpec::Core::Runner.run(Rake::FileList["logstash-core/api/spec/**/*_spec.rb"]))
+  end
+
   desc "run all installed plugins specs"
   task "plugins" => ["setup"] do
     plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
