diff --git a/tools/ingest-converter/src/main/java/org/logstash/ingest/Append.java b/tools/ingest-converter/src/main/java/org/logstash/ingest/Append.java
new file mode 100644
index 00000000000..d783fd45bd3
--- /dev/null
+++ b/tools/ingest-converter/src/main/java/org/logstash/ingest/Append.java
@@ -0,0 +1,33 @@
+package org.logstash.ingest;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import javax.script.Invocable;
+import javax.script.ScriptEngine;
+import javax.script.ScriptException;
+
+/**
+ * Ingest Append DSL to Logstash mutate Transpiler.
+ */
+public final class Append {
+
+    private Append() {
+        // Utility Wrapper for JS Script.
+    }
+
+    public static void main(final String... args) throws ScriptException, NoSuchMethodException {
+        try {
+            final ScriptEngine engine = JsUtil.engine();
+            Files.write(Paths.get(args[1]), ((String) ((Invocable) engine).invokeFunction(
+                "ingest_append_to_logstash",
+                new String(
+                    Files.readAllBytes(Paths.get(args[0])), StandardCharsets.UTF_8
+                )
+            )).getBytes(StandardCharsets.UTF_8));
+        } catch (final IOException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+}
diff --git a/tools/ingest-converter/src/main/java/org/logstash/ingest/JsUtil.java b/tools/ingest-converter/src/main/java/org/logstash/ingest/JsUtil.java
index 1b9c21043a6..1d03fbba94d 100644
--- a/tools/ingest-converter/src/main/java/org/logstash/ingest/JsUtil.java
+++ b/tools/ingest-converter/src/main/java/org/logstash/ingest/JsUtil.java
@@ -14,7 +14,7 @@ final class JsUtil {
      */
 
     private static final String[] SCRIPTS =
-        {"shared", "date", "grok", "geoip", "gsub", "pipeline", "convert"};
+        {"shared", "date", "grok", "geoip", "gsub", "pipeline", "convert", "append", "json"};
 
     private JsUtil() {
         // Utility Class
diff --git a/tools/ingest-converter/src/main/java/org/logstash/ingest/Json.java b/tools/ingest-converter/src/main/java/org/logstash/ingest/Json.java
new file mode 100644
index 00000000000..cec73158958
--- /dev/null
+++ b/tools/ingest-converter/src/main/java/org/logstash/ingest/Json.java
@@ -0,0 +1,32 @@
+package org.logstash.ingest;
+
+import javax.script.Invocable;
+import javax.script.ScriptEngine;
+import javax.script.ScriptException;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+/**
+ * Ingest JSON processor DSL to Logstash json Transpiler.
+ */
+public class Json {
+    private Json() {
+        // Utility Wrapper for JS Script.
+    }
+
+    public static void main(final String... args) throws ScriptException, NoSuchMethodException {
+        try {
+            final ScriptEngine engine = JsUtil.engine();
+            Files.write(Paths.get(args[1]), ((String) ((Invocable) engine).invokeFunction(
+                "ingest_json_to_logstash",
+                new String(
+                    Files.readAllBytes(Paths.get(args[0])), StandardCharsets.UTF_8
+                )
+            )).getBytes(StandardCharsets.UTF_8));
+        } catch (final IOException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+}
diff --git a/tools/ingest-converter/src/main/resources/ingest-append.js b/tools/ingest-converter/src/main/resources/ingest-append.js
new file mode 100644
index 00000000000..39342ed8750
--- /dev/null
+++ b/tools/ingest-converter/src/main/resources/ingest-append.js
@@ -0,0 +1,36 @@
+var IngestAppend = {
+    has_append: function (processor) {
+        return !!processor["append"];
+    },
+    append_hash: function (processor) {
+        var append_json = processor["append"];
+        var value_contents;
+        var value = append_json["value"];
+        if (Array.isArray(value)) {
+            value_contents = IngestConverter.create_array(value);
+        } else {
+            value_contents = IngestConverter.quote_string(value);
+        }
+        var mutate_contents = IngestConverter.create_field(
+            IngestConverter.quote_string(IngestConverter.dots_to_square_brackets(append_json["field"])),
+            value_contents);
+        return IngestConverter.create_field("add_field", IngestConverter.wrap_in_curly(mutate_contents));
+    }
+};
+
+/**
+ * Converts Ingest Append JSON to LS mutate filter.
+ */
+function ingest_append_to_logstash(json) {
+
+    function map_processor(processor) {
+
+        return IngestConverter.filter_hash(
+            IngestConverter.create_hash(
+                "mutate", IngestAppend.append_hash(processor)
+            )
+        );
+    }
+
+    return IngestConverter.filters_to_file(JSON.parse(json)["processors"].map(map_processor));
+}
diff --git a/tools/ingest-converter/src/main/resources/ingest-convert.js b/tools/ingest-converter/src/main/resources/ingest-convert.js
index 6deb699d66e..68c2378eb95 100644
--- a/tools/ingest-converter/src/main/resources/ingest-convert.js
+++ b/tools/ingest-converter/src/main/resources/ingest-convert.js
@@ -8,7 +8,7 @@ var IngestConvert = {
             IngestConverter.quote_string(IngestConverter.dots_to_square_brackets(convert_json["field"])),
             IngestConverter.quote_string(convert_json["type"])
         );
-        return IngestConverter.create_hash("convert", mutate_contents);
+        return IngestConverter.create_field("convert", IngestConverter.wrap_in_curly(mutate_contents));
     }
 };
 
diff --git a/tools/ingest-converter/src/main/resources/ingest-json.js b/tools/ingest-converter/src/main/resources/ingest-json.js
new file mode 100644
index 00000000000..c92d71060f3
--- /dev/null
+++ b/tools/ingest-converter/src/main/resources/ingest-json.js
@@ -0,0 +1,44 @@
+var IngestJson = {
+    has_json: function (processor) {
+        return !!processor["json"];
+    },
+    json_hash: function (processor) {
+        var json_data = processor["json"];
+        var parts = [
+            IngestConverter.create_field(
+                "source",
+                IngestConverter.quote_string(
+                    IngestConverter.dots_to_square_brackets(json_data["field"])
+                )
+            )
+        ];
+
+        if (json_data["target_field"]) {
+            parts.push(
+                IngestConverter.create_field(
+                    "target",
+                    IngestConverter.quote_string(
+                        IngestConverter.dots_to_square_brackets(json_data["target_field"])
+                    )
+                )
+            );
+        }
+
+        return IngestConverter.join_hash_fields(parts);
+    }
+};
+
+/**
+ * Converts Ingest json processor to LS json filter.
+ */
+function ingest_json_to_logstash(json) {
+
+    function map_processor(processor) {
+
+        return IngestConverter.filter_hash(
+            IngestConverter.create_hash("json", IngestJson.json_hash(processor))
+        )
+    }
+
+    return IngestConverter.filters_to_file(JSON.parse(json)["processors"].map(map_processor));
+}
diff --git a/tools/ingest-converter/src/main/resources/ingest-pipeline.js b/tools/ingest-converter/src/main/resources/ingest-pipeline.js
index 311c33f8611..5cc8e6484d1 100644
--- a/tools/ingest-converter/src/main/resources/ingest-pipeline.js
+++ b/tools/ingest-converter/src/main/resources/ingest-pipeline.js
@@ -31,6 +31,16 @@ function ingest_pipeline_to_logstash(json) {
                 IngestConverter.create_hash("mutate", IngestGsub.gsub_hash(processor))
             );
         }
+        if (IngestAppend.has_append(processor)) {
+            filter_blocks.push(
+                IngestConverter.create_hash("mutate", IngestAppend.append_hash(processor))
+            );
+        }
+        if (IngestJson.has_json(processor)) {
+            filter_blocks.push(
+                IngestConverter.create_hash("json", IngestJson.json_hash(processor))
+            );
+        }
         return IngestConverter.join_hash_fields(filter_blocks);
     }
 
diff --git a/tools/ingest-converter/src/main/resources/ingest-shared.js b/tools/ingest-converter/src/main/resources/ingest-shared.js
index 6b39a0f57b1..c4c50329f77 100644
--- a/tools/ingest-converter/src/main/resources/ingest-shared.js
+++ b/tools/ingest-converter/src/main/resources/ingest-shared.js
@@ -90,6 +90,12 @@ var IngestConverter = {
             + patterns.map(this.dots_to_square_brackets).map(this.quote_string).join(",\n") 
             + "\n]";
     },
+
+    create_array: function (ingest_array) {
+        return "[\n"
+            + ingest_array.map(this.quote_string).join(",\n")
+            + "\n]";
+    },
     
     /**
      * Converts Ingest/JSON style pattern array to LS pattern array or string if the given array
diff --git a/tools/ingest-converter/src/test/java/org/logstash/ingest/AppendTest.java b/tools/ingest-converter/src/test/java/org/logstash/ingest/AppendTest.java
new file mode 100644
index 00000000000..57115c50529
--- /dev/null
+++ b/tools/ingest-converter/src/test/java/org/logstash/ingest/AppendTest.java
@@ -0,0 +1,25 @@
+package org.logstash.ingest;
+
+import java.util.Arrays;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.runners.Parameterized.Parameters;
+
+public final class AppendTest extends IngestTest {
+
+    @Parameters
+    public static Iterable<String> data() {
+        return Arrays.asList("Append", "DotsInAppendField", "AppendScalar");
+    }
+
+    @Test
+    public void convertsConvertProcessorCorrectly() throws Exception {
+        final String append = getResultPath(temp);
+        Append.main(resourcePath(String.format("ingest%s.json", testCase)), append);
+        assertThat(
+            utf8File(append), is(utf8File(resourcePath(String.format("logstash%s.conf", testCase))))
+        );
+    }
+}
diff --git a/tools/ingest-converter/src/test/java/org/logstash/ingest/JsonTest.java b/tools/ingest-converter/src/test/java/org/logstash/ingest/JsonTest.java
new file mode 100644
index 00000000000..256f9d61805
--- /dev/null
+++ b/tools/ingest-converter/src/test/java/org/logstash/ingest/JsonTest.java
@@ -0,0 +1,25 @@
+package org.logstash.ingest;
+
+import java.util.Arrays;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.runners.Parameterized.Parameters;
+
+public final class JsonTest extends IngestTest {
+
+    @Parameters
+    public static Iterable<String> data() {
+        return Arrays.asList("Json", "DotsInJsonField", "JsonExtraFields");
+    }
+
+    @Test
+    public void convertsConvertProcessorCorrectly() throws Exception {
+        final String json = getResultPath(temp);
+        Json.main(resourcePath(String.format("ingest%s.json", testCase)), json);
+        assertThat(
+            utf8File(json), is(utf8File(resourcePath(String.format("logstash%s.conf", testCase))))
+        );
+    }
+}
\ No newline at end of file
diff --git a/tools/ingest-converter/src/test/java/org/logstash/ingest/PipelineTest.java b/tools/ingest-converter/src/test/java/org/logstash/ingest/PipelineTest.java
index 358e9af913e..da55a68a855 100644
--- a/tools/ingest-converter/src/test/java/org/logstash/ingest/PipelineTest.java
+++ b/tools/ingest-converter/src/test/java/org/logstash/ingest/PipelineTest.java
@@ -20,6 +20,8 @@ public static Iterable<String> data() {
         GrokTest.data().forEach(cases::add);
         ConvertTest.data().forEach(cases::add);
         GsubTest.data().forEach(cases::add);
+        AppendTest.data().forEach(cases::add);
+        JsonTest.data().forEach(cases::add);
         return cases;
     }
 
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppend.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppend.json
new file mode 100644
index 00000000000..471d4337cd2
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppend.json
@@ -0,0 +1,11 @@
+{
+  "description": "Pipeline to parse Apache logs",
+  "processors": [
+    {
+      "append": {
+        "field" : "client",
+        "value": ["host1", "host2"]
+      }
+    }
+  ]
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppendScalar.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppendScalar.json
new file mode 100644
index 00000000000..34ad59e5e7d
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestAppendScalar.json
@@ -0,0 +1,11 @@
+{
+  "description": "Pipeline to parse Apache logs",
+  "processors": [
+    {
+      "append": {
+        "field" : "foo",
+        "value": "bar"
+      }
+    }
+  ]
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestComplexCase1.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestComplexCase1.json
index 0b792cb8582..719b5388af4 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestComplexCase1.json
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestComplexCase1.json
@@ -30,6 +30,17 @@
         "field" : "bytes",
         "type": "integer"
       }
+    },
+    {
+      "append": {
+        "field" : "response_code",
+        "value": ["200", "400", "503"]
+      }
+    },
+    {
+      "json": {
+        "field": "string_source"
+      }
     }
   ]
 }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInAppendField.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInAppendField.json
new file mode 100644
index 00000000000..70989b3546d
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInAppendField.json
@@ -0,0 +1,11 @@
+{
+  "description": "Pipeline to parse Apache logs",
+  "processors": [
+    {
+      "append": {
+        "field" : "client.ip",
+        "value": ["127.0.0.1", "127.0.0.2"]
+      }
+    }
+  ]
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInJsonField.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInJsonField.json
new file mode 100644
index 00000000000..ed4f41f1f34
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestDotsInJsonField.json
@@ -0,0 +1,11 @@
+{
+  "description": "ExampleJson",
+  "processors": [
+    {
+      "json": {
+        "field": "[foo][string_source]",
+        "target_field": "[bar][json_target]"
+      }
+    }
+  ]
+}
\ No newline at end of file
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJson.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJson.json
new file mode 100644
index 00000000000..54a8adf6609
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJson.json
@@ -0,0 +1,10 @@
+{
+  "description": "ExampleJson",
+  "processors": [
+    {
+      "json": {
+        "field": "string_source"
+      }
+    }
+  ]
+}
\ No newline at end of file
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJsonExtraFields.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJsonExtraFields.json
new file mode 100644
index 00000000000..e95bedc274a
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestJsonExtraFields.json
@@ -0,0 +1,11 @@
+{
+  "description": "ExampleJson",
+  "processors": [
+    {
+      "json": {
+        "field": "string_source",
+        "target_field": "json_target"
+      }
+    }
+  ]
+}
\ No newline at end of file
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppend.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppend.conf
new file mode 100644
index 00000000000..078b1cfb64a
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppend.conf
@@ -0,0 +1,10 @@
+filter {
+   mutate {
+      add_field => {
+         "client" => [
+            "host1",
+            "host2"
+         ]
+      }
+   }
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppendScalar.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppendScalar.conf
new file mode 100644
index 00000000000..5c0398d5440
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashAppendScalar.conf
@@ -0,0 +1,7 @@
+filter {
+   mutate {
+      add_field => {
+         "foo" => "bar"
+      }
+   }
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase1.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase1.conf
index c5cfae694fe..fbcb642147b 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase1.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase1.conf
@@ -17,8 +17,20 @@ filter {
       target => "geo"
    }
    mutate {
-      convert {
+      convert => {
          "bytes" => "integer"
       }
    }
+   mutate {
+      add_field => {
+         "response_code" => [
+            "200",
+            "400",
+            "503"
+         ]
+      }
+   }
+   json {
+      source => "string_source"
+   }
 }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase2.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase2.conf
index e935a2f87c3..07ebef67e2d 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase2.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashComplexCase2.conf
@@ -21,7 +21,7 @@ filter {
       target => "[source][geo]"
    }
    mutate {
-      convert {
+      convert => {
          "[client][bytes]" => "integer"
       }
    }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvert.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvert.conf
index 788dc881613..47e7af61f89 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvert.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvert.conf
@@ -1,6 +1,6 @@
 filter {
    mutate {
-      convert {
+      convert => {
          "bytes" => "integer"
       }
    }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertBoolean.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertBoolean.conf
index 1ace784818e..e2661cab68a 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertBoolean.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertBoolean.conf
@@ -1,6 +1,6 @@
 filter {
    mutate {
-      convert {
+      convert => {
          "delete" => "boolean"
       }
    }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertString.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertString.conf
index c8679e6714c..922241e3d48 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertString.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashConvertString.conf
@@ -1,6 +1,6 @@
 filter {
    mutate {
-      convert {
+      convert => {
          "blah" => "string"
       }
    }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInAppendField.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInAppendField.conf
new file mode 100644
index 00000000000..df547a28d38
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInAppendField.conf
@@ -0,0 +1,10 @@
+filter {
+   mutate {
+      add_field => {
+         "[client][ip]" => [
+            "127.0.0.1",
+            "127.0.0.2"
+         ]
+      }
+   }
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInConvertField.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInConvertField.conf
index 75c91f57001..8ae1831d04f 100644
--- a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInConvertField.conf
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInConvertField.conf
@@ -1,6 +1,6 @@
 filter {
    mutate {
-      convert {
+      convert => {
          "[client][bytes]" => "float"
       }
    }
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInJsonField.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInJsonField.conf
new file mode 100644
index 00000000000..43cf0b570ef
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashDotsInJsonField.conf
@@ -0,0 +1,6 @@
+filter {
+   json {
+      source => "[foo][string_source]"
+      target => "[bar][json_target]"
+   }
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJson.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJson.conf
new file mode 100644
index 00000000000..fad4b3aed86
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJson.conf
@@ -0,0 +1,5 @@
+filter {
+   json {
+      source => "string_source"
+   }
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJsonExtraFields.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJsonExtraFields.conf
new file mode 100644
index 00000000000..c295311c916
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashJsonExtraFields.conf
@@ -0,0 +1,6 @@
+filter {
+   json {
+      source => "string_source"
+      target => "json_target"
+   }
+}
