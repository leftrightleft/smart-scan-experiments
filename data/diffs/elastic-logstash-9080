diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index ea8af8a3b13..7810c131082 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -559,7 +559,7 @@ def collect_dlq_stats
   def collect_stats
     pipeline_metric = @metric.namespace([:stats, :pipelines, pipeline_id.to_s.to_sym, :queue])
     pipeline_metric.gauge(:type, settings.get("queue.type"))
-    if @queue.is_a?(LogStash::Util::WrappedAckedQueue) && @queue.queue.is_a?(LogStash::AckedQueue)
+    if @queue.is_a?(LogStash::WrappedAckedQueue) && @queue.queue.is_a?(LogStash::AckedQueue)
       queue = @queue.queue
       dir_path = queue.dir_path
       file_store = Files.get_file_store(Paths.get(dir_path))
diff --git a/logstash-core/lib/logstash/queue_factory.rb b/logstash-core/lib/logstash/queue_factory.rb
index b261b25f512..60103cb7f70 100644
--- a/logstash-core/lib/logstash/queue_factory.rb
+++ b/logstash-core/lib/logstash/queue_factory.rb
@@ -21,7 +21,7 @@ def self.create(settings)
       when "persisted"
         # persisted is the disk based acked queue
         FileUtils.mkdir_p(queue_path)
-        LogStash::Util::WrappedAckedQueue.create_file_based(queue_path, queue_page_capacity, queue_max_events, checkpoint_max_writes, checkpoint_max_acks, checkpoint_max_interval, queue_max_bytes)
+        LogStash::WrappedAckedQueue.new(queue_path, queue_page_capacity, queue_max_events, checkpoint_max_writes, checkpoint_max_acks, checkpoint_max_interval, queue_max_bytes)
       when "memory"
         # memory is the legacy and default setting
         LogStash::WrappedSynchronousQueue.new(
diff --git a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
index 815da9a9df4..a511e81fecd 100644
--- a/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
+++ b/logstash-core/spec/logstash/acked_queue_concurrent_stress_spec.rb
@@ -3,7 +3,7 @@
 require "logstash/event"
 require "logstash/instrument/namespaced_metric"
 
-describe LogStash::Util::WrappedAckedQueue, :stress_test => true do
+describe LogStash::WrappedAckedQueue, :stress_test => true do
   let(:path) { Stud::Temporary.directory }
 
   context "with multiple writers" do
@@ -15,7 +15,7 @@
     let(:reject_memo_keys) { [:reject_memo_keys, :path, :queue, :writer_threads, :collector, :metric, :reader_threads, :output_strings] }
 
     let(:queue) do
-      described_class.create_file_based(path, page_capacity, 0, queue_checkpoint_acks, queue_checkpoint_writes, queue_checkpoint_interval, queue_capacity)
+      described_class.new(path, page_capacity, 0, queue_checkpoint_acks, queue_checkpoint_writes, queue_checkpoint_interval, queue_capacity)
     end
 
     let(:writer_threads) do
diff --git a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
index 9333a6f644c..7639a9e0c6a 100644
--- a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
+++ b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
@@ -109,7 +109,7 @@ def threaded_read_client
 
   context "WrappedAckedQueue" do
     let(:path) { Stud::Temporary.directory }
-    let(:queue) { LogStash::Util::WrappedAckedQueue.create_file_based(path, 1024, 10, 1024, 1024, 1024, 4096) }
+    let(:queue) { LogStash::WrappedAckedQueue.new(path, 1024, 10, 1024, 1024, 1024, 4096) }
 
     before do
       read_client.set_events_metric(metric.namespace([:stats, :events]))
diff --git a/logstash-core/spec/logstash/queue_factory_spec.rb b/logstash-core/spec/logstash/queue_factory_spec.rb
index e80e1836b41..3e1adf6b66d 100644
--- a/logstash-core/spec/logstash/queue_factory_spec.rb
+++ b/logstash-core/spec/logstash/queue_factory_spec.rb
@@ -39,7 +39,7 @@
 
     it "returns a `WrappedAckedQueue`" do
       queue =  subject.create(settings)
-      expect(queue).to be_kind_of(LogStash::Util::WrappedAckedQueue)
+      expect(queue).to be_kind_of(LogStash::WrappedAckedQueue)
       queue.close
     end
 
diff --git a/logstash-core/spec/logstash/util/wrapped_acked_queue_spec.rb b/logstash-core/spec/logstash/util/wrapped_acked_queue_spec.rb
index 3a12c743c8c..f10d415e6db 100644
--- a/logstash-core/spec/logstash/util/wrapped_acked_queue_spec.rb
+++ b/logstash-core/spec/logstash/util/wrapped_acked_queue_spec.rb
@@ -2,7 +2,7 @@
 require "spec_helper"
 require "logstash/util/wrapped_acked_queue"
 
-describe LogStash::Util::WrappedAckedQueue do
+describe LogStash::WrappedAckedQueue do
   shared_examples "queue tests" do
     it "is_empty? on creation" do
       expect(queue.is_empty?).to be_truthy
@@ -38,7 +38,7 @@
     let(:checkpoint_writes) { 1024 }
     let(:checkpoint_interval) { 0 }
     let(:path) { Stud::Temporary.directory }
-    let(:queue) { LogStash::Util::WrappedAckedQueue.create_file_based(path, page_capacity, max_events, checkpoint_acks, checkpoint_writes, checkpoint_interval, max_bytes) }
+    let(:queue) { LogStash::WrappedAckedQueue.new(path, page_capacity, max_events, checkpoint_acks, checkpoint_writes, checkpoint_interval, max_bytes) }
 
     after do
       queue.close
diff --git a/logstash-core/src/main/java/org/logstash/Logstash.java b/logstash-core/src/main/java/org/logstash/Logstash.java
index 847e4f2c2b1..262abd90d50 100644
--- a/logstash-core/src/main/java/org/logstash/Logstash.java
+++ b/logstash-core/src/main/java/org/logstash/Logstash.java
@@ -44,7 +44,7 @@ public static void main(final String... args) {
         ) {
             logstash.run();
         } catch (final Throwable t) {
-            LOGGER.error(t);
+            LOGGER.error(t.toString());
             System.exit(1);
         }
         System.exit(0);
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 9e25ae3883f..a4e4d0185d4 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -9,6 +9,7 @@
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.ObjectAllocator;
 import org.logstash.ackedqueue.ext.JRubyAckedQueueExt;
+import org.logstash.ackedqueue.ext.JRubyWrappedAckedQueueExt;
 import org.logstash.ackedqueue.ext.RubyAckedBatch;
 import org.logstash.ext.JRubyWrappedWriteClientExt;
 import org.logstash.ext.JrubyAckedReadBatchExt;
@@ -66,6 +67,10 @@ public final class RubyUtil {
 
     public static final RubyClass WRAPPED_SYNCHRONOUS_QUEUE_CLASS;
 
+    public static final RubyClass WRAPPED_ACKED_QUEUE_CLASS;
+
+    public static final RubyClass ACKED_QUEUE_CLASS;
+
     static {
         RUBY = Ruby.getGlobalRuntime();
         LOGSTASH_MODULE = RUBY.getOrCreateModule("LogStash");
@@ -89,6 +94,9 @@ public final class RubyUtil {
         WRAPPED_SYNCHRONOUS_QUEUE_CLASS =
             setupLogstashClass(JrubyWrappedSynchronousQueueExt::new,
                     JrubyWrappedSynchronousQueueExt.class);
+        WRAPPED_ACKED_QUEUE_CLASS = setupLogstashClass(JRubyWrappedAckedQueueExt::new,
+                JRubyWrappedAckedQueueExt.class);
+        ACKED_QUEUE_CLASS = setupLogstashClass(JRubyAckedQueueExt::new, JRubyAckedQueueExt.class);
         RUBY_EVENT_CLASS = setupLogstashClass(
             JrubyEventExtLibrary.RubyEvent::new, JrubyEventExtLibrary.RubyEvent.class
         );
@@ -121,7 +129,6 @@ public final class RubyUtil {
         RUBY_EVENT_CLASS.setConstant("VERSION_ONE", RUBY.newString(Event.VERSION_ONE));
         RUBY_EVENT_CLASS.defineAnnotatedMethods(JrubyEventExtLibrary.RubyEvent.class);
         RUBY_EVENT_CLASS.defineAnnotatedConstants(JrubyEventExtLibrary.RubyEvent.class);
-        setupLogstashClass(JRubyAckedQueueExt::new, JRubyAckedQueueExt.class);
         RUBY_ACKED_BATCH_CLASS = setupLogstashClass(RubyAckedBatch::new, RubyAckedBatch.class);
         RUBY.getGlobalVariables().set("$LS_JARS_LOADED", RUBY.newString("true"));
     }
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
index 270dc88ac51..064a4f3a73d 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
@@ -33,6 +33,12 @@ public Queue getQueue() {
         return this.queue;
     }
 
+    public static JRubyAckedQueueExt create(String path, int capacity, int maxEvents, int checkpointMaxWrites, int checkpointMaxAcks, long maxBytes) {
+        JRubyAckedQueueExt queueExt = new JRubyAckedQueueExt(RubyUtil.RUBY, RubyUtil.ACKED_QUEUE_CLASS);
+        queueExt.initializeQueue(path, capacity, maxEvents, checkpointMaxWrites, checkpointMaxAcks, maxBytes);
+        return queueExt;
+    }
+
     @JRubyMethod(name = "initialize", optional = 7)
     public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) {
         args = Arity.scanArgs(context.runtime, args, 7, 0);
@@ -41,17 +47,22 @@ public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) {
         int checkpointMaxAcks = RubyFixnum.num2int(args[3]);
         int checkpointMaxWrites = RubyFixnum.num2int(args[4]);
         long queueMaxBytes = RubyFixnum.num2long(args[6]);
+        initializeQueue(args[0].asJavaString(), capacity, maxUnread, checkpointMaxWrites, checkpointMaxAcks, queueMaxBytes);
+
+        return context.nil;
+    }
+
+    private void initializeQueue(String path, int capacity, int maxEvents, int checkpointMaxWrites, int checkpointMaxAcks, long maxBytes) {
         this.queue = new Queue(
-            SettingsImpl.fileSettingsBuilder(args[0].asJavaString())
+            SettingsImpl.fileSettingsBuilder(path)
                 .capacity(capacity)
-                .maxUnread(maxUnread)
-                .queueMaxBytes(queueMaxBytes)
+                .maxUnread(maxEvents)
+                .queueMaxBytes(maxBytes)
                 .checkpointMaxAcks(checkpointMaxAcks)
                 .checkpointMaxWrites(checkpointMaxWrites)
                 .elementClass(Event.class)
                 .build()
         );
-        return context.nil;
     }
 
     @JRubyMethod(name = "max_unread_events")
@@ -97,13 +108,17 @@ public IRubyObject ruby_unread_count(ThreadContext context) {
     @JRubyMethod(name = "open")
     public IRubyObject ruby_open(ThreadContext context) {
         try {
-            this.queue.open();
+            open();
         } catch (IOException e) {
             throw RubyUtil.newRubyIOError(context.runtime, e);
         }
         return context.nil;
     }
 
+    public void open() throws IOException {
+        queue.open();
+    }
+
     @JRubyMethod(name = {"write", "<<"}, required = 1)
     public IRubyObject ruby_write(ThreadContext context, IRubyObject event) {
         if (!(event instanceof JrubyEventExtLibrary.RubyEvent)) {
@@ -145,10 +160,14 @@ public IRubyObject ruby_is_empty(ThreadContext context) {
     @JRubyMethod(name = "close")
     public IRubyObject ruby_close(ThreadContext context) {
         try {
-            this.queue.close();
+            close();
         } catch (IOException e) {
             throw RubyUtil.newRubyIOError(context.runtime, e);
         }
         return context.nil;
     }
+
+    public void close() throws IOException {
+        queue.close();
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java
new file mode 100644
index 00000000000..9a477104711
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyWrappedAckedQueueExt.java
@@ -0,0 +1,129 @@
+package org.logstash.ackedqueue.ext;
+
+import org.jruby.Ruby;
+import org.jruby.RubyBoolean;
+import org.jruby.RubyClass;
+import org.jruby.RubyFixnum;
+import org.jruby.RubyObject;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Arity;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.RubyUtil;
+import org.logstash.ext.JrubyAckedReadClientExt;
+import org.logstash.ext.JrubyAckedWriteClientExt;
+
+import java.io.IOException;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+@JRubyClass(name = "WrappedAckedQueue")
+public class JRubyWrappedAckedQueueExt extends RubyObject {
+
+    private JRubyAckedQueueExt queue;
+    private AtomicBoolean isClosed = new AtomicBoolean();
+
+    @JRubyMethod(name = "initialize", optional = 7)
+    public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) throws IOException {
+        args = Arity.scanArgs(context.runtime, args, 7, 0);
+        int capacity = RubyFixnum.num2int(args[1]);
+        int maxEvents = RubyFixnum.num2int(args[2]);
+        int checkpointMaxWrites = RubyFixnum.num2int(args[3]);
+        int checkpointMaxAcks = RubyFixnum.num2int(args[4]);
+        long queueMaxBytes = RubyFixnum.num2long(args[6]);
+
+        this.queue = JRubyAckedQueueExt.create(args[0].asJavaString(), capacity, maxEvents,
+                checkpointMaxWrites, checkpointMaxAcks, queueMaxBytes);
+        this.queue.open();
+
+        return context.nil;
+    }
+
+    public static JRubyWrappedAckedQueueExt createFileBased(
+            String path, int capacity, int maxEvents, int checkpointMaxWrites,
+            int checkpointMaxAcks, long maxBytes) throws IOException {
+        JRubyWrappedAckedQueueExt wrappedQueue =
+                new JRubyWrappedAckedQueueExt(JRubyAckedQueueExt.create(path, capacity, maxEvents,
+                        checkpointMaxWrites, checkpointMaxAcks, maxBytes));
+        wrappedQueue.queue.open();
+        return wrappedQueue;
+    }
+
+    public JRubyWrappedAckedQueueExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    private JRubyWrappedAckedQueueExt(JRubyAckedQueueExt queue) {
+        super(RubyUtil.RUBY, RubyUtil.WRAPPED_ACKED_QUEUE_CLASS);
+        this.queue = queue;
+    }
+
+    @JRubyMethod(name = "queue")
+    public IRubyObject rubyGetQueue(ThreadContext context) {
+        return getQueue();
+    }
+
+    public JRubyAckedQueueExt getQueue() {
+        return queue;
+    }
+
+    public boolean isClosed() {
+        return isClosed.get();
+    }
+
+    @JRubyMethod(name = "closed?")
+    public IRubyObject rubyIsClosed(ThreadContext context) {
+        return RubyBoolean.newBoolean(context.runtime, isClosed());
+    }
+
+
+    public void close() throws IOException {
+        queue.close();
+        isClosed.set(true);
+    }
+
+    @JRubyMethod(name = "close")
+    public IRubyObject rubyClose(ThreadContext context) {
+        try {
+            close();
+        } catch (IOException e) {
+            throw RubyUtil.newRubyIOError(context.runtime, e);
+        }
+        return context.nil;
+    }
+
+    @JRubyMethod(name = {"push", "<<"})
+    public void rubyPush(ThreadContext context, IRubyObject object) {
+        checkIfClosed("write");
+        queue.ruby_write(context, object);
+    }
+
+    @JRubyMethod(name = "read_batch")
+    public IRubyObject rubyReadBatch(ThreadContext context, IRubyObject size, IRubyObject wait) {
+        checkIfClosed("read a batch");
+        return queue.ruby_read_batch(context, size, wait);
+    }
+
+
+    @JRubyMethod(name = "write_client")
+    public IRubyObject rubyWriteClient(final ThreadContext context) {
+        return JrubyAckedWriteClientExt.create(queue, isClosed);
+    }
+
+    @JRubyMethod(name = "read_client")
+    public IRubyObject rubyReadClient(final ThreadContext context) {
+        return JrubyAckedReadClientExt.create(this);
+    }
+
+    @JRubyMethod(name = "is_empty?")
+    public IRubyObject rubyIsEmpty(ThreadContext context) {
+        return queue.ruby_is_empty(context);
+    }
+
+    private void checkIfClosed(String action) {
+        if (isClosed()) {
+            throw new RuntimeException("Attempted to " + action + " on a closed AckedQueue");
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
index c7e50cfc7f7..be8f4cb96cf 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedReadClientExt.java
@@ -27,8 +27,8 @@ public final class JrubyAckedReadClientExt extends RubyObject {
     private final ConcurrentHashMap<Long, Long> inflightClocks = new ConcurrentHashMap<>();
 
     private IRubyObject queue;
-    private IRubyObject batchSize;
-    private IRubyObject waitForMillis;
+    private IRubyObject batchSize = RubyNumeric.int2fix(RubyUtil.RUBY, 125);
+    private IRubyObject waitForMillis = RubyNumeric.int2fix(RubyUtil.RUBY, 50);
     private LongCounter eventMetricOut;
     private LongCounter eventMetricFiltered;
     private LongCounter eventMetricTime;
@@ -44,6 +44,10 @@ public static JrubyAckedReadClientExt create(final ThreadContext context,
         );
     }
 
+    public static JrubyAckedReadClientExt create(IRubyObject queue) {
+        return new JrubyAckedReadClientExt(RubyUtil.RUBY, RubyUtil.ACKED_READ_CLIENT_CLASS, queue);
+    }
+
     public JrubyAckedReadClientExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedWriteClientExt.java
index 666ec766841..35512a1c6e7 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyAckedWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyAckedWriteClientExt.java
@@ -17,7 +17,7 @@ public final class JrubyAckedWriteClientExt extends RubyObject {
 
     private JRubyAckedQueueExt queue;
 
-    private AtomicBoolean closed;
+    private AtomicBoolean closed = new AtomicBoolean();
 
     @JRubyMethod(meta = true, required = 2)
     public static IRubyObject create(final ThreadContext context, IRubyObject recv,
@@ -31,6 +31,11 @@ public static IRubyObject create(final ThreadContext context, IRubyObject recv,
         );
     }
 
+    public static JrubyAckedWriteClientExt create(JRubyAckedQueueExt queue, AtomicBoolean closed) {
+        return new JrubyAckedWriteClientExt(
+                RubyUtil.RUBY, RubyUtil.ACKED_WRITE_CLIENT_CLASS, queue, closed);
+    }
+
     public JrubyAckedWriteClientExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
