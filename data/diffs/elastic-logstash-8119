diff --git a/logstash-core/lib/logstash/config/modules_common.rb b/logstash-core/lib/logstash/config/modules_common.rb
index e1d6f3f01e8..e36445e88f5 100644
--- a/logstash-core/lib/logstash/config/modules_common.rb
+++ b/logstash-core/lib/logstash/config/modules_common.rb
@@ -1,18 +1,31 @@
 # encoding: utf-8
 require "logstash/util/loggable"
 require "logstash/elasticsearch_client"
-require "logstash/modules/importer"
+require "logstash/modules/elasticsearch_importer"
+require "logstash/modules/settings_merger"
 require "logstash/errors"
 
 module LogStash module Config
   class ModulesCommon # extracted here for bwc with 5.x
     include LogStash::Util::Loggable
 
+    MODULES_MAX_PIPELINES = 1
+
     def self.pipeline_configs(settings)
       pipelines = []
       plugin_modules = LogStash::PLUGIN_REGISTRY.plugins_with_type(:modules)
 
-      modules_array = settings.get("modules.cli").empty? ? settings.get("modules") : settings.get("modules.cli")
+      cli_settings = settings.get("modules.cli")
+      yml_settings = settings.get("modules")
+
+      modules_array = if !(cli_settings.empty? && yml_settings.empty?)
+            LogStash::Modules::SettingsMerger.merge(cli_settings, yml_settings)
+          elsif cli_settings.empty?
+             yml_settings
+          else
+            cli_settings
+          end
+
       if modules_array.empty?
         # no specifed modules
         return pipelines
@@ -20,6 +33,11 @@ def self.pipeline_configs(settings)
       logger.debug("Specified modules", :modules_array => modules_array.to_s)
 
       module_names = modules_array.collect {|module_hash| module_hash["name"]}
+      if module_names.size > MODULES_MAX_PIPELINES
+        error_message = I18n.t("logstash.modules.configuration.modules-too-many-specified", :max => MODULES_MAX_PIPELINES, :specified_modules => module_names.join(', '))
+        raise LogStash::ConfigLoadingError, error_message
+      end
+
       if module_names.length > module_names.uniq.length
         duplicate_modules = module_names.group_by(&:to_s).select { |_,v| v.size > 1 }.keys
         raise LogStash::ConfigLoadingError, I18n.t("logstash.modules.configuration.modules-must-be-unique", :duplicate_modules => duplicate_modules)
@@ -36,29 +54,36 @@ def self.pipeline_configs(settings)
       specified_and_available_names.each do |module_name|
         connect_fail_args = {}
         begin
+          module_settings = settings.clone
+
           module_hash = modules_array.find {|m| m["name"] == module_name}
           current_module = plugin_modules.find { |allmodules| allmodules.module_name == module_name }
 
           alt_name = "module-#{module_name}"
           pipeline_id = alt_name
-
+          module_settings.set("pipeline.id", pipeline_id)
           current_module.with_settings(module_hash)
-          esclient = LogStash::ElasticsearchClient.build(module_hash)
           config_test = settings.get("config.test_and_exit")
-          if esclient.can_connect? || config_test
-            if !config_test
-              current_module.import(LogStash::Modules::Importer.new(esclient))
+          modul_setup = settings.get("modules_setup")
+          # Only import data if it's not a config test and --setup is true
+          if !config_test && modul_setup
+            esclient = LogStash::ElasticsearchClient.build(module_hash)
+            esconnected = esclient.can_connect?
+            if esconnected
+              current_module.import(
+                  LogStash::Modules::ElasticsearchImporter.new(esclient)
+                )
+            else
+              connect_fail_args[:module_name] = module_name
+              connect_fail_args[:elasticsearch_hosts] = esclient.host_settings
             end
-
-            config_string = current_module.config_string
-
-            pipelines << {"pipeline_id" => pipeline_id, "alt_name" => alt_name, "config_string" => config_string, "settings" => settings}
-          else
-            connect_fail_args[:module_name] = module_name
-            connect_fail_args[:hosts] = esclient.host_settings
           end
+          config_string = current_module.config_string
+          pipelines << {"pipeline_id" => pipeline_id, "alt_name" => alt_name, "config_string" => config_string, "settings" => module_settings}
         rescue => e
-          raise LogStash::ConfigLoadingError, I18n.t("logstash.modules.configuration.parse-failed", :error => e.message)
+          new_error = LogStash::ConfigLoadingError.new(I18n.t("logstash.modules.configuration.parse-failed", :error => e.message))
+          new_error.set_backtrace(e.backtrace)
+          raise new_error
         end
 
         if !connect_fail_args.empty?
diff --git a/logstash-core/lib/logstash/elasticsearch_client.rb b/logstash-core/lib/logstash/elasticsearch_client.rb
index 5aa824765de..8b9bbf48736 100644
--- a/logstash-core/lib/logstash/elasticsearch_client.rb
+++ b/logstash-core/lib/logstash/elasticsearch_client.rb
@@ -26,6 +26,24 @@ def initialize(settings, logger)
       @settings = settings
       @logger = logger
       @client_args = client_args
+
+      ssl_options = {}
+
+      if @settings["var.elasticsearch.ssl.enabled"] == "true"
+        ssl_options[:verify] = @settings.fetch("var.elasticsearch.ssl.verification_mode", true)
+        ssl_options[:ca_file] = @settings.fetch("var.elasticsearch.ssl.certificate_authority", nil)
+        ssl_options[:client_cert] = @settings.fetch("var.elasticsearch.ssl.certificate", nil)
+        ssl_options[:client_key] = @settings.fetch("var.elasticsearch.ssl.key", nil)
+      end
+
+      @client_args[:ssl] = ssl_options
+
+      username = @settings["var.elasticsearch.username"]
+      password = @settings["var.elasticsearch.password"]
+      if username
+        @client_args[:transport_options] = { :headers => { "Authorization" => 'Basic ' + Base64.encode64( "#{username}:#{password}" ).chomp } }
+      end
+
       @client = Elasticsearch::Client.new(@client_args)
     end
 
@@ -34,7 +52,8 @@ def can_connect?
         head(SecureRandom.hex(32).prepend('_'))
       rescue Elasticsearch::Transport::Transport::Errors::BadRequest
         true
-      rescue Manticore::SocketException
+      rescue Manticore::SocketException => e
+        @logger.error(e)
         false
       end
     end
@@ -63,6 +82,7 @@ def head(path)
       begin
         normalize_response(@client.perform_request('HEAD', path, {}, nil))
       rescue Exception => e
+        @logger.error(e)
         if is_404_error?(e)
           Response.new(404, "", {})
         else
@@ -90,7 +110,11 @@ def client_args
     end
 
     def unpack_hosts
-      @settings.fetch("var.output.elasticsearch.hosts", "localhost:9200").split(',').map(&:strip)
+      setting = @settings.fetch("var.elasticsearch.hosts", "localhost:9200")
+      if setting.is_a?(String)
+        return setting.split(',').map(&:strip)
+      end
+      setting
     end
   end
 
@@ -117,4 +141,4 @@ def can_connect?
   def host_settings
     @client.host_settings
   end
-end end # class LogStash::ModulesImporter
+end end
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index ea055724e77..91bff2f2a6d 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -22,6 +22,7 @@ module Environment
     Setting::NullableString.new("config.string", nil, false),
                     Setting.new("modules.cli", Array, []),
                     Setting.new("modules", Array, []),
+           Setting::Boolean.new("modules_setup", false),
            Setting::Boolean.new("config.test_and_exit", false),
            Setting::Boolean.new("config.reload.automatic", false),
            Setting::Numeric.new("config.reload.interval", 3), # in seconds
diff --git a/logstash-core/lib/logstash/modules/importer.rb b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
similarity index 78%
rename from logstash-core/lib/logstash/modules/importer.rb
rename to logstash-core/lib/logstash/modules/elasticsearch_importer.rb
index 2e70655f1f1..bcf81c0cec5 100644
--- a/logstash-core/lib/logstash/modules/importer.rb
+++ b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
@@ -2,7 +2,7 @@
 require "logstash/namespace"
 require "logstash/logging"
 
-module LogStash module Modules class Importer
+module LogStash module Modules class ElasticsearchImporter
   include LogStash::Util::Loggable
 
   def initialize(client)
@@ -11,7 +11,7 @@ def initialize(client)
 
   def put(resource, overwrite = true)
     path = resource.import_path
-    logger.info("Attempting PUT", :url_path => path, :file_path => resource.content_path)
+    logger.debug("Attempting PUT", :url_path => path, :file_path => resource.content_path)
     if !overwrite && content_exists?(path)
       logger.debug("Found existing Elasticsearch resource.", :resource => path)
       return
@@ -31,7 +31,7 @@ def put_overwrite(path, content)
 
   def content_exists?(path)
     response = @client.head(path)
-    response.status >= 200 && response.status <= 299
+    response.status >= 200 && response.status < 300
   end
 
 end end end # class LogStash::Modules::Importer
diff --git a/logstash-core/lib/logstash/modules/kibana_base_resource.rb b/logstash-core/lib/logstash/modules/kibana_base_resource.rb
deleted file mode 100644
index e93dda4641a..00000000000
--- a/logstash-core/lib/logstash/modules/kibana_base_resource.rb
+++ /dev/null
@@ -1,10 +0,0 @@
-# encoding: utf-8
-require "logstash/namespace"
-require_relative "resource_base"
-
-module LogStash module Modules class KibanaBaseResource
-  include ResourceBase
-  def import_path
-    base
-  end
-end end end
diff --git a/logstash-core/lib/logstash/modules/kibana_config.rb b/logstash-core/lib/logstash/modules/kibana_config.rb
index 68bf520c6ed..abe3937bba3 100644
--- a/logstash-core/lib/logstash/modules/kibana_config.rb
+++ b/logstash-core/lib/logstash/modules/kibana_config.rb
@@ -4,7 +4,6 @@
 
 require_relative "file_reader"
 require_relative "kibana_resource"
-require_relative "kibana_base_resource"
 
 module LogStash module Modules class KibanaConfig
   include LogStash::Util::Loggable
@@ -19,6 +18,7 @@ def initialize(modul, settings)
     @name = modul.module_name
     @settings = settings
     @index_name = settings.fetch("dashboards.kibana_index", ".kibana")
+    @pattern_name = "#{@name}-*"
   end
 
   def dashboards
@@ -30,21 +30,16 @@ def dashboards
   end
 
   def index_pattern
-    pattern_name = "#{@name}-*"
-    default_index_json = '{"defaultIndex": "#{pattern_name}"}'
-    default_index_content_id = @settings.fetch("index_pattern.kibana_version", "5.5.1")
-    [
-      KibanaResource.new(@index_name, "index-pattern", dynamic("index-pattern"),nil, pattern_name),
-      KibanaResource.new(@index_name, "config", nil, default_index_json, default_index_content_id)
-    ]
+    [KibanaResource.new(@index_name, "index-pattern", dynamic("index-pattern"),nil, @pattern_name)]
   end
 
   def resources
     list = index_pattern
     dashboards.each do |board|
+      list << board
       extract_panels_into(board, list)
     end
-    list.concat(extract_saved_searches(list))
+    list.concat(extract_saved_searches_into(list))
   end
 
   private
@@ -53,10 +48,12 @@ def dynamic(dynamic_folder, filename = @name)
     ::File.join(@directory, dynamic_folder, "#{filename}.json")
   end
 
-  def extract_panels_into(dashboard, list)
-    list << dashboard
+  def dynamic(dynamic_folder, filename = @name)
+    ::File.join(@directory, dynamic_folder, "#{filename}.json")
+  end
 
-    dash = FileReader.read_json(dashboard.content_path)
+  def extract_panels_into(dashboard, list)
+    dash = dashboard.content_as_object
 
     if !dash.is_a?(Hash)
       logger.warn("Kibana dashboard JSON is not an Object", :module => @name)
@@ -85,20 +82,20 @@ def extract_panels_into(dashboard, list)
         logger.warn("panelJSON contained unknown type", :type => panel_type)
       end
     end
+  end
 
-    def extract_saved_searches(list)
-      result = [] # must not add to list while iterating
-      list.each do |resource|
-        next unless resource.contains?("savedSearchId")
-        content = resource.content_as_object
-        next if content.nil?
-        saved_search = content["savedSearchId"]
-        next if saved_search.nil?
-        ss_resource = KibanaResource.new(@index_name, "search", dynamic("search", saved_search))
-        next if list.member?(ss_resource) || result.member?(ss_resource)
-        result << ss_resource
-      end
-      result
+  def extract_saved_searches_into(list)
+    result = [] # must not add to list while iterating
+    list.each do |resource|
+      content = resource.content_as_object
+      next if content.nil?
+      next unless content.keys.include?("savedSearchId")
+      saved_search = content["savedSearchId"]
+      next if saved_search.nil?
+      ss_resource = KibanaResource.new(@index_name, "search", dynamic("search", saved_search))
+      next if list.member?(ss_resource) || result.member?(ss_resource)
+      result << ss_resource
     end
+    result
   end
 end end end
diff --git a/logstash-core/lib/logstash/modules/logstash_config.rb b/logstash-core/lib/logstash/modules/logstash_config.rb
index c0566412492..6b6d838e817 100644
--- a/logstash-core/lib/logstash/modules/logstash_config.rb
+++ b/logstash-core/lib/logstash/modules/logstash_config.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 require "logstash/namespace"
 require_relative "file_reader"
+require "logstash/settings"
 
 module LogStash module Modules class LogStashConfig
-
   # We name it `modul` here because `module` has meaning in Ruby.
   def initialize(modul, settings)
     @directory = ::File.join(modul.directory, "logstash")
@@ -15,27 +15,72 @@ def template
     ::File.join(@directory, "#{@name}.conf.erb")
   end
 
-  def setting(value, default)
-    @settings.fetch(value, default)
+  def configured_inputs(default = [], aliases = {})
+    name = "var.inputs"
+    values = get_setting(LogStash::Setting::SplittableStringArray.new(name, String, default))
+
+    aliases.each { |k,v| values << v if values.include?(k) }
+    aliases.invert.each { |k,v| values << v if values.include?(k) }
+    values.flatten.uniq
+  end
+
+  def alias_settings_keys!(aliases)
+    aliased_settings = alias_matching_keys(aliases, @settings)
+    @settings = alias_matching_keys(aliases.invert, aliased_settings)
+  end
+
+  def array_to_string(array)
+    "[#{array.collect { |i| "'#{i}'" }.join(", ")}]"
+  end
+
+  def csv_string(array)
+    "'#{array.join(',')}'"
+  end
+
+  def get_setting(setting_class)
+    raw_value = @settings[setting_class.name]
+    # If we dont check for NIL, the Settings class will try to coerce the value
+    # and most of the it will fails when a NIL value is explicitely set.
+    # This will be fixed once we wrap the plugins settings into a Settings class
+    setting_class.set(raw_value) unless raw_value.nil?
+    setting_class.value
+  end
+
+  def setting(name, default)
+    # by default we use the more permissive setting which is a `NullableString`
+    # This is fine because the end format of the logstash configuration is a string representation
+    # of the pipeline. There is a good reason why I think we should use the settings classes, we
+    # can `preprocess` a template and generate a configuration from the defined settings
+    # validate the values and replace them in the template.
+    case default
+      when String
+        get_setting(LogStash::Setting::NullableString.new(name, default.to_s))
+      when Numeric
+        get_setting(LogStash::Setting::Numeric.new(name, default))
+      else
+        get_setting(LogStash::Setting::NullableString.new(name, default.to_s))
+      end
   end
 
   def elasticsearch_output_config(type_string = nil)
-    hosts = setting("var.output.elasticsearch.hosts", "localhost:9200").split(',').map do |s|
-      '"' + s.strip + '"'
-    end.join(',')
-    index = "#{@name}-#{setting("var.output.elasticsearch.index_suffix", "%{+YYYY.MM.dd}")}"
-    password = "#{setting("var.output.elasticsearch.password", "changeme")}"
-    user = "#{setting("var.output.elasticsearch.user", "elastic")}"
-    document_type_line = type_string ? "document_type => #{type_string}" : ""
+    hosts = array_to_string(get_setting(LogStash::Setting::SplittableStringArray.new("var.elasticsearch.hosts", String, ["localhost:9200"])))
+    index = "#{@name}-#{setting("var.elasticsearch.index_suffix", "%{+YYYY.MM.dd}")}"
+    user = @settings["var.elasticsearch.username"]
+    password = @settings["var.elasticsearch.password"]
+    lines = ["hosts => #{hosts}", "index => \"#{index}\""]
+    lines.push(user ? "user => \"#{user}\"" : nil)
+    lines.push(password ? "password => \"#{password}\"" : nil)
+    lines.push(type_string ? "document_type => #{type_string}" : nil)
+    lines.push("ssl => #{@settings.fetch('var.elasticsearch.ssl.enabled', false)}")
+    if cacert = @settings["var.elasticsearch.ssl.certificate_authority"]
+      lines.push("cacert => \"#{cacert}\"") if cacert
+    end
+    # NOTE: the first line should be indented in the conf.erb
     <<-CONF
 elasticsearch {
-hosts => [#{hosts}]
-index => "#{index}"
-password => "#{password}"
-user => "#{user}"
-manage_template => false
-#{document_type_line}
-}
+    #{lines.compact.join("\n    ")}
+    manage_template => false
+  }
 CONF
   end
 
@@ -45,4 +90,31 @@ def config_string
     renderer = ERB.new(FileReader.read(template))
     renderer.result(binding)
   end
+
+  private
+  # For a first version we are copying the values of the original hash,
+  # this might become problematic if we users changes the values of the
+  # settings in the template, which could result in an inconsistent view of the original data
+  #
+  # For v1 of the feature I think its an OK compromise, v2 we have a more advanced hash that
+  # support alias.
+  def alias_matching_keys(aliases, target)
+    aliased_target = target.dup
+
+    aliases.each do |matching_key_prefix, new_key_prefix|
+      target.each do |k, v|
+        re = /^#{matching_key_prefix}\./
+
+        if k =~ re
+          alias_key = k.gsub(re, "#{new_key_prefix}.")
+
+          # If the user setup the same values twices with different values lets just halt.
+          raise "Cannot create an alias, the destination key has already a value set: original key: #{k}, alias key: #{alias_key}" if (!aliased_target[alias_key].nil? && aliased_target[alias_key] != v)
+          aliased_target[alias_key] = v unless v.nil?
+        end
+      end
+    end
+
+    aliased_target
+  end
 end end end
diff --git a/logstash-core/lib/logstash/modules/resource_base.rb b/logstash-core/lib/logstash/modules/resource_base.rb
index f1886b0fee8..81148333d46 100644
--- a/logstash-core/lib/logstash/modules/resource_base.rb
+++ b/logstash-core/lib/logstash/modules/resource_base.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
 require "logstash/namespace"
+require "logstash/json"
 require_relative "file_reader"
 
 module LogStash module Modules module ResourceBase
@@ -8,7 +9,11 @@ module LogStash module Modules module ResourceBase
   def initialize(base, content_type, content_path, content = nil, content_id = nil)
     @base, @content_type, @content_path = base, content_type, content_path
     @content_id =  content_id || ::File.basename(@content_path, ".*")
+    # content at this time will be a JSON string
     @content = content
+    if !@content.nil?
+      @content_as_object = LogStash::Json.load(@content) rescue {}
+    end
   end
 
   def content
@@ -19,12 +24,8 @@ def to_s
     "#{base}, #{content_type}, #{content_path}, #{content_id}"
   end
 
-  def contains?(text)
-    content.include?(text)
-  end
-
   def content_as_object
-    LogStash::Json.load(content) rescue nil
+    @content_as_object ||= FileReader.read_json(@content_path) rescue nil
   end
 
   def <=>(other)
diff --git a/logstash-core/lib/logstash/modules/scaffold.rb b/logstash-core/lib/logstash/modules/scaffold.rb
index c6efa218e1d..cb0e244fc70 100644
--- a/logstash-core/lib/logstash/modules/scaffold.rb
+++ b/logstash-core/lib/logstash/modules/scaffold.rb
@@ -15,6 +15,7 @@ module LogStash module Modules class Scaffold
   def initialize(name, directory)
     @module_name = name
     @directory = directory  # this is the 'configuration folder in the GEM root.'
+    logger.info("Initializing module", :module_name => name, :directory => directory)
   end
 
   def import(import_engine)
diff --git a/logstash-core/lib/logstash/modules/settings_merger.rb b/logstash-core/lib/logstash/modules/settings_merger.rb
new file mode 100644
index 00000000000..5a852735de6
--- /dev/null
+++ b/logstash-core/lib/logstash/modules/settings_merger.rb
@@ -0,0 +1,23 @@
+# encoding: utf-8
+require "logstash/namespace"
+
+module LogStash module Modules class SettingsMerger
+  def self.merge(cli_settings, yml_settings)
+    # both args are arrays of hashes, e.g.
+    # [{"name"=>"mod1", "var.input.tcp.port"=>"3333"}, {"name"=>"mod2"}]
+    # [{"name"=>"mod1", "var.input.tcp.port"=>2222, "var.kibana.username"=>"rupert", "var.kibana.password"=>"fotherington"}, {"name"=>"mod3", "var.input.tcp.port"=>4445}]
+    merged = []
+    # union and group_by preserves order
+    # union will also coalesce identical hashes
+    union_of_settings = (cli_settings | yml_settings)
+    grouped_by_name = union_of_settings.group_by{|e| e["name"]}
+    grouped_by_name.each do |name, array|
+      if array.size == 2
+        merged << array.first.merge(array.last)
+      else
+        merged.concat(array)
+      end
+    end
+    merged
+  end
+end end end
diff --git a/logstash-core/lib/logstash/modules/util.rb b/logstash-core/lib/logstash/modules/util.rb
new file mode 100644
index 00000000000..0e52ca15628
--- /dev/null
+++ b/logstash-core/lib/logstash/modules/util.rb
@@ -0,0 +1,17 @@
+# encoding: utf-8
+require_relative "scaffold"
+
+# This module function should be used when gems or
+# x-pack defines modules in their folder structures.
+module LogStash module Modules module Util
+  def self.register_local_modules(path)
+    modules_path = ::File.join(path, "modules")
+    ::Dir.foreach(modules_path) do |item|
+      # Ignore unix relative path ids
+      next if item == '.' or item == '..'
+      # Ignore non-directories
+      next if !::File.directory?(::File.join(modules_path, ::File::Separator, item))
+      LogStash::PLUGIN_REGISTRY.add(:modules, item, Scaffold.new(item, ::File.join(modules_path, item, "configuration")))
+    end
+  end
+end end end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 2116796af81..213b9a4c939 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -73,6 +73,11 @@ class LogStash::Runner < Clamp::StrictCommand
     :multivalued => true,
     :attribute_name => "modules_variable_list"
 
+  option ["--setup"], :flag,
+    I18n.t("logstash.runner.flag.modules_setup"),
+    :default => LogStash::SETTINGS.get_default("modules_setup"),
+    :attribute_name => "modules_setup"
+
   # Pipeline settings
   option ["-w", "--pipeline.workers"], "COUNT",
     I18n.t("logstash.runner.flag.pipeline-workers"),
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 74ff322384c..4ff58b95df5 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -534,8 +534,27 @@ def validate(input)
         end
       end
     end
-  end
 
+    class SplittableStringArray < ArrayCoercible
+      DEFAULT_TOKEN = ","
+
+      def initialize(name, klass, default, strict=true, tokenizer = DEFAULT_TOKEN, &validator_proc)
+        @element_class = klass
+        @token = tokenizer
+        super(name, klass, default, strict, &validator_proc)
+      end
+
+      def coerce(value)
+        if value.is_a?(Array)
+          value
+        elsif value.nil?
+          []
+        else
+          value.split(@token).map(&:strip)
+        end
+      end
+    end
+  end
 
   SETTINGS = Settings.new
 end
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 1faa166edfd..395d859fab9 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -101,7 +101,9 @@ en:
           Available modules: %{available_modules}
         elasticsearch_connection_failed: >-
           Failed to import module configurations to Elasticsearch.
-          Module: %{module_name} has hosts: %{hosts}
+          Module: %{module_name} has hosts: %{elasticsearch_hosts}
+        modules-too-many-specified: >-
+          Too many modules specified. Maximum allowed: %{max}, specified: %{specified_modules}  
 
     runner:
       short-help: |-
@@ -227,6 +229,10 @@ en:
           '-M "MODULE_NAME.var.PLUGIN_TYPE.PLUGIN_NAME.VARIABLE_NAME=VALUE"'
           as in
           '-M "example.var.filter.mutate.fieldname=fieldvalue"'
+        modules_setup: |+
+          Load index template into Elasticsearch, and saved searches, 
+          index-pattern, visualizations, and dashboards into Kibana when
+          running modules.
         configtest: |+
           Check configuration for valid syntax and then exit.
         http_host: Web API binding host
diff --git a/logstash-core/spec/logstash/modules/logstash_config_spec.rb b/logstash-core/spec/logstash/modules/logstash_config_spec.rb
new file mode 100644
index 00000000000..796d89d819d
--- /dev/null
+++ b/logstash-core/spec/logstash/modules/logstash_config_spec.rb
@@ -0,0 +1,56 @@
+# encoding: utf-8
+require "logstash/modules/logstash_config"
+
+describe LogStash::Modules::LogStashConfig do
+  let(:mod) { instance_double("module", :directory => Stud::Temporary.directory, :module_name => "testing") }
+  let(:settings) { {"var.logstash.testing.pants" => "fancy" }}
+  subject { described_class.new(mod, settings) }
+
+  describe "configured inputs" do
+    context "when no inputs is send" do
+      it "returns the default" do
+        expect(subject.configured_inputs(["kafka"])).to include("kafka")
+      end
+    end
+
+    context "when inputs are send" do
+      let(:settings) { { "var.inputs" => "tcp" } }
+
+      it "returns the configured inputs" do
+        expect(subject.configured_inputs(["kafka"])).to include("tcp")
+      end
+
+      context "when alias is specified" do
+        let(:settings) { { "var.inputs" => "smartconnector" } }
+
+        it "returns the configured inputs" do
+          expect(subject.configured_inputs(["kafka"], { "smartconnector" => "tcp"  })).to include("tcp", "smartconnector")
+        end
+      end
+    end
+  end
+
+  describe "array to logstash array string" do
+    it "return an escaped string" do
+      expect(subject.array_to_string(["hello", "ninja"])).to eq("['hello', 'ninja']")
+    end
+  end
+
+  describe "alias modules options" do
+    let(:alias_table) do
+      { "var.logstash.testing" => "var.logstash.better" }
+    end
+
+    before do
+      subject.alias_settings_keys!(alias_table)
+    end
+
+    it "allow to retrieve settings" do
+      expect(subject.setting("var.logstash.better.pants", "dont-exist")).to eq("fancy")
+    end
+
+    it "allow to retrieve settings with the original name" do
+      expect(subject.setting("var.logstash.testing.pants", "dont-exist")).to eq("fancy")
+    end
+  end
+end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 7a7077106b9..7af86c78282 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -339,8 +339,8 @@ def run(args); end
     end
 
     describe "--modules" do
-      let(:args) { ["--modules", module_string] }
-      let(:agent_instance) { double("agent") }
+      let(:args) { ["--modules", module_string, "--setup"] }
+
       context "with an available module specified but no connection to elasticsearch" do
         let(:module_string) { "cef" }
         before do
diff --git a/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
new file mode 100644
index 00000000000..b24f629aad0
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/splittable_string_array_spec.rb
@@ -0,0 +1,51 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/settings"
+
+describe LogStash::Setting::SplittableStringArray do
+  let(:element_class) { String }
+  let(:default_value) { [] }
+
+  subject { described_class.new("testing", element_class, default_value) }
+
+  before do
+    subject.set(candidate)
+  end
+
+  context "when giving an array" do
+    let(:candidate) { ["hello,", "ninja"] }
+
+    it "returns the same elements" do
+      expect(subject.value).to match(candidate)
+    end
+  end
+
+  context "when given a string" do
+    context "with 1 element" do
+      let(:candidate) { "hello" }
+
+      it "returns 1 element" do
+        expect(subject.value).to match(["hello"])
+      end
+    end
+
+    context "with multiple element" do
+      let(:candidate) { "hello,ninja" }
+
+      it "returns an array of string" do
+        expect(subject.value).to match(["hello", "ninja"])
+      end
+    end
+  end
+
+  context "when defining a custom tokenizer" do
+    subject { described_class.new("testing", element_class, default_value, strict=true, ";") }
+
+    let(:candidate) { "hello;ninja" }
+
+    it "returns an array of string" do
+      expect(subject.value).to match(["hello", "ninja"])
+    end
+  end
+end
+
