diff --git a/spec/codecs/json.rb b/spec/codecs/json.rb
index 41edbac8495..c7c60a130ae 100644
--- a/spec/codecs/json.rb
+++ b/spec/codecs/json.rb
@@ -1,6 +1,7 @@
 require "logstash/codecs/json"
 require "logstash/event"
 require "insist"
+require_relative 'json_shared'
 
 describe LogStash::Codecs::JSON do
   subject do
@@ -18,6 +19,12 @@
       end
     end
 
+    let :data_suffix do
+      ""
+    end
+    
+    include_context 'json_structure'
+
     it "should be fast", :if => ENV["SPEEDTEST"] do
       json = '{"message":"Hello world!","@timestamp":"2013-12-21T07:01:25.616Z","@version":"1","host":"Macintosh.local","sequence":1572456}'
       iterations = 500000
diff --git a/spec/codecs/json_lines.rb b/spec/codecs/json_lines.rb
index 40cdcba52a5..1d43c4bb5e8 100644
--- a/spec/codecs/json_lines.rb
+++ b/spec/codecs/json_lines.rb
@@ -1,6 +1,7 @@
 require "logstash/codecs/json_lines"
 require "logstash/event"
 require "insist"
+require_relative 'json_shared'
 
 describe LogStash::Codecs::JSONLines do
   subject do
@@ -10,14 +11,20 @@
   context "#decode" do
     it "should return an event from json data" do
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
-      subject.decode(data.to_json+"\n") do |event|
+      subject.decode(data.to_json + data_suffix) do |event|
         insist { event.is_a? LogStash::Event }
         insist { event["foo"] } == data["foo"]
         insist { event["baz"] } == data["baz"]
         insist { event["bah"] } == data["bah"]
       end
     end
+
+    let :data_suffix do
+      "\n"
+    end
     
+    include_context 'json_structure'
+
     it "should return an event from json data when a newline is recieved" do
       data = {"foo" => "bar", "baz" => {"bah" => ["a","b","c"]}}
       subject.decode(data.to_json) do |event|
diff --git a/spec/codecs/json_shared.rb b/spec/codecs/json_shared.rb
new file mode 100644
index 00000000000..b53b8f61bfa
--- /dev/null
+++ b/spec/codecs/json_shared.rb
@@ -0,0 +1,37 @@
+shared_context 'json_structure' do
+  context 'time-specific' do
+    let :data do
+      { 'foo' => 'bar', '@timestamp' => '2014-03-08T12:34:56+0100', '@version' => 1, 'baz' => 'bax' }
+    end
+
+    it 'should decode' do
+      decoded = false
+      subject.decode(data.to_json + data_suffix) do |event|
+        decoded = true
+      end
+      decoded.should be_true, "suffix: '#{data_suffix}'"
+    end
+
+    it 'should decode an event' do
+      subject.decode(data.to_json) do |event|
+        expect(event).to be_a LogStash::Event
+      end
+    end
+
+    it 'should return an event from data with v1-specific fields' do
+      subject.decode(data.to_json) do |event|
+        event['foo'].should eq(data['foo'])
+        event['baz'].should eq('bax')
+        event['@version'].should eq(1)
+      end
+    end
+
+    it 'should decode time to ::Time to UTC' do
+      subject.decode(data.to_json) do |event|
+        expect(event.timestamp).to be_a(::Time)
+        event.timestamp.should eq(LogStash::Time.parse_iso8601(data['@timestamp']))
+        event.timestamp.gmtime.hour.should eq(11) # alias #utc
+      end
+    end
+  end
+end
