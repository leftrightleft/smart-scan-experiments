diff --git a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
index 71294914751..fd1d6914cea 100644
--- a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
+++ b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
@@ -76,8 +76,8 @@
       subject(:timestamp) { LogStash::Timestamp.parse_iso8601(time_string) }
       context 'with whole seconds' do
         let(:time_string) { "2014-09-23T00:00:00.000-0800" }
-        it 'serializes a 20-byte string' do
-          expect(timestamp.to_json).to eq('"2014-09-23T08:00:00Z"')
+        it 'serializes a 24-byte string' do
+          expect(timestamp.to_json).to eq('"2014-09-23T08:00:00.000Z"')
         end
       end
       context 'with excess millis' do
@@ -88,13 +88,13 @@
       end
       context 'with excess micros' do
         let(:time_string) { "2014-09-23T00:00:00.000100-0800" }
-        it 'serializes a 24-byte string' do
+        it 'serializes a 27-byte string' do
           expect(timestamp.to_json).to eq('"2014-09-23T08:00:00.000100Z"')
         end
       end
       context 'with excess nanos' do
         let(:time_string) { "2014-09-23T00:00:00.000000010-0800" }
-        it 'serializes a 24-byte string' do
+        it 'serializes a 30-byte string' do
           expect(timestamp.to_json).to eq('"2014-09-23T08:00:00.000000010Z"')
         end
       end
@@ -169,7 +169,7 @@
   context "at" do
     context "with integer epoch" do
       it "should convert to correct date" do
-        expect(LogStash::Timestamp.at(946702800).to_iso8601).to eq("2000-01-01T05:00:00Z")
+        expect(LogStash::Timestamp.at(946702800).to_iso8601).to eq("2000-01-01T05:00:00.000Z")
       end
 
       it "should return zero usec" do
@@ -177,7 +177,7 @@
       end
 
       it "should return prior to epoch date on negative input" do
-        expect(LogStash::Timestamp.at(-1).to_iso8601).to eq("1969-12-31T23:59:59Z")
+        expect(LogStash::Timestamp.at(-1).to_iso8601).to eq("1969-12-31T23:59:59.000Z")
       end
     end
 
diff --git a/logstash-core/src/main/java/org/logstash/Timestamp.java b/logstash-core/src/main/java/org/logstash/Timestamp.java
index 384fd1202a9..be72e8c47d9 100644
--- a/logstash-core/src/main/java/org/logstash/Timestamp.java
+++ b/logstash-core/src/main/java/org/logstash/Timestamp.java
@@ -28,6 +28,7 @@
 import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.ResolverStyle;
 import java.time.temporal.ChronoField;
 import java.util.Date;
 
@@ -46,6 +47,11 @@ public final class Timestamp implements Comparable<Timestamp>, Queueable {
 
     private final Instant instant;
 
+    private static final DateTimeFormatter ISO_INSTANT_MILLIS = new DateTimeFormatterBuilder()
+            .appendInstant(3)
+            .toFormatter()
+            .withResolverStyle(ResolverStyle.STRICT);
+
     public Timestamp() {
         this(Clock.systemDefaultZone());
     }
@@ -99,7 +105,9 @@ public static Timestamp now() {
     }
 
     public String toString() {
-        return instant.toString();
+        // ensure minimum precision of 3 decimal places by using our own 3-decimal-place formatter when we have no nanos.
+        final DateTimeFormatter formatter = (instant.getNano() == 0 ? ISO_INSTANT_MILLIS : DateTimeFormatter.ISO_INSTANT);
+        return formatter.format(instant);
     }
 
     public long toEpochMilli() {
diff --git a/logstash-core/src/test/java/org/logstash/TimestampTest.java b/logstash-core/src/test/java/org/logstash/TimestampTest.java
index e63a86b8f2d..f566f2dc820 100644
--- a/logstash-core/src/test/java/org/logstash/TimestampTest.java
+++ b/logstash-core/src/test/java/org/logstash/TimestampTest.java
@@ -52,6 +52,12 @@ public void testToString() throws Exception {
         assertEquals("2014-09-23T20:34:56.789012345Z", t.toString());
     }
 
+    @Test
+    public void testToStringNoNanos() throws Exception {
+        Timestamp t = new Timestamp("2014-09-23T12:34:56.000000000-0800", OFFSET_CLOCK);
+        assertEquals("2014-09-23T20:34:56.000Z", t.toString());
+    }
+
     @Test
     public void testParsingDateTimeNoOffset() throws Exception {
         final Timestamp t = new Timestamp("2014-09-23T12:34:56.789012345", OFFSET_CLOCK);
@@ -60,13 +66,13 @@ public void testParsingDateTimeNoOffset() throws Exception {
     @Test
     public void testParsingDateNoOffset() throws Exception {
         final Timestamp t = new Timestamp("2014-09-23", OFFSET_CLOCK);
-        assertEquals("2014-09-23T08:00:00Z", t.toString());
+        assertEquals("2014-09-23T08:00:00.000Z", t.toString());
     }
 
     @Test
     public void testParsingDateWithOffset() throws Exception {
         final Timestamp t = new Timestamp("2014-09-23-08:00", OFFSET_CLOCK);
-        assertEquals("2014-09-23T08:00:00Z", t.toString());
+        assertEquals("2014-09-23T08:00:00.000Z", t.toString());
     }
 
     @Test
