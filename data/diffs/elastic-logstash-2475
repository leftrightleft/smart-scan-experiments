diff --git a/Gemfile b/Gemfile
new file mode 100644
index 00000000000..65291441cf9
--- /dev/null
+++ b/Gemfile
@@ -0,0 +1,5 @@
+# This is a Logstash generated Gemfile.
+# If you modify this file manually all comments and formatting will be lost.
+
+source "https://rubygems.org"
+gemspec :name => "logstash"
diff --git a/Gemfile.jruby-1.9.lock b/Gemfile.jruby-1.9.lock
new file mode 100644
index 00000000000..7d0381a4015
--- /dev/null
+++ b/Gemfile.jruby-1.9.lock
@@ -0,0 +1,349 @@
+GIT
+  remote: git://github.com/ph/file-dependencies.git
+  revision: 7faa11b61777d884b6cab56281d3a34126071b55
+  branch: fix/close-file-handlers
+  specs:
+    file-dependencies (0.1.6)
+      minitar
+
+PATH
+  remote: .
+  specs:
+    logstash (2.0.0.dev-java)
+      cabin (>= 0.7.0)
+      clamp
+      file-dependencies (= 0.1.6)
+      filesize
+      ftw (~> 0.0.40)
+      i18n (= 0.6.9)
+      jar-dependencies (= 0.1.7)
+      jrjackson
+      jruby-httpclient
+      maven-tools (= 1.0.7)
+      mime-types
+      minitar
+      pry
+      rack
+      ruby-maven (= 3.1.1.0.8)
+      sinatra
+      stud
+      treetop (~> 1.4.0)
+
+GEM
+  remote: https://rubygems.org/
+  specs:
+    addressable (2.3.7)
+    axiom-types (0.1.1)
+      descendants_tracker (~> 0.0.4)
+      ice_nine (~> 0.11.0)
+      thread_safe (~> 0.3, >= 0.3.1)
+    backports (3.6.4)
+    builder (3.2.2)
+    cabin (0.7.1)
+    ci_reporter (1.9.3)
+      builder (>= 2.1.2)
+    clamp (0.6.3)
+    coderay (1.1.0)
+    coercible (1.0.0)
+      descendants_tracker (~> 0.0.1)
+    descendants_tracker (0.0.4)
+      thread_safe (~> 0.3, >= 0.3.1)
+    diff-lcs (1.2.5)
+    equalizer (0.0.9)
+    ffi (1.9.6-java)
+    filesize (0.0.4)
+    ftw (0.0.42)
+      addressable
+      backports (>= 2.6.2)
+      cabin (> 0)
+      http_parser.rb (~> 0.6)
+    gem_publisher (1.5.0)
+    http_parser.rb (0.6.0-java)
+    i18n (0.6.9)
+    ice_nine (0.11.1)
+    insist (1.0.0)
+    jar-dependencies (0.1.7)
+    jrjackson (0.2.8)
+    jruby-httpclient (1.1.1-java)
+    logstash-devutils (0.0.8-java)
+      gem_publisher
+      insist (= 1.0.0)
+      jar-dependencies
+      minitar
+      rake
+    maven-tools (1.0.7)
+      virtus (~> 1.0)
+    method_source (0.8.2)
+    mime-types (2.4.3)
+    minitar (0.5.4)
+    polyglot (0.3.5)
+    pry (0.10.1-java)
+      coderay (~> 1.1.0)
+      method_source (~> 0.8.1)
+      slop (~> 3.4)
+      spoon (~> 0.0)
+    rack (1.6.0)
+    rack-protection (1.5.3)
+      rack
+    rake (10.4.2)
+    rspec (2.14.1)
+      rspec-core (~> 2.14.0)
+      rspec-expectations (~> 2.14.0)
+      rspec-mocks (~> 2.14.0)
+    rspec-core (2.14.8)
+    rspec-expectations (2.14.5)
+      diff-lcs (>= 1.1.3, < 2.0)
+    rspec-mocks (2.14.6)
+    ruby-maven (3.1.1.0.8)
+      maven-tools (~> 1.0.1)
+      ruby-maven-libs (= 3.1.1)
+    ruby-maven-libs (3.1.1)
+    sinatra (1.4.5)
+      rack (~> 1.4)
+      rack-protection (~> 1.4)
+      tilt (~> 1.3, >= 1.3.4)
+    slop (3.6.0)
+    spoon (0.0.4)
+      ffi
+    stud (0.0.19)
+    thread_safe (0.3.4-java)
+    tilt (1.4.1)
+    treetop (1.4.15)
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+      polyglot (>= 0.3.1)
+    virtus (1.0.4)
+      axiom-types (~> 0.1)
+      coercible (~> 1.0)
+      descendants_tracker (~> 0.0, >= 0.0.3)
+      equalizer (~> 0.0, >= 0.0.9)
+
+PLATFORMS
+  java
+
+DEPENDENCIES
+  ci_reporter (= 1.9.3)
+  file-dependencies!
+  logstash!
+  logstash-devutils
+  rspec (~> 2.14.0)
diff --git a/bin/logstash.bat b/bin/logstash.bat
index eb8f52b09e3..4876aa7e80e 100644
--- a/bin/logstash.bat
+++ b/bin/logstash.bat
@@ -3,72 +3,9 @@
 SETLOCAL
 
 set SCRIPT_DIR=%~dp0
-for %%I in ("%SCRIPT_DIR%..") do set LS_HOME=%%~dpfI
-
-if "%USE_RUBY%" == "1" (
-goto setup_ruby
-) else (
-goto setup_jruby
-)
-
-:setup_ruby
-set RUBYCMD=ruby
-set VENDORED_JRUBY=
-goto EXEC
-
-:setup_jruby
-REM setup_java()
-if not defined JAVA_HOME goto missing_java_home
-REM ***** JAVA options *****
-
-if "%LS_MIN_MEM%" == "" (
-set LS_MIN_MEM=256m
-)
-
-if "%LS_MAX_MEM%" == "" (
-set LS_MAX_MEM=1g
-)
-
-set JAVA_OPTS=%JAVA_OPTS% -Xms%LS_MIN_MEM% -Xmx%LS_MAX_MEM%
-
-REM Enable aggressive optimizations in the JVM
-REM    - Disabled by default as it might cause the JVM to crash
-REM set JAVA_OPTS=%JAVA_OPTS% -XX:+AggressiveOpts
-
-set JAVA_OPTS=%JAVA_OPTS% -XX:+UseParNewGC
-set JAVA_OPTS=%JAVA_OPTS% -XX:+UseConcMarkSweepGC
-set JAVA_OPTS=%JAVA_OPTS% -XX:+CMSParallelRemarkEnabled
-set JAVA_OPTS=%JAVA_OPTS% -XX:SurvivorRatio=8
-set JAVA_OPTS=%JAVA_OPTS% -XX:MaxTenuringThreshold=1
-set JAVA_OPTS=%JAVA_OPTS% -XX:CMSInitiatingOccupancyFraction=75
-set JAVA_OPTS=%JAVA_OPTS% -XX:+UseCMSInitiatingOccupancyOnly
-
-REM GC logging options -- uncomment to enable
-REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCDetails
-REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCTimeStamps
-REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintClassHistogram
-REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintTenuringDistribution
-REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCApplicationStoppedTime
-REM JAVA_OPTS=%JAVA_OPTS% -Xloggc:/var/log/logstash/gc.log
-
-REM Causes the JVM to dump its heap on OutOfMemory.
-set JAVA_OPTS=%JAVA_OPTS% -XX:+HeapDumpOnOutOfMemoryError
-REM The path to the heap dump location, note directory must exists and have enough
-REM space for a full heap dump.
-REM JAVA_OPTS=%JAVA_OPTS% -XX:HeapDumpPath=$LS_HOME/logs/heapdump.hprof
-
-REM setup_vendored_jruby()
-set JRUBY_BIN="%LS_HOME%\vendor\jruby\bin\jruby"
-if exist "%JRUBY_BIN%" (
-set VENDORED_JRUBY=1
-goto EXEC
-) else (
-goto missing_jruby
-)
+CALL %SCRIPT_DIR%\setup.bat
 
 :EXEC
-REM run logstash
-set RUBYLIB=%LS_HOME%\lib
 REM is the first argument a flag? If so, assume 'agent'
 set first_arg=%1
 setlocal EnableDelayedExpansion
@@ -85,19 +22,5 @@ if "!first_arg:~0,1!" equ "-" (
     %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\logstash\runner.rb" %*
   )
 )
-goto finally
-
-:missing_java_home
-echo JAVA_HOME environment variable must be set!
-pause
-goto finally
-
-:missing_jruby
-echo Unable to find JRuby.
-echo If you are a user, this is a bug.
-echo If you are a developer, please run 'rake bootstrap'. Running 'rake' requires the 'ruby' program be available.
-goto finally
-
-:finally
 
 ENDLOCAL
diff --git a/bin/plugin b/bin/plugin
index bfd9b78f551..55fbf35f904 100755
--- a/bin/plugin
+++ b/bin/plugin
@@ -1,8 +1,38 @@
 #!/bin/sh
-# Install plugins.
+# Run logstash from source
+#
+# This is most useful when done from a git checkout.
 #
 # Usage:
-#     bin/plugin --help
+#     bin/logstash <command> [arguments]
+#
+# See 'bin/logstash help' for a list of commands.
+#
+# Defaults you can override with environment variables
+LS_HEAP_SIZE="${LS_HEAP_SIZE:=500m}"
 
+unset CDPATH
 basedir=$(cd `dirname $0`/..; pwd)
-exec ${basedir}/bin/logstash plugin "$@"
+. "${basedir}/bin/logstash.lib.sh"
+
+setup
+
+# Export these so that they can be picked up by file input (and others?).
+export HOME SINCEDB_DIR
+
+case $1 in
+  -*)
+    if [ -z "$VENDORED_JRUBY" ] ; then
+      exec "${RUBYCMD}" "${basedir}/lib/logstash/pluginmanager.rb" "$@"
+    else
+      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/pluginmanager.rb" "$@"
+    fi
+    ;;
+  *)
+    if [ -z "$VENDORED_JRUBY" ] ; then
+      exec "${RUBYCMD}" "${basedir}/lib/logstash/pluginmanager.rb" "$@"
+    else
+      exec "$JRUBY_BIN" $(jruby_opts) "${basedir}/lib/logstash/pluginmanager.rb" "$@"
+    fi
+    ;;
+esac
diff --git a/bin/plugin.bat b/bin/plugin.bat
index a168ac854e4..b2f11943c41 100644
--- a/bin/plugin.bat
+++ b/bin/plugin.bat
@@ -1,5 +1,15 @@
 @echo off
+
 SETLOCAL
 
 set SCRIPT_DIR=%~dp0
-CALL %SCRIPT_DIR%\logstash.bat plugin %*
+CALL %SCRIPT_DIR%\setup.bat
+
+:EXEC
+if "%VENDORED_JRUBY%" == "" (
+  %RUBYCMD% "%LS_HOME%\lib\logstash\pluginmanager.rb" %*
+) else (
+  %JRUBY_BIN% %jruby_opts% "%LS_HOME%\lib\logstash\pluginmanager.rb" %*
+)
+
+ENDLOCAL
diff --git a/bin/setup.bat b/bin/setup.bat
new file mode 100644
index 00000000000..bf2cfac23e3
--- /dev/null
+++ b/bin/setup.bat
@@ -0,0 +1,79 @@
+@echo off
+
+for %%I in ("%SCRIPT_DIR%..") do set LS_HOME=%%~dpfI
+
+if "%USE_RUBY%" == "1" (
+goto setup_ruby
+) else (
+goto setup_jruby
+)
+
+:setup_ruby
+set RUBYCMD=ruby
+set VENDORED_JRUBY=
+goto finally
+
+:setup_jruby
+REM setup_java()
+if not defined JAVA_HOME goto missing_java_home
+REM ***** JAVA options *****
+
+if "%LS_MIN_MEM%" == "" (
+set LS_MIN_MEM=256m
+)
+
+if "%LS_MAX_MEM%" == "" (
+set LS_MAX_MEM=1g
+)
+
+set JAVA_OPTS=%JAVA_OPTS% -Xms%LS_MIN_MEM% -Xmx%LS_MAX_MEM%
+
+REM Enable aggressive optimizations in the JVM
+REM    - Disabled by default as it might cause the JVM to crash
+REM set JAVA_OPTS=%JAVA_OPTS% -XX:+AggressiveOpts
+
+set JAVA_OPTS=%JAVA_OPTS% -XX:+UseParNewGC
+set JAVA_OPTS=%JAVA_OPTS% -XX:+UseConcMarkSweepGC
+set JAVA_OPTS=%JAVA_OPTS% -XX:+CMSParallelRemarkEnabled
+set JAVA_OPTS=%JAVA_OPTS% -XX:SurvivorRatio=8
+set JAVA_OPTS=%JAVA_OPTS% -XX:MaxTenuringThreshold=1
+set JAVA_OPTS=%JAVA_OPTS% -XX:CMSInitiatingOccupancyFraction=75
+set JAVA_OPTS=%JAVA_OPTS% -XX:+UseCMSInitiatingOccupancyOnly
+
+REM GC logging options -- uncomment to enable
+REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCDetails
+REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCTimeStamps
+REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintClassHistogram
+REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintTenuringDistribution
+REM JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCApplicationStoppedTime
+REM JAVA_OPTS=%JAVA_OPTS% -Xloggc:/var/log/logstash/gc.log
+
+REM Causes the JVM to dump its heap on OutOfMemory.
+set JAVA_OPTS=%JAVA_OPTS% -XX:+HeapDumpOnOutOfMemoryError
+REM The path to the heap dump location, note directory must exists and have enough
+REM space for a full heap dump.
+REM JAVA_OPTS=%JAVA_OPTS% -XX:HeapDumpPath=$LS_HOME/logs/heapdump.hprof
+
+REM setup_vendored_jruby()
+set JRUBY_BIN="%LS_HOME%\vendor\jruby\bin\jruby"
+if exist "%JRUBY_BIN%" (
+  set VENDORED_JRUBY=1
+goto finally
+) else (
+goto missing_jruby
+)
+
+:missing_java_home
+echo JAVA_HOME environment variable must be set!
+exit /b
+echo Done
+
+:missing_jruby
+echo Unable to find JRuby.
+echo If you are a user, this is a bug.
+echo If you are a developer, please run 'rake bootstrap'. Running 'rake' requires the 'ruby' program be available.
+exit /b
+
+:finally
+
+set RUBYLIB=%LS_HOME%\lib
diff --git a/ci/ci_setup.sh b/ci/ci_setup.sh
index 01909da26dd..e4dfe6899ed 100755
--- a/ci/ci_setup.sh
+++ b/ci/ci_setup.sh
@@ -1,11 +1,21 @@
 #!/usr/bin/env bash
 
+##
+# Note this setup needs a system ruby to be available, this can not
+# be done here as is higly system dependant.
+##
+
 #squid proxy work, so if there is a proxy it can be cached.
-sed -i.bak 's/https:/http:/' tools/Gemfile
+sed -i.bak 's/https:/http:/' Gemfile
 
 # Clean up some  possible stale directories
 rm -rf vendor       # make sure there are no vendorized dependencies
+rm -rf .bundle
 rm -rf spec/reports # no stale spec reports from previous executions
 
 # Setup the environment
 rake bootstrap # Bootstrap your logstash instance
+
+# Set up some general options for the rspec runner
+echo "--order rand" > .rspec
+echo "--format CI::Reporter::RSpec" >> .rspec
diff --git a/ci/ci_test.sh b/ci/ci_test.sh
index 2b4b770b695..c0eadda6424 100755
--- a/ci/ci_test.sh
+++ b/ci/ci_test.sh
@@ -7,17 +7,16 @@
 
 SELECTED_TEST_SUITE=$1
 
-if [[ $SELECTED_TEST_SUITE == $"all" ]]; then
+if [[ $SELECTED_TEST_SUITE == $"core-fail-fast" ]]; then
+  echo "Running core-fail-fast tests"
+  rake test:install-core    # Install core dependencies for testing.
+  rake test:core-fail-fast  # Run core tests
+elif [[ $SELECTED_TEST_SUITE == $"all" ]]; then
   echo "Running all plugins tests"
-  rake plugin:install-all   # Install all plugins, using the file at tools/Gemfile.plugins.all
-  rake vendor:append_development_dependencies\[tools/Gemfile.plugins.all\] # Append development dependencies to run the test
-  rake plugin:install-all   # Install previously appended development dependencies
-
-  #Run the specs test from all previously installed logstash plugins
-  ./bin/logstash rspec --order rand vendor/bundle/jruby/1.9/gems/logstash-*/spec/{input,filter,codec,output}s/*_spec.rb
+  rake test:install-all     # Install all plugins in this logstash instance, including development dependencies
+  rake test:plugins         # Run all plugins tests
 else
   echo "Running core tests"
-  rake test:prep # setup the necessary plugins and dependencies for testing
-  # Execute the test
-  ./bin/logstash rspec --order rand --format CI::Reporter::RSpec spec/**/*_spec.rb spec/*_spec.rb
+  rake test:install-core    # Install core dependencies for testing.
+  rake test:core            # Run core tests
 fi
diff --git a/dripmain.rb b/dripmain.rb
index 23426a5b063..b981b12aaf4 100644
--- a/dripmain.rb
+++ b/dripmain.rb
@@ -6,7 +6,7 @@
 $:.unshift(lib_path)
 
 require "logstash/environment"
-LogStash::Environment.set_gem_paths!
+LogStash::Environment.bundler_setup!
 
 # typical required gems and libs
 require "i18n"
diff --git a/lib/logstash/bundler.rb b/lib/logstash/bundler.rb
new file mode 100644
index 00000000000..c5c8ce047c7
--- /dev/null
+++ b/lib/logstash/bundler.rb
@@ -0,0 +1,124 @@
+require "bundler"
+require "bundler/cli"
+
+module Bundler
+  # Patch bundler to write a .lock file specific to the version of ruby.
+  # This keeps MRI/JRuby/RBX from conflicting over the Gemfile.lock updates
+  module SharedHelpers
+    def default_lockfile
+      ruby = "#{LogStash::Environment.ruby_engine}-#{LogStash::Environment.ruby_abi_version}"
+      Pathname.new("#{default_gemfile}.#{ruby}.lock")
+    end
+  end
+
+  # Add the Bundler.reset! method which has been added in master but is not in 1.7.9.
+  class << self
+    unless self.method_defined?("reset!")
+      def reset!
+        @definition = nil
+      end
+    end
+
+    def reset_settings
+      # reset!
+      # clear_gemspec_cache
+
+      # remove_instance_variable(:@setup) if defined?(@setup)
+      # remove_instance_variable(:@locked_gems) if defined?(@locked_gems)
+      # remove_instance_variable(:@load) if defined?(@load)
+      remove_instance_variable(:@settings) if defined?(@settings)
+    end
+  end
+end
+
+module LogStash
+  module Bundler
+
+    # capture any $stdout from the passed block. also trap any exception in that block, in which case the trapped exception will be returned
+    # @param [Proc] the code block to execute
+    # @return [String, Exception] the captured $stdout string and any trapped exception or nil if none
+    def self.capture_stdout(&block)
+      old_stdout = $stdout
+      $stdout = StringIO.new("", "w")
+      begin
+        block.call
+      rescue => e
+        return [$stdout.string, e]
+      end
+
+      [$stdout.string, nil]
+    ensure
+      $stdout = old_stdout
+    end
+
+    # execute bundle install and capture any $stdout output. any raised exception in the process will be trapped
+    # and returned. logs errors to $stdout.
+    # @param options [Hash] invoke options with default values, :max_tries => 10, :clean => false, :install => false, :update => false
+    # @param   options[:update] must be either false or a String or an Array of String
+    # @return [String, Exception] the installation captured output and any raised exception or nil if none
+    def self.invoke_bundler!(options = {})
+      options = {:max_tries => 10, :clean => false, :install => false, :update => false, :without => [:development]}.merge(options)
+      options[:without] = Array(options[:without])
+      options[:update] = Array(options[:update]) if options[:update]
+
+      ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
+      ENV["BUNDLE_PATH"] = LogStash::Environment.logstash_gem_home
+      ENV["BUNDLE_GEMFILE"] = LogStash::Environment::GEMFILE_PATH
+      ENV["BUNDLE_WITHOUT"] = options[:without].join(":")
+
+      try = 0
+
+      # capture_stdout also traps any raised exception and pass them back as the function return [output, exception]
+      capture_stdout do
+        loop do
+          begin
+            ::Bundler.reset!
+            ::Bundler::CLI.start(bundler_arguments(options))
+            break
+          rescue ::Bundler::VersionConflict => e
+            $stderr.puts("Plugin version conflict, aborting")
+            raise(e)
+          rescue ::Bundler::GemNotFound => e
+            $stderr.puts("Plugin not found, aborting")
+            raise(e)
+          rescue => e
+            if try >= options[:max_tries]
+              $stderr.puts("Too many retries, aborting, caused by #{e.class}")
+              $stderr.puts(e.message) if ENV["DEBUG"]
+              raise(e)
+            end
+
+            try += 1
+            $stderr.puts("Error #{e.class}, retrying #{try}/#{options[:max_tries]}")
+            $stderr.puts(e.message) if ENV["DEBUG"]
+            sleep(0.5)
+          end
+        end
+      end
+    end
+
+    # build Bundler::CLI.start arguments array from the given options hash
+    # @param option [Hash] the invoke_bundler! options hash
+    # @return [Array<String>] Bundler::CLI.start string arguments array
+    def self.bundler_arguments(options = {})
+      arguments = []
+
+      if options[:install]
+        arguments << "install"
+        arguments << "--gemfile=#{LogStash::Environment::GEMFILE_PATH}"
+        arguments << ["--path", LogStash::Environment::BUNDLE_DIR]
+        # note that generating "--without=" when options[:without] is empty is intended
+        arguments << "--without=#{options[:without].join(' ')}"
+      end
+
+      if options[:update]
+        arguments << "update"
+        arguments << options[:update]
+      end
+
+      arguments << "--clean" if options[:clean]
+
+      arguments.flatten
+    end
+  end
+end
\ No newline at end of file
diff --git a/lib/logstash/bundler_patch.rb b/lib/logstash/bundler_patch.rb
deleted file mode 100644
index 5caa7674fa1..00000000000
--- a/lib/logstash/bundler_patch.rb
+++ /dev/null
@@ -1,74 +0,0 @@
-require 'bundler'
-
-module Bundler
-  class SpecSet
-    # Usually Bundler's SpecSet is a read only/created once database
-    # I am modifying this behavior to allow `Gem` to uninstall gems.
-    def delete(key)
-      value = @specs.delete(key)
-      reset_state!
-      value
-    end
-
-    def delete_if(&block)
-      @specs.delete_if(&block)
-      reset_state!
-    end
-
-    def reset_state!
-      @lookup = nil
-      @sorted = nil
-    end
-  end
-  class RubygemsIntegration
-    # When you call Bundler#setup it will bootstrap
-    # a new rubygems environment and wipe all the existing
-    # specs available if they are not defined in the current gemfile.
-    # This patch change the behavior and will merge the specs.
-    #
-    # If you use :path to declare a gem in your gemfile this will create
-    # a virtual specs for this gems and add will add them to the $LOAD_PATH
-    #
-    # Future >= rubygems 2.0
-    class Future < RubygemsIntegration
-      def stub_rubygems(specs)
-        merged = merge_specs(specs)
-
-        Gem::Specification.all = merged
-
-        Gem.post_reset {
-          Gem::Specification.all = merged
-        }
-      end
-
-      def merge_specs(specs)
-        gem_path_specifications = Gem::Specification.to_a
-        
-        # If the specs is available in the gem_path and declared in the gemfile
-        # the gem in the Gemfile should have the priority.
-        gem_path_specifications.delete_if { |specification| specs.to_a.collect(&:name).include?(specification.name) }
-
-        merged_array = gem_path_specifications + specs.to_a
-        SpecSet.new(merged_array)
-      end
-    end
-  end  
-
-  # Patch bundler to write a .lock file specific to the version of ruby.
-  # This keeps MRI/JRuby/RBX from conflicting over the Gemfile.lock updates
-  module SharedHelpers
-    def default_lockfile
-      ruby = "#{LogStash::Environment.ruby_engine}-#{LogStash::Environment.ruby_abi_version}"
-      Pathname.new("#{default_gemfile}.#{ruby}.lock")
-    end
-  end
-
-  # Add the Bundler.reset! method which has been added in master but is not in 1.7.9.
-  class << self
-    unless self.method_defined?("reset!")
-      def reset!
-        @definition = nil
-      end
-    end
-  end
-end
diff --git a/lib/logstash/environment.rb b/lib/logstash/environment.rb
index 0d666a54036..caab10b0c73 100644
--- a/lib/logstash/environment.rb
+++ b/lib/logstash/environment.rb
@@ -1,6 +1,40 @@
 require "logstash/errors"
 require 'logstash/version'
 
+# monkey patch RubyGems to silence ffi warnings:
+#
+# WARN: Unresolved specs during Gem::Specification.reset:
+#       ffi (>= 0)
+# WARN: Clearing out unresolved specs.
+# Please report a bug if this causes problems.
+#
+# see https://github.com/elasticsearch/logstash/issues/2556 and https://github.com/rubygems/rubygems/issues/1070
+#
+# this code is from Rubygems v2.1.9 in JRuby 1.7.17. Per tickets this issue should be solved at JRuby >= 1.7.20.
+class Gem::Specification
+  def self.reset
+    @@dirs = nil
+    Gem.pre_reset_hooks.each { |hook| hook.call }
+    @@all = nil
+    @@stubs = nil
+    _clear_load_cache
+    unresolved = unresolved_deps
+    unless unresolved.empty?
+      unless (unresolved.size == 1 && unresolved["ffi"])
+        w = "W" + "ARN"
+        warn "#{w}: Unresolved specs during Gem::Specification.reset:"
+        unresolved.values.each do |dep|
+          warn "      #{dep}"
+        end
+        warn "#{w}: Clearing out unresolved specs."
+        warn "Please report a bug if this causes problems."
+      end
+      unresolved.clear
+    end
+    Gem.post_reset_hooks.each { |hook| hook.call }
+  end
+end
+
 module LogStash
   module Environment
     extend self
@@ -9,7 +43,7 @@ module Environment
     JAR_DIR = ::File.join(LOGSTASH_HOME, "vendor", "jar")
     ELASTICSEARCH_DIR = ::File.join(LOGSTASH_HOME, "vendor", "elasticsearch")
     BUNDLE_DIR = ::File.join(LOGSTASH_HOME, "vendor", "bundle")
-    GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "tools", "Gemfile")
+    GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "Gemfile")
     BOOTSTRAP_GEM_PATH = ::File.join(LOGSTASH_HOME, 'build', 'bootstrap')
 
     LOGSTASH_ENV = (ENV["LS_ENV"] || 'production').to_s.freeze
@@ -51,47 +85,19 @@ def test?
       env.downcase == "test"
     end
 
-    # set GEM_PATH for logstash runtime
-    # GEM_PATH should include the logstash gems, the plugin gems and the bootstrap gems.
-    # the bootstrap gems are required specificly for bundler which is a runtime dependency
-    # of some plugins dependedant gems.
-    def set_gem_paths!
-      ENV["GEM_PATH"] = ENV["BUNDLE_PATH"] = logstash_gem_home
-      ENV["BUNDLE_GEMFILE"] = GEMFILE_PATH unless ENV['BUNDLE_GEMFILE']
-
-      require 'bundler'
-      require 'logstash/bundler_patch'
-
-      Bundler.setup
-      ENV["GEM_HOME"] = ENV["GEM_PATH"] = logstash_gem_home
-
-      # Bundler.setup will wipe the existing $LOAD_PATH.
-      # Since we are using gems not declared in the gemfile we need to
-      # recalculate the $LOAD_PATH with all the available gems.
-      load_paths = Gem::Specification
-        .collect(&:load_paths)
-        .flatten
-        .reject { |path| $LOAD_PATH.include?(path) }
-
-      $LOAD_PATH.unshift(*load_paths)
-    end
-
-    def bundler_install_command(gem_file, gem_path)
-      # for now avoid multiple jobs, ex.: --jobs 4
-      # it produces erratic exceptions and hangs (with Bundler 1.7.9)
-      options = [
-        "install",
-        "--gemfile=#{gem_file}",
-        "--path",
-        gem_path,
-      ]
+    def bundler_setup!
+      begin
+        require "bundler"
+      rescue LoadError
+        Gem.clear_paths
+        Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = logstash_gem_home
+        require "bundler"
+      end
+      require "logstash/bundler"
 
-      # We don't install development gem from the gemfile.
-      # If you add a gem with `git` or the `github` option bundler will mark
-      # them as development and he will not install them.
-      # To install them you need to do LOGSTASH_ENV=development rake gems:vendor
-      options << "--without=development" unless LogStash::Environment.development?
-      options
+      ::Bundler.reset_settings # our monkey patched method
+      ::Bundler.reset!
+      ::Bundler.setup
     end
 
     def ruby_bin
@@ -137,22 +143,6 @@ def locales_path(path)
       return ::File.join(LOGSTASH_HOME, "locales", path)
     end
 
-    def load_logstash_gemspec!
-      logstash_spec = Gem::Specification.new do |gem|
-        gem.authors       = ["Jordan Sissel", "Pete Fritchman"]
-        gem.email         = ["jls@semicomplete.com", "petef@databits.net"]
-        gem.description   = %q{scalable log and event management (search, archive, pipeline)}
-        gem.summary       = %q{logstash - log and event management}
-        gem.homepage      = "http://logstash.net/"
-        gem.license       = "Apache License (2.0)"
-
-        gem.name          = "logstash"
-        gem.version       = LOGSTASH_VERSION
-      end
-
-      Gem::Specification.add_spec logstash_spec
-    end
-
     def load_locale!
       require "i18n"
       I18n.enforce_available_locales = true
diff --git a/lib/logstash/gemfile.rb b/lib/logstash/gemfile.rb
new file mode 100644
index 00000000000..de4dc6ba821
--- /dev/null
+++ b/lib/logstash/gemfile.rb
@@ -0,0 +1,175 @@
+module LogStash
+
+  class GemfileError < StandardError; end
+
+  class Gemfile
+    attr_accessor :gemset
+
+    HEADER = \
+      "# This is a Logstash generated Gemfile.\n" + \
+      "# If you modify this file manually all comments and formatting will be lost.\n\n"
+
+    # @params io [IO] any IO object that supports read, write, truncate, rewind
+    def initialize(io)
+      @io = io
+      @gemset = nil
+    end
+
+    def load
+      @gemset ||= DSL.parse(@io.read)
+      self
+    end
+
+    def save
+      raise(GemfileError, "a Gemfile must first be loaded") unless @gemset
+      @io.truncate(0)
+      @io.rewind
+      @io.write(HEADER)
+      @io.write(@gemset.to_s)
+      @io.flush
+    end
+
+    def find(name)
+      @gemset.find_gem(name)
+    end
+
+    # @param name [String] gem name
+    # @param *requirements params following name use the same notation as the Gemfile gem DSL statement
+    # @raise GemfileError if gem already exists in Gemfile
+    def add(name, *requirements)
+      @gemset.add_gem(Gem.parse(name, *requirements))
+    end
+
+    # update existing or add new
+    # @param name [String] gem name
+    # @param *requirements params following name use the same notation as the Gemfile gem DSL statement
+    def update(name, *requirements)
+      @gemset.update_gem(Gem.parse(name, *requirements))
+    end
+
+    # @return [Gem] removed gem or nil if not found
+    def remove(name)
+      @gemset.remove_gem(name)
+    end
+  end
+
+  class Gemset
+    attr_accessor :sources, :gems, :gemspec
+
+    def initialize
+      @sources = []      # list of urls
+      @gems = []         # list of Gem class
+      @gems_by_name = {} # hash of name => Gem
+      @gemspec = {}      # gemspec is a options hash
+    end
+
+    def to_s
+      [sources_to_s, gemspec_to_s, gems_to_s].select{|s| !s.empty?}.join("\n") + "\n"
+    end
+
+    # @return [Gem] found gem or nil if not found
+    def find_gem(name)
+      @gems_by_name[name.downcase]
+    end
+
+    # @raise GemfileError if gem already exists
+    def add_gem(_gem)
+      raise(GemfileError, "duplicate gem #{_gem.name}") if find_gem(_gem.name)
+      @gems << _gem
+      @gems_by_name[_gem.name.downcase] = _gem
+    end
+
+    # update existing or add new
+    def update_gem(_gem)
+      if old = find_gem(_gem.name)
+        @gems[@gems.index(old)] = _gem
+      else
+        @gems << _gem
+      end
+      @gems_by_name[_gem.name.downcase] = _gem
+    end
+
+    # @return [Gem] removed gem or nil if not found
+    def remove_gem(name)
+      if _gem = @gems_by_name.delete(name.downcase)
+        @gems.delete_at(@gems.index(_gem))
+      end
+      _gem
+    end
+
+    # deep clone self
+    def copy
+      Marshal.load(Marshal.dump(self))
+    end
+
+    private
+
+    def sources_to_s
+      return "" if @sources.empty?
+      @sources.map{|source| "source #{source.inspect}"}.join("\n")
+    end
+
+    def gems_to_s
+      return "" if @gems.empty?
+      @gems.map do |gem|
+        requirements = gem.requirements.empty? ? nil : gem.requirements.map{|r| r.inspect}.join(", ")
+        options = gem.options.empty? ? nil : gem.options.map{|k, v| "#{k.inspect} => #{v.inspect}"}.join(", ")
+        "gem " + [gem.name.inspect, requirements, options].compact.join(", ")
+      end.join("\n")
+    end
+
+    def gemspec_to_s
+      return "" if @gemspec.empty?
+      options = @gemspec.map{|k, v| "#{k.inspect} => #{v.inspect}"}.join(", ")
+      "gemspec #{options}"
+    end
+  end
+
+  # DSL is a minimal, incomplete Gemfile DSL subset parser, only what is currently required is implemented.
+  class DSL
+    attr_reader :gemset
+
+    def initialize
+      @gemset = Gemset.new
+    end
+
+    # @param gemfile_content [String] the Gemfile string content
+    # @return [Gemset] parsed Gemfile content as a Gemset
+    def self.parse(gemfile_content)
+      dsl = self.new
+      dsl.instance_eval(gemfile_content)
+      dsl.gemset
+    end
+
+    # DSL methods
+
+    def source(url)
+      @gemset.sources << url
+    end
+
+    def gem(name, *requirements)
+      parsed = Gem.parse(name, *requirements)
+      @gemset.add_gem(parsed)
+    end
+
+    def gemspec(options = {})
+      raise(GemfileError, "cannot declare multiple gemspec directives") unless @gemset.gemspec.empty?
+      @gemset.gemspec = options
+    end
+  end
+
+  class Gem
+    attr_accessor :name, :requirements, :options
+
+    def initialize(name, requirements = [], options = {})
+      @name = name
+      @requirements = requirements.map{|r| r.to_s.strip}.select{|r| !r.empty?}
+      @options = options
+    end
+
+    def self.parse(name, *requirements)
+      options = requirements.last.is_a?(Hash) ? requirements.pop : {}
+      self.new(name, requirements, options)
+    end
+  end
+end
diff --git a/lib/logstash/monkeypatches-for-bugs.rb b/lib/logstash/monkeypatches-for-bugs.rb
index f31e1cceb03..eed69d79a4d 100644
--- a/lib/logstash/monkeypatches-for-bugs.rb
+++ b/lib/logstash/monkeypatches-for-bugs.rb
@@ -1,6 +1,6 @@
 require "logstash/environment"
 
-if LogStash::Environment.windows? && LogStash::Environment.jruby? then
+if LogStash::Environment.windows? && LogStash::Environment.jruby?
   require "socket"
   module JRubyBug2558SocketPeerAddrBugFix
     def peeraddr
diff --git a/lib/logstash/pluginmanager.rb b/lib/logstash/pluginmanager.rb
index fb365f20db4..115933120b7 100644
--- a/lib/logstash/pluginmanager.rb
+++ b/lib/logstash/pluginmanager.rb
@@ -1,7 +1,15 @@
-require "logstash/namespace"
+require "logstash/environment"
 
-module LogStash::PluginManager
+ENV["GEM_HOME"] = ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
+Gem.use_paths(LogStash::Environment.logstash_gem_home)
 
 require 'logstash/pluginmanager/main'
 
-end # class Logstash::PluginManager
+if __FILE__ == $0
+  begin
+    LogStash::PluginManager::Main.run("bin/plugin", ARGV)
+  rescue LogStash::PluginManager::Error => e
+    $stderr.puts(e.message)
+    exit(1)
+  end
+end
diff --git a/lib/logstash/pluginmanager/install.rb b/lib/logstash/pluginmanager/install.rb
index 62dec003183..7fd94d2aaf1 100644
--- a/lib/logstash/pluginmanager/install.rb
+++ b/lib/logstash/pluginmanager/install.rb
@@ -1,82 +1,112 @@
 require 'clamp'
 require 'logstash/namespace'
 require 'logstash/environment'
-require 'logstash/pluginmanager'
 require 'logstash/pluginmanager/util'
-require 'rubygems/dependency_installer'
-require 'rubygems/uninstaller'
 require 'jar-dependencies'
 require 'jar_install_post_install_hook'
 require 'file-dependencies/gem'
 
+require "logstash/gemfile"
+require "logstash/bundler"
+
 class LogStash::PluginManager::Install < Clamp::Command
+  parameter "[PLUGIN] ...", "plugin name(s) or file"
+  option "--version", "VERSION", "version of the plugin to install"
+  option "--[no-]verify", :flag, "verify plugin validity before installation", :default => true
+  option "--development", :flag, "install all development dependencies of currently installed plugins", :default => false
 
-  parameter "PLUGIN", "plugin name or file"
+  # the install logic below support installing multiple plugins with each a version specification
+  # but the argument parsing does not support it for now so currently if specifying --version only
+  # one plugin name can be also specified.
+  #
+  # TODO: find right syntax to allow specifying list of plugins with optional version specification for each
 
-  option "--version", "VERSION", "version of the plugin to install", :default => ">= 0"
+  def execute
+    if development?
+      raise(LogStash::PluginManager::Error, "Cannot specify plugin(s) with --development, it will add the development dependencies of the currently installed plugins") unless plugin_list.empty?
+    else
+      raise(LogStash::PluginManager::Error, "No plugin specified") if plugin_list.empty? && verify?
 
-  option "--proxy", "PROXY", "Use HTTP proxy for remote operations"
+      # temporary until we fullfil TODO ^^
+      raise(LogStash::PluginManager::Error, "Only 1 plugin name can be specified with --version") if version && plugin_list.size > 1
+    end
+    raise(LogStash::PluginManager::Error, "File #{LogStash::Environment::GEMFILE_PATH} does not exist or is not writable, aborting") unless File.writable?(LogStash::Environment::GEMFILE_PATH)
 
-  def execute
-    LogStash::Environment.load_logstash_gemspec!
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
+    # keep a copy of the gemset to revert on error
+    original_gemset = gemfile.gemset.copy
 
-    ::Gem.configuration.verbose = false
-    ::Gem.configuration[:http_proxy] = proxy 
+    # force Rubygems sources to our Gemfile sources
+    Gem.sources = gemfile.gemset.sources
 
-    puts ("validating #{plugin} #{version}")
+    # install_list will be an array of [plugin name, version] tuples, version can be nil
+    install_list = []
 
-    unless gem_path = (plugin =~ /\.gem$/ && File.file?(plugin)) ? plugin : LogStash::PluginManager::Util.download_gem(plugin, version)
-      $stderr.puts ("Plugin does not exist '#{plugin}'. Aborting")
-      return 99
-    end
+    if development?
+      specs = LogStash::PluginManager.all_installed_plugins_gem_specs(gemfile)
+      install_list = specs.inject([]) do |result, spec|
+        result = result + spec.dependencies.select{|dep| dep.type == :development}.map{|dep| [dep.name] + dep.requirement.as_list + [{:group => :development}]}
+      end
+    else
+      # at this point we know that plugin_list is not empty and if the --version is specified there is only one plugin in plugin_list
+
+      install_list = version ? [plugin_list << version] : plugin_list.map{|plugin| [plugin, nil]}
+
+      install_list.each do |plugin, version|
+        puts("Validating #{[plugin, version].compact.join("-")}")
+        raise(LogStash::PluginManager::Error, "Installation aborted") unless LogStash::PluginManager.logstash_plugin?(plugin, version)
+      end if verify?
 
-    unless gem_meta = LogStash::PluginManager::Util.logstash_plugin?(gem_path)
-      $stderr.puts ("Invalid logstash plugin gem '#{plugin}'. Aborting...")
-      return 99
+      # at this point we know that we either have a valid gem name & version or a valid .gem file path
+
+      # if LogStash::PluginManager.plugin_file?(plugin)
+      #   raise(LogStash::PluginManager::Error) unless cache_gem_file(plugin)
+      #   spec = LogStash::PluginManager.plugin_file_spec(plugin)
+      #   gemfile.update(spec.name, spec.version.to_s)
+      # else
+      #   plugins.each{|tuple| gemfile.update(*tuple)}
+      # end
     end
 
-    puts ("Valid logstash plugin. Continuing...")
 
-    if LogStash::PluginManager::Util.installed?(gem_meta.name)
+    install_list = LogStash::PluginManager.merge_duplicates(install_list)
+    install_list.each{|plugin, version| gemfile.update(plugin, version)}
+    gemfile.save
 
-      current = Gem::Specification.find_by_name(gem_meta.name)
-      if Gem::Version.new(current.version) > Gem::Version.new(gem_meta.version)
-        unless LogStash::PluginManager::Util.ask_yesno("Do you wish to downgrade this plugin?")
-          $stderr.puts("Aborting installation")
-          return 99
-        end
-      end
+    puts("Installing" + (install_list.empty? ? "..." : " " + install_list.map{|plugin, version| plugin}.join(", ")))
+
+    bundler_options = {:install => true}
+    bundler_options[:without] = [] if development?
+
+    # any errors will be logged to $stderr by invoke_bundler!
+    output, exception = LogStash::Bundler.invoke_bundler!(bundler_options)
 
-      puts ("removing existing plugin before installation")
-      ::Gem.done_installing_hooks.clear
-      ::Gem::Uninstaller.new(gem_meta.name, {:force => true}).uninstall
+    if ENV["DEBUG"]
+      $stderr.puts(output)
+      $stderr.puts("Error: #{exception.class}, #{exception.message}") if exception
     end
 
-    ::Gem.configuration.verbose = false
-    FileDependencies::Gem.hook
-    options = {}
-    options[:document] = []
-    if LogStash::Environment.test?
-      # This two options are the ones used to ask the rubygems to install
-      # all development dependencies as you can do from the command line
-      # tool.
-      #
-      # :development option for installing development dependencies.
-      # :dev_shallow option for checking on the top level gems if there.
-      #
-      # Comments from the command line tool.
-      # --development     - Install additional development dependencies
-      #
-      # Links: https://github.com/rubygems/rubygems/blob/master/lib/rubygems/install_update_options.rb#L150
-      #        http://guides.rubygems.org/command-reference/#gem-install
-      options[:dev_shallow] = true
-      options[:development] = true
+    if exception
+      # revert to original Gemfile content
+      gemfile.gemset = original_gemset
+      gemfile.save
+      raise(LogStash::PluginManager::Error, "Installation aborted")
     end
-    inst = Gem::DependencyInstaller.new(options)
-    inst.install plugin, version
-    specs = inst.installed_gems.detect { |gemspec| gemspec.name == gem_meta.name }
-    puts ("Successfully installed '#{specs.name}' with version '#{specs.version}'")
-    return 0
+
+    puts("Installation successful")
   end
 
+  # copy .gem file into bundler cache directory, log any error to $stderr
+  # @param path [String] the source .gem file to copy
+  # @return [Boolean] true if successful
+  def cache_gem_file(path)
+    dest = ::File.join(LogStash::Environment.logstash_gem_home, "cache")
+    begin
+      FileUtils.cp(path, dest)
+    rescue => e
+      $stderr.puts("Error copying #{plugin} to #{dest}, caused by #{e.class}")
+      return false
+    end
+    true
+  end
 end # class Logstash::PluginManager
diff --git a/lib/logstash/pluginmanager/list.rb b/lib/logstash/pluginmanager/list.rb
index c897429a37b..dd92e67bef4 100644
--- a/lib/logstash/pluginmanager/list.rb
+++ b/lib/logstash/pluginmanager/list.rb
@@ -1,38 +1,38 @@
 require 'clamp'
 require 'logstash/namespace'
-require 'logstash/pluginmanager'
 require 'logstash/pluginmanager/util'
 require 'rubygems/spec_fetcher'
 
 class LogStash::PluginManager::List < Clamp::Command
 
-  parameter "[PLUGIN]", "Plugin name to search for, leave empty for all plugins"
+  parameter "[PLUGIN]", "Part of plugin name to search for, leave empty for all plugins"
 
-  option "--group", "NAME", "Show all plugins from a certain group. Can be one of 'output', 'input', 'codec', 'filter'"
+  option "--installed", :flag, "List only explicitly installed plugins using bin/plugin install ...", :default => false
+  option "--verbose", :flag, "Also show plugin version number", :default => false
+  option "--group", "NAME", "Filter plugins per group: input, output, filter or codec" do |arg|
+    raise(ArgumentError, "should be one of: input, output, filter or codec") unless ['input', 'output', 'filter', 'codec'].include?(arg)
+    arg
+  end
 
   def execute
+    Gem.configuration.verbose = false
 
-    if group
-      unless ['input', 'output', 'filter', 'codec'].include?(group)
-        signal_usage_error "Group name not valid"
-      end
-      plugin_name = nil
-    else
-      plugin_name = plugin
-    end
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
 
-    Gem.configuration.verbose = false
+    # start with all locally installed plugin gems regardless of the Gemfile content
+    specs = LogStash::PluginManager.find_plugins_gem_specs
 
-    # If we are listing a group make sure we check all gems
-    specs = LogStash::PluginManager::Util.matching_specs(plugin_name) \
-            .select{|spec| LogStash::PluginManager::Util.logstash_plugin?(spec) } \
-            .select{|spec| group ? group == spec.metadata['logstash_group'] : true}
-    if specs.empty?
-      $stderr.puts ("No plugins found.")
-      return 0
+    # apply filters
+    specs = specs.select{|spec| gemfile.find(spec.name)} if installed?
+    specs = specs.select{|spec| spec.name =~ /#{plugin}/i} if plugin
+    specs = specs.select{|spec| spec.metadata['logstash_group'] == group} if group
+
+    raise(LogStash::PluginManager::Error, "No plugins found") if specs.empty?
+
+    specs.sort_by{|spec| spec.name}.each do |spec|
+      line = "#{spec.name}"
+      line += " (#{spec.version})" if verbose?
+      puts(line)
     end
-    specs.each {|spec| puts ("#{spec.name} (#{spec.version})") }
-    return 0
   end
-
 end # class Logstash::PluginManager
diff --git a/lib/logstash/pluginmanager/main.rb b/lib/logstash/pluginmanager/main.rb
index a95e76b789a..c37e4d4b48c 100644
--- a/lib/logstash/pluginmanager/main.rb
+++ b/lib/logstash/pluginmanager/main.rb
@@ -5,14 +5,18 @@
 require "logstash/pluginmanager/list"
 require "logstash/pluginmanager/update"
 require "logstash/pluginmanager/util"
+require "logstash/pluginmanager/maven_tools_patch"
 require "clamp"
 
+module LogStash
+  module PluginManager
+    class Error < StandardError; end
 
-class LogStash::PluginManager::Main < Clamp::Command
-
-  subcommand "install", "Install a plugin", LogStash::PluginManager::Install
-  subcommand "uninstall", "Uninstall a plugin", LogStash::PluginManager::Uninstall
-  subcommand "update", "Install a plugin", LogStash::PluginManager::Update
-  subcommand "list", "List all installed plugins", LogStash::PluginManager::List
-
-end # class Logstash::PluginManager::Main
+    class Main < Clamp::Command
+      subcommand "install", "Install a plugin", LogStash::PluginManager::Install
+      subcommand "uninstall", "Uninstall a plugin", LogStash::PluginManager::Uninstall
+      subcommand "update", "Install a plugin", LogStash::PluginManager::Update
+      subcommand "list", "List all installed plugins", LogStash::PluginManager::List
+    end
+  end
+end
diff --git a/lib/logstash/pluginmanager/maven_tools_patch.rb b/lib/logstash/pluginmanager/maven_tools_patch.rb
new file mode 100644
index 00000000000..a94c02515f7
--- /dev/null
+++ b/lib/logstash/pluginmanager/maven_tools_patch.rb
@@ -0,0 +1,12 @@
+# This adds the "repo" element to the jar-dependencies DSL
+# allowing a gemspec to require a jar that exists in a custom
+# maven repository
+# Example:
+#   gemspec.requirements << "repo http://localhosty/repo"
+require 'maven/tools/dsl/project_gemspec'
+class Maven::Tools::DSL::ProjectGemspec
+  def repo(url)
+    @parent.repository(:id => url, :url => url)
+  end
+end
+
diff --git a/lib/logstash/pluginmanager/uninstall.rb b/lib/logstash/pluginmanager/uninstall.rb
index 271fded93bb..12cfc3c5958 100644
--- a/lib/logstash/pluginmanager/uninstall.rb
+++ b/lib/logstash/pluginmanager/uninstall.rb
@@ -2,34 +2,48 @@
 require "logstash/logging"
 require "logstash/errors"
 require "logstash/environment"
-require "logstash/pluginmanager"
 require "logstash/pluginmanager/util"
-require "rubygems/uninstaller"
 require "clamp"
 
-class LogStash::PluginManager::Uninstall < Clamp::Command
+require "logstash/gemfile"
+require "logstash/bundler"
 
+class LogStash::PluginManager::Uninstall < Clamp::Command
   parameter "PLUGIN", "plugin name"
 
-  public
+
   def execute
-    ::Gem.configuration.verbose = false
-
-    puts ("Validating removal of #{plugin}.")
-    
-    #
-    # TODO: This is a special case, Bundler doesnt allow you to uninstall 1 gem.
-    # Bundler will only uninstall the gems if they dont exist in his Gemfile.lock
-    # (source of truth)
-    #
-    unless gem_data = LogStash::PluginManager::Util.logstash_plugin?(plugin)
-      $stderr.puts ("Trying to remove a non logstash plugin. Aborting")
-      return 99
-    end
+    raise(LogStash::PluginManager::Error, "File #{LogStash::Environment::GEMFILE_PATH} does not exist or is not writable, aborting") unless File.writable?(LogStash::Environment::GEMFILE_PATH)
 
-    puts ("Uninstalling plugin '#{plugin}' with version '#{gem_data.version}'.")
-    ::Gem::Uninstaller.new(plugin, {}).uninstall
-    return 
-  end
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
+    # keep a copy of the gemset to revert on error
+    original_gemset = gemfile.gemset.copy
+
+    # make sure this is an installed plugin and present in Gemfile.
+    # it is not possible to uninstall a dependency not listed in the Gemfile, for example a dependent codec
+    raise(LogStash::PluginManager::Error, "This plugin has not been previously installed, aborting") unless LogStash::PluginManager.installed_plugin?(plugin, gemfile)
 
-end # class Logstash::PluginManager
+    # since we previously did a gemfile.find(plugin) there is no reason why
+    # remove would not work (return nil) here
+    if gemfile.remove(plugin)
+      gemfile.save
+
+      puts("Uninstalling #{plugin}")
+
+      # any errors will be logged to $stderr by invoke_bundler!
+      output, exception = LogStash::Bundler.invoke_bundler!(:clean => true)
+
+      if ENV["DEBUG"]
+        $stderr.puts(output)
+        $stderr.puts("Error: #{exception.class}, #{exception.message}") if exception
+      end
+
+      if exception
+        # revert to original Gemfile content
+        gemfile.gemset = original_gemset
+        gemfile.save
+        raise(LogStash::PluginManager::Error, "Uninstall aborted")
+      end
+    end
+  end
+end
diff --git a/lib/logstash/pluginmanager/update.rb b/lib/logstash/pluginmanager/update.rb
index c7e415351b8..7562cec9bec 100644
--- a/lib/logstash/pluginmanager/update.rb
+++ b/lib/logstash/pluginmanager/update.rb
@@ -1,76 +1,50 @@
 require 'clamp'
 require 'logstash/namespace'
-require 'logstash/pluginmanager'
 require 'logstash/pluginmanager/util'
-require 'rubygems/dependency_installer'
-require 'rubygems/uninstaller'
 require 'jar-dependencies'
 require 'jar_install_post_install_hook'
 require 'file-dependencies/gem'
 
-class LogStash::PluginManager::Update < Clamp::Command
-
-  parameter "[PLUGIN]", "Plugin name"
+require "logstash/gemfile"
+require "logstash/bundler"
 
-  option "--version", "VERSION", "version of the plugin to install", :default => ">= 0"
-
-  option "--proxy", "PROXY", "Use HTTP proxy for remote operations"
+class LogStash::PluginManager::Update < Clamp::Command
+  parameter "[PLUGIN] ...", "Plugin name(s) to upgrade to latest version"
 
   def execute
-
-    LogStash::Environment.load_logstash_gemspec!
-    ::Gem.configuration.verbose = false
-    ::Gem.configuration[:http_proxy] = proxy
-
-    if plugin.nil?
-      puts ("Updating all plugins")
+    gemfile = LogStash::Gemfile.new(File.new(LogStash::Environment::GEMFILE_PATH, "r+")).load
+    # keep a copy of the gemset to revert on error
+    original_gemset = gemfile.gemset.copy
+
+    # create list of plugins to update
+    plugins = unless plugin_list.empty?
+      not_installed = plugin_list.find{|plugin| !LogStash::PluginManager.installed_plugin?(plugin, gemfile)}
+      raise(LogStash::PluginManager::Error, "Plugin #{not_installed} has not been previously installed, aborting") if not_installed
+      plugin_list
     else
-      puts ("Updating #{plugin} plugin")
+      LogStash::PluginManager.all_installed_plugins_gem_specs(gemfile).map{|spec| spec.name}
     end
 
-    specs = LogStash::PluginManager::Util.matching_specs(plugin).select{|spec| LogStash::PluginManager::Util.logstash_plugin?(spec) }
-    if specs.empty?
-      $stderr.puts ("No plugins found to update or trying to update a non logstash plugin.")
-      return 99
-    end
-    specs.each { |spec| update_gem(spec, version) }
-    return 0
-  end
+    # remove any version constrain from the Gemfile so the plugin(s) can be updated to latest version
+    # calling update without requiremend will remove any previous requirements
+    plugins.each{|plugin| gemfile.update(plugin)}
+    gemfile.save
 
+    puts("Updating " + plugins.join(", "))
 
-  def update_gem(spec, version)
+    # any errors will be logged to $stderr by invoke_bundler!
+    output, exception = LogStash::Bundler.invoke_bundler!(:update => plugins)
 
-    unless gem_path = LogStash::PluginManager::Util.download_gem(spec.name, version)
-      $stderr.puts ("Plugin '#{spec.name}' does not exist remotely. Skipping.")
-      return 0
+    if ENV["DEBUG"]
+      $stderr.puts(output)
+      $stderr.puts("Error: #{exception.class}, #{exception.message}") if exception
     end
 
-    unless gem_meta = LogStash::PluginManager::Util.logstash_plugin?(gem_path)
-      $stderr.puts ("Invalid logstash plugin gem. skipping.")
-      return 99
+    if exception
+      # revert to original Gemfile content
+      gemfile.gemset = original_gemset
+      gemfile.save
+      raise(LogStash::PluginManager::Error, "Update aborted")
     end
-
-    unless Gem::Version.new(gem_meta.version) > Gem::Version.new(spec.version)
-      puts ("No newer version available for #{spec.name}. skipping.")
-      return 0
-    end
-
-    puts ("Updating #{spec.name} from version #{spec.version} to #{gem_meta.version}")
-
-    if LogStash::PluginManager::Util.installed?(spec.name)
-      ::Gem.done_installing_hooks.clear
-      ::Gem::Uninstaller.new(gem_meta.name, {:force => true}).uninstall
-    end
-
-    ::Gem.configuration.verbose = false
-    FileDependencies::Gem.hook
-    options = {}
-    options[:document] = []
-    inst = Gem::DependencyInstaller.new(options)
-    inst.install spec.name, gem_meta.version
-    specs, _ = inst.installed_gems
-    puts ("Update successful")
-    return 0
   end
-
-end # class Logstash::PluginManager
+end
diff --git a/lib/logstash/pluginmanager/util.rb b/lib/logstash/pluginmanager/util.rb
index 9e4fe20316f..2a38b9a3f72 100644
--- a/lib/logstash/pluginmanager/util.rb
+++ b/lib/logstash/pluginmanager/util.rb
@@ -1,64 +1,88 @@
+module LogStash::PluginManager
 
-class LogStash::PluginManager::Util
-
-  def self.logstash_plugin?(gem)
+  # check for valid logstash plugin gem name & version or .gem file, logs errors to $stdout
+  # uses Rubygems API and will remotely validated agains the current Gem.sources
+  # @param plugin [String] plugin name or .gem file path
+  # @param version [String] gem version requirement string
+  # @return [Boolean] true if valid logstash plugin gem name & version or a .gem file
+  def self.logstash_plugin?(plugin, version = nil)
+    if plugin_file?(plugin)
+      begin
+        return logstash_plugin_gem_spec?(plugin_file_spec(plugin))
+      rescue => e
+        $stderr.puts("Error reading plugin file #{plugin}, caused by #{e.class}")
+        $stderr.puts(e.message) if ENV["DEBUG"]
+        return false
+      end
+    else
+      dep = Gem::Dependency.new(plugin, version || Gem::Requirement.default)
+      specs, error = Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
 
-    gem_data = case
-    when gem.is_a?(Gem::Specification); gem
-    when (gem =~ /\.gem$/ and File.file?(gem)); Gem::Package.new(gem).spec
-    else Gem::Specification.find_by_name(gem)
+      # depending on version requirements, multiple specs can be returned in which case
+      # we will grab the one with the highest version number
+      if latest = specs.map(&:first).max_by(&:version)
+        unless valid = logstash_plugin_gem_spec?(latest)
+          $stderr.puts("#{plugin} is not a Logstash plugin")
+        end
+        return valid
+      else
+        $stderr.puts("Plugin #{plugin}" + (version ? " version #{version}" : "") + " does not exist")
+        return false
+      end
     end
+  end
 
-    gem_data.metadata['logstash_plugin'] == "true" ? gem_data : false
+  # @param spec [Gem::Specification] plugin gem specification
+  # @return [Boolean] true if this spec is for an installable logstash plugin
+  def self.logstash_plugin_gem_spec?(spec)
+    spec.metadata && spec.metadata["logstash_plugin"] == "true"
   end
 
-  def self.download_gem(gem_name, gem_version = '')
- 
-    gem_version ||= Gem::Requirement.default
- 
-    dep = ::Gem::Dependency.new(gem_name, gem_version)
-    specs_and_sources, errors = ::Gem::SpecFetcher.fetcher.spec_for_dependency dep
-    if specs_and_sources.empty?
-      return false
-    end
-    spec, source = specs_and_sources.max_by { |s,| s.version }
-    path = source.download( spec, java.lang.System.getProperty("java.io.tmpdir"))
-    path
+  # @param path [String] path to .gem file
+  # @return [Gem::Specification] .get file gem specification
+  # @raise [Exception] Gem::Package::FormatError will be raised on invalid .gem file format, might be other exceptions too
+  def self.plugin_file_spec(path)
+    Gem::Package.new(path).spec
   end
 
-  def self.installed?(name)
-    Gem::Specification.any? { |x| x.name == name }
+  # @param plugin [String] the plugin name or the local path to a .gem file
+  # @return [Boolean] true if the plugin is a local .gem file
+  def self.plugin_file?(plugin)
+    (plugin =~ /\.gem$/ && File.file?(plugin))
   end
 
-  def self.matching_specs(name)
-    req = Gem::Requirement.default
-    re = name ? /#{name}/i : //
-    specs = Gem::Specification.find_all{|spec| spec.name =~ re && req =~ spec.version}
-    specs.inject({}){|result, spec| result[spec.name_tuple] = spec; result}.values
+  # retrieve gem specs for all or specified name valid logstash plugins locally installed
+  # @param name [String] specific plugin name to find or nil for all plungins
+  # @return [Array<Gem::Specification>] all local logstash plugin gem specs
+  def self.find_plugins_gem_specs(name = nil)
+    specs = name ? Gem::Specification.find_all_by_name(name) : Gem::Specification.find_all
+    specs.select{|spec| logstash_plugin_gem_spec?(spec)}
   end
 
-  def self.ask_yesno(prompt)
-    while true
-      $stderr.puts ("#{prompt} [y/n]: ")
-      case $stdin.getc.downcase
-        when 'Y', 'y', 'j', 'J', 'yes' #j for Germans (Ja)
-          return true
-        when /\A[nN]o?\Z/ #n or no
-          break
-      end
-    end
+  # list of all locally installed plugins specs specified in the Gemfile.
+  # note that an installed plugin dependecies like codecs will not be listed, only those
+  # specifically listed in the Gemfile.
+  # @param gemfile [LogStash::Gemfile] the gemfile to validate against
+  # @return [Array<Gem::Specification>] list of plugin names
+  def self.all_installed_plugins_gem_specs(gemfile)
+    # we start form the installed gemspecs so we can verify the metadata for valid logstash plugin
+    # then filter out those not included in the Gemfile
+    find_plugins_gem_specs.select{|spec| !!gemfile.find(spec.name)}
+  end
+
+  # @param plugin [String] plugin name
+  # @param gemfile [LogStash::Gemfile] the gemfile to validate against
+  # @return [Boolean] true if the plugin is an installed logstash plugin and spefificed in the Gemfile
+  def self.installed_plugin?(plugin, gemfile)
+    !!gemfile.find(plugin) && find_plugins_gem_specs(plugin).any?
   end
 
-end
+  # @param plugin_list [Array] array of [plugin name, version] tuples
+  # @return [Array] array of [plugin name, version, ...] tuples when duplciate names have been merged and non duplicate version requirements added
+  def self.merge_duplicates(plugin_list)
 
-# This adds the "repo" element to the jar-dependencies DSL
-# allowing a gemspec to require a jar that exists in a custom
-# maven repository
-# Example:
-#   gemspec.requirements << "repo http://localhosty/repo"
-require 'maven/tools/dsl/project_gemspec'
-class Maven::Tools::DSL::ProjectGemspec
-  def repo(url)
-    @parent.repository(:id => url, :url => url)
+    # quick & dirty naive dedup for now
+    # TODO: properly merge versions requirements
+    plugin_list.uniq(&:first)
   end
-end
+end
\ No newline at end of file
diff --git a/lib/logstash/runner.rb b/lib/logstash/runner.rb
index 778c3c57341..ac14481d320 100644
--- a/lib/logstash/runner.rb
+++ b/lib/logstash/runner.rb
@@ -5,8 +5,7 @@
 $DEBUGLIST = (ENV["DEBUG"] || "").split(",")
 
 require "logstash/environment"
-LogStash::Environment.set_gem_paths!
-LogStash::Environment.load_logstash_gemspec!
+LogStash::Environment.bundler_setup!
 LogStash::Environment.load_locale!
 
 Thread.abort_on_exception = true
diff --git a/lib/logstash/util/retryable.rb b/lib/logstash/util/retryable.rb
new file mode 100644
index 00000000000..b5ca2ddb204
--- /dev/null
+++ b/lib/logstash/util/retryable.rb
@@ -0,0 +1,39 @@
+module LogStash
+  module Retryable
+    # execute retryable code block
+    # @param [Hash] options retryable options
+    # @option options [Fixnum] :tries retries to perform, default 1, set to 0 for infite retries. 1 means that upon exception the block will be retried once
+    # @option options [Fixnum] :base_sleep seconds to sleep on first retry, default 1
+    # @option options [Fixnum] :max_sleep max seconds to sleep upon exponential backoff, default 1
+    # @option options [Exception] :rescue exception class list to retry on, defaults is Exception, which retries on any Exception.
+    # @option options [Proc] :on_retry call the given Proc/lambda before each retry with the raised exception as parameter
+    def retryable(options = {}, &block)
+      options = {
+        :tries => 1,
+        :rescue => Exception,
+        :on_retry => nil,
+        :base_sleep => 1,
+        :max_sleep => 1,
+      }.merge(options)
+
+      rescue_classes = Array(options[:rescue])
+      max_sleep_retry = Math.log2(options[:max_sleep] / options[:base_sleep])
+      retry_count = 0
+
+      begin
+        return yield(retry_count)
+      rescue *rescue_classes => e
+        raise e if options[:tries] > 0 && retry_count >= options[:tries]
+
+        options[:on_retry].call(retry_count + 1, e) if options[:on_retry]
+
+        # dont compute and maybe overflow exponent on too big a retry count
+        seconds = retry_count < max_sleep_retry ? options[:base_sleep] * (2 ** retry_count) : options[:max_sleep]
+        sleep(seconds)
+
+        retry_count += 1
+        retry
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/logstash.gemspec b/logstash.gemspec
index c09477634cf..b0e5cb6dde7 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -37,19 +37,19 @@ Gem::Specification.new do |gem|
 
   # Plugin manager dependencies
 
-  # Currently there is a blocking issue with the latest (3.1.1.0.9) version of 
-  # `ruby-maven` # and installing jars dependencies. If you are declaring a gem 
+  # Currently there is a blocking issue with the latest (3.1.1.0.9) version of
+  # `ruby-maven` # and installing jars dependencies. If you are declaring a gem
   # in a gemfile # using the :github option it will make the bundle install crash,
   # before upgrading this gem you need to test the version with any plugins
   # that require jars.
   #
-  # Ticket: https://github.com/elasticsearch/logstash/issues/2595 
+  # Ticket: https://github.com/elasticsearch/logstash/issues/2595
   gem.add_runtime_dependency "jar-dependencies", '0.1.7'   #(MIT license)
   gem.add_runtime_dependency "ruby-maven", '3.1.1.0.8'                       #(EPL license)
   gem.add_runtime_dependency "maven-tools", '1.0.7'
-  
+
   gem.add_runtime_dependency "minitar"
-  gem.add_runtime_dependency "file-dependencies"
+  gem.add_runtime_dependency "file-dependencies", '0.1.6'
 
   if RUBY_PLATFORM == 'java'
     gem.platform = RUBY_PLATFORM
@@ -73,10 +73,13 @@ Gem::Specification.new do |gem|
   end
 
   # These are runtime-deps so you can do 'java -jar logstash.jar rspec <test>'
-  gem.add_runtime_dependency "rspec", "~> 2.14.0" #(MIT license)
+  gem.add_development_dependency "rspec", "~> 2.14.0" #(MIT license)
+
+  gem.add_development_dependency "logstash-devutils"
 
-  gem.add_runtime_dependency "logstash-devutils"
+  # Testing dependencies
+  gem.add_development_dependency "ci_reporter", "1.9.3"
+  gem.add_development_dependency "simplecov"
+  gem.add_development_dependency "coveralls"
 
-  # Jenkins Deps
-  gem.add_runtime_dependency "ci_reporter", "1.9.3"
 end
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 22c9f757b9e..abc2ec4e1b8 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -1,9 +1,5 @@
-def staging
-  "build/staging"
-end
-
 namespace "artifact" do
-  require "logstash/environment"
+
   def package_files
     [
       "LICENSE",
@@ -11,7 +7,9 @@ namespace "artifact" do
       "CONTRIBUTORS",
       "{bin,lib,spec,locales}/{,**/*}",
       "patterns/**/*",
-      "vendor/??*/**/*"
+      "vendor/??*/**/*",
+      "Gemfile*",
+      "logstash.gemspec",
     ]
   end
 
@@ -45,8 +43,10 @@ namespace "artifact" do
     end.flatten.uniq
   end
 
+  task "prepare" => ["bootstrap", "plugin:install-default"]
+
   desc "Build a tar.gz of logstash with all dependencies"
-  task "tar" => ["bootstrap", "plugin:install-defaults"] do
+  task "tar" => ["prepare"] do
     require "zlib"
     require "archive/tar/minitar"
     require "logstash/version"
@@ -81,7 +81,7 @@ namespace "artifact" do
     puts "Complete: #{tarpath}"
   end
 
-  task "zip" => ["bootstrap", "plugin:install-defaults"] do
+  task "zip" => ["prepare"] do
     Rake::Task["dependency:rubyzip"].invoke
     require 'zip'
     zippath = "build/logstash-#{LOGSTASH_VERSION}.zip"
@@ -212,12 +212,12 @@ namespace "artifact" do
   end # def package
 
   desc "Build an RPM of logstash with all dependencies"
-  task "rpm" => ["bootstrap", "plugin:install-defaults"] do
+  task "rpm" => ["prepare"] do
     package("centos", "5")
   end
 
   desc "Build an RPM of logstash with all dependencies"
-  task "deb" => ["bootstrap", "plugin:install-defaults"] do
+  task "deb" => ["prepare"] do
     package("ubuntu", "12.04")
   end
 end
diff --git a/rakelib/bootstrap.rake b/rakelib/bootstrap.rake
index 941ac26319a..6e8db74ac5b 100644
--- a/rakelib/bootstrap.rake
+++ b/rakelib/bootstrap.rake
@@ -1,5 +1,2 @@
 
-
 task "bootstrap" => [ "vendor:all", "compile:all" ]
-
-task "bootstrap:test" => [ "vendor:test", "compile:all" ]
diff --git a/rakelib/copy.rake b/rakelib/copy.rake
deleted file mode 100644
index f40747cc049..00000000000
--- a/rakelib/copy.rake
+++ /dev/null
@@ -1,4 +0,0 @@
-
-def staging
-  "build/staging"
-end
diff --git a/rakelib/default_plugins.rb b/rakelib/default_plugins.rb
index 45084f9a3b7..a3cd649a828 100644
--- a/rakelib/default_plugins.rb
+++ b/rakelib/default_plugins.rb
@@ -1,102 +1,147 @@
-::DEFAULT_PLUGINS = %w(
-logstash-output-zeromq
-logstash-codec-collectd
-logstash-output-xmpp
-logstash-codec-dots
-logstash-codec-edn
-logstash-codec-edn_lines
-logstash-codec-fluent
-logstash-codec-graphite
-logstash-codec-json
-logstash-codec-json_lines
-logstash-codec-line
-logstash-codec-msgpack
-logstash-codec-multiline
-logstash-codec-netflow
-logstash-codec-oldlogstashjson
-logstash-codec-plain
-logstash-codec-rubydebug
-logstash-codec-es_bulk
-logstash-output-udp
-logstash-filter-anonymize
-logstash-filter-checksum
-logstash-output-tcp
-logstash-output-stdout
-logstash-filter-clone
-logstash-output-statsd
-logstash-filter-csv
-logstash-filter-date
-logstash-filter-dns
-logstash-filter-drop
-logstash-output-sqs
-logstash-output-sns
-logstash-output-s3
-logstash-output-redis
-logstash-filter-fingerprint
-logstash-filter-geoip
-logstash-filter-grok
-logstash-output-rabbitmq
-logstash-output-cloudwatch
-logstash-output-pipe
-logstash-filter-kv
-logstash-filter-metrics
-logstash-filter-multiline
-logstash-filter-mutate
-logstash-output-pagerduty
-logstash-output-opentsdb
-logstash-output-null
-logstash-filter-ruby
-logstash-filter-sleep
-logstash-filter-split
-logstash-filter-syslog_pri
-logstash-filter-throttle
-logstash-output-nagios_nsca
-logstash-filter-urldecode
-logstash-filter-useragent
-logstash-filter-uuid
-logstash-filter-xml
-logstash-output-nagios
-logstash-input-elasticsearch
-logstash-input-eventlog
-logstash-input-exec
-logstash-input-file
-logstash-input-ganglia
-logstash-input-gelf
-logstash-output-lumberjack
-logstash-input-generator
-logstash-input-graphite
-logstash-output-kafka
-logstash-input-imap
-logstash-input-irc
-logstash-output-juggernaut
-logstash-input-kafka
-logstash-input-log4j
-logstash-input-lumberjack
-logstash-input-pipe
-logstash-output-irc
-logstash-input-rabbitmq
-logstash-output-http
-logstash-input-redis
-logstash-output-hipchat
-logstash-input-s3
-logstash-input-snmptrap
-logstash-output-graphite
-logstash-input-sqs
-logstash-input-stdin
-logstash-output-gelf
-logstash-input-syslog
-logstash-input-tcp
-logstash-input-twitter
-logstash-input-udp
-logstash-input-unix
-logstash-output-ganglia
-logstash-output-file
-logstash-output-exec
-logstash-input-xmpp
-logstash-output-email
-logstash-input-zeromq
-logstash-output-elasticsearch
-logstash-output-csv
-logstash-filter-json
-logstash-input-couchdb_changes
-)
+module LogStash
+  module RakeLib
+
+    # plugins included by default in the logstash distribution
+    DEFAULT_PLUGINS = %w(
+      logstash-output-zeromq
+      logstash-codec-collectd
+      logstash-output-xmpp
+      logstash-codec-dots
+      logstash-codec-edn
+      logstash-codec-edn_lines
+      logstash-codec-fluent
+      logstash-codec-es_bulk
+      logstash-codec-graphite
+      logstash-codec-json
+      logstash-codec-json_lines
+      logstash-codec-line
+      logstash-codec-msgpack
+      logstash-codec-multiline
+      logstash-codec-netflow
+      logstash-codec-oldlogstashjson
+      logstash-codec-plain
+      logstash-codec-rubydebug
+      logstash-filter-anonymize
+      logstash-filter-checksum
+      logstash-filter-clone
+      logstash-filter-csv
+      logstash-filter-date
+      logstash-filter-dns
+      logstash-filter-drop
+      logstash-filter-fingerprint
+      logstash-filter-geoip
+      logstash-filter-grok
+      logstash-filter-json
+      logstash-filter-kv
+      logstash-filter-metrics
+      logstash-filter-multiline
+      logstash-filter-mutate
+      logstash-filter-ruby
+      logstash-filter-sleep
+      logstash-filter-split
+      logstash-filter-syslog_pri
+      logstash-filter-throttle
+      logstash-filter-urldecode
+      logstash-filter-useragent
+      logstash-filter-uuid
+      logstash-filter-xml
+      logstash-input-couchdb_changes
+      logstash-input-elasticsearch
+      logstash-input-eventlog
+      logstash-input-exec
+      logstash-input-file
+      logstash-input-ganglia
+      logstash-input-gelf
+      logstash-input-generator
+      logstash-input-graphite
+      logstash-input-imap
+      logstash-input-irc
+      logstash-input-kafka
+      logstash-input-log4j
+      logstash-input-lumberjack
+      logstash-input-pipe
+      logstash-input-rabbitmq
+      logstash-input-redis
+      logstash-input-s3
+      logstash-input-snmptrap
+      logstash-input-sqs
+      logstash-input-stdin
+      logstash-input-syslog
+      logstash-input-tcp
+      logstash-input-twitter
+      logstash-input-udp
+      logstash-input-unix
+      logstash-input-xmpp
+      logstash-input-zeromq
+      logstash-output-cloudwatch
+      logstash-output-csv
+      logstash-output-elasticsearch
+      logstash-output-email
+      logstash-output-exec
+      logstash-output-file
+      logstash-output-ganglia
+      logstash-output-gelf
+      logstash-output-graphite
+      logstash-output-hipchat
+      logstash-output-http
+      logstash-output-irc
+      logstash-output-juggernaut
+      logstash-output-kafka
+      logstash-output-lumberjack
+      logstash-output-nagios
+      logstash-output-nagios_nsca
+      logstash-output-null
+      logstash-output-opentsdb
+      logstash-output-pagerduty
+      logstash-output-pipe
+      logstash-output-rabbitmq
+      logstash-output-redis
+      logstash-output-s3
+      logstash-output-sns
+      logstash-output-sqs
+      logstash-output-statsd
+      logstash-output-stdout
+      logstash-output-tcp
+      logstash-output-udp
+    )
+
+    # plugins required to run the logstash core specs
+    CORE_SPECS_PLUGINS = %w(
+      logstash-filter-clone
+      logstash-filter-mutate
+      logstash-input-generator
+      logstash-input-stdin
+      logstash-input-tcp
+      logstash-output-stdout
+    )
+
+    TEST_JAR_DEPENDENCIES_PLUGINS = %w(
+      logstash-input-kafka
+    )
+
+    TEST_VENDOR_PLUGINS = %w(
+      logstash-codec-collectd
+    )
+
+    ALL_PLUGINS_SKIP_LIST = Regexp.union([
+      /^logstash-codec-cef$/,
+      /^logstash-input-gemfire$/,
+      /^logstash-output-gemfire$/,
+      /^logstash-filter-metricize$/,
+      /^logstash-filter-yaml$/,
+      /jms$/,
+      /example$/,
+      /drupal/i
+    ])
+
+
+    # @return [Array<String>] list of all plugin names as defined in the logstash-plugins github organization, minus names that matches the ALL_PLUGINS_SKIP_LIST
+    def self.fetch_all_plugins
+      require 'octokit'
+
+      Octokit.auto_paginate = true
+      repos = Octokit.organization_repositories("logstash-plugins")
+      repos.map(&:name).reject{|name| name =~ ALL_PLUGINS_SKIP_LIST}
+    end
+  end
+end
diff --git a/rakelib/dependency.rake b/rakelib/dependency.rake
index b9459a6fd7b..787ce9992d0 100644
--- a/rakelib/dependency.rake
+++ b/rakelib/dependency.rake
@@ -2,8 +2,7 @@
 namespace "dependency" do
   task "bundler" do
     Rake::Task["gem:require"].invoke("bundler", ">= 1.3.5", LogStash::Environment.logstash_gem_home)
-    require "bundler/cli"
-    require "logstash/bundler_patch"
+    require "logstash/bundler"
   end
 
   task "rbx-stdlib" do
diff --git a/rakelib/plugin.rake b/rakelib/plugin.rake
index f3e1541d69b..3d6950fe5d7 100644
--- a/rakelib/plugin.rake
+++ b/rakelib/plugin.rake
@@ -2,27 +2,58 @@ require_relative "default_plugins"
 
 namespace "plugin" do
 
-  task "install",  :name do |task, args|
-    name = args[:name]
-    puts "[plugin] Installing plugin: #{name}"
+  def install_plugins(*args)
+    system("bin/plugin", "install", *args)
+    raise(RuntimeError, $!.to_s) unless $?.success?
+  end
 
-    cmd = ['bin/logstash', 'plugin', 'install', name ]
-    system(*cmd)
-    raise RuntimeError, $!.to_s unless $?.success?
+  task "install-development-dependencies" do
+    puts("[plugin:install-development-dependencies] Installing development dependencies of all installed plugins")
+    install_plugins("--development")
+
+    task.reenable # Allow this task to be run again
+  end
+
+  task "install", :name do |task, args|
+    name = args[:name]
+    puts("[plugin:install] Installing plugin: #{name}")
+    install_plugins("--no-verify", name)
 
     task.reenable # Allow this task to be run again
   end # task "install"
 
-  task "install-defaults" do
-    Rake::Task["vendor:bundle"].invoke("tools/Gemfile.plugins")
+  task "install-default" do
+    puts("[plugin:install-default] Installing default plugins")
+    install_plugins("--no-verify", *LogStash::RakeLib::DEFAULT_PLUGINS)
+
+    task.reenable # Allow this task to be run again
+  end
+
+  task "install-core" do
+    puts("[plugin:install-core] Installing core plugins")
+    install_plugins("--no-verify", *LogStash::RakeLib::CORE_SPECS_PLUGINS)
+
+    task.reenable # Allow this task to be run again
   end
 
-  task "install-test" do
-    Rake::Task["vendor:bundle"].invoke("tools/Gemfile.plugins.test")
+  task "install-jar-dependencies" do
+    puts("[plugin:install-jar-dependencies] Installing jar_dependencies plugins for testing")
+    install_plugins("--no-verify", *LogStash::RakeLib::TEST_JAR_DEPENDENCIES_PLUGINS)
+
+    task.reenable # Allow this task to be run again
   end
 
-  task "install-all" => [ "dependency:octokit" ] do
-    Rake::Task["vendor:bundle"].invoke("tools/Gemfile.plugins.all")
+  task "install-vendor" do
+    puts("[plugin:install-jar-dependencies] Installing vendor plugins for testing")
+    install_plugins("--no-verify", *LogStash::RakeLib::TEST_VENDOR_PLUGINS)
+
+    task.reenable # Allow this task to be run again
   end
 
+  task "install-all" => [ "dependency:octokit" ] do
+    puts("[plugin:install-all] Installing all plugins from https://github.com/logstash-plugins")
+    install_plugins("--no-verify", *LogStash::RakeLib.fetch_all_plugins)
+
+    task.reenable # Allow this task to be run again
+  end
 end # namespace "plugin"
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 3fffb80837a..d65ef3a2192 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -1,33 +1,33 @@
-
 namespace "test" do
-  task "default" => [ "bootstrap:test", "test:prep" ] do
-    Gem.clear_paths
+  def run_rspec(*args)
     require "logstash/environment"
-    LogStash::Environment.set_gem_paths!
-    require 'rspec/core'
-    RSpec::Core::Runner.run(Rake::FileList["spec/**/*.rb"])
+    LogStash::Environment.bundler_setup!
+    require "rspec/core/runner"
+    require "rspec"
+    RSpec::Core::Runner.run([*args])
   end
 
-  task "fail-fast" => [ "bootstrap:test", "test:prep" ] do
-    Gem.clear_paths
-    require "logstash/environment"
-    LogStash::Environment.set_gem_paths!
-    require 'rspec/core'
-    RSpec::Core::Runner.run(["--fail-fast", *Rake::FileList["spec/**/*.rb"]])
+  task "core" do
+    run_rspec(Rake::FileList["spec/**/*_spec.rb"])
   end
 
-  task "all-plugins" => [ "bootstrap","plugin:install-all" ] do
-    require "logstash/environment"
-    gem_home = LogStash::Environment.logstash_gem_home
-    pattern = "#{gem_home}/gems/logstash-*/spec/{input,filter,codec,output}s/*_spec.rb"
-    sh "#{LogStash::Environment::LOGSTASH_HOME}/bin/logstash rspec --order rand #{pattern}"
+  task "core-fail-fast" do
+    run_rspec("--fail-fast", Rake::FileList["spec/**/*_spec.rb"])
   end
 
-  task "prep" do
-    Rake::Task["vendor:gems"].invoke(false)
-    Rake::Task["plugin:install-test"].invoke
+  task "plugins" do
+    run_rspec("--order", "rand", Rake::FileList[File.join(ENV["GEM_HOME"], "gems/logstash-*/spec/{input,filter,codec,output}s/*_spec.rb")])
   end
 
+  task "install-core" => ["bootstrap", "plugin:install-core", "plugin:install-development-dependencies"]
+
+  task "install-default" => ["bootstrap", "plugin:install-default", "plugin:install-development-dependencies"]
+
+  task "install-all" => ["bootstrap", "plugin:install-all", "plugin:install-development-dependencies"]
+
+  task "install-vendor-plugins" => ["bootstrap", "plugin:install-vendor", "plugin:install-development-dependencies"]
+
+  task "install-jar-dependencies-plugins" => ["bootstrap", "plugin:install-jar-dependencies", "plugin:install-development-dependencies"]
 end
 
-task "test" => [ "test:default" ]
+task "test" => [ "test:core" ]
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index 0c4c032751a..3a6d12eb06c 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -1,77 +1,83 @@
-DOWNLOADS = {
-  "jruby" => { "version" => "1.7.17", "sha1" => "e4621bbcc51242061eaa9b62caee69c2a2b433f0" },
-  "kibana" => { "version" => "3.1.2", "sha1" => "a59ea4abb018a7ed22b3bc1c3bcc6944b7009dc4" },
-}
+namespace "vendor" do
+  VERSIONS = {
+    "jruby" => { "version" => "1.7.17", "sha1" => "e4621bbcc51242061eaa9b62caee69c2a2b433f0" },
+    "kibana" => { "version" => "3.1.2", "sha1" => "a59ea4abb018a7ed22b3bc1c3bcc6944b7009dc4" },
+  }
 
-def vendor(*args)
-  return File.join("vendor", *args)
-end
+  def vendor(*args)
+    return File.join("vendor", *args)
+  end
 
-# Untar any files from the given tarball file name.
-#
-# A tar entry is passed to the block. The block should should return
-# * nil to skip this file
-# * or, the desired string filename to write the file to.
-def untar(tarball, &block)
-  Rake::Task["dependency:archive-tar-minitar"].invoke
-  require "archive/tar/minitar"
-  tgz = Zlib::GzipReader.new(File.open(tarball,"rb"))
-  tar = Archive::Tar::Minitar::Input.open(tgz)
-  tar.each do |entry|
-    path = block.call(entry)
-    next if path.nil?
-    parent = File.dirname(path)
-
-    mkdir_p parent unless File.directory?(parent)
-
-    # Skip this file if the output file is the same size
-    if entry.directory?
-      mkdir path unless File.directory?(path)
-    else
-      entry_mode = entry.instance_eval { @mode } & 0777
-      if File.exists?(path)
-        stat = File.stat(path)
-        # TODO(sissel): Submit a patch to archive-tar-minitar upstream to
-        # expose headers in the entry.
-        entry_size = entry.instance_eval { @size }
-        # If file sizes are same, skip writing.
-        if Gem.win_platform?
-          #Do not fight with windows permission scheme
-          next if stat.size == entry_size
-        else
-          next if stat.size == entry_size && (stat.mode & 0777) == entry_mode
+  # Untar any files from the given tarball file name.
+  #
+  # A tar entry is passed to the block. The block should should return
+  # * nil to skip this file
+  # * or, the desired string filename to write the file to.
+  def self.untar(tarball, &block)
+    Rake::Task["dependency:archive-tar-minitar"].invoke
+    require "archive/tar/minitar"
+    tgz = Zlib::GzipReader.new(File.open(tarball,"rb"))
+    tar = Archive::Tar::Minitar::Input.open(tgz)
+    tar.each do |entry|
+      path = block.call(entry)
+      next if path.nil?
+      parent = File.dirname(path)
+
+      FileUtils.mkdir_p(parent) unless File.directory?(parent)
+
+      # Skip this file if the output file is the same size
+      if entry.directory?
+        FileUtils.mkdir(path) unless File.directory?(path)
+      else
+        entry_mode = entry.instance_eval { @mode } & 0777
+        if File.exists?(path)
+          stat = File.stat(path)
+          # TODO(sissel): Submit a patch to archive-tar-minitar upstream to
+          # expose headers in the entry.
+          entry_size = entry.instance_eval { @size }
+          # If file sizes are same, skip writing.
+          if Gem.win_platform?
+            #Do not fight with windows permission scheme
+            next if stat.size == entry_size
+          else
+            next if stat.size == entry_size && (stat.mode & 0777) == entry_mode
+          end
         end
-      end
-      puts "Extracting #{entry.full_name} from #{tarball} #{entry_mode.to_s(8)}"
-      File.open(path, "wb") do |fd|
-        # eof? check lets us skip empty files. Necessary because the API provided by
-        # Archive::Tar::Minitar::Reader::EntryStream only mostly acts like an
-        # IO object. Something about empty files in this EntryStream causes
-        # IO.copy_stream to throw "can't convert nil into String" on JRuby
-        # TODO(sissel): File a bug about this.
-        while !entry.eof?
-          chunk = entry.read(16384)
-          fd.write(chunk)
+        puts "Extracting #{entry.full_name} from #{tarball} #{entry_mode.to_s(8)}"
+        File.open(path, "wb") do |fd|
+          # eof? check lets us skip empty files. Necessary because the API provided by
+          # Archive::Tar::Minitar::Reader::EntryStream only mostly acts like an
+          # IO object. Something about empty files in this EntryStream causes
+          # IO.copy_stream to throw "can't convert nil into String" on JRuby
+          # TODO(sissel): File a bug about this.
+          while !entry.eof?
+            chunk = entry.read(16384)
+            fd.write(chunk)
+          end
+            #IO.copy_stream(entry, fd)
         end
-          #IO.copy_stream(entry, fd)
+        File.chmod(entry_mode, path)
       end
-      File.chmod(entry_mode, path)
     end
-  end
-  tar.close
-end # def untar
+    tar.close
+  end # def untar
 
-namespace "vendor" do
   task "jruby" do |task, args|
     name = task.name.split(":")[1]
-    info = DOWNLOADS[name]
+    info = VERSIONS[name]
     version = info["version"]
 
     discard_patterns = Regexp.union([ /^samples/,
                                       /@LongLink/,
                                       /lib\/ruby\/1.8/,
                                       /lib\/ruby\/2.0/,
-                                      /lib\/ruby\/shared\/rdoc/])
+                                      /lib\/ruby\/shared\/rdoc/,
+
+                                      # Don't provide jar_installer.rb from jruby's release
+                                      # We'll provide a newer version with some bugfixes.
+                                      # See the 'vendor:jruby-patch' task for this.
+                                      /lib\/ruby\/shared\/jar_installer\.rb$/,
+    ])
 
     url = "http://jruby.org.s3.amazonaws.com/downloads/#{version}/jruby-bin-#{version}.tar.gz"
     download = file_fetch(url, info["sha1"])
@@ -79,7 +85,7 @@ namespace "vendor" do
     parent = vendor(name).gsub(/\/$/, "")
     directory parent => "vendor" do
       next if parent =~ discard_patterns
-      mkdir parent
+      FileUtils.mkdir(parent)
     end.invoke unless Rake::Task.task_defined?(parent)
 
     prefix_re = /^#{Regexp.quote("jruby-#{version}/")}/
@@ -88,20 +94,27 @@ namespace "vendor" do
       next if out =~ discard_patterns
       vendor(name, out)
     end # untar
+    Rake::Task["vendor:jruby-patch"].invoke
   end # jruby
+
+  task "jruby-patch" do |task, args|
+    # Patch JRuby's old jar-dependencies thing. This fixes bugs on windows
+    patched_jar_installer = File.join(File.dirname(__FILE__), "..", "tools", "patches", "jar_installer.rb")
+    patch_target = File.join(File.dirname(__FILE__), "..", "vendor", "jruby", "lib", "ruby", "shared", "jar_installer.rb")
+    FileUtils.cp(patched_jar_installer, patch_target)
+  end
   task "all" => "jruby"
-  task "test" => "jruby"
 
   task "kibana" do |task, args|
     name = task.name.split(":")[1]
-    info = DOWNLOADS[name]
+    info = VERSIONS[name]
     version = info["version"]
     url = "https://download.elasticsearch.org/kibana/kibana/kibana-#{version}.tar.gz"
     download = file_fetch(url, info["sha1"])
 
     parent = vendor(name).gsub(/\/$/, "")
     directory parent => "vendor" do
-      mkdir parent
+      FileUtils.mkdir(parent)
     end.invoke unless Rake::Task.task_defined?(parent)
 
     prefix_re = /^#{Regexp.quote("kibana-#{version}/")}/
@@ -110,7 +123,22 @@ namespace "vendor" do
     end # untar
   end # task kibana
   task "all" => "kibana"
-  task "test" => "kibana"
+
+  task "system_gem", :jruby_bin, :name, :version do |task, args|
+    jruby_bin = args[:jruby_bin]
+    name = args[:name]
+    version = args[:version]
+
+    IO.popen([jruby_bin, "-S", "gem", "list", name, "--version", version, "--installed"], "r") do |io|
+      io.readlines # ignore
+    end
+    unless $?.success?
+      puts("Installing #{name} #{version} because the build process needs it.")
+      system(jruby_bin, "-S", "gem", "install", name, "-v", version, "--no-ri", "--no-rdoc")
+      raise RuntimeError, $!.to_s unless $?.success?
+    end
+    task.reenable # Allow this task to be run again
+  end
 
   namespace "force" do
     task "gems" => ["vendor:gems"]
@@ -120,59 +148,17 @@ namespace "vendor" do
     require "logstash/environment"
     Rake::Task["dependency:rbx-stdlib"] if LogStash::Environment.ruby_engine == "rbx"
     Rake::Task["dependency:stud"].invoke
-    Rake::Task["vendor:bundle"].invoke("tools/Gemfile") if args.to_hash.empty? || args[:bundle]
+    Rake::Task["dependency:bundler"].invoke
+
+    puts("Invoking bundler install...")
+    output, exception = LogStash::Bundler.invoke_bundler!(:install => true)
+    puts(output)
+    raise(exception) if exception
   end # task gems
   task "all" => "gems"
 
-  task "append_development_dependencies", [:gemfile] do |task, args|
-    dependencies = []
-    # grab the development dependencies
-    gem_home = LogStash::Environment.logstash_gem_home
-    Dir.glob("#{gem_home}/gems/logstash-*/*.gemspec") do |gemspec|
-      spec = Gem::Specification.load(gemspec)
-      spec.development_dependencies.each do |dependency|
-        dependencies << dependency
-      end
-    end
-    deps_gemfile = args[:gemfile]
-    # generate the gemfile.
-    File.open(deps_gemfile, "a") do |file|
-      dependencies.each do |dependency|
-        next if dependency.name.start_with?('logstash-')
-        requirements = dependency.requirement.to_s.split(',').map { |s| "'#{s.strip}'" }.join(',')
-        s =  "gem '#{dependency.name}', #{requirements}"
-        file.puts s
-      end
-    end
-  end
-
-  task "bundle", [:gemfile] => [ "dependency:bundler" ] do |task, args|
-    task.reenable
-    # because --path creates a .bundle/config file and changes bundler path
-    # we need to remove this file so it doesn't influence following bundler calls
-    FileUtils.rm_rf(::File.join(LogStash::Environment::LOGSTASH_HOME, "tools/.bundle"))
-    10.times do
-      begin
-        ENV["GEM_PATH"] = LogStash::Environment.logstash_gem_home
-        ENV["BUNDLE_PATH"] = LogStash::Environment.logstash_gem_home
-        ENV["BUNDLE_GEMFILE"] = args[:gemfile]
-        Bundler.reset!
-        Bundler::CLI.start(LogStash::Environment.bundler_install_command(args[:gemfile], LogStash::Environment::BUNDLE_DIR))
-        break
-      rescue => e
-        # for now catch all, looks like bundler now throws Bundler::InstallError, Errno::EBADF
-        puts(e.message)
-        puts("--> Retrying vendor:gems upon exception=#{e.class}")
-        sleep(1)
-      end
-    end
-    # because --path creates a .bundle/config file and changes bundler path
-    # we need to remove this file so it doesn't influence following bundler calls
-    FileUtils.rm_rf(::File.join(LogStash::Environment::LOGSTASH_HOME, "tools/.bundle"))
-  end
-
   desc "Clean the vendored files"
   task :clean do
-    rm_rf vendor
+    rm_rf(vendor)
   end
 end
diff --git a/rakelib/z_rubycheck.rake b/rakelib/z_rubycheck.rake
index 53d089b276b..367369ffe3c 100644
--- a/rakelib/z_rubycheck.rake
+++ b/rakelib/z_rubycheck.rake
@@ -6,7 +6,7 @@ if ENV['USE_RUBY'] != '1'
       # Use our own SSL certs when on Windows
       # There seems to be no other workaround other than monkeypatching.
       # If we're on windows, we have to provide a correct SSL CA cert for validating
-      # rubygems.org ssl certificate. 
+      # rubygems.org ssl certificate.
       # Lots of folks report this problem: https://gist.github.com/luislavena/f064211759ee0f806c88
       # https://github.com/elasticsearch/logstash/issues/2402
       class Gem::Request
@@ -26,9 +26,16 @@ if ENV['USE_RUBY'] != '1'
 
     # Make sure we have JRuby, then rerun ourselves under jruby.
     Rake::Task["vendor:jruby"].invoke
-
     jruby = File.join("vendor", "jruby", "bin", "jruby")
     rake = File.join("vendor", "jruby", "bin", "rake")
+
+    # if required at this point system gems can be installed using the system_gem task, for example:
+    # Rake::Task["vendor:system_gem"].invoke(jruby, "ffi", "1.9.6")
+
     exec(jruby, "-S", rake, *ARGV)
   end
 end
+
+def discover_rake()
+  Dir.glob('vendor', 'bundle', 'rake')
+end
diff --git a/spec/lib/logstash/bundler_spec.rb b/spec/lib/logstash/bundler_spec.rb
new file mode 100644
index 00000000000..45bdf49d9a5
--- /dev/null
+++ b/spec/lib/logstash/bundler_spec.rb
@@ -0,0 +1,30 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/bundler"
+
+describe LogStash::Bundler do
+
+  context "capture_stdout" do
+
+    it "should capture stdout from block" do
+      original_stdout = $stdout
+      output, exception = LogStash::Bundler.capture_stdout do
+        expect($stdout).not_to eq(original_stdout)
+        puts("foobar")
+      end
+      expect($stdout).to eq(original_stdout)
+      expect(output).to eq("foobar\n")
+      expect(exception).to eq(nil)
+    end
+
+    it "should capture stdout and report exception from block" do
+      output, exception = LogStash::Bundler.capture_stdout do
+        puts("foobar")
+        raise(StandardError, "baz")
+      end
+      expect(output).to eq("foobar\n")
+      expect(exception).to be_a(StandardError)
+      expect(exception.message).to eq("baz")
+    end
+  end
+end
diff --git a/spec/util/gemfile_spec.rb b/spec/util/gemfile_spec.rb
new file mode 100644
index 00000000000..178a9b4ee0e
--- /dev/null
+++ b/spec/util/gemfile_spec.rb
@@ -0,0 +1,174 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/gemfile"
+
+describe "logstash Gemfile Manager" do
+
+  context LogStash::Gemfile do
+
+    context "load" do
+
+      it "should load and return self" do
+        file = <<-END
+          source "https://rubygems.org"
+          gemspec :a => "a"
+          gem "test", "> 1.0", "< 2.0", :b => "b"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+        expect(gemfile).to be_an(LogStash::Gemfile)
+      end
+
+      it "should add sources" do
+        file = <<-END
+          source "a"
+          source "b"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+        expect(gemfile.gemset.sources.size).to eq(2)
+        expect(gemfile.gemset.sources).to eq(["a", "b"])
+      end
+
+      it "should add gemspec" do
+        file = <<-END
+          gemspec "foo"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+        expect(gemfile.gemset.gemspec).to eq("foo")
+      end
+
+      it "should raise on multiple gemspec" do
+        file = <<-END
+          gemspec "foo"
+          gemspec "boom"
+        END
+
+        expect{LogStash::Gemfile.new(StringIO.new(file)).load}.to raise_error(LogStash::GemfileError)
+      end
+
+      it "should add gems" do
+        file = <<-END
+          gem "foo"
+          gem "bar"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+        expect(gemfile.gemset.gems.size).to eq(2)
+        expect(gemfile.gemset.gems[0].name).to eq("foo")
+        expect(gemfile.gemset.gems[1].name).to eq("bar")
+      end
+
+      it "should raise on duplicate gem name" do
+        file = <<-END
+          gem "foo"
+          gem "foo"
+        END
+
+        expect{LogStash::Gemfile.new(StringIO.new(file)).load}.to raise_error(LogStash::GemfileError)
+      end
+
+      it "should add gems with only name" do
+        file = <<-END
+          gem "foo"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+
+        expect(gemfile.gemset.gems[0].name).to eq("foo")
+        expect(gemfile.gemset.gems[0].requirements.empty?).to eq(true)
+        expect(gemfile.gemset.gems[0].options.empty?).to eq(true)
+      end
+
+      it "should add gems with name and requirements" do
+        file = <<-END
+          gem "foo", "a"
+          gem "bar", "a", "b"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+
+        expect(gemfile.gemset.gems[0].name).to eq("foo")
+        expect(gemfile.gemset.gems[0].requirements).to eq(["a"])
+        expect(gemfile.gemset.gems[0].options.empty?).to eq(true)
+
+        expect(gemfile.gemset.gems[1].name).to eq("bar")
+        expect(gemfile.gemset.gems[1].requirements).to eq(["a", "b"])
+        expect(gemfile.gemset.gems[1].options.empty?).to eq(true)
+      end
+
+      it "should add gems with name and options" do
+        file = <<-END
+          gem "foo", :a => "a"
+          gem "bar", :a => "a", :b => "b"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+
+        expect(gemfile.gemset.gems[0].name).to eq("foo")
+        expect(gemfile.gemset.gems[0].requirements.empty?).to eq(true)
+        expect(gemfile.gemset.gems[0].options).to eq({:a => "a"})
+
+        expect(gemfile.gemset.gems[1].name).to eq("bar")
+        expect(gemfile.gemset.gems[1].requirements.empty?).to eq(true)
+        expect(gemfile.gemset.gems[1].options).to eq({:a => "a", :b => "b"})
+      end
+
+      it "should add gems with name, requirements and options" do
+        file = <<-END
+          gem "foo", "> 1.0", :b => "b"
+          gem "bar", "> 2.0", "< 3.0", :c => "c", :d => "d"
+        END
+
+        gemfile = LogStash::Gemfile.new(StringIO.new(file)).load
+        expect(gemfile.gemset.gems.size).to eq(2)
+
+        expect(gemfile.gemset.gems[0].name).to eq("foo")
+        expect(gemfile.gemset.gems[0].requirements).to eq(["> 1.0"])
+        expect(gemfile.gemset.gems[0].options).to eq({:b => "b"})
+
+        expect(gemfile.gemset.gems[1].name).to eq("bar")
+        expect(gemfile.gemset.gems[1].requirements).to eq(["> 2.0", "< 3.0"])
+        expect(gemfile.gemset.gems[1].options).to eq({:c => "c", :d => "d"})
+      end
+    end
+
+    context "save" do
+      it "should save" do
+        file = <<-END
+          source "https://rubygems.org"
+          gemspec :a => "a", "b" => 1
+          gem "foo", "> 1.0", "< 2.0", :b => "b"
+          gem "bar"
+        END
+
+        io = StringIO.new(file)
+        gemfile = LogStash::Gemfile.new(io).load
+        gemfile.save
+        expect(file).to eq(
+          LogStash::Gemfile::HEADER + \
+          "source \"https://rubygems.org\"\n" + \
+          "gemspec :a => \"a\", \"b\" => 1\n" + \
+          "gem \"foo\", \"> 1.0\", \"< 2.0\", :b => \"b\"\n" + \
+          "gem \"bar\"\n"
+        )
+      end
+    end
+  end
+
+  context LogStash::DSL do
+    context "parse" do
+      it "should parse Gemfile content string" do
+        gemfile = <<-END
+          source "https://rubygems.org"
+          gemspec
+          gem "foo"
+        END
+
+        gemset = LogStash::DSL.parse(gemfile)
+        expect(gemset).to be_an(LogStash::Gemset)
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/tools/Gemfile b/tools/Gemfile
deleted file mode 100644
index 0483cae4262..00000000000
--- a/tools/Gemfile
+++ /dev/null
@@ -1,5 +0,0 @@
-source "https://rubygems.org"
-gemspec :path => File.expand_path(File.join(File.dirname(__FILE__), "..")), :name => "logstash", :development_group => :development
-
-# in development if a local, unpublished gems is required, you must add it first in the gemspec without the :path option
-# and also add it here with the :path option.
\ No newline at end of file
diff --git a/tools/Gemfile.jruby-1.9.lock b/tools/Gemfile.jruby-1.9.lock
deleted file mode 100644
index 51df23a7f4d..00000000000
--- a/tools/Gemfile.jruby-1.9.lock
+++ /dev/null
@@ -1,121 +0,0 @@
-PATH
-  remote: /Users/ph/es/logstash
-  specs:
-    logstash (2.0.0.dev-java)
-      cabin (>= 0.7.0)
-      ci_reporter (= 1.9.3)
-      clamp
-      file-dependencies
-      filesize
-      ftw (~> 0.0.40)
-      i18n (= 0.6.9)
-      jar-dependencies (= 0.1.7)
-      jrjackson
-      jruby-httpclient
-      logstash-devutils
-      maven-tools (= 1.0.7)
-      mime-types
-      minitar
-      pry
-      rack
-      rspec (~> 2.14.0)
-      ruby-maven (= 3.1.1.0.8)
-      sinatra
-      stud
-      treetop (~> 1.4.0)
-
-GEM
-  remote: https://rubygems.org/
-  specs:
-    addressable (2.3.7)
-    axiom-types (0.1.1)
-      descendants_tracker (~> 0.0.4)
-      ice_nine (~> 0.11.0)
-      thread_safe (~> 0.3, >= 0.3.1)
-    backports (3.6.4)
-    builder (3.2.2)
-    cabin (0.7.1)
-    ci_reporter (1.9.3)
-      builder (>= 2.1.2)
-    clamp (0.6.3)
-    coderay (1.1.0)
-    coercible (1.0.0)
-      descendants_tracker (~> 0.0.1)
-    descendants_tracker (0.0.4)
-      thread_safe (~> 0.3, >= 0.3.1)
-    diff-lcs (1.2.5)
-    equalizer (0.0.9)
-    ffi (1.9.6-java)
-    file-dependencies (0.1.4)
-      minitar
-    filesize (0.0.4)
-    ftw (0.0.42)
-      addressable
-      backports (>= 2.6.2)
-      cabin (> 0)
-      http_parser.rb (~> 0.6)
-    gem_publisher (1.5.0)
-    http_parser.rb (0.6.0-java)
-    i18n (0.6.9)
-    ice_nine (0.11.1)
-    insist (1.0.0)
-    jar-dependencies (0.1.7)
-    jrjackson (0.2.8)
-    jruby-httpclient (1.1.1-java)
-    logstash-devutils (0.0.8-java)
-      gem_publisher
-      insist (= 1.0.0)
-      jar-dependencies
-      minitar
-      rake
-    maven-tools (1.0.7)
-      virtus (~> 1.0)
-    method_source (0.8.2)
-    mime-types (2.4.3)
-    minitar (0.5.4)
-    polyglot (0.3.5)
-    pry (0.10.1-java)
-      coderay (~> 1.1.0)
-      method_source (~> 0.8.1)
-      slop (~> 3.4)
-      spoon (~> 0.0)
-    rack (1.6.0)
-    rack-protection (1.5.3)
-      rack
-    rake (10.4.2)
-    rspec (2.14.1)
-      rspec-core (~> 2.14.0)
-      rspec-expectations (~> 2.14.0)
-      rspec-mocks (~> 2.14.0)
-    rspec-core (2.14.8)
-    rspec-expectations (2.14.5)
-      diff-lcs (>= 1.1.3, < 2.0)
-    rspec-mocks (2.14.6)
-    ruby-maven (3.1.1.0.8)
-      maven-tools (~> 1.0.1)
-      ruby-maven-libs (= 3.1.1)
-    ruby-maven-libs (3.1.1)
-    sinatra (1.4.5)
-      rack (~> 1.4)
-      rack-protection (~> 1.4)
-      tilt (~> 1.3, >= 1.3.4)
-    slop (3.6.0)
-    spoon (0.0.4)
-      ffi
-    stud (0.0.19)
-    thread_safe (0.3.4-java)
-    tilt (1.4.1)
-    treetop (1.4.15)
-      polyglot
-      polyglot (>= 0.3.1)
-    virtus (1.0.4)
-      axiom-types (~> 0.1)
-      coercible (~> 1.0)
-      descendants_tracker (~> 0.0, >= 0.0.3)
-      equalizer (~> 0.0, >= 0.0.9)
-
-PLATFORMS
-  java
-
-DEPENDENCIES
-  logstash!
diff --git a/tools/Gemfile.plugins b/tools/Gemfile.plugins
deleted file mode 100644
index a392913df58..00000000000
--- a/tools/Gemfile.plugins
+++ /dev/null
@@ -1,7 +0,0 @@
-require 'rakelib/default_plugins'
-
-source 'https://rubygems.org'
-
-gemspec :name => "logstash", :path => File.expand_path(File.join(File.dirname(__FILE__), ".."))
-
-DEFAULT_PLUGINS.each {|p| gem p}
diff --git a/tools/Gemfile.plugins.all b/tools/Gemfile.plugins.all
deleted file mode 100644
index 8d988a8457e..00000000000
--- a/tools/Gemfile.plugins.all
+++ /dev/null
@@ -1,13 +0,0 @@
-require 'octokit'
-skiplist = Regexp.union([ /^logstash-codec-cef$/, /^logstash-input-gemfire$/, /^logstash-output-gemfire$/, /^logstash-filter-metricize$/, /^logstash-filter-yaml$/, /jms$/, /example$/])
-
-source 'https://rubygems.org'
-
-gemspec :name => "logstash", :path => ".."
-
-Octokit.auto_paginate = true
-repo_list = Octokit.organization_repositories("logstash-plugins")
-repo_list.each do |repo|
-  next if repo.name =~ skiplist
-  gem repo.name
-end
diff --git a/tools/Gemfile.plugins.jruby-1.9.lock b/tools/Gemfile.plugins.jruby-1.9.lock
deleted file mode 100644
index 8adb154cf67..00000000000
--- a/tools/Gemfile.plugins.jruby-1.9.lock
+++ /dev/null
@@ -1,647 +0,0 @@
-PATH
-  remote: /Users/jls/projects/logstash
-  specs:
-    logstash (2.0.0.dev-java)
-      cabin (>= 0.7.0)
-      ci_reporter (= 1.9.3)
-      clamp
-      file-dependencies
-      filesize
-      ftw (~> 0.0.40)
-      i18n (= 0.6.9)
-      jar-dependencies (= 0.1.7)
-      jrjackson
-      jruby-httpclient
-      logstash-devutils
-      maven-tools
-      mime-types
-      minitar
-      pry
-      rack
-      rspec (~> 2.14.0)
-      ruby-maven
-      sinatra
-      stud
-      treetop (~> 1.4.0)
-
-GEM
-  remote: https://rubygems.org/
-  specs:
-    addressable (2.3.6)
-    atomic (1.1.99-java)
-    avl_tree (1.2.1)
-      atomic (~> 1.1)
-    awesome_print (1.6.1)
-    aws-sdk (1.61.0)
-      aws-sdk-v1 (= 1.61.0)
-    aws-sdk-v1 (1.61.0)
-      json (~> 1.4)
-      nokogiri (>= 1.4.4)
-    axiom-types (0.1.1)
-      descendants_tracker (~> 0.0.4)
-      ice_nine (~> 0.11.0)
-      thread_safe (~> 0.3, >= 0.3.1)
-    backports (3.6.4)
-    bindata (2.1.0)
-    buftok (0.2.0)
-    builder (3.2.2)
-    cabin (0.7.1)
-    ci_reporter (1.9.3)
-      builder (>= 2.1.2)
-    cinch (2.2.3)
-    clamp (0.6.3)
-    coderay (1.1.0)
-    coercible (1.0.0)
-      descendants_tracker (~> 0.0.1)
-    concurrent-ruby (0.8.0-java)
-    descendants_tracker (0.0.4)
-      thread_safe (~> 0.3, >= 0.3.1)
-    diff-lcs (1.2.5)
-    edn (1.0.6)
-    elasticsearch (1.0.6)
-      elasticsearch-api (= 1.0.6)
-      elasticsearch-transport (= 1.0.6)
-    elasticsearch-api (1.0.6)
-      multi_json
-    elasticsearch-transport (1.0.6)
-      faraday
-      multi_json
-    equalizer (0.0.9)
-    faraday (0.9.1)
-      multipart-post (>= 1.2, < 3)
-    ffi (1.9.6-java)
-    ffi-rzmq (1.0.0)
-      ffi
-    file-dependencies (0.1.4)
-      minitar
-    filesize (0.0.4)
-    filewatch (0.5.1)
-    ftw (0.0.42)
-      addressable
-      backports (>= 2.6.2)
-      cabin (> 0)
-      http_parser.rb (~> 0.6)
-    gelf (1.3.2)
-      json
-    gelfd (0.2.0)
-    gem_publisher (1.5.0)
-    geoip (1.4.0)
-    gmetric (0.1.3)
-    hitimes (1.2.2-java)
-    http (0.6.3)
-      http_parser.rb (~> 0.6.0)
-    http_parser.rb (0.6.0-java)
-    i18n (0.6.9)
-    ice_nine (0.11.1)
-    insist (1.0.0)
-    jar-dependencies (0.1.7)
-    jbundler (0.5.5)
-      bundler (~> 1.5)
-      ruby-maven (>= 3.1.1.0.1, < 3.1.2)
-    jls-grok (0.11.0)
-      cabin (>= 0.6.0)
-    jls-lumberjack (0.0.20)
-    jrjackson (0.2.8)
-    jruby-httpclient (1.1.1-java)
-    jruby-kafka (0.2.1-java)
-      jbundler (= 0.5.5)
-    jruby-win32ole (0.8.5)
-    json (1.8.2-java)
-    logstash-codec-collectd (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-dots (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-edn (0.1.4)
-      edn
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-edn_lines (0.1.3)
-      edn
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-codec-es_bulk (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-codec-fluent (0.1.4-java)
-      logstash (>= 1.4.0, < 2.0.0)
-      msgpack-jruby
-    logstash-codec-graphite (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-codec-json (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-json_lines (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-codec-line (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-msgpack (0.1.5-java)
-      logstash (>= 1.4.0, < 2.0.0)
-      msgpack-jruby
-    logstash-codec-multiline (0.1.4)
-      jls-grok (= 0.11.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-patterns-core
-    logstash-codec-netflow (0.1.3)
-      bindata (>= 1.5.0)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-oldlogstashjson (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-plain (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-rubydebug (0.1.5)
-      awesome_print
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-devutils (0.0.8-java)
-      gem_publisher
-      insist (= 1.0.0)
-      jar-dependencies
-      minitar
-      rake
-    logstash-filter-anonymize (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      murmurhash3
-    logstash-filter-checksum (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-clone (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-csv (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-date (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-input-generator
-      logstash-output-null
-    logstash-filter-dns (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-drop (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-fingerprint (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      murmurhash3
-    logstash-filter-geoip (0.1.3)
-      geoip (>= 1.3.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-grok (0.1.3)
-      jls-grok (= 0.11.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-patterns-core
-    logstash-filter-json (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-kv (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-metrics (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-      metriks
-    logstash-filter-multiline (0.1.4)
-      jls-grok (~> 0.11.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-filter-mutate
-      logstash-patterns-core
-    logstash-filter-mutate (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-filter-grok
-      logstash-patterns-core
-    logstash-filter-ruby (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-filter-date
-    logstash-filter-sleep (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-split (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-syslog_pri (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-throttle (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-urldecode (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-useragent (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      user_agent_parser (>= 2.0.0)
-    logstash-filter-uuid (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-xml (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      nokogiri
-      xml-simple
-    logstash-input-couchdb_changes (0.1.1)
-      ftw (>= 0.0.41)
-      json
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-elasticsearch (0.1.3)
-      elasticsearch (~> 1.0, >= 1.0.6)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-    logstash-input-eventlog (0.1.2-java)
-      jruby-win32ole
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-exec (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-file (0.1.3)
-      addressable
-      filewatch (= 0.5.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-ganglia (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-gelf (0.1.2)
-      gelf (= 1.3.2)
-      gelfd (= 0.2.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-generator (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-graphite (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-input-tcp
-    logstash-input-imap (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-      mail
-      stud
-    logstash-input-irc (0.1.2)
-      cinch
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-kafka (0.1.8)
-      jar-dependencies (~> 0.1.0)
-      jruby-kafka (>= 0.2.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-plain
-    logstash-input-log4j (0.1.2)
-      jar-dependencies
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-lumberjack (0.1.2)
-      jls-lumberjack (>= 0.0.20)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-pipe (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-rabbitmq (0.1.2-java)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      march_hare (~> 2.5.1)
-    logstash-input-redis (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      redis
-    logstash-input-s3 (0.1.3)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-      logstash-mixin-aws
-      stud (~> 0.0.18)
-    logstash-input-snmptrap (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      snmp
-    logstash-input-sqs (0.1.2)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-    logstash-input-stdin (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-    logstash-input-syslog (0.1.2)
-      concurrent-ruby
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-      logstash-filter-date
-      logstash-filter-grok
-      thread_safe
-    logstash-input-tcp (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-    logstash-input-twitter (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      twitter (= 5.12.0)
-    logstash-input-udp (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-unix (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-input-xmpp (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-      xmpp4r (= 0.5)
-    logstash-input-zeromq (0.1.2)
-      ffi-rzmq
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-    logstash-mixin-aws (0.1.4)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-output-cloudwatch (0.1.2)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-mixin-aws
-      rufus-scheduler (~> 2.0.24)
-    logstash-output-csv (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-filter-json
-      logstash-output-file
-    logstash-output-elasticsearch (0.1.11-java)
-      cabin (~> 0.6)
-      concurrent-ruby
-      elasticsearch (~> 1.0, >= 1.0.6)
-      jar-dependencies
-      logstash (>= 1.4.0, < 2.0.0)
-      manticore (~> 0.3)
-      stud (~> 0.0, >= 0.0.17)
-    logstash-output-email (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      mail
-    logstash-output-exec (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-file (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-input-generator
-    logstash-output-ganglia (0.1.2)
-      gmetric (= 0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-gelf (0.1.2)
-      gelf (= 1.3.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-graphite (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-hipchat (0.1.2)
-      ftw (~> 0.0.40)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-http (0.1.2)
-      ftw (~> 0.0.40)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-irc (0.1.2)
-      cinch
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-juggernaut (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      redis
-    logstash-output-kafka (0.1.5)
-      jar-dependencies
-      jruby-kafka (>= 0.2.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-plain
-    logstash-output-lumberjack (0.1.3)
-      jls-lumberjack (>= 0.0.20)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-nagios (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-nagios_nsca (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-null (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-opentsdb (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-pagerduty (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-pipe (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-output-rabbitmq (0.1.2-java)
-      logstash (>= 1.4.0, < 2.0.0)
-      march_hare (~> 2.5.1)
-    logstash-output-redis (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      redis
-      stud
-    logstash-output-s3 (0.1.2)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-mixin-aws
-      stud (~> 0.0.18)
-    logstash-output-sns (0.1.1)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-mixin-aws
-    logstash-output-sqs (0.1.1)
-      aws-sdk
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-mixin-aws
-      stud
-    logstash-output-statsd (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-input-generator
-      statsd-ruby (= 1.2.0)
-    logstash-output-stdout (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-output-tcp (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      stud
-    logstash-output-udp (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-    logstash-output-xmpp (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      xmpp4r (= 0.5)
-    logstash-output-zeromq (0.1.3)
-      ffi-rzmq (= 1.0.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-    logstash-patterns-core (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-    mail (2.6.3)
-      mime-types (>= 1.16, < 3)
-    manticore (0.3.4-java)
-      addressable (~> 2.3)
-    march_hare (2.5.1-java)
-    maven-tools (1.0.7)
-      virtus (~> 1.0)
-    memoizable (0.4.2)
-      thread_safe (~> 0.3, >= 0.3.1)
-    method_source (0.8.2)
-    metriks (0.9.9.7)
-      atomic (~> 1.0)
-      avl_tree (~> 1.2.0)
-      hitimes (~> 1.1)
-    mime-types (2.4.3)
-    minitar (0.5.4)
-    msgpack-jruby (1.4.0-java)
-    multi_json (1.10.1)
-    multipart-post (2.0.0)
-    murmurhash3 (0.1.6-java)
-    naught (1.0.0)
-    nokogiri (1.6.6.2-java)
-    polyglot (0.3.5)
-    pry (0.10.1-java)
-      coderay (~> 1.1.0)
-      method_source (~> 0.8.1)
-      slop (~> 3.4)
-      spoon (~> 0.0)
-    rack (1.6.0)
-    rack-protection (1.5.3)
-      rack
-    rake (10.4.2)
-    redis (3.2.0)
-    rspec (2.14.1)
-      rspec-core (~> 2.14.0)
-      rspec-expectations (~> 2.14.0)
-      rspec-mocks (~> 2.14.0)
-    rspec-core (2.14.8)
-    rspec-expectations (2.14.5)
-      diff-lcs (>= 1.1.3, < 2.0)
-    rspec-mocks (2.14.6)
-    ruby-maven (3.1.1.0.8)
-      maven-tools (~> 1.0.1)
-      ruby-maven-libs (= 3.1.1)
-    ruby-maven-libs (3.1.1)
-    rufus-scheduler (2.0.24)
-      tzinfo (>= 0.3.22)
-    simple_oauth (0.3.1)
-    sinatra (1.4.5)
-      rack (~> 1.4)
-      rack-protection (~> 1.4)
-      tilt (~> 1.3, >= 1.3.4)
-    slop (3.6.0)
-    snmp (1.2.0)
-    spoon (0.0.4)
-      ffi
-    statsd-ruby (1.2.0)
-    stud (0.0.18)
-    thread_safe (0.3.4-java)
-    tilt (1.4.1)
-    treetop (1.4.15)
-      polyglot
-      polyglot (>= 0.3.1)
-    twitter (5.12.0)
-      addressable (~> 2.3)
-      buftok (~> 0.2.0)
-      equalizer (~> 0.0.9)
-      faraday (~> 0.9.0)
-      http (~> 0.6.0)
-      http_parser.rb (~> 0.6.0)
-      json (~> 1.8)
-      memoizable (~> 0.4.0)
-      naught (~> 1.0)
-      simple_oauth (~> 0.3.0)
-    tzinfo (1.2.2)
-      thread_safe (~> 0.1)
-    user_agent_parser (2.2.0)
-    virtus (1.0.4)
-      axiom-types (~> 0.1)
-      coercible (~> 1.0)
-      descendants_tracker (~> 0.0, >= 0.0.3)
-      equalizer (~> 0.0, >= 0.0.9)
-    xml-simple (1.1.4)
-    xmpp4r (0.5)
-
-PLATFORMS
-  java
-
-DEPENDENCIES
-  logstash!
-  logstash-codec-collectd
-  logstash-codec-dots
-  logstash-codec-edn
-  logstash-codec-edn_lines
-  logstash-codec-es_bulk
-  logstash-codec-fluent
-  logstash-codec-graphite
-  logstash-codec-json
-  logstash-codec-json_lines
-  logstash-codec-line
-  logstash-codec-msgpack
-  logstash-codec-multiline
-  logstash-codec-netflow
-  logstash-codec-oldlogstashjson
-  logstash-codec-plain
-  logstash-codec-rubydebug
-  logstash-filter-anonymize
-  logstash-filter-checksum
-  logstash-filter-clone
-  logstash-filter-csv
-  logstash-filter-date
-  logstash-filter-dns
-  logstash-filter-drop
-  logstash-filter-fingerprint
-  logstash-filter-geoip
-  logstash-filter-grok
-  logstash-filter-json
-  logstash-filter-kv
-  logstash-filter-metrics
-  logstash-filter-multiline
-  logstash-filter-mutate
-  logstash-filter-ruby
-  logstash-filter-sleep
-  logstash-filter-split
-  logstash-filter-syslog_pri
-  logstash-filter-throttle
-  logstash-filter-urldecode
-  logstash-filter-useragent
-  logstash-filter-uuid
-  logstash-filter-xml
-  logstash-input-couchdb_changes
-  logstash-input-elasticsearch
-  logstash-input-eventlog
-  logstash-input-exec
-  logstash-input-file
-  logstash-input-ganglia
-  logstash-input-gelf
-  logstash-input-generator
-  logstash-input-graphite
-  logstash-input-imap
-  logstash-input-irc
-  logstash-input-kafka
-  logstash-input-log4j
-  logstash-input-lumberjack
-  logstash-input-pipe
-  logstash-input-rabbitmq
-  logstash-input-redis
-  logstash-input-s3
-  logstash-input-snmptrap
-  logstash-input-sqs
-  logstash-input-stdin
-  logstash-input-syslog
-  logstash-input-tcp
-  logstash-input-twitter
-  logstash-input-udp
-  logstash-input-unix
-  logstash-input-xmpp
-  logstash-input-zeromq
-  logstash-output-cloudwatch
-  logstash-output-csv
-  logstash-output-elasticsearch
-  logstash-output-email
-  logstash-output-exec
-  logstash-output-file
-  logstash-output-ganglia
-  logstash-output-gelf
-  logstash-output-graphite
-  logstash-output-hipchat
-  logstash-output-http
-  logstash-output-irc
-  logstash-output-juggernaut
-  logstash-output-kafka
-  logstash-output-lumberjack
-  logstash-output-nagios
-  logstash-output-nagios_nsca
-  logstash-output-null
-  logstash-output-opentsdb
-  logstash-output-pagerduty
-  logstash-output-pipe
-  logstash-output-rabbitmq
-  logstash-output-redis
-  logstash-output-s3
-  logstash-output-sns
-  logstash-output-sqs
-  logstash-output-statsd
-  logstash-output-stdout
-  logstash-output-tcp
-  logstash-output-udp
-  logstash-output-xmpp
-  logstash-output-zeromq
diff --git a/tools/Gemfile.plugins.test b/tools/Gemfile.plugins.test
deleted file mode 100644
index 915b16054d7..00000000000
--- a/tools/Gemfile.plugins.test
+++ /dev/null
@@ -1,27 +0,0 @@
-require 'rakelib/default_plugins'
-
-source 'https://rubygems.org'
-
-gemspec :name => "logstash", :path => File.expand_path(File.join(File.dirname(__FILE__), ".."))
-
-##
-# Install a set of plugins that are necessary for testing purpouses.
-##
-
-plugins = [ 'logstash-filter-clone',
-            'logstash-filter-mutate',
-            'logstash-input-generator',
-            'logstash-input-stdin',
-            'logstash-input-tcp',
-            'logstash-output-stdout']
-
-plugins.each do |plugin|
-  gem plugin
-end
-
-##
-# Dependencies related with coverage analysis
-##
-
-gem 'simplecov'
-gem 'coveralls'
diff --git a/tools/Gemfile.plugins.test.jruby-1.9.lock b/tools/Gemfile.plugins.test.jruby-1.9.lock
deleted file mode 100644
index 14c97fbfc16..00000000000
--- a/tools/Gemfile.plugins.test.jruby-1.9.lock
+++ /dev/null
@@ -1,168 +0,0 @@
-PATH
-  remote: /Users/ph/es/logstash
-  specs:
-    logstash (2.0.0.dev-java)
-      cabin (>= 0.7.0)
-      ci_reporter (= 1.9.3)
-      clamp
-      file-dependencies
-      filesize
-      ftw (~> 0.0.40)
-      i18n (= 0.6.9)
-      jar-dependencies (= 0.1.7)
-      jrjackson
-      jruby-httpclient
-      logstash-devutils
-      maven-tools
-      mime-types
-      minitar
-      pry
-      rack
-      rspec (~> 2.14.0)
-      ruby-maven
-      sinatra
-      stud
-      treetop (~> 1.4.0)
-
-GEM
-  remote: https://rubygems.org/
-  specs:
-    addressable (2.3.6)
-    axiom-types (0.1.1)
-      descendants_tracker (~> 0.0.4)
-      ice_nine (~> 0.11.0)
-      thread_safe (~> 0.3, >= 0.3.1)
-    backports (3.6.4)
-    builder (3.2.2)
-    cabin (0.7.1)
-    ci_reporter (1.9.3)
-      builder (>= 2.1.2)
-    clamp (0.6.3)
-    coderay (1.1.0)
-    coercible (1.0.0)
-      descendants_tracker (~> 0.0.1)
-    descendants_tracker (0.0.4)
-      thread_safe (~> 0.3, >= 0.3.1)
-    diff-lcs (1.2.5)
-    equalizer (0.0.9)
-    ffi (1.9.6-java)
-    file-dependencies (0.1.4)
-      minitar
-    filesize (0.0.4)
-    ftw (0.0.42)
-      addressable
-      backports (>= 2.6.2)
-      cabin (> 0)
-      http_parser.rb (~> 0.6)
-    gem_publisher (1.5.0)
-    http_parser.rb (0.6.0-java)
-    i18n (0.6.9)
-    ice_nine (0.11.1)
-    insist (1.0.0)
-    jar-dependencies (0.1.7)
-    jls-grok (0.11.0)
-      cabin (>= 0.6.0)
-    jrjackson (0.2.8)
-    jruby-httpclient (1.1.1-java)
-    logstash-codec-json (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-json_lines (0.1.5)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-codec-line (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-codec-plain (0.1.3)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-devutils (0.0.7-java)
-      gem_publisher
-      insist (= 1.0.0)
-      jar-dependencies
-      minitar
-      rake
-    logstash-filter-clone (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-    logstash-filter-grok (0.1.2)
-      jls-grok (= 0.11.0)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-patterns-core
-    logstash-filter-mutate (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-filter-grok
-      logstash-patterns-core
-    logstash-input-generator (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-plain
-    logstash-input-stdin (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-    logstash-input-tcp (0.1.1)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-json
-      logstash-codec-json_lines
-      logstash-codec-line
-      logstash-codec-plain
-    logstash-output-stdout (0.1.2)
-      logstash (>= 1.4.0, < 2.0.0)
-      logstash-codec-line
-    logstash-patterns-core (0.1.4)
-      logstash (>= 1.4.0, < 2.0.0)
-    maven-tools (1.0.7)
-      virtus (~> 1.0)
-    method_source (0.8.2)
-    mime-types (2.4.3)
-    minitar (0.5.4)
-    polyglot (0.3.5)
-    pry (0.10.1-java)
-      coderay (~> 1.1.0)
-      method_source (~> 0.8.1)
-      slop (~> 3.4)
-      spoon (~> 0.0)
-    rack (1.6.0)
-    rack-protection (1.5.3)
-      rack
-    rake (10.4.2)
-    rspec (2.14.1)
-      rspec-core (~> 2.14.0)
-      rspec-expectations (~> 2.14.0)
-      rspec-mocks (~> 2.14.0)
-    rspec-core (2.14.8)
-    rspec-expectations (2.14.5)
-      diff-lcs (>= 1.1.3, < 2.0)
-    rspec-mocks (2.14.6)
-    ruby-maven (3.1.1.0.8)
-      maven-tools (~> 1.0.1)
-      ruby-maven-libs (= 3.1.1)
-    ruby-maven-libs (3.1.1)
-    sinatra (1.4.5)
-      rack (~> 1.4)
-      rack-protection (~> 1.4)
-      tilt (~> 1.3, >= 1.3.4)
-    slop (3.6.0)
-    spoon (0.0.4)
-      ffi
-    stud (0.0.18)
-    thread_safe (0.3.4-java)
-    tilt (1.4.1)
-    treetop (1.4.15)
-      polyglot
-      polyglot (>= 0.3.1)
-    virtus (1.0.4)
-      axiom-types (~> 0.1)
-      coercible (~> 1.0)
-      descendants_tracker (~> 0.0, >= 0.0.3)
-      equalizer (~> 0.0, >= 0.0.9)
-
-PLATFORMS
-  java
-
-DEPENDENCIES
-  logstash!
-  logstash-filter-clone
-  logstash-filter-mutate
-  logstash-input-generator
-  logstash-input-stdin
-  logstash-input-tcp
-  logstash-output-stdout
diff --git a/tools/patches/jar_installer.rb b/tools/patches/jar_installer.rb
new file mode 100644
index 00000000000..56d00c7c82c
--- /dev/null
+++ b/tools/patches/jar_installer.rb
@@ -0,0 +1,279 @@
+require 'jar_dependencies'
+require 'uri'
+module Jars
+  class JarInstaller
+
+    class Dependency
+
+      attr_reader :path, :file, :gav, :scope, :type, :coord
+
+      def self.new( line )
+        if line.match /:jar:|:pom:/
+          super
+        end
+      end
+
+      def setup_type( line )
+        if line.match /:pom:/
+          @type = :pom
+        elsif line.match /:jar:/
+          @type = :jar
+        end
+      end
+      private :setup_type
+
+      def setup_scope( line )
+        @scope =
+          case line
+          when /:provided:/
+            :provided
+          when /:test:/
+            :test
+          else
+            :runtime
+          end
+      end
+      private :setup_scope
+
+      def initialize( line )
+        setup_type( line )
+
+        line.sub!( /^\s+/, '' )
+        @coord = line.sub( /:[^:]+:([A-Z]:\\)?[^:]+$/, '' )
+        first, second = @coord.split( /:#{type}:/ )
+        group_id, artifact_id = first.split( /:/ )
+        parts = group_id.split( '.' )
+        parts << artifact_id
+        parts << second.split( /:/ )[ -1 ]
+        parts << File.basename( line.sub /.:/, '' )
+        @path = File.join( parts ).strip
+
+        setup_scope( line )
+
+        reg = /:jar:|:pom:|:test:|:compile:|:runtime:|:provided:|:system:/
+        @file = line.slice(@coord.length, line.length).sub(reg, '').strip
+        @system = nil != (line =~ /:system:/)
+        @gav = @coord.sub(reg, ':')
+      end
+
+      def system?
+        @system
+      end
+    end
+
+    def self.install_jars( write_require_file = false )
+      new.install_jars( write_require_file )
+    end
+
+    def self.vendor_jars( write_require_file = false )
+      new.vendor_jars( write_require_file )
+    end
+
+    def self.load_from_maven( file )
+      result = []
+      File.read( file ).each_line do |line|
+        dep = Dependency.new( line )
+        result << dep if dep
+      end
+      result
+    end
+
+    def self.write_require_file( require_filename )
+      FileUtils.mkdir_p( File.dirname( require_filename ) )
+      comment = '# this is a generated file, to avoid over-writing it just delete this comment'
+      if ! File.exists?( require_filename ) || File.read( require_filename ).match( comment )
+        f = File.open( require_filename, 'w' )
+        f.puts comment
+        f.puts "require 'jar_dependencies'"
+        f.puts
+        f
+      end
+    end
+
+    def self.vendor_file( dir, dep )
+      vendored = File.join( dir, dep.path )
+      FileUtils.mkdir_p( File.dirname( vendored ) )
+      FileUtils.cp( dep.file, vendored ) unless dep.system?
+    end
+
+    def self.write_dep( file, dir, dep, vendor )
+      return if dep.type != :jar || dep.scope != :runtime
+      if dep.system?
+        file.puts( "require( '#{dep.file}' )" ) if file
+      elsif dep.scope == :runtime
+        vendor_file( dir, dep ) if vendor
+        file.puts( "require_jar( '#{dep.gav.gsub( /:/, "', '" )}' )" ) if file
+      end
+    end
+
+    def self.install_deps( deps, dir, require_filename, vendor )
+      f = write_require_file( require_filename ) if require_filename
+      deps.each do |dep|
+        write_dep( f, dir, dep, vendor )
+      end
+      yield f if block_given? and f
+    ensure
+      f.close if f
+    end
+
+    def find_spec( allow_no_file )
+      specs = Dir[ '*.gemspec' ]
+      case specs.size
+      when 0
+        raise 'no gemspec found' unless allow_no_file
+      when 1
+        specs.first
+      else
+        raise 'more then one gemspec found. please specify a specfile' unless allow_no_file
+      end
+    end
+    private :find_spec
+
+    def initialize( spec = nil )
+      setup( spec )
+    end
+
+    def setup( spec = nil, allow_no_file = false )
+      spec ||= find_spec( allow_no_file )
+
+      case spec
+      when String
+        @specfile = File.expand_path( spec )
+        @basedir = File.dirname( @specfile )
+        spec =  eval( File.read( spec ) )
+      when Gem::Specification
+        if File.exists?( spec.spec_file )
+          @basedir = spec.gem_dir
+          @specfile = spec.spec_file
+        else
+          # this happens with bundle and local gems
+          # there the spec_file is "not installed" but inside
+          # the gem_dir directory
+          Dir.chdir( spec.gem_dir ) do
+            setup( nil, true )
+          end
+        end
+      when NilClass
+      else
+        raise 'spec must be either String or Gem::Specification'
+      end
+
+      @spec = spec
+    rescue
+      # for all those strange gemspec we skip looking for jar-dependencies
+    end
+
+    def ruby_maven_install_options=( options )
+      @options = options.dup
+      @options.delete( :ignore_dependencies )
+    end
+
+    def vendor_jars( write_require_file = true )
+      return unless has_jars?
+      # do not vendor only if set explicitly via ENV/system-properties
+      do_install( Jars.to_prop( Jars::VENDOR ) != 'false', write_require_file )
+    end
+
+    def install_jars( write_require_file = true )
+      return unless has_jars?
+      do_install( false, write_require_file )
+    end
+
+    private
+
+    def has_jars?
+      # first look if there are any requirements in the spec
+      # and then if gem depends on jar-dependencies
+      # only then install the jars declared in the requirements
+      ! @spec.requirements.empty? && @spec.dependencies.detect { |d| d.name == 'jar-dependencies' && d.type == :runtime }
+    end
+
+    def do_install( vendor, write_require_file )
+      vendor_dir = File.join( @basedir, @spec.require_path )
+      jars_file = File.join( vendor_dir, "#{@spec.name}_jars.rb" )
+
+      # write out new jars_file it write_require_file is true or
+      # check timestamps:
+      # do not generate file if specfile is older then the generated file
+      if ! write_require_file &&
+          File.exists?( jars_file ) &&
+          File.mtime( @specfile ) < File.mtime( jars_file )
+        # leave jars_file as is
+        jars_file = nil
+      end
+      self.class.install_deps( install_dependencies, vendor_dir,
+                               jars_file, vendor )
+    end
+
+    def setup_arguments( deps )
+      args = [ 'dependency:list', "-DoutputFile=#{deps}", '-DoutputAbsoluteArtifactFilename=true', '-DincludeTypes=jar', '-DoutputScope=true', '-f', @specfile ]
+
+      if Jars.debug?
+        args << '-X'
+      elsif not Jars.verbose?
+        args << '--quiet'
+      end
+
+      if Jars.maven_user_settings.nil? && (proxy = Gem.configuration[ :proxy ]).is_a?( String )
+        uri = URI.parse( proxy )
+        args << "-DproxySet=true"
+        args << "-DproxyHost=#{uri.host}"
+        args << "-DproxyPort=#{uri.port}"
+      end
+
+      if defined? JRUBY_VERSION
+        args << "-Dmaven.repo.local=#{java.io.File.new( Jars.home ).absolute_path}"
+      else
+        args << "-Dmaven.repo.local=#{File.expand_path( Jars.home )}"
+      end
+
+      args
+    end
+
+    def lazy_load_maven
+      require 'maven/ruby/maven'
+    rescue LoadError
+      install_ruby_maven
+      require 'maven/ruby/maven'
+    end
+
+    def install_ruby_maven
+      require 'rubygems/dependency_installer'
+      jars = Gem.loaded_specs[ 'jar-dependencies' ]
+      dep = jars.dependencies.detect { |d| d.name == 'ruby-maven' }
+      req = dep.nil? ? Gem::Requirement.create( '>0' ) : dep.requirement
+      inst = Gem::DependencyInstaller.new( @options || {} )
+      inst.install 'ruby-maven', req
+    rescue => e
+      warn e.backtrace.join( "\n" ) if Jars.verbose?
+      raise "there was an error installing 'ruby-maven'. please install it manually: #{e.inspect}"
+    end
+
+    def monkey_patch_gem_dependencies
+      # monkey patch to NOT include gem dependencies
+      require 'maven/tools/gemspec_dependencies'
+      eval <<EOF
+      class ::Maven::Tools::GemspecDependencies
+        def runtime; []; end
+        def development; []; end
+      end
+EOF
+    end
+
+    def install_dependencies
+      lazy_load_maven
+
+      monkey_patch_gem_dependencies
+
+      deps = File.join( @basedir, 'deps.lst' )
+
+      maven = Maven::Ruby::Maven.new
+      maven.verbose = Jars.verbose?
+      maven.exec( *setup_arguments( deps ) )
+
+      self.class.load_from_maven( deps )
+    ensure
+      FileUtils.rm_f( deps ) if deps
+    end
+  end
+end
