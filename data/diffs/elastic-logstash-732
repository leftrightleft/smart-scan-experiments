diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index e0e8690c558..32cd210139c 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -32,6 +32,17 @@ class LogStash::Outputs::Base < LogStash::Plugin
   # Note that this setting may not be useful for all outputs.
   config :workers, :validate => :number, :default => 1
 
+  public
+  def workers_not_supported(message=nil)
+    return if @workers == 1
+    if message
+      @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported-with-message", :plugin => self.class.config_name, :worker_count => @workers, :message => message))
+    else
+      @logger.warn(I18n.t("logstash.pipeline.output-worker-unsupported", :plugin => self.class.config_name, :worker_count => @workers))
+    end
+    @workers = 1
+  end
+
   public
   def initialize(params={})
     super
@@ -50,8 +61,9 @@ def receive(event)
 
   public
   def worker_setup
-    #return unless @workers > 1
+    return unless @workers > 1
 
+    define_singleton_method(:handle, method(:handle_worker))
     @worker_queue = SizedQueue.new(20)
 
     @worker_threads = @workers.times do |i|
@@ -62,7 +74,7 @@ def worker_setup
         worker_plugin.register
         while true
           event = queue.pop
-          worker_plugin.receive(event)
+          worker_plugin.handle(event)
         end
       end
     end
@@ -70,11 +82,7 @@ def worker_setup
 
   public
   def handle(event)
-    #if @worker_queue
-      handle_worker(event)
-    #else
-      #receive(event)
-    #end
+    receive(event)
   end # def handle
   
   def handle_worker(event)
diff --git a/lib/logstash/outputs/file.rb b/lib/logstash/outputs/file.rb
index 1185601ab4a..fab057ff897 100644
--- a/lib/logstash/outputs/file.rb
+++ b/lib/logstash/outputs/file.rb
@@ -45,6 +45,9 @@ class LogStash::Outputs::File < LogStash::Outputs::Base
   public
   def register
     require "fileutils" # For mkdir_p
+
+    workers_not_supported
+
     @files = {}
     now = Time.now
     @last_flush_cycle = now
diff --git a/lib/logstash/outputs/tcp.rb b/lib/logstash/outputs/tcp.rb
index da24f1ecd86..b57cc95eb96 100644
--- a/lib/logstash/outputs/tcp.rb
+++ b/lib/logstash/outputs/tcp.rb
@@ -69,6 +69,8 @@ def write(msg)
   def register
     require "stud/try"
     if server?
+      workers_not_supported
+
       @logger.info("Starting tcp output listener", :address => "#{@host}:#{@port}")
       @server_socket = TCPServer.new(@host, @port)
       @client_threads = []
diff --git a/lib/logstash/outputs/zeromq.rb b/lib/logstash/outputs/zeromq.rb
index 303791a3663..92ea5c619ae 100644
--- a/lib/logstash/outputs/zeromq.rb
+++ b/lib/logstash/outputs/zeromq.rb
@@ -62,6 +62,10 @@ def register
     require "logstash/util/zeromq"
     self.class.send(:include, LogStash::Util::ZeroMQ)
 
+    if @mode == "server"
+      workers_not_supported("With 'mode => server', only one zeromq socket may bind to a port and may not be shared among threads. Going to single-worker mode for this plugin!")
+    end
+
     # Translate topology shorthand to socket types
     case @topology
     when "pair"
@@ -106,7 +110,7 @@ def receive(event)
   end # def receive
 
   def publish(payload)
-    @logger.debug("0mq: sending", :event => payload)
+    @logger.debug? && @logger.debug("0mq: sending", :event => payload)
     if @topology == "pubsub"
       # TODO(sissel): Need to figure out how to fit this into the codecs system.
       #@logger.debug("0mq output: setting topic to: #{event.sprintf(@topic)}")
diff --git a/locales/en.yml b/locales/en.yml
index 3b590568296..4db042f9990 100644
--- a/locales/en.yml
+++ b/locales/en.yml
@@ -35,6 +35,14 @@ en:
       plugin-type-loading-error: >-
         Could not find any plugin type named '%{type}'. Check for typos.
         Valid plugin types are 'input' 'filter' and 'output'
+      output-worker-unsupported: >-
+        %{plugin} output plugin: setting 'workers => %{worker_count}' is not
+        supported by this plugin. I will continue working as if you had not set
+        this setting.
+      output-worker-unsupported-with-message: >-
+        %{plugin} output plugin: setting 'workers => %{worker_count}' is not
+        supported by this plugin. I will continue working as if you had not set
+        this setting.
     plugin:
       milestone:
         "0": >-
