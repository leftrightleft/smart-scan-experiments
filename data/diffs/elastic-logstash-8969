diff --git a/logstash-core/lib/logstash/event.rb b/logstash-core/lib/logstash/event.rb
index d6c68e6e3d6..52d71be3f58 100644
--- a/logstash-core/lib/logstash/event.rb
+++ b/logstash-core/lib/logstash/event.rb
@@ -2,7 +2,6 @@
 
 require "logstash/namespace"
 require "logstash/json"
-require "logstash/timestamp"
 
 # transient pipeline events for normal in-flow signaling as opposed to
 # flow altering exceptions. for now having base classes is adequate and
diff --git a/logstash-core/lib/logstash/timestamp.rb b/logstash-core/lib/logstash/timestamp.rb
index a8eac5f083f..60f9a95db7a 100644
--- a/logstash-core/lib/logstash/timestamp.rb
+++ b/logstash-core/lib/logstash/timestamp.rb
@@ -1,25 +1,2 @@
-# encoding: utf-8
-
-require "logstash/namespace"
-
-module LogStash
-
-  class Timestamp
-    include Comparable
-
-    def eql?(other)
-      self.== other
-    end
-
-    # TODO (colin) implement in Java
-    def +(other)
-      self.time + other
-    end
-
-    # TODO (colin) implement in Java
-    def -(value)
-      self.time - (value.is_a?(Timestamp) ? value.time : value)
-    end
-
-  end
-end
+# The contents of this file have been ported to Java. It is included for for compatibility
+# with plugins that directly require "logstash/timestamp".
diff --git a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
index b1208e270ea..512bfe8fba2 100644
--- a/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
+++ b/logstash-core/spec/logstash/legacy_ruby_timestamp_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "spec_helper"
-require "logstash/timestamp"
 require "bigdecimal"
 
 describe LogStash::Timestamp do
diff --git a/logstash-core/spec/logstash/timestamp_spec.rb b/logstash-core/spec/logstash/timestamp_spec.rb
index d0a7522d2d3..ea9d7a7e153 100644
--- a/logstash-core/spec/logstash/timestamp_spec.rb
+++ b/logstash-core/spec/logstash/timestamp_spec.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 
 require "spec_helper"
-require "logstash/timestamp"
 
 describe LogStash::Timestamp do
   context "constructors" do
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
index 93f4f83f230..49c98671a6a 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import org.jruby.Ruby;
 import org.jruby.RubyClass;
+import org.jruby.RubyComparable;
 import org.jruby.RubyFixnum;
 import org.jruby.RubyFloat;
 import org.jruby.RubyObject;
@@ -21,7 +22,7 @@
 
 public final class JrubyTimestampExtLibrary {
 
-    @JRubyClass(name = "Timestamp")
+    @JRubyClass(name = "Timestamp", include = "Comparable")
     @JsonSerialize(using = ObjectMappers.RubyTimestampSerializer.class)
     public static final class RubyTimestamp extends RubyObject {
 
@@ -231,6 +232,62 @@ public IRubyObject op_cmp(final ThreadContext context, final IRubyObject other)
             return context.nil;
         }
 
+        @JRubyMethod(name = ">=")
+        public IRubyObject op_ge(final ThreadContext context, final IRubyObject other) {
+            if (other instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
+                return context.runtime.newBoolean(compare(context, other) >= 0);
+            }
+            return RubyComparable.op_ge(context, this, other);
+        }
+
+        @JRubyMethod(name = ">")
+        public IRubyObject op_gt(final ThreadContext context, final IRubyObject other) {
+            if (other instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
+                return context.runtime.newBoolean(compare(context, other) > 0);
+            }
+            return RubyComparable.op_gt(context, this, other);
+        }
+
+        @JRubyMethod(name = "<=")
+        public IRubyObject op_le(final ThreadContext context, final IRubyObject other) {
+            if (other instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
+                return context.runtime.newBoolean(compare(context, other) <= 0);
+            }
+            return RubyComparable.op_le(context, this, other);
+        }
+
+        @JRubyMethod(name = "<")
+        public IRubyObject op_lt(final ThreadContext context, final IRubyObject other) {
+            if (other instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
+                return context.runtime.newBoolean(compare(context, other) < 0);
+            }
+            return RubyComparable.op_lt(context, this, other);
+        }
+
+        @JRubyMethod(name = {"eql?", "=="}, required = 1)
+        public IRubyObject eql(final ThreadContext context, final IRubyObject other) {
+            return this == other || other.getClass() == JrubyTimestampExtLibrary.RubyTimestamp.class
+                && timestamp.equals(((JrubyTimestampExtLibrary.RubyTimestamp) other).timestamp)
+                ? context.tru : context.fals;
+        }
+
+        @JRubyMethod(name = "+", required = 1)
+        public IRubyObject plus(final ThreadContext context, final IRubyObject val) {
+            return this.ruby_time(context).callMethod(context, "+", val);
+        }
+
+        @JRubyMethod(name = "-", required = 1)
+        public IRubyObject minus(final ThreadContext context, final IRubyObject val) {
+            return this.ruby_time(context).callMethod(
+                context, "-",
+                val instanceof RubyTimestamp ? ((RubyTimestamp)val).ruby_time(context) : val
+            );
+        }
+
+        private int compare(final ThreadContext context, final IRubyObject other) {
+            return op_cmp(context, other).convertToInteger().getIntValue();
+        }
+
         private static RubyTimestamp fromRString(final Ruby runtime, final RubyString string) {
             return RubyTimestamp.newRubyTimestamp(runtime, new Timestamp(string.toString()));
         }
