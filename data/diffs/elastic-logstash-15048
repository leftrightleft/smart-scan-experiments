diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 0621fb94c7a..1ca099a9fe2 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
@@ -163,15 +164,15 @@ public boolean isCancelled() {
     public Instant getEventTimestamp() {
         Timestamp t = getTimestamp();
         return (t != null)
-                ? Instant.ofEpochMilli(t.toEpochMilli())
+                ? t.toInstant()
                 : null;
     }
 
     @Override
-    public void setEventTimestamp(Instant timestamp) {
+    public void setEventTimestamp(final Instant timestamp) {
         setTimestamp(timestamp != null
-                ? new Timestamp(timestamp.toEpochMilli())
-                : new Timestamp(Instant.now().toEpochMilli()));
+                ? new Timestamp(timestamp)
+                : new Timestamp(Instant.now()));
     }
 
     public Timestamp getTimestamp() {
@@ -462,6 +463,10 @@ private static Timestamp parseTimestamp(final Object o) {
                 return ((JrubyTimestampExtLibrary.RubyTimestamp) o).getTimestamp();
             } else if (o instanceof Timestamp) {
                 return (Timestamp) o;
+            } else if (o instanceof Instant) {
+                return new Timestamp((Instant) o);
+            } else if (o instanceof ZonedDateTime) {
+                return new Timestamp(((ZonedDateTime) o).toInstant());
             } else if (o instanceof DateTime) {
                 return new Timestamp((DateTime) o);
             } else if (o instanceof Date) {
diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index 16ebd68a8b7..89e7a96e4cf 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -22,6 +22,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.Instant;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.ZonedDateTime;
@@ -201,6 +202,11 @@ RubyUtil.RUBY, new Timestamp(((LocalDateTime) input).toInstant(ZoneOffset.UTC))
                         RubyUtil.RUBY, new Timestamp(((ZonedDateTime) input).toInstant())
                 )
         );
+        converters.put(
+                Instant.class, input -> JrubyTimestampExtLibrary.RubyTimestamp.newRubyTimestamp(
+                        RubyUtil.RUBY, new Timestamp((Instant) input)
+                )
+        );
         return converters;
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index d326e7a4432..bd5780ef91d 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -23,6 +23,8 @@
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -37,8 +39,14 @@
 import org.junit.Test;
 
 import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
+import static org.hamcrest.CoreMatchers.allOf;
+import static org.hamcrest.CoreMatchers.both;
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
@@ -230,6 +238,56 @@ public void testTimestampFieldToJson() throws Exception {
         );
     }
 
+    @Test
+    public void testEventTimestampConstructorStringValueRetainsNanoResolution() {
+        final String iso8601TimestampWithNanos = "2023-05-10T21:43:08.726162941Z";
+        Event e = new Event(Map.of("@timestamp", iso8601TimestampWithNanos));
+
+        assertEquals("iso8601 string in Event#new(Map) retains precision", e.getEventTimestamp(), Instant.parse(iso8601TimestampWithNanos));
+    }
+
+    @Test
+    public void testEventTimestampConstructorInstantValueRetainsNanoResolution() {
+        final Instant givenInstant = Instant.parse("2023-05-10T21:43:08.726162941Z");
+        Event e = new Event(Map.of("@timestamp", givenInstant));
+
+        assertEquals("iso8601 string in Event#new(Map) retains precision", e.getEventTimestamp(), givenInstant);
+    }
+
+    @Test
+    public void testEventTimestampConstructorZonedDateTimeValueRetainsNanoResolution() {
+        final ZonedDateTime zonedDateTime = ZonedDateTime.parse("2023-05-10T21:43:08.726162941Z");
+        Event e = new Event(Map.of("@timestamp", zonedDateTime));
+
+        assertEquals("iso8601 string in Event#new(Map) retains precision", e.getEventTimestamp(), zonedDateTime.toInstant());
+    }
+
+    @Test
+    public void testEventTimestampSetterRetainsNanoResolution() {
+        Event e = new Event(Map.of("@timestamp", "2000-01-01T00:00:00.000Z"));
+
+        final Instant updatedTimestamp = Instant.parse("2023-05-10T21:43:08.726162941Z");
+        e.setEventTimestamp(updatedTimestamp);
+
+        assertThat(e.getEventTimestamp(), is(equalTo(updatedTimestamp)));
+    }
+
+    @Test
+    public void testEventTimestampSetterDefaultsToNow() {
+        Event e = new Event(Map.of("@timestamp", "2000-01-01T00:00:00.000Z"));
+
+        final Instant baseline = Instant.now();
+        e.setEventTimestamp(null);
+
+        final Instant updatedTimestamp = e.getEventTimestamp();
+        assertThat(updatedTimestamp, allOf(
+                is(notNullValue()),
+                both(greaterThanOrEqualTo(baseline)).and(lessThanOrEqualTo(Instant.now()))
+        ));
+
+        assertThat("a set-with-null timestamp is actually set", e.getEventTimestamp(), is(equalTo(updatedTimestamp)));
+    }
+
     @Test
     public void testBooleanFieldToJson() throws Exception {
         Event e = new Event();
