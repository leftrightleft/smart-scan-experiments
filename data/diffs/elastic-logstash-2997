diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index 70871dcccff..b9b83944f64 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -176,8 +176,14 @@ def overwrite(event)
   end
 
   public
-  def include?(key)
-    return !self[key].nil?
+  def include?(fieldref)
+    if fieldref.start_with?(METADATA_BRACKETS)
+      @metadata_accessors.include?(fieldref[METADATA_BRACKETS.length .. -1])
+    elsif fieldref == METADATA
+      true
+    else
+      @accessors.include?(fieldref)
+    end
   end # def include?
 
   # Append an event to this one.
diff --git a/lib/logstash/util/accessors.rb b/lib/logstash/util/accessors.rb
index ce1553da6c6..9f1e6d6faec 100644
--- a/lib/logstash/util/accessors.rb
+++ b/lib/logstash/util/accessors.rb
@@ -53,6 +53,11 @@ def del(accessor)
       end
     end
 
+    def include?(accessor)
+      target, key = lookup_path(accessor)
+      return target.include?(key)
+    end
+
     private
 
     def lookup(accessor)
diff --git a/spec/core/event_spec.rb b/spec/core/event_spec.rb
index 80343004a2d..f11c1c281bd 100644
--- a/spec/core/event_spec.rb
+++ b/spec/core/event_spec.rb
@@ -22,6 +22,7 @@
           5 => 6,
           "5" => 7
       },
+      "nilfield" => nil,
       "@metadata" => { "fancy" => "pants", "have-to-go" => { "deeper" => "inception" } }
     )
   end
@@ -138,6 +139,30 @@
     end
   end
 
+  context "#include?" do
+    it "should include existing fields" do
+      expect(subject.include?("c")).to be_true
+      expect(subject.include?("[c][d]")).to be_true
+    end
+
+    it "should include field with nil value" do
+      expect(subject.include?("nilfield")).to be_true
+    end
+
+    it "should include @metadata field" do
+      expect(subject.include?("@metadata")).to be_true
+    end
+
+    it "should include field within @metadata" do
+      expect(subject.include?("[@metadata][fancy]")).to be_true
+    end
+
+    it "should not include non-existing fields" do
+      expect(subject.include?("doesnotexist")).to be_false
+      expect(subject.include?("[j][doesnotexist]")).to be_false
+    end
+  end
+
   context "#overwrite" do
     it "should swap data with new content" do
       new_event = LogStash::Event.new(
