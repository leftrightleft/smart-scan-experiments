diff --git a/lib/logstash/filters/metrics.rb b/lib/logstash/filters/metrics.rb
index 22ca17e67d6..14a585ab2ca 100644
--- a/lib/logstash/filters/metrics.rb
+++ b/lib/logstash/filters/metrics.rb
@@ -129,12 +129,22 @@ class LogStash::Filters::Metrics < LogStash::Filters::Base
   # Otherwise, should be a multiple of 5s.
   config :clear_interval, :validate => :number, :default => -1
 
+  # The rates that should be measured, in minutes.
+  # Possible values are 1, 5, and 15.
+  config :rates, :validate => :array, :default => [1, 5, 15]
+
+  # The percentiles that should be measured
+  config :percentiles, :validate => :array, :default => [1, 5, 10, 90, 95, 99, 100]
+
   def register
     require "metriks"
     require "socket"
     @last_flush = 0 # how many seconds ago the metrics where flushed.
     @last_clear = 0 # how many seconds ago the metrics where cleared.
     @random_key_preffix = SecureRandom.hex
+    unless (@rates - [1, 5, 15]).empty?
+      raise LogStash::ConfigurationError, "Invalid rates configuration. possible rates are 1, 5, 15. Rates: #{rates}."
+    end
     initialize_metrics
   end # def register
 
@@ -168,19 +178,12 @@ def flush
     event = LogStash::Event.new
     event["message"] = Socket.gethostname
     @metric_meters.each do |name, metric|
-      event["#{name}.count"] = metric.count
-      event["#{name}.rate_1m"] = metric.one_minute_rate
-      event["#{name}.rate_5m"] = metric.five_minute_rate
-      event["#{name}.rate_15m"] = metric.fifteen_minute_rate
+      flush_rates event, name, metric
       metric.clear if should_clear?
     end
 
     @metric_timers.each do |name, metric|
-      event["#{name}.count"] = metric.count
-      event["#{name}.rate_1m"] = metric.one_minute_rate
-      event["#{name}.rate_5m"] = metric.five_minute_rate
-      event["#{name}.rate_15m"] = metric.fifteen_minute_rate
-
+      flush_rates event, name, metric
       # These 4 values are not sliding, so they probably are not useful.
       event["#{name}.min"] = metric.min
       event["#{name}.max"] = metric.max
@@ -188,14 +191,9 @@ def flush
       event["#{name}.stddev"] = metric.stddev ** 0.5
       event["#{name}.mean"] = metric.mean
 
-      # TODO(sissel): Maybe make this configurable?
-      #   percentiles => [ 0, 1, 5, 95 99 100 ]
-      event["#{name}.p1"] = metric.snapshot.value(0.01)
-      event["#{name}.p5"] = metric.snapshot.value(0.05)
-      event["#{name}.p10"] = metric.snapshot.value(0.10)
-      event["#{name}.p90"] = metric.snapshot.value(0.90)
-      event["#{name}.p95"] = metric.snapshot.value(0.95)
-      event["#{name}.p99"] = metric.snapshot.value(0.99)
+      @percentiles.each do |percentile|
+        event["#{name}.p#{percentile}"] = metric.snapshot.value(percentile / 100)
+      end
       metric.clear if should_clear?
     end
 
@@ -213,6 +211,13 @@ def flush
   end
 
   private
+  def flush_rates(event, name, metric)
+      event["#{name}.count"] = metric.count
+      event["#{name}.rate_1m"] = metric.one_minute_rate if @rates.include? 1
+      event["#{name}.rate_5m"] = metric.five_minute_rate if @rates.include? 5
+      event["#{name}.rate_15m"] = metric.fifteen_minute_rate if @rates.include? 15
+  end
+
   def initialize_metrics
     @metric_meters = Hash.new { |h,k| h[k] = Metriks.meter metric_key(k) }
     @metric_timers = Hash.new { |h,k| h[k] = Metriks.timer metric_key(k) }
diff --git a/spec/filters/metrics.rb b/spec/filters/metrics.rb
index eb38658a44b..de75c91701d 100644
--- a/spec/filters/metrics.rb
+++ b/spec/filters/metrics.rb
@@ -2,7 +2,7 @@
 
 describe LogStash::Filters::Metrics do
 
-  context "with basic config" do
+  context "with basic meter config" do
     context "when no events were received" do
       it "should not flush" do
         config = {"meter" => ["http.%{response}"]}
@@ -16,18 +16,28 @@
 
     context "when events are received" do
       context "on the first flush" do
-        it "should flush counts" do
+        subject {
           config = {"meter" => ["http.%{response}"]}
           filter = LogStash::Filters::Metrics.new config
           filter.register
           filter.filter LogStash::Event.new({"response" => 200})
           filter.filter LogStash::Event.new({"response" => 200})
           filter.filter LogStash::Event.new({"response" => 404})
+          filter.flush
+        }
 
-          events = filter.flush
-          insist { events.length } == 1
-          insist { events.first["http.200.count"] } == 2
-          insist { events.first["http.404.count"] } == 1
+        it "should flush counts" do
+          insist { subject.length } == 1
+          insist { subject.first["http.200.count"] } == 2
+          insist { subject.first["http.404.count"] } == 1
+        end
+
+        it "should include rates and percentiles" do
+          metrics = ["http.200.rate_1m", "http.200.rate_5m", "http.200.rate_15m",
+                     "http.404.rate_1m", "http.404.rate_5m", "http.404.rate_15m"]
+          metrics.each do |metric|
+            insist { subject.first }.include? metric
+          end
         end
       end
 
@@ -48,6 +58,29 @@
         end
       end
     end
+
+    context "when custom rates and percentiles are selected" do
+      context "on the first flush" do
+        subject {
+          config = {
+            "meter" => ["http.%{response}"],
+            "rates" => [1]
+          }
+          filter = LogStash::Filters::Metrics.new config
+          filter.register
+          filter.filter LogStash::Event.new({"response" => 200})
+          filter.filter LogStash::Event.new({"response" => 200})
+          filter.filter LogStash::Event.new({"response" => 404})
+          filter.flush
+        }
+
+        it "should include only the requested rates" do
+          rate_fields = subject.first.to_hash.keys.select {|field| field.start_with?("http.200.rate") }
+          insist { rate_fields.length } == 1
+          insist { rate_fields }.include? "http.200.rate_1m"
+        end
+      end
+    end
   end
 
   context "with multiple instances" do
@@ -75,6 +108,67 @@
     end
   end
 
+  context "with timer config" do
+    context "on the first flush" do
+      subject {
+        config = {"timer" => ["http.request_time", "request_time"]}
+        filter = LogStash::Filters::Metrics.new config
+        filter.register
+        filter.filter LogStash::Event.new({"request_time" => 1})
+        filter.filter LogStash::Event.new({"request_time" => 2})
+        filter.filter LogStash::Event.new({"request_time" => 3})
+        filter.flush
+      }
+
+      it "should flush counts" do
+        insist { subject.length } == 1
+        insist { subject.first["http.request_time.count"] } == 3
+      end
+
+      it "should include rates and percentiles" do
+        metrics = ["rate_1m", "rate_5m", "rate_15m", "p1", "p5", "p10", "p90", "p95", "p99"]
+        metrics.each do |metric|
+          insist { subject.first }.include? "http.request_time.#{metric}"
+        end
+      end
+    end
+  end
+
+  context "when custom rates and percentiles are selected" do
+    context "on the first flush" do
+      subject {
+        config = {
+          "timer" => ["http.request_time", "request_time"],
+          "rates" => [1],
+          "percentiles" => [1, 2]
+        }
+        filter = LogStash::Filters::Metrics.new config
+        filter.register
+        filter.filter LogStash::Event.new({"request_time" => 1})
+        filter.flush
+      }
+
+      it "should flush counts" do
+        insist { subject.length } == 1
+        insist { subject.first["http.request_time.count"] } == 1
+      end
+
+      it "should include only the requested rates" do
+        rate_fields = subject.first.to_hash.keys.select {|field| field.start_with?("http.request_time.rate") }
+        insist { rate_fields.length } == 1
+        insist { rate_fields }.include? "http.request_time.rate_1m"
+      end
+
+      it "should include only the requested percentiles" do
+        percentile_fields = subject.first.to_hash.keys.select {|field| field.start_with?("http.request_time.p") }
+        insist { percentile_fields.length } == 2
+        insist { percentile_fields }.include? "http.request_time.p1"
+        insist { percentile_fields }.include? "http.request_time.p2"
+      end
+    end
+  end
+
+
   context "when a custom flush_interval is set" do
     it "should flush only when required" do
       config = {"meter" => ["http.%{response}"], "flush_interval" => 15}
@@ -105,4 +199,14 @@
     end
   end
 
+  context "when invalid rates are set" do
+    subject {
+      config = {"meter" => ["http.%{response}"], "rates" => [90]}
+      filter = LogStash::Filters::Metrics.new config
+    }
+
+    it "should raise an error" do
+      insist {subject.register }.raises(LogStash::ConfigurationError)
+    end
+  end
 end
