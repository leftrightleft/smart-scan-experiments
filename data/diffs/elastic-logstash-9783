diff --git a/logstash-core/src/main/java/org/logstash/common/FsUtil.java b/logstash-core/src/main/java/org/logstash/common/FsUtil.java
index 227a47489ae..062f84f97e5 100644
--- a/logstash-core/src/main/java/org/logstash/common/FsUtil.java
+++ b/logstash-core/src/main/java/org/logstash/common/FsUtil.java
@@ -21,28 +21,14 @@ private FsUtil() {
     private static final Logger logger = LogManager.getLogger(FsUtil.class);
 
     /**
-     * Checks if the request number of bytes of free disk space are available under the given
-     * path.
+     * Checks if the requested number of bytes of disk space are available under the given path.
      * @param path Directory to check
      * @param size Bytes of free space requested
-     * @return True iff the
-     * @throws IOException on failure to determine free space for given path's partition
+     * @return True iff the free space in the specified path meets or exceeds the requested space
      */
     public static boolean hasFreeSpace(final Path path, final long size)
-        throws IOException
     {
-        final Set<File> partitionRoots = new HashSet<>(Arrays.asList(File.listRoots()));
-
-        // crawl up file path until we find a root partition
-        File location = path.toFile().getCanonicalFile();
-        while (!partitionRoots.contains(location)) {
-            location = location.getParentFile();
-            if (location == null) {
-                throw new IllegalStateException(String.format("Unable to determine the partition that contains '%s'", path));
-            }
-        }
-
-        final long freeSpace = location.getFreeSpace();
+        final long freeSpace = path.toFile().getFreeSpace();
 
         if (freeSpace == 0L && IS_WINDOWS) {
             // On Windows, SUBST'ed drives report 0L from getFreeSpace().
@@ -50,10 +36,10 @@ public static boolean hasFreeSpace(final Path path, final long size)
             // There is no straightforward fix for this and it seems a fix is included in Java 9.
             // One alternative is to launch and parse a DIR command and look at the reported free space.
             // This is a temporary fix to get the CI tests going which relies on SUBST'ed drives to manage long paths.
-            logger.warn("Cannot retrieve free space on " +  location.toString() +  ". This is probably a SUBST'ed drive.");
+            logger.warn("Cannot retrieve free space on " +  path.toString() +  ". This is probably a SUBST'ed drive.");
             return true;
         }
 
-        return location.getFreeSpace() >= size;
+        return freeSpace >= size;
     }
 }
