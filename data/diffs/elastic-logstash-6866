diff --git a/logstash-core/lib/logstash/config/source_loader.rb b/logstash-core/lib/logstash/config/source_loader.rb
index c347360bb56..e77b1e639bb 100644
--- a/logstash-core/lib/logstash/config/source_loader.rb
+++ b/logstash-core/lib/logstash/config/source_loader.rb
@@ -58,6 +58,13 @@ def fetch
             .compact
             .flatten
 
+          duplicate_ids = find_duplicate_ids(pipeline_configs)
+
+          if duplicate_ids.any?
+            logger.debug("Fetching pipelines with duplicate ids", duplicate_ids.each { |k, v| v.collect(&:pipeline_id) } )
+            return FailedFetch.new("Found duplicate ids in your source: #{duplicate_ids.keys.sort.join(", ")}")
+          end
+
           if config_debug?
             pipeline_configs.each { |pipeline_config| pipeline_config.display_debug_information }
           end
@@ -100,13 +107,18 @@ def configure_sources(new_sources)
 
     def add_source(new_source)
       logger.debug("Adding source", :source => new_source.to_s)
-      @sources_lock.synchronize { @sources << new_source}
+      @sources_lock.synchronize { @sources << new_source }
     end
 
     private
     def config_debug?
       @settings.get_value("config.debug") && logger.debug?
     end
+
+    def find_duplicate_ids(pipeline_configs)
+      pipeline_configs.group_by { |pipeline_config| pipeline_config.pipeline_id }
+        .select { |group, pipeline_configs| pipeline_configs.size > 1 }
+    end
   end
 
   SOURCE_LOADER = SourceLoader.new
diff --git a/logstash-core/spec/api/spec_helper.rb b/logstash-core/spec/api/spec_helper.rb
index 6c5d4f99425..0f0ef192c95 100644
--- a/logstash-core/spec/api/spec_helper.rb
+++ b/logstash-core/spec/api/spec_helper.rb
@@ -40,7 +40,11 @@ class LogStashRunner
   attr_reader :config_str, :agent, :pipeline_settings
 
   def initialize
-    @config_str   = "input { generator {id => 'api-generator-pipeline' count => 100 } } output { dummyoutput {} }"
+
+    require "securerandom"
+    id = SecureRandom.uuid
+
+    @config_str   = "input { generator {id => 'api-generator-pipeline-#{id}' count => 100 } } output { dummyoutput {} }"
 
     args = {
       "config.reload.automatic" => false,
@@ -48,14 +52,16 @@ def initialize
       "log.level" => "debug",
       "node.name" => "test_agent",
       "http.port" => rand(9600..9700),
-      "http.environment" => "test",      
+      "http.environment" => "test",
       "config.string" => @config_str,
       "pipeline.batch.size" => 1,
       "pipeline.workers" => 1
     }
 
     @settings = ::LogStash::SETTINGS.clone.merge(args)
-    @agent = LogStash::DummyAgent.new(@settings)
+    source_loader = LogStash::Config::SourceLoader.new
+    source_loader.configure_sources(LogStash::Config::Source::Local.new(@settings))
+    @agent = LogStash::DummyAgent.new(@settings, source_loader)
   end
 
   def start
diff --git a/logstash-core/spec/logstash/config/source_loader_spec.rb b/logstash-core/spec/logstash/config/source_loader_spec.rb
index 568ca660a1a..8189b2f3724 100644
--- a/logstash-core/spec/logstash/config/source_loader_spec.rb
+++ b/logstash-core/spec/logstash/config/source_loader_spec.rb
@@ -3,9 +3,14 @@
 require "logstash/config/source/base"
 require_relative "../../support/helpers"
 
+def temporary_pipeline_config(id, source, reader = "random_reader")
+  config_part = org.logstash.common.SourceWithMetadata.new("local", "...", "input {} output {}")
+  LogStash::Config::PipelineConfig.new(source, id, [config_part], LogStash::SETTINGS)
+end
+
 class DummySource < LogStash::Config::Source::Base
   def pipeline_configs
-    [self.class]
+    [temporary_pipeline_config("dummy_source_id", self.class)]
   end
 
   def match?
@@ -15,7 +20,7 @@ def match?
 
 class AnotherDummySource < LogStash::Config::Source::Base
   def pipeline_configs
-    [self.class]
+    [temporary_pipeline_config("another_dummy_source_id", self.class)]
   end
 
   def match?
@@ -88,11 +93,19 @@ def match?
 
         expect(result.success?).to be_truthy
         expect(result.response.size).to eq(2)
-        expect(result.response).to include(DummySource, AnotherDummySource)
+        expect(result.response.collect(&:pipeline_id)).to include("dummy_source_id", "another_dummy_source_id")
+      end
+
+      context "when duplicate id is returned" do
+        it "fails to return pipeline" do
+          subject.configure_sources([AnotherDummySource.new(settings), AnotherDummySource.new(settings)])
+          result = subject.fetch
+          expect(result.success?).to be_falsey
+        end
       end
     end
 
-    context "when multiple match" do
+    context "when one match" do
       let(:settings) { mock_settings("path.config" => "another") } # match both regex
 
       it "return the loaders with the matched sources" do
@@ -102,7 +115,7 @@ def match?
 
         expect(result.success?).to be_truthy
         expect(result.response.size).to eq(1)
-        expect(result.response).to include(AnotherDummySource)
+        expect(result.response.collect(&:pipeline_id)).to include("another_dummy_source_id")
       end
     end
   end
