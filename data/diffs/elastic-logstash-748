diff --git a/lib/logstash/filters/dns.rb b/lib/logstash/filters/dns.rb
index 46bb0755574..6f003583a5e 100644
--- a/lib/logstash/filters/dns.rb
+++ b/lib/logstash/filters/dns.rb
@@ -8,17 +8,15 @@
 require "logstash/namespace"
 
 # The DNS filter performs a lookup (either an A record/CNAME record lookup
-# or a reverse lookup at the PTR record) on records specified under the
-# "reverse" and "resolve" arrays.
+# or a reverse lookup at the PTR record) on the record specified in the
+# "source" field.
 #
 # The config should look like this:
 #
 #     filter {
 #       dns {
-#         type => 'type'
-#         reverse => [ "source_host", "field_with_address" ]
-#         resolve => [ "field_with_fqdn" ]
-#         action => "replace"
+#         source => [ "client_ip" ]
+#         target => [ "client_hostname" ]
 #       }
 #     }
 #
@@ -34,22 +32,27 @@ class LogStash::Filters::DNS < LogStash::Filters::Base
   milestone 2
 
   # Reverse resolve one or more fields.
-  config :reverse, :validate => :array
+  config :reverse, :validate => :array, :deprecated => "Please use the source and target options."
 
   # Forward resolve one or more fields.
-  config :resolve, :validate => :array
+  config :resolve, :validate => :array, :deprecated => "Please use the source and target options."
 
   # Determine what action to do: append or replace the values in the fields
   # specified under "reverse" and "resolve."
-  config :action, :validate => [ "append", "replace" ], :default => "append"
+  config :action, :validate => [ "append", "replace" ], :default => "append",
+    :deprecated => "Please use the source and target options."
+
+  # The field containing the hostname or ip address to look up.
+  # Use of source/target and reverse/resolve/action is mutually exclusive,
+  # source/target take precedence.
+  config :source, :validate => :string
+
+  # The field where the result should be written to.
+  config :target, :validate => :string, :default => "dns"
 
   # Use custom nameserver.
   config :nameserver, :validate => :string
 
-  # TODO(sissel): make 'action' required? This was always the intent, but it
-  # due to a typo it was never enforced. Thus the default behavior in past
-  # versions was 'append' by accident.
-
   # resolv calls will be wrapped in a timeout instance
   config :timeout, :validate => :number, :default => 2
 
@@ -70,31 +73,87 @@ def register
   def filter(event)
     return unless filter?(event)
 
-    if @resolve
-      begin
-        status = Timeout::timeout(@timeout) {
-          resolve(event)
-        }
-      rescue Timeout::Error
-        @logger.debug("DNS: resolve action timed out")
-        return
+    if @source
+      raw = event[@source]
+      if raw.is_a?(Array)
+        if raw.length > 1
+          @logger.warn("DNS: skipping resolve, can't deal with multiple values", :field => @source, :value => raw)
+          return
+        end
+        raw = raw.first
       end
-    end
 
-    if @reverse
+      result = nil
+
       begin
-        status = Timeout::timeout(@timeout) {
-          reverse(event)
-        }
-      rescue Timeout::Error
-        @logger.debug("DNS: reverse action timed out")
+        if @ip_validator.match(raw)
+          status = Timeout::timeout(@timeout) {
+            result = @resolv.getname(raw)
+          }
+        else
+          status = Timeout::timeout(@timeout) {
+            result = @resolv.getaddress(raw)
+          }
+        end
+      rescue Resolv::ResolvError
+        @logger.debug("DNS: couldn't resolve.",
+                      :field => @source, :value => raw)
+        return
+      rescue Resolv::ResolvTimeout
+        @logger.debug("DNS: timeout on resolving.",
+                      :field => @source, :value => raw)
+        return
+      rescue SocketError => e
+        @logger.debug("DNS: Encountered SocketError.",
+                      :field => @source, :value => raw)
+        return
+      rescue NoMethodError => e
+        # see JRUBY-5647
+        @logger.debug("DNS: couldn't resolve the hostname.",
+                      :field => @source, :value => raw,
+                      :extra => "NameError instead of ResolvError")
         return
       end
+
+      # Explicit encode, as Resolv returns ASCII
+      result.encode!('UTF-8')
+
+      if @target.empty?
+        event["dns"] = result
+      else
+        event[@target] = result
+      end
+
+    else
+      # 'Old' functionality, remove when deprecating resolve, reverse and action
+      if @resolve
+        begin
+          status = Timeout::timeout(@timeout) { 
+            resolve(event)
+          }
+        rescue Timeout::Error
+          @logger.debug("DNS: resolve action timed out")
+          return
+        end
+      end
+
+      if @reverse
+        begin
+          status = Timeout::timeout(@timeout) { 
+            reverse(event)
+          }
+        rescue Timeout::Error
+          @logger.debug("DNS: reverse action timed out")
+          return
+        end
+      end
+      # Remove until here (and remove the if/else block)
     end
 
     filter_matched(event)
   end
 
+  # When deprecating, these functions can be deleted
   private
   def resolve(event)
     @resolve.each do |field|
diff --git a/spec/filters/dns.rb b/spec/filters/dns.rb
index 80dae9885ad..829a2a6ce05 100644
--- a/spec/filters/dns.rb
+++ b/spec/filters/dns.rb
@@ -158,4 +158,67 @@
       insist { subject["foo"] } == "does.not.exist"
     end
   end
+
+  # Tests for the source/target options
+  describe "dns reverse lookup, no target" do
+    config <<-CONFIG
+      filter {
+        dns {
+          source => "host"
+        }
+      }
+    CONFIG
+
+    sample("host" => "199.192.228.250") do
+      insist { subject["host"] } == "199.192.228.250"
+      insist { subject["dns"] } == "carrera.databits.net"
+    end
+  end
+
+  describe "dns lookup, with target" do
+    config <<-CONFIG
+      filter {
+        dns {
+          source => "foo"
+          target => "bar"
+        }
+      }
+    CONFIG
+
+    sample("foo" => "199.192.228.250") do
+      insist { subject["foo"] } == "199.192.228.250"
+      insist { subject["bar"] } == "carrera.databits.net"
+    end
+  end
+
+  describe "dns lookup, NXDOMAIN, no target" do
+    config <<-CONFIG
+      filter {
+        dns {
+          source => "foo"
+        }
+      }
+    CONFIG
+
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["dns"] } == nil
+    end
+  end
+
+  describe "dns lookup, NXDOMAIN, with target" do
+    config <<-CONFIG
+      filter {
+        dns {
+          source => "foo"
+          target => "bar"
+        }
+      }
+    CONFIG
+
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["bar"] } == nil
+    end
+  end
 end
