diff --git a/lib/logstash/inputs/syslog.rb b/lib/logstash/inputs/syslog.rb
index 41a0fa87287..dd8ab5953d5 100644
--- a/lib/logstash/inputs/syslog.rb
+++ b/lib/logstash/inputs/syslog.rb
@@ -200,7 +200,7 @@ def syslog_relay(event)
     if event["tags"].nil? || !event["tags"].include?("_grokparsefailure")
       # Per RFC3164, priority = (facility * 8) + severity
       #                       = (facility << 3) & (severity)
-      priority = event["priority"].first.to_i rescue 13
+      priority = event["priority"].to_i rescue 13
       severity = priority & 7   # 7 is 111 (3 bits)
       facility = priority >> 3
       event["priority"] = priority
diff --git a/lib/logstash/outputs/loggly.rb b/lib/logstash/outputs/loggly.rb
index ad159f7f667..3546fd92313 100644
--- a/lib/logstash/outputs/loggly.rb
+++ b/lib/logstash/outputs/loggly.rb
@@ -83,7 +83,13 @@ def receive(event)
     end
     request = Net::HTTP::Post.new(url.path)
     request.body = event.to_json
-    response = http.request(request)
+    begin
+      response = http.request(request)
+    rescue Exception => e
+      @logger.warn("Unhandled exception", :request => request, :response => response, :exception => e, :stacktrace => e.backtrace)
+      return
+    end
+
     if response.is_a?(Net::HTTPSuccess)
       @logger.info("Event send to Loggly OK!")
     else
diff --git a/spec/inputs/syslog.rb b/spec/inputs/syslog.rb
new file mode 100644
index 00000000000..31ab4949e97
--- /dev/null
+++ b/spec/inputs/syslog.rb
@@ -0,0 +1,40 @@
+# coding: utf-8
+require "test_utils"
+require "socket"
+
+describe "inputs/syslog" do
+  extend LogStash::RSpec
+
+  describe "properly handles priority, severity and facilities" do
+    port = 5511
+    event_count = 10
+
+    config <<-CONFIG
+      input {
+        syslog {
+          type => "blah"
+          port => #{port}
+        }
+      }
+    CONFIG
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 while !pipeline.ready?
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      event_count.times do |i|
+        socket.puts("<164>Oct 26 15:19:25 1.2.3.4 %ASA-4-106023: Deny udp src DRAC:10.1.2.3/43434 dst outside:192.168.0.1/53 by access-group \"acl_drac\" [0x0, 0x0]")
+      end
+      socket.close
+
+      events = event_count.times.collect { queue.pop }
+      event_count.times do |i|
+        insist { events[i]["priority"] } == 164
+        insist { events[i]["severity"] } == 4
+        insist { events[i]["facility"] } == 20
+      end
+    end
+  end
+end
+
