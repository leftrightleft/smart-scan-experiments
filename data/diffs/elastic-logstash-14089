diff --git a/config/logstash.yml b/config/logstash.yml
index 8b12058594d..c2bb685863a 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -299,8 +299,8 @@
 #
 # ------------ Other Settings --------------
 #
-# Run Logstash with superuser (default: ALLOW)
-# on_superuser: BLOCK, ALLOW
+# Allow or block running Logstash as superuser (default: true)
+# allow_superuser: false
 #
 # Where to find custom plugins
 # path.plugins: []
diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.go
index 5c71610e02d..0a1a6c69bd8 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.go
@@ -100,7 +100,7 @@ func normalizeSetting(setting string) (string, error) {
 		"password_policy.include.lower",
 		"password_policy.include.digit",
 		"password_policy.include.symbol",
-		"on_superuser",
+		"allow_superuser",
 		"xpack.monitoring.enabled",
 		"xpack.monitoring.collection.interval",
 		"xpack.monitoring.elasticsearch.hosts",
diff --git a/docs/static/settings-file.asciidoc b/docs/static/settings-file.asciidoc
index 2fc196fcff7..6e8d523ef36 100644
--- a/docs/static/settings-file.asciidoc
+++ b/docs/static/settings-file.asciidoc
@@ -317,9 +317,9 @@ separating each log lines per pipeline could be helpful in case you need to trou
   and `NAME` is the name of the plugin.
 | Platform-specific. See <<dir-layout>>.
 
-| `on_superuser`
-| Setting to `BLOCK` or `ALLOW` running Logstash as a superuser.
-| `ALLOW`
+| `allow_superuser`
+| Setting to `true` to allow or `false` to block running Logstash as a superuser.
+| `true`
 
 | `password_policy.mode`
 | Raises either `WARN` or `ERROR` message when password requirements are not met.
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 90f40cc6329..3d4f0dd472b 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -34,7 +34,7 @@ module Environment
   end
 
   [
-            Setting::String.new("on_superuser", "ALLOW", true, ["BLOCK", "ALLOW"]),
+           Setting::Boolean.new("allow_superuser", true),
             Setting::String.new("node.name", Socket.gethostname),
     Setting::NullableString.new("path.config", nil, false),
  Setting::WritableDirectory.new("path.data", ::File.join(LogStash::Environment::LOGSTASH_HOME, "data")),
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index a726007f2e5..a7be6c6bb24 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -285,7 +285,7 @@ def execute
     require "logstash/util/java_version"
     require "stud/task"
 
-    running_as_root
+    running_as_superuser
 
     if log_configuration_contains_javascript_usage?
       logger.error("Logging configuration uses Script log appender or filter with Javascript, which is no longer supported.")
@@ -442,13 +442,12 @@ def execute
     @log_fd.close if @log_fd
   end # def self.main
 
-  def running_as_root
-    on_superuser_setting = setting("on_superuser")
+  def running_as_superuser
     if Process.euid() == 0
-      if on_superuser_setting.eql?("ALLOW")
-        deprecation_logger.deprecated("NOTICE: Running Logstash as root is not recommended and won't be allowed in the future. Set 'on_superuser' to 'BLOCK' to avoid startup errors in future releases.")
+      if setting("allow_superuser")
+        deprecation_logger.deprecated("NOTICE: Running Logstash as superuser is not recommended and won't be allowed in the future. Set 'allow_superuser' to 'false' to avoid startup errors in future releases.")
       else
-        raise(RuntimeError, "Logstash cannot be run as root.")
+        raise(RuntimeError, "Logstash cannot be run as superuser.")
       end
     end
   end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index dc1c327b30c..8e9fe58d608 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -646,34 +646,34 @@
     end
   end
 
-  describe "on_superuser" do
+  describe "allow_superuser" do
     subject { LogStash::Runner.new("") }
     let(:args) { ["-e", "input {} output {}"] }
     let(:deprecation_logger_stub) { double("DeprecationLogger").as_null_object }
     before(:each) { allow(runner).to receive(:deprecation_logger).and_return(deprecation_logger_stub) }
 
-    context "unintentionally running logstash as root" do
+    context "unintentionally running logstash as superuser" do
       before do
         expect(Process).to receive(:euid).and_return(0)
       end
       it "fails with bad exit" do
-        LogStash::SETTINGS.set("on_superuser", "BLOCK")
+        LogStash::SETTINGS.set("allow_superuser", false)
         expect(logger).to receive(:fatal) do |msg, hash|
           expect(msg).to eq("An unexpected error occurred!")
-          expect(hash[:error].to_s).to match("Logstash cannot be run as root.")
+          expect(hash[:error].to_s).to match("Logstash cannot be run as superuser.")
         end
         expect(subject.run(args)).to eq(1)
       end
     end
 
-    context "intentionally running logstash as root " do
+    context "intentionally running logstash as superuser " do
       before do
         expect(Process).to receive(:euid).and_return(0)
       end
       it "runs successfully with warning message" do
-        LogStash::SETTINGS.set("on_superuser", "ALLOW")
+        LogStash::SETTINGS.set("allow_superuser", true)
         expect(logger).not_to receive(:fatal)
-        expect(deprecation_logger_stub).to receive(:deprecated).with(/NOTICE: Running Logstash as root is not recommended and won't be allowed in the future. Set 'on_superuser' to 'BLOCK' to avoid startup errors in future releases./)
+        expect(deprecation_logger_stub).to receive(:deprecated).with(/NOTICE: Running Logstash as superuser is not recommended and won't be allowed in the future. Set 'allow_superuser' to 'false' to avoid startup errors in future releases./)
         expect { subject.run(args) }.not_to raise_error
       end
     end
@@ -683,9 +683,9 @@
         expect(Process).to receive(:euid).and_return(100)
       end
       it "runs successfully without any messages" do
-        LogStash::SETTINGS.set("on_superuser", "BLOCK")
+        LogStash::SETTINGS.set("allow_superuser", false)
         expect(logger).not_to receive(:fatal)
-        expect(deprecation_logger_stub).not_to receive(:deprecated).with(/NOTICE: Running Logstash as root is not recommended and won't be allowed in the future. Set 'on_superuser' to 'BLOCK' to avoid startup errors in future releases./)
+        expect(deprecation_logger_stub).not_to receive(:deprecated).with(/NOTICE: Running Logstash as superuser is not recommended and won't be allowed in the future. Set 'allow_superuser' to 'false' to avoid startup errors in future releases./)
         expect { subject.run(args) }.not_to raise_error
       end
     end
