diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index ed1edea8956..7aac3ab0352 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -33,7 +33,6 @@ module LogStash; class JavaBasePipeline
 
   def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @logger = self.logger
-    @mutex = Mutex.new
     @ephemeral_id = SecureRandom.uuid
 
     @pipeline_config = pipeline_config
@@ -426,8 +425,7 @@ def start_input(plugin)
   def inputworker(plugin)
     Util::set_thread_name("[#{pipeline_id}]<#{plugin.class.config_name}")
     begin
-      input_queue_client = wrapped_write_client(plugin.id.to_sym)
-      plugin.run(input_queue_client)
+      plugin.run(LogStash::WrappedWriteClient.new(@input_queue_client, @pipeline_id.to_s.to_sym, metric, plugin.id.to_sym))
     rescue => e
       if plugin.stop?
         @logger.debug("Input plugin raised exception during shutdown, ignoring it.",
@@ -616,11 +614,4 @@ def default_logging_keys(other_keys = {})
     keys[:thread] ||= thread.inspect if thread
     keys
   end
-
-  def wrapped_write_client(plugin_id)
-    #need to ensure that metrics are initialized one plugin at a time, else a race condition can exist.
-    @mutex.synchronize do
-      LogStash::WrappedWriteClient.new(@input_queue_client, @pipeline_id.to_s.to_sym, metric, plugin_id)
-    end
-  end
 end; end
diff --git a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
index 66431f66e88..149d47b37f6 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
@@ -46,24 +46,27 @@ public IRubyObject ruby_initialize(final ThreadContext context, final IRubyObjec
         this.writeClient = args[0];
         final String pipelineId = args[1].asJavaString();
         final IRubyObject metric = args[2];
-        final IRubyObject pluginId = args[3];
-        final IRubyObject eventsMetrics = getMetric(metric, "stats", "events");
-        eventsMetricsCounter = LongCounter.fromRubyBase(eventsMetrics, IN_KEY);
-        eventsMetricsTime = LongCounter.fromRubyBase(eventsMetrics, PUSH_DURATION_KEY);
-        final IRubyObject pipelineMetrics =
-            getMetric(metric, "stats", "pipelines", pipelineId, "events");
-        pipelineMetricsCounter = LongCounter.fromRubyBase(pipelineMetrics, IN_KEY);
-        pipelineMetricsTime = LongCounter.fromRubyBase(pipelineMetrics, PUSH_DURATION_KEY);
-        final IRubyObject pluginMetrics = getMetric(
-            metric, "stats", "pipelines", pipelineId, "plugins", "inputs",
-            pluginId.asJavaString(), "events"
-        );
-        pluginMetricsCounter =
-            LongCounter.fromRubyBase(pluginMetrics, context.runtime.newSymbol("out"));
-        pluginMetricsTime = LongCounter.fromRubyBase(pluginMetrics, PUSH_DURATION_KEY);
-        final RubyClass writerClass = writeClient.getMetaClass();
-        pushOne = writerClass.searchMethod("push");
-        pushBatch = writerClass.searchMethod("push_batch");
+        // Synchronize on the metric since setting up new fields on it is not threadsafe
+        synchronized (metric) {
+            final IRubyObject pluginId = args[3];
+            final IRubyObject eventsMetrics = getMetric(metric, "stats", "events");
+            eventsMetricsCounter = LongCounter.fromRubyBase(eventsMetrics, IN_KEY);
+            eventsMetricsTime = LongCounter.fromRubyBase(eventsMetrics, PUSH_DURATION_KEY);
+            final IRubyObject pipelineMetrics =
+                getMetric(metric, "stats", "pipelines", pipelineId, "events");
+            pipelineMetricsCounter = LongCounter.fromRubyBase(pipelineMetrics, IN_KEY);
+            pipelineMetricsTime = LongCounter.fromRubyBase(pipelineMetrics, PUSH_DURATION_KEY);
+            final IRubyObject pluginMetrics = getMetric(
+                metric, "stats", "pipelines", pipelineId, "plugins", "inputs",
+                pluginId.asJavaString(), "events"
+            );
+            pluginMetricsCounter =
+                LongCounter.fromRubyBase(pluginMetrics, context.runtime.newSymbol("out"));
+            pluginMetricsTime = LongCounter.fromRubyBase(pluginMetrics, PUSH_DURATION_KEY);
+            final RubyClass writerClass = writeClient.getMetaClass();
+            pushOne = writerClass.searchMethod("push");
+            pushBatch = writerClass.searchMethod("push_batch");
+        }
         return this;
     }
 
