diff --git a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
index 98b48f75de3..22186545dc5 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
@@ -1,11 +1,7 @@
 package org.logstash.config.ir;
 
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import org.jruby.RubyHash;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.jruby.runtime.load.LoadService;
 import org.logstash.RubyUtil;
 import org.logstash.common.IncompleteSourceWithMetadataException;
 import org.logstash.common.SourceWithMetadata;
@@ -28,7 +24,6 @@ private ConfigCompiler() {
      */
     public static PipelineIR configToPipelineIR(final String config, final boolean supportEscapes)
         throws IncompleteSourceWithMetadataException {
-        ensureLoadpath();
         final IRubyObject compiler = RubyUtil.RUBY.executeScript(
             "require 'logstash/compiler'\nLogStash::Compiler",
             ""
@@ -47,23 +42,4 @@ public static PipelineIR configToPipelineIR(final String config, final boolean s
             );
         return (PipelineIR) code.toJava(PipelineIR.class);
     }
-
-    /**
-     * Loads the logstash-core/lib path if the load service can't find {@code logstash/compiler}.
-     */
-    private static void ensureLoadpath() {
-        final LoadService loader = RubyUtil.RUBY.getLoadService();
-        if (loader.findFileForLoad("logstash/compiler").library == null) {
-            final RubyHash environment = RubyUtil.RUBY.getENV();
-            final Path root = Paths.get(
-                System.getProperty("logstash.core.root.dir", "")
-            ).toAbsolutePath();
-            final String gems = root.getParent().resolve("vendor").resolve("bundle")
-                .resolve("jruby").resolve("2.3.0").toFile().getAbsolutePath();
-            environment.put("GEM_HOME", gems);
-            environment.put("GEM_PATH", gems);
-            loader.addPaths(root.resolve("lib").toFile().getAbsolutePath()
-            );
-        }
-    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
index 1e4e076c5d3..e9612118fc3 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
@@ -2,7 +2,13 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import org.jruby.RubyHash;
+import org.jruby.runtime.load.LoadService;
+import org.junit.BeforeClass;
 import org.junit.Test;
+import org.logstash.RubyUtil;
 import org.logstash.common.IncompleteSourceWithMetadataException;
 import org.logstash.config.ir.graph.Graph;
 
@@ -11,6 +17,11 @@
 
 public class ConfigCompilerTest {
 
+    @BeforeClass
+    public static void before() {
+        ensureLoadpath();
+    }
+
     @Test
     public void testConfigToPipelineIR() throws Exception {
         final PipelineIR pipelineIR =
@@ -64,4 +75,24 @@ private static String graphHash(final String config)
         throws IncompleteSourceWithMetadataException {
         return ConfigCompiler.configToPipelineIR(config, false).uniqueHash();
     }
+
+    /**
+     * Loads the logstash-core/lib path if the load service can't find {@code logstash/compiler}
+     * because {@code environment.rb} hasn't been loaded yet.
+     */
+    private static void ensureLoadpath() {
+        final LoadService loader = RubyUtil.RUBY.getLoadService();
+        if (loader.findFileForLoad("logstash/compiler").library == null) {
+            final RubyHash environment = RubyUtil.RUBY.getENV();
+            final Path root = Paths.get(
+                System.getProperty("logstash.core.root.dir", "")
+            ).toAbsolutePath();
+            final String gems = root.getParent().resolve("vendor").resolve("bundle")
+                .resolve("jruby").resolve("2.3.0").toFile().getAbsolutePath();
+            environment.put("GEM_HOME", gems);
+            environment.put("GEM_PATH", gems);
+            loader.addPaths(root.resolve("lib").toFile().getAbsolutePath()
+            );
+        }
+    }
 }
