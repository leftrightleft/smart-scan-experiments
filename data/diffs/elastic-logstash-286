diff --git a/lib/logstash/event.rb b/lib/logstash/event.rb
index ed057bed66e..e08f69a69de 100644
--- a/lib/logstash/event.rb
+++ b/lib/logstash/event.rb
@@ -124,6 +124,9 @@ def type=(val); @data["@type"] = val; end # def type=
   def tags; @data["@tags"]; end # def tags
   def tags=(val); @data["@tags"] = val; end # def tags=
 
+  def id; @data["@id"]; end # def id
+  def id=(val); @data["@id"] = val; end # def id=
+
   # field-related access
   public
   def [](key)
diff --git a/lib/logstash/outputs/elasticsearch.rb b/lib/logstash/outputs/elasticsearch.rb
index 787ce6ed5c1..f4d7deaf3c8 100644
--- a/lib/logstash/outputs/elasticsearch.rb
+++ b/lib/logstash/outputs/elasticsearch.rb
@@ -37,6 +37,9 @@ class LogStash::Outputs::ElasticSearch < LogStash::Outputs::Base
   # similar events to the same 'type'. String expansion '%{foo}' works here.
   config :index_type, :validate => :string, :default => "%{@type}"
 
+  # The document ID for the index. Overwrites any existing entry in elasticsearch with the same ID.
+  config :id, :validate => :string, :default => nil
+
   # The name of your cluster if you set it on the ElasticSearch side. Useful
   # for discovery.
   config :cluster, :validate => :string
@@ -160,7 +163,13 @@ def receive(event)
       end
     end
 
-    req = @client.index(index, type, event.to_hash) 
+    if id.nil?
+        req = @client.index(index, type, event.to_hash) 
+    else
+        id = event.sprintf(@id)
+        req = @client.index(index, type, id, event.to_hash)
+    end
+
     increment_inflight_request_count
     #timer = @logger.time("elasticsearch write")
     req.on(:success) do |response|
