diff --git a/tools/ingest-converter/src/main/resources/ingest-grok.js b/tools/ingest-converter/src/main/resources/ingest-grok.js
index f8d0d788bfb..94e37903b45 100644
--- a/tools/ingest-converter/src/main/resources/ingest-grok.js
+++ b/tools/ingest-converter/src/main/resources/ingest-grok.js
@@ -24,7 +24,10 @@ var IngestGrok = {
                     );
                 }
             }
-            return create_hash_field("pattern_definitions", content);
+            return create_hash_field(
+                "pattern_definitions", 
+                content.map(IngestConverter.dots_to_square_brackets).join("\n")
+            );
         }
 
         var grok_data = processor["grok"];
diff --git a/tools/ingest-converter/src/main/resources/ingest-shared.js b/tools/ingest-converter/src/main/resources/ingest-shared.js
index fdc51564aa4..4f36ccafc64 100644
--- a/tools/ingest-converter/src/main/resources/ingest-shared.js
+++ b/tools/ingest-converter/src/main/resources/ingest-shared.js
@@ -9,10 +9,17 @@ var IngestConverter = {
     dots_to_square_brackets: function (string) {
 
         function token_dots_to_square_brackets(string) {
-            return string.replace(/(\w*)\.(\w*)/g, "$1][$2")
-                .replace(/\[(\w+)(}|$)/g, "[$1]$2")
-                .replace(/{(\w+):(\w+)]/g, "{$1:[$2]")
-                .replace(/^(\w+)]\[/g, "[$1][");
+            var adjusted;
+            //Break out if this is not a naming pattern we convert
+            if (string.match(/([\w_]+\.)+[\w_]+/)) {
+                adjusted = string.replace(/(\w*)\.(\w*)/g, "$1][$2")
+                    .replace(/\[(\w+)(}|$)/g, "[$1]$2")
+                    .replace(/{(\w+):(\w+)]/g, "{$1:[$2]")
+                    .replace(/^(\w+)]\[/g, "[$1][");
+            } else {
+                adjusted = string;
+            }
+            return adjusted;
         }
 
         var literals = string.match(/\(\?:%{.*\|-\)/);
diff --git a/tools/ingest-converter/src/test/java/org/logstash/ingest/GrokTest.java b/tools/ingest-converter/src/test/java/org/logstash/ingest/GrokTest.java
index 253b8b62d4a..317618e0bf4 100644
--- a/tools/ingest-converter/src/test/java/org/logstash/ingest/GrokTest.java
+++ b/tools/ingest-converter/src/test/java/org/logstash/ingest/GrokTest.java
@@ -9,7 +9,7 @@ public final class GrokTest extends IngestTest {
 
     @Parameters
     public static Iterable<String> data() {
-        return Arrays.asList("Grok", "GrokPatternDefinition");
+        return Arrays.asList("Grok", "GrokPatternDefinition", "GrokMultiplePatternDefinitions");
     }
 
     @Test
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestGrokMultiplePatternDefinitions.json b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestGrokMultiplePatternDefinitions.json
new file mode 100644
index 00000000000..e3a2ce60eda
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/ingestGrokMultiplePatternDefinitions.json
@@ -0,0 +1,19 @@
+{
+  "description":"Syslog",
+  "processors":[
+    {
+      "grok":{
+        "field":"message",
+        "patterns":[
+          "%{SYSLOGTIMESTAMP:system.syslog.timestamp} %{SYSLOGHOST:system.syslog.hostname} %{DATA:system.syslog.program}(?:\\[%{POSINT:system.syslog.pid}\\])?: %{GREEDYMULTILINE:system.syslog.message}",
+          "%{SYSLOGTIMESTAMP:system.syslog.timestamp} %{GREEDYMULTILINE:system.syslog.message}"
+        ],
+        "pattern_definitions":{
+          "GREEDYMULTILINE":"(.|\\n)*",
+          "AUDIT_TYPE": "^type=%{NOTSPACE:auditd.log.record_type}"
+        },
+        "ignore_missing":true
+      }
+    }
+  ]
+}
diff --git a/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashGrokMultiplePatternDefinitions.conf b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashGrokMultiplePatternDefinitions.conf
new file mode 100644
index 00000000000..e89065b7138
--- /dev/null
+++ b/tools/ingest-converter/src/test/resources/org/logstash/ingest/logstashGrokMultiplePatternDefinitions.conf
@@ -0,0 +1,19 @@
+filter {
+   grok {
+      match => {
+         "message" => [
+            "%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}",
+            "%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{GREEDYMULTILINE:[system][syslog][message]}"
+         ]
+      }
+      pattern_definitions => {
+         "GREEDYMULTILINE" => "(.|\n)*"
+         "AUDIT_TYPE" => "^type=%{NOTSPACE:[auditd][log][record_type]}"
+      }
+   }
+}
+output {
+   elasticsearch {
+      hosts => "localhost"
+   }
+}
