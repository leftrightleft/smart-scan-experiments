diff --git a/.rubocop.yml b/.rubocop.yml
index c19d5e8f10a..529a1270e4d 100644
--- a/.rubocop.yml
+++ b/.rubocop.yml
@@ -89,12 +89,14 @@ Layout/SpaceBeforeFirstArg:
   Enabled: true
 Layout/SpaceBeforeSemicolon:
   Enabled: true
-
-##### Need review #####
 Layout/AccessModifierIndentation:
-  Enabled: false
+  Enabled: true
+  EnforcedStyle: indent
 Layout/ArgumentAlignment:
-  Enabled: false
+  Enabled: true
+  EnforcedStyle: with_first_argument
+
+##### Need review #####
 Layout/ArrayAlignment:
   Enabled: false
 Layout/AssignmentIndentation:
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 6cdb2b0a694..925eb3dcaa1 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -388,10 +388,10 @@ def converge_state(pipeline_actions)
 
           unless action_result.successful?
             logger.error("Failed to execute action",
-              :id => action.pipeline_id,
-              :action_type => action_result.class,
-              :message => action_result.message,
-              :backtrace => action_result.backtrace
+                         :id => action.pipeline_id,
+                         :action_type => action_result.class,
+                         :message => action_result.message,
+                         :backtrace => action_result.backtrace
             )
           end
         rescue SystemExit, Exception => e
@@ -402,9 +402,9 @@ def converge_state(pipeline_actions)
     end.each(&:join)
 
     logger.trace? && logger.trace("Converge results",
-      :success => converge_result.success?,
-      :failed_actions => converge_result.failed_actions.collect { |a, r| "id: #{a.pipeline_id}, action_type: #{a.class}, message: #{r.message}" },
-      :successful_actions => converge_result.successful_actions.collect { |a, r| "id: #{a.pipeline_id}, action_type: #{a.class}" }
+                                  :success => converge_result.success?,
+                                  :failed_actions => converge_result.failed_actions.collect { |a, r| "id: #{a.pipeline_id}, action_type: #{a.class}, message: #{r.message}" },
+                                  :successful_actions => converge_result.successful_actions.collect { |a, r| "id: #{a.pipeline_id}, action_type: #{a.class}" }
     )
 
     converge_result
diff --git a/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb b/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
index fb04b600c72..00c59734255 100644
--- a/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
+++ b/logstash-core/lib/logstash/api/commands/hot_threads_reporter.rb
@@ -34,10 +34,10 @@ def to_s
     report << "\n"
     hash[:threads].each do |thread|
       line_str = I18n.t("logstash.web_api.hot_threads.thread_title",
-        :percent_of_cpu_time => thread[:percent_of_cpu_time],
-        :thread_state => thread[:state],
-        :thread_name => thread[:name],
-        :thread_id => thread[:thread_id])
+                        :percent_of_cpu_time => thread[:percent_of_cpu_time],
+                        :thread_state => thread[:state],
+                        :thread_name => thread[:name],
+                        :thread_id => thread[:thread_id])
       thread_report = "#{line_str} \n"
       thread_report << "#{thread[:path]}\n" if thread[:path]
       thread[:traces].each do |trace|
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index c066489f81e..3e51afdaf8b 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -221,11 +221,11 @@ def validate!
       if duplicate_values.size > 0
         raise ::LogStash::ConfigurationError.new(
           I18n.t("logstash.runner.configuration.invalid_plugin_settings_duplicate_keys",
-            :keys => duplicate_values.join(', '),
-            :line => input.line_of(interval.first),
-            :column => input.column_of(interval.first),
-            :byte => interval.first + 1,
-            :after => input[0..interval.first]
+                 :keys => duplicate_values.join(', '),
+                 :line => input.line_of(interval.first),
+                 :column => input.column_of(interval.first),
+                 :byte => interval.first + 1,
+                 :after => input[0..interval.first]
           )
         )
       end
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index deea9717ba2..76c126ea804 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -109,7 +109,7 @@ def config_init(params)
 
     if !self.class.validate(params)
       raise LogStash::ConfigurationError,
-        I18n.t("logstash.runner.configuration.invalid_plugin_settings")
+            I18n.t("logstash.runner.configuration.invalid_plugin_settings")
     end
 
     # now that we know the parameters are valid, we can obfuscate the original copy
@@ -137,8 +137,8 @@ def config_init(params)
         extra = opts[:obsolete].is_a?(String) ? opts[:obsolete] : ""
         extra.gsub!("%PLUGIN%", self.class.config_name)
         raise LogStash::ConfigurationError,
-          I18n.t("logstash.runner.configuration.obsolete", :name => name,
-                 :plugin => self.class.config_name, :extra => extra)
+              I18n.t("logstash.runner.configuration.obsolete", :name => name,
+                     :plugin => self.class.config_name, :extra => extra)
       end
     end
 
@@ -309,8 +309,8 @@ def validate_check_required_parameter_names(params)
         value = params[config_key]
         if value.nil? || (config[:list] && Array(value).empty?)
           self.logger.error(I18n.t("logstash.runner.configuration.setting_missing",
-                               :setting => config_key, :plugin => @plugin_name,
-                               :type => @plugin_type))
+                                   :setting => config_key, :plugin => @plugin_name,
+                                   :type => @plugin_type))
           is_valid = false
         end
       end
@@ -359,10 +359,10 @@ def validate_check_parameter_values(params)
             params[key] = processed_value
           else
             self.logger.error(I18n.t("logstash.runner.configuration.setting_invalid",
-                                 :plugin => @plugin_name, :type => @plugin_type,
-                                 :setting => key, :value => value.inspect,
-                                 :value_type => config_settings[:validate],
-                                 :note => processed_value))
+                                     :plugin => @plugin_name, :type => @plugin_type,
+                                     :setting => key, :value => value.inspect,
+                                     :value_type => config_settings[:validate],
+                                     :note => processed_value))
           end
 
           all_params_valid &&= is_valid
diff --git a/logstash-core/lib/logstash/config/source/modules.rb b/logstash-core/lib/logstash/config/source/modules.rb
index 47794465c54..ff9be95e290 100644
--- a/logstash-core/lib/logstash/config/source/modules.rb
+++ b/logstash-core/lib/logstash/config/source/modules.rb
@@ -29,8 +29,8 @@ def pipeline_configs
       pipelines = LogStash::Config::ModulesCommon.pipeline_configs(@settings)
       pipelines.map do |hash|
         org.logstash.config.ir.PipelineConfig.new(self.class, hash["pipeline_id"].to_sym,
-          org.logstash.common.SourceWithMetadata.new("module", hash["alt_name"], 0, 0, hash["config_string"]),
-          hash["settings"])
+                                                  org.logstash.common.SourceWithMetadata.new("module", hash["alt_name"], 0, 0, hash["config_string"]),
+                                                  hash["settings"])
       end
     end
 
diff --git a/logstash-core/lib/logstash/dependency_report.rb b/logstash-core/lib/logstash/dependency_report.rb
index 83a54f4beeb..6f9627e194c 100644
--- a/logstash-core/lib/logstash/dependency_report.rb
+++ b/logstash-core/lib/logstash/dependency_report.rb
@@ -27,7 +27,7 @@
 
 class LogStash::DependencyReport < Clamp::Command
   option [ "--csv" ], "OUTPUT_PATH", "The path to write the dependency report in csv format.",
-    :required => true, :attribute_name => :output_path
+         :required => true, :attribute_name => :output_path
 
   OTHER_DEPENDENCIES = [
     ["jruby", "", "http://jruby.org", "EPL-2.0"],
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
index 98750675736..b6436bad718 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
@@ -43,20 +43,20 @@ def update(time, result, exception)
         # On a busy system this can happen, we just log it as a debug
         # event instead of an error, Some of the JVM calls can take a long time or block.
         logger.debug("Timeout exception",
-                :poller => self,
-                :result => result,
-                :polling_timeout => @options[:polling_timeout],
-                :polling_interval => @options[:polling_interval],
-                :exception => exception.class,
-                :executed_at => time)
+                     :poller => self,
+                     :result => result,
+                     :polling_timeout => @options[:polling_timeout],
+                     :polling_interval => @options[:polling_interval],
+                     :exception => exception.class,
+                     :executed_at => time)
       else
         logger.error("Exception",
-                :poller => self,
-                :result => result,
-                :exception => exception.class,
-                :polling_timeout => @options[:polling_timeout],
-                :polling_interval => @options[:polling_interval],
-                :executed_at => time)
+                     :poller => self,
+                     :result => result,
+                     :exception => exception.class,
+                     :polling_timeout => @options[:polling_timeout],
+                     :polling_interval => @options[:polling_interval],
+                     :executed_at => time)
       end
     end
 
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 6a3152abb27..52a4923fff9 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -416,10 +416,10 @@ def inputworker(plugin)
       if plugin.stop?
         @logger.debug(
           "Input plugin raised exception during shutdown, ignoring it.",
-           default_logging_keys(
-             :plugin => plugin.class.config_name,
-             :exception => e.message,
-             :backtrace => e.backtrace))
+          default_logging_keys(
+            :plugin => plugin.class.config_name,
+            :exception => e.message,
+            :backtrace => e.backtrace))
         return
       end
 
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index f9faed54f42..addf1998014 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -65,9 +65,9 @@ class LogStash::Runner < Clamp::StrictCommand
 
   # Node Settings
   option ["-n", "--node.name"], "NAME",
-    I18n.t("logstash.runner.flag.name"),
-    :attribute_name => "node.name",
-    :default => LogStash::SETTINGS.get_default("node.name")
+         I18n.t("logstash.runner.flag.name"),
+         :attribute_name => "node.name",
+         :default => LogStash::SETTINGS.get_default("node.name")
 
   option ["--enable-local-plugin-development"], :flag,
          I18n.t("logstash.runner.flag.enable-local-plugin-development"),
@@ -76,15 +76,15 @@ class LogStash::Runner < Clamp::StrictCommand
 
   # Config Settings
   option ["-f", "--path.config"], "CONFIG_PATH",
-    I18n.t("logstash.runner.flag.config"),
-    :attribute_name => "path.config"
+         I18n.t("logstash.runner.flag.config"),
+         :attribute_name => "path.config"
 
   option ["-e", "--config.string"], "CONFIG_STRING",
-    I18n.t("logstash.runner.flag.config-string",
-      :default_input => LogStash::Config::Defaults.input,
-      :default_output => LogStash::Config::Defaults.output),
-    :default => LogStash::SETTINGS.get_default("config.string"),
-    :attribute_name => "config.string"
+         I18n.t("logstash.runner.flag.config-string",
+                :default_input => LogStash::Config::Defaults.input,
+                :default_output => LogStash::Config::Defaults.output),
+         :default => LogStash::SETTINGS.get_default("config.string"),
+         :attribute_name => "config.string"
 
   option ["--field-reference-escape-style"], "STYLE",
          I18n.t("logstash.runner.flag.field-reference-escape-style"),
@@ -98,43 +98,43 @@ class LogStash::Runner < Clamp::StrictCommand
 
   # Module settings
   option ["--modules"], "MODULES",
-    I18n.t("logstash.runner.flag.modules"),
-    :multivalued => true,
-    :attribute_name => "modules_list"
+         I18n.t("logstash.runner.flag.modules"),
+         :multivalued => true,
+         :attribute_name => "modules_list"
 
   option ["-M", "--modules.variable"], "MODULES_VARIABLE",
-    I18n.t("logstash.runner.flag.modules_variable"),
-    :multivalued => true,
-    :attribute_name => "modules_variable_list"
+         I18n.t("logstash.runner.flag.modules_variable"),
+         :multivalued => true,
+         :attribute_name => "modules_variable_list"
 
   option ["--setup"], :flag,
-    I18n.t("logstash.runner.flag.modules_setup"),
-    :default => LogStash::SETTINGS.get_default("modules_setup"),
-    :attribute_name => "modules_setup"
+         I18n.t("logstash.runner.flag.modules_setup"),
+         :default => LogStash::SETTINGS.get_default("modules_setup"),
+         :attribute_name => "modules_setup"
 
   option ["--cloud.id"], "CLOUD_ID",
-    I18n.t("logstash.runner.flag.cloud_id"),
-    :attribute_name => "cloud.id"
+         I18n.t("logstash.runner.flag.cloud_id"),
+         :attribute_name => "cloud.id"
 
   option ["--cloud.auth"], "CLOUD_AUTH",
-    I18n.t("logstash.runner.flag.cloud_auth"),
-    :attribute_name => "cloud.auth"
+         I18n.t("logstash.runner.flag.cloud_auth"),
+         :attribute_name => "cloud.auth"
 
   # Pipeline settings
   option ["--pipeline.id"], "ID",
-    I18n.t("logstash.runner.flag.pipeline-id"),
-    :attribute_name => "pipeline.id",
-    :default => LogStash::SETTINGS.get_default("pipeline.id")
+         I18n.t("logstash.runner.flag.pipeline-id"),
+         :attribute_name => "pipeline.id",
+         :default => LogStash::SETTINGS.get_default("pipeline.id")
 
   option ["-w", "--pipeline.workers"], "COUNT",
-    I18n.t("logstash.runner.flag.pipeline-workers"),
-    :attribute_name => "pipeline.workers",
-    :default => LogStash::SETTINGS.get_default("pipeline.workers")
+         I18n.t("logstash.runner.flag.pipeline-workers"),
+         :attribute_name => "pipeline.workers",
+         :default => LogStash::SETTINGS.get_default("pipeline.workers")
 
   option "--pipeline.ordered", "ORDERED",
-    I18n.t("logstash.runner.flag.pipeline-ordered"),
-    :attribute_name => "pipeline.ordered",
-    :default => LogStash::SETTINGS.get_default("pipeline.ordered")
+         I18n.t("logstash.runner.flag.pipeline-ordered"),
+         :attribute_name => "pipeline.ordered",
+         :default => LogStash::SETTINGS.get_default("pipeline.ordered")
 
   option ["--plugin-classloaders"], :flag,
          I18n.t("logstash.runner.flag.plugin-classloaders"),
@@ -142,124 +142,124 @@ class LogStash::Runner < Clamp::StrictCommand
          :default => LogStash::SETTINGS.get_default("pipeline.plugin_classloaders")
 
   option ["-b", "--pipeline.batch.size"], "SIZE",
-    I18n.t("logstash.runner.flag.pipeline-batch-size"),
-    :attribute_name => "pipeline.batch.size",
-    :default => LogStash::SETTINGS.get_default("pipeline.batch.size")
+         I18n.t("logstash.runner.flag.pipeline-batch-size"),
+         :attribute_name => "pipeline.batch.size",
+         :default => LogStash::SETTINGS.get_default("pipeline.batch.size")
 
   option ["-u", "--pipeline.batch.delay"], "DELAY_IN_MS",
-    I18n.t("logstash.runner.flag.pipeline-batch-delay"),
-    :attribute_name => "pipeline.batch.delay",
-    :default => LogStash::SETTINGS.get_default("pipeline.batch.delay")
+         I18n.t("logstash.runner.flag.pipeline-batch-delay"),
+         :attribute_name => "pipeline.batch.delay",
+         :default => LogStash::SETTINGS.get_default("pipeline.batch.delay")
 
   option ["--pipeline.unsafe_shutdown"], :flag,
-    I18n.t("logstash.runner.flag.unsafe_shutdown"),
-    :attribute_name => "pipeline.unsafe_shutdown",
-    :default => LogStash::SETTINGS.get_default("pipeline.unsafe_shutdown")
+         I18n.t("logstash.runner.flag.unsafe_shutdown"),
+         :attribute_name => "pipeline.unsafe_shutdown",
+         :default => LogStash::SETTINGS.get_default("pipeline.unsafe_shutdown")
 
   option ["--pipeline.ecs_compatibility"], "STRING",
-    I18n.t("logstash.runner.flag.ecs_compatibility"),
-    :attribute_name => "pipeline.ecs_compatibility",
-    :default => LogStash::SETTINGS.get_default('pipeline.ecs_compatibility')
+         I18n.t("logstash.runner.flag.ecs_compatibility"),
+         :attribute_name => "pipeline.ecs_compatibility",
+         :default => LogStash::SETTINGS.get_default('pipeline.ecs_compatibility')
 
   # Data Path Setting
   option ["--path.data"], "PATH",
-    I18n.t("logstash.runner.flag.datapath"),
-    :attribute_name => "path.data",
-    :default => LogStash::SETTINGS.get_default("path.data")
+         I18n.t("logstash.runner.flag.datapath"),
+         :attribute_name => "path.data",
+         :default => LogStash::SETTINGS.get_default("path.data")
 
   # Plugins Settings
   option ["-p", "--path.plugins"], "PATH",
-    I18n.t("logstash.runner.flag.pluginpath"),
-    :multivalued => true, :attribute_name => "path.plugins",
-    :default => LogStash::SETTINGS.get_default("path.plugins")
+         I18n.t("logstash.runner.flag.pluginpath"),
+         :multivalued => true, :attribute_name => "path.plugins",
+         :default => LogStash::SETTINGS.get_default("path.plugins")
 
   # Logging Settings
   option ["-l", "--path.logs"], "PATH",
-    I18n.t("logstash.runner.flag.log"),
-    :attribute_name => "path.logs",
-    :default => LogStash::SETTINGS.get_default("path.logs")
+         I18n.t("logstash.runner.flag.log"),
+         :attribute_name => "path.logs",
+         :default => LogStash::SETTINGS.get_default("path.logs")
 
   option "--log.level", "LEVEL", I18n.t("logstash.runner.flag.log_level"),
-    :default => LogStash::SETTINGS.get_default("log.level"),
-    :attribute_name => "log.level"
+         :default => LogStash::SETTINGS.get_default("log.level"),
+         :attribute_name => "log.level"
 
   option "--config.debug", :flag,
-    I18n.t("logstash.runner.flag.config_debug"),
-    :default => LogStash::SETTINGS.get_default("config.debug"),
-    :attribute_name => "config.debug"
+         I18n.t("logstash.runner.flag.config_debug"),
+         :default => LogStash::SETTINGS.get_default("config.debug"),
+         :attribute_name => "config.debug"
 
   # Other settings
   option ["-i", "--interactive"], "SHELL",
-    I18n.t("logstash.runner.flag.rubyshell"),
-    :attribute_name => "interactive"
+         I18n.t("logstash.runner.flag.rubyshell"),
+         :attribute_name => "interactive"
 
   option ["-V", "--version"], :flag,
-    I18n.t("logstash.runner.flag.version")
+         I18n.t("logstash.runner.flag.version")
 
   option ["-t", "--config.test_and_exit"], :flag,
-    I18n.t("logstash.runner.flag.configtest"),
-    :attribute_name => "config.test_and_exit",
-    :default => LogStash::SETTINGS.get_default("config.test_and_exit")
+         I18n.t("logstash.runner.flag.configtest"),
+         :attribute_name => "config.test_and_exit",
+         :default => LogStash::SETTINGS.get_default("config.test_and_exit")
 
   option ["-r", "--config.reload.automatic"], :flag,
-    I18n.t("logstash.runner.flag.auto_reload"),
-    :attribute_name => "config.reload.automatic",
-    :default => LogStash::SETTINGS.get_default("config.reload.automatic")
+         I18n.t("logstash.runner.flag.auto_reload"),
+         :attribute_name => "config.reload.automatic",
+         :default => LogStash::SETTINGS.get_default("config.reload.automatic")
 
   option ["--config.reload.interval"], "RELOAD_INTERVAL",
-    I18n.t("logstash.runner.flag.reload_interval"),
-    :attribute_name => "config.reload.interval",
-    :default => LogStash::SETTINGS.get_default("config.reload.interval")
+         I18n.t("logstash.runner.flag.reload_interval"),
+         :attribute_name => "config.reload.interval",
+         :default => LogStash::SETTINGS.get_default("config.reload.interval")
 
   option ["--api.enabled"], "ENABLED",
-    I18n.t("logstash.runner.flag.api_enabled"),
-    :attribute_name => 'api.enabled',
-    :default => LogStash::SETTINGS.get_default('api.enabled')
+         I18n.t("logstash.runner.flag.api_enabled"),
+         :attribute_name => 'api.enabled',
+         :default => LogStash::SETTINGS.get_default('api.enabled')
 
   option ["--api.http.host"], "HTTP_HOST",
-    I18n.t("logstash.runner.flag.api_http_host"),
-    :attribute_name => "api.http.host",
-    :default => LogStash::SETTINGS.get_default("api.http.host")
+         I18n.t("logstash.runner.flag.api_http_host"),
+         :attribute_name => "api.http.host",
+         :default => LogStash::SETTINGS.get_default("api.http.host")
 
   option ["--api.http.port"], "HTTP_PORT",
-    I18n.t("logstash.runner.flag.api_http_port"),
-    :attribute_name => "api.http.port",
-    :default => LogStash::SETTINGS.get_default("api.http.port")
+         I18n.t("logstash.runner.flag.api_http_port"),
+         :attribute_name => "api.http.port",
+         :default => LogStash::SETTINGS.get_default("api.http.port")
 
   option ["--log.format"], "FORMAT",
-    I18n.t("logstash.runner.flag.log_format"),
-    :attribute_name => "log.format",
-    :default => LogStash::SETTINGS.get_default("log.format")
+         I18n.t("logstash.runner.flag.log_format"),
+         :attribute_name => "log.format",
+         :default => LogStash::SETTINGS.get_default("log.format")
 
   option ["--path.settings"], "SETTINGS_DIR",
-    I18n.t("logstash.runner.flag.path_settings"),
-    :attribute_name => "path.settings",
-    :default => LogStash::SETTINGS.get_default("path.settings")
+         I18n.t("logstash.runner.flag.path_settings"),
+         :attribute_name => "path.settings",
+         :default => LogStash::SETTINGS.get_default("path.settings")
 
   ### DEPRECATED FLAGS ###
   deprecated_option ["--verbose"], :flag,
-    I18n.t("logstash.runner.flag.verbose"),
-    :new_flag => "log.level", :new_value => "info"
+                    I18n.t("logstash.runner.flag.verbose"),
+                    :new_flag => "log.level", :new_value => "info"
 
   deprecated_option ["--debug"], :flag,
-    I18n.t("logstash.runner.flag.debug"),
-    :new_flag => "log.level", :new_value => "debug"
+                    I18n.t("logstash.runner.flag.debug"),
+                    :new_flag => "log.level", :new_value => "debug"
 
   deprecated_option ["--quiet"], :flag,
-    I18n.t("logstash.runner.flag.quiet"),
-    :new_flag => "log.level", :new_value => "error"
+                    I18n.t("logstash.runner.flag.quiet"),
+                    :new_flag => "log.level", :new_value => "error"
 
   deprecated_option ["--http.enabled"], :flag,
-    I18n.t("logstash.runner.flag.http_enabled"),
-    :new_flag => "api.enabled", :passthrough => true # use settings to disambiguate
+                    I18n.t("logstash.runner.flag.http_enabled"),
+                    :new_flag => "api.enabled", :passthrough => true # use settings to disambiguate
 
   deprecated_option ["--http.host"], "HTTP_HOST",
-    I18n.t("logstash.runner.flag.http_host"),
-    :new_flag => "api.http.host", :passthrough => true # use settings to disambiguate
+                    I18n.t("logstash.runner.flag.http_host"),
+                    :new_flag => "api.http.host", :passthrough => true # use settings to disambiguate
 
   deprecated_option ["--http.port"], "HTTP_PORT",
-    I18n.t("logstash.runner.flag.http_port"),
-    :new_flag => "api.http.port", :passthrough => true # use settings to disambiguate
+                    I18n.t("logstash.runner.flag.http_port"),
+                    :new_flag => "api.http.port", :passthrough => true # use settings to disambiguate
 
   # We configure the registry and load any plugin that can register hooks
   # with logstash, this needs to be done before any operation.
@@ -311,7 +311,7 @@ def execute
 
     if JavaVersion::CURRENT < JavaVersion::JAVA_11
       logger.warn I18n.t("logstash.runner.java.version",
-                                             :java_home => java.lang.System.getProperty("java.home"))
+                         :java_home => java.lang.System.getProperty("java.home"))
     end
 
     logger.warn I18n.t("logstash.runner.java.home") if ENV["JAVA_HOME"]
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index edcaf6cd4e4..81a886fb30d 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -775,7 +775,7 @@ def validate(value)
         return unless invalid_value.any?
 
         raise ArgumentError,
-          "Failed to validate the setting \"#{@name}\" value(s): #{invalid_value.inspect}. Valid options are: #{@possible_strings.inspect}"
+              "Failed to validate the setting \"#{@name}\" value(s): #{invalid_value.inspect}. Valid options are: #{@possible_strings.inspect}"
       end
     end
 
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 2932b338cad..f0213707e11 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -430,7 +430,7 @@ def compose(*statements)
         it "should contain both section declarations, in order" do
           expect(compiled_section).to ir_eql(compose(
                                       splugin("aplugin", {"count" => 1}),
-                                        splugin("aplugin", {"count" => 2})
+                                      splugin("aplugin", {"count" => 2})
                                       ))
                                     end
       end
@@ -807,8 +807,8 @@ def compose(*statements)
                                           rand_meta,
                                           j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
                                           j.iIf(rand_meta, j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
-                                                   splugin("aplugin"),
-                                                   j.noop
+                                                splugin("aplugin"),
+                                                j.noop
                                                   ),
                                           j.iIf(
                                             rand_meta,
diff --git a/logstash-core/spec/logstash/instrument/collector_spec.rb b/logstash-core/spec/logstash/instrument/collector_spec.rb
index bd8b950a476..22878f9504e 100644
--- a/logstash-core/spec/logstash/instrument/collector_spec.rb
+++ b/logstash-core/spec/logstash/instrument/collector_spec.rb
@@ -36,7 +36,7 @@
       it "logs an error but dont crash" do
         expect(subject.logger).to receive(:error)
           .with("Collector: Cannot create concrete class for this metric type",
-        hash_including({ :type => wrong_type, :namespaces_path => namespaces_path }))
+                hash_including({ :type => wrong_type, :namespaces_path => namespaces_path }))
 
           subject.push(namespaces_path, key, wrong_type, :increment)
       end
@@ -50,7 +50,7 @@
 
         expect(subject.logger).to receive(:error)
           .with("Collector: Cannot record metric",
-          hash_including({ :exception => instance_of(LogStash::Instrument::MetricStore::NamespacesExpectedError) }))
+                hash_including({ :exception => instance_of(LogStash::Instrument::MetricStore::NamespacesExpectedError) }))
 
           subject.push(conflicting_namespaces, :random_key, :counter, :increment)
       end
diff --git a/logstash-core/spec/logstash/java_pipeline_spec.rb b/logstash-core/spec/logstash/java_pipeline_spec.rb
index 22915b85501..b1b85c53783 100644
--- a/logstash-core/spec/logstash/java_pipeline_spec.rb
+++ b/logstash-core/spec/logstash/java_pipeline_spec.rb
@@ -492,7 +492,7 @@ def flush(options)
           msg = "Defaulting pipeline worker threads to 1 because there are some filters that might not work with multiple worker threads"
           pipeline = mock_java_pipeline_from_string(test_config_with_filters)
           expect(pipeline.logger).to receive(:warn).with(msg,
-            hash_including({:count_was => worker_thread_count, :filters => ["dummyfilter"]}))
+                                                         hash_including({:count_was => worker_thread_count, :filters => ["dummyfilter"]}))
           pipeline.start
           expect(pipeline.worker_threads.size).to eq(safe_thread_count)
           pipeline.shutdown
diff --git a/spec/compliance/license_spec.rb b/spec/compliance/license_spec.rb
index 1d94a6a9f86..4d0f43d18de 100644
--- a/spec/compliance/license_spec.rb
+++ b/spec/compliance/license_spec.rb
@@ -72,7 +72,7 @@
       end.compact.each do |runtime_spec|
         runtime_spec.licenses.each do |license|
           expect(license.downcase).to match(expected_licenses),
-            lambda { "Runtime license check failed for gem #{runtime_spec.name} with version #{runtime_spec.version}" }
+                                      lambda { "Runtime license check failed for gem #{runtime_spec.name} with version #{runtime_spec.version}" }
         end
       end
     end
diff --git a/spec/unit/bootstrap/bundler_spec.rb b/spec/unit/bootstrap/bundler_spec.rb
index f635ba709f2..023cbaf744d 100644
--- a/spec/unit/bootstrap/bundler_spec.rb
+++ b/spec/unit/bootstrap/bundler_spec.rb
@@ -72,9 +72,9 @@
       expect(::Bundler::CLI).to receive(:start).with(bundler_args)
       expect(ENV).to receive(:replace) do |args|
         expect(args).to include("BUNDLE_PATH" => LogStash::Environment::BUNDLE_DIR,
-                                                            "BUNDLE_GEMFILE" => LogStash::Environment::GEMFILE_PATH,
-                                                            "BUNDLE_SILENCE_ROOT_WARNING" => "true",
-                                                            "BUNDLE_WITHOUT" => "development")
+                                "BUNDLE_GEMFILE" => LogStash::Environment::GEMFILE_PATH,
+                                "BUNDLE_SILENCE_ROOT_WARNING" => "true",
+                                "BUNDLE_WITHOUT" => "development")
       end
       expect(ENV).to receive(:replace) do |args|
         expect(args).not_to include(
diff --git a/x-pack/lib/helpers/elasticsearch_options.rb b/x-pack/lib/helpers/elasticsearch_options.rb
index 1cbd89a7991..0f6d4ccb5f9 100644
--- a/x-pack/lib/helpers/elasticsearch_options.rb
+++ b/x-pack/lib/helpers/elasticsearch_options.rb
@@ -215,16 +215,16 @@ def validate_authentication!(feature, settings, prefix)
 
       if provided_username && !provided_password
         raise(ArgumentError,
-          "When using #{prefix}#{feature}.elasticsearch.username, " +
-          "#{prefix}#{feature}.elasticsearch.password must also be set"
+              "When using #{prefix}#{feature}.elasticsearch.username, " +
+              "#{prefix}#{feature}.elasticsearch.password must also be set"
         )
       end
 
       if provided_cloud_id
         if provided_hosts
           raise(ArgumentError,
-            "Both #{prefix}#{feature}.elasticsearch.cloud_id and " +
-            "#{prefix}#{feature}.elasticsearch.hosts specified, please only use one of those"
+                "Both #{prefix}#{feature}.elasticsearch.cloud_id and " +
+                "#{prefix}#{feature}.elasticsearch.hosts specified, please only use one of those"
           )
         end
       end
diff --git a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
index 0221a4b8a53..bb34842dc04 100644
--- a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
+++ b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
@@ -50,9 +50,9 @@ def make(agent, extended_performance_collection = true, collection_interval = 10
 
     def format_process_stats(stats)
       stats.extract_metrics([:jvm, :process],
-        [:cpu, :percent],
-        :open_file_descriptors,
-        :max_file_descriptors
+                            [:cpu, :percent],
+                            :open_file_descriptors,
+                            :max_file_descriptors
       )
     end
 
@@ -60,7 +60,7 @@ def format_jvm_stats(stats)
       result = stats.extract_metrics([:jvm], :uptime_in_millis)
 
       heap_stats = stats.extract_metrics([:jvm, :memory, :heap],
-                      :used_in_bytes, :used_percent, :max_in_bytes)
+                                         :used_in_bytes, :used_percent, :max_in_bytes)
 
       result["mem"] = {
         "heap_used_in_bytes" => heap_stats[:used_in_bytes],
@@ -71,9 +71,9 @@ def format_jvm_stats(stats)
       result["gc"] = {
         "collectors" => {
           "old" => stats.extract_metrics([:jvm, :gc, :collectors, :old],
-                        :collection_time_in_millis, :collection_count),
+                                         :collection_time_in_millis, :collection_count),
           "young" => stats.extract_metrics([:jvm, :gc, :collectors, :young],
-                        :collection_time_in_millis, :collection_count)
+                                           :collection_time_in_millis, :collection_count)
         }
       }
 
diff --git a/x-pack/lib/x-pack/logstash_registry.rb b/x-pack/lib/x-pack/logstash_registry.rb
index 250e7fceb5a..e18d2d16bb3 100644
--- a/x-pack/lib/x-pack/logstash_registry.rb
+++ b/x-pack/lib/x-pack/logstash_registry.rb
@@ -29,7 +29,7 @@
 xpack_modules.each do |name|
   path = File.join(File.dirname(__FILE__), "..", "..", "modules", name, "configuration")
   LogStash::PLUGIN_REGISTRY.add(:modules, name,
-    LogStash::Modules::XpackScaffold.new(name, path, license_levels[name]))
+                                LogStash::Modules::XpackScaffold.new(name, path, license_levels[name]))
 end
 
 LogStash::PLUGIN_REGISTRY.add(:filter, "azure_event", LogStash::Filters::AzureEvent)
diff --git a/x-pack/qa/integration/support/helpers.rb b/x-pack/qa/integration/support/helpers.rb
index ac51503a6e7..6ba7082985a 100644
--- a/x-pack/qa/integration/support/helpers.rb
+++ b/x-pack/qa/integration/support/helpers.rb
@@ -105,8 +105,8 @@ def push_elasticsearch_config(pipeline_id, config, version = "1")
   major, minor = es_version
   if major >= 8 || (major == 7 && minor >= 10)
     elasticsearch_client.perform_request(:put, "_logstash/pipeline/#{pipeline_id}", {},
-      { :pipeline => config, :username => "log.stash", :pipeline_metadata => {:version => version },
-              :pipeline_settings => {"pipeline.batch.delay": "50"}, :last_modified => Time.now.utc.iso8601})
+                                         { :pipeline => config, :username => "log.stash", :pipeline_metadata => {:version => version },
+                                                 :pipeline_settings => {"pipeline.batch.delay": "50"}, :last_modified => Time.now.utc.iso8601})
   else
     elasticsearch_client.index :index => '.logstash', :type => "_doc", id: pipeline_id, :body => { :pipeline => config }
   end
