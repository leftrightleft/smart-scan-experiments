diff --git a/lib/logstash/filters/metrics.rb b/lib/logstash/filters/metrics.rb
index 8d60f7498a5..f5d02b85c73 100644
--- a/lib/logstash/filters/metrics.rb
+++ b/lib/logstash/filters/metrics.rb
@@ -46,6 +46,7 @@
 # * "thing.rate_15m" - the 15-minute rate of events (sliding)
 # * "thing.min" - the minimum value seen for this metric
 # * "thing.max" - the maximum value seen for this metric
+# * "thing.last" - the last value seen for this metric
 # * "thing.stddev" - the standard deviation for this metric
 # * "thing.mean" - the mean for this metric
 # * "thing.pXX" - the XXth percentile for this metric (see `percentiles`)
@@ -99,6 +100,34 @@
 #         metrics => [ "events.rate_1m", "%{events.rate_1m}" ]
 #       }
 #     }
+#
+# #### Example: anomaly detection by box and whisker
+#
+# Using the exists percentile to detect the last input anomaly or not. 
+# The agent conf like so:
+#
+#     filter {
+#         metrics {
+#             timer => {"rt" => "%{request_time}"}
+#             percentiles => [25, 75]
+#             add_tag => "percentile"
+#         }
+#         if "percentile" in [tags] {
+#             ruby {
+#                 code => "l=event['rt.p75']-event['rt.p25'];
+#                          event['rt.low']=event['rt.p25']-l;
+#                          event['rt.high']=event['rt.p75']+l"
+#             }
+#         }
+#     }
+#     output {
+#         if "percentile" in [tags] and ([rt.last] > [rt.high] or [rt.last] < [rt.low]) {
+#             exec {
+#                 command => "echo \"Anomaly: %{rt.last}\""
+#             }
+#         }
+#     }
+#
 class LogStash::Filters::Metrics < LogStash::Filters::Base
   config_name "metrics"
   milestone 1
@@ -148,6 +177,7 @@ def register
     require "thread_safe"
     @last_flush = Atomic.new(0) # how many seconds ago the metrics where flushed.
     @last_clear = Atomic.new(0) # how many seconds ago the metrics where cleared.
+    @last_value = {}
     @random_key_preffix = SecureRandom.hex
     unless (@rates - [1, 5, 15]).empty?
       raise LogStash::ConfigurationError, "Invalid rates configuration. possible rates are 1, 5, 15. Rates: #{rates}."
@@ -171,6 +201,7 @@ def filter(event)
 
     @timer.each do |name, value|
       @metric_timers[event.sprintf(name)].update(event.sprintf(value).to_f)
+      @last_value[event.sprintf(name)] = event.sprintf(value).to_f
     end
   end # def filter
 
@@ -198,6 +229,7 @@ def flush
       # timer's stddev currently returns variance, fix it.
       event["#{name}.stddev"] = metric.stddev ** 0.5
       event["#{name}.mean"] = metric.mean
+      event["#{name}.last"] = @last_value[name]
 
       @percentiles.each do |percentile|
         event["#{name}.p#{percentile}"] = metric.snapshot.value(percentile / 100.0)
diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index 9c579415d41..981002cb824 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -62,7 +62,7 @@ class LogStash::Filters::Mutate < LogStash::Filters::Base
 
   # Convert a field's value to a different type, like turning a string to an
   # integer. If the field value is an array, all members will be converted.
-  # If the field is a hash, no action will be taken.
+  # If the field is a hash, all values will be converted.
   #
   # Valid conversion targets are: integer, float, string.
   #
@@ -262,9 +262,8 @@ def convert(event)
       if original.nil?
         next
       elsif original.is_a?(Hash)
-        @logger.debug("I don't know how to type convert a hash, skipping",
-                      :field => field, :value => original)
-        next
+        value = {}
+        original.each_pair { |k, v| value[k] = converter.call(v) }
       elsif original.is_a?(Array)
         value = original.map { |v| converter.call(v) }
       else
diff --git a/spec/filters/metrics.rb b/spec/filters/metrics.rb
index b34af869c19..82bd0835c6a 100644
--- a/spec/filters/metrics.rb
+++ b/spec/filters/metrics.rb
@@ -148,6 +148,10 @@
         insist { subject.first['http.request_time.max'] } == 30.0
       end
 
+      it "should include last value" do
+        insist { subject.first['http.request_time.last'] } == 30.0
+      end
+
       it "should include percentile value" do
         insist { subject.first['http.request_time.p99'] } == 30.0
       end
