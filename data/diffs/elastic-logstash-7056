diff --git a/qa/integration/integration_tests.gemspec b/qa/integration/integration_tests.gemspec
index 8a95b4a015a..2de232543e4 100644
--- a/qa/integration/integration_tests.gemspec
+++ b/qa/integration/integration_tests.gemspec
@@ -21,4 +21,5 @@ Gem::Specification.new do |s|
   s.add_development_dependency 'logstash-devutils'
   s.add_development_dependency 'flores'
   s.add_development_dependency 'rubyzip'
+  s.add_development_dependency 'ruby-progressbar'
 end
diff --git a/qa/integration/services/elasticsearch_service.rb b/qa/integration/services/elasticsearch_service.rb
index 66963aca5de..b28b8a22c82 100644
--- a/qa/integration/services/elasticsearch_service.rb
+++ b/qa/integration/services/elasticsearch_service.rb
@@ -1,12 +1,50 @@
 require 'elasticsearch'
+require_relative './helpers'
+require_relative '../framework/helpers'
 
 class ElasticsearchService < Service
   def initialize(settings)
     super("elasticsearch", settings)
+    @version = ENV["ES_VERSION"] || "5.0.1"
+    @port = 9200
   end
 
   def get_client
-    Elasticsearch::Client.new(:hosts => "localhost:9200")
+    Elasticsearch::Client.new(:hosts => "localhost:#{@port}")
   end
 
-end
\ No newline at end of file
+  def do_setup
+    unless Dir.exists? @home
+      url = "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-#{@version}.tar.gz"
+      target_name = "elasticsearch.tar.gz"
+      file = download(url, @install_dir, target_name)
+      untgz(file, @home, strip_path: 1)
+      File.delete(file)
+    end
+    self.do_start
+  end
+
+  def do_start (args = [])
+    cmd = [File.join(@home, 'bin', 'elasticsearch')]
+    cmd += args
+    puts "Starting Elasticsearch with #{cmd.join(" ")}"
+    @process = BackgroundProcess.new(cmd).start
+
+    puts "Waiting for Elasticsearch to respond at port #{@port}..."
+    wait_for_port(@port, 120)
+    if is_port_open? @port
+      puts "Elasticsearch is Up !"
+    else
+      puts "Elasticsearch is unresponsive at port #{@port}"
+    end
+  end
+
+  def do_stop
+    @process.stop
+  end
+
+  def do_teardown
+    self.do_stop
+  end
+
+end
diff --git a/qa/integration/services/elasticsearch_setup.sh b/qa/integration/services/elasticsearch_setup.sh
deleted file mode 100755
index 0f916c9cce0..00000000000
--- a/qa/integration/services/elasticsearch_setup.sh
+++ /dev/null
@@ -1,43 +0,0 @@
-#!/bin/bash
-set -ex
-current_dir="$(dirname "$0")"
-
-source "$current_dir/helpers.sh"
-
-if [ -n "${ES_VERSION+1}" ]; then
-  echo "Elasticsearch version is $ES_VERSION"
-  version=$ES_VERSION
-else
-   version=5.0.1
-fi
-
-ES_HOME=$INSTALL_DIR/elasticsearch
-
-setup_es() {
-  if [ ! -d $ES_HOME ]; then
-      local version=$1
-      download_url=https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-$version.tar.gz
-      curl -sL $download_url > $INSTALL_DIR/elasticsearch.tar.gz
-      mkdir $ES_HOME
-      tar -xzf $INSTALL_DIR/elasticsearch.tar.gz --strip-components=1 -C $ES_HOME/.
-      rm $INSTALL_DIR/elasticsearch.tar.gz
-  fi
-}
-
-start_es() {
-  es_args=$@
-  $ES_HOME/bin/elasticsearch $es_args -p $ES_HOME/elasticsearch.pid > /tmp/elasticsearch.log 2>/dev/null &
-  count=120
-  echo "Waiting for elasticsearch to respond..."
-  while ! curl --silent localhost:9200 && [[ $count -ne 0 ]]; do
-      count=$(( $count - 1 ))
-      [[ $count -eq 0 ]] && return 1
-      sleep 1
-  done
-  echo "Elasticsearch is Up !"
-  return 0
-}
-
-setup_install_dir
-setup_es $version
-start_es
diff --git a/qa/integration/services/elasticsearch_teardown.sh b/qa/integration/services/elasticsearch_teardown.sh
deleted file mode 100755
index f8e4dd51139..00000000000
--- a/qa/integration/services/elasticsearch_teardown.sh
+++ /dev/null
@@ -1,15 +0,0 @@
-#!/bin/bash
-set -e
-current_dir="$(dirname "$0")"
-
-source "$current_dir/helpers.sh"
-
-ES_HOME=$INSTALL_DIR/elasticsearch
-
-stop_es() {
-    pid=$(cat $ES_HOME/elasticsearch.pid)
-    [ "x$pid" != "x" ] && [ "$pid" -gt 0 ]
-    kill -SIGTERM $pid
-}
-
-stop_es
\ No newline at end of file
diff --git a/qa/integration/services/filebeat_service.rb b/qa/integration/services/filebeat_service.rb
index 9904499dd16..7a1fcfcbdb1 100644
--- a/qa/integration/services/filebeat_service.rb
+++ b/qa/integration/services/filebeat_service.rb
@@ -1,40 +1,9 @@
 # encoding: utf-8
+require_relative './helpers'
+
 class FilebeatService < Service
   FILEBEAT_CMD = [File.join(File.dirname(__FILE__), "installed", "filebeat", "filebeat"), "-c"]
 
-  class BackgroundProcess
-    def initialize(cmd)
-      @client_out = Stud::Temporary.file
-      @client_out.sync
-
-      @process = ChildProcess.build(*cmd)
-      @process.duplex = true
-      @process.io.stdout = @process.io.stderr = @client_out
-      ChildProcess.posix_spawn = true
-    end
-
-    def start
-      @process.start
-      sleep(0.1)
-      self
-    end
-
-    def execution_output
-      @client_out.rewind
-
-      # can be used to helper debugging when a test fails
-      @execution_output = @client_out.read
-    end
-
-    def stop
-      begin
-        @process.poll_for_exit(5)
-      rescue ChildProcess::TimeoutError
-        Process.kill("KILL", @process.pid)
-      end
-    end
-  end
-
   def initialize(settings)
     super("filebeat", settings)
   end
diff --git a/qa/integration/services/helpers.rb b/qa/integration/services/helpers.rb
new file mode 100755
index 00000000000..e8ccec2e22b
--- /dev/null
+++ b/qa/integration/services/helpers.rb
@@ -0,0 +1,84 @@
+# encoding: utf-8
+require 'childprocess'
+require 'stud/temporary'
+require 'open-uri'
+require 'ruby-progressbar'
+require 'zlib'
+require 'rubygems/package'
+
+# Spawn a command that run in background.
+class BackgroundProcess
+  def initialize(cmd)
+    @client_out = Stud::Temporary.file
+    @client_out.sync
+
+    @process = ChildProcess.build(*cmd)
+    @process.duplex = true
+    @process.io.stdout = @process.io.stderr = @client_out
+    ChildProcess.posix_spawn = true
+  end
+
+  def start
+    @process.start
+    sleep(0.1)
+    self
+  end
+
+  def execution_output
+    @client_out.rewind
+
+    # can be used to helper debugging when a test fails
+    @execution_output = @client_out.read
+  end
+
+  def stop
+    begin
+      @process.poll_for_exit(5)
+    rescue ChildProcess::TimeoutError
+      Process.kill("KILL", @process.pid)
+    end
+  end
+end
+
+# Download tarball to install directory.
+def download (url, to_dir, to_name)
+  dst = File.join(to_dir, to_name)
+  pb = nil
+  puts "Downloading #{url} to #{dst}."
+  open(url,
+    :content_length_proc => lambda {|l|
+      pb = ProgressBar.create(:total => l) if l
+    },
+    :progress_proc => lambda {|s|
+      pb.progress = s if pb
+    }) do |io|
+      File.open(dst, "wb") do |f|
+        IO.copy_stream(io, f)
+      end
+  end
+  puts "Download complete."
+  dst
+end
+
+# Unpack a TAR Gzip file.
+def untgz (tgz, dst_dir, options = {})
+  options[:strip_path] ||= 0
+  fs = File::SEPARATOR
+  FileUtils.mkdir_p (dst_dir)
+  puts "Extracting #{tgz} in #{dst_dir}."
+  File.open(tgz, "rb") do |file|
+    Zlib::GzipReader.open(file) do |gz|
+      Gem::Package::TarReader.new(gz).each_entry do |entry|
+        entry_new_name = entry.full_name.split(fs).slice(options[:strip_path]..-1).join(fs)
+        if entry.directory?
+          FileUtils.mkdir_p(File.join(dst_dir, entry_new_name))
+        else
+          File.open(File.join(dst_dir, entry_new_name), "wb", entry.header.mode) do |fe|
+            fe.write(entry.read)
+          end
+        end
+      end
+    end
+  end
+  puts "Extract complete."
+end
diff --git a/qa/integration/services/service.rb b/qa/integration/services/service.rb
index 63b898d30d9..9c7bc67766f 100644
--- a/qa/integration/services/service.rb
+++ b/qa/integration/services/service.rb
@@ -6,27 +6,61 @@ class Service
   def initialize(name, settings)
     @name = name
     @settings = settings
+    @working_dir = File.dirname(__FILE__)
+    @install_dir = File.join(@working_dir, 'installed')
+    @home = File.join(@install_dir, name)
     @setup_script = File.expand_path("../#{name}_setup.sh", __FILE__)
     @teardown_script = File.expand_path("../#{name}_teardown.sh", __FILE__)
   end
 
   def setup
+    # Create the services' home directory.
+    Dir.mkdir @install_dir unless Dir.exist? @install_dir
     puts "Setting up #{@name} service"
-    if File.exists?(@setup_script)
-      `#{@setup_script}`
+    if defined? do_setup
+      do_setup
     else
-      puts "Setup script not found for #{@name}"
+      if File.exists?(@setup_script)
+        `#{@setup_script}`
+      else
+        puts "Setup script not found for #{@name}"
+      end
     end
     puts "#{@name} service setup complete"
   end
 
   def teardown
     puts "Tearing down #{@name} service"
-    if File.exists?(@setup_script)
-      `#{@teardown_script}`
+    if defined? do_stop
+      do_stop
     else
-      puts "Teardown script not found for #{@name}"
+      if File.exists?(@setup_script)
+        `#{@teardown_script}`
+      else
+        puts "Teardown script not found for #{@name}"
+      end
     end
     puts "#{@name} service teardown complete"
   end
+
+  def start
+    puts "Starting #{@name} service."
+    if defined? do_start
+      do_start
+    else
+      puts "Start routine is not implemented."
+    end
+    puts "Start complete."
+  end
+
+  def stop
+    puts "Stopping #{@name} service."
+    if defined? do_stop
+      do_stop
+    else
+      puts "Stop routine is not implemented."
+    end
+    puts "Stop complete."
+  end
+
 end
