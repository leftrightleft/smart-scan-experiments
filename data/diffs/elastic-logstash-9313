diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/FileCheckpointIO.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/FileCheckpointIO.java
index 384261e8462..afceb22f6be 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/FileCheckpointIO.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/FileCheckpointIO.java
@@ -1,6 +1,5 @@
 package org.logstash.ackedqueue.io;
 
-import java.io.ByteArrayInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -11,8 +10,6 @@
 import java.nio.file.StandardCopyOption;
 import java.util.zip.CRC32;
 import org.logstash.ackedqueue.Checkpoint;
-import org.logstash.common.io.BufferedChecksumStreamInput;
-import org.logstash.common.io.InputStreamStreamInput;
 
 public class FileCheckpointIO implements CheckpointIO {
 //    Checkpoint file structure
@@ -51,11 +48,7 @@ public FileCheckpointIO(String dirPath) {
     @Override
     public Checkpoint read(String fileName) throws IOException {
         return read(
-            new BufferedChecksumStreamInput(
-                new InputStreamStreamInput(
-                    new ByteArrayInputStream(Files.readAllBytes(Paths.get(dirPath, fileName)))
-                )
-            )
+            ByteBuffer.wrap(Files.readAllBytes(Paths.get(dirPath, fileName)))
         );
     }
 
@@ -102,17 +95,18 @@ public String tailFileName(int pageNum) {
         return TAIL_CHECKPOINT + pageNum;
     }
 
-    private static Checkpoint read(BufferedChecksumStreamInput crcsi) throws IOException {
-        int version = (int) crcsi.readShort();
+    private static Checkpoint read(ByteBuffer data) throws IOException {
+        int version = (int) data.getShort();
         // TODO - build reader for this version
-        int pageNum = crcsi.readInt();
-        int firstUnackedPageNum = crcsi.readInt();
-        long firstUnackedSeqNum = crcsi.readLong();
-        long minSeqNum = crcsi.readLong();
-        int elementCount = crcsi.readInt();
-
-        int calcCrc32 = (int)crcsi.getChecksum();
-        int readCrc32 = crcsi.readInt();
+        int pageNum = data.getInt();
+        int firstUnackedPageNum = data.getInt();
+        long firstUnackedSeqNum = data.getLong();
+        long minSeqNum = data.getLong();
+        int elementCount = data.getInt();
+        final CRC32 crc32 = new CRC32();
+        crc32.update(data.array(), 0, BUFFER_SIZE - Integer.BYTES);
+        int calcCrc32 = (int) crc32.getValue();
+        int readCrc32 = data.getInt();
         if (readCrc32 != calcCrc32) {
             throw new IOException(String.format("Checkpoint checksum mismatch, expected: %d, actual: %d", calcCrc32, readCrc32));
         }
diff --git a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksum.java b/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksum.java
deleted file mode 100644
index 87558d32cee..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksum.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package org.logstash.common.io;
-
-import java.util.zip.Checksum;
-
-/**
- * Wraps another {@link Checksum} with an internal buffer
- * to speed up checksum calculations.
- */
-public class BufferedChecksum implements Checksum {
-    private final Checksum in;
-    private final byte buffer[];
-    private int upto;
-    /** Default buffer size: 256 */
-    public static final int DEFAULT_BUFFERSIZE = 256;
-
-    /**
-     * Create a new BufferedChecksum with {@link #DEFAULT_BUFFERSIZE}
-     *
-     * @param in The checksum
-     */
-    public BufferedChecksum(Checksum in) {
-        this(in, DEFAULT_BUFFERSIZE);
-    }
-
-    /**
-     * Create a new BufferedChecksum with the specified buffer size
-     *
-     * @param in The checksum
-     * @param bufferSize The buffer size in bytes
-     */
-    public BufferedChecksum(Checksum in, int bufferSize) {
-        this.in = in;
-        this.buffer = new byte[bufferSize];
-    }
-
-    @Override
-    public void update(int b) {
-        if (upto == buffer.length) {
-            flush();
-        }
-        buffer[upto++] = (byte) b;
-    }
-
-    @Override
-    public void update(byte[] b, int off, int len) {
-        if (len >= buffer.length) {
-            flush();
-            in.update(b, off, len);
-        } else {
-            if (upto + len > buffer.length) {
-                flush();
-            }
-            System.arraycopy(b, off, buffer, upto, len);
-            upto += len;
-        }
-    }
-
-    @Override
-    public long getValue() {
-        flush();
-        return in.getValue();
-    }
-
-    @Override
-    public void reset() {
-        upto = 0;
-        in.reset();
-    }
-
-    private void flush() {
-        if (upto > 0) {
-            in.update(buffer, 0, upto);
-        }
-        upto = 0;
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamInput.java
deleted file mode 100644
index 45bfe9a4751..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamInput.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package org.logstash.common.io;
-
-import java.io.IOException;
-import java.util.zip.CRC32;
-import java.util.zip.Checksum;
-
-/**
- * Similar to Lucene's BufferedChecksumIndexInput, however this wraps a
- * {@link StreamInput} so anything read will update the checksum
- */
-public final class BufferedChecksumStreamInput extends StreamInput {
-    private static final int SKIP_BUFFER_SIZE = 1024;
-    private byte[] skipBuffer;
-    private final StreamInput in;
-    private final Checksum digest;
-
-    public BufferedChecksumStreamInput(StreamInput in) {
-        this.in = in;
-        this.digest = new BufferedChecksum(new CRC32());
-    }
-
-    public long getChecksum() {
-        return this.digest.getValue();
-    }
-
-    @Override
-    public byte readByte() throws IOException {
-        final byte b = in.readByte();
-        digest.update(b);
-        return b;
-    }
-
-    @Override
-    public void readBytes(byte[] b, int offset, int len) throws IOException {
-        in.readBytes(b, offset, len);
-        digest.update(b, offset, len);
-    }
-
-    @Override
-    public void reset() throws IOException {
-        in.reset();
-        digest.reset();
-    }
-
-    @Override
-    public int read() throws IOException {
-        return readByte() & 0xFF;
-    }
-
-    @Override
-    public void close() throws IOException {
-        in.close();
-    }
-
-    @Override
-    public boolean markSupported() {
-        return in.markSupported();
-    }
-
-
-    @Override
-    public long skip(long numBytes) throws IOException {
-        if (numBytes < 0) {
-            throw new IllegalArgumentException("numBytes must be >= 0, got " + numBytes);
-        }
-        if (skipBuffer == null) {
-            skipBuffer = new byte[SKIP_BUFFER_SIZE];
-        }
-        assert skipBuffer.length == SKIP_BUFFER_SIZE;
-        long skipped = 0;
-        for (; skipped < numBytes; ) {
-            final int step = (int) Math.min(SKIP_BUFFER_SIZE, numBytes - skipped);
-            readBytes(skipBuffer, 0, step);
-            skipped += step;
-        }
-        return skipped;
-    }
-
-    @Override
-    public int available() throws IOException {
-        return in.available();
-    }
-
-    @Override
-    public synchronized void mark(int readlimit) {
-        in.mark(readlimit);
-    }
-
-    public void resetDigest() {
-        digest.reset();
-    }
-}
-
diff --git a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamOutput.java b/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamOutput.java
deleted file mode 100644
index f37b71f92bf..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/BufferedChecksumStreamOutput.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.logstash.common.io;
-
-
-import java.io.IOException;
-import java.util.zip.CRC32;
-import java.util.zip.Checksum;
-
-/**
- * Similar to Lucene's BufferedChecksumIndexOutput, however this wraps a
- * {@link StreamOutput} so anything written will update the checksum
- */
-public final class BufferedChecksumStreamOutput extends StreamOutput {
-    private final StreamOutput out;
-    private final Checksum digest;
-
-    public BufferedChecksumStreamOutput(StreamOutput out) {
-        this.out = out;
-        this.digest = new BufferedChecksum(new CRC32());
-    }
-
-    public long getChecksum() {
-        return this.digest.getValue();
-    }
-
-    @Override
-    public void writeByte(byte b) throws IOException {
-        out.writeByte(b);
-        digest.update(b);
-    }
-
-    @Override
-    public void writeBytes(byte[] b, int offset, int length) throws IOException {
-        out.writeBytes(b, offset, length);
-        digest.update(b, offset, length);
-    }
-
-    @Override
-    public void flush() throws IOException {
-        out.flush();
-    }
-
-    @Override
-    public void close() throws IOException {
-        out.close();
-    }
-
-    @Override
-    public void reset() throws IOException {
-        out.reset();
-        digest.reset();
-    }
-
-    public void resetDigest() {
-        digest.reset();
-    }
-}
-
diff --git a/logstash-core/src/main/java/org/logstash/common/io/ByteArrayStreamOutput.java b/logstash-core/src/main/java/org/logstash/common/io/ByteArrayStreamOutput.java
deleted file mode 100644
index a4517705286..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/ByteArrayStreamOutput.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package org.logstash.common.io;
-
-public class ByteArrayStreamOutput extends StreamOutput {
-    private byte[] bytes;
-
-    private int pos;
-    private int limit;
-
-    public ByteArrayStreamOutput(byte[] bytes) {
-        reset(bytes);
-    }
-
-    public void reset(byte[] bytes) {
-        reset(bytes, 0, bytes.length);
-    }
-
-    public void reset(byte[] bytes, int offset, int len) {
-        this.bytes = bytes;
-        pos = offset;
-        limit = offset + len;
-    }
-
-    public void setWriteWindow(int offset, int len) {
-        pos = offset;
-        limit = offset + len;
-    }
-
-    public void reset() {
-    }
-
-    public void reset(int offset) {
-        pos = offset;
-    }
-
-    public int getPosition() {
-        return pos;
-    }
-
-    @Override
-    public void writeByte(byte b) {
-        assert pos < limit :  String.format("ByteArrayStreamOutput#writeByte pos=%d !< limit=%d", pos, limit);
-        bytes[pos++] = b;
-    }
-
-    @Override
-    public void writeBytes(byte[] b, int offset, int length) {
-        assert pos + length <= limit;
-        System.arraycopy(b, offset, bytes, pos, length);
-        pos += length;
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
deleted file mode 100644
index fa7697fb379..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package org.logstash.common.io;
-
-import java.io.EOFException;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-
-public class ByteBufferStreamInput extends StreamInput {
-
-    private final ByteBuffer buffer;
-
-    public ByteBufferStreamInput(ByteBuffer buffer) {
-        this.buffer = buffer;
-    }
-
-    @Override
-    public int read() {
-        if (!buffer.hasRemaining()) {
-            return -1;
-        }
-        return buffer.get() & 0xFF;
-    }
-
-    @Override
-    public byte readByte() throws IOException {
-        if (!buffer.hasRemaining()) {
-            throw new EOFException();
-        }
-        return buffer.get();
-    }
-
-    @Override
-    public int read(byte[] b, int off, int len) {
-        if (!buffer.hasRemaining()) {
-            return -1;
-        }
-
-        len = Math.min(len, buffer.remaining());
-        buffer.get(b, off, len);
-        return len;
-    }
-
-    @Override
-    public long skip(long n) {
-        if (n > buffer.remaining()) {
-            int ret = buffer.position();
-            buffer.position(buffer.limit());
-            return ret;
-        }
-        buffer.position((int) (buffer.position() + n));
-        return n;
-    }
-
-    @Override
-    public void readBytes(byte[] b, int offset, int len) throws IOException {
-        if (buffer.remaining() < len) {
-            throw new EOFException();
-        }
-        buffer.get(b, offset, len);
-    }
-
-    @Override
-    public void reset() {
-        buffer.reset();
-    }
-
-    public void movePosition(int position) {
-        buffer.position(position);
-    }
-
-    @Override
-    public int available() {
-        return buffer.remaining();
-    }
-
-    @Override
-    public void mark(int readlimit) {
-        buffer.mark();
-    }
-
-    @Override
-    public boolean markSupported() {
-        return true;
-    }
-
-    @Override
-    public void close() {
-    }
-}
-
diff --git a/logstash-core/src/main/java/org/logstash/common/io/InputStreamStreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/InputStreamStreamInput.java
deleted file mode 100644
index 002fad88c17..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/InputStreamStreamInput.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package org.logstash.common.io;
-
-import java.io.EOFException;
-import java.io.IOException;
-import java.io.InputStream;
-
-public class InputStreamStreamInput extends StreamInput {
-
-    private final InputStream is;
-
-    public InputStreamStreamInput(InputStream is) {
-        this.is = is;
-    }
-
-    @Override
-    public byte readByte() throws IOException {
-        int ch = is.read();
-        if (ch < 0)
-            throw new EOFException();
-        return (byte) (ch);
-    }
-
-    @Override
-    public void readBytes(byte[] b, int offset, int len) throws IOException {
-        if (len < 0)
-            throw new IndexOutOfBoundsException();
-        final int read = readFully(is, b, offset, len);
-        if (read != len) {
-            throw new EOFException();
-        }
-    }
-
-    @Override
-    public void reset() throws IOException {
-        is.reset();
-    }
-
-    @Override
-    public boolean markSupported() {
-        return is.markSupported();
-    }
-
-    @Override
-    public void mark(int readlimit) {
-        is.mark(readlimit);
-    }
-
-    @Override
-    public void close() throws IOException {
-        is.close();
-    }
-
-    @Override
-    public int available() throws IOException {
-        return is.available();
-    }
-
-    @Override
-    public int read() throws IOException {
-        return is.read();
-    }
-
-    @Override
-    public int read(byte[] b) throws IOException {
-        return is.read(b);
-    }
-
-    @Override
-    public int read(byte[] b, int off, int len) throws IOException {
-        return is.read(b, off, len);
-    }
-
-    @Override
-    public long skip(long n) throws IOException {
-        return is.skip(n);
-    }
-
-    private static int readFully(InputStream reader, byte[] dest, int offset, int len) throws IOException {
-        int read = 0;
-        while (read < len) {
-            final int r = reader.read(dest, offset + read, len - read);
-            if (r == -1) {
-                break;
-            }
-            read += r;
-        }
-        return read;
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/common/io/StreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/StreamInput.java
deleted file mode 100644
index 71d1803ad1a..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/StreamInput.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package org.logstash.common.io;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-public abstract class StreamInput extends InputStream {
-    /**
-     * Reads and returns a single byte.
-     * @return byte from stream
-     * @throws IOException if error occurs while reading content
-     */
-    public abstract byte readByte() throws IOException;
-
-    /**
-     * Reads a specified number of bytes into an array at the specified offset.
-     *
-     * @param b      the array to read bytes into
-     * @param offset the offset in the array to start storing bytes
-     * @param len    the number of bytes to read
-     * @throws IOException if an error occurs while reading content
-     */
-    public abstract void readBytes(byte[] b, int offset, int len) throws IOException;
-
-    /**
-     * Reads four bytes and returns an int.
-     *
-     * @return four-byte integer value from bytes
-     * @throws IOException if an error occurs while reading content
-     */
-    public int readInt() throws IOException {
-        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)
-                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF);
-    }
-
-    /**
-     * Reads two bytes and returns a short.
-     *
-     * @return short value from bytes
-     * @throws IOException if an error occurs while reading content
-     */
-    public short readShort() throws IOException {
-        int i = ((readByte() & 0xFF) <<  8);
-        int j = (readByte() & 0xFF);
-        return (short) (i | j);
-    }
-
-    /**
-     * Reads eight bytes and returns a long.
-     *
-     * @return long value from bytes
-     * @throws IOException if an error occurs while reading content
-     */
-    public long readLong() throws IOException {
-        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL);
-    }
-
-    public byte[] readByteArray() throws IOException {
-        int length = readInt();
-        byte[] values = new byte[length];
-        for (int i = 0; i < length; i++) {
-            values[i] = readByte();
-        }
-        return values;
-    }
-
-}
diff --git a/logstash-core/src/main/java/org/logstash/common/io/StreamOutput.java b/logstash-core/src/main/java/org/logstash/common/io/StreamOutput.java
deleted file mode 100644
index 8e3e88cc3ca..00000000000
--- a/logstash-core/src/main/java/org/logstash/common/io/StreamOutput.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.logstash.common.io;
-
-import java.io.IOException;
-import java.io.OutputStream;
-
-public abstract class StreamOutput extends OutputStream {
-    @Override
-    public void write(int b) throws IOException {
-        writeByte((byte) b);
-    }
-
-    public abstract void writeByte(byte b) throws IOException;
-
-    public abstract void writeBytes(byte[] b, int offset, int length) throws IOException;
-
-    public abstract void reset() throws IOException;
-
-    /**
-     * Writes an int as four bytes.
-     *
-     * @param i The int to write
-     * @throws IOException if an error occurs while writing content
-     */
-    public void writeInt(int i) throws IOException {
-        writeByte((byte) (i >> 24));
-        writeByte((byte) (i >> 16));
-        writeByte((byte) (i >> 8));
-        writeByte((byte) i);
-    }
-
-    /**
-     * Writes a long as eight bytes.
-     *
-     * @param i the long to write
-     * @throws IOException if an error occurs while writing content
-     */
-    public void writeLong(long i) throws IOException {
-        writeInt((int) (i >> 32));
-        writeInt((int) i);
-    }
-
-    /**
-     * Writes an array of bytes.
-     *
-     * @param b the bytes to write
-     * @throws IOException if an error occurs while writing content
-     */
-    public void writeByteArray(byte[] b) throws IOException {
-        writeInt(b.length);
-        writeBytes(b, 0, b.length);
-    }
-}
