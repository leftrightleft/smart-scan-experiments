diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index 33c05fbc480..a946bc045f8 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -120,7 +120,8 @@ setup_java() {
       done
   fi
   # then override with anything provided
-  LS_JAVA_OPTS="$(parse_jvm_options "$LS_JVM_OPTS") $LS_JAVA_OPTS"
+
+  LS_JAVA_OPTS="$(parse_jvm_options "$LS_JVM_OPTS") -Djruby.home=$LOGSTASH_HOME/vendor/jruby $LS_JAVA_OPTS"
   JAVA_OPTS=$LS_JAVA_OPTS
 
   # jruby launcher uses JAVACMD as its java executable and JAVA_OPTS as the JVM options
diff --git a/build.gradle b/build.gradle
index 7674003f42e..97642eff89e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -131,7 +131,7 @@ tasks.register("configureArchitecture") {
     String esArch = arch
 
     // For aarch64 architectures, beats and elasticsearch name their artifacts differently
-    if (arch == "aarch64") {i
+    if (arch == "aarch64") {
         beatsArch="arm64"
         esArch="aarch64"
     } else if (arch == "amd64") {
@@ -344,6 +344,8 @@ tasks.register("installIntegrationTestGems") {
   }
 }
 
+
+
 tasks.register("downloadFilebeat", Download) {
     dependsOn  configureArtifactInfo
     description "Download Filebeat Snapshot for current branch version: ${version}"
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 5c837b2e6de..5bae1324bba 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -104,6 +104,7 @@ tasks.register("rubyTests", Test) {
     inputs.files fileTree("${projectDir}/lib")
     inputs.files fileTree("${projectDir}/spec")
     systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+    systemProperty 'jruby.home', "${rootProject.projectDir}/vendor/jruby"
     include '/org/logstash/RSpecTests.class'
     include '/org/logstash/config/ir/ConfigCompilerTest.class'
     include '/org/logstash/config/ir/CompiledPipelineTest.class'
diff --git a/qa/integration/build.gradle b/qa/integration/build.gradle
index bb618804b6e..f48313ef057 100644
--- a/qa/integration/build.gradle
+++ b/qa/integration/build.gradle
@@ -45,5 +45,6 @@ tasks.register("integrationTests", Test) {
   inputs.files fileTree("${projectDir}/fixtures")
   inputs.files fileTree("${projectDir}/specs")
   systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+  systemProperty 'jruby.home', "${rootProject.projectDir}/vendor/jruby"
   include '/org/logstash/integration/RSpecTests.class'
 }
diff --git a/qa/integration/services/elasticsearch_setup.sh b/qa/integration/services/elasticsearch_setup.sh
index c5cebcf1ebf..f385f8dd979 100755
--- a/qa/integration/services/elasticsearch_setup.sh
+++ b/qa/integration/services/elasticsearch_setup.sh
@@ -8,7 +8,8 @@ ES_HOME="$current_dir/../../../build/elasticsearch"
 
 start_es() {
   es_args=$@
-  $ES_HOME/bin/elasticsearch -Epath.data=/tmp/ls_integration/es-data -Epath.logs=/tmp/ls_integration/es-logs $es_args -p $ES_HOME/elasticsearch.pid > /tmp/elasticsearch.log 2>/dev/null &
+  # Force use of bundled JDK with Elasticsearch
+  JAVA_HOME= $ES_HOME/bin/elasticsearch -Epath.data=/tmp/ls_integration/es-data -Epath.logs=/tmp/ls_integration/es-logs $es_args -p /tmp/ls_integration/elasticsearch.pid > /tmp/elasticsearch.log &
   count=120
   echo "Waiting for elasticsearch to respond..."
   while ! curl --silent localhost:9200 && [[ $count -ne 0 ]]; do
@@ -21,4 +22,8 @@ start_es() {
 }
 
 export ES_JAVA_OPTS="-Xms512m -Xmx512m"
+
+# check for and cleanup old es instance
+stop_es
+
 start_es
diff --git a/qa/integration/services/elasticsearch_teardown.sh b/qa/integration/services/elasticsearch_teardown.sh
index f14f44f183b..9ac4aa63f52 100755
--- a/qa/integration/services/elasticsearch_teardown.sh
+++ b/qa/integration/services/elasticsearch_teardown.sh
@@ -3,25 +3,4 @@ set -e
 current_dir="$(dirname "$0")"
 
 source "$current_dir/helpers.sh"
-
-ES_HOME="$current_dir/../../../build/elasticsearch"
-
-stop_es() {
-    local count=10
-    [ ! -f $ES_HOME/elasticsearch.pid ] && return 0
-    pid=$(cat $ES_HOME/elasticsearch.pid) 2>/dev/null
-    if [ "x$pid" != "x" ] && [ "$pid" -gt 0 ]
-    then
-      while kill -SIGTERM "$pid" 2>/dev/null && [ $count -ne 0 ]; do
-         echo "waiting for elasticsearch to stop"
-         count=$(( $count - 1 ))
-         [[ $count -eq 0 ]] && echo "killing elasticsearch" && kill -9 $pid 2>/dev/null || true
-         sleep 0.5
-      done
-    fi
-}
-
 stop_es
-
-rm -rf /tmp/ls_integration/es-data
-rm -rf /tmp/ls_integration/es-logs
diff --git a/qa/integration/services/helpers.sh b/qa/integration/services/helpers.sh
index f55be0f3099..4899b29aa5c 100644
--- a/qa/integration/services/helpers.sh
+++ b/qa/integration/services/helpers.sh
@@ -55,3 +55,20 @@ clean_install_dir() {
         rm -rf $INSTALL_DIR
     fi
 }
+
+stop_es() {
+    local count=10
+    [ ! -f /tmp/ls_integration/elasticsearch.pid ] && return 0
+    pid=$(cat /tmp/ls_integration/elasticsearch.pid) 2>/dev/null
+    if [ "x$pid" != "x" ] && [ "$pid" -gt 0 ]
+    then
+      while kill -SIGTERM "$pid" 2>/dev/null && [ $count -ne 0 ]; do
+         echo "waiting for elasticsearch to stop"
+         count=$(( $count - 1 ))
+         [[ $count -eq 0 ]] && echo "killing elasticsearch" && kill -9 $pid 2>/dev/null || true
+         sleep 0.5
+      done
+    fi
+    rm -rf /tmp/ls_integration/es-data
+    rm -rf /tmp/ls_integration/es-logs
+}
diff --git a/qa/integration/services/kafka_setup.sh b/qa/integration/services/kafka_setup.sh
index e874883af03..5892c5e048d 100755
--- a/qa/integration/services/kafka_setup.sh
+++ b/qa/integration/services/kafka_setup.sh
@@ -17,6 +17,7 @@ KAFKA_HOME=$INSTALL_DIR/kafka
 KAFKA_TOPIC=logstash_topic_plain
 KAFKA_MESSAGES=37
 KAFKA_LOGS_DIR=/tmp/ls_integration/kafka-logs
+ZOOKEEPER_DATA_DIR=/tmp/ls_integration/zookeeper
 
 setup_kafka() {
     local version=$1
@@ -25,17 +26,19 @@ setup_kafka() {
         curl -s -o $INSTALL_DIR/kafka.tgz "https://mirrors.ocf.berkeley.edu/apache/kafka/$version/kafka_2.11-$version.tgz"
         mkdir $KAFKA_HOME && tar xzf $INSTALL_DIR/kafka.tgz -C $KAFKA_HOME --strip-components 1
         rm $INSTALL_DIR/kafka.tgz
+        echo "dataDir=$ZOOKEEPER_DATA_DIR" >> $KAFKA_HOME/config/zookeeper.properties
     fi
 }
 
 start_kafka() {
     echo "Starting ZooKeeper"
-    $KAFKA_HOME/bin/zookeeper-server-start.sh -daemon $KAFKA_HOME/config/zookeeper.properties
-    wait_for_port 2181
-    echo "Starting Kafka broker"
     rm -rf ${KAFKA_LOGS_DIR}
     mkdir -p ${KAFKA_LOGS_DIR}
-    $KAFKA_HOME/bin/kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties --override delete.topic.enable=true --override advertised.host.name=127.0.0.1 --override log.dir=${KAFKA_LOGS_DIR} --override log.flush.interval.ms=200
+    rm -rf ${ZOOKEEPER_DATA_DIR}
+    mkdir -p ${ZOOKEEPER_DATA_DIR}
+    $KAFKA_HOME/bin/zookeeper-server-start.sh -daemon $KAFKA_HOME/config/zookeeper.properties
+    wait_for_port 2181
+    $KAFKA_HOME/bin/kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties --override delete.topic.enable=true --override advertised.host.name=127.0.0.1 --override log.dir=${KAFKA_LOGS_DIR} --override log.dirs=${KAFKA_LOGS_DIR} --override log.flush.interval.ms=200 
     wait_for_port 9092
 }
 
diff --git a/qa/integration/specs/kafka_input_spec.rb b/qa/integration/specs/kafka_input_spec.rb
index 6e9ac5a0f95..315b45efabc 100644
--- a/qa/integration/specs/kafka_input_spec.rb
+++ b/qa/integration/specs/kafka_input_spec.rb
@@ -30,21 +30,22 @@
   }
 
   after(:all) {
-    @fixture.teardown
+    @fixture.teardown unless @fixture.nil?
   }
 
   it "can ingest 37 apache log lines from Kafka broker" do
-    logstash_service = @fixture.get_service("logstash")
-    logstash_service.start_background(@fixture.config)
-
-    try(num_retries) do
-      expect(@fixture.output_exists?).to be true
-    end
-
-    try(num_retries) do
-      count = File.foreach(@fixture.actual_output).inject(0) {|c, _| c+1}
-      expect(count).to eq(num_events)
+    unless @fixture.nil?
+      logstash_service = @fixture.get_service("logstash")
+      logstash_service.start_background(@fixture.config)
+
+      try(num_retries) do
+        expect(@fixture.output_exists?).to be true
+      end
+
+      try(num_retries) do
+        count = File.foreach(@fixture.actual_output).inject(0) {|c, _| c+1}
+        expect(count).to eq(num_events)
+      end
     end
   end
-
 end
diff --git a/x-pack/build.gradle b/x-pack/build.gradle
index 5f78f038833..732112703a2 100644
--- a/x-pack/build.gradle
+++ b/x-pack/build.gradle
@@ -31,6 +31,7 @@ tasks.register("rubyTests", Test) {
   inputs.files fileTree("${projectDir}/lib")
   inputs.files fileTree("${projectDir}/modules")
   systemProperty 'logstash.core.root.dir', projectDir.absolutePath
+  systemProperty 'jruby.home', "${rootProject.projectDir}/vendor/jruby"
   include '/org/logstash/xpack/test/RSpecTests.class'
 }
 
diff --git a/x-pack/qa/integration/spec_helper.rb b/x-pack/qa/integration/spec_helper.rb
index 974092b02af..596be5451e2 100644
--- a/x-pack/qa/integration/spec_helper.rb
+++ b/x-pack/qa/integration/spec_helper.rb
@@ -4,6 +4,8 @@
 
 MONITORING_INDEXES = ".monitoring-logstash-*"
 
+require "belzebuth"
+require_relative "support/belzebuth/process"
 require_relative "support/helpers"
 require_relative "support/shared_examples"
 require_relative "support/elasticsearch/api/actions/update_password"
diff --git a/x-pack/qa/integration/support/belzebuth/process.rb b/x-pack/qa/integration/support/belzebuth/process.rb
new file mode 100644
index 00000000000..2af1cc5dfaa
--- /dev/null
+++ b/x-pack/qa/integration/support/belzebuth/process.rb
@@ -0,0 +1,31 @@
+module Belzebuth
+  class Process
+    def run
+      Bundler.with_clean_env do
+        child_process = Response.new(ChildProcess.new(*Shellwords.split(@command)))
+        child_process.cwd = @options[:directory]
+        child_process.environment.merge!(@options[:environment])
+        child_process.io.stdout = create_tempfile("stdout")
+        child_process.io.stderr = create_tempfile("stderr")
+
+        started_at = Time.now
+
+        child_process.start
+        @wait_condition.start(child_process)
+
+        while !@wait_condition.call(child_process)
+          sleep(@wait_condition.sleep_time_between_condition(child_process))
+
+          if can_timeout? && Time.now - started_at > @options[:timeout]
+            child_process.stop
+            raise ExecutionTimeout, "`#{@command}` took too much time to execute (timeout: #{@options[:timeout]}) #{child_process}"
+          end
+        end
+
+        @wait_condition.complete(child_process)
+        child_process
+      end
+    end
+
+  end
+end
\ No newline at end of file
diff --git a/x-pack/qa/integration/support/helpers.rb b/x-pack/qa/integration/support/helpers.rb
index 217ebc9d2bc..477f9eb3201 100644
--- a/x-pack/qa/integration/support/helpers.rb
+++ b/x-pack/qa/integration/support/helpers.rb
@@ -2,7 +2,6 @@
 # or more contributor license agreements. Licensed under the Elastic License;
 # you may not use this file except in compliance with the Elastic License.
 
-require "belzebuth"
 require "yaml"
 require "elasticsearch"
 require "fileutils"
@@ -45,8 +44,7 @@ def elasticsearch(options = {})
 
   # Launch in the background and wait for /started/ stdout
   cmd = "bin/elasticsearch #{settings_arguments.join(' ')}"
-  puts "Running elasticsearch: #{cmd}"
-  response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path, :wait_condition => /license.*valid/, :timeout => 15 * 60 })
+  response = Belzebuth.run(cmd, { :environment => {"JAVA_HOME" => ''}, :directory => get_elasticsearch_path, :wait_condition => /license.*valid/, :timeout => 15 * 60 })
   unless response.successful?
     raise "Could not start Elasticsearch, response: #{response}"
   end
@@ -67,9 +65,9 @@ def start_es_xpack_trial
 
 def bootstrap_elastic_password
   # we can't use Belzebuth here since the library doesn't support STDIN injection
-  cmd = "bin/elasticsearch-keystore add bootstrap.password -f -x"
+  cmd = "JAVA_HOME= bin/elasticsearch-keystore add bootstrap.password -f -x"
   result = Dir.chdir(get_elasticsearch_path) do |dir|
-    _, status = Open3.capture2(cmd, :stdin_data => elastic_password)
+    _, status = Open3.capture2({"JAVA_HOME" => ''}, cmd, :stdin_data => elastic_password)
     status
   end
   unless result.success?
@@ -79,14 +77,14 @@ def bootstrap_elastic_password
 
 def bootstrap_password_exists?
   cmd = "bin/elasticsearch-keystore list"
-  response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path })
+  response = Belzebuth.run(cmd, {:environment => {"JAVA_HOME" => ''},  :directory => get_elasticsearch_path })
   response.successful? && response.stdout_lines.any? { |line| line =~ /^bootstrap.password$/ }
 end
 
 
 def elasticsearch_xpack_installed?
   cmd = "bin/elasticsearch-plugin list"
-  response = Belzebuth.run(cmd, { :directory => get_elasticsearch_path })
+  response = Belzebuth.run(cmd, {:environment => {"JAVA_HOME" => ''},  :directory => get_elasticsearch_path })
   response.stdout_lines.any? { |line| line =~ /x-pack/ }
 end
 
