diff --git a/.dockerignore b/.dockerignore
index 050dcd0d326..9d0115c8f47 100644
--- a/.dockerignore
+++ b/.dockerignore
@@ -1,5 +1,4 @@
 **/.git
 build
 logs
-.gradle
-ci/docker_tool
+
diff --git a/.travis.yml b/.travis.yml
index 593d662ead3..64bfb548ae4 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1,6 @@
-sudo: false
+sudo: required
+services:
+  - docker
 language: ruby
 cache:
   directories:
diff --git a/Dockerfile b/Dockerfile
index 31f96192aab..569676d0687 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,34 +1,6 @@
-FROM ubuntu:xenial
+FROM container-registry-test.elastic.co/logstash-test/logstash-base:latest
 
-RUN apt-get update && \
-    apt-get dist-upgrade && \
-    apt-get install -y zlib1g-dev build-essential git curl libssl-dev libreadline-dev libyaml-dev  \
-      libxml2-dev libxslt-dev openjdk-8-jdk-headless curl iputils-ping netcat && \
-    apt-get clean
-
-WORKDIR /root
-
-RUN adduser --disabled-password --gecos "" --home /home/logstash logstash && \
-    mkdir -p /usr/local/share/ruby-build && \
-    mkdir -p /opt/logstash && \
-    mkdir -p /mnt/host && \
-    chown logstash:logstash /opt/logstash
-
-USER logstash
-WORKDIR /home/logstash
-
-RUN git clone https://github.com/sstephenson/rbenv.git .rbenv && \
-    git clone https://github.com/sstephenson/ruby-build.git .rbenv/plugins/ruby-build && \
-    echo 'export PATH=/home/logstash/.rbenv/bin:$PATH' >> /home/logstash/.bashrc
-
-ENV PATH "/home/logstash/.rbenv/bin:$PATH"
-
-RUN echo 'eval "$(rbenv init -)"' >> .bashrc && \
-    rbenv install jruby-9.1.12.0 && \
-    rbenv global jruby-9.1.12.0 && \
-    bash -i -c 'gem install bundler' && \
-    rbenv local jruby-9.1.12.0 && \
-    mkdir -p /opt/logstash/data
+RUN mv /tmp/vendor /opt/logstash/vendor
 
 ADD gradlew /opt/logstash/gradlew
 ADD gradle/wrapper /opt/logstash/gradle/wrapper
@@ -37,13 +9,13 @@ RUN /opt/logstash/gradlew wrapper
 ADD versions.yml /opt/logstash/versions.yml
 ADD LICENSE /opt/logstash/LICENSE
 ADD CONTRIBUTORS /opt/logstash/CONTRIBUTORS
-ADD NOTICE.TXT /opt/logstash/NOTICE.TXT
 ADD Gemfile.template /opt/logstash/Gemfile
 ADD Rakefile /opt/logstash/Rakefile
 ADD build.gradle /opt/logstash/build.gradle
 ADD rakelib /opt/logstash/rakelib
 ADD config /opt/logstash/config
 ADD spec /opt/logstash/spec
+ADD qa /opt/logstash/qa
 ADD lib /opt/logstash/lib
 ADD pkg /opt/logstash/pkg
 ADD tools /opt/logstash/tools
@@ -51,6 +23,7 @@ ADD logstash-core /opt/logstash/logstash-core
 ADD logstash-core-plugin-api /opt/logstash/logstash-core-plugin-api
 ADD bin /opt/logstash/bin
 ADD modules /opt/logstash/modules
+ADD ci /opt/logstash/ci
 ADD CHANGELOG.md /opt/logstash/CHANGELOG.md
 ADD settings.gradle /opt/logstash/settings.gradle
 
@@ -60,13 +33,6 @@ RUN rm -rf build && \
     chown -R logstash:logstash /opt/logstash
 USER logstash
 WORKDIR /opt/logstash
-RUN bash -i -c 'rake compile:all && rake artifact:tar && cd build && tar -xzf logstash-*.tar.gz'
 
-USER root
-ADD ci /opt/logstash/ci
-ADD qa /opt/logstash/qa
-RUN chown -R logstash:logstash /opt/logstash/ci /opt/logstash/qa
-
-USER logstash
-RUN bash -i -c 'cd qa/integration && bundle install'
+LABEL retention="prune"
 
diff --git a/Dockerfile.base b/Dockerfile.base
new file mode 100644
index 00000000000..cab314a701e
--- /dev/null
+++ b/Dockerfile.base
@@ -0,0 +1,47 @@
+#logstash-base image, use ci/docker_update_base_image.sh to push updates
+FROM ubuntu:xenial
+
+RUN apt-get update && \
+    apt-get dist-upgrade && \
+    apt-get install -y zlib1g-dev build-essential vim rake git curl libssl-dev libreadline-dev libyaml-dev  \
+      libxml2-dev libxslt-dev openjdk-8-jdk-headless curl iputils-ping netcat && \
+    apt-get clean
+
+WORKDIR /root
+
+RUN adduser --disabled-password --gecos "" --home /home/logstash logstash && \
+    mkdir -p /usr/local/share/ruby-build && \
+    mkdir -p /opt/logstash && \
+    mkdir -p /mnt/host && \
+    chown logstash:logstash /opt/logstash
+
+USER logstash
+WORKDIR /home/logstash
+
+RUN git clone https://github.com/sstephenson/rbenv.git .rbenv && \
+    git clone https://github.com/sstephenson/ruby-build.git .rbenv/plugins/ruby-build && \
+    echo 'export PATH=/home/logstash/.rbenv/bin:$PATH' >> /home/logstash/.bashrc
+
+ENV PATH "/home/logstash/.rbenv/bin:$PATH"
+
+#Only used to help bootstrap the build (not to run Logstash itself)
+RUN echo 'eval "$(rbenv init -)"' >> .bashrc && \
+    rbenv install jruby-9.1.12.0 && \
+    rbenv global jruby-9.1.12.0 && \
+    bash -i -c 'gem install bundler' && \
+    rbenv local jruby-9.1.12.0 && \
+    mkdir -p /opt/logstash/data
+
+
+# Create a cache for the dependencies based on the current master, any dependencies not cached will be downloaded at runtime
+RUN git clone https://github.com/elastic/logstash.git /tmp/logstash && \
+    cd /tmp/logstash && \
+    rake test:install-core && \
+    ./gradlew compileJava compileTestJava && \
+    cd qa/integration && \
+    /home/logstash/.rbenv/shims/bundle install && \
+    mv /tmp/logstash/vendor /tmp/vendor && \
+    rm -rf /tmp/logstash
+
+# used by the purge policy
+LABEL retention="keep"
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index e97470c4ceb..908c2712259 100644
--- a/build.gradle
+++ b/build.gradle
@@ -8,10 +8,46 @@ allprojects {
   project.targetCompatibility = JavaVersion.VERSION_1_8
 
   tasks.withType(JavaCompile).all {
-    options.compilerArgs.add("-Xlint:all")
+
+      def env = System.getenv()
+      boolean ci = env['CI']
+
+      //don't lint when running CI builds
+      if(!ci){
+          options.compilerArgs.add("-Xlint:all")
+      }
   }
 
   clean {
     delete "${projectDir}/out/"
   }
+
+  //https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
+  tasks.withType(Test) {
+    testLogging {
+      // set options for log level LIFECYCLE
+      events "passed", "skipped", "failed", "standardOut"
+      showExceptions true
+      exceptionFormat "full"
+      showCauses true
+      showStackTraces true
+
+      // set options for log level DEBUG and INFO
+      debug {
+        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
+        exceptionFormat "full"
+      }
+      info.events = debug.events
+      info.exceptionFormat = debug.exceptionFormat
+
+      afterSuite { desc, result ->
+        if (!desc.parent) { // will match the outermost suite
+          def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
+          def startItem = '|  ', endItem = '  |'
+          def repeatLength = startItem.length() + output.length() + endItem.length()
+          println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
+        }
+      }
+    }
+  }
 }
diff --git a/ci/ci_integration.sh b/ci/ci_integration.sh
new file mode 100755
index 00000000000..d8b6fa6b886
--- /dev/null
+++ b/ci/ci_integration.sh
@@ -0,0 +1,24 @@
+#!/usr/bin/env bash
+set -e
+
+# Since we are using the system jruby, we need to make sure our jvm process
+# uses at least 1g of memory, If we don't do this we can get OOM issues when
+# installing gems. See https://github.com/elastic/logstash/issues/5179
+export JRUBY_OPTS="-J-Xmx1g"
+
+echo "Running integration tests from qa/integration"
+if [[ ! -d "build" ]]; then
+  mkdir build
+fi  
+rm -rf build/*  
+echo "Building logstash tar file in build/"
+rake artifact:tar
+cd build
+echo "Extracting logstash tar file in build/"
+tar xf *.tar.gz
+
+cd ../qa/integration
+# to install test dependencies
+bundle install
+# runs all tests
+rspec
diff --git a/ci/ci_setup.sh b/ci/ci_setup.sh
new file mode 100755
index 00000000000..9974055658d
--- /dev/null
+++ b/ci/ci_setup.sh
@@ -0,0 +1,28 @@
+#!/usr/bin/env bash
+set -e
+
+##
+# Note this setup needs a system ruby to be available, this can not
+# be done here as is highly system dependant.
+##
+
+#squid proxy work, so if there is a proxy it can be cached.
+sed -i.bak 's/https:/http:/' Gemfile
+
+# Clean up some  possible stale directories
+rm -rf vendor       # make sure there are no vendorized dependencies
+rm -rf .bundle
+rm -rf spec/reports # no stale spec reports from previous executions
+
+# Since we are using the system jruby, we need to make sure our jvm process
+# uses at least 1g of memory, If we don't do this we can get OOM issues when
+# installing gems. See https://github.com/elastic/logstash/issues/5179
+export JRUBY_OPTS="-J-Xmx1g"
+
+# Setup the environment
+rake bootstrap # Bootstrap your logstash instance
+
+# Set up some general options for the rspec runner
+echo "--order rand" > .rspec
+echo "--format progress" >> .rspec
+echo "--format CI::Reporter::RSpecFormatter" >> .rspec
diff --git a/ci/ci_test.sh b/ci/ci_test.sh
index cdac3b732ca..a7f62d151bb 100755
--- a/ci/ci_test.sh
+++ b/ci/ci_test.sh
@@ -9,9 +9,7 @@ set -e
 # Since we are using the system jruby, we need to make sure our jvm process
 # uses at least 1g of memory, If we don't do this we can get OOM issues when
 # installing gems. See https://github.com/elastic/logstash/issues/5179
-#if [[ "$JRUBY_OPTS" != *Xmx* ]]; then
-  export JRUBY_OPTS="-J-Xmx1g"
-#fi
+export JRUBY_OPTS="-J-Xmx1g"
 
 SELECTED_TEST_SUITE=$1
 
diff --git a/ci/docker_integration_tests.sh b/ci/docker_integration_tests.sh
new file mode 100755
index 00000000000..9dae187d17f
--- /dev/null
+++ b/ci/docker_integration_tests.sh
@@ -0,0 +1,21 @@
+#!/bin/bash -i
+
+if [ -z "$branch_specifier" ]; then
+    # manual
+    IMAGE_NAME="logstash-integration-tests"
+else
+    # Jenkins
+    IMAGE_NAME=$branch_specifier"-"$(date +%s%N)
+fi
+
+echo "Running CI build for '$IMAGE_NAME' "
+
+docker build  -t $IMAGE_NAME .
+exit_code=$?; [[ $exit_code != 0 ]] && exit $exit_code
+docker run -t --rm $IMAGE_NAME ci/integration_tests.sh
+exit_code=$?
+[[ $IMAGE_NAME != "logstash-integration-tests" ]] && docker rmi $IMAGE_NAME
+echo "exiting with code: '$exit_code'"
+exit $exit_code #preserve the exit code from the test run
+
+#Note - ensure that the -e flag is NOT set, and explicitly check the $? status to allow for clean up
\ No newline at end of file
diff --git a/ci/docker_prune.sh b/ci/docker_prune.sh
new file mode 100755
index 00000000000..cd18df43606
--- /dev/null
+++ b/ci/docker_prune.sh
@@ -0,0 +1,6 @@
+#!/bin/bash -i
+
+echo "Removing containers older then 8 hours"
+docker container prune -f --filter "until=8h"
+echo "Removing all images, except with the label of retention=keep"
+docker image prune -a -f --filter "label!=retention=keep"
diff --git a/ci/docker_tool b/ci/docker_tool
deleted file mode 100755
index c70478f5bd5..00000000000
--- a/ci/docker_tool
+++ /dev/null
@@ -1,143 +0,0 @@
-#!/bin/bash
-
-IMAGE_NAME=lsinteg
-
-if [[ -z "$PROJECT" ]]; then 
-  PROJECT="ls_integ"
-fi
-
-echo "Using docker-compose project '$PROJECT'"
-
-RUN_PREFIX=docker
-LOGSTASH_VERSION=$(cat versions.yml  | egrep '^logstash:' | cut -d' ' -f 2)
-
-function startdev {
-  # If container exists, start it
-  docker ps -a | awk '{print $NF}' | grep lsdev
-  if [[ $? -eq 0 ]]; then
-    docker start lsdev
-  else # Otherwise run it
-    #-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n
-    docker run \
-      -v "$PWD:/mnt/host:delegated" \
-      -e 'LS_JAVA_OPTS=-Xmx1500M -Xms1500M' \
-      -e 'INTEGRATION=true' \
-      -e "JRUBY_OPTS=-Xcompile.invokedynamic=false" \
-      -d \
-      --name lsdev \
-      $IMAGE_NAME \
-      bash -c ' tail -f /dev/null'
-  fi
-  # Speeds up gem install etc.
-  docker exec lsdev rsync /mnt/host/vendor /opt/logstash/vendor
-}
-
-function rsyncdev {
-  docker exec lsdev rsync --delete --exclude .git --exclude logs --exclude build --exclude .gradle --exclude vendor -r /mnt/host/ /opt/logstash/ 
-}
-
-function build {
-  docker build -t $IMAGE_NAME .
-}
-
-INTEGRATION_COMMAND="time $RUN_PREFIX run -t --rm $IMAGE_NAME ci/integration_run.sh"
-
-case "$1" in
-  "build") 
-    docker stop lsdev && \
-    docker rm lsdev && \
-    build
-  ;;
-  "ci_integration")
-    echo "Rebuilding images just in case"
-    build && \
-    $INTEGRATION_COMMAND ${@:2}
-  ;;
-  "ci_integration_parallel")
-    if [[ "$4" != "false" ]]; then # Build skip flag
-      build
-    fi
-    pushd qa/integration
-    spec_find_cmd='find specs -name *_spec.rb'
-    total_specs=$(expr $($spec_find_cmd | wc -l))
-    parallelism=$2
-    parallelism_index=$3
-
-    if [[ -z "$parallelism" || -z "$parallelism_index" ]]; then
-      echo "You must invoke with parallelism and index parameters. ex: ci/docker_tool ci_parallel_integration 4 1"
-      exit 1
-    fi
-
-    run_num_specs=$(expr $total_specs / $(expr $parallelism))
-    start_point=$(expr $run_num_specs \* $(expr $parallelism_index))
-    tail_back=$(expr $total_specs - $start_point)
-
-    if expr $(expr $parallelism_index + 1) = $parallelism; then
-      tail_back=$(expr $run_num_specs + $(expr $total_specs % $(expr $parallelism)))
-      run_num_specs=$tail_back
-    fi
-
-    echo "Running $run_num_specs specs for index "$parallelism_index" in $parallelism containers simultaneously"
-    echo "Total Specs: $total_specs"
-
-    matched_specs=$($spec_find_cmd | sort | tail -n $tail_back | head -n $run_num_specs | xargs -n 999999 echo)
-    popd
-    $INTEGRATION_COMMAND $matched_specs
-  ;;
-  "ci_integration_2x")
-    build
-    ci/docker_tool ci_integration_parallel 2 0 false &
-    ci/docker_tool ci_integration_parallel 2 1 false &
-
-    FAILED=0
-    for job in `jobs -p`
-    do
-    echo $job
-      wait $job || let "FAIL+=1"
-    done
-
-    if [[ "$FAILED" != "0" ]]; then
-      exit 1
-    fi
-    echo "Both jobs succeeded!"
-  ;;
-  "ci_cli")
-    build
-    $RUN_PREFIX run -it --rm $IMAGE_NAME bash -l
-  ;;
-  "dev_stop")
-    $RUN_PREFIX stop lsdev
-   ;; 
-  "dev_cli")
-    startdev && \
-    echo "Don't forget to rsync" && \
-    #TODO: This should search for running containers and connect to them, starting a new one only if needed
-    time $RUN_PREFIX exec -it lsdev bash -c "$INTEGRATION_SETUP && mkdir -p build && ln -sf /opt/logstash build/logstash-$LOGSTASH_VERSION-SNAPSHOT && bash -l"
-  ;;
-  "dev_rsync")
-    rsyncdev
-  ;;
-  "dev_cleanup")
-    docker stop lsdev
-    docker rm $(docker ps -aq)
-    build
-  ;;
-  *)
-    echo "Commands prefixed with 'ci' run in unnamed containers and are intended to be used on the CI server or on a dev box to simulate the CI server as accurately as possible."
-    echo "Example commands: "
-    echo "# Run integration test as it would be run on CI server"
-    echo "ci/docker_tool ci_integration"
-    echo "# Start a CLI prompt with the container setup as it would be for ci_integration"
-    echo "ci/docker_run ci_cli"
-    echo "# Start a container named '$DEV_CONTAINER_NAME' that sticks around for experimenting with tests"
-    echo "ci/docker_run ci_cli"
-    echo "# Rsync the folder contents to the dev container. Must be done to synchronize any local changes"
-    echo "ci/docker_run rsync"
-    echo "# Destroy the dev container to achieve a clean state"
-    echo "ci/docker_run dev_cleanup"
-    echo "# Run the full CI suite in 2 threads"
-    echo "ci/docker_run ci_integration_2x"
-    echo "# Run the CI suite in three parts. Useful for splitting up tests among jenkins build jobs"
-    echo "ci/docker_run ci_parallel 3 0; ci/docker_run ci_parallel 3 1; ci/docker_run ci_parallel 3 2"
-  ;;
-esac
\ No newline at end of file
diff --git a/ci/docker_unit_tests.sh b/ci/docker_unit_tests.sh
new file mode 100755
index 00000000000..35300c42e42
--- /dev/null
+++ b/ci/docker_unit_tests.sh
@@ -0,0 +1,21 @@
+#!/bin/bash -i
+
+if [ -z "$branch_specifier" ]; then
+    # manual
+    IMAGE_NAME="logstash-unit-tests"
+else
+    # Jenkins
+    IMAGE_NAME=$branch_specifier"-"$(date +%s%N)
+fi
+
+echo "Running CI build for '$IMAGE_NAME' "
+
+docker build  -t $IMAGE_NAME .
+exit_code=$?; [[ $exit_code != 0 ]] && exit $exit_code
+docker run -t --rm $IMAGE_NAME ci/unit_tests.sh $@
+exit_code=$?
+[[ $IMAGE_NAME != "logstash-unit-tests" ]] && docker rmi $IMAGE_NAME
+echo "exiting with code: '$exit_code'"
+exit $exit_code #preserve the exit code from the test run
+
+#Note - ensure that the -e flag is NOT set, and explicitly check the $? status to allow for clean up
\ No newline at end of file
diff --git a/ci/docker_update_base_image.sh b/ci/docker_update_base_image.sh
new file mode 100755
index 00000000000..ab65ee6d758
--- /dev/null
+++ b/ci/docker_update_base_image.sh
@@ -0,0 +1,12 @@
+#!/bin/bash -ie
+
+if docker rmi --force logstash-base ; then
+    echo "Removed existing logstash-base image, building logstash-base image from scratch."
+else
+    echo "Building logstash-base image from scratch." #Keep the global -e flag but allow the remove command to fail.
+fi
+
+docker build -f Dockerfile.base -t logstash-base .
+docker login --username=logstashci container-registry-test.elastic.co #will prompt for password
+docker tag logstash-base container-registry-test.elastic.co/logstash-test/logstash-base
+docker push container-registry-test.elastic.co/logstash-test/logstash-base
diff --git a/ci/integration_run.sh b/ci/integration_run.sh
deleted file mode 100755
index 8adf8af2061..00000000000
--- a/ci/integration_run.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash -iex
-
-cd qa/integration
-echo "Running spec files $@"
-bundle exec rspec -fd --tag ~offline $@
-bundle exec rspec -fd --tag offline $@
\ No newline at end of file
diff --git a/ci/integration_tests.sh b/ci/integration_tests.sh
new file mode 100755
index 00000000000..d166f5b7dfe
--- /dev/null
+++ b/ci/integration_tests.sh
@@ -0,0 +1,31 @@
+#!/bin/bash -ie
+
+# Since we are using the system jruby, we need to make sure our jvm process
+# uses at least 1g of memory, If we don't do this we can get OOM issues when
+# installing gems. See https://github.com/elastic/logstash/issues/5179
+export JRUBY_OPTS="-J-Xmx1g"
+
+export SPEC_OPTS="--order rand --format documentation"
+export CI=true
+
+if [[ ! -d "build" ]]; then
+  mkdir build
+fi
+rm -rf build/*
+echo "Building tar"
+rake artifact:tar
+cd build
+tar xf *.tar.gz
+
+cd ../qa/integration
+echo "Installing test dependencies"
+bundle install
+
+#exit early if only setting up
+[[ $1 = "setup" ]] && exit 0
+
+echo "Running integration tests $@"
+rspec --tag ~offline $@
+rspec --tag offline $@
+
+#Note - ensure that the -e flag is set to properly set the $? status if any command fails
\ No newline at end of file
diff --git a/ci/travis_integration_install.sh b/ci/travis_integration_install.sh
new file mode 100755
index 00000000000..27d3a097f6e
--- /dev/null
+++ b/ci/travis_integration_install.sh
@@ -0,0 +1,26 @@
+#!/usr/bin/env bash
+set -e
+
+# This file sets up the environment for travis integration tests
+
+
+if [[ "$INTEGRATION" != "true" ]]; then
+    exit
+fi
+
+echo "Setting up integration tests"
+if [[ ! -d "build" ]]; then
+    mkdir build
+fi
+rm -rf build/*
+echo "Building logstash tar file in build/"
+rake artifact:tar
+cd build
+echo "Extracting logstash tar file in build/"
+tar xf *.tar.gz
+
+cd ../qa/integration
+pwd
+echo $BUNDLE_GEMFILE
+# to install test dependencies
+bundle install --gemfile="./Gemfile"
diff --git a/ci/travis_integration_run.sh b/ci/travis_integration_run.sh
new file mode 100755
index 00000000000..28b8cc9f760
--- /dev/null
+++ b/ci/travis_integration_run.sh
@@ -0,0 +1,16 @@
+#!/usr/bin/env bash
+set -e
+
+if [[ "$INTEGRATION" != "true" ]]; then
+    exit
+fi
+
+echo "Running integration tests from qa/integration directory"
+cd qa/integration
+
+# The offline specs can break the online ones
+# due to some sideeffects of the seccomp policy interfering with
+# the docker daemon
+# See prepare_offline_pack_spec.rb for details
+rspec --tag ~offline
+rspec --tag offline
diff --git a/ci/unit_tests.bat b/ci/unit_tests.bat
new file mode 100644
index 00000000000..e3a4467b9cf
--- /dev/null
+++ b/ci/unit_tests.bat
@@ -0,0 +1,41 @@
+@echo off
+
+setlocal
+
+REM Since we are using the system jruby, we need to make sure our jvm process
+REM uses at least 1g of memory, If we don't do this we can get OOM issues when
+REM installing gems. See https://github.com/elastic/logstash/issues/5179
+
+SET JRUBY_OPTS="-J-Xmx1g"
+SET SELECTEDTESTSUITE=%1
+SET /p JRUBYVERSION=<.ruby-version
+
+IF NOT EXIST %JRUBYSRCDIR% (
+  echo "Variable JRUBYSRCDIR must be declared with a valid directory. Aborting.."
+  exit /B 1
+)
+
+SET JRUBYPATH=%JRUBYSRCDIR%\%JRUBYVERSION%
+
+IF NOT EXIST %JRUBYPATH% (
+  echo "Could not find JRuby in %JRUBYPATH%. Aborting.."
+  exit /B 1
+)
+
+SET RAKEPATH=%JRUBYPATH%\bin\rake
+
+IF "%SELECTEDTESTSUITE%"=="core-fail-fast" (
+  echo "Running core-fail-fast tests"
+  %RAKEPATH% test:install-core
+  %RAKEPATH% test:core-fail-fast
+) ELSE (
+  IF "%SELECTEDTESTSUITE%"=="all" (
+    echo "Running all plugins tests"
+    %RAKEPATH% test:install-all
+    %RAKEPATH% test:plugins
+  ) ELSE (
+    echo "Running core tests"
+    %RAKEPATH% test:install-core
+    %RAKEPATH% test:core
+  )
+)
diff --git a/ci/unit_tests.sh b/ci/unit_tests.sh
new file mode 100755
index 00000000000..53e75a317bf
--- /dev/null
+++ b/ci/unit_tests.sh
@@ -0,0 +1,43 @@
+#!/bin/bash -ie
+
+# Since we are using the system jruby, we need to make sure our jvm process
+# uses at least 1g of memory, If we don't do this we can get OOM issues when
+# installing gems. See https://github.com/elastic/logstash/issues/5179
+export JRUBY_OPTS="-J-Xmx1g"
+
+export SPEC_OPTS="--order rand --format documentation"
+export CI=true
+
+SELECTED_TEST_SUITE=$1
+
+if [[ $SELECTED_TEST_SUITE == $"core-fail-fast" ]]; then
+  echo "Running Java and Ruby unit tests, but will fail fast"
+  echo "Running test:install-core"
+  rake test:install-core
+  echo "Running test:core-fail-fast"
+  rake test:core-fail-fast
+elif [[ $SELECTED_TEST_SUITE == $"all" ]]; then
+  echo "Running all plugins tests"
+  echo "Running test:install-all"  # Install all plugins in this logstash instance, including development dependencies
+  rake test:install-all
+  echo "Running test:plugins"    # Run all plugins tests
+  rake test:plugins
+elif [[ $SELECTED_TEST_SUITE == $"java" ]]; then
+  echo "Running Java unit tests"
+  echo "Running test:core-java"
+  rake test:core-java
+elif [[ $SELECTED_TEST_SUITE == $"ruby" ]]; then
+  echo "Running Ruby unit tests"
+  echo "Running test:install-core"
+  rake test:install-core
+  echo "Running test:core-ruby"
+  rake test:core-ruby
+else
+  echo "Running Java and Ruby unit tests"
+  echo "Running test:install-core"
+  rake test:install-core
+  echo "Running test:core"
+  rake test:core
+fi
+
+#Note - ensure that the -e flag is set to properly set the $? status if any command fails
\ No newline at end of file
diff --git a/qa/integration/README.md b/qa/integration/README.md
index 7d543e0cea1..c350fdee551 100644
--- a/qa/integration/README.md
+++ b/qa/integration/README.md
@@ -2,26 +2,57 @@
 
 These set of tests are full integration tests as in: they can start LS from a binary, run configs using `-e` and can use any external services like Kafka, ES and S3. This framework is hybrid -- a combination of bash scripts (to mainly setup services), Ruby service files, and RSpec. All test assertions are done in RSpec.
 
-No VMs, all tests run locally.
+## Dependencies 
+* `JRuby`
+* `rspec` 
+* `rake`
 
-## Dependencies
-* An existing Logstash binary, defaults to `LS_HOME/build/logstash-<version>`
-* `rspec`
-* A local Docker installation (OSX and Linux are both supported for Docker versions 1.12.x and up)
+## Running integration tests locally (Mac/Linux)
 
-## Preparing a test run
+From the Logstash root directory:
 
-1. If you already have a LS binary in `LS_HOME/build/logstash-<version>`, skip to step 5
-2. From Logstash git source directory or `LS_HOME` run `rake artifact:tar` to build a package
-2. Untar the newly built package
-3. `cd build`
-4. `tar xvf logstash-<version>.tar.gz`
-5. `cd LS_HOME/qa/integration`
-6. `bundle install`: This will install test dependency gems.
+* Run all tests: `ci/integration_tests.sh`
+* Run a single test: `ci/integration_tests.sh specs/es_output_how_spec.rb`
+* Debug tests: 
+```
+ci/integration_tests.sh setup 
+cd qa/integration
+rspec specs/es_output_how_spec.rb (single test)
+rspec specs/*  (all tests)
+```
+## Running integration tests locally via Docker 
 
-You are now ready to run any tests from `qa/integration`.
-* Run all tests: `rspec specs/*`
-* Run single test: `rspec specs/es_output_how_spec.rb`
+From the Logstash root directory:
+
+* Run all tests: `ci/docker_integration_tests.sh`
+* Run a single test: 
+```
+docker build  -t logstash-integration-tests .
+docker run -it --rm logstash-integration-tests ci/integration_tests.sh specs/es_output_how_spec.rb
+``` 
+* Debug tests:
+```
+docker ps -a | grep Exited | awk '{print $1}' | xargs docker rm
+docker build -t logstash-integration-tests . 
+docker run -d --name debug logstash-integration-tests tail -f /dev/null
+docker exec -it debug ci/integration_tests.sh setup 
+docker exec -it debug bash
+cd qa/integration
+rspec specs/es_output_how_spec.rb
+exit
+docker kill debug
+docker rm debug
+```
+
+* Clean up docker environment:
+
+Warning this will remove all images a containers except for `logstash-base` !
+
+* `ci/docker_prune.sh`
+
+## Running integration tests locally from Windows
+
+The integration tests need to be run from MacOS or Linux.  However, the `Debug tests` locally with Docker should also work from Windows with Docker installed.   
 
 ### Directory Layout
 
@@ -37,6 +68,5 @@ You are now ready to run any tests from `qa/integration`.
 3. Create a corresponding `test_file_input_spec.rb` in `specs` folder and use the `fixtures` object to get all services, config etc. The `.yml` and rspec file has to be the same name for the settings to be picked up. You can start LS inside the tests and assume all external services have already been started.
 4. Write rspec code to validate.
 
-## Future Improvements
 
-1. Perform setup and teardown from Ruby and get rid of bash files altogether.
+
diff --git a/qa/integration/integration_tests.gemspec b/qa/integration/integration_tests.gemspec
index c8424b1cbc1..8a95b4a015a 100644
--- a/qa/integration/integration_tests.gemspec
+++ b/qa/integration/integration_tests.gemspec
@@ -18,6 +18,7 @@ Gem::Specification.new do |s|
   s.add_development_dependency 'manticore'
   s.add_development_dependency 'stud'
   s.add_development_dependency 'pry'
+  s.add_development_dependency 'logstash-devutils'
   s.add_development_dependency 'flores'
   s.add_development_dependency 'rubyzip'
 end
diff --git a/qa/integration/services/elasticsearch_setup.sh b/qa/integration/services/elasticsearch_setup.sh
index 0f916c9cce0..30613dfa1c9 100755
--- a/qa/integration/services/elasticsearch_setup.sh
+++ b/qa/integration/services/elasticsearch_setup.sh
@@ -31,7 +31,7 @@ start_es() {
   echo "Waiting for elasticsearch to respond..."
   while ! curl --silent localhost:9200 && [[ $count -ne 0 ]]; do
       count=$(( $count - 1 ))
-      [[ $count -eq 0 ]] && return 1
+      [[ $count -eq 0 ]] && cat /tmp/elasticsearch.log && return 1
       sleep 1
   done
   echo "Elasticsearch is Up !"
@@ -40,4 +40,5 @@ start_es() {
 
 setup_install_dir
 setup_es $version
+export ES_JAVA_OPTS="-Xms512m -Xmx512m"
 start_es
diff --git a/qa/integration/specs/es_output_how_spec.rb b/qa/integration/specs/es_output_how_spec.rb
index 659d18af1de..0d0e8355e13 100644
--- a/qa/integration/specs/es_output_how_spec.rb
+++ b/qa/integration/specs/es_output_how_spec.rb
@@ -15,12 +15,18 @@
   }
 
   it "can ingest 37K log lines of sample apache logs" do
+    puts "Getting logstash service"
     logstash_service = @fixture.get_service("logstash")
+    puts "Getting elasticsearch service"
     es_service = @fixture.get_service("elasticsearch")
+    puts "Starting logstash and feeding input ..."
     logstash_service.start_with_input(@fixture.config, @fixture.input)
+    puts "Getting elasticsearch client"
     es_client = es_service.get_client
     # now we test if all data was indexed by ES, but first refresh manually
+    puts "Refreshing elasticsearch indexes"
     es_client.indices.refresh
+    puts "Searching logstsash-* index"
     result = es_client.search(index: 'logstash-*', size: 0, q: '*')
     expect(result["hits"]["total"]).to eq(37)
     
diff --git a/rakelib/test.rake b/rakelib/test.rake
index d5c8d726a56..d5a81e60379 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -6,9 +6,14 @@ require 'pathname'
 
 namespace "test" do
 
-  desc "run the java tests"
+  desc "run the java unit tests"
   task "core-java" do
-    exit(1) unless system './gradlew clean test --info'
+    exit(1) unless system './gradlew clean test'
+  end
+
+  desc "run the ruby unit tests"
+  task "core-ruby" do
+    exit 1 unless system(*default_spec_command)
   end
 
   desc "run all core specs"
diff --git a/spec/coverage_helper.rb b/spec/coverage_helper.rb
index 009f7fb5419..6006097dd7a 100644
--- a/spec/coverage_helper.rb
+++ b/spec/coverage_helper.rb
@@ -21,3 +21,8 @@ def self.eager_load
     end
   end
 end
+ 
+ 
+ 
+ 
+ 
