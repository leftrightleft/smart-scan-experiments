diff --git a/.gitignore b/.gitignore
index 5f1683da631..f0c3cb6d82f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ vendor
 data
 .buildpath
 .project
+etc/jira-output.conf
diff --git a/etc/jira-output.conf.sample b/etc/jira-output.conf.sample
new file mode 100644
index 00000000000..0e3e9f67d0e
--- /dev/null
+++ b/etc/jira-output.conf.sample
@@ -0,0 +1,26 @@
+input { stdin { type => "stdin-type"}}
+
+output {
+  jira {
+   host => "YOUR HOST NAME"
+   username => "USERNAME"
+   password => "PASSWORD"
+#   project => "LOGSTASH"
+   projectid => "11203" # would have prefered a project key, https://github.com/jstewart/jiralicious/issues/16
+   issuetypeid => "7"
+   summary => "Driven from config file"
+   reporter => "admin"
+   assignee => "admin"
+   priority => "1"
+  }
+ 
+  stdout {
+  	debug => true 
+	debug_format => "ruby"
+  }
+
+#  elasticsearch { 
+#    index => "logstash"
+#    type => "%{@type}"
+#  }
+}
diff --git a/lib/logstash/outputs/jira.rb b/lib/logstash/outputs/jira.rb
new file mode 100644
index 00000000000..1687c45e883
--- /dev/null
+++ b/lib/logstash/outputs/jira.rb
@@ -0,0 +1,108 @@
+# Origin https://groups.google.com/forum/#!msg/logstash-users/exgrB4iQ-mw/R34apku5nXsJ
+# and https://botbot.me/freenode/logstash/msg/4169496/ 
+# via https://gist.github.com/electrical/4660061e8fff11cdcf37#file-jira-rb
+
+# Uses jiralicious as the bridge to JIRA
+# By Martin Cleaver, Blended Perspectives
+# with a lot of help from 'electrical' in #logstash
+
+require "logstash/outputs/base"
+require "logstash/namespace"
+require "jiralicious" # 0.2.2 works for me
+
+#
+# This is so is most useful so you can use logstash to parse and structure
+# your logs and ship structured, json events to JIRA
+#
+# To use this, you'll need to ensure your JIRA instance allows REST calls
+
+class LogStash::Outputs::Jira < LogStash::Outputs::Base
+  config_name "jira"
+  milestone 2
+
+  # The hostname to send logs to. This should target your JIRA server 
+  # and has to have the REST interface enabled
+  config :host, :validate => :string
+
+  config :username, :validate => :string, :required => true
+  config :password, :validate => :string, :required => true
+
+  # Javalicious has no proxy support
+###
+  # JIRA Project number
+  config :projectid, :validate => :string, :required => true
+
+  # JIRA Issuetype number
+  config :issuetypeid, :validate => :string, :required => true
+
+  # JIRA Summary
+  config :summary, :validate => :string, :required => true
+
+  # JIRA Priority
+  config :priority, :validate => :string, :required => true
+
+  # JIRA Reporter
+  config :reporter, :validate => :string
+
+  # JIRA Reporter
+  config :assignee, :validate => :string
+
+### The following have not been implemented
+  # Ticket creation method
+  #config :method, :validate => :string, :default => 'new'
+  
+  # Search fields; When in 'append' method. search for a ticket that has these fields and data.
+  #config :searchfields, :validate => :hash
+  
+  # createfields; Add data to these fields at initial creation
+  #config :createfields, :validate => :hash
+  
+  # appendfields; Update data in these fields when appending data to an existing ticket
+  #config :appendfields, :validate => :hash
+  
+  # Comment; Add this in the comment field ( is for new and append method the same )
+  #config :comment, :validate => :string
+
+
+  public
+  def register
+    # nothing to do
+  end
+
+  public
+  def receive(event)
+    return unless output?(event)
+
+    if event == LogStash::SHUTDOWN
+      finished
+      return
+    end
+
+    Jiralicious.configure do |config|
+      config.username = @username
+      config.password = @password
+      config.uri = @host
+      config.auth_type = :cookie
+      config.api_version = "latest"
+    end
+
+
+issue = Jiralicious::Issue.new
+    issue.fields.set_id("project", @projectid) # would have prefered a project key, https://github.com/jstewart/jiralicious/issues/16
+    issue.fields.set("summary", @summary)
+    issue.fields.set_id("issuetype", @issuetypeid)
+    issue.fields.set_name("reporter", @reporter)
+    issue.fields.set_name("assignee", @assignee)
+    issue.fields.set_id("priority", @priority)
+#puts issue.fields.to_yaml
+    issue.save
+
+
+
+#    if response.is_a?(Net::HTTPSuccess)
+#      @logger.info("Event send to JIRA OK!")
+#    else
+#      @logger.warn("HTTP error", :error => response.error!)
+#    end
+  end # def receive
+end # class LogStash::Outputs::Jira
diff --git a/logstash.gemspec b/logstash.gemspec
index 799b4859837..0aa20f44e42 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -47,6 +47,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "gelfd", ["0.2.0"]                 #(Apache 2.0 license)
   gem.add_runtime_dependency "gelf", ["1.3.2"]                  #(MIT license)
   gem.add_runtime_dependency "gmetric", ["0.1.3"]               #(MIT license)
+  gem.add_runtime_dependency "jiralicious", ["0.2.2"]		#(MIT license)
   gem.add_runtime_dependency "jls-grok", ["0.10.11"]            #(BSD license)
   gem.add_runtime_dependency "mail"                             #(MIT license)
   gem.add_runtime_dependency "mongo"                            #(Apache 2.0 license)
