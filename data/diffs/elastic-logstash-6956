diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 8411bbdab16..f8401f38a38 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -407,9 +407,10 @@
   end
 
   context "metrics after config reloading" do
-    let!(:config) { "input { generator { } } output { dummyoutput { } }" }
+    let(:temporary_file) { Stud::Temporary.file.path }
+    let(:config) { "input { generator { } } output { file { path => '#{temporary_file}' } }" }
 
-    let!(:config_path) do
+    let(:config_path) do
       f = Stud::Temporary.file
       f.write(config)
       f.fsync
@@ -427,13 +428,6 @@
       }
     end
 
-    # We need to create theses dummy classes to know how many
-    # events where actually generated by the pipeline and successfully send to the output.
-    # Theses values are compared with what we store in the metric store.
-    class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
-
-    let!(:dummy_output) { LogStash::Outputs::DroppingDummyOutput.new }
-    let!(:dummy_output2) { DummyOutput2.new }
     let(:initial_generator_threshold) { 1000 }
     let(:pipeline_thread) do
       Thread.new do
@@ -444,14 +438,6 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
     subject { described_class.new(agent_settings, default_source_loader) }
 
     before :each do
-      allow(LogStash::Outputs::DroppingDummyOutput).to receive(:new).at_least(:once).with(anything).and_return(dummy_output)
-      allow(DummyOutput2).to receive(:new).at_least(:once).with(anything).and_return(dummy_output2)
-
-      allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_return(LogStash::Inputs::Generator)
-      allow(LogStash::Plugin).to receive(:lookup).with("codec", "plain").and_return(LogStash::Codecs::Plain)
-      allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput").and_return(LogStash::Outputs::DroppingDummyOutput)
-      allow(LogStash::Plugin).to receive(:lookup).with("output", "dummyoutput2").and_return(DummyOutput2)
-
       @abort_on_exception = Thread.abort_on_exception
       Thread.abort_on_exception = true
 
@@ -460,7 +446,7 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
       end
 
       # wait for some events to reach the dummy_output
-      sleep(0.1) until dummy_output.events_received > initial_generator_threshold
+      sleep(0.1) until IO.readlines(temporary_file).size > initial_generator_threshold
     end
 
     after :each do
@@ -475,7 +461,8 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
 
     context "when reloading a good config" do
       let(:new_config_generator_counter) { 500 }
-      let(:new_config) { "input { generator { count => #{new_config_generator_counter} } } output { dummyoutput2 {} }" }
+      let(:output_file) { Stud::Temporary.file.path }
+      let(:new_config) { "input { generator { count => #{new_config_generator_counter} } } output { file { path => '#{output_file}'} }" }
 
       before :each do
         File.open(config_path, "w") do |f|
@@ -484,7 +471,7 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
         end
 
         # wait until pipeline restarts
-        sleep(0.2) until dummy_output2.events_received > 0
+        sleep(1) if ::File.read(output_file).empty?
       end
 
       it "resets the pipeline metric collector" do
@@ -535,7 +522,7 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
           f.fsync
         end
 
-        sleep(0.1)
+        sleep(1)
       end
 
       it "does not increase the successful reload count" do
@@ -571,7 +558,7 @@ class DummyOutput2 < LogStash::Outputs::DroppingDummyOutput; end
     end
 
     context "when reloading a config that raises exception on pipeline.run" do
-      let(:new_config) { "input { generator { count => 10000 } }" }
+      let(:new_config) { "input { generator { count => 10000 } } output { null {} }" }
       let(:agent_args) do
         {
           "config.reload.automatic" => false,
@@ -589,7 +576,6 @@ def register
 
       before :each do
         allow(LogStash::Plugin).to receive(:lookup).with("input", "generator").and_return(BrokenGenerator)
-        allow(LogStash::Plugin).to receive(:lookup).with("output", "stdout").and_return(DummyOutput2)
 
         File.open(config_path, "w") do |f|
           f.write(new_config)
