diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
deleted file mode 100644
index 6806fc5a528..00000000000
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ /dev/null
@@ -1,57 +0,0 @@
-require "logstash/output_delegator_strategy_registry"
-
-require "logstash/output_delegator_strategies/shared"
-require "logstash/output_delegator_strategies/single"
-require "logstash/output_delegator_strategies/legacy"
-
-module LogStash class OutputDelegator
-  attr_reader :metric, :metric_events, :strategy, :namespaced_metric, :metric_events, :id
-
-  def initialize(output_class, metric, execution_context, strategy_registry, plugin_args)
-    @output_class = output_class
-    @metric = metric
-    @id = plugin_args["id"]
-
-    raise ArgumentError, "No strategy registry specified" unless strategy_registry
-    raise ArgumentError, "No ID specified! Got args #{plugin_args}" unless id
-
-    @namespaced_metric = metric.namespace(id.to_sym)
-    @namespaced_metric.gauge(:name, config_name)
-    @metric_events = @namespaced_metric.namespace(:events)
-    @in_counter = @metric_events.counter(:in)
-    @out_counter = @metric_events.counter(:out)
-    @time_metric = @metric_events.counter(:duration_in_millis)
-    @strategy = strategy_registry.
-                  class_for(self.concurrency).
-                  new(@output_class, @namespaced_metric, execution_context, plugin_args)
-  end
-
-  def config_name
-    @output_class.config_name
-  end
-
-  def reloadable?
-    @output_class.reloadable?
-  end
-
-  def concurrency
-    @output_class.concurrency
-  end
-
-  def register
-    @strategy.register
-  end
-
-  def multi_receive(events)
-    count = events.size
-    @in_counter.increment(count)
-    start_time = java.lang.System.nano_time
-    @strategy.multi_receive(events)
-    @time_metric.increment((java.lang.System.nano_time - start_time) / 1_000_000)
-    @out_counter.increment(count)
-  end
-
-  def do_close
-    @strategy.do_close
-  end
-end; end
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index af20aa4bc3a..df6abc3e587 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -18,7 +18,6 @@
 require "logstash/instrument/namespaced_null_metric"
 require "logstash/instrument/collector"
 require "logstash/util/dead_letter_queue_manager"
-require "logstash/output_delegator"
 require "logstash/filter_delegator"
 require "logstash/queue_factory"
 require "logstash/plugins/plugin_factory"
diff --git a/logstash-core/lib/logstash/plugins/plugin_factory.rb b/logstash-core/lib/logstash/plugins/plugin_factory.rb
index 7e2484fa2b6..fb4f9d7d349 100644
--- a/logstash-core/lib/logstash/plugins/plugin_factory.rb
+++ b/logstash-core/lib/logstash/plugins/plugin_factory.rb
@@ -1,5 +1,10 @@
 # encoding: utf-8
 
+require "logstash/output_delegator_strategy_registry"
+require "logstash/output_delegator_strategies/shared"
+require "logstash/output_delegator_strategies/single"
+require "logstash/output_delegator_strategies/legacy"
+
 module LogStash
   module Plugins
 
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index 758d5d55240..3e65deba76a 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -1,23 +1,36 @@
 # encoding: utf-8
-require "logstash/output_delegator"
 require "logstash/execution_context"
 require "spec_helper"
 require "support/shared_contexts"
+require "logstash/output_delegator_strategy_registry"
+require "logstash/output_delegator_strategies/shared"
+require "logstash/output_delegator_strategies/single"
+require "logstash/output_delegator_strategies/legacy"
 
 describe LogStash::OutputDelegator do
 
-  class MockGauge
-    def increment(_)
-    end
-  end
-
   let(:events) { 7.times.map { LogStash::Event.new }}
   let(:plugin_args) { {"id" => "foo", "arg1" => "val1"} }
-  let(:collector) { [] }
-  let(:counter_in) { MockGauge.new }
-  let(:counter_out) { MockGauge.new }
-  let(:counter_time) { MockGauge.new }
-  let(:metric) { LogStash::Instrument::NamespacedNullMetric.new(collector, :null) }
+  let(:metric) {
+    LogStash::Instrument::NamespacedMetric.new(
+      LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new), [:output]
+    )
+  }
+  let(:counter_in) {
+    counter = metric.counter(:in)
+    counter.increment(0)
+    counter
+  }
+  let(:counter_out) {
+    counter = metric.counter(:out)
+    counter.increment(0)
+    counter
+  }
+  let(:counter_time) {
+    counter = metric.counter(:duration_in_millis)
+    counter.increment(0)
+    counter
+  }
 
   include_context "execution_context"
 
@@ -30,12 +43,7 @@ def increment(_)
 
     before(:each) do
       # use the same metric instance
-      allow(metric).to receive(:namespace).with(any_args).and_return(metric)
-      allow(metric).to receive(:counter).with(:in).and_return(counter_in)
-      allow(metric).to receive(:counter).with(:out).and_return(counter_out)
-      allow(metric).to receive(:counter).with(:duration_in_millis).and_return(counter_time)
-
-      allow(out_klass).to receive(:new).with(any_args).and_return(out_inst)
+      allow(out_klass).to receive(:new).with(plugin_args).and_return(out_inst)
       allow(out_klass).to receive(:name).and_return("example")
       allow(out_klass).to receive(:concurrency).with(any_args).and_return concurrency
       allow(out_klass).to receive(:config_name).and_return("dummy_plugin")
@@ -44,8 +52,6 @@ def increment(_)
       allow(out_inst).to receive(:metric=).with(any_args)
       allow(out_inst).to receive(:execution_context=).with(execution_context)
       allow(out_inst).to receive(:id).and_return("a-simple-plugin")
-
-      allow(subject.metric_events).to receive(:increment).with(any_args)
     end
 
     it "should initialize cleanly" do
@@ -53,8 +59,8 @@ def increment(_)
     end
 
     it "should push the name of the plugin to the metric" do
-      expect(metric).to receive(:gauge).with(:name, out_klass.config_name)
       described_class.new(out_klass, metric, execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
+      expect(metric.collector.snapshot_metric.metric_store.get_with_path("output/foo")[:output][:foo][:name].value).to eq(out_klass.config_name)
     end
 
     context "after having received a batch of events" do
@@ -68,14 +74,21 @@ def increment(_)
       end
 
       it "should increment the number of events received" do
-        expect(counter_in).to receive(:increment).with(events.length)
-        expect(counter_out).to receive(:increment).with(events.length)
         subject.multi_receive(events)
+        store = metric.collector.snapshot_metric.metric_store.get_with_path("output/foo")[:output][:foo][:events]
+        number_of_events = events.length
+        expect(store[:in].value).to eq(number_of_events)
+        expect(store[:out].value).to eq(number_of_events)
       end
 
       it "should record the `duration_in_millis`" do
-        expect(counter_time).to receive(:increment).with(Integer)
-        subject.multi_receive(events)
+        value = 0
+        while value == 0
+          subject.multi_receive(events)
+          store = metric.collector.snapshot_metric.metric_store.get_with_path("output/foo")[:output][:foo][:events]
+          value = store[:duration_in_millis].value
+        end
+        expect(value).to be > 0
       end
     end
 
@@ -115,12 +128,8 @@ def increment(_)
             expect(subject.strategy).to be_a(klass)
           end
 
-          it "should set the correct parameters on the instance" do
-            expect(out_klass).to have_received(:new).with(plugin_args)
-          end
-
           it "should set the metric on the instance" do
-            expect(out_inst).to have_received(:metric=).with(metric)
+            expect(out_inst).to have_received(:metric=).with(subject.namespaced_metric)
           end
 
           [[:register], [:do_close], [:multi_receive, [[]] ] ].each do |method, args|
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 68c9eb2e55e..365cd9965af 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -10,6 +10,7 @@
 import org.jruby.runtime.ObjectAllocator;
 import org.logstash.ackedqueue.ext.JRubyAckedQueueExt;
 import org.logstash.ackedqueue.ext.JRubyWrappedAckedQueueExt;
+import org.logstash.config.ir.compiler.OutputDelegatorExt;
 import org.logstash.execution.QueueReadClientBase;
 import org.logstash.ext.JRubyWrappedWriteClientExt;
 import org.logstash.ext.JrubyAckedReadClientExt;
@@ -65,6 +66,8 @@ public final class RubyUtil {
 
     public static final RubyClass ACKED_QUEUE_CLASS;
 
+    public static final RubyClass OUTPUT_DELEGATOR_CLASS;
+
     static {
         RUBY = Ruby.getGlobalRuntime();
         LOGSTASH_MODULE = RUBY.getOrCreateModule("LogStash");
@@ -92,6 +95,9 @@ public final class RubyUtil {
         RUBY_EVENT_CLASS = setupLogstashClass(
             JrubyEventExtLibrary.RubyEvent::new, JrubyEventExtLibrary.RubyEvent.class
         );
+        OUTPUT_DELEGATOR_CLASS = setupLogstashClass(
+            OutputDelegatorExt::new, OutputDelegatorExt.class
+        );
         final RubyModule json = LOGSTASH_MODULE.defineOrGetModuleUnder("Json");
         final RubyClass stdErr = RUBY.getStandardError();
         LOGSTASH_ERROR = LOGSTASH_MODULE.defineClassUnder(
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
new file mode 100644
index 00000000000..164d714c7fe
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
@@ -0,0 +1,140 @@
+package org.logstash.config.ir.compiler;
+
+import java.util.concurrent.TimeUnit;
+import org.jruby.Ruby;
+import org.jruby.RubyArray;
+import org.jruby.RubyClass;
+import org.jruby.RubyHash;
+import org.jruby.RubyObject;
+import org.jruby.RubyString;
+import org.jruby.RubySymbol;
+import org.jruby.anno.JRubyClass;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.instrument.metrics.MetricKeys;
+import org.logstash.instrument.metrics.counter.LongCounter;
+
+@JRubyClass(name = "OutputDelegator")
+public final class OutputDelegatorExt extends RubyObject {
+
+    private static final long serialVersionUID = 1L;
+
+    private IRubyObject outputClass;
+
+    private IRubyObject strategy;
+
+    private IRubyObject metric;
+
+    private IRubyObject namespacedMetric;
+
+    private IRubyObject metricEvents;
+
+    private RubyString id;
+
+    private LongCounter eventMetricOut;
+
+    private LongCounter eventMetricIn;
+
+    private LongCounter eventMetricTime;
+
+    @JRubyMethod(name = "initialize", optional = 5)
+    public IRubyObject init(final ThreadContext context, final IRubyObject[] arguments) {
+        outputClass = arguments[0];
+        metric = arguments[1];
+        final RubyHash args = (RubyHash) arguments[4];
+        id = (RubyString) args.op_aref(context, RubyString.newString(context.runtime, "id"));
+        namespacedMetric = metric.callMethod(context, "namespace", id.intern19());
+        metricEvents = namespacedMetric.callMethod(
+            context, "namespace", RubySymbol.newSymbol(context.runtime, "events")
+        );
+        namespacedMetric.callMethod(
+            context, "gauge",
+            new IRubyObject[]{
+                RubySymbol.newSymbol(context.runtime, "name"), configName(context)
+            }
+        );
+        eventMetricOut = LongCounter.fromRubyBase(metricEvents, MetricKeys.OUT_KEY);
+        eventMetricIn = LongCounter.fromRubyBase(metricEvents, MetricKeys.IN_KEY);
+        eventMetricTime = LongCounter.fromRubyBase(
+            metricEvents, MetricKeys.DURATION_IN_MILLIS_KEY
+        );
+        strategy = ((RubyClass)
+            arguments[3].callMethod(context, "class_for", concurrency(context))
+        ).newInstance(
+            context,
+            new IRubyObject[]{outputClass, namespacedMetric, arguments[2], args},
+            Block.NULL_BLOCK
+        );
+        return this;
+    }
+
+    public OutputDelegatorExt(final Ruby runtime, final RubyClass metaClass) {
+        super(runtime, metaClass);
+    }
+
+    @JRubyMethod
+    public IRubyObject register(final ThreadContext context) {
+        return strategy.callMethod(context, "register");
+    }
+
+    @JRubyMethod(name = "do_close")
+    public IRubyObject doClose(final ThreadContext context) {
+        return strategy.callMethod(context, "do_close");
+    }
+
+    @JRubyMethod(name = "reloadable?")
+    public IRubyObject isReloadable(final ThreadContext context) {
+        return outputClass.callMethod(context, "reloadable?");
+    }
+
+    @JRubyMethod
+    public IRubyObject concurrency(final ThreadContext context) {
+        return outputClass.callMethod(context, "concurrency");
+    }
+
+    @JRubyMethod(name = "config_name")
+    public IRubyObject configName(final ThreadContext context) {
+        return outputClass.callMethod(context, "config_name");
+    }
+
+    @JRubyMethod
+    public IRubyObject id(final ThreadContext context) {
+        return id;
+    }
+
+    @JRubyMethod
+    public IRubyObject metric(final ThreadContext context) {
+        return metric;
+    }
+
+    @JRubyMethod(name = "namespaced_metric")
+    public IRubyObject namespacedMetric(final ThreadContext context) {
+        return namespacedMetric;
+    }
+
+    @JRubyMethod(name = "metric_events")
+    public IRubyObject metricEvents(final ThreadContext context) {
+        return metricEvents;
+    }
+
+    @JRubyMethod
+    public IRubyObject strategy(final ThreadContext context) {
+        return strategy;
+    }
+
+    @JRubyMethod(name = "multi_receive")
+    public IRubyObject multiReceive(final ThreadContext context, final IRubyObject events) {
+        final RubyArray batch = (RubyArray) events;
+        final int count = batch.size();
+        eventMetricIn.increment((long) count);
+        final long start = System.nanoTime();
+        strategy.callMethod(context, "multi_receive", batch);
+        eventMetricTime.increment(
+            TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS)
+        );
+        eventMetricOut.increment((long) count);
+        return this;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
index 18755553895..ee425ee5f33 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/VariableDefinition.java
@@ -1,5 +1,6 @@
 package org.logstash.config.ir.compiler;
 
+import org.jruby.internal.runtime.methods.DynamicMethod;
 import org.jruby.runtime.builtin.IRubyObject;
 
 /**
@@ -52,6 +53,8 @@ private static Class<?> safeType(final Class<?> clazz) {
             safe = IRubyObject.class;
         } else if (EventCondition.class.isAssignableFrom(clazz)) {
             safe = EventCondition.class;
+        } else if (DynamicMethod.class.isAssignableFrom(clazz)) {
+            safe = DynamicMethod.class;
         } else {
             safe = clazz;
         }
diff --git a/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java b/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
index da4c2932c90..2679e852b43 100644
--- a/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
+++ b/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
@@ -13,6 +13,7 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
+import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.counter.LongCounter;
 
 import java.io.IOException;
@@ -22,11 +23,6 @@
 @JRubyClass(name = "QueueReadClientBase")
 public abstract class QueueReadClientBase extends RubyObject implements QueueReadClient {
 
-    private static final RubySymbol OUT_KEY = RubyUtil.RUBY.newSymbol("out");
-    private static final RubySymbol FILTERED_KEY = RubyUtil.RUBY.newSymbol("filtered");
-    private static final RubySymbol DURATION_IN_MILLIS_KEY =
-            RubyUtil.RUBY.newSymbol("duration_in_millis");
-
     protected final ConcurrentHashMap<Long, QueueBatch> inflightBatches =
             new ConcurrentHashMap<>();
     protected final ConcurrentHashMap<Long, Long> inflightClocks = new ConcurrentHashMap<>();
@@ -53,17 +49,17 @@ public IRubyObject rubyGetInflightBatches(final ThreadContext context) {
 
     @JRubyMethod(name = "set_events_metric", required = 1)
     public IRubyObject setEventsMetric(final ThreadContext context, IRubyObject metric) {
-        eventMetricOut = LongCounter.fromRubyBase(metric, OUT_KEY);
-        eventMetricFiltered = LongCounter.fromRubyBase(metric, FILTERED_KEY);
-        eventMetricTime = LongCounter.fromRubyBase(metric, DURATION_IN_MILLIS_KEY);
+        eventMetricOut = LongCounter.fromRubyBase(metric, MetricKeys.OUT_KEY);
+        eventMetricFiltered = LongCounter.fromRubyBase(metric, MetricKeys.FILTERED_KEY);
+        eventMetricTime = LongCounter.fromRubyBase(metric, MetricKeys.DURATION_IN_MILLIS_KEY);
         return this;
     }
 
     @JRubyMethod(name = "set_pipeline_metric", required = 1)
     public IRubyObject setPipelineMetric(final ThreadContext context, IRubyObject metric) {
-        pipelineMetricOut = LongCounter.fromRubyBase(metric, OUT_KEY);
-        pipelineMetricFiltered = LongCounter.fromRubyBase(metric, FILTERED_KEY);
-        pipelineMetricTime = LongCounter.fromRubyBase(metric, DURATION_IN_MILLIS_KEY);
+        pipelineMetricOut = LongCounter.fromRubyBase(metric, MetricKeys.OUT_KEY);
+        pipelineMetricFiltered = LongCounter.fromRubyBase(metric, MetricKeys.FILTERED_KEY);
+        pipelineMetricTime = LongCounter.fromRubyBase(metric, MetricKeys.DURATION_IN_MILLIS_KEY);
         return this;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java
new file mode 100644
index 00000000000..39531ed9483
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/MetricKeys.java
@@ -0,0 +1,20 @@
+package org.logstash.instrument.metrics;
+
+import org.jruby.RubySymbol;
+import org.logstash.RubyUtil;
+
+public final class MetricKeys {
+
+    private MetricKeys() {
+        // Constant Holder
+    }
+
+    public static final RubySymbol OUT_KEY = RubyUtil.RUBY.newSymbol("out");
+
+    public static final RubySymbol IN_KEY = RubyUtil.RUBY.newSymbol("in");
+
+    public static final RubySymbol DURATION_IN_MILLIS_KEY =
+        RubyUtil.RUBY.newSymbol("duration_in_millis");
+
+    public static final RubySymbol FILTERED_KEY = RubyUtil.RUBY.newSymbol("filtered");
+}
