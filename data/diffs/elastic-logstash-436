diff --git a/lib/logstash/filters/metrics.rb b/lib/logstash/filters/metrics.rb
index 887949b0e5e..fe8022f1507 100644
--- a/lib/logstash/filters/metrics.rb
+++ b/lib/logstash/filters/metrics.rb
@@ -128,6 +128,7 @@ def register
   def filter(event)
     return unless filter?(event)
 
+    # TODO(piavlo): This should probably be moved to base filter class.
     if @ignore_older_than > 0 && Time.now - event.ruby_timestamp > @ignore_older_than
       @logger.debug("Skipping metriks for old event", :event => event)
       return
diff --git a/lib/logstash/outputs/statsd.rb b/lib/logstash/outputs/statsd.rb
index 43334b4122c..8b4445129fd 100644
--- a/lib/logstash/outputs/statsd.rb
+++ b/lib/logstash/outputs/statsd.rb
@@ -61,6 +61,9 @@ class LogStash::Outputs::Statsd < LogStash::Outputs::Base
   # Enable debugging output?
   config :debug, :validate => :boolean, :default => false
 
+  # Don't send events that have @timestamp older than specified number of seconds.
+  config :ignore_older_than, :validate => :number, :default => 0
+
   public
   def register
     require "statsd"
@@ -71,11 +74,17 @@ def register
   def receive(event)
     return unless output?(event)
 
+    # TODO(piavlo): This should probably move to base output plugin?
+    if @ignore_older_than > 0 && Time.now - event.ruby_timestamp > @ignore_older_than
+      @logger.debug? and @logger.debug("Skipping metriks for old event", :event => event)
+      return
+    end
+
     @client.namespace = event.sprintf(@namespace) if not @namespace.empty?
-    logger.debug("Original sender: #{@sender}")
+    @logger.debug? and @logger.debug("Original sender: #{@sender}")
     sender = event.sprintf(@sender)
-    logger.debug("Munged sender: #{sender}")
-    logger.debug("Event: #{event}")
+    @logger.debug? and @logger.debug("Munged sender: #{sender}")
+    @logger.debug? and @logger.debug("Event: #{event}")
     @increment.each do |metric|
       @client.increment(build_stat(event.sprintf(metric), sender), @sample_rate)
     end
@@ -95,7 +104,7 @@ def receive(event)
   def build_stat(metric, sender=@sender)
     sender = sender.gsub('::','.').gsub(RESERVED_CHARACTERS_REGEX, '_').gsub(".", "_")
     metric = metric.gsub('::','.').gsub(RESERVED_CHARACTERS_REGEX, '_')
-    @logger.debug("Formatted value", :sender => sender, :metric => metric)
+    @logger.debug? and @logger.debug("Formatted value", :sender => sender, :metric => metric)
     return "#{sender}.#{metric}"
   end
 end # class LogStash::Outputs::Statsd
