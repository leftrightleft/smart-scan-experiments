diff --git a/lib/logstash/config/config_ast.rb b/lib/logstash/config/config_ast.rb
index f5e6eaf9af7..d5ffcac4b43 100644
--- a/lib/logstash/config/config_ast.rb
+++ b/lib/logstash/config/config_ast.rb
@@ -6,6 +6,15 @@ def compile
     return elements.collect(&:compile).reject(&:empty?).join("")
   end
 
+  # Traverse the syntax tree recursively.
+  # The order should respect the order of the configuration file as it is read
+  # and written by humans (and the order in which it is parsed).
+  def recurse(e, depth=0, &block)
+    r = block.call(e, depth)
+    e.elements.each { |e| recurse(e, depth+1, &block) } if r && e.elements
+    nil
+  end
+
   def recursive_inject(results=[], &block)
     if !elements.nil?
       elements.each do |element|
@@ -48,6 +57,7 @@ def compile
       code << "@inputs = []"
       code << "@filters = []"
       code << "@outputs = []"
+      code << "@flushers = []"
       sections = recursive_select(LogStash::Config::AST::PluginSection)
       sections.each do |s|
         code << s.compile_initializer
@@ -76,7 +86,6 @@ def compile
       end
 
       code += definitions.join("\n").split("\n", -1).collect { |l| "  #{l}" }
-      #code << "end"
       return code.join("\n")
     end
   end
@@ -84,14 +93,38 @@ def compile
   class Comment < Node; end
   class Whitespace < Node; end
   class PluginSection < Node
+    # Global plugin numbering for the janky instance variable naming we use
+    # like @filter_<name>_1
     @@i = 0
+
     # Generate ruby code to initialize all the plugins.
     def compile_initializer
       generate_variables
       code = []
-      @variables.collect do |plugin, name|
+      @variables.each do |plugin, name|
         code << "#{name} = #{plugin.compile_initializer}"
         code << "@#{plugin.plugin_type}s << #{name}"
+
+        # The flush method for this filter.
+        if plugin.plugin_type == "filter"
+          code << "#{name}_flush = lambda do |&block|"
+          code << "  @logger.debug? && @logger.debug(\"Flushing\", :plugin => #{name})"
+          code << "  flushed_events = #{name}.flush"
+          code << "  next if flushed_events.nil? || flushed_events.empty?"
+          code << "  flushed_events.each do |event|"
+          code << "    extra_events = []"
+          code << "    @logger.debug? && @logger.debug(\"Flushing\", :plugin => #{name}, :event => event)"
+          code << "    #{plugin.compile_starting_here.gsub(/^/, "  ")}"
+          #code << "    @filter_to_output << event"
+          #code << "    extra_events.each do |e|"
+          #code << "      @logger.debug? && @logger.debug(\"Flushing\", :plugin => #{name}, :event => e)"
+          #code << "      @filter_to_output << e"
+          #code << "    end"
+          code << "  end"
+          code << "end"
+          code << "@flushers << #{name}_flush if #{name}.respond_to?(:flush)"
+          #code << "# #{name}_flush = #{plugin.plugin_type}"
+        end
       end
       return code.join("\n")
     end
@@ -159,6 +192,7 @@ def compile
           # and this should simply compile to 
           #   #{variable_name}.filter(event)
           return [
+            "# #{text_value.split("\n").join("")}",
             "newevents = []",
             "extra_events.each do |event|",
             "  #{variable_name}.filter(event) do |newevent|",
@@ -183,6 +217,47 @@ def compile
           return "plugin(#{plugin_type.inspect}, #{plugin_name.inspect}, #{attributes_code})"
       end
     end
+
+    def compile_starting_here
+      return unless plugin_type == "filter" # only filter supported.
+      expressions = [
+        LogStash::Config::AST::Branch,
+        LogStash::Config::AST::Plugin
+      ]
+      code = []
+
+      # Find the branch we are in, if any (the 'if' statement, etc)
+      self_branch = recursive_select_parent(LogStash::Config::AST::BranchEntry).first
+
+      # Find any siblings to our branch so we can skip them later.  For example,
+      # if we are in an 'else if' we want to skip any sibling 'else if' or
+      # 'else' blocks.
+      branch_siblings = []
+      if self_branch
+        branch_siblings = recursive_select_parent(LogStash::Config::AST::Branch).first \
+          .recursive_select(LogStash::Config::AST::BranchEntry) \
+          .reject { |b| b == self_branch }
+      end
+
+      #ast = recursive_select_parent(LogStash::Config::AST::PluginSection).first
+      ast = recursive_select_parent(LogStash::Config::AST::Config).first
+
+      found = false
+      recurse(ast) do |element, depth|
+        next false if ast.is_a?(LogStash::Config::AST::PluginSection) && ast.plugin_type != "filter"
+        if element == self
+          found = true
+          next false
+        end
+        if found && expressions.include?(element.class)
+          code << element.compile
+          next false
+        end
+        next false if branch_siblings.include?(element)
+        next true
+      end
+      return code.collect { |l| "#{l}\n" }.join("")
+    end # def compile_starting_here
   end
 
   class Name < Node
@@ -248,21 +323,23 @@ def compile
       return super + "end\n"
     end
   end
-  class If < Node
+
+  class BranchEntry < Node; end
+  class If < BranchEntry
     def compile
       children = recursive_inject { |e| e.is_a?(Branch) || e.is_a?(Plugin) }
-      return "if #{condition.compile}\n" \
+      return "if #{condition.compile} # if #{condition.text_value}\n" \
         << children.collect(&:compile).map { |s| s.split("\n", -1).map { |l| "  " + l }.join("\n") }.join("") << "\n"
     end
   end
-  class Elsif < Node
+  class Elsif < BranchEntry
     def compile
       children = recursive_inject { |e| e.is_a?(Branch) || e.is_a?(Plugin) }
-      return "elsif #{condition.compile}\n" \
+      return "elsif #{condition.compile} # else if #{condition.text_value}\n" \
         << children.collect(&:compile).map { |s| s.split("\n", -1).map { |l| "  " + l }.join("\n") }.join("") << "\n"
     end
   end
-  class Else < Node
+  class Else < BranchEntry
     def compile
       children = recursive_inject { |e| e.is_a?(Branch) || e.is_a?(Plugin) }
       return "else\n" \
diff --git a/lib/logstash/filters/base.rb b/lib/logstash/filters/base.rb
index dba1848bdc1..2319f9da325 100644
--- a/lib/logstash/filters/base.rb
+++ b/lib/logstash/filters/base.rb
@@ -223,4 +223,9 @@ def filter?(event)
 
     return true
   end
+
+  public
+  def teardown
+    # Nothing to do by default.
+  end
 end # class LogStash::Filters::Base
diff --git a/lib/logstash/filters/multiline.rb b/lib/logstash/filters/multiline.rb
index 76fcff420fd..9b2cc12dafe 100644
--- a/lib/logstash/filters/multiline.rb
+++ b/lib/logstash/filters/multiline.rb
@@ -98,8 +98,9 @@ class LogStash::Filters::Multiline < LogStash::Filters::Base
   #     NUMBER \d+
   config :patterns_dir, :validate => :array, :default => []
 
-  # for debugging & testing purposes, do not use in production. allows periodic flushing of pending events
-  config :enable_flush, :validate => :boolean, :default => false
+  # The maximum age an event can be (in seconds) before it is automatically
+  # flushed.
+  config :max_age, :validate => :number, :default => 5
 
   # Detect if we are running from a jarfile, pick the right path.
   @@patterns_path = Set.new
@@ -219,17 +220,30 @@ def filter(event)
   # Note: flush is disabled now; it is preferable to use the multiline codec.
   public
   def flush
-    return [] unless @enable_flush
-
     events = []
-    @pending.each do |key, value|
-      value.uncancel
-      events << collapse_event!(value)
+    flushed = @pending.collect do |key, value|
+      t = value["@timestamp"]
+      age = Time.now - (t.is_a?(Array) ? t.first : t)
+      if age >= @max_age
+        value.uncancel
+        events << collapse_event!(value)
+        next key
+      end
+    end
+    flushed.each do |key|
+      @pending.delete(key)
     end
-    @pending.clear
     return events
   end # def flush
 
+  public
+  def teardown
+    return @pending.collect do |k,v|
+      v.uncancel
+      next collapse_event!(v)
+    end
+  end
+
   private
 
   def collapse_event!(event)
diff --git a/lib/logstash/inputs/stdin.rb b/lib/logstash/inputs/stdin.rb
index d065e2b09ee..7c8535659a4 100644
--- a/lib/logstash/inputs/stdin.rb
+++ b/lib/logstash/inputs/stdin.rb
@@ -30,7 +30,7 @@ def run(queue)
           event["host"] = @host
           queue << event
         end
-      rescue EOFError, LogStash::ShutdownSignal
+      rescue IOError, EOFError, LogStash::ShutdownSignal
         # stdin closed or a requested shutdown
         break
       end
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index 8ed9c7b5a52..1c59e80018a 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -73,16 +73,22 @@ def run
     start_filters if filters?
     start_outputs
 
+    # Set up the periodic flusher thread.
+    @flusher_thread = Thread.new { Stud.interval(5) { break if terminating?; filter_flusher } }
+
     @ready = true
 
     @logger.info("Pipeline started")
     wait_inputs
 
     # In theory there's nothing to do to filters to tell them to shutdown?
+    @terminating = true
     if filters?
       shutdown_filters
       wait_filters
     end
+    filter_flusher
+
     shutdown_outputs
     wait_outputs
 
@@ -142,12 +148,10 @@ def start_filters
     @filter_threads = @settings["filter-workers"].times.collect do
       Thread.new { filterworker }
     end
-
-    # Set up the periodic flusher thread.
-    @flusher_thread = Thread.new { Stud.interval(5) { filter_flusher } }
   end
 
   def start_outputs
+    @outputs.each(&:register)
     @output_threads = [
       Thread.new { outputworker }
     ]
@@ -217,7 +221,6 @@ def filterworker
 
   def outputworker
     LogStash::Util::set_thread_name(">output")
-    @outputs.each(&:register)
     @outputs.each(&:worker_setup)
     while true
       event = @filter_to_output.pop
@@ -252,6 +255,10 @@ def shutdown
     # the inputs to finish, because in the #run method we wait for that anyway.
   end # def shutdown
 
+  def terminating?
+    return @terminating
+  end
+
   def plugin(plugin_type, name, *args)
     args << {} if args.empty?
     klass = LogStash::Plugin.lookup(plugin_type, name)
@@ -267,6 +274,15 @@ def output(event)
   end
 
   def filter_flusher
+    @flushers.each do |flusher|
+      flusher.call do |event|
+        @logger.debug? and @logger.debug("Pushing flushed events", :event => event)
+        @filter_to_output.push(event) unless event.cancelled?
+      end
+    end
+  end # filter_Flusher
+
+  def _filter_flusher
     events = []
     @filters.each do |filter|
 
diff --git a/spec/filters/multiline.rb b/spec/filters/multiline.rb
index e5be67f31d0..74587023f35 100644
--- a/spec/filters/multiline.rb
+++ b/spec/filters/multiline.rb
@@ -11,7 +11,6 @@
     config <<-CONFIG
     filter {
       multiline {
-        enable_flush => true
         pattern => "^\\s"
         what => previous
       }
@@ -30,7 +29,6 @@
     config <<-CONFIG
     filter {
       multiline {
-        enable_flush => true
         pattern => "^%{NUMBER} %{TIME}"
         negate => true
         what => previous
@@ -47,7 +45,6 @@
     config <<-CONFIG
       filter {
         multiline {
-          enable_flush => true
           pattern => "^\\s"
           what => previous
         }
@@ -98,7 +95,6 @@
           add_tag => "dummy"
         }
         multiline {
-          enable_flush => true
           add_tag => [ "nope" ]
           remove_tag => "dummy"
           add_field => [ "dummy2", "value" ]
diff --git a/spec/test_utils.rb b/spec/test_utils.rb
index f890552ef34..048fe37d88e 100644
--- a/spec/test_utils.rb
+++ b/spec/test_utils.rb
@@ -100,7 +100,7 @@ def sample(sample_event, &block)
             results += extra.reject(&:cancelled?)
           end
 
-          pipeline.instance_eval {@filters.each {|f| results += f.flush if f.respond_to?(:flush)}}
+          pipeline.instance_eval {@filters.each {|f| f.teardown.tap { |v| results += v if v } if f.respond_to?(:teardown)}}
 
           # TODO(sissel): pipeline flush needs to be implemented.
           # results += pipeline.flush
