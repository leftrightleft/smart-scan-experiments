diff --git a/lib/logstash/filters/mutate.rb b/lib/logstash/filters/mutate.rb
index ffee7e09c1c..dae555abeaf 100644
--- a/lib/logstash/filters/mutate.rb
+++ b/lib/logstash/filters/mutate.rb
@@ -390,21 +390,19 @@ def strip(event)
   private
   def merge(event)
     @merge.each do |dest_field, added_fields|
-      #When multiple calls, added_field is an array
-      added_fields = [ added_fields ] if ! added_fields.is_a?(Array)
-      added_fields.each do |added_field|
+      # When multiple calls, added_field is an array
+      Array(added_fields).each do |added_field|
         if event[dest_field].is_a?(Hash) ^ event[added_field].is_a?(Hash)
-          @logger.error("Not possible to merge an array and a hash: ",
-                        :dest_field => dest_field,
-                        :added_field => added_field )
+          @logger.error("Not possible to merge an array and a hash: ", :dest_field => dest_field, :added_field => added_field )
           next
         end
-        if event[dest_field].is_a?(Hash) #No need to test the other
+
+        if event[dest_field].is_a?(Hash)
+          # No need to test the other
           event[dest_field].update(event[added_field])
         else
-          event[dest_field] = [event[dest_field]] if ! event[dest_field].is_a?(Array)
-          event[added_field] = [event[added_field]] if ! event[added_field].is_a?(Array)
-         event[dest_field].concat(event[added_field])
+          event[dest_field] = Array(event[dest_field])
+          event[dest_field].concat(Array(event[added_field]))
         end
       end
     end
diff --git a/spec/filters/mutate_spec.rb b/spec/filters/mutate_spec.rb
index 38afe392a77..ab1ffa009b4 100644
--- a/spec/filters/mutate_spec.rb
+++ b/spec/filters/mutate_spec.rb
@@ -254,5 +254,104 @@
       ]
     end
   end
+
+  describe "merge string field into inexisting field" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => "bar") do
+      insist { subject["list"] } == ["bar"]
+      insist { subject["foo"] } == "bar"
+    end
+  end
+
+  describe "merge string field into empty array" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => "bar", "list" => []) do
+      insist { subject["list"] } == ["bar"]
+      insist { subject["foo"] } == "bar"
+    end
+  end
+
+  describe "merge string field into existing array" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => "bar", "list" => ["baz"]) do
+      insist { subject["list"] } == ["baz", "bar"]
+      insist { subject["foo"] } == "bar"
+    end
+  end
+
+  describe "merge non empty array field into existing array" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => ["bar"], "list" => ["baz"]) do
+      insist { subject["list"] } == ["baz", "bar"]
+      insist { subject["foo"] } == ["bar"]
+    end
+  end
+
+  describe "merge empty array field into existing array" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => [], "list" => ["baz"]) do
+      insist { subject["list"] } == ["baz"]
+      insist { subject["foo"] } == []
+    end
+  end
+
+  describe "merge array field into string field" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => ["bar"], "list" => "baz") do
+      insist { subject["list"] } == ["baz", "bar"]
+      insist { subject["foo"] } == ["bar"]
+    end
+  end
+
+  describe "merge string field into string field" do
+    config '
+      filter {
+        mutate {
+          merge => [ "list", "foo" ]
+        }
+      }'
+
+    sample("foo" => "bar", "list" => "baz") do
+      insist { subject["list"] } == ["baz", "bar"]
+      insist { subject["foo"] } == "bar"
+    end
+  end
+
 end
 
