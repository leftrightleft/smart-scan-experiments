diff --git a/lib/logstash/inputs/file.rb b/lib/logstash/inputs/file.rb
index dfb6f1f8e9d..3d877792b23 100644
--- a/lib/logstash/inputs/file.rb
+++ b/lib/logstash/inputs/file.rb
@@ -1,6 +1,7 @@
 require "logstash/inputs/base"
 require "logstash/namespace"
 
+require "pathname"
 require "socket" # for Socket.gethostname
 
 require "addressable/uri"
@@ -18,6 +19,7 @@ class LogStash::Inputs::File < LogStash::Inputs::Base
 
   # The path to the file to use as an input.
   # You can use globs here, such as "/var/log/*.log"
+  # Paths must be absolute and cannot be relative.
   config :path, :validate => :array, :required => true
 
   # Exclusions (matched against the filename, not full path). Globs
@@ -47,6 +49,17 @@ class LogStash::Inputs::File < LogStash::Inputs::Base
   # monitored log files.
   config :sincedb_write_interval, :validate => :number, :default => 15
 
+  public
+  def initialize(params)
+    super
+    
+    @path.each do |path|
+      if Pathname.new(path).relative?
+        raise ArgumentError.new("File paths must be absolute, relative path specified: #{path}")
+      end
+    end
+  end
+
   public
   def register
     require "filewatch/tail"
diff --git a/test/logstash/inputs/test_file.rb b/test/logstash/inputs/test_file.rb
index 08717cc910a..2ff2f7dbbe1 100644
--- a/test/logstash/inputs/test_file.rb
+++ b/test/logstash/inputs/test_file.rb
@@ -86,5 +86,44 @@
       logfile.unlink
     end
   end
+  
+  test "file input should raise an ArgumentError when a relative path is specified" do
+    assert_raises(ArgumentError) {
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => ["./relative/path"])
+    }
+    
+    assert_raises(ArgumentError) {
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => ["../relative/path"])
+    }
+    
+    assert_raises(ArgumentError) {
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => ["relative/path"])
+    }
+    
+    assert_raises(ArgumentError) {
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => ["~/relative/path"])
+    }
+  end
+  
+  test "file input should raise an ArgumentError with a useful message when a relative path is specified" do
+    relative_path = "./relative/path"
+    the_exception = nil
+    begin
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => [relative_path])
+    rescue ArgumentError => e
+      the_exception = e
+    end
+    
+    refute_nil(the_exception)
+    assert_equal("File paths must be absolute, relative path specified: #{relative_path}", e.message)
+  end
+
+  test "file input should not raise an exception for an absolute path containing wildcards" do
+    begin
+      LogStash::Inputs::File.new("type" => ["testing"], "path" => ["/absolute/path/*"])
+    rescue ArgumentError => e
+      flunk "An absolute path containing a wildcard should be valid"
+    end
+  end
 
 end # testing for LogStash::Inputs::File
