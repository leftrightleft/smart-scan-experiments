diff --git a/logstash-core/src/main/java/org/logstash/Cloner.java b/logstash-core/src/main/java/org/logstash/Cloner.java
index eba97b927b0..2c0f00d66f3 100644
--- a/logstash-core/src/main/java/org/logstash/Cloner.java
+++ b/logstash-core/src/main/java/org/logstash/Cloner.java
@@ -13,6 +13,7 @@ public final class Cloner {
 
     private Cloner(){}
 
+    @SuppressWarnings("unchecked")
     public static <T> T deep(final T input) {
         if (input instanceof Map<?, ?>) {
             return (T) deepMap((Map<?, ?>) input);
diff --git a/logstash-core/src/main/java/org/logstash/Util.java b/logstash-core/src/main/java/org/logstash/Util.java
index 019641bce12..7c2991f05b0 100644
--- a/logstash-core/src/main/java/org/logstash/Util.java
+++ b/logstash-core/src/main/java/org/logstash/Util.java
@@ -35,6 +35,7 @@ public static Map<String, Object> getMapFixtureHandcrafted() {
         return map;
     }
 
+    @SuppressWarnings("unchecked")
     public static void mapMerge(final Map<String, Object> target, final Map<String, Object> add) {
         LinkedHashSet<Object> buffer = null;
         for (final Map.Entry<String, Object> entry : add.entrySet()) {
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index 0e630244907..7c4d23bc52d 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -114,7 +114,7 @@ private Queue(String dirPath, int pageCapacity, long maxBytes, CheckpointIO chec
 
         // retrieve the deserialize method
         try {
-            final Class<?>[] cArg = new Class[1];
+            final Class<?>[] cArg = new Class<?>[1];
             cArg[0] = byte[].class;
             this.deserializeMethod = this.elementClass.getDeclaredMethod("deserialize", cArg);
         } catch (NoSuchMethodException e) {
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index c2b90ab4652..9b3487298e2 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -9,8 +9,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import org.hamcrest.CoreMatchers;
-import org.hamcrest.MatcherAssert;
+
 import org.jruby.RubySymbol;
 import org.jruby.RubyTime;
 import org.jruby.java.proxies.ConcreteJavaProxy;
@@ -327,6 +326,7 @@ public void testFromJsonWithPartialInvalidJsonArray() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testTagOnEmptyTagsField() throws Exception {
         Event e = new Event();
         e.tag("foo");
@@ -337,6 +337,7 @@ public void testTagOnEmptyTagsField() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testTagOnExistingTagsField() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("tags", "foo");
@@ -350,7 +351,7 @@ public void testTagOnExistingTagsField() throws Exception {
     }
 
     @Test
-    public void toStringwithTimestamp() throws Exception {
+    public void toStringWithTimestamp() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("host", "foo");
         data.put("message", "bar");
@@ -359,7 +360,7 @@ public void toStringwithTimestamp() throws Exception {
     }
 
     @Test
-    public void toStringwithoutTimestamp() throws Exception {
+    public void toStringWithoutTimestamp() throws Exception {
         Map<String, Object> data = new HashMap<>();
         data.put("host", "foo");
         data.put("message", "bar");
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
index 76b52782328..1c1f0ec303f 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
@@ -754,9 +754,9 @@ private void stableUnderStress(final int capacity) throws IOException {
             final int count = 20_000;
             final int concurrent = 2;
             queue.open();
-            final Future<Integer>[] futures = new Future[concurrent];
+            final List<Future<Integer>> futures = new ArrayList<>(concurrent);
             for (int c = 0; c < concurrent; ++c) {
-                futures[c] = exec.submit(() -> {
+                futures.add(exec.submit(() -> {
                     int i = 0;
                     try {
                         while (i < count / concurrent) {
@@ -771,7 +771,7 @@ private void stableUnderStress(final int capacity) throws IOException {
                     } catch (final IOException ex) {
                         throw new IllegalStateException(ex);
                     }
-                });
+                }));
             }
             for (int i = 0; i < count; ++i) {
                 try {
@@ -782,7 +782,7 @@ private void stableUnderStress(final int capacity) throws IOException {
                 }
             }
             assertThat(
-                Arrays.stream(futures).map(i -> {
+                futures.stream().map(i -> {
                     try {
                         return i.get(2L, TimeUnit.MINUTES);
                     } catch (final InterruptedException | ExecutionException | TimeoutException ex) {
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
index 6bc653be722..bfa5e2ea5b5 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
@@ -22,11 +22,12 @@ public void testReportFDStats(){
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testReportCpuStats(){
         Map<String, Object> processStats = ProcessMonitor.detect().toMap();
         assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("cpu", processStats.get("cpu"), instanceOf(Map.class));
-        Map cpuStats = ((Map)processStats.get("cpu"));
+        Map<String, Object> cpuStats = (Map<String, Object>) processStats.get("cpu");
         assertThat("cpu.process_percent", (Short)cpuStats.get("process_percent") >= 0, is(true));
         assertThat("cpu.system_percent", (Short)cpuStats.get("system_percent") >= -1, is(true));
         assertThat("cpu.total_in_millis", (Long)cpuStats.get("total_in_millis") > 0L, is(true));
diff --git a/logstash-core/src/test/java/org/logstash/stress/Concurrent.java b/logstash-core/src/test/java/org/logstash/stress/Concurrent.java
index 49ba5d3bd94..0093017c023 100644
--- a/logstash-core/src/test/java/org/logstash/stress/Concurrent.java
+++ b/logstash-core/src/test/java/org/logstash/stress/Concurrent.java
@@ -5,10 +5,9 @@
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.stream.Collectors;
 import org.logstash.ackedqueue.Batch;
 import org.logstash.ackedqueue.SettingsImpl;
 import org.logstash.ackedqueue.Queue;
@@ -54,6 +53,7 @@ public static Thread producer(Queue q, List<StringElement> input) {
 
     }
 
+    @SuppressWarnings("unchecked")
     public static void oneProducersOneConsumer() throws IOException, InterruptedException {
         List<StringElement> input = new ArrayList<>();
         List<StringElement> output = new ArrayList<>();
@@ -67,7 +67,7 @@ public static void oneProducersOneConsumer() throws IOException, InterruptedExce
         System.out.print("stating single producers and single consumers stress test... ");
 
         for (int i = 0; i < ELEMENT_COUNT; i++) {
-            input.add(new StringElement(new Integer(i).toString()));
+            input.add(new StringElement(Integer.toString(i)));
         }
 
         Thread consumer = new Thread(() -> {
@@ -106,6 +106,7 @@ public static void oneProducersOneConsumer() throws IOException, InterruptedExce
         }
     }
 
+    @SuppressWarnings("unchecked")
     public static void oneProducersOneMultipleConsumer() throws IOException, InterruptedException {
         final List<StringElement> input = new ArrayList<>();
         final Collection<StringElement> output = new ConcurrentLinkedQueue<>();
@@ -121,7 +122,7 @@ public static void oneProducersOneMultipleConsumer() throws IOException, Interru
         System.out.print("stating single producers and multiple consumers stress test... ");
 
         for (int i = 0; i < ELEMENT_COUNT; i++) {
-            input.add(new StringElement(new Integer(i).toString()));
+            input.add(new StringElement(Integer.toString(i)));
         }
 
         for (int i = 0; i < CONSUMERS; i++) {
@@ -145,7 +146,7 @@ public static void oneProducersOneMultipleConsumer() throws IOException, Interru
             }));
         }
 
-        consumers.forEach(c -> c.start());
+        consumers.forEach(Thread::start);
 
         Thread producer = producer(q, input);
         producer.start();
@@ -156,8 +157,8 @@ public static void oneProducersOneMultipleConsumer() throws IOException, Interru
 
         Instant end = Instant.now();
 
-        List<StringElement> result = output.stream().collect(Collectors.toList());
-        Collections.sort(result, (p1, p2) -> Integer.valueOf(p1.toString()).compareTo(Integer.valueOf(p2.toString())));
+        List<StringElement> result = new ArrayList<>(output);
+        result.sort(Comparator.comparing(p -> Integer.valueOf(p.toString())));
 
         if (! input.equals(result)) {
             System.out.println("ERROR: input and output are not equal");
