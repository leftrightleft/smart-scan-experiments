diff --git a/docker/Makefile b/docker/Makefile
index 82b265808fd..a81cb008ec2 100644
--- a/docker/Makefile
+++ b/docker/Makefile
@@ -33,7 +33,7 @@ lint: venv
 
 # Build from artifacts on the local filesystem, using an http server (running
 # in a container) to provide the artifacts to the Dockerfile.
-build-from-local-full-artifacts: venv dockerfile env2yaml
+build-from-local-full-artifacts: venv dockerfile
 	docker run --rm -d --name=$(HTTPD) \
 	           -p 8000:8000 --expose=8000 -v $(ARTIFACTS_DIR):/mnt \
 	           python:3 bash -c 'cd /mnt && python3 -m http.server'
@@ -44,7 +44,7 @@ build-from-local-full-artifacts: venv dockerfile env2yaml
 	docker tag $(IMAGE_TAG)-full:$(VERSION_TAG) $(IMAGE_TAG):$(VERSION_TAG);
 	docker kill $(HTTPD)
 
-build-from-local-oss-artifacts: venv dockerfile env2yaml
+build-from-local-oss-artifacts: venv dockerfile
 	docker run --rm -d --name=$(HTTPD) \
 	           -p 8000:8000 --expose=8000 -v $(ARTIFACTS_DIR):/mnt \
 	           python:3 bash -c 'cd /mnt && python3 -m http.server'
@@ -54,7 +54,7 @@ build-from-local-oss-artifacts: venv dockerfile env2yaml
 	  (docker kill $(HTTPD); false);
 	-docker kill $(HTTPD)
 
-build-from-local-ubi8-artifacts: venv dockerfile env2yaml
+build-from-local-ubi8-artifacts: venv dockerfile
 	docker run --rm -d --name=$(HTTPD) \
 	           -p 8000:8000 --expose=8000 -v $(ARTIFACTS_DIR):/mnt \
 	           python:3 bash -c 'cd /mnt && python3 -m http.server'
@@ -66,7 +66,7 @@ build-from-local-ubi8-artifacts: venv dockerfile env2yaml
 
 COPY_FILES := $(ARTIFACTS_DIR)/docker/config/pipelines.yml $(ARTIFACTS_DIR)/docker/config/logstash-oss.yml $(ARTIFACTS_DIR)/docker/config/logstash-full.yml
 COPY_FILES += $(ARTIFACTS_DIR)/docker/config/log4j2.file.properties $(ARTIFACTS_DIR)/docker/config/log4j2.properties
-COPY_FILES += $(ARTIFACTS_DIR)/docker/pipeline/default.conf $(ARTIFACTS_DIR)/docker/bin/docker-entrypoint $(ARTIFACTS_DIR)/docker/env2yaml/env2yaml
+COPY_FILES += $(ARTIFACTS_DIR)/docker/pipeline/default.conf $(ARTIFACTS_DIR)/docker/bin/docker-entrypoint $(ARTIFACTS_DIR)/docker/env2yaml/env2yaml.rb
 
 $(ARTIFACTS_DIR)/docker/config/pipelines.yml: data/logstash/config/pipelines.yml
 $(ARTIFACTS_DIR)/docker/config/logstash-oss.yml: data/logstash/config/logstash-oss.yml
@@ -75,7 +75,7 @@ $(ARTIFACTS_DIR)/docker/config/log4j2.file.properties: data/logstash/config/log4
 $(ARTIFACTS_DIR)/docker/config/log4j2.properties: data/logstash/config/log4j2.properties
 $(ARTIFACTS_DIR)/docker/pipeline/default.conf: data/logstash/pipeline/default.conf
 $(ARTIFACTS_DIR)/docker/bin/docker-entrypoint: data/logstash/bin/docker-entrypoint
-$(ARTIFACTS_DIR)/docker/env2yaml/env2yaml: data/logstash/env2yaml/env2yaml
+$(ARTIFACTS_DIR)/docker/env2yaml/env2yaml.rb: data/logstash/env2yaml/env2yaml.rb
 
 $(ARTIFACTS_DIR)/docker/%:
 	cp -f $< $@
@@ -113,7 +113,6 @@ ironbank_docker_paths:
 	mkdir -p $(ARTIFACTS_DIR)/ironbank/scripts
 	mkdir -p $(ARTIFACTS_DIR)/ironbank/scripts/bin
 	mkdir -p $(ARTIFACTS_DIR)/ironbank/scripts/config
-	mkdir -p $(ARTIFACTS_DIR)/ironbank/scripts/go/src/env2yaml/vendor
 	mkdir -p $(ARTIFACTS_DIR)/ironbank/scripts/pipeline
 
 public-dockerfiles: public-dockerfiles_oss public-dockerfiles_full public-dockerfiles_ubi8 public-dockerfiles_ironbank
@@ -130,7 +129,7 @@ public-dockerfiles_full: venv templates/Dockerfile.j2 docker_paths $(COPY_FILES)
 	  templates/Dockerfile.j2 > $(ARTIFACTS_DIR)/Dockerfile-full && \
 	cd $(ARTIFACTS_DIR)/docker && \
 	cp $(ARTIFACTS_DIR)/Dockerfile-full Dockerfile && \
-	tar -zcf ../logstash-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml pipeline
+	tar -zcf ../logstash-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml.rb pipeline
 
 public-dockerfiles_oss: venv templates/Dockerfile.j2 docker_paths $(COPY_FILES)
 	jinja2 \
@@ -144,7 +143,7 @@ public-dockerfiles_oss: venv templates/Dockerfile.j2 docker_paths $(COPY_FILES)
 	  templates/Dockerfile.j2 > $(ARTIFACTS_DIR)/Dockerfile-oss && \
 	cd $(ARTIFACTS_DIR)/docker && \
 	cp $(ARTIFACTS_DIR)/Dockerfile-oss Dockerfile && \
-	tar -zcf ../logstash-oss-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml pipeline
+	tar -zcf ../logstash-oss-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml.rb pipeline
 
 public-dockerfiles_ubi8: venv templates/Dockerfile.j2 docker_paths $(COPY_FILES)
 	jinja2 \
@@ -158,7 +157,7 @@ public-dockerfiles_ubi8: venv templates/Dockerfile.j2 docker_paths $(COPY_FILES)
 	  templates/Dockerfile.j2 > $(ARTIFACTS_DIR)/Dockerfile-ubi8 && \
 	cd $(ARTIFACTS_DIR)/docker && \
 	cp $(ARTIFACTS_DIR)/Dockerfile-ubi8 Dockerfile && \
-	tar -zcf ../logstash-ubi8-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml pipeline
+	tar -zcf ../logstash-ubi8-$(VERSION_TAG)-docker-build-context.tar.gz Dockerfile bin config env2yaml.rb pipeline
 
 public-dockerfiles_ironbank: templates/hardening_manifest.yaml templates/Dockerfile.j2 ironbank_docker_paths $(COPY_IRONBANK_FILES)
 	jinja2 \
@@ -200,17 +199,6 @@ venv: requirements.txt
 	for i in 0 1 2 3 4 5; do sleep "$i"; pip install -r requirements.txt && break; done &&\
 	touch venv
 
-# Make a Golang container that can compile our env2yaml tool.
-golang:
-	docker build -t golang:env2yaml data/golang
-
-# Compile "env2yaml", the helper for configuring logstash.yml via environment
-# variables.
-env2yaml: golang
-	docker run --rm -i \
-	  -v $(PWD)/data/logstash/env2yaml:/usr/local/src/env2yaml:Z \
-	  golang:env2yaml
-
 # Generate the Dockerfiles from Jinja2 templates.
 dockerfile: venv templates/Dockerfile.j2
 	$(foreach FLAVOR, $(IMAGE_FLAVORS), \
@@ -225,7 +213,7 @@ dockerfile: venv templates/Dockerfile.j2
 	)
 
 clean:
-	rm -f ${ARTIFACTS_DIR}/env2yaml/env2yaml ${ARTIFACTS_DIR}/Dockerfile
+	rm -f ${ARTIFACTS_DIR}/Dockerfile
 	rm -rf venv
 
 .PHONY: clean push
diff --git a/docker/data/logstash/bin/docker-entrypoint b/docker/data/logstash/bin/docker-entrypoint
index e2fd33c296a..0318a65d094 100755
--- a/docker/data/logstash/bin/docker-entrypoint
+++ b/docker/data/logstash/bin/docker-entrypoint
@@ -4,7 +4,7 @@
 # Note that this will mutate logstash.yml in place if any such settings are found.
 # This may be undesirable, especially if logstash.yml is bind-mounted from the
 # host system.
-env2yaml /usr/share/logstash/config/logstash.yml
+./bin/ruby --dev /usr/share/logstash/env2yaml.rb /usr/share/logstash/config/logstash.yml
 
 if [[ -n "$LOG_STYLE" ]]; then
   case "$LOG_STYLE" in
diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.rb
similarity index 56%
rename from docker/data/logstash/env2yaml/env2yaml.go
rename to docker/data/logstash/env2yaml/env2yaml.rb
index ce8cda1c2a4..c47ed795ef9 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.rb
@@ -1,52 +1,17 @@
-// env2yaml
-//
-// Merge environment variables into logstash.yml.
-// For example, running Docker with:
-//
-//	docker run -e pipeline.workers=6
-//
-// or
-//
-//	docker run -e PIPELINE_WORKERS=6
-//
-// will cause logstash.yml to contain the line:
-//
-//	pipeline.workers: 6
-package main
+require 'yaml'
 
-import (
-	"errors"
-	"gopkg.in/yaml.v2"
-	"io/ioutil"
-	"log"
-	"os"
-	"strings"
-)
+def squash_setting(setting)
+  setting.downcase.gsub('.', '').gsub('_', '')
+end
 
-// If the given string can be parsed as YAML, then do so and return the
-// resulting entity. Otherwise, return the string unmodified.
-func FromYamlIfPossible(str string) interface{} {
-	var entity interface{}
-	err := yaml.Unmarshal([]byte(str), &entity)
-	if err == nil {
-		return entity
-	} else {
-		return str
-	}
-}
+# Set filename
+filename = ARGV[0]
 
-// Given a setting name, return a downcased version with delimiters removed.
-func squashSetting(setting string) string {
-	downcased := strings.ToLower(setting)
-	de_dotted := strings.Replace(downcased, ".", "", -1)
-	de_underscored := strings.Replace(de_dotted, "_", "", -1)
-	return de_underscored
-}
+# Load YAML file
+settings = YAML.load_file(filename) || {}
 
-// Given a setting name like "pipeline.workers" or "PIPELINE_UNSAFE_SHUTDOWN",
-// return the canonical setting name. eg. 'pipeline.unsafe_shutdown'
-func normalizeSetting(setting string) (string, error) {
-	valid_settings := []string{
+# Define list of valid settings
+valid_settings = [
 		"api.enabled",
 		"api.http.host",
 		"api.http.port",
@@ -87,10 +52,10 @@
 		"dead_letter_queue.storage_policy",
 		"dead_letter_queue.retain.age",
 		"path.dead_letter_queue",
-		"http.enabled",     // DEPRECATED: prefer `api.enabled`
-		"http.environment", // DEPRECATED: prefer `api.environment`
-		"http.host",        // DEPRECATED: prefer `api.http.host`
-		"http.port",        // DEPRECATED: prefer `api.http.port`
+		"http.enabled",     # DEPRECATED: prefer `api.enabled`
+		"http.environment", # DEPRECATED: prefer `api.environment`
+		"http.host",        # DEPRECATED: prefer `api.http.host`
+		"http.port",        # DEPRECATED: prefer `api.http.port`
 		"log.level",
 		"log.format",
 		"modules",
@@ -153,62 +118,39 @@
 		"xpack.geoip.downloader.enabled",
 		"cloud.id",
 		"cloud.auth",
-	}
+]
 
-	for _, valid_setting := range valid_settings {
-		if squashSetting(setting) == squashSetting(valid_setting) {
-			return valid_setting, nil
-		}
-	}
-	return "", errors.New("Invalid setting: " + setting)
-}
+# Normalize keys in valid settings
+normalized_valid_settings = valid_settings.map { |setting| squash_setting(setting) }
 
-func main() {
-	if len(os.Args) != 2 {
-		log.Fatalf("usage: env2yaml FILENAME")
-	}
-	settingsFilePath := os.Args[1]
+# Prepare a hash for mapping normalized keys back to their original form
+valid_setting_map = Hash[normalized_valid_settings.zip(valid_settings)]
 
-	settingsFile, err := ioutil.ReadFile(settingsFilePath)
-	if err != nil {
-		log.Fatalf("error: %v", err)
-	}
+# Merge any valid settings found in the environment
+found_new_settings = false
 
-	// Read the original settings file into a map.
-	settings := make(map[string]interface{})
-	err = yaml.Unmarshal(settingsFile, &settings)
-	if err != nil {
-		log.Fatalf("error: %v", err)
-	}
+ENV.each do |key, value|
+  normalized_key = squash_setting(key)
 
-	// Merge any valid settings found in the environment.
-	foundNewSettings := false
-	for _, line := range os.Environ() {
-		kv := strings.SplitN(line, "=", 2)
-		key := kv[0]
-		value := kv[1]
-		setting, err := normalizeSetting(key)
-		if err == nil {
-			foundNewSettings = true
-			log.Printf("Setting '%s' from environment.", setting)
-			settings[setting] = FromYamlIfPossible(value)
-		}
-	}
+  # If the environment variable is a valid setting, update the settings
+  if valid_setting_map[normalized_key]
+    found_new_settings = true
+    puts "Setting '#{valid_setting_map[normalized_key]}' from environment."
 
-	if foundNewSettings {
-		output, err := yaml.Marshal(&settings)
-		if err != nil {
-			log.Fatalf("error: %v", err)
-		}
+    # Try to parse the value as YAML
+    begin
+      parsed_value = YAML.safe_load(value)
+    rescue Psych::SyntaxError
+      parsed_value = value
+    end
 
-		stat, err := os.Stat(settingsFilePath)
-		if err != nil {
-			log.Fatalf("error: %v", err)
-		}
+    target_key = valid_setting_map[normalized_key]
+    settings[target_key] = parsed_value
+  end
+end
+
+# If new settings were found, write them back to the YAML file
+if found_new_settings
+  File.open(filename, 'w') {|f| f.write settings.to_yaml } 
+end
 
-		err = ioutil.WriteFile(settingsFilePath, output, stat.Mode())
-		if err != nil {
-			log.Fatalf("error: %v", err)
-		}
-	}
-}
diff --git a/docker/templates/Dockerfile.j2 b/docker/templates/Dockerfile.j2
index 311e8c3e906..120cd7923ad 100644
--- a/docker/templates/Dockerfile.j2
+++ b/docker/templates/Dockerfile.j2
@@ -32,27 +32,6 @@ ARG BASE_REGISTRY=registry1.dsop.io
 ARG BASE_IMAGE=ironbank/redhat/ubi/ubi8
 ARG BASE_TAG=8.7
 ARG LOGSTASH_VERSION={{ elastic_version }}
-ARG GOLANG_VERSION=1.17.8
-
-FROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG} AS env2yaml
-
-ARG GOLANG_VERSION
-
-# install golang
-RUN yum update -y && yum install -y git
-COPY go${GOLANG_VERSION}.linux-amd64.tar.gz /opt/go.tar.gz
-RUN tar -C /usr/local -xzf /opt/go.tar.gz
-ENV PATH=$PATH:/usr/local/go/bin
-
-# compile the env2yaml tool
-COPY v2.3.0.tar.gz /opt/env2yaml.tar.gz
-COPY scripts/go /usr/local/src/go
-WORKDIR /usr/local/src/go/src/env2yaml
-RUN mkdir -p vendor/gopkg.in
-RUN tar -zxf /opt/env2yaml.tar.gz -C vendor/gopkg.in
-RUN mv vendor/gopkg.in/yaml-2.3.0 vendor/gopkg.in/yaml.v2
-ENV GOPATH=/usr/local/src/go
-RUN go build -mod vendor
 
 # stage 1: unpack logstash
 FROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG} AS builder
@@ -108,7 +87,6 @@ RUN groupadd --gid 1000 logstash && \
 
 {% if image_flavor == 'ironbank' -%}
 WORKDIR /usr/share/logstash
-COPY --from=env2yaml /usr/local/src/go/src/env2yaml/env2yaml /usr/local/bin/env2yaml
 COPY --from=builder --chown=1000:0 /usr/share/logstash /usr/share/logstash
 {% endif -%}
 
@@ -149,7 +127,7 @@ COPY pipeline/default.conf pipeline/logstash.conf
 RUN chown --recursive logstash:root config/ pipeline/
 # Ensure Logstash gets the correct locale by default.
 ENV LANG={{ locale }} LC_ALL={{ locale }}
-COPY env2yaml/env2yaml /usr/local/bin/
+COPY env2yaml/env2yaml.rb .
 # Place the startup wrapper script.
 COPY bin/docker-entrypoint /usr/local/bin/
 {% else -%}
