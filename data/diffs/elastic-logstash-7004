diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 541e2c4c8f6..85becff57c8 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -134,10 +134,10 @@ def converge_state_and_update
 
     unless results.success?
       if auto_reload?
-        logger.debug("Count not fetch the configuration to converge, will retry", :message => results.error, :retrying_in => @reload_interval)
+        logger.debug("Could not fetch the configuration to converge, will retry", :message => results.error, :retrying_in => @reload_interval)
         return
       else
-        raise "Count not fetch the configuration, message: #{results.error}"
+        raise "Could not fetch the configuration, message: #{results.error}"
       end
     end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 6a1d1c99b93..be649253e5b 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -3,14 +3,14 @@
 require "treetop"
 require "logstash/compiler/treetop_monkeypatches"
 java_import org.logstash.config.ir.DSL
-java_import org.logstash.config.ir.SourceMetadata
+java_import org.logstash.common.SourceWithMetadata
 
 module LogStashCompilerLSCLGrammar; module LogStash; module Compiler; module LSCL; module AST
   # Helpers for parsing LSCL files
   module Helpers
     def source_meta
       line, column = line_and_column
-      org.logstash.config.ir.SourceMetadata.new(source_file, line, column, self.text_value)
+      org.logstash.common.SourceWithMetadata.new(source_file, line, column, self.text_value)
     end
 
     def source_file=(value)
@@ -39,7 +39,7 @@ def line_and_column
     end
 
     def empty_source_meta()
-      org.logstash.config.ir.SourceMetadata.new()
+      org.logstash.common.SourceWithMetadata.new()
     end
 
     def jdsl
diff --git a/logstash-core/lib/logstash/config/config_part.rb b/logstash-core/lib/logstash/config/config_part.rb
deleted file mode 100644
index 7f04254d3ea..00000000000
--- a/logstash-core/lib/logstash/config/config_part.rb
+++ /dev/null
@@ -1,13 +0,0 @@
-# encoding: utf-8
-
-module LogStash module Config
- class ConfigPart
-   attr_reader :reader, :source_id, :config_string
-
-   def initialize(reader, source_id, config_string)
-     @reader = reader
-     @source_id = source_id
-     @config_string = config_string
-   end
- end
-end end
diff --git a/logstash-core/lib/logstash/config/pipeline_config.rb b/logstash-core/lib/logstash/config/pipeline_config.rb
index 1713de9006c..afc8c1e1021 100644
--- a/logstash-core/lib/logstash/config/pipeline_config.rb
+++ b/logstash-core/lib/logstash/config/pipeline_config.rb
@@ -10,7 +10,9 @@ class PipelineConfig
     def initialize(source, pipeline_id, config_parts, settings)
       @source = source
       @pipeline_id = pipeline_id
-      @config_parts = Array(config_parts).sort_by { |config_part| [config_part.reader.to_s, config_part.source_id] }
+      # We can't use Array() since config_parts may be a java object!
+      config_parts_array = config_parts.is_a?(Array) ? config_parts : [config_parts]
+      @config_parts = config_parts_array.sort_by { |config_part| [config_part.protocol.to_s, config_part.id] }
       @settings = settings
       @read_at = Time.now
     end
@@ -20,7 +22,7 @@ def config_hash
     end
 
     def config_string
-      @config_string = config_parts.collect(&:config_string).join("\n")
+      @config_string = config_parts.collect(&:text).join("\n")
     end
 
     def system?
@@ -36,8 +38,8 @@ def display_debug_information
       logger.debug("Config from source", :source => source, :pipeline_id => pipeline_id)
 
       config_parts.each do |config_part|
-        logger.debug("Config string", :reader => config_part.reader, :source_id => config_part.source_id)
-        logger.debug("\n\n#{config_part.config_string}")
+        logger.debug("Config string", :protocol => config_part.protocol, :id => config_part.id)
+        logger.debug("\n\n#{config_part.text}")
       end
       logger.debug("Merged config")
       logger.debug("\n\n#{config_string}")
diff --git a/logstash-core/lib/logstash/config/source/local.rb b/logstash-core/lib/logstash/config/source/local.rb
index 34ffcc26a41..01ced14a891 100644
--- a/logstash-core/lib/logstash/config/source/local.rb
+++ b/logstash-core/lib/logstash/config/source/local.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/config/source/base"
-require "logstash/config/config_part"
 require "logstash/config/pipeline_config"
 require "logstash/util/loggable"
 require "logstash/errors"
@@ -20,7 +19,7 @@ module LogStash module Config module Source
   class Local < Base
     class ConfigStringLoader
       def self.read(config_string)
-        [ConfigPart.new(self.name, "config_string", config_string)]
+        [org.logstash.common.SourceWithMetadata.new("string", "config_string", config_string)]
       end
     end
 
@@ -51,7 +50,8 @@ def read
           config_string = ::File.read(file)
 
           if valid_encoding?(config_string)
-            config_parts << ConfigPart.new(self.class.name, file, config_string)
+            part = org.logstash.common.SourceWithMetadata.new("file", file, config_string)
+            config_parts << part
           else
             encoding_issue_files << file
           end
@@ -110,7 +110,7 @@ def self.read(uri)
           # since we have fetching config we wont follow any redirection.
           case response.code.to_i
           when 200
-            [ConfigPart.new(self.name, uri.to_s, response.body)]
+            [org.logstash.common.SourceWithMetadata.new(uri.scheme, uri.to_s, response.body)]
           when 302
             raise LogStash::ConfigLoadingError, I18n.t("logstash.runner.configuration.fetch-failed", :path => uri.to_s, :message => "We don't follow redirection for remote configuration")
           when 404
@@ -149,7 +149,7 @@ def pipeline_configs
 
       add_missing_default_inputs_or_outputs(config_parts)
 
-      PipelineConfig.new(self.class, PIPELINE_ID, config_parts, @settings)
+      [PipelineConfig.new(self.class, PIPELINE_ID, config_parts, @settings)]
     end
 
     def match?
@@ -161,13 +161,13 @@ def match?
     # if its not the case we will add stdin and stdout
     # this is for backward compatibility reason
     def add_missing_default_inputs_or_outputs(config_parts)
-      if !config_parts.any? { |part| INPUT_BLOCK_RE.match(part.config_string) }
-        config_parts << LogStash::Config::ConfigPart.new(self.class.name, "default input", LogStash::Config::Defaults.input)
+      if !config_parts.any? { |part| INPUT_BLOCK_RE.match(part.text) }
+        config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default input", LogStash::Config::Defaults.input)
       end
 
       # include a default stdout output if no outputs given
-      if !config_parts.any? { |part| OUTPUT_BLOCK_RE.match(part.config_string) }
-        config_parts << LogStash::Config::ConfigPart.new(self.class.name, "default output", LogStash::Config::Defaults.output)
+      if !config_parts.any? { |part| OUTPUT_BLOCK_RE.match(part.text) }
+        config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default output", LogStash::Config::Defaults.output)
       end
     end
 
diff --git a/logstash-core/lib/logstash/config/source_loader.rb b/logstash-core/lib/logstash/config/source_loader.rb
index 06310f55d32..c347360bb56 100644
--- a/logstash-core/lib/logstash/config/source_loader.rb
+++ b/logstash-core/lib/logstash/config/source_loader.rb
@@ -54,7 +54,7 @@ def fetch
       else
         begin
           pipeline_configs = sources_loaders
-            .collect { |source| Array(source.pipeline_configs) }
+            .collect { |source| source.pipeline_configs }
             .compact
             .flatten
 
@@ -68,7 +68,7 @@ def fetch
 
           SuccessfulFetch.new(pipeline_configs)
         rescue => e
-          logger.error("Could not fetch all the sources", :exception => e.class, :message => e.message)
+          logger.error("Could not fetch all the sources", :exception => e.class, :message => e.message, :backtrace => e.backtrace)
           FailedFetch.new(e.message)
         end
       end
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index aabc2090421..819620be3a0 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -3,7 +3,6 @@
 require "stud/temporary"
 require "logstash/inputs/generator"
 require "logstash/config/pipeline_config"
-require "logstash/config/config_part"
 require "logstash/config/source/local"
 require_relative "../support/mocks_classes"
 require "fileutils"
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index df7b749acda..0f807c8af12 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -1,5 +1,6 @@
 require "spec_helper"
 require "logstash/compiler"
+require "support/helpers"
 java_import Java::OrgLogstashConfigIr::DSL
 
 describe LogStash::Compiler do
@@ -62,7 +63,7 @@ def j
       let(:source) { "input { generator {} } output { }" }
 
       it "should attach correct source text for components" do
-        expect(compiled[:input].get_meta.getSourceText).to eql("generator {}")
+        expect(compiled[:input].get_meta.getText).to eql("generator {}")
       end
     end
 
@@ -188,12 +189,12 @@ def compose(*statements)
                                       ))
         end
 
-        it "should attach source_metadata with correct info to the statements" do
+        it "should attach source_with_metadata with correct info to the statements" do
           meta = compiled_section.statements.first.meta
-          expect(meta.getSourceText).to eql("aplugin { count => 1 }")
-          expect(meta.getSourceLine).to eql(2)
-          expect(meta.getSourceColumn).to eql(13)
-          expect(meta.getSourceFile).to eql(source_file)
+          expect(meta.text).to eql("aplugin { count => 1 }")
+          expect(meta.line).to eql(2)
+          expect(meta.column).to eql(13)
+          expect(meta.id).to eql(source_file)
           expect(compiled_section.statements.first.meta)
           expect(compiled_section)
         end
diff --git a/logstash-core/spec/logstash/config/config_part_spec.rb b/logstash-core/spec/logstash/config/config_part_spec.rb
deleted file mode 100644
index 265f44a27d2..00000000000
--- a/logstash-core/spec/logstash/config/config_part_spec.rb
+++ /dev/null
@@ -1,17 +0,0 @@
-# encoding: utf-8
-require "logstash/config/config_part"
-require "logstash/config/source/local"
-
-describe LogStash::Config::ConfigPart do
-  let(:reader) { LogStash::Config::Source::Local::ConfigStringLoader.to_s }
-  let(:source_id) { "config_string" }
-  let(:config_string) { "input { generator {}}  output { stdout {} }"}
-
-  subject { described_class.new(reader, source_id, config_string) }
-
-  it "expose reader, source_id, source as instance methods" do
-    expect(subject.reader).to eq(reader)
-    expect(subject.source_id).to eq(source_id)
-    expect(subject.config_string).to eq(config_string)
-  end
-end
diff --git a/logstash-core/spec/logstash/config/pipeline_config_spec.rb b/logstash-core/spec/logstash/config/pipeline_config_spec.rb
index 7e4bb78f946..bcb34191ac1 100644
--- a/logstash-core/spec/logstash/config/pipeline_config_spec.rb
+++ b/logstash-core/spec/logstash/config/pipeline_config_spec.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/config/pipeline_config"
-require "logstash/config/config_part"
 require "logstash/config/source/local"
 
 describe LogStash::Config::PipelineConfig do
@@ -8,13 +7,13 @@
   let(:pipeline_id) { :main }
   let(:ordered_config_parts) do
     [
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/1", "input { generator1 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/2", "input { generator2 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/3", "input { generator3 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/4", "input { generator4 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/5", "input { generator5 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigPathLoader, "/tmp/6", "input { generator6 }"),
-      LogStash::Config::ConfigPart.new(LogStash::Config::Source::Local::ConfigStringLoader, "config_string", "input { generator1 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/1", "input { generator1 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/2", "input { generator2 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/3", "input { generator3 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/4", "input { generator4 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/5", "input { generator5 }"),
+      org.logstash.common.SourceWithMetadata.new("file", "/tmp/6", "input { generator6 }"),
+      org.logstash.common.SourceWithMetadata.new("string", "config_string", "input { generator1 }"),
     ]
   end
 
@@ -40,7 +39,7 @@
   end
 
   it "returns the merged `ConfigPart#config_string`" do
-    expect(subject.config_string).to eq(ordered_config_parts.collect(&:config_string).join("\n"))
+    expect(subject.config_string).to eq(ordered_config_parts.collect(&:text).join("\n"))
   end
 
   it "records when the config was read" do
diff --git a/logstash-core/spec/logstash/config/source/local_spec.rb b/logstash-core/spec/logstash/config/source/local_spec.rb
index b9e5dde1935..8b750276fb8 100644
--- a/logstash-core/spec/logstash/config/source/local_spec.rb
+++ b/logstash-core/spec/logstash/config/source/local_spec.rb
@@ -19,7 +19,7 @@
 
   it "returns a valid config part" do
     config_part = subject.read(config_string).first
-    expect(config_part).to be_a_config_part(described_class.to_s, "config_string", config_string)
+    expect(config_part).to be_a_source_with_metadata("string", "config_string", config_string)
   end
 end
 
@@ -71,17 +71,17 @@
 
       it "returns alphabetically sorted parts" do
         parts = subject.read(reader_config)
-        expect(parts.collect { |part| ::File.basename(part.source_id) }).to eq(files.keys.sort)
+        expect(parts.collect { |part| ::File.basename(part.id) }).to eq(files.keys.sort)
       end
 
       it "returns valid `config_parts`" do
         parts = subject.read(reader_config)
 
         parts.each do |part|
-          basename = ::File.basename(part.source_id)
+          basename = ::File.basename(part.id)
           file_path = ::File.join(directory, basename)
           content = files[basename]
-          expect(part).to be_a_config_part(described_class.to_s, file_path, content)
+          expect(part).to be_a_source_with_metadata("file", file_path, content)
         end
       end
     end
@@ -256,7 +256,7 @@
 
     it "returns a valid config part" do
       config_part = subject.read(remote_url).first
-      expect(config_part).to be_a_config_part(described_class.to_s, remote_url, config_string)
+      expect(config_part).to be_a_source_with_metadata("http", remote_url, config_string)
     end
   end
 
@@ -293,7 +293,7 @@
     end
 
     it "returns a merged config" do
-      expect(subject.pipeline_configs.config_string).to include(input_block, output_block, filter_block)
+      expect(subject.pipeline_configs.first.config_string).to include(input_block, output_block, filter_block)
     end
   end
 
@@ -303,7 +303,7 @@
     end
 
     it "returns a config" do
-      expect(subject.pipeline_configs.config_string).to include(filter_block)
+      expect(subject.pipeline_configs.first.config_string).to include(filter_block)
     end
   end
 
@@ -314,7 +314,7 @@
     end
 
     it "returns a config" do
-      expect(subject.pipeline_configs.config_string).to include(input_block)
+      expect(subject.pipeline_configs.first.config_string).to include(input_block)
     end
   end
 
@@ -342,7 +342,7 @@
     end
 
     it "returns a config" do
-      expect(subject.pipeline_configs.config_string).to include(input_block)
+      expect(subject.pipeline_configs.first.config_string).to include(input_block)
     end
 
     context "when `config.string` is set" do
@@ -354,7 +354,7 @@
       end
 
       it "returns a merged config" do
-        expect(subject.pipeline_configs.config_string).to include(input_block, filter_block)
+        expect(subject.pipeline_configs.first.config_string).to include(input_block, filter_block)
       end
     end
   end
@@ -364,7 +364,7 @@
       let(:settings) { mock_settings( "config.string" => "#{filter_block} #{output_block}") }
 
       it "add stdin input" do
-        expect(subject.pipeline_configs.config_string).to include(LogStash::Config::Defaults.input)
+        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.input)
       end
     end
 
@@ -372,7 +372,7 @@
       let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block}") }
 
       it "add stdout output" do
-        expect(subject.pipeline_configs.config_string).to include(LogStash::Config::Defaults.output)
+        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output)
       end
     end
 
@@ -380,7 +380,7 @@
       let(:settings) { mock_settings( "config.string" => "#{filter_block}") }
 
       it "add stdin and output" do
-        expect(subject.pipeline_configs.config_string).to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
       end
     end
 
@@ -388,7 +388,7 @@
       let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block} #{output_block}") }
 
       it "doesn't add anything" do
-        expect(subject.pipeline_configs.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        expect(subject.pipeline_configs.first.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
       end
     end
   end
diff --git a/logstash-core/spec/logstash/state_resolver_spec.rb b/logstash-core/spec/logstash/state_resolver_spec.rb
index 392d1c13b34..37196f4d56e 100644
--- a/logstash-core/spec/logstash/state_resolver_spec.rb
+++ b/logstash-core/spec/logstash/state_resolver_spec.rb
@@ -3,7 +3,6 @@
 require_relative "../support/helpers"
 require_relative "../support/matchers"
 require "logstash/state_resolver"
-require "logstash/config/config_part"
 require "logstash/config/pipeline_config"
 require "logstash/instrument/null_metric"
 require "logstash/pipeline"
diff --git a/logstash-core/spec/support/helpers.rb b/logstash-core/spec/support/helpers.rb
index 6a9a78ec5c6..4426b97256a 100644
--- a/logstash-core/spec/support/helpers.rb
+++ b/logstash-core/spec/support/helpers.rb
@@ -50,7 +50,7 @@ def mock_pipeline_config(pipeline_id, config_string = nil, settings = {})
     settings = mock_settings(settings)
   end
 
-  config_part = LogStash::Config::ConfigPart.new(:config_string, "config_string", config_string)
+  config_part = org.logstash.common.SourceWithMetadata.new("config_string", "config_string", config_string)
 
   LogStash::Config::PipelineConfig.new(LogStash::Config::Source::Local, pipeline_id, config_part, settings)
 end
diff --git a/logstash-core/spec/support/matchers.rb b/logstash-core/spec/support/matchers.rb
index 88f3833dee2..bb9689eef01 100644
--- a/logstash-core/spec/support/matchers.rb
+++ b/logstash-core/spec/support/matchers.rb
@@ -124,10 +124,10 @@ def all_instance_methods_implemented?
   end
 end
 
-RSpec::Matchers.define :be_a_config_part do |reader, source_id, config_string = nil|
+RSpec::Matchers.define :be_a_source_with_metadata do |protocol, id, text = nil|
   match do |actual|
-   expect(actual.reader).to eq(reader)
-   expect(actual.source_id).to eq(source_id)
-   expect(actual.config_string).to match(config_string) unless config_string.nil?
+   expect(actual.protocol).to eq(protocol)
+   expect(actual.id).to eq(id)
+   expect(actual.text).to match(text) unless text.nil?
   end
 end
diff --git a/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java b/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java
new file mode 100644
index 00000000000..adea906bd86
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java
@@ -0,0 +1,66 @@
+package org.logstash.common;
+
+import java.util.Objects;
+
+/**
+ * Created by andrewvc on 9/6/16.
+ */
+public class SourceWithMetadata {
+    // Either 'file' or something else
+    private final String protocol;
+    // A Unique identifier for the source within the given protocol
+    // For a file, this is its path
+    private final String id;
+    private final Integer line;
+    private final Integer column;
+    private final String text;
+
+    public String getProtocol() {
+        return this.protocol;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public Integer getLine() {
+        return line;
+    }
+
+    public Integer getColumn() {
+        return column;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public SourceWithMetadata(String protocol, String id, Integer line, Integer column, String text) {
+        this.protocol = protocol;
+        this.id = id;
+        this.line = line;
+        this.column = column;
+        this.text = text;
+    }
+
+    // Convenience method for dealing with files
+    public SourceWithMetadata(String path, Integer line, Integer column, String text) {
+        this("file", path, line, column, text);
+    }
+
+    public SourceWithMetadata(String protocol, String id, String text) {
+        this(protocol, id, 1, 1, text);
+    }
+
+    public SourceWithMetadata() {
+        this(null, null, null, null, null);
+    }
+
+    public int hashCode() {
+        return Objects.hash(this.id, this.line, this.column, this.text);
+    }
+
+    public String toString() {
+        return "[protocol]" + id + ":" + line + ":" + column + ":```\n" + text + "\n```";
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/BaseSourceComponent.java b/logstash-core/src/main/java/org/logstash/config/ir/BaseSourceComponent.java
index f686a0e48af..ea61a6d0797 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/BaseSourceComponent.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/BaseSourceComponent.java
@@ -1,5 +1,7 @@
 package org.logstash.config.ir;
 
+import org.logstash.common.SourceWithMetadata;
+
 /**
  * Created by andrewvc on 9/6/16.
  *
@@ -8,13 +10,13 @@
  *
  */
 public abstract class BaseSourceComponent implements SourceComponent {
-    private final SourceMetadata meta;
+    private final SourceWithMetadata meta;
 
-    public BaseSourceComponent(SourceMetadata meta) {
+    public BaseSourceComponent(SourceWithMetadata meta) {
         this.meta = meta;
     }
 
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return meta;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
index b6170e74ee9..13770fd6872 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
@@ -1,5 +1,6 @@
 package org.logstash.config.ir;
 
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.*;
 import org.logstash.config.ir.expression.binary.*;
 import org.logstash.config.ir.expression.unary.Not;
@@ -17,33 +18,33 @@
  * Created by andrewvc on 9/15/16.
  */
 public class DSL {
-    public static EventValueExpression eEventValue(SourceMetadata meta, String fieldName) {
+    public static EventValueExpression eEventValue(SourceWithMetadata meta, String fieldName) {
         return new EventValueExpression(meta, fieldName);
     }
 
     public static EventValueExpression eEventValue(String fieldName) {
-        return eEventValue(new SourceMetadata(), fieldName);
+        return eEventValue(new SourceWithMetadata(), fieldName);
     }
 
-    public static ValueExpression eValue(SourceMetadata meta, Object value) throws InvalidIRException {
+    public static ValueExpression eValue(SourceWithMetadata meta, Object value) throws InvalidIRException {
         return new ValueExpression(meta, value);
     }
 
     public static ValueExpression eValue(Object value) throws InvalidIRException {
-        return eValue(new SourceMetadata(), value);
+        return eValue(new SourceWithMetadata(), value);
     }
 
-    public static ValueExpression eRegex(SourceMetadata meta, String pattern) throws InvalidIRException {
+    public static ValueExpression eRegex(SourceWithMetadata meta, String pattern) throws InvalidIRException {
        return new RegexValueExpression(meta, pattern);
     }
 
     public static ValueExpression eRegex(String pattern) throws InvalidIRException {
-        return eRegex(new SourceMetadata(), pattern);
+        return eRegex(new SourceWithMetadata(), pattern);
     }
 
     public static ValueExpression eValue(long value) {
         try {
-            return eValue(new SourceMetadata(), value);
+            return eValue(new SourceWithMetadata(), value);
         } catch (InvalidIRException e) {
             e.printStackTrace(); // Can't happen with an int
             return null;
@@ -52,14 +53,14 @@ public static ValueExpression eValue(long value) {
 
     public static ValueExpression eValue(double value) {
         try {
-            return eValue(new SourceMetadata(), value);
+            return eValue(new SourceWithMetadata(), value);
         } catch (InvalidIRException e) {
             e.printStackTrace(); // Can't happen with an int
             return null;
         }
     }
 
-    public static Gt eGt(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Gt eGt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Gt(meta, left, right);
     }
 
@@ -67,7 +68,7 @@ public static Gt eGt(Expression left, Expression right) throws InvalidIRExceptio
         return new Gt(null, left, right);
     }
 
-    public static Gte eGte(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Gte eGte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Gte(meta, left, right);
     }
 
@@ -75,7 +76,7 @@ public static Gte eGte(Expression left, Expression right) throws InvalidIRExcept
         return new Gte(null, left, right);
     }
 
-    public static Lt eLt(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Lt eLt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Lt(meta, left, right);
     }
 
@@ -83,14 +84,14 @@ public static Lt eLt(Expression left, Expression right) throws InvalidIRExceptio
         return new Lt(null, left, right);
     }
 
-    public static Lte eLte(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Lte eLte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Lte(meta, left, right);
     }
     public static Lte eLte(Expression left, Expression right) throws InvalidIRException {
         return new Lte(null, left, right);
     }
 
-    public static Eq eEq(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Eq eEq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Eq(meta, left, right);
     }
 
@@ -98,7 +99,7 @@ public static Eq eEq(Expression left, Expression right) throws InvalidIRExceptio
         return new Eq(null, left, right);
     }
 
-    public static And eAnd(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static And eAnd(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new And(meta, left, right);
     }
 
@@ -106,7 +107,7 @@ public static And eAnd(Expression left, Expression right) throws InvalidIRExcept
         return new And(null, left, right);
     }
 
-    public static Or eOr(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Or eOr(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Or(meta, left, right);
     }
 
@@ -114,7 +115,7 @@ public static Or eOr(Expression left, Expression right) throws InvalidIRExceptio
         return new Or(null, left, right);
     }
 
-    public static RegexEq eRegexEq(SourceMetadata meta, Expression left, ValueExpression right) throws InvalidIRException {
+    public static RegexEq eRegexEq(SourceWithMetadata meta, Expression left, ValueExpression right) throws InvalidIRException {
         return new RegexEq(meta, left, right);
     }
 
@@ -122,7 +123,7 @@ public static RegexEq eRegexEq(Expression left, ValueExpression right) throws In
         return new RegexEq(null, left, right);
     }
 
-    public static Expression eRegexNeq(SourceMetadata meta, Expression left, ValueExpression right) throws InvalidIRException {
+    public static Expression eRegexNeq(SourceWithMetadata meta, Expression left, ValueExpression right) throws InvalidIRException {
         return eNot(eRegexEq(meta, left, right));
     }
 
@@ -130,14 +131,14 @@ public static Expression eRegexNeq(Expression left, ValueExpression right) throw
         return eNot(eRegexEq(left, right));
     }
 
-    public static Neq eNeq(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Neq eNeq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new Neq(meta, left, right);
     }
     public static Neq eNeq(Expression left, Expression right) throws InvalidIRException {
         return new Neq(null, left, right);
     }
 
-    public static In eIn(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static In eIn(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         return new In(meta, left, right);
     }
 
@@ -145,7 +146,7 @@ public static In eIn(Expression left, Expression right) throws InvalidIRExceptio
         return new In(null, left, right);
     }
 
-    public static Not eNot(SourceMetadata meta, Expression expr) throws InvalidIRException {
+    public static Not eNot(SourceWithMetadata meta, Expression expr) throws InvalidIRException {
         return new Not(meta, expr);
     }
 
@@ -153,7 +154,7 @@ public static Not eNot(Expression expr) throws InvalidIRException {
         return new Not(null, expr);
     }
 
-    public static BooleanExpression eTruthy(SourceMetadata meta, Expression expr) throws InvalidIRException {
+    public static BooleanExpression eTruthy(SourceWithMetadata meta, Expression expr) throws InvalidIRException {
         if (expr instanceof BooleanExpression) {
             return (BooleanExpression) expr;
         }
@@ -163,7 +164,7 @@ public static BooleanExpression eTruthy(Expression expr) throws InvalidIRExcepti
         return eTruthy(null, expr);
     }
 
-    public static Statement iCompose(ComposedStatement.IFactory factory, SourceMetadata meta, Statement... statements) throws InvalidIRException {
+    public static Statement iCompose(ComposedStatement.IFactory factory, SourceWithMetadata meta, Statement... statements) throws InvalidIRException {
         if (statements.length == 0 ) {
             return new NoopStatement(meta);
         } else if (statements.length == 1 ) {
@@ -173,7 +174,7 @@ public static Statement iCompose(ComposedStatement.IFactory factory, SourceMetad
         }
     }
 
-    public static Statement iComposeSequence(SourceMetadata meta, Statement... statements) throws InvalidIRException {
+    public static Statement iComposeSequence(SourceWithMetadata meta, Statement... statements) throws InvalidIRException {
         return iCompose(ComposedSequenceStatement::new, meta, statements);
     }
 
@@ -181,7 +182,7 @@ public static Statement iComposeSequence(Statement... statements) throws Invalid
         return iComposeSequence(null, statements);
     }
 
-    public static Statement iComposeParallel(SourceMetadata meta, Statement... statements) throws InvalidIRException {
+    public static Statement iComposeParallel(SourceWithMetadata meta, Statement... statements) throws InvalidIRException {
         return iCompose(ComposedParallelStatement::new, meta, statements);
     }
 
@@ -189,20 +190,20 @@ public static Statement iComposeParallel(Statement... statements) throws Invalid
         return iComposeParallel(null, statements);
     }
 
-    public static NoopStatement noop(SourceMetadata meta) {
+    public static NoopStatement noop(SourceWithMetadata meta) {
         return new NoopStatement(meta);
     }
 
     public static NoopStatement noop() {
-        return new NoopStatement(new SourceMetadata());
+        return new NoopStatement(new SourceWithMetadata());
     }
 
-    public static PluginStatement iPlugin(SourceMetadata meta, PluginDefinition.Type pluginType,  String pluginName, Map<String, Object> pluginArguments) {
+    public static PluginStatement iPlugin(SourceWithMetadata meta, PluginDefinition.Type pluginType, String pluginName, Map<String, Object> pluginArguments) {
         return new PluginStatement(meta, new PluginDefinition(pluginType, pluginName, pluginArguments));
     }
 
     public static PluginStatement iPlugin(PluginDefinition.Type type, String pluginName, Map<String, Object> pluginArguments) {
-        return iPlugin(new SourceMetadata(), type, pluginName, pluginArguments);
+        return iPlugin(new SourceWithMetadata(), type, pluginName, pluginArguments);
     }
 
     public static PluginStatement iPlugin(PluginDefinition.Type type, String pluginName, MapBuilder<String, Object> argBuilder) {
@@ -217,7 +218,7 @@ public static PluginStatement iPlugin(PluginDefinition.Type type, String pluginN
         return iPlugin(type, pluginName, pargs());
     }
 
-    public static IfStatement iIf(SourceMetadata meta,
+    public static IfStatement iIf(SourceWithMetadata meta,
                                   Expression condition,
                                   Statement ifTrue,
                                   Statement ifFalse) throws InvalidIRException {
@@ -228,12 +229,12 @@ public static IfStatement iIf(SourceMetadata meta,
     public static IfStatement iIf(Expression condition,
                                   Statement ifTrue,
                                   Statement ifFalse) throws InvalidIRException {
-        return iIf(new SourceMetadata(), condition, ifTrue, ifFalse);
+        return iIf(new SourceWithMetadata(), condition, ifTrue, ifFalse);
     }
 
     public static IfStatement iIf(Expression condition,
                                   Statement ifTrue) throws InvalidIRException {
-        return iIf(new SourceMetadata(), condition, ifTrue, noop());
+        return iIf(new SourceWithMetadata(), condition, ifTrue, noop());
     }
 
     public static class MapBuilder<K,V> {
@@ -269,12 +270,12 @@ public static Graph graph() {
         return new Graph();
     }
 
-    public static PluginVertex gPlugin(SourceMetadata sourceMetadata, PluginDefinition.Type pluginType, String pluginName, Map<String, Object> pluginArgs) {
-       return new PluginVertex(sourceMetadata, new PluginDefinition(pluginType, pluginName, pluginArgs));
+    public static PluginVertex gPlugin(SourceWithMetadata sourceWithMetadata, PluginDefinition.Type pluginType, String pluginName, Map<String, Object> pluginArgs) {
+       return new PluginVertex(sourceWithMetadata, new PluginDefinition(pluginType, pluginName, pluginArgs));
     }
 
     public static PluginVertex gPlugin(PluginDefinition.Type type, String pluginName, Map<String, Object> pluginArgs) {
-        return gPlugin(new SourceMetadata(), type, pluginName, pluginArgs);
+        return gPlugin(new SourceWithMetadata(), type, pluginName, pluginArgs);
     }
 
     public static PluginVertex gPlugin(PluginDefinition.Type type, String pluginName, String id) {
@@ -282,15 +283,15 @@ public static PluginVertex gPlugin(PluginDefinition.Type type, String pluginName
     }
 
     public static PluginVertex gPlugin(PluginDefinition.Type type, String pluginName) {
-        return gPlugin(new SourceMetadata(), type, pluginName, new HashMap<>());
+        return gPlugin(new SourceWithMetadata(), type, pluginName, new HashMap<>());
     }
 
 
-    public static IfVertex gIf(SourceMetadata meta, BooleanExpression expression) {
+    public static IfVertex gIf(SourceWithMetadata meta, BooleanExpression expression) {
        return new IfVertex(meta, expression);
     }
 
     public static IfVertex gIf(BooleanExpression expression) {
-       return new IfVertex(new SourceMetadata(), expression);
+       return new IfVertex(new SourceWithMetadata(), expression);
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/PluginDefinition.java b/logstash-core/src/main/java/org/logstash/config/ir/PluginDefinition.java
index e78ebc4777e..51a29fd4147 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/PluginDefinition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/PluginDefinition.java
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.logstash.common.SourceWithMetadata;
 
 import java.util.HashSet;
 import java.util.Map;
@@ -96,7 +97,7 @@ public boolean sourceComponentEquals(SourceComponent o) {
     }
 
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return null;
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/SourceComponent.java b/logstash-core/src/main/java/org/logstash/config/ir/SourceComponent.java
index f68afc06076..026c3527f24 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/SourceComponent.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/SourceComponent.java
@@ -1,9 +1,11 @@
 package org.logstash.config.ir;
 
+import org.logstash.common.SourceWithMetadata;
+
 /**
  * Created by andrewvc on 9/16/16.
  */
 public interface SourceComponent {
     boolean sourceComponentEquals(SourceComponent sourceComponent);
-    SourceMetadata getMeta();
+    SourceWithMetadata getMeta();
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/SourceMetadata.java b/logstash-core/src/main/java/org/logstash/config/ir/SourceMetadata.java
deleted file mode 100644
index 8a9a3205ac8..00000000000
--- a/logstash-core/src/main/java/org/logstash/config/ir/SourceMetadata.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.logstash.config.ir;
-
-import java.util.Objects;
-
-/**
- * Created by andrewvc on 9/6/16.
- */
-public class SourceMetadata {
-    private final String sourceFile;
-
-    public String getSourceFile() {
-        return sourceFile;
-    }
-
-    public Integer getSourceLine() {
-        return sourceLine;
-    }
-
-    public Integer getSourceColumn() {
-        return sourceColumn;
-    }
-
-    public String getSourceText() {
-        return sourceText;
-    }
-
-    private final Integer sourceLine;
-    private final Integer sourceColumn;
-    private final String sourceText;
-
-    public SourceMetadata(String sourceFile, Integer sourceLine, Integer sourceChar, String sourceText) {
-        this.sourceFile = sourceFile;
-        this.sourceLine = sourceLine;
-        this.sourceColumn = sourceChar;
-        this.sourceText = sourceText;
-    }
-
-    public SourceMetadata() {
-        this.sourceFile = null;
-        this.sourceLine = null;
-        this.sourceColumn = null;
-        this.sourceText = null;
-    }
-
-    public int hashCode() {
-        return Objects.hash(this.sourceFile, this.sourceLine, this.sourceColumn, this.sourceText);
-    }
-
-    public String toString() {
-        return sourceFile + ":" + sourceLine + ":" + sourceColumn + ":```\n" + sourceText + "\n```";
-    }
-}
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
index 8c99275b2ba..e788c30e8ca 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/6/16.
@@ -31,7 +31,7 @@ public Expression getLeft() {
         return left;
     }
 
-    public BinaryBooleanExpression(SourceMetadata meta,
+    public BinaryBooleanExpression(SourceWithMetadata meta,
                                    Expression left,
                                    Expression right) throws InvalidIRException {
         super(meta);
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/BooleanExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/BooleanExpression.java
index 066f175b998..aaaa4e6f4f4 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/BooleanExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/BooleanExpression.java
@@ -1,12 +1,12 @@
 package org.logstash.config.ir.expression;
 
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/14/16.
  */
 public abstract class BooleanExpression extends Expression {
-    public BooleanExpression(SourceMetadata meta) {
+    public BooleanExpression(SourceWithMetadata meta) {
         super(meta);
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/EventValueExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/EventValueExpression.java
index e49a2b84818..c9dd5cdb9d8 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/EventValueExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/EventValueExpression.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression;
 
 import org.logstash.config.ir.SourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/13/16.
@@ -9,7 +9,7 @@
 public class EventValueExpression extends Expression {
     private final String fieldName;
 
-    public EventValueExpression(SourceMetadata meta, String fieldName) {
+    public EventValueExpression(SourceWithMetadata meta, String fieldName) {
         super(meta);
         this.fieldName = fieldName;
     }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/Expression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/Expression.java
index de51ffacb60..9e21882d127 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/Expression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/Expression.java
@@ -5,7 +5,7 @@
 import org.jruby.embed.ScriptingContainer;
 import org.logstash.config.ir.Hashable;
 import org.logstash.config.ir.BaseSourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /*
  * [foo] == "foostr" eAnd [bar] > 10
@@ -18,7 +18,7 @@
 public abstract class Expression extends BaseSourceComponent implements Hashable {
     private ScriptingContainer container;
 
-    public Expression(SourceMetadata meta) {
+    public Expression(SourceWithMetadata meta) {
         super(meta);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/RegexValueExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/RegexValueExpression.java
index cd917a74623..ce77404f554 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/RegexValueExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/RegexValueExpression.java
@@ -4,9 +4,8 @@
 import org.joni.Regex;
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
-import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
 /**
@@ -15,7 +14,7 @@
 public class RegexValueExpression extends ValueExpression {
     private final Regex regex;
 
-    public RegexValueExpression(SourceMetadata meta, Object value) throws InvalidIRException {
+    public RegexValueExpression(SourceWithMetadata meta, Object value) throws InvalidIRException {
         super(meta, value);
 
         if (!(value instanceof String)) {
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/UnaryBooleanExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/UnaryBooleanExpression.java
index 51e175caa98..6481dc65385 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/UnaryBooleanExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/UnaryBooleanExpression.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/13/16.
@@ -13,7 +13,7 @@ public Expression getExpression() {
         return expression;
     }
 
-    public UnaryBooleanExpression(SourceMetadata meta,
+    public UnaryBooleanExpression(SourceWithMetadata meta,
                                    Expression expression) throws InvalidIRException {
         super(meta);
         if (expression == null) throw new InvalidIRException("Unary expressions cannot operate on null!");
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
index e03ea73a45f..ce8cff1e500 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 import java.math.BigDecimal;
 import java.util.List;
@@ -13,7 +13,7 @@
 public class ValueExpression extends Expression {
     protected final Object value;
 
-    public ValueExpression(SourceMetadata meta, Object value) throws InvalidIRException {
+    public ValueExpression(SourceWithMetadata meta, Object value) throws InvalidIRException {
         super(meta);
 
         if (!(value == null ||
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
index 434cea5c159..c9866037d87 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class And extends BinaryBooleanExpression {
-    public And(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public And(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
index b2772a18da1..a94f72187da 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Eq extends BinaryBooleanExpression {
-    public Eq(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Eq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
index e611a771790..2ff3222484c 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Gt extends BinaryBooleanExpression {
-    public Gt(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Gt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
index 3e9840c6eef..855a2280c88 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Gte extends BinaryBooleanExpression {
-    public Gte(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Gte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
index 0a4302c4608..93bee6a44c2 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class In extends BinaryBooleanExpression {
-    public In(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public In(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
index ea453b9a433..4f4892c469a 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Lt extends BinaryBooleanExpression {
-    public Lt(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Lt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
index 0a165023ddc..4fe77cd4238 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Lte extends BinaryBooleanExpression {
-    public Lte(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Lte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
index 5358a123948..9ff2ee64cf4 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Neq extends BinaryBooleanExpression {
-    public Neq(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Neq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
index 290200e2bc2..f5292ab6b22 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 
@@ -9,7 +9,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Or extends BinaryBooleanExpression {
-    public Or(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Or(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/RegexEq.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/RegexEq.java
index 44ec686d1ea..3ddf123d508 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/RegexEq.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/RegexEq.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.expression.binary;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
 import org.logstash.config.ir.expression.RegexValueExpression;
@@ -10,7 +10,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class RegexEq extends BinaryBooleanExpression {
-    public RegexEq(SourceMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public RegexEq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
         super(meta, left, right);
 
         if (!(right instanceof RegexValueExpression)) {
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Not.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Not.java
index 3e3d7fc7079..d1c8f0471b5 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Not.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Not.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.Expression;
 import org.logstash.config.ir.expression.UnaryBooleanExpression;
 
@@ -10,7 +10,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Not extends UnaryBooleanExpression {
-    public Not(SourceMetadata meta, Expression expression) throws InvalidIRException {
+    public Not(SourceWithMetadata meta, Expression expression) throws InvalidIRException {
         super(meta, expression);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Truthy.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Truthy.java
index a8138b0e066..c5a0898a518 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Truthy.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/unary/Truthy.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.Expression;
 import org.logstash.config.ir.expression.UnaryBooleanExpression;
 
@@ -10,7 +10,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Truthy extends UnaryBooleanExpression {
-    public Truthy(SourceMetadata meta, Expression expression) throws InvalidIRException {
+    public Truthy(SourceWithMetadata meta, Expression expression) throws InvalidIRException {
         super(meta, expression);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/Edge.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/Edge.java
index b9a3d8dab11..826dc1d4aa0 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/Edge.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/Edge.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 import java.util.stream.Stream;
 
@@ -93,7 +93,7 @@ public boolean sourceComponentEquals(SourceComponent sourceComponent) {
     public abstract String getId();
 
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return null;
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
index da6c6469038..ca574fbbbb8 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/Graph.java
@@ -4,7 +4,7 @@
 import org.logstash.config.ir.Hashable;
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.algorithms.BreadthFirst;
 import org.logstash.config.ir.graph.algorithms.GraphDiff;
 import org.logstash.config.ir.graph.algorithms.TopologicalSort;
@@ -403,7 +403,7 @@ public boolean hasEquivalentVertex(Vertex otherV) {
     }
 
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return null;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/IfVertex.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/IfVertex.java
index 6df0b993f8c..83e73e220e7 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/IfVertex.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/IfVertex.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.graph;
 
 import org.logstash.config.ir.SourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BooleanExpression;
 
 import java.util.Collection;
@@ -19,7 +19,7 @@ public BooleanExpression getBooleanExpression() {
 
     private final BooleanExpression booleanExpression;
 
-    public IfVertex(SourceMetadata meta, BooleanExpression booleanExpression) {
+    public IfVertex(SourceWithMetadata meta, BooleanExpression booleanExpression) {
         super(meta);
         this.booleanExpression = booleanExpression;
     }
@@ -43,7 +43,7 @@ public boolean sourceComponentEquals(SourceComponent other) {
 
     // An IfVertex has no real metadata in and of itself, but its expression does!
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return null;
     }
 
@@ -83,7 +83,7 @@ public Collection<BooleanEdge> getOutgoingBooleanEdgesByType(Boolean edgeType) {
     // The easiest readable version of this for a human.
     // If the original source is available we use that, otherwise we serialize the expression
     public String humanReadableExpression() {
-        String sourceText = this.booleanExpression.getMeta() != null ? this.booleanExpression.getMeta().getSourceText() : null;
+        String sourceText = this.booleanExpression.getMeta() != null ? this.booleanExpression.getMeta().getText() : null;
         if (sourceText != null) {
             return sourceText;
         } else {
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/PluginVertex.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/PluginVertex.java
index 93a7b4b1571..3e3bc967037 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/PluginVertex.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/PluginVertex.java
@@ -5,13 +5,13 @@
 import org.logstash.common.Util;
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.PluginDefinition;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/15/16.
  */
 public class PluginVertex extends Vertex {
-    private final SourceMetadata meta;
+    private final SourceWithMetadata meta;
     private final String id;
     private final PluginDefinition pluginDefinition;
 
@@ -27,12 +27,12 @@ public PluginDefinition getPluginDefinition() {
         return pluginDefinition;
     }
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return meta;
     }
 
 
-    public PluginVertex(SourceMetadata meta, PluginDefinition pluginDefinition) {
+    public PluginVertex(SourceWithMetadata meta, PluginDefinition pluginDefinition) {
         super(meta);
         this.meta = meta;
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/QueueVertex.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/QueueVertex.java
index 4f675a19189..996f0875716 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/QueueVertex.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/QueueVertex.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.graph;
 
 import org.logstash.config.ir.SourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/15/16.
@@ -38,7 +38,7 @@ public boolean sourceComponentEquals(SourceComponent other) {
 
     // Special vertices really have no metadata
     @Override
-    public SourceMetadata getMeta() {
+    public SourceWithMetadata getMeta() {
         return null;
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/graph/Vertex.java b/logstash-core/src/main/java/org/logstash/config/ir/graph/Vertex.java
index e6414938cb3..900dcf919c1 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/graph/Vertex.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/graph/Vertex.java
@@ -4,7 +4,7 @@
 import org.logstash.config.ir.Hashable;
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.algorithms.DepthFirst;
 
 import java.nio.charset.StandardCharsets;
@@ -18,15 +18,15 @@
  * Created by andrewvc on 9/15/16.
  */
 public abstract class Vertex implements SourceComponent, Hashable {
-    private final SourceMetadata sourceMetadata;
+    private final SourceWithMetadata sourceWithMetadata;
     private Graph graph = this.getGraph();
 
     public Vertex() {
-        this.sourceMetadata = null;
+        this.sourceWithMetadata = null;
     }
 
-    public Vertex(SourceMetadata sourceMetadata) {
-        this.sourceMetadata = sourceMetadata;
+    public Vertex(SourceWithMetadata sourceWithMetadata) {
+        this.sourceWithMetadata = sourceWithMetadata;
     }
 
     public abstract Vertex copy();
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedParallelStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedParallelStatement.java
index d054a414d53..d8cbba53ed8 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedParallelStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedParallelStatement.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.imperative;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
 
 import java.util.List;
@@ -10,7 +10,7 @@
  * Created by andrewvc on 9/22/16.
  */
 public class ComposedParallelStatement extends ComposedStatement {
-    public ComposedParallelStatement(SourceMetadata meta, List<Statement> statements) throws InvalidIRException {
+    public ComposedParallelStatement(SourceWithMetadata meta, List<Statement> statements) throws InvalidIRException {
         super(meta, statements);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedSequenceStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedSequenceStatement.java
index 823da140b30..50fc83c9953 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedSequenceStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedSequenceStatement.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.imperative;
 
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
 
 import java.util.List;
@@ -10,7 +10,7 @@
  * Created by andrewvc on 9/22/16.
  */
 public class ComposedSequenceStatement extends ComposedStatement {
-    public ComposedSequenceStatement(SourceMetadata meta, List<Statement> statements) throws InvalidIRException {
+    public ComposedSequenceStatement(SourceWithMetadata meta, List<Statement> statements) throws InvalidIRException {
         super(meta, statements);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedStatement.java
index c70fc4825e7..1cdaa25724b 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/ComposedStatement.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -12,12 +12,12 @@
  */
 public abstract class ComposedStatement extends Statement {
     public interface IFactory {
-        ComposedStatement make(SourceMetadata meta, List<Statement> statements) throws InvalidIRException;
+        ComposedStatement make(SourceWithMetadata meta, List<Statement> statements) throws InvalidIRException;
     }
 
     private final List<Statement> statements;
 
-    public ComposedStatement(SourceMetadata meta, List<Statement> statements) throws InvalidIRException {
+    public ComposedStatement(SourceWithMetadata meta, List<Statement> statements) throws InvalidIRException {
         super(meta);
         if (statements == null || statements.stream().anyMatch(s -> s == null)) {
             throw new InvalidIRException("Nulls eNot allowed for list eOr in statement list");
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
index aea135f41b5..bf97df63bc2 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
@@ -2,7 +2,7 @@
 
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BooleanExpression;
 import org.logstash.config.ir.graph.BooleanEdge;
 import org.logstash.config.ir.graph.Graph;
@@ -36,7 +36,7 @@ public Statement getFalseStatement() {
         return falseStatement;
     }
 
-    public IfStatement(SourceMetadata meta,
+    public IfStatement(SourceWithMetadata meta,
                        BooleanExpression booleanExpression,
                        Statement trueStatement,
                        Statement falseStatement
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/NoopStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/NoopStatement.java
index 11bda045779..aac0a439cdb 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/NoopStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/NoopStatement.java
@@ -1,7 +1,7 @@
 package org.logstash.config.ir.imperative;
 
 import org.logstash.config.ir.SourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
 
 /**
@@ -9,7 +9,7 @@
  */
 public class NoopStatement extends Statement {
 
-    public NoopStatement(SourceMetadata meta) {
+    public NoopStatement(SourceWithMetadata meta) {
         super(meta);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/PluginStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/PluginStatement.java
index 5dff4d6cf7b..ebd8dd3c2a5 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/PluginStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/PluginStatement.java
@@ -3,7 +3,7 @@
 import org.logstash.config.ir.SourceComponent;
 import org.logstash.config.ir.InvalidIRException;
 import org.logstash.config.ir.PluginDefinition;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
 import org.logstash.config.ir.graph.PluginVertex;
 import org.logstash.config.ir.graph.Vertex;
@@ -14,7 +14,7 @@
 public class PluginStatement extends Statement {
     private final PluginDefinition pluginDefinition;
 
-    public PluginStatement(SourceMetadata meta, PluginDefinition pluginDefinition) {
+    public PluginStatement(SourceWithMetadata meta, PluginDefinition pluginDefinition) {
         super(meta);
         this.pluginDefinition = pluginDefinition;
     }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/Statement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/Statement.java
index f242f08b086..6e7e8f91db4 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/Statement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/Statement.java
@@ -2,14 +2,14 @@
 
 import org.logstash.config.ir.InvalidIRException;
 import org.logstash.config.ir.BaseSourceComponent;
-import org.logstash.config.ir.SourceMetadata;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
 
 /**
  * Created by andrewvc on 9/6/16.
  */
 public abstract class Statement extends BaseSourceComponent {
-    public Statement(SourceMetadata meta) {
+    public Statement(SourceWithMetadata meta) {
         super(meta);
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/IRHelpers.java b/logstash-core/src/test/java/org/logstash/config/ir/IRHelpers.java
index 8a888fc9978..cce0d6c8a32 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/IRHelpers.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/IRHelpers.java
@@ -1,6 +1,7 @@
 package org.logstash.config.ir;
 
 import org.hamcrest.MatcherAssert;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BooleanExpression;
 import org.logstash.config.ir.expression.ValueExpression;
 import org.logstash.config.ir.expression.unary.Truthy;
@@ -74,7 +75,7 @@ public boolean sourceComponentEquals(SourceComponent other) {
         }
 
         @Override
-        public SourceMetadata getMeta() {
+        public SourceWithMetadata getMeta() {
             return null;
         }
     }
@@ -115,8 +116,8 @@ public static BooleanExpression createTestExpression() throws InvalidIRException
         return new Truthy(null, new ValueExpression(null, 1));
     }
 
-    public static SourceMetadata testMetadata() {
-        return new SourceMetadata("/fake/file", 1, 2, "<fakesource>");
+    public static SourceWithMetadata testMetadata() {
+        return new SourceWithMetadata("/fake/file", 1, 2, "<fakesource>");
     }
 
     public static PluginDefinition testPluginDefinition() {
