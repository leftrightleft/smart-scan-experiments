diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 42558596efd..01cd04e4974 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -136,7 +136,8 @@ public void setTimestamp(Timestamp t) {
     }
 
     public Object getField(String reference) {
-        return Javafier.deep(getUnconvertedField(reference));
+        final Object unconverted = getUnconvertedField(reference);
+        return unconverted == null ? null : Javafier.deep(unconverted);
     }
 
     public Object getUnconvertedField(String reference) {
@@ -330,18 +331,18 @@ private static Timestamp parseTimestamp(final Object o) {
     }
 
     public void tag(final String tag) {
-        final Object tags = Javafier.deep(accessors.get("tags"));
+        final Object tags = accessors.get("tags");
         // short circuit the null case where we know we won't need deduplication step below at the end
         if (tags == null) {
             initTag(tag);
         } else {
-            existingTag(tags, tag);
+            existingTag(Javafier.deep(tags), tag);
         }
     }
 
     /**
      * Branch of {@link Event#tag(String)} that handles adding the first tag to this event.
-     * @param tag
+     * @param tag Tag to add
      */
     private void initTag(final String tag) {
         final ConvertedList list = new ConvertedList(1);
diff --git a/logstash-core/src/main/java/org/logstash/Javafier.java b/logstash-core/src/main/java/org/logstash/Javafier.java
index f710e850332..b83df77a445 100644
--- a/logstash-core/src/main/java/org/logstash/Javafier.java
+++ b/logstash-core/src/main/java/org/logstash/Javafier.java
@@ -15,9 +15,6 @@ public class Javafier {
     private Javafier(){}
 
     public static Object deep(Object o) {
-        if(o == null) {
-            return null;
-        }
         if (o instanceof BiValue) {
             return ((BiValue)o).javaValue();
         } else if(o instanceof ConvertedMap) {
@@ -25,12 +22,24 @@ public static Object deep(Object o) {
         }  else if(o instanceof ConvertedList) {
             return ((ConvertedList) o).unconvert();
         } else {
-            try {
-                return BiValues.newBiValue(o).javaValue();
-            } catch (IllegalArgumentException e) {
-                Class cls = o.getClass();
-                throw new IllegalArgumentException(String.format(ERR_TEMPLATE, cls.getName(), cls.getSimpleName()));
-            }
+            return fallback(o);
+        }
+    }
+
+    /**
+     * Cold path of {@link Javafier#deep(Object)}.
+     * We assume that we never get an input that is neither {@link ConvertedMap}, {@link ConvertedList}
+     * nor {@link BiValue}, but fallback to attempting to create a {@link BiValue} from the input
+     * before converting to a Java type.
+     * @param o Know to not be an expected type in {@link Javafier#deep(Object)}.
+     * @return Input converted to Java type
+     */
+    private static Object fallback(final Object o) {
+        try {
+            return BiValues.newBiValue(o).javaValue();
+        } catch (IllegalArgumentException e) {
+            Class cls = o.getClass();
+            throw new IllegalArgumentException(String.format(ERR_TEMPLATE, cls.getName(), cls.getSimpleName()));
         }
     }
 }
