diff --git a/logstash-core/src/main/java/org/logstash/Accessors.java b/logstash-core/src/main/java/org/logstash/Accessors.java
index 1d7ad5419a7..63c5ff97103 100644
--- a/logstash-core/src/main/java/org/logstash/Accessors.java
+++ b/logstash-core/src/main/java/org/logstash/Accessors.java
@@ -99,12 +99,25 @@ private static Object findCreateTarget(final ConvertedMap data, final FieldRefer
         return target;
     }
 
+    public static class InvalidFieldSetException extends RuntimeException {
+        public InvalidFieldSetException(final Object target, final String key, final Object value) {
+            super(String.format(
+                    "Could not set field '%s' on object '%s' to value '%s'." +
+                    "This is probably due to trying to set a field like [foo][bar] = someValue" +
+                    "when [foo] is not either a map or a string",
+                    key, target, value
+            ));
+        }
+    }
+
     private static Object setChild(final Object target, final String key, final Object value) {
         if (target instanceof ConvertedMap) {
             ((ConvertedMap) target).putInterned(key, value);
             return value;
-        } else {
+        } else if (target instanceof ConvertedList) {
             return setOnList(key, value, (ConvertedList) target);
+        } else {
+            throw new InvalidFieldSetException(target, key, value);
         }
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/AccessorsTest.java b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
index 9906b9e741b..51415979f61 100644
--- a/logstash-core/src/test/java/org/logstash/AccessorsTest.java
+++ b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
@@ -187,6 +187,13 @@ public void testListIndexOutOfBounds() {
         assertEquals(0, Accessors.listIndex(-10, 10));
     }
 
+    @Test(expected = Accessors.InvalidFieldSetException.class)
+    public void testSetOnNonMapOrList() {
+        final ConvertedMap data = new ConvertedMap(1);
+        set(data, "[foo]", "AString");
+        set(data, "[foo][bar]", "Another String");
+    }
+
     private static Object get(final ConvertedMap data, final CharSequence reference) {
         return Accessors.get(data, FieldReference.from(reference));
     }
