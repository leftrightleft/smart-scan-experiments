diff --git a/logstash-core/src/main/java/co/elastic/logstash/api/Event.java b/logstash-core/src/main/java/co/elastic/logstash/api/Event.java
index 491b3748c16..cc3b30c637a 100644
--- a/logstash-core/src/main/java/co/elastic/logstash/api/Event.java
+++ b/logstash-core/src/main/java/co/elastic/logstash/api/Event.java
@@ -5,7 +5,7 @@
 import java.util.Map;
 
 /**
- * Event interface for Java plugins. Java plugins should be not rely on the implementation details of any
+ * Event interface for Java plugins. Java plugins should not rely on the implementation details of any
  * concrete implementations of the Event interface.
  */
 public interface Event {
diff --git a/logstash-core/src/main/java/org/logstash/plugins/codecs/Debug.java b/logstash-core/src/main/java/org/logstash/plugins/codecs/Debug.java
new file mode 100644
index 00000000000..a95b9777440
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/codecs/Debug.java
@@ -0,0 +1,98 @@
+package org.logstash.plugins.codecs;
+
+import co.elastic.logstash.api.Codec;
+import co.elastic.logstash.api.Configuration;
+import co.elastic.logstash.api.Context;
+import co.elastic.logstash.api.Event;
+import co.elastic.logstash.api.LogstashPlugin;
+import co.elastic.logstash.api.PluginConfigSpec;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Map;
+import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.function.Function;
+
+import static org.logstash.ObjectMappers.JSON_MAPPER;
+
+/**
+ * An encode-only codec that prints events as pretty-printed JSON somewhat similar
+ * to the "rubydebug" codec.
+ */
+@LogstashPlugin(name = "debug")
+public class Debug implements Codec {
+
+    private static final PluginConfigSpec<Boolean> METADATA_CONFIG =
+            PluginConfigSpec.booleanSetting("metadata", false);
+
+    private static final byte[] NEWLINE_BYTES = System.lineSeparator().getBytes();
+    private final Context context;
+    private final boolean metadata;
+    private final String id;
+
+    private final Function<Event, Map<String, Object>> dataFunction;
+
+    /**
+     * Required constructor.
+     *
+     * @param configuration Logstash Configuration
+     * @param context       Logstash Context
+     */
+    public Debug(final Configuration configuration, final Context context) {
+        this(context, configuration.get(METADATA_CONFIG));
+    }
+
+    private Debug(Context context, boolean metadata) {
+        this.context = context;
+        this.metadata = metadata;
+        this.dataFunction = this.metadata ? this::withMetadata : this::withoutMetadata;
+        this.id = UUID.randomUUID().toString();
+    }
+
+    @Override
+    public void decode(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+        throw new UnsupportedOperationException("The debug codec supports only encoding");
+    }
+
+    @Override
+    public void flush(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+        throw new UnsupportedOperationException("The debug codec supports only encoding");
+    }
+
+    @Override
+    public void encode(Event event, OutputStream output) throws IOException {
+        output.write(JSON_MAPPER
+                .writerWithDefaultPrettyPrinter()
+                .writeValueAsBytes(dataFunction.apply(event)));
+        output.write(NEWLINE_BYTES);
+    }
+
+    private Map<String, Object> withoutMetadata(Event e) {
+        return e.getData();
+    }
+
+    private Map<String, Object> withMetadata(Event e) {
+        Map<String, Object> withMetadata = e.toMap();
+        withMetadata.put(org.logstash.Event.METADATA, e.getMetadata());
+        return withMetadata;
+    }
+
+    @Override
+    public Codec cloneCodec() {
+        return new Debug(context, metadata);
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        return Collections.singletonList(METADATA_CONFIG);
+    }
+
+    @Override
+    public String getId() {
+        return id;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
index 07e70ad993c..e821e96b5d7 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
@@ -19,7 +19,7 @@
 public class Stdout implements Output {
 
     public static final PluginConfigSpec<Codec> CODEC_CONFIG =
-            PluginConfigSpec.codecSetting("codec", "java_line");
+            PluginConfigSpec.codecSetting("codec", "debug");
 
     private Codec codec;
     private OutputStream outputStream;
diff --git a/logstash-core/src/test/java/org/logstash/plugins/codecs/DebugTest.java b/logstash-core/src/test/java/org/logstash/plugins/codecs/DebugTest.java
new file mode 100644
index 00000000000..f8d6d3e44a7
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/plugins/codecs/DebugTest.java
@@ -0,0 +1,51 @@
+package org.logstash.plugins.codecs;
+
+import org.junit.Test;
+import org.logstash.Event;
+import org.logstash.plugins.ConfigurationImpl;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.util.Collections;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class DebugTest {
+
+    @Test
+    public void testEncodeWithoutMetadata() throws IOException {
+        Debug encoder = new Debug(new ConfigurationImpl(Collections.emptyMap()), null);
+        testEncode(encoder, false);
+    }
+
+    @Test
+    public void testEncodeWithMetadata() throws IOException {
+        Debug encoder = new Debug(new ConfigurationImpl(Collections.singletonMap("metadata", "true")), null);
+        testEncode(encoder, true);
+    }
+
+    private void testEncode(Debug debug, boolean hasMetadata) throws IOException {
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        String message = "Hello world";
+        String host = "test";
+        Event e = new Event();
+        e.setField("message", message);
+        e.setField("host", host);
+
+        debug.encode(e, outputStream);
+
+        String resultingString = outputStream.toString();
+        assertTrue(resultingString.contains(message));
+        assertTrue(resultingString.contains(host));
+        assertEquals(hasMetadata, resultingString.contains("\"@metadata\" : { }"));
+    }
+
+    @Test
+    public void testClone() throws IOException  {
+        Debug encoder = new Debug(new ConfigurationImpl(Collections.singletonMap("metadata", "true")), null);
+        Debug clonedCodec = (Debug) encoder.cloneCodec();
+        testEncode(clonedCodec, true);
+    }
+
+}
