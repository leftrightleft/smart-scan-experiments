diff --git a/lib/logstash/outputs/s3.rb b/lib/logstash/outputs/s3.rb
index e3a47b41bbf..4896bb88f79 100644
--- a/lib/logstash/outputs/s3.rb
+++ b/lib/logstash/outputs/s3.rb
@@ -68,6 +68,7 @@
 #      secret_access_key => "monkey_access_key" (required)
 #      endpoint_region => "eu-west-1"           (required)
 #      bucket => "boss_please_open_your_bucket" (required)         
+#      file_prefix => "logstash/"               (optional)         
 #      size_file => 2048                        (optional)
 #      time_file => 5                           (optional)
 #      format => "plain"                        (optional) 
@@ -120,6 +121,9 @@ class LogStash::Outputs::S3 < LogStash::Outputs::Base
  # S3 bucket
  config :bucket, :validate => :string
 
+ # S3 filename prefix
+ config :file_prefix, :validate => :string, :default => nil
+
  # Aws endpoint_region
  config :endpoint_region, :validate => ["us-east-1", "us-west-1", "us-west-2",
                                         "eu-west-1", "ap-southeast-1", "ap-southeast-2",
@@ -156,11 +160,18 @@ def aws_s3_config
 
   @logger.info("Registering s3 output", :bucket => @bucket, :endpoint_region => @endpoint_region)
 
-  AWS.config(
-    :access_key_id => @access_key_id,
-    :secret_access_key => @secret_access_key,
-    :s3_endpoint => @endpoint_region
-  )
+  if @access_key_id and @secret_access_key
+    AWS.config(
+      :access_key_id => @access_key_id,
+      :secret_access_key => @secret_access_key,
+      :s3_endpoint => @endpoint_region
+    )
+  else
+    # Use IAM Roles for EC2 Instances to Manage Credentials (http://docs.aws.amazon.com/AWSSdkDocsRuby/latest/DeveloperGuide/ruby-dg-roles.html)
+    AWS.config(
+      :s3_endpoint => @endpoint_region
+    )
+  end
   @s3 = AWS::S3.new 
 
  end
@@ -210,7 +221,7 @@ def getFinalPath
 
  # This method is used for restore the previous crash of logstash or to prepare the files to send in bucket. 
  # Take two parameter: flag and name. Flag indicate if you want to restore or not, name is the name of file 
- def upFile(flag, name)
+ def upFile(flag, name, name_prefix)
    
    Dir[@temp_directory+name].each do |file|
      name_file = File.basename(file)
@@ -219,8 +230,12 @@ def upFile(flag, name)
       @logger.warn "S3: have found temporary file: "+name_file+", something has crashed before... Prepare for upload in bucket!"
      end
     
-     if (!File.zero?(file))  
-       write_on_bucket(file, name_file)
+     if (!File.zero?(file))
+       if (name_prefix != nil)
+         write_on_bucket(file, name_prefix+name_file)
+       else
+         write_on_bucket(file, name_file)
+       end
 
        if (flag == true)
           @logger.debug "S3: file: "+name_file+" restored on bucket "+@bucket
@@ -229,7 +244,7 @@ def upFile(flag, name)
        end
      end
 
-     File.delete (file)
+     File.delete(file)
 
    end
  end
@@ -272,7 +287,7 @@ def register
    if (@restore == true )
      @logger.debug "S3: is attempting to verify previous crashes..."
    
-     upFile(true, "*.txt")    
+     upFile(true, "*.txt", file_prefix)    
    end
    
    newFile(true)
@@ -282,7 +297,7 @@ def register
       @thread = time_alert(@time_file*60) do
        if (first_time == false)
          @logger.debug "S3: time_file triggered,  let's bucket the file if dosen't empty  and create new file "
-         upFile(false, File.basename(@tempFile))
+         upFile(false, File.basename(@tempFile), file_prefix)
          newFile(true)
        else
          first_time = false
@@ -311,30 +326,23 @@ def receive(event)
 
   # if specific the size
   if(size_file !=0)
-    
     if (@tempFile.size < @size_file )
-
-       @logger.debug "S3: File have size: "+@tempFile.size.to_s+" and size_file is: "+ @size_file.to_s
-       @logger.debug "S3: put event into: "+File.basename(@tempFile)
-
-       # Put the event in the file, now! 
-       File.open(@tempFile, 'a') do |file|
-         file.puts message
-         file.write "\n"
-       end
-
-     else
-
-       @logger.debug "S3: file: "+File.basename(@tempFile)+" is too large, let's bucket it and create new file"
-       upFile(false, File.basename(@tempFile))
-       @sizeCounter += 1
-       newFile(false)
-
-     end
-     
+      @logger.debug "S3: File have size: "+@tempFile.size.to_s+" and size_file is: "+ @size_file.to_s
+      @logger.debug "S3: put event into: "+File.basename(@tempFile)
+
+      # Put the event in the file, now! 
+      File.open(@tempFile, 'a') do |file|
+        file.puts message
+        file.write "\n"
+      end
+    else
+      @logger.debug "S3: file: "+File.basename(@tempFile)+" is too large, let's bucket it and create new file"
+      upFile(false, File.basename(@tempFile), file_prefix)
+      @sizeCounter += 1
+      newFile(false)
+    end
   # else we put all in one file 
   else
-
     @logger.debug "S3: put event into "+File.basename(@tempFile)
     File.open(@tempFile, 'a') do |file|
       file.puts message
