diff --git a/config/pipelines.yml b/config/pipelines.yml
index a71519e30e1..bc95420a096 100644
--- a/config/pipelines.yml
+++ b/config/pipelines.yml
@@ -96,6 +96,15 @@
 #
 #   dead_letter_queue.storage_policy: drop_newer
 
+#   If using dead_letter_queue.enable: true, the interval that events have to be considered valid. After the interval has
+#   expired the events could be automatically deleted from the DLQ.
+#   The interval could be expressed in days, hours, minutes or seconds, using as postfix notation like 5d,
+#   to represent a five days interval.
+#   The available units are respectively d, h, m, s for day, hours, minutes and seconds.
+#   If not specified then the DLQ doesn't use any age policy for cleaning events.
+#
+#   dead_letter_queue.retain.age: 1d
+
 #
 #   If using dead_letter_queue.enable: true, the directory path where the data files will be stored.
 #   Default is path.data/dead_letter_queue
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 5c4416f245b..6df5cd343f7 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -52,6 +52,7 @@ def self.included(base)
       "dead_letter_queue.flush_interval",
       "dead_letter_queue.max_bytes",
       "dead_letter_queue.storage_policy",
+      "dead_letter_queue.retain.age",
       "metric.collect",
       "pipeline.plugin_classloaders",
       "path.config",
diff --git a/logstash-core/spec/logstash/config/source/multi_local_spec.rb b/logstash-core/spec/logstash/config/source/multi_local_spec.rb
index d9623504c1d..49942d0cf26 100644
--- a/logstash-core/spec/logstash/config/source/multi_local_spec.rb
+++ b/logstash-core/spec/logstash/config/source/multi_local_spec.rb
@@ -180,7 +180,17 @@
       it "should not raise an error" do
         expect { subject.pipeline_configs }.not_to raise_error(ArgumentError)
       end
+    end
 
+    context 'using dead letter queue settings with storage and retention policies' do
+      let(:retrieved_pipelines) do [
+          { "pipeline.id" => "main", "path.dead_letter_queue" => "/tmp", "dead_letter_queue.max_bytes" => 10000,
+            "dead_letter_queue.storage_policy" => "drop_newer", "dead_letter_queue.retain.age" => "5d" },
+      ]
+      end
+      it "should not raise an error" do
+        expect { subject.pipeline_configs }.not_to raise_error(ArgumentError)
+      end
     end
   end
 end
