diff --git a/Makefile b/Makefile
index 86dc55ddb33..fcf6ff5d73a 100644
--- a/Makefile
+++ b/Makefile
@@ -220,6 +220,7 @@ build/monolith: compile copy-ruby-files vendor/jar/graphtastic-rmiclient.jar
 	-$(QUIET)cp vendor/ua-parser/regexes.yaml $@/vendor/ua-parser
 	$(QUIET)cp $(GEOIP) $@/
 	$(QUIET)cp $(TYPESDB) $@/
+	$(QUIET)cp lib/logstash/outputs/elasticsearch-template.json $@/
 	-$(QUIET)rsync -a vendor/kibana/ $@/vendor/kibana/
 
 vendor/ua-parser/: | build
diff --git a/lib/logstash/outputs/elasticsearch-template.json b/lib/logstash/outputs/elasticsearch-template.json
new file mode 100644
index 00000000000..af97f7564e3
--- /dev/null
+++ b/lib/logstash/outputs/elasticsearch-template.json
@@ -0,0 +1,44 @@
+{
+  "template" : "logstash-*",
+  "settings" : {
+    "index.refresh_interval" : "5s",
+    "analysis" : {
+      "analyzer" : {
+        "default" : {
+          "type" : "standard",
+          "stopwords" : "_none_"
+        }
+      }
+    }
+  },
+  "mappings" : {
+    "_default_" : {
+       "_all" : {"enabled" : true},
+       "dynamic_templates" : [ {
+         "string_fields" : {
+           "match" : "*",
+           "match_mapping_type" : "string",
+           "mapping" : {
+             "type" : "multi_field",
+               "fields" : {
+                 "{name}" : {"type": "string", "index" : "analyzed", "omit_norms" : true, "index_options" : "docs"},
+                 "{name}.raw" : {"type": "string", "index" : "not_analyzed", "ignore_above" : 256}
+               }
+           }
+         }
+       } ],
+       "properties" : {
+         "@version": { "type": "string", "index": "not_analyzed" },
+         "geoip"  : {
+           "type" : "object",
+             "dynamic": true,
+             "path": "full",
+             "properties" : {
+               "location" : { "type" : "geo_point" }
+             }
+         }
+       }
+    }
+  }
+}
+
diff --git a/lib/logstash/outputs/elasticsearch_http.rb b/lib/logstash/outputs/elasticsearch_http.rb
index 1f532b48dd8..9dba034d6cc 100644
--- a/lib/logstash/outputs/elasticsearch_http.rb
+++ b/lib/logstash/outputs/elasticsearch_http.rb
@@ -24,6 +24,29 @@ class LogStash::Outputs::ElasticSearchHTTP < LogStash::Outputs::Base
   # The index type to write events to. Generally you should try to write only
   # similar events to the same 'type'. String expansion '%{foo}' works here.
   config :index_type, :validate => :string
+  
+  # Starting in Logstash 1.3 (unless you set option "manage_template" to false) 
+  # a default mapping template for Elasticsearch will be applied if you do not 
+  # already have one set to match the index pattern defined (default of 
+  # "logstash-%{+YYYY.MM.dd}"), minus any variables.  For example, in this case
+  # the template will be applied to all indices starting with logstash-* 
+  # If you have dynamic templating (e.g. creating indices based on field names)
+  # then you should set "manage_template" to false and use the REST API to upload
+  # your templates manually.
+  # This configuration option defines how the template is named inside Elasticsearch
+  config :template_name, :validate => :string, :default => "logstash_per_index"
+  
+  # You can set the path to your own template here, if you so desire.  
+  # If not the included template will be used.
+  config :template, :validate => :path
+  
+  # Overwrite the current template with whatever is configured 
+  # in the template and template_name directives.
+  config :template_overwrite, :validate => :boolean, :default => false
+  
+  # Logstash will install the default template unless it finds one pre-existing
+  # or you have set this option to false.
+  config :manage_template, :validate => :boolean, :default => true
 
   # The hostname or ip address to reach your elasticsearch server.
   config :host, :validate => :string, :required => true
@@ -62,13 +85,100 @@ def register
 
     auth = @username && @password ? "#{@username}:#{@password.value}@" : ""
     @bulk_url = "http://#{auth}#{@host}:#{@port}/_bulk?replication=#{@replication}"
-
+    if @manage_template
+      @logger.info("Automatic template configuration enabled", :manage_template => @manage_template.to_s)
+      template_search_url = "http://#{auth}#{@host}:#{@port}/_template/*"
+      @template_url = "http://#{auth}#{@host}:#{@port}/_template/#{@template_name}"
+      if @template_overwrite
+        @logger.info("Template overwrite enabled.  Deleting existing template.", :template_overwrite => @template_overwrite.to_s)
+        response = @agent.get!(@template_url)
+        template_action('delete') if response.status == 200 #=> Purge the old template if it exists
+      end
+      @logger.debug("Template Search URL:", :template_search_url => template_search_url)
+      has_template = false
+      template_idx_name = @index.sub(/%{[^}]+}/,'*')
+      alt_template_idx_name = @index.sub(/-%{[^}]+}/,'*')
+      # Get the template data
+      response = @agent.get!(template_search_url)
+      json = ""
+      if response.status == 404 #=> This condition can occcur when no template has ever been appended
+        @logger.info("No template found in Elasticsearch...")
+        get_template_json
+        template_action('put')
+      elsif response.status == 200
+        begin
+          response.read_body { |c| json << c }
+          results = JSON.parse(json)
+        rescue Exception => e
+          @logger.error("Error parsing JSON", :json => json, :results => results.to_s, :error => e.to_s)
+          raise "Exception in parsing JSON", e
+        end
+        if !results.any? { |k,v| v["template"] == template_idx_name || v["template"] == alt_template_idx_name }
+          @logger.debug("No template found in Elasticsearch", :has_template => has_template, :name => template_idx_name, :alt => alt_template_idx_name)
+          get_template_json
+          template_action('put')      
+        end
+      else #=> Some other status code?
+        @logger.error("Could not check for existing template.  Check status code.", :status => response.status.to_s)
+      end # end if response.status == 200
+    end # end if @manage_template
     buffer_initialize(
       :max_items => @flush_size,
       :max_interval => @idle_flush_time,
       :logger => @logger
     )
   end # def register
+  
+  public 
+  def template_action(command)
+    begin
+      if command == 'delete'
+        response = @agent.delete!(@template_url)
+        response.discard_body
+      elsif command == 'put'
+        response = @agent.put!(@template_url, :body => @template_json)
+        response.discard_body
+      end
+    rescue EOFError
+      @logger.warn("EOF while attempting request or reading response header from elasticsearch",
+                   :host => @host, :port => @port)
+      return # abort this action
+    end
+    if response.status != 200
+      @logger.error("Error acting on elasticsearch mapping template",
+                    :response => response, :action => command,
+                    :request_url => @template_url)
+      return
+    end
+    @logger.info("Successfully deleted template", :template_url => @template_url) if command == 'delete'
+    @logger.info("Successfully applied template", :template_url => @template_url) if command == 'put'
+  end # def template_action
+  
+  
+  public
+  def get_template_json
+    if @template.nil?
+      if __FILE__ =~ /^(jar:)?file:\/.+!.+/
+        begin
+          # Running from a jar, assume types.db is at the root.
+          jar_path = [__FILE__.split("!").first, "/elasticsearch-template.json"].join("!")
+          @template = jar_path
+        rescue => ex
+          raise "Failed to cache, due to: #{ex}\n#{ex.backtrace}"
+        end
+      else
+        if File.exists?("elasticsearch-template.json")
+          @template = "elasticsearch-template.json"
+        elsif File.exists?("lib/logstash/outputs/elasticsearch-template.json")
+          @template = "lib/logstash/outputs/elasticsearch-template.json"
+        else
+          raise "You must specify 'template => ...' in your elasticsearch_http output"
+        end
+      end
+    end
+    @template_json = IO.read(@template).gsub(/\n/,'')
+    @logger.info("Using mapping template", :template => @template_json)
+  end # def get_template
 
   public
   def receive(event)
