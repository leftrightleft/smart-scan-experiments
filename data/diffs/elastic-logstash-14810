diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 76ddab5ed06..d3864275b9a 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -89,7 +89,11 @@ def expr
   class Plugins < Node; end
   class Plugin < Node
     def expr
-      jdsl.iPlugin(source_meta, plugin_type_enum, self.plugin_name, self.expr_attributes)
+      expr_attributes = self.map_expr_attributes
+
+      validate(expr_attributes)
+
+      jdsl.iPlugin(source_meta, plugin_type_enum, self.plugin_name, expr_attributes)
     end
 
     def plugin_type_enum
@@ -109,7 +113,7 @@ def plugin_name
       return name.text_value
     end
 
-    def expr_attributes
+    def map_expr_attributes
       # Turn attributes into a hash map
       self.attributes.recursive_select(Attribute).map(&:expr).map {|k,v|
         if v.kind_of?(Java::OrgLogstashConfigIrExpression::ValueExpression)
@@ -137,6 +141,23 @@ def expr_attributes
         hash
       end
     end
+
+    def validate(expr_attributes)
+      if section_type == "input" || section_type == "output"
+        codec_attribute = expr_attributes["codec"]
+        # If the `codec` attribute value is an Array, it means that multiple codec blocks were found on the plugin
+        # configuration section, which is not a valid configuration and would cause an object serialization error
+        if !codec_attribute.nil? && codec_attribute.kind_of?(::Array)
+          raise ::LogStash::ConfigurationError.new(
+            I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
+                   :plugin => plugin_name,
+                   :type => section_type,
+                   :line => input.line_of(interval.first)
+            )
+          )
+        end
+      end
+    end
   end
 
   class Name < Node
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index e74977175f3..7be72b006e5 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -188,6 +188,8 @@ en:
           Duplicate keys found in your configuration: [%{keys}]
           At line: %{line}, column %{column} (byte %{byte})
           after %{after}
+        invalid_plugin_settings_multiple_codecs: |-
+          The %{type} plugin %{plugin} at line %{line} has multiple `codec` declarations - this is not a valid configuration, only one top-level `codec` per %{type} plugin is supported.
         invalid_plugin_register: >-
           Cannot register %{plugin} %{type} plugin.
           The error reported is:
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index f09857405cd..e9f32c6a36b 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -188,6 +188,63 @@ def rand_meta
         end
       end
 
+      describe "an input plugin with a single codec" do
+        let(:plugin_source) { "generator { codec => plain }" }
+        let(:expected_plugin_args) do
+          {
+            "codec" => "plain"
+          }
+        end
+
+        it 'should add the plugin codec' do
+          expect(c_plugin).to ir_eql(j.iPlugin(rand_meta, INPUT, "generator", expected_plugin_args))
+        end
+      end
+
+      describe "an input plugin with multiple codecs" do
+        let(:plugin_source) { "generator { codec => plain codec => json }" }
+        let(:expected_error_message) {
+          I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
+                 :plugin => "generator",
+                 :type => "input",
+                 :line => "1"
+          )
+        }
+
+        it 'should raise a configuration error' do
+          expect {compiled}.to raise_error(LogStash::ConfigurationError, expected_error_message)
+        end
+      end
+
+      describe "an output plugin with a single codec" do
+        let(:source) { "input { generator {} } output { stdout { codec => json } }" }
+        subject(:output) { compiled[:output] }
+        let(:expected_plugin_args) do
+          {
+            "codec" => "json"
+          }
+        end
+
+        it 'should add the plugin codec' do
+          expect(output).to ir_eql(j.iPlugin(rand_meta, OUTPUT, "stdout", expected_plugin_args))
+        end
+      end
+
+      describe "an output plugin with multiple codecs" do
+        let(:source) { "input { generator {} } output { stdout { codec => plain codec => json } }" }
+        let(:expected_error_message) {
+          I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
+                 :plugin => "stdout",
+                 :type => "output",
+                 :line => "1"
+          )
+        }
+
+        it 'should raise a configuration error' do
+          expect {compiled}.to raise_error(LogStash::ConfigurationError, expected_error_message)
+        end
+      end
+
       describe "a filter plugin that repeats a Hash directive" do
         let(:source) { "input { } filter { #{plugin_source} } output { } " }
         subject(:c_plugin) { compiled[:filter] }
