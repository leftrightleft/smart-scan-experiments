diff --git a/lib/logstash/outputs/boundary.rb b/lib/logstash/outputs/boundary.rb
index cde4a694a48..20955b070ad 100644
--- a/lib/logstash/outputs/boundary.rb
+++ b/lib/logstash/outputs/boundary.rb
@@ -22,20 +22,6 @@ class LogStash::Outputs::Boundary < LogStash::Outputs::Base
   # Your Boundary Org ID
   config :org_id, :validate => :string, :required => true
 
-  # Start time
-  # Override the start time
-  # Note that Boundary requires this to be seconds since epoch
-  # If overriding, it is your responsibility to type this correctly
-  # By default this is set to `event["@timestamp"].to_i`
-  config :start_time, :validate => :string
-
-  # End time
-  # Override the stop time
-  # Note that Boundary requires this to be seconds since epoch
-  # If overriding, it is your responsibility to type this correctly
-  # By default this is set to `event["@timestamp"].to_i`
-  config :end_time, :validate => :string
-
   # Type
   config :btype, :validate => :string
 
@@ -46,52 +32,46 @@ class LogStash::Outputs::Boundary < LogStash::Outputs::Base
   # Set any custom tags for this event
   # Default are the Logstash tags if any
   config :btags, :validate => :array
-
-  # Auto
-  # If set to true, logstash will try to pull boundary fields out
-  # of the event. Any field explicitly set by config options will
-  # override these.
-  # ['type', 'subtype', 'creation_time', 'end_time', 'links', 'tags', 'loc']
-  config :auto, :validate => :boolean, :default => false
+  
+  config :start_time, :deprecated => "This setting is no longer used."
+  config :end_time, :deprecated => "This setting is no longer used."
+  config :auto, :deprecated => "This setting is no longer used."
 
   public
   def register
     require "net/https"
     require "uri"
-    @url = "https://api.boundary.com/#{@org_id}/annotations"
+    @url = "https://api.boundary.com/#{@org_id}/events"
     @uri = URI.parse(@url)
     @client = Net::HTTP.new(@uri.host, @uri.port)
     @client.use_ssl = true
-    # Boundary cert doesn't verify
-    @client.verify_mode = OpenSSL::SSL::VERIFY_NONE
   end # def register
 
   public
   def receive(event)
     return unless output?(event)
 
-    boundary_event = Hash.new
-    boundary_keys = ['type', 'subtype', 'creation_time', 'end_time', 'links', 'tags', 'loc']
-
-    boundary_event['start_time'] = event.sprintf(@start_time) if @start_time
-    boundary_event['end_time'] = event.sprintf(@end_time) if @end_time
-    boundary_event['type'] = event.sprintf(@btype) if @btype
-    boundary_event['subtype'] = event.sprintf(@bsubtype) if @bsubtype
+    boundary_event = {
+      :createdAt => event["@timestamp"],
+      :fingerprintFields => ["@title"],
+      :source => {
+        :ref => event["host"],
+        :type => "host"
+      },
+      :sender => {
+        :ref => "Logstash",
+        :type => "application"
+      },
+      :properties => event
+    }
+
+    boundary_event['title'] = event.sprintf(@btype) if @btype
+    boundary_event['message'] = event.sprintf(@bsubtype) if @bsubtype
     boundary_event['tags'] = @btags.collect { |x| event.sprintf(x) } if @btags
 
-    if @auto
-      boundary_fields = event['@fields'].select { |k| boundary_keys.member? k }
-      boundary_event = boundary_fields.merge boundary_event
-    end
-
-    boundary_event = {
-      'type' => event.sprintf("%{message}"),
-      'subtype' => event.sprintf("%{type}"),
-      'start_time' => event["@timestamp"].to_i,
-      'end_time' => event["@timestamp"].to_i,
-      'links' => [],
-      'tags' => event["tags"],
-    }.merge boundary_event
+    boundary_event['title'] = event['message'] if event['message']
+    boundary_event['message'] = event['type'] if event['type']
+    boundary_event['tags'] = event['tags'] if event['tags']
 
     request = Net::HTTP::Post.new(@uri.path)
     request.basic_auth(@api_key, '')
