diff --git a/logstash-core/src/main/java/org/logstash/ObjectMappers.java b/logstash-core/src/main/java/org/logstash/ObjectMappers.java
index 1a8f1dafc64..bf12ff19683 100644
--- a/logstash-core/src/main/java/org/logstash/ObjectMappers.java
+++ b/logstash-core/src/main/java/org/logstash/ObjectMappers.java
@@ -2,6 +2,8 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.core.type.WritableTypeId;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -9,7 +11,7 @@
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase;
+import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import com.fasterxml.jackson.dataformat.cbor.CBORFactory;
 import com.fasterxml.jackson.dataformat.cbor.CBORGenerator;
@@ -44,7 +46,7 @@ public final class ObjectMappers {
         new SimpleModule("CborRubyDeserializers")
             .addDeserializer(RubyNil.class, new RubyNilDeserializer());
 
-    public static final ObjectMapper JSON_MAPPER = 
+    public static final ObjectMapper JSON_MAPPER =
         new ObjectMapper().registerModule(RUBY_SERIALIZERS);
 
     public static final ObjectMapper CBOR_MAPPER = new ObjectMapper(
@@ -61,15 +63,33 @@ public final class ObjectMappers {
     private ObjectMappers() {
     }
 
+    /**
+     * Serializer for scalar types that does not write type information when called via
+     * {@link ObjectMappers.NonTypedScalarSerializer#serializeWithType(Object, JsonGenerator, SerializerProvider, TypeSerializer)}.
+     * @param <T> Scalar Type
+     */
+    private abstract static class NonTypedScalarSerializer<T> extends StdScalarSerializer<T> {
+
+        NonTypedScalarSerializer(final Class<T> t) {
+            super(t);
+        }
+
+        @Override
+        public final void serializeWithType(final T value, final JsonGenerator gen,
+            final SerializerProvider provider, final TypeSerializer typeSer) throws IOException {
+            serialize(value, gen, provider);
+        }
+    }
+
     /**
      * Serializer for {@link RubyString} since Jackson can't handle that type natively, so we
      * simply serialize it as if it were a {@link String}.
      */
     private static final class RubyStringSerializer
-        extends NonTypedScalarSerializerBase<RubyString> {
+        extends ObjectMappers.NonTypedScalarSerializer<RubyString> {
 
         RubyStringSerializer() {
-            super(RubyString.class, true);
+            super(RubyString.class);
         }
 
         @Override
@@ -85,10 +105,10 @@ public void serialize(final RubyString value, final JsonGenerator generator,
      * simply serialize it as if it were a {@link String}.
      */
     private static final class RubySymbolSerializer
-        extends NonTypedScalarSerializerBase<RubySymbol> {
+        extends ObjectMappers.NonTypedScalarSerializer<RubySymbol> {
 
         RubySymbolSerializer() {
-            super(RubySymbol.class, true);
+            super(RubySymbol.class);
         }
 
         @Override
@@ -104,7 +124,7 @@ public void serialize(final RubySymbol value, final JsonGenerator generator,
      * simply serialize it as if it were a {@code double}.
      */
     private static final class RubyFloatSerializer
-        extends NonTypedScalarSerializerBase<RubyFloat> {
+        extends ObjectMappers.NonTypedScalarSerializer<RubyFloat> {
 
         RubyFloatSerializer() {
             super(RubyFloat.class);
@@ -122,7 +142,7 @@ public void serialize(final RubyFloat value, final JsonGenerator generator,
      * simply serialize it as if it were a {@code boolean}.
      */
     private static final class RubyBooleanSerializer
-        extends NonTypedScalarSerializerBase<RubyBoolean> {
+        extends ObjectMappers.NonTypedScalarSerializer<RubyBoolean> {
 
         RubyBooleanSerializer() {
             super(RubyBoolean.class);
@@ -140,10 +160,10 @@ public void serialize(final RubyBoolean value, final JsonGenerator generator,
      * simply serialize it as if it were a {@code long}.
      */
     private static final class RubyFixnumSerializer
-        extends NonTypedScalarSerializerBase<RubyFixnum> {
+        extends ObjectMappers.NonTypedScalarSerializer<RubyFixnum> {
 
         RubyFixnumSerializer() {
-            super(RubyFixnum.class, true);
+            super(RubyFixnum.class);
         }
 
         @Override
@@ -165,17 +185,19 @@ public static final class TimestampSerializer extends StdSerializer<Timestamp> {
         }
 
         @Override
-        public void serialize(final Timestamp value, final JsonGenerator jgen, 
+        public void serialize(final Timestamp value, final JsonGenerator jgen,
             final SerializerProvider provider) throws IOException {
             jgen.writeString(value.toString());
         }
 
         @Override
-        public void serializeWithType(final Timestamp value, final JsonGenerator jgen, 
+        public void serializeWithType(final Timestamp value, final JsonGenerator jgen,
             final SerializerProvider serializers, final TypeSerializer typeSer) throws IOException {
-            typeSer.writeTypePrefixForScalar(value, jgen, Timestamp.class);
+            final WritableTypeId typeId =
+                typeSer.typeId(value, Timestamp.class, JsonToken.VALUE_STRING);
+            typeSer.writeTypePrefix(jgen, typeId);
             jgen.writeString(value.toString());
-            typeSer.writeTypeSuffixForScalar(value, jgen);
+            typeSer.writeTypeSuffix(jgen, typeId);
         }
     }
 
@@ -196,10 +218,11 @@ public Timestamp deserialize(final JsonParser p, final DeserializationContext ct
      * Serializer for {@link RubyBignum} since Jackson can't handle that type natively, so we
      * simply serialize it as if it were a {@link BigInteger}.
      */
-    private static final class RubyBignumSerializer extends NonTypedScalarSerializerBase<RubyBignum> {
+    private static final class RubyBignumSerializer
+        extends ObjectMappers.NonTypedScalarSerializer<RubyBignum> {
 
         RubyBignumSerializer() {
-            super(RubyBignum.class, true);
+            super(RubyBignum.class);
         }
 
         @Override
@@ -213,10 +236,11 @@ public void serialize(final RubyBignum value, final JsonGenerator jgen,
      * Serializer for {@link BigDecimal} since Jackson can't handle that type natively, so we
      * simply serialize it as if it were a {@link BigDecimal}.
      */
-    private static final class RubyBigDecimalSerializer extends NonTypedScalarSerializerBase<RubyBigDecimal> {
+    private static final class RubyBigDecimalSerializer
+        extends ObjectMappers.NonTypedScalarSerializer<RubyBigDecimal> {
 
         RubyBigDecimalSerializer() {
-            super(RubyBigDecimal.class, true);
+            super(RubyBigDecimal.class);
         }
 
         @Override
@@ -250,9 +274,11 @@ public void serializeWithType(final JrubyTimestampExtLibrary.RubyTimestamp value
             final JsonGenerator jgen, final SerializerProvider serializers,
             final TypeSerializer typeSer)
             throws IOException {
-            typeSer.writeTypePrefixForScalar(value, jgen, Timestamp.class);
+            final WritableTypeId typeId =
+                typeSer.typeId(value, Timestamp.class, JsonToken.VALUE_STRING);
+            typeSer.writeTypePrefix(jgen, typeId);
             jgen.writeObject(value.getTimestamp());
-            typeSer.writeTypeSuffixForScalar(value, jgen);
+            typeSer.writeTypeSuffix(jgen, typeId);
         }
     }
 
@@ -275,9 +301,11 @@ public void serialize(final RubyNil value, final JsonGenerator jgen,
         @Override
         public void serializeWithType(final RubyNil value, final JsonGenerator jgen,
             final SerializerProvider serializers, final TypeSerializer typeSer) throws IOException {
-            typeSer.writeTypePrefixForScalar(value, jgen, RubyNil.class);
+            final WritableTypeId typeId =
+                typeSer.typeId(value, RubyNil.class, JsonToken.VALUE_NULL);
+            typeSer.writeTypePrefix(jgen, typeId);
             jgen.writeNull();
-            typeSer.writeTypeSuffixForScalar(value, jgen);
+            typeSer.writeTypeSuffix(jgen, typeId);
         }
     }
 
