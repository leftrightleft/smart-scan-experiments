diff --git a/docs/static/jvm.asciidoc b/docs/static/jvm.asciidoc
index 4f6a09bfa9b..39edb25dc9d 100644
--- a/docs/static/jvm.asciidoc
+++ b/docs/static/jvm.asciidoc
@@ -6,7 +6,7 @@
 
 * Java 8
 * Java 11
-* Java 14
+* Java 15 (see <<jdk15-upgrade>> for settings info)
 
 Use the
 http://www.oracle.com/technetwork/java/javase/downloads/index.html[official
@@ -59,3 +59,63 @@ a tarball.
 install the correct startup method (SysV init scripts, Upstart, or systemd). If
 {ls} is unable to find the `JAVA_HOME` environment variable during package
 installation, you may get an error message, and {ls} will not start properly.
+
+[float]
+[[jdk15-upgrade]]
+==== Using JDK 15
+
+{ls} supports JDK 15, but you need to update settings in `jvm.options` and
+`log4j2.properties` if: 
+
+* you are upgrading from  {ls} 7.11.x (or earlier) to 7.12 or later, and
+* you are using JDK 15 or later.
+
+[float]
+===== Updates to `jvm.options`
+In the `config/jvm.options` file, replace all CMS related flags with:
+
+[source,shell]
+-----
+## GC configuration
+8-14:-XX:+UseConcMarkSweepGC
+8-14:-XX:CMSInitiatingOccupancyFraction=75
+8-14:-XX:+UseCMSInitiatingOccupancyOnly
+-----
+
+For more information about how to use `jvm.options`, please refer to <<jvm-settings>>.
+
+[float]
+===== Updates to `log4j2.properties`
+In the `config/log4j2.properties`:
+
+* Replace properties that start with `appender.rolling.avoid_pipelined_filter.*` with: 
++
+[source,shell]
+-----
+appender.rolling.avoid_pipelined_filter.type = PipelineRoutingFilter
+-----
+
+* Replace properties that start with `appender.json_rolling.avoid_pipelined_filter.*` with:
+[source,shell]
++
+-----
+appender.json_rolling.avoid_pipelined_filter.type = PipelineRoutingFilter
+-----
+
+* Replace properties that start with `appender.routing.*` with:
+[source,shell]
++
+-----
+appender.routing.type = PipelineRouting
+appender.routing.name = pipeline_routing_appender
+appender.routing.pipeline.type = RollingFile
+appender.routing.pipeline.name = appender-${ctx:pipeline.id}
+appender.routing.pipeline.fileName = ${sys:ls.logs}/pipeline_${ctx:pipeline.id}.log
+appender.routing.pipeline.filePattern = ${sys:ls.logs}/pipeline_${ctx:pipeline.id}.%i.log.gz
+appender.routing.pipeline.layout.type = PatternLayout
+appender.routing.pipeline.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n
+appender.routing.pipeline.policy.type = SizeBasedTriggeringPolicy
+appender.routing.pipeline.policy.size = 100MB
+appender.routing.pipeline.strategy.type = DefaultRolloverStrategy
+appender.routing.pipeline.strategy.max = 30
+-----
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 9c73ee48135..7f9bed4b4c5 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -208,15 +208,6 @@ def converge_state_and_update
     logger.error("An exception happened when converging configuration", attributes)
   end
 
-  ##
-  # Shut down a pipeline and wait for it to fully stop.
-  # WARNING: Calling from `Plugin#initialize` or `Plugin#register` will result in deadlock.
-  # @param pipeline_id [String]
-  def stop_pipeline(pipeline_id)
-    action = LogStash::PipelineAction::Stop.new(pipeline_id.to_sym)
-    converge_state_with_resolved_actions([action])
-  end
-
   # Calculate the Logstash uptime in milliseconds
   #
   # @return [Integer] Uptime in milliseconds
@@ -333,15 +324,6 @@ def resolve_actions_and_converge_state(pipeline_configs)
     end
   end
 
-  # Beware the usage with #resolve_actions_and_converge_state
-  # Calling this method in `Plugin#register` causes deadlock.
-  # For example, resolve_actions_and_converge_state -> pipeline reload_action -> plugin register -> converge_state_with_resolved_actions
-  def converge_state_with_resolved_actions(pipeline_actions)
-    @convergence_lock.synchronize do
-      converge_state(pipeline_actions)
-    end
-  end
-
   # We depends on a series of task derived from the internal state and what
   # need to be run, theses actions are applied to the current pipelines to converge to
   # the desired state.
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 7cc7537a508..cd1411de7a9 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -333,32 +333,6 @@
       end
     end
 
-    describe "#stop_pipeline" do
-      let(:config_string) { "input { generator { id => 'old'} } output { }" }
-      let(:mock_config_pipeline) { mock_pipeline_config(:main, config_string, pipeline_settings) }
-      let(:source_loader) { TestSourceLoader.new(mock_config_pipeline) }
-      subject { described_class.new(agent_settings, source_loader) }
-
-      before(:each) do
-        expect(subject.converge_state_and_update).to be_a_successful_converge
-        expect(subject.get_pipeline('main').running?).to be_truthy
-      end
-
-      after(:each) do
-        subject.shutdown
-      end
-
-      context "when agent stops the pipeline" do
-        it "should stop successfully", :aggregate_failures do
-          converge_result = subject.stop_pipeline('main')
-
-          expect(converge_result).to be_a_successful_converge
-          expect(subject.get_pipeline('main').stopped?).to be_truthy
-        end
-      end
-    end
-
-
     context "#started_at" do
       it "return the start time when the agent is started" do
         expect(described_class::STARTED_AT).to be_kind_of(Time)
