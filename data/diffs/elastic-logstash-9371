diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index 812e0578d8f..65bac55539b 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -19,6 +19,7 @@
 import org.logstash.config.ir.compiler.Dataset;
 import org.logstash.config.ir.compiler.DatasetCompiler;
 import org.logstash.config.ir.compiler.EventCondition;
+import org.logstash.config.ir.compiler.OutputDelegatorExt;
 import org.logstash.config.ir.compiler.RubyIntegration;
 import org.logstash.config.ir.compiler.SplitDataset;
 import org.logstash.config.ir.graph.IfVertex;
@@ -56,7 +57,7 @@ public final class CompiledPipeline {
     /**
      * Configured outputs.
      */
-    private final Map<String, IRubyObject> outputs;
+    private final Map<String, OutputDelegatorExt> outputs;
 
     /**
      * Parsed pipeline configuration graph.
@@ -101,9 +102,9 @@ public Dataset buildExecution() {
     /**
      * Sets up all Ruby outputs learnt from {@link PipelineIR}.
      */
-    private Map<String, IRubyObject> setupOutputs() {
+    private Map<String, OutputDelegatorExt> setupOutputs() {
         final Collection<PluginVertex> outs = pipelineIR.getOutputPluginVertices();
-        final Map<String, IRubyObject> res = new HashMap<>(outs.size());
+        final Map<String, OutputDelegatorExt> res = new HashMap<>(outs.size());
         outs.forEach(v -> {
             final PluginDefinition def = v.getPluginDefinition();
             final SourceWithMetadata source = v.getSourceWithMetadata();
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
index 0fe8395d746..74407754457 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/DatasetCompiler.java
@@ -18,8 +18,6 @@
  */
 public final class DatasetCompiler {
 
-    private static final String MULTI_RECEIVE = "multi_receive";
-
     private static final String FLUSH = "flush";
 
     public static final SyntaxFactory.IdentifierStatement FLUSH_ARG =
@@ -167,18 +165,13 @@ public static Dataset terminalDataset(final Collection<Dataset> parents) {
      * @return Output Dataset
      */
     public static ComputeStepSyntaxElement<Dataset> outputDataset(final Collection<Dataset> parents,
-        final IRubyObject output, final boolean terminal) {
-        final DynamicMethod method = rubyCallsite(output, MULTI_RECEIVE);
+        final OutputDelegatorExt output, final boolean terminal) {
         final ClassFields fields = new ClassFields();
         final Closure clearSyntax;
         final Closure computeSyntax;
         if (parents.isEmpty()) {
-            final ValueSyntaxElement args = fields.add(new IRubyObject[1]);
             clearSyntax = Closure.EMPTY;
-            computeSyntax = Closure.wrap(
-                SyntaxFactory.assignment(SyntaxFactory.arrayField(args, 0), BATCH_ARG),
-                callRubyCallsite(fields.add(method), args, fields.add(output), MULTI_RECEIVE)
-            );
+            computeSyntax = Closure.wrap(invokeOutput(fields.add(output), BATCH_ARG));
         } else {
             final Collection<ValueSyntaxElement> parentFields =
                 parents.stream().map(fields::add).collect(Collectors.toList());
@@ -191,18 +184,20 @@ public static ComputeStepSyntaxElement<Dataset> outputDataset(final Collection<D
                 inlineClear = Closure.EMPTY;
                 clearSyntax = clearSyntax(parentFields);
             }
+            final ValueSyntaxElement inputBuffer = fields.add(buffer);
             computeSyntax = withInputBuffering(
-                Closure.wrap(
-                    callRubyCallsite(
-                        fields.add(method), fields.add(new IRubyObject[]{buffer}),
-                        fields.add(output), MULTI_RECEIVE
-                    ), inlineClear
-                ), parentFields, fields.add(buffer)
+                Closure.wrap(invokeOutput(fields.add(output), inputBuffer), inlineClear),
+                parentFields, inputBuffer
             );
         }
         return compileOutput(computeSyntax, clearSyntax, fields);
     }
 
+    private static ValueSyntaxElement invokeOutput(final ValueSyntaxElement output,
+        final MethodLevelSyntaxElement events) {
+        return output.call("multiReceive", ValueSyntaxElement.GET_RUBY_THREAD_CONTEXT, events);
+    }
+
     private static Closure filterBody(final Closure body, final ValueSyntaxElement outputBuffer,
         final ValueSyntaxElement inputBufferHolder, final ClassFields fields,
         final RubyIntegration.Filter plugin) {
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
index 164d714c7fe..e52b602391b 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/OutputDelegatorExt.java
@@ -1,5 +1,6 @@
 package org.logstash.config.ir.compiler;
 
+import com.google.common.annotations.VisibleForTesting;
 import java.util.concurrent.TimeUnit;
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
@@ -70,6 +71,15 @@ public IRubyObject init(final ThreadContext context, final IRubyObject[] argumen
         return this;
     }
 
+    @VisibleForTesting
+    public OutputDelegatorExt initForTesting(final IRubyObject strategy) {
+        eventMetricOut = LongCounter.DUMMY_COUNTER;
+        eventMetricIn = LongCounter.DUMMY_COUNTER;
+        eventMetricTime = LongCounter.DUMMY_COUNTER;
+        this.strategy = strategy;
+        return this;
+    }
+
     public OutputDelegatorExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
index 7c0c71b9e2f..6aa350f969c 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
@@ -46,7 +46,7 @@ public interface PluginFactory {
         IRubyObject buildInput(RubyString name, RubyInteger line, RubyInteger column,
             IRubyObject args);
 
-        IRubyObject buildOutput(RubyString name, RubyInteger line, RubyInteger column,
+        OutputDelegatorExt buildOutput(RubyString name, RubyInteger line, RubyInteger column,
             IRubyObject args);
 
         RubyIntegration.Filter buildFilter(RubyString name, RubyInteger line, RubyInteger column,
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
index 9ee3d16a06d..5ee9cf4f180 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
@@ -16,7 +16,7 @@ public class LongCounter extends AbstractMetric<Long> implements CounterMetric<L
     /**
      * Dummy counter used by some functionality as a placeholder when metrics are disabled.
      */
-    private static final LongCounter DUMMY_COUNTER = new LongCounter("dummy");
+    public static final LongCounter DUMMY_COUNTER = new LongCounter("dummy");
 
     private static final IllegalArgumentException NEGATIVE_COUNT_EXCEPTION = new IllegalArgumentException("Counters can not be incremented by negative values");
     private LongAdder longAdder;
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
index 2a724fee318..d3c7de3747d 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -18,6 +18,7 @@
 import org.junit.Test;
 import org.logstash.Event;
 import org.logstash.RubyUtil;
+import org.logstash.config.ir.compiler.OutputDelegatorExt;
 import org.logstash.config.ir.compiler.RubyIntegration;
 import org.logstash.ext.JrubyEventExtLibrary;
 
@@ -190,9 +191,11 @@ public IRubyObject buildInput(final RubyString name, final RubyInteger line,
         }
 
         @Override
-        public IRubyObject buildOutput(final RubyString name, final RubyInteger line,
+        public OutputDelegatorExt buildOutput(final RubyString name, final RubyInteger line,
             final RubyInteger column, final IRubyObject args) {
-            return setupPlugin(name, outputs);
+            return new OutputDelegatorExt(
+                RubyUtil.RUBY, RubyUtil.OUTPUT_DELEGATOR_CLASS)
+                .initForTesting(setupPlugin(name, outputs));
         }
 
         @Override
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/compiler/DatasetCompilerTest.java b/logstash-core/src/test/java/org/logstash/config/ir/compiler/DatasetCompilerTest.java
index 0cfc8f687f9..45e4b10ecdb 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/compiler/DatasetCompilerTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/compiler/DatasetCompilerTest.java
@@ -23,9 +23,10 @@ public void compilesOutputDataset() {
         assertThat(
             DatasetCompiler.outputDataset(
                 Collections.emptyList(),
-                RubyUtil.RUBY.evalScriptlet(
-                    "output = Object.new\noutput.define_singleton_method(:multi_receive) do |batch|\nend\noutput"
-                ),
+                new OutputDelegatorExt(RubyUtil.RUBY, RubyUtil.OUTPUT_DELEGATOR_CLASS)
+                    .initForTesting(RubyUtil.RUBY.evalScriptlet(
+                        "output = Object.new\noutput.define_singleton_method(:multi_receive) do |batch|\nend\noutput"
+                    )),
                 true
             ).instantiate().compute(RubyUtil.RUBY.newArray(), false, false),
             nullValue()
