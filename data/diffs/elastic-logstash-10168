diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index 8e96e30d76a..da9e2444842 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -21,8 +21,8 @@
 import org.logstash.config.ir.imperative.PluginStatement;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Configuration;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 import org.logstash.plugins.discovery.PluginRegistry;
 import org.logstash.ext.JrubyEventExtLibrary;
@@ -132,8 +132,8 @@ private Map<String, AbstractOutputDelegatorExt> setupOutputs() {
             if (cls != null) {
                 Output output;
                 try {
-                    final Constructor<Output> ctor = cls.getConstructor(LsConfiguration.class, LsContext.class);
-                    output = ctor.newInstance(new LsConfiguration(Collections.EMPTY_MAP /* def.getArguments()*/), new LsContext());
+                    final Constructor<Output> ctor = cls.getConstructor(Configuration.class, Context.class);
+                    output = ctor.newInstance(new Configuration(Collections.EMPTY_MAP /* def.getArguments()*/), new Context());
                 } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
                     throw new IllegalStateException(ex);
                 }
@@ -163,8 +163,8 @@ private Map<String, AbstractFilterDelegatorExt> setupFilters() {
             if (cls != null) {
                 Filter filter;
                 try {
-                    final Constructor<Filter> ctor = cls.getConstructor(LsConfiguration.class, LsContext.class);
-                    filter = ctor.newInstance(new LsConfiguration(Collections.EMPTY_MAP /* def.getArguments()*/), new LsContext());
+                    final Constructor<Filter> ctor = cls.getConstructor(Configuration.class, Context.class);
+                    filter = ctor.newInstance(new Configuration(Collections.EMPTY_MAP /* def.getArguments()*/), new Context());
                 } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
                     throw new IllegalStateException(ex);
                 }
@@ -192,8 +192,8 @@ private Collection<IRubyObject> setupInputs() {
             final Class<Input> cls = PluginRegistry.getInputClass(def.getName());
             if (cls != null) {
                 try {
-                    final Constructor<Input> ctor = cls.getConstructor(LsConfiguration.class, LsContext.class);
-                    javaInputs.add(ctor.newInstance(new LsConfiguration(Collections.emptyMap()), new LsContext()));
+                    final Constructor<Input> ctor = cls.getConstructor(Configuration.class, Context.class);
+                    javaInputs.add(ctor.newInstance(new Configuration(Collections.emptyMap()), new Context()));
                 } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
                     throw new IllegalStateException(ex);
                 }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
index 2a5428a1ca7..ac9c4f8a184 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
@@ -3,10 +3,10 @@
 import org.jruby.RubyInteger;
 import org.jruby.RubyString;
 import org.jruby.runtime.builtin.IRubyObject;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
@@ -15,10 +15,10 @@
  */
 public interface PluginFactory extends RubyIntegration.PluginFactory {
 
-    Input buildInput(String name, String id, LsConfiguration configuration, LsContext context);
+    Input buildInput(String name, String id, Configuration configuration, Context context);
 
     Filter buildFilter(
-        String name, String id, LsConfiguration configuration, LsContext context
+            String name, String id, Configuration configuration, Context context
     );
 
     final class Default implements PluginFactory {
@@ -30,12 +30,12 @@ public Default(final RubyIntegration.PluginFactory rubyFactory) {
         }
 
         @Override
-        public Input buildInput(final String name, final String id, final LsConfiguration configuration, final LsContext context) {
+        public Input buildInput(final String name, final String id, final Configuration configuration, final Context context) {
             return null;
         }
 
         @Override
-        public Filter buildFilter(final String name, final String id, final LsConfiguration configuration, final LsContext context) {
+        public Filter buildFilter(final String name, final String id, final Configuration configuration, final Context context) {
             return null;
         }
 
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/Codec.java b/logstash-core/src/main/java/org/logstash/plugins/api/Codec.java
index 3e8177c88a2..36a65f59a6b 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/Codec.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Codec.java
@@ -7,7 +7,7 @@
 import java.util.Map;
 import java.util.function.Consumer;
 
-public interface Codec extends LsPlugin {
+public interface Codec extends Plugin {
 
     /**
      * Decodes events from the specified {@link ByteBuffer} and passes them to the provided
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/LsConfiguration.java b/logstash-core/src/main/java/org/logstash/plugins/api/Configuration.java
similarity index 93%
rename from logstash-core/src/main/java/org/logstash/plugins/api/LsConfiguration.java
rename to logstash-core/src/main/java/org/logstash/plugins/api/Configuration.java
index b42d04f9224..e076a67de0c 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/LsConfiguration.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Configuration.java
@@ -7,14 +7,14 @@
 /**
  * LS Configuration example. Should be implemented like Spark config or Hadoop job config classes.
  */
-public final class LsConfiguration {
+public final class Configuration {
 
     private final Map<String, String> rawSettings;
 
     /**
      * @param raw Configuration Settings Map. Values are serialized.
      */
-    public LsConfiguration(final Map<String, String> raw) {
+    public Configuration(final Map<String, String> raw) {
         this.rawSettings = raw;
     }
 
@@ -88,7 +88,7 @@ public static <T> PluginConfigSpec<Map<String, T>> requiredFlatHashSetting(
     }
 
     @SuppressWarnings("unchecked")
-    public static PluginConfigSpec<Map<String, LsConfiguration>> requiredNestedHashSetting(
+    public static PluginConfigSpec<Map<String, Configuration>> requiredNestedHashSetting(
         final String name, final Collection<PluginConfigSpec<?>> spec) {
         return new PluginConfigSpec(
             name, Map.class, null, false, true, spec
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/LsContext.java b/logstash-core/src/main/java/org/logstash/plugins/api/Context.java
similarity index 86%
rename from logstash-core/src/main/java/org/logstash/plugins/api/LsContext.java
rename to logstash-core/src/main/java/org/logstash/plugins/api/Context.java
index 53635240b25..20f2ab36f19 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/LsContext.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Context.java
@@ -5,7 +5,7 @@
 /**
  * Holds Logstash Environment.
  */
-public final class LsContext {
+public final class Context {
 
     public DeadLetterQueueWriter dlqWriter() {
         return null;
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/Filter.java b/logstash-core/src/main/java/org/logstash/plugins/api/Filter.java
index 188f776b3fc..b32068c9ea7 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/Filter.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Filter.java
@@ -8,7 +8,7 @@
 /**
  * A Logstash Filter.
  */
-public interface Filter extends LsPlugin {
+public interface Filter extends Plugin {
 
     Collection<Event> filter(Collection<Event> events);
 
@@ -16,21 +16,21 @@ public interface Filter extends LsPlugin {
     final class Mutate implements Filter {
 
         private static final PluginConfigSpec<String> FIELD_CONFIG =
-            LsConfiguration.requiredStringSetting("field");
+            Configuration.requiredStringSetting("field");
 
         private static final PluginConfigSpec<String> VALUE_CONFIG =
-            LsConfiguration.requiredStringSetting("value");
+            Configuration.requiredStringSetting("value");
 
         private final String field;
 
         private final String value;
 
         /**
-         * Required Constructor Signature only taking a {@link LsConfiguration}.
+         * Required Constructor Signature only taking a {@link Configuration}.
          * @param configuration Logstash Configuration
          * @param context Logstash Context
          */
-        public Mutate(final LsConfiguration configuration, final LsContext context) {
+        public Mutate(final Configuration configuration, final Context context) {
             this.field = configuration.get(FIELD_CONFIG);
             this.value = configuration.get(VALUE_CONFIG);
         }
@@ -55,11 +55,11 @@ final class Clone implements Filter {
         private long lastSeq = -1L;
 
         /**
-         * Required Constructor Signature only taking a {@link LsConfiguration}.
+         * Required Constructor Signature only taking a {@link Configuration}.
          * @param configuration Logstash Configuration
          * @param context Logstash Context
          */
-        public Clone(final LsConfiguration configuration, final LsContext context) {
+        public Clone(final Configuration configuration, final Context context) {
         }
 
         @Override
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/Input.java b/logstash-core/src/main/java/org/logstash/plugins/api/Input.java
index a6ee260dfad..c67ffb6cd78 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/Input.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Input.java
@@ -10,7 +10,7 @@
 /**
  * A Logstash Pipeline Input pushes to a {@link QueueWriter}.
  */
-public interface Input extends LsPlugin {
+public interface Input extends Plugin {
 
     /**
      * Start pushing {@link org.logstash.Event} to given {@link QueueWriter}.
@@ -34,7 +34,7 @@ public interface Input extends LsPlugin {
     @LogstashPlugin(name = "java-one-input-event")
     final class OneInputEvent implements Input {
 
-        public OneInputEvent(final LsConfiguration configuration, final LsContext context) {
+        public OneInputEvent(final Configuration configuration, final Context context) {
             // do nothing
         }
 
@@ -69,11 +69,11 @@ final class StreamInput implements Input {
         private volatile boolean stopped;
 
         /**
-         * Required Constructor Signature only taking a {@link LsConfiguration}.
+         * Required Constructor Signature only taking a {@link Configuration}.
          * @param configuration Logstash Configuration
          * @param context Logstash Context
          */
-        public StreamInput(final LsConfiguration configuration, final LsContext context) {
+        public StreamInput(final Configuration configuration, final Context context) {
             // Do whatever
             System.out.println("Stream instantiated");
         }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/Output.java b/logstash-core/src/main/java/org/logstash/plugins/api/Output.java
index a62e818af64..8f9dfc1f93f 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/Output.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Output.java
@@ -9,7 +9,7 @@
 /**
  * A Logstash Pipeline Output.
  */
-public interface Output extends LsPlugin {
+public interface Output extends Plugin {
 
     /**
      * Outputs Collection of {@link Event}.
@@ -31,11 +31,11 @@ final class StreamOutput implements Output {
         private final CountDownLatch done = new CountDownLatch(1);
 
         /**
-         * Required Constructor Signature only taking a {@link LsConfiguration}.
+         * Required Constructor Signature only taking a {@link Configuration}.
          * @param configuration Logstash Configuration
          * @param context Logstash Context
          */
-        public StreamOutput(final LsConfiguration configuration, final LsContext context) {
+        public StreamOutput(final Configuration configuration, final Context context) {
             this.output = new PrintStream(System.out);
         }
 
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/LsPlugin.java b/logstash-core/src/main/java/org/logstash/plugins/api/Plugin.java
similarity index 81%
rename from logstash-core/src/main/java/org/logstash/plugins/api/LsPlugin.java
rename to logstash-core/src/main/java/org/logstash/plugins/api/Plugin.java
index 87d1b767e1b..28132d2d0fe 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/LsPlugin.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/Plugin.java
@@ -2,7 +2,7 @@
 
 import java.util.Collection;
 
-public interface LsPlugin {
+public interface Plugin {
 
     Collection<PluginConfigSpec<?>> configSchema();
 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/api/PluginHelper.java b/logstash-core/src/main/java/org/logstash/plugins/api/PluginHelper.java
index b00b3a04ac2..57e228f82ef 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/api/PluginHelper.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/api/PluginHelper.java
@@ -10,34 +10,34 @@
 public final class PluginHelper {
 
     public static final PluginConfigSpec<Map<String, String>> ADD_FIELD_CONFIG =
-            LsConfiguration.hashSetting("add_field");
+            Configuration.hashSetting("add_field");
 
     //public static final PluginConfigSpec<Array> ADD_TAG_CONFIG =
-    //        LsConfiguration.arraySetting("add_tag");
+    //        Configuration.arraySetting("add_tag");
 
     public static final PluginConfigSpec<String> CODEC_CONFIG =
-            LsConfiguration.stringSetting("codec");
+            Configuration.stringSetting("codec");
 
     public static final PluginConfigSpec<Boolean> ENABLE_METRIC_CONFIG =
-            LsConfiguration.booleanSetting("enable_metric");
+            Configuration.booleanSetting("enable_metric");
 
     public static final PluginConfigSpec<String> ID_CONFIG =
-            LsConfiguration.stringSetting("id");
+            Configuration.stringSetting("id");
 
     public static final PluginConfigSpec<Boolean> PERIODIC_FLUSH_CONFIG =
-            LsConfiguration.booleanSetting("periodic_flush");
+            Configuration.booleanSetting("periodic_flush");
 
     //public static final PluginConfigSpec<Array> REMOVE_FIELD_CONFIG =
-    //        LsConfiguration.arraySetting("remove_field");
+    //        Configuration.arraySetting("remove_field");
 
     //public static final PluginConfigSpec<Array> REMOVE_TAG_CONFIG =
-    //        LsConfiguration.arraySetting("remove_tag");
+    //        Configuration.arraySetting("remove_tag");
 
     //public static final PluginConfigSpec<Array> TAGS_CONFIG =
-    //        LsConfiguration.arraySetting("tags");
+    //        Configuration.arraySetting("tags");
 
     public static final PluginConfigSpec<String> TYPE_CONFIG =
-            LsConfiguration.stringSetting("type");
+            Configuration.stringSetting("type");
 
 
     /**
diff --git a/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java b/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
index cd1894cb0aa..e06467ebc34 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/codecs/Line.java
@@ -3,9 +3,9 @@
 import org.logstash.Event;
 import org.logstash.StringInterpolation;
 import org.logstash.plugins.api.Codec;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.api.LogstashPlugin;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.PluginHelper;
 import org.logstash.plugins.api.PluginConfigSpec;
 
@@ -30,13 +30,13 @@ public class Line implements Codec {
     public static final String DEFAULT_DELIMITER = "\n";
 
     private static final PluginConfigSpec<String> CHARSET_CONFIG =
-            LsConfiguration.stringSetting("charset", "UTF-8");
+            Configuration.stringSetting("charset", "UTF-8");
 
     private static final PluginConfigSpec<String> DELIMITER_CONFIG =
-            LsConfiguration.stringSetting("delimiter", DEFAULT_DELIMITER);
+            Configuration.stringSetting("delimiter", DEFAULT_DELIMITER);
 
     private static final PluginConfigSpec<String> FORMAT_CONFIG =
-            LsConfiguration.stringSetting("format");
+            Configuration.stringSetting("format");
 
     static final String MESSAGE_FIELD = "message";
 
@@ -48,7 +48,7 @@ public class Line implements Codec {
     private final CharsetDecoder decoder;
     private String remainder = "";
 
-    public Line(final LsConfiguration configuration, final LsContext context) {
+    public Line(final Configuration configuration, final Context context) {
         delimiter = configuration.getRawValue(DELIMITER_CONFIG);
         charset = Charset.forName(configuration.getRawValue(CHARSET_CONFIG));
         format = configuration.getRawValue(FORMAT_CONFIG);
diff --git a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
index 87073924d1a..cb1b949963d 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
@@ -7,11 +7,11 @@
 import java.util.Set;
 
 import org.logstash.plugins.api.Codec;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
 import org.logstash.plugins.api.LogstashPlugin;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 
 /**
@@ -73,16 +73,16 @@ public static Class<Output> getOutputClass(String name) {
         return OUTPUTS.get(name);
     }
 
-    public static Codec getCodec(String name, LsConfiguration configuration, LsContext context) {
+    public static Codec getCodec(String name, Configuration configuration, Context context) {
         if (name != null && CODECS.containsKey(name)) {
             return instantiateCodec(CODECS.get(name), configuration, context);
         }
         return null;
     }
 
-    private static Codec instantiateCodec(Class clazz, LsConfiguration configuration, LsContext context) {
+    private static Codec instantiateCodec(Class clazz, Configuration configuration, Context context) {
         try {
-            Constructor<Codec> constructor = clazz.getConstructor(LsConfiguration.class, LsContext.class);
+            Constructor<Codec> constructor = clazz.getConstructor(Configuration.class, Context.class);
             return constructor.newInstance(configuration, context);
         } catch (Exception e) {
             throw new IllegalStateException("Unable to instantiate codec", e);
diff --git a/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java b/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
index 64d75ce5ddd..44d3aca6a61 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/inputs/Stdin.java
@@ -1,10 +1,10 @@
 package org.logstash.plugins.inputs;
 
 import org.logstash.plugins.api.Codec;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.api.Input;
 import org.logstash.plugins.api.LogstashPlugin;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.PluginHelper;
 import org.logstash.plugins.api.PluginConfigSpec;
 import org.logstash.plugins.discovery.PluginRegistry;
@@ -29,7 +29,7 @@
 public class Stdin implements Input, Consumer<Map<String, Object>> {
 
     public static final PluginConfigSpec<String> CODEC_CONFIG =
-            LsConfiguration.stringSetting("codec", "line");
+            Configuration.stringSetting("codec", "line");
 
     private static final int BUFFER_SIZE = 64 * 1024;
 
@@ -42,16 +42,16 @@ public class Stdin implements Input, Consumer<Map<String, Object>> {
     private QueueWriter writer;
 
     /**
-     * Required Constructor Signature only taking a {@link LsConfiguration}.
+     * Required Constructor Signature only taking a {@link Configuration}.
      *
      * @param configuration Logstash Configuration
      * @param context       Logstash Context
      */
-    public Stdin(final LsConfiguration configuration, final LsContext context) {
+    public Stdin(final Configuration configuration, final Context context) {
         this(configuration, context, new FileInputStream(FileDescriptor.in).getChannel());
     }
 
-    Stdin(final LsConfiguration configuration, final LsContext context, FileChannel inputChannel) {
+    Stdin(final Configuration configuration, final Context context, FileChannel inputChannel) {
         try {
             hostname = InetAddress.getLocalHost().getHostName();
         } catch (UnknownHostException e) {
diff --git a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
index e56f7817c45..4f08b58705e 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
@@ -2,8 +2,8 @@
 
 import org.logstash.Event;
 import org.logstash.plugins.api.LogstashPlugin;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Configuration;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 import org.logstash.plugins.api.PluginConfigSpec;
 import org.logstash.plugins.api.PluginHelper;
@@ -22,16 +22,16 @@ public class Stdout implements Output {
     private final CountDownLatch done = new CountDownLatch(1);
 
     /**
-     * Required Constructor Signature only taking a {@link LsConfiguration}.
+     * Required Constructor Signature only taking a {@link Configuration}.
      *
      * @param configuration Logstash Configuration
      * @param context       Logstash Context
      */
-    public Stdout(final LsConfiguration configuration, final LsContext context) {
+    public Stdout(final Configuration configuration, final Context context) {
         this(configuration, context, System.out);
     }
 
-    Stdout(final LsConfiguration configuration, final LsContext context, OutputStream targetStream) {
+    Stdout(final Configuration configuration, final Context context, OutputStream targetStream) {
         printer = new PrintStream(targetStream); // replace this with a codec
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
index 47c5edca594..6630d0df342 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/CompiledPipelineTest.java
@@ -29,10 +29,10 @@
 import org.logstash.config.ir.compiler.FilterDelegatorExt;
 import org.logstash.config.ir.compiler.PluginFactory;
 import org.logstash.ext.JrubyEventExtLibrary;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
-import org.logstash.plugins.api.LsConfiguration;
-import org.logstash.plugins.api.LsContext;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
@@ -485,13 +485,13 @@ private static <T> T setupPlugin(final RubyString name,
         }
 
         @Override
-        public Input buildInput(final String name, final String id, final LsConfiguration configuration, final LsContext context) {
+        public Input buildInput(final String name, final String id, final Configuration configuration, final Context context) {
             return null;
         }
 
         @Override
         public Filter buildFilter(final String name, final String id,
-            final LsConfiguration configuration, final LsContext context) {
+                                  final Configuration configuration, final Context context) {
             return null;
         }
     }
diff --git a/logstash-core/src/test/java/org/logstash/plugins/codecs/LineTest.java b/logstash-core/src/test/java/org/logstash/plugins/codecs/LineTest.java
index dcfd81007d4..fc48904bbee 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/codecs/LineTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/codecs/LineTest.java
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 import org.logstash.Event;
-import org.logstash.plugins.api.LsConfiguration;
+import org.logstash.plugins.api.Configuration;
 
 import java.io.ByteArrayOutputStream;
 import java.nio.ByteBuffer;
@@ -212,7 +212,7 @@ private static Line getLineCodec(String delimiter, String charset) {
         if (charset != null) {
             config.put("charset", charset);
         }
-        return new Line(new LsConfiguration(config), null);
+        return new Line(new Configuration(config), null);
     }
 
     @Test
@@ -220,7 +220,7 @@ public void testDecodeWithCharset() throws Exception {
         TestEventConsumer flushConsumer = new TestEventConsumer();
 
         // decode with cp-1252
-        Line cp1252decoder = new Line(new LsConfiguration(Collections.singletonMap("charset", "cp1252")), null);
+        Line cp1252decoder = new Line(new Configuration(Collections.singletonMap("charset", "cp1252")), null);
         byte[] rightSingleQuoteInCp1252 = {(byte) 0x92};
         ByteBuffer b1 = ByteBuffer.wrap(rightSingleQuoteInCp1252);
         cp1252decoder.decode(b1, flushConsumer);
@@ -231,7 +231,7 @@ public void testDecodeWithCharset() throws Exception {
 
         // decode with UTF-8
         flushConsumer.events.clear();
-        Line utf8decoder = new Line(new LsConfiguration(Collections.EMPTY_MAP), null);
+        Line utf8decoder = new Line(new Configuration(Collections.EMPTY_MAP), null);
         byte[] rightSingleQuoteInUtf8 = {(byte) 0xE2, (byte) 0x80, (byte) 0x99};
         ByteBuffer b2 = ByteBuffer.wrap(rightSingleQuoteInUtf8);
         utf8decoder.decode(b2, flushConsumer);
@@ -245,7 +245,7 @@ public void testDecodeWithCharset() throws Exception {
     @Test
     public void testEncode() {
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-        Line line = new Line(new LsConfiguration(Collections.emptyMap()), null);
+        Line line = new Line(new Configuration(Collections.emptyMap()), null);
         Event e = new Event();
         e.setField("myfield1", "myvalue1");
         e.setField("myfield2", 42L);
@@ -266,7 +266,7 @@ public void testEncode() {
     public void testEncodeWithCustomDelimiter() {
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         String delimiter = "xyz";
-        Line line = new Line(new LsConfiguration(Collections.singletonMap("delimiter", delimiter)), null);
+        Line line = new Line(new Configuration(Collections.singletonMap("delimiter", delimiter)), null);
         Event e = new Event();
         e.setField("myfield1", "myvalue1");
         e.setField("myfield2", 42L);
@@ -285,7 +285,7 @@ public void testEncodeWithCustomDelimiter() {
     @Test
     public void testEncodeWithFormat() {
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-        Line line = new Line(new LsConfiguration(Collections.singletonMap("format", "%{host}-%{message}")), null);
+        Line line = new Line(new Configuration(Collections.singletonMap("format", "%{host}-%{message}")), null);
         String message = "Hello world";
         String host = "test";
         String expectedOutput = host + "-" + message + Line.DEFAULT_DELIMITER;
diff --git a/logstash-core/src/test/java/org/logstash/plugins/inputs/StdinTest.java b/logstash-core/src/test/java/org/logstash/plugins/inputs/StdinTest.java
index 81ef0b3767c..9aaf57be126 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/inputs/StdinTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/inputs/StdinTest.java
@@ -1,7 +1,7 @@
 package org.logstash.plugins.inputs;
 
 import org.junit.Test;
-import org.logstash.plugins.api.LsConfiguration;
+import org.logstash.plugins.api.Configuration;
 import org.logstash.plugins.codecs.Line;
 import org.logstash.execution.queue.QueueWriter;
 
@@ -52,7 +52,7 @@ public void testUtf8Events() throws IOException {
     private static TestQueueWriter testStdin(byte[] input) throws IOException {
         TestQueueWriter queueWriter = new TestQueueWriter();
         try (FileChannel inChannel = getTestFileChannel(input)) {
-            Stdin stdin = new Stdin(new LsConfiguration(Collections.EMPTY_MAP), null, inChannel);
+            Stdin stdin = new Stdin(new Configuration(Collections.EMPTY_MAP), null, inChannel);
             Thread t = new Thread(() -> stdin.start(queueWriter));
             t.start();
             try {
