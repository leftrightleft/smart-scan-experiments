diff --git a/logstash-core/lib/logstash/api/commands/stats.rb b/logstash-core/lib/logstash/api/commands/stats.rb
index 4c52857b3bd..2072f5ba971 100644
--- a/logstash-core/lib/logstash/api/commands/stats.rb
+++ b/logstash-core/lib/logstash/api/commands/stats.rb
@@ -81,6 +81,16 @@ def events
           {}
         end
 
+        def flow
+          extract_metrics(
+            [:stats, :flow],
+            :concurrency, :backpressure, :output_throughput, :filter_throughput, :input_throughput
+          )
+        rescue LogStash::Instrument::MetricStore::MetricNotFound
+          # if the stats/events metrics have not yet been populated, return an empty map
+          {}
+        end
+
         def pipeline(pipeline_id = nil, opts={})
           extended_stats = LogStash::Config::PipelinesInfo.format_pipelines_info(
             service.agent,
@@ -165,6 +175,7 @@ def plugin_stats(stats, plugin_type)
           def report(stats, extended_stats=nil, opts={})
             ret = {
               :events => stats[:events],
+              :flow => stats[:flow],
               :plugins => {
                 :inputs => plugin_stats(stats, :inputs),
                 :codecs => plugin_stats(stats, :codecs),
diff --git a/logstash-core/lib/logstash/api/modules/node_stats.rb b/logstash-core/lib/logstash/api/modules/node_stats.rb
index 5f1ffae2ba2..2bd017458fc 100644
--- a/logstash-core/lib/logstash/api/modules/node_stats.rb
+++ b/logstash-core/lib/logstash/api/modules/node_stats.rb
@@ -35,6 +35,7 @@ class NodeStats < ::LogStash::Api::Modules::Base
             :jvm => jvm_payload,
             :process => process_payload,
             :events => events_payload,
+            :flow => flow_payload,
             :pipelines => pipeline_payload,
             :reloads => reloads_payload,
             :os => os_payload,
@@ -61,6 +62,10 @@ def events_payload
           @stats.events
         end
 
+        def flow_payload
+          @stats.flow
+        end
+
         def jvm_payload
           @stats.jvm
         end
diff --git a/logstash-core/lib/logstash/config/pipelines_info.rb b/logstash-core/lib/logstash/config/pipelines_info.rb
index ce38306c1b8..716460c22bf 100644
--- a/logstash-core/lib/logstash/config/pipelines_info.rb
+++ b/logstash-core/lib/logstash/config/pipelines_info.rb
@@ -33,6 +33,7 @@ def self.format_pipelines_info(agent, metric_store, extended_performance_collect
           "hash" => pipeline.lir.unique_hash,
           "ephemeral_id" => pipeline.ephemeral_id,
           "events" => format_pipeline_events(p_stats[:events]),
+          "flow" => format_pipeline_flow(p_stats[:flow]),
           "queue" => format_queue_stats(pipeline_id, metric_store),
           "reloads" => {
             "successes" => (p_stats.dig(:reloads, :successes)&.value || 0),
@@ -52,6 +53,20 @@ def self.format_pipeline_events(stats)
       result
     end
 
+    def self.format_pipeline_flow(stats, result = {})
+      (stats || {}).each do |stage, counter|
+        if counter.class.eql?(Hash)
+          result[stage.to_s] = {}
+          (counter || {}).each do |key, value|
+            result[stage.to_s] = format_pipeline_flow(counter, result[stage.to_s])
+          end
+        else
+          result[stage.to_s] = counter.value
+        end
+      end
+      result
+    end
+
     def self.format_pipeline_vertex_stats(stats, pipeline)
       return nil unless stats
       
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb b/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb
new file mode 100644
index 00000000000..c492f1a07e7
--- /dev/null
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/flow_rate.rb
@@ -0,0 +1,37 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require 'logstash/instrument/periodic_poller/base'
+
+module LogStash module Instrument module PeriodicPoller
+  class FlowRate < Base
+    def initialize(metric, agent, options = {})
+      super(metric, options)
+      @metric = metric
+      @agent = agent
+    end
+
+    def collect
+      pipelines = @agent.running_user_defined_pipelines
+      pipelines.each do |_, pipeline|
+        unless pipeline.nil?
+          pipeline.collect_flow_metrics
+        end
+      end
+    end
+  end
+end end end
\ No newline at end of file
diff --git a/logstash-core/lib/logstash/instrument/periodic_pollers.rb b/logstash-core/lib/logstash/instrument/periodic_pollers.rb
index 345dc7c3d6d..2fae2629f3a 100644
--- a/logstash-core/lib/logstash/instrument/periodic_pollers.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_pollers.rb
@@ -19,6 +19,7 @@
 require "logstash/instrument/periodic_poller/os"
 require "logstash/instrument/periodic_poller/jvm"
 require "logstash/instrument/periodic_poller/pq"
+require "logstash/instrument/periodic_poller/flow_rate"
 
 module LogStash module Instrument
   # Each PeriodPoller manager his own thread to do the poller
@@ -32,7 +33,8 @@ def initialize(metric, queue_type, agent)
       @periodic_pollers = [PeriodicPoller::Os.new(metric),
                            PeriodicPoller::JVM.new(metric),
                            PeriodicPoller::PersistentQueue.new(metric, queue_type, agent),
-                           PeriodicPoller::DeadLetterQueue.new(metric, agent)]
+                           PeriodicPoller::DeadLetterQueue.new(metric, agent),
+                           PeriodicPoller::FlowRate.new(metric, agent)]
     end
 
     def start
diff --git a/logstash-core/spec/logstash/api/commands/stats_spec.rb b/logstash-core/spec/logstash/api/commands/stats_spec.rb
index a8877fdfc11..d0f00d8b1db 100644
--- a/logstash-core/spec/logstash/api/commands/stats_spec.rb
+++ b/logstash-core/spec/logstash/api/commands/stats_spec.rb
@@ -75,6 +75,20 @@
     end
   end
 
+  # TODO: complete test case and run
+  describe "#metric flows" do
+    let(:report_method) { :flow }
+
+    it "return metric flow information" do
+      expect(report.keys).to include(
+                               :input_throughput,
+                               :output_throughput,
+                               :filter_throughput,
+                               :backpressure,
+                               :concurrency)
+    end
+  end
+
   describe "#hot_threads" do
     let(:report_method) { :hot_threads }
 
@@ -144,6 +158,7 @@
       it "returns information on pipeline" do
         expect(report[:main].keys).to include(
           :events,
+          :flows,
           :plugins,
           :reloads,
           :queue,
@@ -158,6 +173,15 @@
           :queue_push_duration_in_millis
         )
       end
+      it "returns flow metric information" do
+        expect(report[:main][:flow].keys).to include(
+                                                 :output_throughput,
+                                                 :filter_throughput,
+                                                 :backpressure,
+                                                 :concurrency,
+                                                 :input_throughput
+                                               )
+      end
     end
     context "when using multiple pipelines" do
       before(:each) do
diff --git a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
index 247ef51360b..0a6d1057edc 100644
--- a/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
+++ b/logstash-core/spec/logstash/api/modules/node_stats_spec.rb
@@ -97,6 +97,28 @@
          "out" => Numeric,
          "queue_push_duration_in_millis" => Numeric
        },
+       "flow" => {
+         "output_throughput" => {
+           "lifetime" => Numeric,
+           "current" => Numeric
+         },
+         "filter_throughput" => {
+           "lifetime" => Numeric,
+           "current" => Numeric
+         },
+         "backpressure" => {
+           "lifetime" => Numeric,
+           "current" => Numeric
+         },
+         "concurrency" => {
+           "lifetime" => Numeric,
+           "current" => Numeric
+         },
+         "input_throughput" => {
+           "lifetime" => Numeric,
+           "current" => Numeric
+         }
+       },
        "plugins" => {
           "inputs" => Array,
           "codecs" => Array,
diff --git a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
index 23301abae57..0288dd8fb9f 100644
--- a/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
+++ b/logstash-core/spec/logstash/instrument/wrapped_write_client_spec.rb
@@ -110,6 +110,29 @@ def threaded_read_client
           expect(snapshot_metric[:pipelines][:main][:plugins][:inputs][myid][:events][:queue_push_duration_in_millis].value).to be_kind_of(Integer)
         end
       end
+
+      context "with flow metrics" do
+        it "records input throughput metrics" do
+          expect(snapshot_metric[:flow][:input_throughput][:current].value).to be_kind_of(Numeric)
+          expect(snapshot_metric[:flow][:input_throughput][:lifetime].value).to be_kind_of(Numeric)
+        end
+        it "records output throughput metrics" do
+          expect(snapshot_metric[:flow][:output_throughput][:current].value).to be_kind_of(Numeric)
+          expect(snapshot_metric[:flow][:output_throughput][:lifetime].value).to be_kind_of(Numeric)
+        end
+        it "records filter throughput metrics" do
+          expect(snapshot_metric[:flow][:filter_throughput][:current].value).to be_kind_of(Numeric)
+          expect(snapshot_metric[:flow][:filter_throughput][:lifetime].value).to be_kind_of(Numeric)
+        end
+        it "records backpressure metrics" do
+          expect(snapshot_metric[:flow][:backpressure][:current].value).to be_kind_of(Numeric)
+          expect(snapshot_metric[:flow][:backpressure][:lifetime].value).to be_kind_of(Numeric)
+        end
+        it "records concurrency metrics" do
+          expect(snapshot_metric[:flow][:concurrency][:current].value).to be_kind_of(Numeric)
+          expect(snapshot_metric[:flow][:concurrency][:lifetime].value).to be_kind_of(Numeric)
+        end
+      end
     end
   end
 
diff --git a/tools/benchmark-cli/src/test/resources/org/logstash/benchmark/cli/metrics.json b/tools/benchmark-cli/src/test/resources/org/logstash/benchmark/cli/metrics.json
index 7d87bbab3a4..487157e146c 100644
--- a/tools/benchmark-cli/src/test/resources/org/logstash/benchmark/cli/metrics.json
+++ b/tools/benchmark-cli/src/test/resources/org/logstash/benchmark/cli/metrics.json
@@ -93,6 +93,28 @@
         "out" : 357125,
         "duration_in_millis" : 168492
       },
+      "flow": {
+        "output_throughput": {
+          "lifetime": 0.231,
+          "current": 4.0
+        },
+        "filter_throughput": {
+          "lifetime": 0.231,
+          "current": 4.0
+        },
+        "backpressure": {
+          "lifetime": 0.0,
+          "current": 0.0
+        },
+        "concurrency": {
+          "lifetime": 0.018,
+          "current": 0.288
+        },
+        "input_throughput": {
+          "lifetime": 0.25,
+          "current": 4.4
+        }
+      },
       "plugins" : {
         "inputs" : [ {
           "id" : "3ca119230f5eaf03a261b674ee2f2dfe1491894c1b2b8f21e1d9a02b656b36f1",
