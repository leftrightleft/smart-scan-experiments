diff --git a/lib/logstash/filters/metrics.rb b/lib/logstash/filters/metrics.rb
index 8d60f7498a5..8dd61f18a48 100644
--- a/lib/logstash/filters/metrics.rb
+++ b/lib/logstash/filters/metrics.rb
@@ -128,6 +128,10 @@ class LogStash::Filters::Metrics < LogStash::Filters::Base
   # The flush interval, when the metrics event is created. Must be a multiple of 5s.
   config :flush_interval, :validate => :number, :default => 5
 
+  # Call the filter flush method at regular interval.
+  # Optional.
+  config :periodic_flush, :validate => :boolean, :default => true
+
   # The clear interval, when all counter are reset.
   #
   # If set to -1, the default value, the metrics will never be cleared.
@@ -174,7 +178,7 @@ def filter(event)
     end
   end # def filter
 
-  def flush
+  def flush(options = {})
     # Add 5 seconds to @last_flush and @last_clear counters
     # since this method is called every 5 seconds.
     @last_flush.update { |v| v + 5 }
diff --git a/spec/filters/metrics_spec.rb b/spec/filters/metrics_spec.rb
index 921c7fe9968..2223706c588 100644
--- a/spec/filters/metrics_spec.rb
+++ b/spec/filters/metrics_spec.rb
@@ -230,4 +230,49 @@
       insist {subject.register }.raises(LogStash::ConfigurationError)
     end
   end
+
+
+  context "should flush every 5 seconds when run in agent" do
+    require "stud/temporary"
+    tmp_file = Stud::Temporary.file
+
+    config <<-CONFIG
+      input {
+        generator {
+          type => "generated"
+          count => 200000
+        }
+      }
+
+      filter {
+        if [type] == "generated" {
+          metrics {
+            meter => "events"
+            add_tag => "metric"
+          }
+        }
+      }
+
+      output {
+        #only emit events with the 'metric' tag
+        if "metric" in [tags] {
+          file {
+            path => "#{tmp_file.path}"
+          }
+        }
+      }
+    CONFIG
+
+      agent do
+        begin
+          #Counting \n is counting events
+          #A unique event means no flushing occured before teardown
+          reject {tmp_file.read.scan(/\n/).count} == 1
+        ensure
+          #http://www.ruby-doc.org/stdlib-1.9.3/libdoc/tempfile/rdoc/Tempfile.html#method-i-unlink
+          tmp_file.close
+          File.unlink(tmp_file)
+        end
+      end
+  end
 end
