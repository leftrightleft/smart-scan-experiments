diff --git a/.gitignore b/.gitignore
index 0bf92be54e3..2715c52735f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -37,3 +37,5 @@ qa/Gemfile.lock
 *.iml
 .gradle
 .idea
+logs
+qa/integration/services/installed/
diff --git a/qa/integration/.rspec b/qa/integration/.rspec
index 12f9968c306..83a4f920292 100644
--- a/qa/integration/.rspec
+++ b/qa/integration/.rspec
@@ -1 +1,2 @@
---default-path specs/
\ No newline at end of file
+--default-path specs/
+--format documentation
\ No newline at end of file
diff --git a/qa/integration/fixtures/01_logstash_bin_smoke_spec.yml b/qa/integration/fixtures/01_logstash_bin_smoke_spec.yml
new file mode 100644
index 00000000000..2ea4dc401a5
--- /dev/null
+++ b/qa/integration/fixtures/01_logstash_bin_smoke_spec.yml
@@ -0,0 +1,9 @@
+---
+services:
+  - logstash
+config: |-
+ input {
+    tcp {
+      port => '<%=options[:port]%>'
+    }
+  } 
\ No newline at end of file
diff --git a/qa/integration/fixtures/env_variables_config_spec.yml b/qa/integration/fixtures/env_variables_config_spec.yml
new file mode 100644
index 00000000000..008e2c95f2f
--- /dev/null
+++ b/qa/integration/fixtures/env_variables_config_spec.yml
@@ -0,0 +1,21 @@
+---
+services:
+  - logstash
+config: |-
+ input {
+    tcp {
+      port => "${TEST_ENV_TCP_PORT}"
+    }
+  }
+  filter {
+    mutate {
+      add_tag => [ "blah", "${TEST_ENV_TAG}" ]
+    }
+  }
+  output {
+    file {
+      path => "${TEST_ENV_PATH}/logstash_env_test.log"
+      flush_interval => 0
+      codec => line { format => "%{message} %{tags}" }
+    }
+  }
\ No newline at end of file
diff --git a/qa/integration/fixtures/reload_config_spec.yml b/qa/integration/fixtures/reload_config_spec.yml
new file mode 100644
index 00000000000..bc01103f544
--- /dev/null
+++ b/qa/integration/fixtures/reload_config_spec.yml
@@ -0,0 +1,37 @@
+---
+services:
+  - logstash
+config:
+  initial: |-
+    input {
+      tcp {
+        port => '<%=options[:port]%>'
+      }
+    }
+    output {
+      file {
+         path => '<%=options[:file]%>'
+         flush_interval => 0
+         codec => line { format => "%{message}" }
+      }
+    }
+  reload: |-
+    input {
+      tcp {
+        port => '<%=options[:port]%>'
+      }
+    }
+    filter {
+      grok {
+        match => {
+          "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:-|%{NUMBER:bytes:int}) %{QS:referrer} %{QS:agent}"
+        }
+      }
+    }
+    output {
+      file {
+         path => '<%=options[:file]%>'
+         flush_interval => 0
+         codec => json
+      }
+    }
\ No newline at end of file
diff --git a/qa/integration/fixtures/settings_spec.yml b/qa/integration/fixtures/settings_spec.yml
new file mode 100644
index 00000000000..53be4a7f335
--- /dev/null
+++ b/qa/integration/fixtures/settings_spec.yml
@@ -0,0 +1,9 @@
+---
+services:
+  - logstash
+config: |-
+ input {
+    tcp {
+      port => '<%=options[:port]%>'
+    }
+  }  
\ No newline at end of file
diff --git a/qa/integration/framework/fixture.rb b/qa/integration/framework/fixture.rb
index 7c3d7d21bd5..ba5120e3ac1 100644
--- a/qa/integration/framework/fixture.rb
+++ b/qa/integration/framework/fixture.rb
@@ -8,6 +8,7 @@ class Fixture
   attr_reader :input
   attr_reader :actual_output
   attr_reader :test_dir
+  attr_reader :settings
 
   class TemplateContext
     attr_reader :options
diff --git a/qa/integration/framework/helpers.rb b/qa/integration/framework/helpers.rb
new file mode 100644
index 00000000000..23a911e091e
--- /dev/null
+++ b/qa/integration/framework/helpers.rb
@@ -0,0 +1,45 @@
+# encoding: utf-8
+# Helper module for all tests
+
+require "flores/random"
+
+def wait_for_port(port, retry_attempts)
+  tries = retry_attempts
+  while tries > 0
+    if is_port_open?(port)
+      break
+    else
+      sleep 1
+    end
+    tries -= 1
+  end
+end
+
+def is_port_open?(port)
+  begin
+    s = TCPSocket.open("localhost", port)
+    s.close
+    return true
+  rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
+    return false
+  end
+end
+
+def send_data(port, data)
+  socket = TCPSocket.new("127.0.0.1", port)
+  socket.puts(data)
+  socket.flush
+  socket.close
+end
+
+def config_to_temp_file(config)
+  f = Stud::Temporary.file
+  f.write(config)
+  f.close
+  f.path
+end
+
+def random_port
+  # 9600-9700 is reserved in Logstash HTTP server, so we don't want that
+  Flores::Random.integer(9701..15000)
+end  
\ No newline at end of file
diff --git a/qa/integration/integration_tests.gemspec b/qa/integration/integration_tests.gemspec
index 9fdefb18348..5a44f769538 100644
--- a/qa/integration/integration_tests.gemspec
+++ b/qa/integration/integration_tests.gemspec
@@ -19,4 +19,5 @@ Gem::Specification.new do |s|
   s.add_development_dependency 'stud'
   s.add_development_dependency 'pry'
   s.add_development_dependency 'logstash-devutils'
+  s.add_development_dependency 'flores'
 end
diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index 09e3ea8068b..4ae85afdbcb 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -8,13 +8,20 @@
 # A locally started Logstash service
 class LogstashService < Service
 
-  LS_VERSION_FILE = File.expand_path(File.join("../../../../", "versions.yml"), __FILE__)
-  LS_BIN = "bin/logstash"
+  LS_ROOT_DIR = File.join("..", "..", "..", "..")
+  LS_VERSION_FILE = File.expand_path(File.join(LS_ROOT_DIR, "versions.yml"), __FILE__)
+  LS_BUILD_DIR = File.join(LS_ROOT_DIR, "build")
+  LS_BIN = File.join("bin", "logstash")
+  LS_CONFIG_FILE = File.join("config", "logstash.yml")
 
   STDIN_CONFIG = "input {stdin {}} output { }"
   RETRY_ATTEMPTS = 10
 
   @process = nil
+  
+  attr_reader :logstash_home
+  attr_reader :application_settings_file
+  attr_writer :env_variables
 
   def initialize(settings)
     super("logstash", settings)
@@ -27,14 +34,15 @@ def initialize(settings)
       ls_version_file = YAML.load_file(LS_VERSION_FILE)
       ls_file = "logstash-" + ls_version_file["logstash"]
       # First try without the snapshot if it's there
-      @logstash_home = File.expand_path(File.join("../../../../build", ls_file), __FILE__)
+      @logstash_home = File.expand_path(File.join(LS_BUILD_DIR, ls_file), __FILE__)
       @logstash_home += "-SNAPSHOT" unless Dir.exists?(@logstash_home)
 
       puts "Using #{@logstash_home} as LS_HOME"
       @logstash_bin = File.join("#{@logstash_home}", LS_BIN)
       raise "Logstash binary not found in path #{@logstash_home}" unless File.file? @logstash_bin
     end
-
+    
+    @application_settings_file = File.join(@logstash_home, LS_CONFIG_FILE)
     @monitoring_api = MonitoringAPI.new
   end
 
@@ -45,6 +53,14 @@ def alive?
       @process.alive?
     end
   end
+  
+  def exited?
+    @process.exited?
+  end
+  
+  def exit_code
+    @process.exit_code
+  end  
 
   # Starts a LS process in background with a given config file
   # and shuts it down after input is completely processed
@@ -87,10 +103,11 @@ def write_to_stdin(input)
   end
 
   # Spawn LS as a child process
-  def spawn_logstash(cli_arg, value)
-    puts "Starting Logstash #{@logstash_bin} #{cli_arg} #{value}"
+  def spawn_logstash(*args)
+    puts "Starting Logstash #{@logstash_bin} #{args}" 
     Bundler.with_clean_env do
-      @process = ChildProcess.build(@logstash_bin, cli_arg, value)
+      @process = ChildProcess.build(@logstash_bin, *args)
+      @env_variables.map { |k, v|  @process.environment[k] = v} unless @env_variables.nil?
       @process.io.inherit!
       @process.start
       wait_for_logstash
@@ -135,5 +152,23 @@ def wait_for_logstash
       tries -= 1
     end
   end
-
+  
+  # this method only overwrites existing config with new config
+  # it does not assume that LS pipeline is fully reloaded after a 
+  # config change. It is up to the caller to validate that.
+  def reload_config(initial_config_file, reload_config_file)
+    FileUtils.cp(reload_config_file, initial_config_file)
+  end  
+  
+  def get_version
+    `#{@logstash_bin} --version`
+  end
+  
+  def get_version_yml
+    LS_VERSION_FILE
+  end   
+  
+  def process_id
+    @process.pid
+  end
 end
diff --git a/qa/integration/services/monitoring_api.rb b/qa/integration/services/monitoring_api.rb
index 291980f1bb4..27ef78b1611 100644
--- a/qa/integration/services/monitoring_api.rb
+++ b/qa/integration/services/monitoring_api.rb
@@ -21,5 +21,10 @@ def version
     r = JSON.parse(response.body.read)
     r["version"]
   end
+  
+  def node_info
+    resp = Manticore.get("http://localhost:9600/_node").body
+    JSON.parse(resp)
+  end
 
 end
diff --git a/qa/integration/specs/01_logstash_bin_smoke_spec.rb b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
new file mode 100644
index 00000000000..3fa9e3faf02
--- /dev/null
+++ b/qa/integration/specs/01_logstash_bin_smoke_spec.rb
@@ -0,0 +1,57 @@
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require_relative '../services/logstash_service'
+require_relative '../framework/helpers'
+require "logstash/devutils/rspec/spec_helper"
+require "yaml"
+
+describe "Test Logstash instance" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+    # used in multiple LS tests
+    @ls1 = @fixture.get_service("logstash")
+    @ls2 = LogstashService.new(@fixture.settings)
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+  
+  after(:each) {
+    @ls1.teardown
+    @ls2.teardown
+  }
+  
+  let(:num_retries) { 10 }
+  let(:config1) { config_to_temp_file(@fixture.config("root", { :port => random_port })) }
+  let(:config2) { config_to_temp_file(@fixture.config("root", { :port => random_port })) }
+
+  it "can start the embedded http server on default port 9600" do
+    @ls1.start_with_stdin
+    try(num_retries) do
+      expect(is_port_open?(9600)).to be true
+    end
+  end
+  
+  it "multiple of them can be started on the same box with automatically trying different ports for HTTP server" do
+    @ls1.spawn_logstash("-f", config1)
+    try(num_retries) do
+      expect(is_port_open?(9600)).to be true
+    end
+
+    puts "will try to start the second LS instance on 9601"
+
+    # bring up new LS instance
+    @ls2.spawn_logstash("-f", config2)
+    try(20) do
+      expect(is_port_open?(9601)).to be true
+    end
+
+    expect(@ls1.process_id).not_to eq(@ls2.process_id)
+  end
+  
+  it "gets the right version when asked" do
+    expected = YAML.load_file(LogstashService::LS_VERSION_FILE)
+    expect(@ls1.get_version.strip).to eq("logstash #{expected['logstash']}")
+  end
+end    
\ No newline at end of file
diff --git a/qa/integration/specs/env_variables_config_spec.rb b/qa/integration/specs/env_variables_config_spec.rb
new file mode 100644
index 00000000000..801ad5179b6
--- /dev/null
+++ b/qa/integration/specs/env_variables_config_spec.rb
@@ -0,0 +1,48 @@
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require_relative '../services/logstash_service'
+require_relative '../framework/helpers'
+require "logstash/devutils/rspec/spec_helper"
+
+describe "Test Logstash configuration" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+  
+  let(:num_retries) { 10 }
+  let(:test_tcp_port) { random_port }
+  let(:test_tag) { "environment_variables_are_evil" }
+  let(:test_path) { Stud::Temporary.directory }
+  let(:sample_data) { '74.125.176.147 - - [11/Sep/2014:21:50:37 +0000] "GET /?flav=rss20 HTTP/1.1" 200 29941 "-" "FeedBurner/1.0 (http://www.FeedBurner.com)"' }
+
+  it "expands environment variables in all plugin blocks" do
+    # set ENV variables before starting the service
+    test_env = {}
+    test_env["TEST_ENV_TCP_PORT"] = "#{test_tcp_port}"
+    test_env["TEST_ENV_TAG"] = test_tag
+    test_env["TEST_ENV_PATH"] = test_path
+    
+    logstash_service = @fixture.get_service("logstash")
+    logstash_service.env_variables = test_env
+    logstash_service.start_background(@fixture.config)
+    # check if TCP port env variable was resolved
+    try(num_retries) do
+      expect(is_port_open?(test_tcp_port)).to be true
+    end
+    
+    #send data and make sure all env variables are expanded by checking each stage
+    send_data(test_tcp_port, sample_data)
+    output_file = File.join(test_path, "logstash_env_test.log")
+    try(num_retries) do
+      expect(File.exists?(output_file)).to be true
+    end
+    # should have created the file using env variable with filters adding a tag based on env variable
+    try(num_retries) do
+      expect(IO.read(output_file).gsub("\n", "")).to eq("#{sample_data} blah,environment_variables_are_evil")
+    end
+  end
+end  
\ No newline at end of file
diff --git a/qa/integration/specs/es_output_how_spec.rb b/qa/integration/specs/es_output_how_spec.rb
index db0a723320e..da1916f52bb 100644
--- a/qa/integration/specs/es_output_how_spec.rb
+++ b/qa/integration/specs/es_output_how_spec.rb
@@ -2,7 +2,7 @@
 require_relative '../framework/settings'
 require_relative '../services/logstash_service'
 
-describe "a config which indexes data into Elasticsearch" do
+describe "Test Elasticsearch output" do
 
   before(:all) {
     @fixture = Fixture.new(__FILE__)
@@ -14,16 +14,27 @@
     @fixture.teardown
   }
 
-  it "can ingest 300K log lines" do
+  it "can ingest 37K log lines of sample apache logs" do
     logstash_service = @fixture.get_service("logstash")
     es_service = @fixture.get_service("elasticsearch")
-    puts "Ingesting 37 apache log lines to ES."
     logstash_service.start_with_input(@fixture.config, @fixture.input)
     es_client = es_service.get_client
     # now we test if all data was indexed by ES, but first refresh manually
     es_client.indices.refresh
     result = es_client.search(index: 'logstash-*', size: 0, q: '*')
     expect(result["hits"]["total"]).to eq(37)
+    
+    # randomly checked for results and structured fields
+    result = es_client.search(index: 'logstash-*', size: 1, q: 'dynamic')
+    expect(result["hits"]["total"]).to eq(1)
+    s = result["hits"]["hits"][0]["_source"]
+    expect(s["bytes"]).to eq(18848)
+    expect(s["response"]).to eq(200)
+    expect(s["clientip"]).to eq("213.113.233.227")
+    expect(s["geoip"]["longitude"]).to eq(12.9443)
+    expect(s["geoip"]["latitude"]).to eq(56.1357)
+    expect(s["verb"]).to eq("GET")
+    expect(s["useragent"]["os"]).to eq("Windows 7")
   end
 
 end
diff --git a/qa/integration/specs/kafka_input_spec.rb b/qa/integration/specs/kafka_input_spec.rb
index e0ce8dbd2ef..dc2d371ae8d 100644
--- a/qa/integration/specs/kafka_input_spec.rb
+++ b/qa/integration/specs/kafka_input_spec.rb
@@ -3,7 +3,7 @@
 require_relative '../services/logstash_service'
 require "rspec/wait"
 
-describe "Kafka Input" do
+describe "Test Kafka Input" do
   let(:timeout_seconds) { 30 }
   before(:all) {
     @fixture = Fixture.new(__FILE__)
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 66028bb983c..90d16cbfeaf 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -3,7 +3,7 @@
 require_relative '../services/logstash_service'
 require "logstash/devutils/rspec/spec_helper"
 
-describe "Monitoring API" do
+describe "Test Monitoring API" do
   before(:all) {
     @fixture = Fixture.new(__FILE__)
   }
diff --git a/qa/integration/specs/reload_config_spec.rb b/qa/integration/specs/reload_config_spec.rb
new file mode 100644
index 00000000000..530e75a2a7f
--- /dev/null
+++ b/qa/integration/specs/reload_config_spec.rb
@@ -0,0 +1,77 @@
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require_relative '../services/logstash_service'
+require_relative '../framework/helpers'
+require "logstash/devutils/rspec/spec_helper"
+require "socket"
+require "json"
+
+describe "Test Logstash service when config reload is enabled" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+  
+  let(:timeout_seconds) { 5 }
+  let(:initial_port) { random_port }
+  let(:reload_port) { random_port }
+  let(:retry_attempts) { 10 }
+  let(:output_file1) { Stud::Temporary.file.path }
+  let(:output_file2) { Stud::Temporary.file.path }
+  let(:sample_data) { '74.125.176.147 - - [11/Sep/2014:21:50:37 +0000] "GET /?flav=rss20 HTTP/1.1" 200 29941 "-" "FeedBurner/1.0 (http://www.FeedBurner.com)"' }
+  
+  let(:initial_config_file) { config_to_temp_file(@fixture.config("initial", { :port => initial_port, :file => output_file1 })) }
+  let(:reload_config_file) { config_to_temp_file(@fixture.config("reload", { :port => reload_port, :file => output_file2 })) }
+
+  it "can reload when changes are made to TCP port and grok pattern" do
+    logstash_service = @fixture.get_service("logstash")
+    logstash_service.spawn_logstash("-f", "#{initial_config_file}", "--config.reload.automatic", "true")
+    logstash_service.wait_for_logstash
+    wait_for_port(initial_port, retry_attempts)
+    
+    # try sending events with this
+    send_data(initial_port, sample_data)
+    Stud.try(retry_attempts.times, RSpec::Expectations::ExpectationNotMetError) do
+      expect(IO.read(output_file1).gsub("\n", "")).to eq(sample_data)
+    end
+    
+    # check metrics
+    result = logstash_service.monitoring_api.event_stats
+    expect(result["in"]).to eq(1)
+    expect(result["out"]).to eq(1)
+    
+    # do a reload
+    logstash_service.reload_config(initial_config_file, reload_config_file)
+
+    logstash_service.wait_for_logstash
+    wait_for_port(reload_port, retry_attempts)
+    
+    # make sure old socket is closed
+    expect(is_port_open?(initial_port)).to be false
+    
+    send_data(reload_port, sample_data)
+    Stud.try(retry_attempts.times, RSpec::Expectations::ExpectationNotMetError) do
+      expect(IO.read(output_file2).blank?).to be false
+    end
+    
+    # check metrics. It should be reset
+    result = logstash_service.monitoring_api.event_stats
+    expect(result["in"]).to eq(1)
+    expect(result["out"]).to eq(1)
+    
+    # check reload stats
+    reload_stats = logstash_service.monitoring_api.pipeline_stats["reloads"]
+    expect(reload_stats["successes"]).to eq(1)
+    expect(reload_stats["failures"]).to eq(0)
+    expect(reload_stats["last_success_timestamp"].blank?).to be false
+    expect(reload_stats["last_error"]).to eq(nil)
+    
+    # parse the results and validate
+    re = JSON.load(File.new(output_file2))
+    expect(re["clientip"]).to eq("74.125.176.147")
+    expect(re["response"]).to eq(200)
+  end
+end
\ No newline at end of file
diff --git a/qa/integration/specs/settings_spec.rb b/qa/integration/specs/settings_spec.rb
new file mode 100644
index 00000000000..e817c1a5d03
--- /dev/null
+++ b/qa/integration/specs/settings_spec.rb
@@ -0,0 +1,139 @@
+require_relative '../framework/fixture'
+require_relative '../framework/settings'
+require_relative '../services/logstash_service'
+require_relative '../framework/helpers'
+require "logstash/devutils/rspec/spec_helper"
+require "yaml"
+
+describe "Test Logstash instance whose default settings are overridden" do
+  before(:all) {
+    @fixture = Fixture.new(__FILE__)
+    @logstash_service = @fixture.get_service("logstash")
+  }
+
+  after(:all) {
+    @fixture.teardown
+  }
+  
+  before(:each) {
+    # backup the application settings file -- logstash.yml
+    FileUtils.cp(@logstash_service.application_settings_file, "#{@logstash_service.application_settings_file}.original")
+  }
+  
+  after(:each) {
+    @logstash_service.teardown
+    # restore the application settings file -- logstash.yml
+    FileUtils.mv("#{@logstash_service.application_settings_file}.original", @logstash_service.application_settings_file)
+  }
+
+  let(:num_retries) { 15 }
+  let(:test_port) { random_port }
+  let(:temp_dir) { Stud::Temporary.directory("logstash-settings-test") }
+  let(:tcp_config) { @fixture.config("root", { :port => test_port }) }
+  
+  def change_setting(name, value)
+    settings = {}
+    settings[name] = value
+    overwrite_settings(settings)
+  end
+  
+  def overwrite_settings(settings)
+    IO.write(@logstash_service.application_settings_file, settings.to_yaml)
+  end  
+  
+  it "should start with a new data dir" do
+    change_setting("path.data", temp_dir)
+    @logstash_service.spawn_logstash("-e", tcp_config)
+    # check LS is up and running with new data path
+    try(num_retries) do
+      expect(is_port_open?(test_port)).to be true
+    end
+  end
+  
+  it "should write logs to a new dir" do
+    change_setting("path.logs", temp_dir)
+    @logstash_service.spawn_logstash("-e", tcp_config)
+    # check LS is up and running with new data path
+    try(num_retries) do
+      expect(is_port_open?(test_port)).to be true
+    end
+    expect(File.exists?("#{temp_dir}/logstash-plain.log")).to be true
+  end
+  
+  it "should read config from the specified dir in logstash.yml" do
+    change_setting("path.config", temp_dir)
+    test_config_path = File.join(temp_dir, "test.config")
+    IO.write(test_config_path, tcp_config)
+    expect(File.exists?(test_config_path)).to be true
+    @logstash_service.spawn_logstash
+    # check LS is up and running with new data path
+    try(num_retries) do
+      expect(is_port_open?(test_port)).to be true
+    end
+  end
+  
+  it "should exit when config test_and_exit is set" do
+    s = {}
+    s["path.config"] = temp_dir
+    s["config.test_and_exit"] = true
+    s["path.logs"] = temp_dir
+    overwrite_settings(s)
+    test_config_path = File.join(temp_dir, "test.config")
+    IO.write(test_config_path, "#{tcp_config}")
+    expect(File.exists?(test_config_path)).to be true
+    @logstash_service.spawn_logstash
+    try(num_retries) do
+      expect(@logstash_service.exited?).to be true
+    end
+    expect(@logstash_service.exit_code).to eq(0)
+    
+    # now with bad config
+    IO.write(test_config_path, "#{tcp_config} filters {} ")
+    expect(File.exists?(test_config_path)).to be true
+    @logstash_service.spawn_logstash
+    try(num_retries) do
+      expect(@logstash_service.exited?).to be true
+    end
+    expect(@logstash_service.exit_code).to eq(1)
+  end
+  
+  it "change pipeline settings" do
+    s = {}
+    workers = 31
+    batch_size = 1250
+    s["pipeline.workers"] = workers
+    s["pipeline.batch.size"] = batch_size
+    overwrite_settings(s)
+    @logstash_service.spawn_logstash("-e", tcp_config)
+    @logstash_service.wait_for_logstash
+    # check LS is up and running with new data path
+    try do
+      expect(is_port_open?(test_port)).to be true
+    end
+    
+    # now check monitoring API to validate
+    node_info = @logstash_service.monitoring_api.node_info
+    expect(node_info["pipeline"]["workers"]).to eq(workers)
+    expect(node_info["pipeline"]["batch_size"]).to eq(batch_size)
+  end
+  
+  it "start on a different HTTP port" do
+    # default in 9600
+    http_port = random_port
+    change_setting("http.port", http_port)
+    @logstash_service.spawn_logstash("-e", tcp_config)
+    
+    try(num_retries) do
+      expect(is_port_open?(http_port)).to be true
+    end
+    # check LS is up and running with new data path
+    try(num_retries) do
+      expect(is_port_open?(test_port)).to be true
+    end
+    
+    resp = Manticore.get("http://localhost:#{http_port}/_node").body
+    node_info = JSON.parse(resp)
+    # should be default
+    expect(node_info["http_address"]).to eq("127.0.0.1:#{http_port}")
+  end
+end  
\ No newline at end of file
