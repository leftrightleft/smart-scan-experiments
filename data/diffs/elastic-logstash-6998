diff --git a/logstash-core/lib/logstash/bootstrap_check/persisted_queue_config.rb b/logstash-core/lib/logstash/bootstrap_check/persisted_queue_config.rb
new file mode 100644
index 00000000000..7d76500d6a4
--- /dev/null
+++ b/logstash-core/lib/logstash/bootstrap_check/persisted_queue_config.rb
@@ -0,0 +1,14 @@
+# encoding: utf-8
+require 'logstash/errors'
+
+module LogStash module BootstrapCheck
+    class PersistedQueueConfig
+      def self.check(settings)
+        return unless settings.get('queue.type') == 'persisted'
+        if settings.get('queue.page_capacity') > settings.get('queue.max_bytes')
+          raise LogStash::BootstrapCheckError,
+                'Invalid configuration, `queue.page_capacity` must be smaller or equal to `queue.max_bytes`'
+        end
+      end
+    end
+end end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 586f46cd904..00828e2ff23 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -20,9 +20,10 @@
 require "logstash/settings"
 require "logstash/version"
 require "logstash/plugins/registry"
-require "logstash/bootstrap_check/default_config"
 require "logstash/bootstrap_check/bad_java"
 require "logstash/bootstrap_check/bad_ruby"
+require "logstash/bootstrap_check/default_config"
+require "logstash/bootstrap_check/persisted_queue_config"
 require "set"
 
 java_import 'org.logstash.FileLockFactory'
@@ -52,7 +53,8 @@ class LogStash::Runner < Clamp::StrictCommand
   DEFAULT_BOOTSTRAP_CHECKS = [
       LogStash::BootstrapCheck::BadRuby,
       LogStash::BootstrapCheck::BadJava,
-      LogStash::BootstrapCheck::DefaultConfig
+      LogStash::BootstrapCheck::DefaultConfig,
+      LogStash::BootstrapCheck::PersistedQueueConfig
   ]
 
   # Node Settings
diff --git a/logstash-core/spec/logstash/bootstrap_check/persisted_queue_config_spec.rb b/logstash-core/spec/logstash/bootstrap_check/persisted_queue_config_spec.rb
new file mode 100644
index 00000000000..6fc33509015
--- /dev/null
+++ b/logstash-core/spec/logstash/bootstrap_check/persisted_queue_config_spec.rb
@@ -0,0 +1,23 @@
+require "spec_helper"
+require "tmpdir"
+require "logstash/bootstrap_check/persisted_queue_config"
+
+describe LogStash::BootstrapCheck::PersistedQueueConfig do
+
+  context("when persisted queues are enabled") do
+    let(:settings) do
+      settings = LogStash::SETTINGS.dup
+      settings.set_value("queue.type", "persisted")
+      settings.set_value("queue.page_capacity", 1024)
+      settings.set_value("path.queue", ::File.join(Dir.tmpdir, "some/path"))
+      settings
+    end
+
+    context("and 'queue.max_bytes' is set to a value less than the value of 'queue.page_capacity'") do
+      it "should throw" do
+        settings.set_value("queue.max_bytes", 512)
+        expect { LogStash::BootstrapCheck::PersistedQueueConfig.check(settings) }.to raise_error
+      end
+    end
+  end
+end
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/FsUtil.java b/logstash-core/src/main/java/org/logstash/ackedqueue/FsUtil.java
new file mode 100644
index 00000000000..bb8cf5fdd2a
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/FsUtil.java
@@ -0,0 +1,47 @@
+package org.logstash.ackedqueue;
+
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * File System Utility Methods.
+ */
+public final class FsUtil {
+
+    private FsUtil() {
+    }
+
+    /**
+     * Checks if the request number of bytes of free disk space are available under the given
+     * path.
+     * @param path Directory to check
+     * @param size Bytes of free space requested
+     * @return True iff the
+     * @throws IOException on failure to determine free space for given path's partition
+     */
+    public static boolean hasFreeSpace(final String path, final long size) throws IOException {
+        final File[] partitions = File.listRoots();
+        File location = new File(path).getCanonicalFile();
+        boolean found = false;
+        while (!found) {
+            for (final File partition : partitions) {
+                if (partition.equals(location)) {
+                    found = true;
+                    break;
+                }
+            }
+            if (!found) {
+                location = location.getParentFile();
+                if (location == null) {
+                    throw new IllegalStateException(
+                        String.format(
+                            "Unable to determine the partition that contains '%s'.", path
+                        )
+                    );
+                }
+            }
+        }
+        return location.getFreeSpace() >= size;
+    }
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index 00dda4704dc..0bc3012c5fe 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -24,7 +24,6 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-
 // TODO: Notes
 //
 // - time-based fsync
@@ -181,12 +180,13 @@ public void open() throws IOException {
 
                 newCheckpointedHeadpage(headPageNum);
                 this.closed.set(false);
+                this.ensureDiskAvailable(this.maxBytes);
 
                 return;
             }
 
+            long diskNeeded = this.maxBytes;
             // at this point we have a head checkpoint to figure queue recovery
-
             // reconstruct all tail pages state upto but excluding the head page
             for (int pageNum = headCheckpoint.getFirstUnackedPageNum(); pageNum < headCheckpoint.getPageNum(); pageNum++) {
 
@@ -197,7 +197,7 @@ public void open() throws IOException {
 
                 PageIO pageIO = this.pageIOFactory.build(pageNum, this.pageCapacity, this.dirPath);
                 pageIO.open(cp.getMinSeqNum(), cp.getElementCount());
-
+                diskNeeded -= pageIO.getHead();
                 add(cp, new TailPage(cp, this, pageIO));
             }
 
@@ -208,6 +208,7 @@ public void open() throws IOException {
 
             PageIO pageIO = this.pageIOFactory.build(headCheckpoint.getPageNum(), this.pageCapacity, this.dirPath);
             pageIO.recover(); // optimistically recovers the head page data file and set minSeqNum and elementCount to the actual read/recovered data
+            ensureDiskAvailable(diskNeeded - (long) pageIO.getHead());
 
             if (pageIO.getMinSeqNum() != headCheckpoint.getMinSeqNum() || pageIO.getElementCount() != headCheckpoint.getElementCount()) {
                 // the recovered page IO shows different minSeqNum or elementCount than the checkpoint, use the page IO attributes
@@ -259,6 +260,14 @@ public void open() throws IOException {
         }
     }
 
+    private void ensureDiskAvailable(final long diskNeeded) throws IOException {
+        if (!FsUtil.hasFreeSpace(this.dirPath, diskNeeded)) {
+            throw new IOException(
+                "Not enough free disk space available to allocate persisted queue."
+            );
+        }
+    }
+
     // add a read tail page into this queue structures but also verify that this tail page
     // is not fully acked in which case it will be purged
     private void add(Checkpoint checkpoint, TailPage page) throws IOException {
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/AbstractByteBufferPageIO.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/AbstractByteBufferPageIO.java
index 4c97da20d98..c1c6e1c5448 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/AbstractByteBufferPageIO.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/AbstractByteBufferPageIO.java
@@ -44,6 +44,15 @@ public static class PageIOInvalidVersionException extends IOException {
     private CRC32 checkSummer;
     private final List<Integer> offsetMap; // has to be extendable
 
+    // we don't have different versions yet so simply check if the version is VERSION_ONE for basic integrity check
+    // and if an unexpected version byte is read throw PageIOInvalidVersionException
+    public static void validateVersion(byte version) throws PageIOInvalidVersionException {
+        if (version != VERSION_ONE) {
+            throw new PageIOInvalidVersionException(String
+                .format("Expected page version=%d but found version=%d", VERSION_ONE, version));
+        }
+    }
+
     public AbstractByteBufferPageIO(int pageNum, int capacity) {
         this.minSeqNum = 0;
         this.elementCount = 0;
@@ -118,15 +127,6 @@ public void recover() throws IOException {
         }
     }
 
-    // we don't have different versions yet so simply check if the version is VERSION_ONE for basic integrity check
-    // and if an unexpected version byte is read throw PageIOInvalidVersionException
-    private static void validateVersion(byte version) throws PageIOInvalidVersionException {
-        if (version != VERSION_ONE) {
-            throw new PageIOInvalidVersionException(String
-                .format("Expected page version=%d but found version=%d", VERSION_ONE, version));
-        }
-    }
-
     // read and validate next element at page head
     // @param verifyChecksum if true the actual element data will be read + checksumed and compared to written checksum
     private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws PageIOInvalidElementException {
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/FsUtilTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/FsUtilTest.java
new file mode 100644
index 00000000000..53945f08566
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/FsUtilTest.java
@@ -0,0 +1,40 @@
+package org.logstash.ackedqueue;
+
+import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+/**
+ * Tests for {@link FsUtil}.
+ */
+public final class FsUtilTest {
+
+    @Rule
+    public final TemporaryFolder temp = new TemporaryFolder();
+
+    /**
+     * {@link FsUtil#hasFreeSpace(String, long)} should return true when asked for 1kb of free
+     * space in a subfolder of the system's TEMP location.
+     */
+    @Test
+    public void trueIfEnoughSpace() throws Exception {
+        MatcherAssert.assertThat(
+            FsUtil.hasFreeSpace(temp.newFolder().getAbsolutePath(), 1024L),
+            CoreMatchers.is(true)
+        );
+    }
+
+    /**
+     * {@link FsUtil#hasFreeSpace(String, long)} should return false when asked for
+     * {@link Long#MAX_VALUE} of free space in a subfolder of the system's TEMP location.
+     */
+    @Test
+    public void falseIfNotEnoughSpace() throws Exception {
+        MatcherAssert.assertThat(
+            FsUtil.hasFreeSpace(temp.newFolder().getAbsolutePath(), Long.MAX_VALUE),
+            CoreMatchers.is(false)
+        );
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
index f6d6fee429e..59c0635ecbc 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
@@ -699,6 +699,19 @@ public void fullyAckedHeadPageBeheadingTest() throws IOException {
         }
     }
 
+    @Test
+    public void getsPersistedByteSizeCorrectly() throws Exception {
+        Settings settings = TestSettings.persistedQueueSettings(100, dataPath);
+        try (Queue queue = new Queue(settings)) {
+            queue.open();
+            for (int i = 0; i < 50; ++i) {
+                queue.write(new StringElement("foooo"));
+            }
+            queue.ensurePersistedUpto(queue.nextSeqNum());
+            assertThat(queue.getPersistedByteSize(), is(1063L));
+        }
+    }
+
     @Test
     public void getsPersistedByteSizeCorrectlyForUnopened() throws Exception {
         Settings settings = TestSettings.persistedQueueSettings(100, dataPath);
@@ -706,4 +719,14 @@ public void getsPersistedByteSizeCorrectlyForUnopened() throws Exception {
             assertThat(q.getPersistedByteSize(), is(0L));
         }
     }
+
+    @Test(expected = IOException.class)
+    public void throwsWhenNotEnoughDiskFree() throws Exception {
+        Settings settings = SettingsImpl.builder(
+            TestSettings.persistedQueueSettings(100, dataPath)
+        ).queueMaxBytes(Long.MAX_VALUE).build();
+        try (Queue queue = new Queue(settings)) {
+            queue.open();
+        }
+    }
 }
