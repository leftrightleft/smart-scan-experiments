diff --git a/Gemfile.template b/Gemfile.template
index f7b5e56ae1d..8ad97c8c250 100644
--- a/Gemfile.template
+++ b/Gemfile.template
@@ -4,123 +4,25 @@
 source "https://rubygems.org"
 gem "logstash-core", :path => "./logstash-core"
 gem "logstash-core-plugin-api", :path => "./logstash-core-plugin-api"
+gem "atomic", "~> 1"
+gem "builder", "~> 3"
+gem "json", "~> 1.8.3"
 gem "paquet", "~> 0.2"
+gem "pleaserun", "~>0.0.28"
+gem "rake", "~> 12"
 gem "ruby-progressbar", "~> 1"
-gem "builder", "~> 3"
-gem "ci_reporter_rspec", "~> 1", :group => :development
-gem "rspec", "~> 3.5", :group => :development
-gem "logstash-devutils", "~> 1", :group => :development
-gem "benchmark-ips", :group => :development
-gem "octokit", "~> 4", :group => :build
-gem "stud", "~> 0.0.22", :group => :build
-gem "rack-test", :require => "rack/test", :group => :development
-gem "fpm", "~> 1.3.3", :group => :build
 gem "childprocess", "~> 0.9", :group => :build
-gem "rubyzip", "~> 1", :group => :build
+gem "fpm", "~> 1.3.3", :group => :build
 gem "gems", "~> 1", :group => :build
-gem "flores", "~> 0.0.6", :group => :development
-gem "atomic", "~> 1"
+gem "octokit", "~> 4", :group => :build
+gem "rubyzip", "~> 1", :group => :build
+gem "stud", "~> 0.0.22", :group => :build
 gem "belzebuth", :group => :development
+gem "benchmark-ips", :group => :development
+gem "ci_reporter_rspec", "~> 1", :group => :development
+gem "flores", "~> 0.0.6", :group => :development
 gem "json-schema", "~> 2", :group => :development
-gem "pleaserun", "~>0.0.28"
-gem "rake", "~> 12"
+gem "logstash-devutils", "~> 1", :group => :development
+gem "rack-test", :require => "rack/test", :group => :development
+gem "rspec", "~> 3.5", :group => :development
 gem "webmock", "~> 3", :group => :development
-gem "logstash-codec-cef"
-gem "logstash-codec-collectd"
-gem "logstash-codec-dots"
-gem "logstash-codec-edn"
-gem "logstash-codec-edn_lines"
-gem "logstash-codec-es_bulk"
-gem "logstash-codec-fluent"
-gem "logstash-codec-graphite"
-gem "logstash-codec-json"
-gem "logstash-codec-json_lines"
-gem "logstash-codec-line"
-gem "logstash-codec-msgpack"
-gem "logstash-codec-multiline"
-gem "logstash-codec-netflow"
-gem "logstash-codec-plain"
-gem "logstash-codec-rubydebug"
-gem "logstash-filter-aggregate"
-gem "logstash-filter-anonymize"
-gem "logstash-filter-cidr"
-gem "logstash-filter-clone"
-gem "logstash-filter-csv"
-gem "logstash-filter-date"
-gem "logstash-filter-de_dot"
-gem "logstash-filter-dissect"
-gem "logstash-filter-dns"
-gem "logstash-filter-drop"
-gem "logstash-filter-elasticsearch"
-gem "logstash-filter-fingerprint"
-gem "logstash-filter-geoip"
-gem "logstash-filter-grok"
-gem "logstash-filter-http"
-gem "logstash-filter-jdbc_static"
-gem "logstash-filter-jdbc_streaming"
-gem "logstash-filter-json"
-gem "logstash-filter-kv"
-gem "logstash-filter-memcached"
-gem "logstash-filter-metrics"
-gem "logstash-filter-mutate"
-gem "logstash-filter-ruby"
-gem "logstash-filter-sleep"
-gem "logstash-filter-split"
-gem "logstash-filter-syslog_pri"
-gem "logstash-filter-throttle"
-gem "logstash-filter-translate"
-gem "logstash-filter-truncate"
-gem "logstash-filter-urldecode"
-gem "logstash-filter-useragent"
-gem "logstash-filter-xml"
-gem "logstash-input-beats"
-gem "logstash-input-azure_event_hubs"
-gem "logstash-input-dead_letter_queue"
-gem "logstash-input-elasticsearch"
-gem "logstash-input-exec"
-gem "logstash-input-file"
-gem "logstash-input-ganglia"
-gem "logstash-input-gelf"
-gem "logstash-input-generator"
-gem "logstash-input-graphite"
-gem "logstash-input-heartbeat"
-gem "logstash-input-http"
-gem "logstash-input-http_poller"
-gem "logstash-input-imap"
-gem "logstash-input-jdbc"
-gem "logstash-input-kafka"
-gem "logstash-input-pipe"
-gem "logstash-input-rabbitmq"
-gem "logstash-input-redis"
-gem "logstash-input-s3"
-gem "logstash-input-snmp"
-gem "logstash-input-snmptrap"
-gem "logstash-input-sqs"
-gem "logstash-input-stdin"
-gem "logstash-input-syslog"
-gem "logstash-input-tcp"
-gem "logstash-input-twitter"
-gem "logstash-input-udp"
-gem "logstash-input-unix"
-gem "logstash-output-elastic_app_search"
-gem "logstash-output-cloudwatch"
-gem "logstash-output-csv"
-gem "logstash-output-elasticsearch"
-gem "logstash-output-email"
-gem "logstash-output-file"
-gem "logstash-output-graphite"
-gem "logstash-output-http"
-gem "logstash-output-kafka"
-gem "logstash-output-lumberjack"
-gem "logstash-output-nagios"
-gem "logstash-output-null"
-gem "logstash-output-pipe"
-gem "logstash-output-rabbitmq"
-gem "logstash-output-redis"
-gem "logstash-output-s3"
-gem "logstash-output-sns"
-gem "logstash-output-sqs"
-gem "logstash-output-stdout"
-gem "logstash-output-tcp"
-gem "logstash-output-udp"
-gem "logstash-output-webhdfs"
diff --git a/README.md b/README.md
index 02776d80438..572c175edf1 100644
--- a/README.md
+++ b/README.md
@@ -65,8 +65,8 @@ Logstash core will continue to exist under this repository and all related issue
 
 ### Prerequisites
 
-* Install JDK version 8. Make sure to set the `JAVA_HOME` environment variable to the path to your JDK installation directory. For example `set JAVA_HOME=<JDK_PATH>`
-* Install JRuby 9.1.x It is recommended to use a Ruby version manager such as [RVM](https://rvm.io/) or [rbenv](https://github.com/sstephenson/rbenv).
+* Install JDK version 8 or 11. Make sure to set the `JAVA_HOME` environment variable to the path to your JDK installation directory. For example `set JAVA_HOME=<JDK_PATH>`
+* Install JRuby 9.2.x It is recommended to use a Ruby version manager such as [RVM](https://rvm.io/) or [rbenv](https://github.com/sstephenson/rbenv).
 * Install `rake` and `bundler` tool using `gem install rake` and `gem install bundler` respectively.
 
 ### RVM install (optional)
diff --git a/build.gradle b/build.gradle
index 4738de74346..f3a13e0a5c1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -253,7 +253,7 @@ task installTestGems(dependsOn: assemblyDeps) {
   doLast {
     rubyGradleUtils.gem("rake", "12.3.1", "${projectDir}/vendor/bundle/jruby/2.5.0")
     rubyGradleUtils.gem("json", "1.8.6", "${projectDir}/vendor/bundle/jruby/2.5.0")
-    rubyGradleUtils.rake('test:install-core')
+    rubyGradleUtils.rake('plugin:install-development-dependencies')
   }
 }
 
diff --git a/docs/static/getting-started-with-logstash.asciidoc b/docs/static/getting-started-with-logstash.asciidoc
index a8b57c70ac1..0354ad260f8 100644
--- a/docs/static/getting-started-with-logstash.asciidoc
+++ b/docs/static/getting-started-with-logstash.asciidoc
@@ -15,7 +15,7 @@ This section includes the following topics:
 [[installing-logstash]]
 === Installing Logstash
 
-NOTE: Logstash requires Java 8. Java 9 is not supported. Use the
+NOTE: Logstash requires Java 8 or Java 11. Use the
 http://www.oracle.com/technetwork/java/javase/downloads/index.html[official Oracle distribution] or an open-source
 distribution such as http://openjdk.java.net/[OpenJDK].
 
@@ -27,9 +27,11 @@ java -version
 On systems with Java installed, this command produces output similar to the following:
 
 [source,shell]
-java version "1.8.0_65"
-Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
-Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)
+-----
+java version "11.0.1" 2018-10-16 LTS
+Java(TM) SE Runtime Environment 18.9 (build 11.0.1+13-LTS)
+Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode)
+-----
 
 On some Linux systems, you may also need to have the `JAVA_HOME` environment
 exported before attempting the install, particularly if you installed Java from
diff --git a/docs/static/pipeline-pipeline-config.asciidoc b/docs/static/pipeline-pipeline-config.asciidoc
index 9148fc68e8b..aa591fa9e45 100644
--- a/docs/static/pipeline-pipeline-config.asciidoc
+++ b/docs/static/pipeline-pipeline-config.asciidoc
@@ -58,6 +58,9 @@ You can use the `pipeline` input and output to better organize code, streamline
 * <<forked-path-pattern>>
 * <<collector-pattern>>
 
+NOTE: These examples use `config.string` to illustrate the flows.
+You can also use configuration files for pipeline-to-pipeline communication.
+
 [[distributor-pattern]]
 ===== The distributor pattern
 
diff --git a/docs/static/reloading-config.asciidoc b/docs/static/reloading-config.asciidoc
index 1a16a379c9e..db225a10267 100644
--- a/docs/static/reloading-config.asciidoc
+++ b/docs/static/reloading-config.asciidoc
@@ -25,7 +25,7 @@ process running Logstash. For example:
 
 [source,shell]
 ----------------------------------
-kill -1 14175
+kill -SIGHUP 14175
 ----------------------------------
 
 Where 14175 is the ID of the process running Logstash.
diff --git a/lib/pluginmanager/templates/codec-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/codec-plugin/docs/index.asciidoc
new file mode 100644
index 00000000000..e9c5cbb80c4
--- /dev/null
+++ b/lib/pluginmanager/templates/codec-plugin/docs/index.asciidoc
@@ -0,0 +1,102 @@
+:plugin: example
+:type: codec
+// Update header with plugin name
+
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+
+[id="plugins-{type}s-{plugin}"]
+
+=== Example codec plugin
+
+include::{include_path}/plugin_header.asciidoc[]
+
+==== Description
+
+Add plugin description here
+
+// Format anchors and links to support generated ids for versioning
+// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
+// Sample link: <<plugins-{type}s-{plugin}-setting_name>>
+
+[id="plugins-{type}s-{plugin}-options"]
+==== Example Codec Configuration Options
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-a_setting_name>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-another_setting_name>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-setting_name_3>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-setting_name_4>> |<<number,number>>|No
+| <<plugins-{type}s-{plugin}-setting_name_5>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-setting_name_6>> |<<bytes,bytes>>|No
+| <<plugins-{type}s-{plugin}-setting_name_7>> |<<path,path>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-a_setting_name"]
+===== `a_setting_name` 
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-another_setting_name"]
+===== `another_setting_name` 
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_3"]
+===== `setting_name_3` 
+
+  * Value type is <<string,string>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_4"]
+===== `setting_name_4` 
+
+  * Value type is <<number,number>>
+  * Default value is `0`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_5"]
+===== `setting_name_5` 
+
+  * Value type is <<array,array>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_6"]
+===== `setting_name_6` 
+
+  * Value type is <<bytes,bytes>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_7"]
+===== `setting_name_7` 
+
+  * Value type is <<path,path>>
+  * Default value is {}
+
+Add description here
+
+// The full list of Value Types is here: 
+// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
diff --git a/lib/pluginmanager/templates/filter-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/filter-plugin/docs/index.asciidoc
new file mode 100644
index 00000000000..fca3730ac44
--- /dev/null
+++ b/lib/pluginmanager/templates/filter-plugin/docs/index.asciidoc
@@ -0,0 +1,87 @@
+:plugin: example
+:type: filter
+// Update header with plugin name
+
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+
+[id="plugins-{type}s-{plugin}"]
+
+=== Example filter plugin
+
+include::{include_path}/plugin_header.asciidoc[]
+
+==== Description
+
+Add plugin description here
+
+// Format anchors and links to support generated ids for versioning
+// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
+// Sample link: <<plugins-{type}s-{plugin}-setting_name>>
+
+[id="plugins-{type}s-{plugin}-options"]
+==== Example Filter Configuration Options
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-a_setting_name>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-another_setting_name>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-setting_name_3>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-setting_name_4>> |<<number,number>>|No
+| <<plugins-{type}s-{plugin}-setting_name_5>> |<<array,array>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-a_setting_name"]
+===== `a_setting_name` 
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-another_setting_name"]
+===== `another_setting_name` 
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_3"]
+===== `setting_name_3` 
+
+  * Value type is <<string,string>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_4"]
+===== `setting_name_4` 
+
+  * Value type is <<number,number>>
+  * Default value is `0`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_5"]
+===== `setting_name_5` 
+
+  * Value type is <<array,array>>
+  * Default value is {}
+
+Add description here
+
+// The full list of Value Types is here: 
+// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
+
+[id="plugins-{type}s-{plugin}-common-options"]
+include::{include_path}/{type}.asciidoc[]
diff --git a/lib/pluginmanager/templates/input-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/input-plugin/docs/index.asciidoc
new file mode 100644
index 00000000000..cc47ac158af
--- /dev/null
+++ b/lib/pluginmanager/templates/input-plugin/docs/index.asciidoc
@@ -0,0 +1,117 @@
+:plugin: example
+:type: input
+:default_codec: plain
+// Update header with plugin name and default codec
+
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+
+[id="plugins-{type}s-{plugin}"]
+
+=== Example input plugin
+
+include::{include_path}/plugin_header.asciidoc[]
+
+==== Description
+
+Add plugin description here
+
+// Format anchors and links to support generated ids for versioning
+// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
+// Sample link: <<plugins-{type}s-{plugin}-setting_name>>
+
+[id="plugins-{type}s-{plugin}-options"]
+==== Example Input Configuration Options
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-a_setting_name>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-another_setting_name>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-setting_name_3>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-setting_name_4>> |<<number,number>>|No
+| <<plugins-{type}s-{plugin}-setting_name_5>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-setting_name_6>> |<<bytes,bytes>>|No
+| <<plugins-{type}s-{plugin}-setting_name_7>> |<<path,path>>|No
+| <<plugins-{type}s-{plugin}-setting_name_8>> |<<password,password>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-a_setting_name"]
+===== `a_setting_name` 
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-another_setting_name"]
+===== `another_setting_name` 
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_3"]
+===== `setting_name_3` 
+
+  * Value type is <<string,string>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_4"]
+===== `setting_name_4` 
+
+  * Value type is <<number,number>>
+  * Default value is `0`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_5"]
+===== `setting_name_5` 
+
+  * Value type is <<array,array>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_6"]
+===== `setting_name_6` 
+
+  * Value type is <<bytes,bytes>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_7"]
+===== `setting_name_7` 
+
+  * Value type is <<path,path>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_8"]
+===== `setting_name_8` 
+
+  * Value type is <<password,password>>
+  * Default value is {}
+
+Add description here
+
+// The full list of Value Types is here: 
+// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
+
+[id="plugins-{type}s-{plugin}-common-options"]
+include::{include_path}/{type}.asciidoc[]
+
+:default_codec!:
diff --git a/lib/pluginmanager/templates/output-plugin/docs/index.asciidoc b/lib/pluginmanager/templates/output-plugin/docs/index.asciidoc
new file mode 100644
index 00000000000..623a89d9add
--- /dev/null
+++ b/lib/pluginmanager/templates/output-plugin/docs/index.asciidoc
@@ -0,0 +1,127 @@
+:plugin: example
+:type: output
+:default_codec: plain
+// Update header with plugin name and default codec
+
+///////////////////////////////////////////
+START - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+:version: %VERSION%
+:release_date: %RELEASE_DATE%
+:changelog_url: %CHANGELOG_URL%
+:include_path: ../../../../logstash/docs/include
+///////////////////////////////////////////
+END - GENERATED VARIABLES, DO NOT EDIT!
+///////////////////////////////////////////
+
+[id="plugins-{type}s-{plugin}"]
+
+=== Example output plugin
+
+include::{include_path}/plugin_header.asciidoc[]
+
+==== Description
+
+Add plugin description here
+
+// Format anchors and links to support generated ids for versioning
+// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
+// Sample link: <<plugins-{type}s-{plugin}-setting_name>>
+
+[id="plugins-{type}s-{plugin}-options"]
+==== Example Output Configuration Options
+
+[cols="<,<,<",options="header",]
+|=======================================================================
+|Setting |Input type|Required
+| <<plugins-{type}s-{plugin}-a_setting_name>> |<<boolean,boolean>>|No
+| <<plugins-{type}s-{plugin}-another_setting_name>> |<<hash,hash>>|No
+| <<plugins-{type}s-{plugin}-setting_name_3>> |<<string,string>>|No
+| <<plugins-{type}s-{plugin}-setting_name_4>> |<<number,number>>|No
+| <<plugins-{type}s-{plugin}-setting_name_5>> |<<array,array>>|No
+| <<plugins-{type}s-{plugin}-setting_name_6>> |<<bytes,bytes>>|No
+| <<plugins-{type}s-{plugin}-setting_name_7>> |<<path,path>>|No
+| <<plugins-{type}s-{plugin}-setting_name_8>> |<<password,password>>|No
+| <<plugins-{type}s-{plugin}-setting_name_9>> |<<uri,uri>>|No
+|=======================================================================
+
+[id="plugins-{type}s-{plugin}-a_setting_name"]
+===== `a_setting_name` 
+
+  * Value type is <<boolean,boolean>>
+  * Default value is `true`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-another_setting_name"]
+===== `another_setting_name` 
+
+  * Value type is <<hash,hash>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_3"]
+===== `setting_name_3` 
+
+  * Value type is <<string,string>>
+  * Default value is `{}`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_4"]
+===== `setting_name_4` 
+
+  * Value type is <<number,number>>
+  * Default value is `0`
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_5"]
+===== `setting_name_5` 
+
+  * Value type is <<array,array>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_6"]
+===== `setting_name_6` 
+
+  * Value type is <<bytes,bytes>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_7"]
+===== `setting_name_7` 
+
+  * Value type is <<path,path>>
+  * Default value is {}
+
+Add description here
+
+[id="plugins-{type}s-{plugin}-setting_name_8"]
+===== `setting_name_8` 
+
+  * Value type is <<password,password>>
+  * Default value is {}
+
+Add description here
+
+
+[id="plugins-{type}s-{plugin}-setting_name_9"]
+===== `setting_name_9` 
+
+  * Value type is <<uri,uri>>
+  * Default value is {}
+
+Add description here
+
+// The full list of Value Types is here: 
+// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
+
+[id="plugins-{type}s-{plugin}-common-options"]
+include::{include_path}/{type}.asciidoc[]
+
+:default_codec!:
diff --git a/logstash-core/src/main/java/co/elastic/logstash/api/PluginConfigSpec.java b/logstash-core/src/main/java/co/elastic/logstash/api/PluginConfigSpec.java
index 8d3abaf7a5d..375529c7603 100644
--- a/logstash-core/src/main/java/co/elastic/logstash/api/PluginConfigSpec.java
+++ b/logstash-core/src/main/java/co/elastic/logstash/api/PluginConfigSpec.java
@@ -95,6 +95,14 @@ public static PluginConfigSpec<Long> numSetting(final String name, final long de
         );
     }
 
+    public static PluginConfigSpec<Double> floatSetting(final String name, final double defaultValue) {
+        return new PluginConfigSpec<>(name, Double.class, defaultValue, false, false);
+    }
+
+    public static PluginConfigSpec<Double> floatSetting(final String name, final double defaultValue, boolean deprecated, boolean required) {
+        return new PluginConfigSpec<>(name, Double.class, defaultValue, deprecated, required);
+    }
+
     public static PluginConfigSpec<Long> numSetting(final String name, final long defaultValue, boolean deprecated, boolean required) {
         return new PluginConfigSpec<>(name, Long.class, defaultValue, deprecated, required);
     }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java b/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
index 6b802dba13d..f6907bc6517 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/ConfigurationImpl.java
@@ -39,6 +39,8 @@ public <T> T get(final PluginConfigSpec<T> configSpec) {
             Object o = rawSettings.get(configSpec.name());
             if (configSpec.type().isAssignableFrom(o.getClass())) {
                 return (T) o;
+            } else if (configSpec.type() == Double.class && o.getClass() == Long.class) {
+                return configSpec.type().cast(((Long)o).doubleValue());
             } else if (configSpec.type() == Codec.class && o instanceof String && pluginFactory != null) {
                 Codec codec = pluginFactory.buildDefaultCodec((String)o);
                 return configSpec.type().cast(codec);
@@ -69,5 +71,4 @@ public boolean contains(final PluginConfigSpec<?> configSpec) {
     public Collection<String> allKeys() {
         return rawSettings.keySet();
     }
-
 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/codecs/Dots.java b/logstash-core/src/main/java/org/logstash/plugins/codecs/Dots.java
new file mode 100644
index 00000000000..ae29056d874
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/codecs/Dots.java
@@ -0,0 +1,60 @@
+package org.logstash.plugins.codecs;
+
+import co.elastic.logstash.api.Codec;
+import co.elastic.logstash.api.Configuration;
+import co.elastic.logstash.api.Context;
+import co.elastic.logstash.api.Event;
+import co.elastic.logstash.api.LogstashPlugin;
+import co.elastic.logstash.api.PluginConfigSpec;
+
+import java.nio.ByteBuffer;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Map;
+import java.util.UUID;
+import java.util.function.Consumer;
+
+@LogstashPlugin(name = "jdots")
+public class Dots implements Codec {
+
+    private final String id;
+
+    public Dots(final Configuration configuration, final Context context) {
+        this();
+    }
+
+    private Dots() {
+        this.id = UUID.randomUUID().toString();
+    }
+
+    @Override
+    public void decode(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+        throw new UnsupportedOperationException("Cannot decode with the jdots codec");
+    }
+
+    @Override
+    public void flush(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsumer) {
+    }
+
+    @Override
+    public boolean encode(Event event, ByteBuffer buffer) throws EncodeException {
+        buffer.putChar('.');
+        buffer.flip();
+        return true;
+    }
+
+    @Override
+    public Codec cloneCodec() {
+        return new Dots();
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public String getId() {
+        return id;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/inputs/Generator.java b/logstash-core/src/main/java/org/logstash/plugins/inputs/Generator.java
new file mode 100644
index 00000000000..5f76eacfa93
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/plugins/inputs/Generator.java
@@ -0,0 +1,202 @@
+package org.logstash.plugins.inputs;
+
+import co.elastic.logstash.api.Configuration;
+import co.elastic.logstash.api.Context;
+import co.elastic.logstash.api.Input;
+import co.elastic.logstash.api.LogstashPlugin;
+import co.elastic.logstash.api.PluginConfigSpec;
+import co.elastic.logstash.api.PluginHelper;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+
+@LogstashPlugin(name = "java_generator")
+public class Generator implements Input {
+
+    public static final PluginConfigSpec<Long> COUNT_CONFIG =
+            PluginConfigSpec.numSetting("count", 0);
+    public static final PluginConfigSpec<List<Object>> LINES_CONFIG =
+            PluginConfigSpec.arraySetting("lines");
+    public static final PluginConfigSpec<String> MESSAGE_CONFIG =
+            PluginConfigSpec.stringSetting("message", "Hello world!");
+    public static final PluginConfigSpec<Long> THREADS_CONFIG =
+            PluginConfigSpec.numSetting("threads", 1);
+    public static final PluginConfigSpec<Double> EPS_CONFIG =
+            PluginConfigSpec.floatSetting("eps", 0);
+
+    private final String hostname;
+    private final long count;
+    private final double eps;
+    private String id;
+    private long threads;
+    private volatile boolean stopRequested = false;
+    private CountDownLatch[] countDownLatches;
+    private String[] lines;
+    private int[] linesIndex;
+    private long[] sequence;
+    private ScheduledFuture<?>[] futures;
+    private List<Map<String, Object>> events;
+
+    /**
+     * Required constructor.
+     *
+     * @param id            Plugin id
+     * @param configuration Logstash Configuration
+     * @param context       Logstash Context
+     */
+    public Generator(final String id, final Configuration configuration, final Context context) {
+        this.id = id;
+        this.count = configuration.get(COUNT_CONFIG);
+        this.eps = configuration.get(EPS_CONFIG);
+        this.threads = configuration.get(THREADS_CONFIG);
+        if (this.threads < 1) {
+            throw new IllegalStateException("May not specify fewer than one generator thread");
+        }
+
+        String host;
+        try {
+            host = InetAddress.getLocalHost().getHostName();
+        } catch (UnknownHostException e) {
+            host = "[unknownHost]";
+        }
+        this.hostname = host;
+
+        // specifying "lines" will override "message"
+        List<Object> linesConfig = configuration.get(LINES_CONFIG);
+        if (linesConfig != null) {
+            lines = new String[linesConfig.size()];
+            for (int k = 0; k < linesConfig.size(); k++) {
+                lines[k] = (String) linesConfig.get(k);
+            }
+
+        } else {
+            lines = new String[]{configuration.get(MESSAGE_CONFIG)};
+        }
+    }
+
+    @Override
+    public void start(Consumer<Map<String, Object>> writer) {
+        if (eps > 0) {
+            startThrottledGenerator(writer);
+        } else {
+            startUnthrottledGenerator(writer);
+        }
+    }
+
+    private void startUnthrottledGenerator(Consumer<Map<String, Object>> writer) {
+        sequence = new long[(int) threads];
+        countDownLatches = new CountDownLatch[(int) threads];
+        events = new ArrayList<>();
+        linesIndex = new int[(int) threads];
+
+        for (int k = 0; k < threads; k++) {
+            Map<String, Object> event = new HashMap<>();
+            event.put("hostname", hostname);
+            event.put("thread_number", k);
+            events.add(event);
+            countDownLatches[k] = new CountDownLatch(1);
+            if (k > 0) {
+                final int finalK = k;
+                Thread t = new Thread(() -> {
+                    while (runGenerator(writer, finalK, () -> countDownLatches[finalK].countDown())) {
+                    }
+                });
+                t.setName("generator_" + getId() + "_" + k);
+                t.start();
+            }
+        }
+
+        // run first generator on this thread
+        while (runGenerator(writer, 0, () -> countDownLatches[0].countDown())) {}
+    }
+
+    private void startThrottledGenerator(Consumer<Map<String, Object>> writer) {
+        ScheduledExecutorService ses = Executors.newScheduledThreadPool((int) threads);
+        int delayMilli = (int) (1000.0 / eps);
+        sequence = new long[(int) threads];
+        countDownLatches = new CountDownLatch[(int) threads];
+        futures = new ScheduledFuture<?>[(int) threads];
+        events = new ArrayList<>();
+        linesIndex = new int[(int) threads];
+        for (int k = 0; k < threads; k++) {
+            Map<String, Object> event = new HashMap<>();
+            event.put("hostname", hostname);
+            event.put("thread_number", k);
+            events.add(event);
+            countDownLatches[k] = new CountDownLatch(1);
+            final int finalk = k;
+            futures[k] = ses.scheduleAtFixedRate(() -> runGenerator(writer, finalk, () -> {
+                        countDownLatches[finalk].countDown();
+                        futures[finalk].cancel(false);
+                    }),0, delayMilli, TimeUnit.MILLISECONDS);
+        }
+
+        boolean finished = false;
+        while (!stopRequested && !finished) {
+            try {
+                Thread.sleep(1000);
+                boolean allCancelled = true;
+                for (int k = 0; k < threads; k++) {
+                    allCancelled = allCancelled && futures[k].isCancelled();
+                }
+                if (allCancelled) {
+                    finished = true;
+                    ses.shutdownNow();
+                }
+            } catch (InterruptedException ex) {
+                // do nothing
+            }
+        }
+    }
+
+    private boolean runGenerator(Consumer<Map<String, Object>> writer, int thread, Runnable finishAction) {
+        if (stopRequested || ((count > 0) && (sequence[thread] >= count))) {
+            finishAction.run();
+            return false;
+        } else {
+            events.get(thread).put("sequence", sequence[thread]);
+            events.get(thread).put("message", lines[linesIndex[thread]++]);
+            writer.accept(events.get(thread));
+            if (linesIndex[thread] == lines.length) {
+                linesIndex[thread] = 0;
+                sequence[thread]++;
+            }
+            return true;
+        }
+    }
+
+    @Override
+    public void stop() {
+        stopRequested = true;
+    }
+
+    @Override
+    public void awaitStop() throws InterruptedException {
+        for (int k = 0; k < threads; k++) {
+            countDownLatches[k].await();
+        }
+    }
+
+    @Override
+    public Collection<PluginConfigSpec<?>> configSchema() {
+        return PluginHelper.commonInputSettings(Arrays.asList(COUNT_CONFIG, LINES_CONFIG, MESSAGE_CONFIG,
+                THREADS_CONFIG, EPS_CONFIG));
+    }
+
+    @Override
+    public String getId() {
+        return id;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
index 20e998d270b..108e0677e22 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/outputs/Stdout.java
@@ -20,7 +20,7 @@
 public class Stdout implements Output {
 
     public static final PluginConfigSpec<Codec> CODEC_CONFIG =
-            PluginConfigSpec.codecSetting("codec", "java-line");
+            PluginConfigSpec.codecSetting("codec", "java_line");
 
     private Codec codec;
     private OutputStream outputStream;
diff --git a/logstash-core/src/test/java/org/logstash/plugins/ConfigurationImplTest.java b/logstash-core/src/test/java/org/logstash/plugins/ConfigurationImplTest.java
index 2a171e2f219..e633cb76291 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/ConfigurationImplTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/ConfigurationImplTest.java
@@ -105,5 +105,14 @@ public void testDefaultCodec() {
         Assert.assertTrue(codec instanceof Line);
     }
 
+    @Test
+    public void testDowncastFromLongToDouble() {
+        long defaultValue = 1L;
+        PluginConfigSpec<Double> doubleConfig = PluginConfigSpec.floatSetting(numberKey, defaultValue, false, false);
+        Configuration config = new ConfigurationImpl(Collections.singletonMap(numberKey, defaultValue));
+        double x = config.get(doubleConfig);
+        Assert.assertEquals(defaultValue, x, 0.001);
+    }
+
 }
 
diff --git a/qa/integration/services/kafka_setup.sh b/qa/integration/services/kafka_setup.sh
index 9e96527e582..7369ab309a3 100755
--- a/qa/integration/services/kafka_setup.sh
+++ b/qa/integration/services/kafka_setup.sh
@@ -10,7 +10,7 @@ if [ -n "${KAFKA_VERSION+1}" ]; then
     echo "KAFKA_VERSION is $KAFKA_VERSION"
     version=$KAFKA_VERSION
 else
-    version=2.0.1
+    version=2.1.1
 fi
 
 KAFKA_HOME=$INSTALL_DIR/kafka
diff --git a/qa/integration/specs/cli/remove_spec.rb b/qa/integration/specs/cli/remove_spec.rb
index 2bce464ce48..b9bdcefd09a 100644
--- a/qa/integration/specs/cli/remove_spec.rb
+++ b/qa/integration/specs/cli/remove_spec.rb
@@ -26,16 +26,16 @@
 
         context "when no other plugins depends on this plugin" do
           it "successfully remove the plugin" do
-            execute = @logstash_plugin.run_raw("#{offline_wrapper_cmd} bin/logstash-plugin remove logstash-input-twitter")
+            execute = @logstash_plugin.run_raw("#{offline_wrapper_cmd} bin/logstash-plugin remove logstash-filter-mutate")
 
             expect(execute.exit_code).to eq(0)
-            expect(execute.stderr_and_stdout).to match(/Successfully removed logstash-input-twitter/)
+            expect(execute.stderr_and_stdout).to match(/Successfully removed logstash-filter-mutate/)
 
-            presence_check = @logstash_plugin.list("logstash-input-twitter")
+            presence_check = @logstash_plugin.list("logstash-filter-mutate")
             expect(presence_check.exit_code).to eq(1)
             expect(presence_check.stderr_and_stdout).to match(/ERROR: No plugins found/)
 
-            @logstash_plugin.install("logstash-input-twitter")
+            @logstash_plugin.install("logstash-filter-mutate")
           end
         end
 
@@ -59,16 +59,16 @@
     else
       context "when no other plugins depends on this plugin" do
         it "successfully remove the plugin" do
-          execute = @logstash_plugin.remove("logstash-input-twitter")
+          execute = @logstash_plugin.remove("logstash-filter-mutate")
 
           expect(execute.exit_code).to eq(0)
-          expect(execute.stderr_and_stdout).to match(/Successfully removed logstash-input-twitter/)
+          expect(execute.stderr_and_stdout).to match(/Successfully removed logstash-filter-mutate/)
 
-          presence_check = @logstash_plugin.list("logstash-input-twitter")
+          presence_check = @logstash_plugin.list("logstash-filter-mutate")
           expect(presence_check.exit_code).to eq(1)
           expect(presence_check.stderr_and_stdout).to match(/ERROR: No plugins found/)
 
-          @logstash_plugin.install("logstash-input-twitter")
+          @logstash_plugin.install("logstash-filter-mutate")
         end
       end
 
diff --git a/rakelib/default_plugins.rb b/rakelib/default_plugins.rb
index 433acedd445..2600602c1c8 100644
--- a/rakelib/default_plugins.rb
+++ b/rakelib/default_plugins.rb
@@ -31,11 +31,6 @@ def self.fetch_plugins_for(type)
     # plugins required to run the logstash core specs
     CORE_SPECS_PLUGINS = self.fetch_plugins_for("core-specs").freeze
 
-    TEST_JAR_DEPENDENCIES_PLUGINS = self.fetch_plugins_for("test-jar-dependencies").freeze
-
-    TEST_VENDOR_PLUGINS = self.fetch_plugins_for("test-vendor-plugin").freeze
-
     ALL_PLUGINS_SKIP_LIST = Regexp.union(self.fetch_plugins_for("skip-list")).freeze
-
   end
 end
diff --git a/rakelib/dependency.rake b/rakelib/dependency.rake
index f586174566d..0671095bc45 100644
--- a/rakelib/dependency.rake
+++ b/rakelib/dependency.rake
@@ -1,39 +1,5 @@
-
 namespace "dependency" do
   task "bundler" do
     Rake::Task["gem:require"].invoke("bundler", "~> 1.17.1")
   end
-
-  task "clamp" do
-    Rake::Task["gem:require"].invoke("clamp", "~> 0.6")
-  end
-
-  task "rbx-stdlib" do
-    Rake::Task["gem:require"].invoke("rubysl", ">= 0")
-  end # task rbx-stdlib
-
-  task "archive-tar-minitar" do
-    Rake::Task["gem:require"].invoke("minitar", "0.6.1")
-  end # task archive-minitar
-
-  task "stud" do
-    Rake::Task["gem:require"].invoke("stud", ">= 0")
-  end # task stud
-
-  task "fpm" do
-    Rake::Task["gem:require"].invoke("fpm", "~> 1.3.3")
-  end # task stud
-
-  task "rubyzip" do
-    Rake::Task["gem:require"].invoke("rubyzip", ">= 0")
-  end # task stud
-
-  task "octokit" do
-    Rake::Task["gem:require"].invoke("octokit", ">= 0")
-  end # task octokit
-
-  task "gems" do
-    Rake::Task["gem:require"].invoke("gems", ">= 0")
-  end # task gems
-
 end # namespace dependency
diff --git a/rakelib/package.rake b/rakelib/package.rake
deleted file mode 100644
index 531a160fd2b..00000000000
--- a/rakelib/package.rake
+++ /dev/null
@@ -1,10 +0,0 @@
-namespace "package" do
-
-  task "bundle" do
-    system("bin/logstash-plugin", "pack")
-    raise(RuntimeError, $!.to_s) unless $?.success?
-  end
-
-  desc "Build a package with the default plugins, including dependencies, to be installed offline"
-  task "plugins-default" => ["test:install-default", "bundle"]
-end
diff --git a/rakelib/plugin.rake b/rakelib/plugin.rake
index f860dff2793..21559e94a24 100644
--- a/rakelib/plugin.rake
+++ b/rakelib/plugin.rake
@@ -9,8 +9,9 @@ namespace "plugin" do
   end
 
   task "install-development-dependencies" => "bootstrap" do
-    puts("[plugin:install-development-dependencies] Installing development dependencies of all installed plugins")
+    puts("[plugin:install-development-dependencies] Installing development dependencies")
     install_plugins("--development",  "--preserve")
+    install_plugins("--preserve", *LogStash::RakeLib::CORE_SPECS_PLUGINS)
 
     task.reenable # Allow this task to be run again
   end
@@ -30,20 +31,6 @@ namespace "plugin" do
     task.reenable # Allow this task to be run again
   end
 
-  task "install-core" => "bootstrap" do
-    puts("[plugin:install-core] Installing core plugins")
-    install_plugins("--no-verify", "--preserve", *LogStash::RakeLib::CORE_SPECS_PLUGINS)
-
-    task.reenable # Allow this task to be run again
-  end
-
-  task "install-jar-dependencies" => "bootstrap" do
-    puts("[plugin:install-jar-dependencies] Installing jar_dependencies plugins for testing")
-    install_plugins("--no-verify", "--preserve", *LogStash::RakeLib::TEST_JAR_DEPENDENCIES_PLUGINS)
-
-    task.reenable # Allow this task to be run again
-  end
-
   task "clean-local-core-gem", [:name, :path] do |task, args|
     name = args[:name]
     path = args[:path]
diff --git a/rakelib/plugins-metadata.json b/rakelib/plugins-metadata.json
index 467481c577b..5181640cac9 100644
--- a/rakelib/plugins-metadata.json
+++ b/rakelib/plugins-metadata.json
@@ -1,849 +1,509 @@
 {
-	"logstash-input-heartbeat": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-dead_letter_queue": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-collectd": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": true,
-		"skip-list": false
-	},
-	"logstash-codec-dots": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-edn": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-edn_lines": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-fluent": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-es_bulk": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-graphite": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-json": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-json_lines": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-line": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-msgpack": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-multiline": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-netflow": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-plain": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-codec-rubydebug": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-clone": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-cidr": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-csv": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-date": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-dissect": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-dns": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-drop": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-fingerprint": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-geoip": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-grok": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-http": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-json": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-kv": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-memcached": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-metrics": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-mutate": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-ruby": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-sleep": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-split": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-syslog_pri": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-throttle": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-translate": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-urldecode": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-useragent": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-xml": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-azure_event_hubs": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-elasticsearch": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-exec": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-file": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-ganglia": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-gelf": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-generator": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-graphite": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-http": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-http_poller": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-imap": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-jdbc": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-pipe": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-rabbitmq": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-redis": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-s3": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-snmp": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-snmptrap": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-sqs": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-stdin": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-syslog": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-tcp": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-twitter": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-udp": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-unix": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-kafka": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": true,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-input-beats": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-elastic_app_search": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-cloudwatch": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-csv": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-elasticsearch": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-file": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-graphite": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-http": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-kafka": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-nagios": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-null": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-pagerduty": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-pipe": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-rabbitmq": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-redis": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-s3": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-sns": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-sqs": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-stdout": {
-		"default-plugins": true,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-tcp": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-udp": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-webhdfs": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-filter-multiline": {
-		"default-plugins": false,
-		"core-specs": true,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-yaml": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-example": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-codec-example": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-filter-example": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-example": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-drupal_dblog": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-logentries": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-newrelic": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-slack": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-neo4j": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-neo4j": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-perfmon": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-rackspace": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-rackspace": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-dynamodb": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-filter-language": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-heroku": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-output-google_cloud_storage": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-journald": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-input-log4j2": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": true
-	},
-	"logstash-codec-cloudtrail": {
-		"default-plugins": false,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-aggregate": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-anonymize": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-de_dot": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-elasticsearch": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-jdbc_static": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-jdbc_streaming": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-filter-truncate": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-email": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	},
-	"logstash-output-lumberjack": {
-		"default-plugins": true,
-		"core-specs": false,
-		"test-jar-dependencies": false,
-		"test-vendor-plugins": false,
-		"skip-list": false
-	}
+  "logstash-codec-avro": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-cef": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-collectd": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-dots": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-edn": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-edn_lines": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-es_bulk": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-example": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-codec-fluent": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-graphite": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-json": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-json_lines": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-line": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-msgpack": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-multiline": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-netflow": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-codec-plain": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-codec-rubydebug": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-aggregate": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-anonymize": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-cidr": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-clone": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-csv": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-date": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-de_dot": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-dissect": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-dns": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-drop": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-elasticsearch": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-example": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-filter-fingerprint": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-geoip": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-grok": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-http": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-jdbc_static": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-jdbc_streaming": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-json": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-kv": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-language": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-filter-memcached": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-metrics": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-mutate": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-prune": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-ruby": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-sleep": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-split": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-syslog_pri": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-throttle": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-translate": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-truncate": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-urldecode": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-useragent": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-uuid": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-filter-xml": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-filter-yaml": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-azure_event_hubs": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-beats": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-input-couchdb_changes": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-dead_letter_queue": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-drupal_dblog": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-dynamodb": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-elasticsearch": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-example": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-exec": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-file": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-ganglia": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-gelf": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-generator": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-input-graphite": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-heartbeat": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-heroku": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-http": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-http_poller": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-imap": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-jdbc": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-journald": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-kafka": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-log4j2": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-neo4j": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-perfmon": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-pipe": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-rabbitmq": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-rackspace": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-input-redis": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-s3": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-snmp": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-snmptrap": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-sqs": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-stdin": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-input-syslog": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-tcp": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-input-twitter": {
+    "default-plugins": false,
+    "skip-list": false
+  },
+  "logstash-input-udp": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-input-unix": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-cloudwatch": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-csv": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-elastic_app_search": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-elasticsearch": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-output-email": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-example": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-file": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-output-google_cloud_storage": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-graphite": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-http": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-kafka": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-logentries": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-lumberjack": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-nagios": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-neo4j": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-newrelic": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-null": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-output-pipe": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-rabbitmq": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-rackspace": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-redis": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-s3": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-slack": {
+    "default-plugins": false,
+    "skip-list": true
+  },
+  "logstash-output-sns": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-sqs": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-stdout": {
+    "default-plugins": true,
+    "core-specs": true,
+    "skip-list": false
+  },
+  "logstash-output-tcp": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-udp": {
+    "default-plugins": true,
+    "skip-list": false
+  },
+  "logstash-output-webhdfs": {
+    "default-plugins": true,
+    "skip-list": false
+  }
 }
diff --git a/rakelib/test.rake b/rakelib/test.rake
index a3260fb65cf..81f13145245 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -58,17 +58,11 @@ namespace "test" do
     exit 1 unless system(*(["bin/rspec", "-fd", "--order", "rand"].concat(test_files)))
   end
 
-  desc "install core plugins and dev dependencies"
-  task "install-core" => ["bootstrap", "plugin:install-core", "plugin:install-development-dependencies"]
+  desc "install dev dependencies"
+  task "install-core" => ["bootstrap", "plugin:install-development-dependencies"]
 
   desc "install default plugins and dev dependencies"
   task "install-default" => ["bootstrap", "plugin:install-default", "plugin:install-development-dependencies"]
-
-  desc "install vendor plugins and dev dependencies"
-  task "install-vendor-plugins" => ["bootstrap", "plugin:install-vendor", "plugin:install-development-dependencies"]
-
-  desc "install jar dependencies and dev dependencies"
-  task "install-jar-dependencies-plugins" => ["bootstrap", "plugin:install-jar-dependencies", "plugin:install-development-dependencies"]
 end
 
 task "test" => [ "test:core" ]
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index 842640b7034..e1848f5e340 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -14,7 +14,6 @@ namespace "vendor" do
   task "gems", [:bundle] do |task, args|
     require "bootstrap/environment"
 
-    Rake::Task["dependency:clamp"].invoke
     Rake::Task["dependency:bundler"].invoke
 
     puts("Invoking bundler install...")
diff --git a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
index a946a6d5eef..ae55808dafd 100644
--- a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
+++ b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
@@ -93,8 +93,6 @@ def format_global_event_count(stats)
     end
 
     def format_queue_stats(agent, stats)
-      events = 0
-
       pipelines_stats = stats.get_shallow(:stats, :pipelines)
 
       total_queued_events = 0
@@ -103,7 +101,7 @@ def format_queue_stats(agent, stats)
         pipeline = agent.get_pipeline(pipeline_id)
         # Check if pipeline is nil to avoid race condition where metrics system refers pipeline that has been stopped already
         next if pipeline.nil? || pipeline.system? || type != 'persisted'
-        total_queued_events = p_stats[:queue][:events].value
+        total_queued_events += p_stats[:queue][:events].value
       end
 
       {:events_count => total_queued_events}
diff --git a/x-pack/lib/monitoring/monitoring.rb b/x-pack/lib/monitoring/monitoring.rb
index 4dbeefff07a..15e0cef7f54 100644
--- a/x-pack/lib/monitoring/monitoring.rb
+++ b/x-pack/lib/monitoring/monitoring.rb
@@ -83,7 +83,7 @@ class PipelineRegisterHook
       include LogStash::Util::Loggable, LogStash::Helpers::ElasticsearchOptions
 
       PIPELINE_ID = ".monitoring-logstash"
-      API_VERSION = 6
+      API_VERSION = 7
 
       def initialize
         # nothing to do here
