diff --git a/lib/logstash/filters/xml.rb b/lib/logstash/filters/xml.rb
index ef56b3b9f26..815b7a94ce2 100644
--- a/lib/logstash/filters/xml.rb
+++ b/lib/logstash/filters/xml.rb
@@ -26,8 +26,38 @@ class LogStash::Filters::Xml < LogStash::Filters::Base
   #
   # The above would parse the xml from @message and store the resulting
   # document into the 'doc' field.
+  config /[A-Za-z0-9_-]+/, :validate => :string, :deprecated => true
+
+  # Config for xml to hash is:
+  #
+  #     source => source_field
+  #
+  # For example, if you have the whole xml document in your @message field:
+  #
+  #     filter {
+  #       xml {
+  #         source => "@message"
+  #       }
+  #     }
   #
-  config /[A-Za-z0-9_-]+/, :validate => :string
+  # The above would parse the xml from the @message field
+  config :source, :validate => :string
+
+  # Define target for placing the data
+  #
+  # for example if you want the data to be put in the 'doc' field:
+  #
+  #     filter {
+  #       xml {
+  #         target => "doc"
+  #       }
+  #     }
+  #
+  # XML in the value of the source field will be expanded into a
+  # datastructure in the "target" field.
+  # Note: if the "target" field already exists, it will be overridden
+  # Required
+  config :target, :validate => :string
 
   # xpath will additionally select string values (.to_s on whatever is selected)
   # from parsed XML (using each source field defined using the method above)
@@ -57,11 +87,16 @@ def register
     require "xmlsimple"
     @xml = {}
 
+    #TODO(electrical): Will be removed when its fully deprecated
     @config.each do |field, dest|
-      next if (RESERVED + ["xpath", "store_xml"]).member?(field)
-
+      next if (RESERVED + ["xpath", "store_xml", "source", "target"]).member?(field)
       @xml[field] = dest
     end
+
+    if @source
+      @xml[@source] = @target
+    end
+
   end # def register
 
   public
diff --git a/spec/filters/xml.rb b/spec/filters/xml.rb
index cd4c934d31a..105edbd88ce 100644
--- a/spec/filters/xml.rb
+++ b/spec/filters/xml.rb
@@ -4,7 +4,7 @@
 describe LogStash::Filters::Xml do
   extend LogStash::RSpec
 
-  describe "parse standard xml" do
+  describe "parse standard xml (Deprecated checks)" do
     config <<-CONFIG
     filter {
       xml {
@@ -36,7 +36,7 @@
     end
   end
 
-  describe "parse standard xml but do not store" do
+  describe "parse standard xml but do not store (Deprecated checks)" do
     config <<-CONFIG
     filter {
       xml {
@@ -52,7 +52,7 @@
     end
   end
 
-  describe "parse xml and store values with xpath" do
+  describe "parse xml and store values with xpath (Deprecated checks)" do
     config <<-CONFIG
     filter {
       xml {
@@ -74,4 +74,81 @@
       insist { subject["xpath_field"]} == ["value1","value2"]
     end
   end
+
+  ## New tests
+
+  describe "parse standard xml" do
+    config <<-CONFIG
+    filter {
+      xml {
+        source => "xmldata"
+        target => "data"
+      }
+    }
+    CONFIG
+
+    sample({"@fields" => {"xmldata" => '<foo key="value"/>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["data"]} == {"key" => "value"}
+    end
+
+    #From parse xml with array as a value
+    sample({"@fields" => {"xmldata" => '<foo><key>value1</key><key>value2</key></foo>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["data"]} == {"key" => ["value1", "value2"]}
+    end
+
+    #From parse xml with hash as a value
+    sample({"@fields" => {"xmldata" => '<foo><key1><key2>value</key2></key1></foo>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["data"]} == {"key1" => [{"key2" => ["value"]}]}
+    end
+
+    #From bad xml
+    sample({"@fields" => {"xmldata" => '<foo /'}}) do
+      insist { subject.tags}.include?("_xmlparsefailure")
+    end
+  end
+
+  describe "parse standard xml but do not store" do
+    config <<-CONFIG
+    filter {
+      xml {
+        source => "xmldata"
+        target => "data"
+        store_xml => false
+      }
+    }
+    CONFIG
+
+    sample({"@fields" => {"xmldata" => '<foo key="value"/>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["data"]} == nil
+    end
+  end
+
+  describe "parse xml and store values with xpath" do
+    config <<-CONFIG
+    filter {
+      xml {
+        source => "xmldata"
+        target => "data"
+        xpath => [ "/foo/key/text()", "xpath_field" ]
+      }
+    }
+    CONFIG
+
+    # Single value
+    sample({"@fields" => {"xmldata" => '<foo><key>value</key></foo>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["xpath_field"]} == ["value"]
+    end
+
+    #Multiple values
+    sample({"@fields" => {"xmldata" => '<foo><key>value1</key><key>value2</key></foo>'}}) do
+      reject { subject.tags}.include?("_xmlparsefailure")
+      insist { subject["xpath_field"]} == ["value1","value2"]
+    end
+  end
+
 end
