diff --git a/logstash-core/src/test/java/org/logstash/JavafierTest.java b/logstash-core/src/test/java/org/logstash/JavafierTest.java
index e198bf507c5..d93ee6b510e 100644
--- a/logstash-core/src/test/java/org/logstash/JavafierTest.java
+++ b/logstash-core/src/test/java/org/logstash/JavafierTest.java
@@ -6,11 +6,11 @@
 import java.math.BigInteger;
 import static org.junit.Assert.assertEquals;
 
-public class JavafierTest extends TestBase {
+public class JavafierTest {
 
     @Test
     public void testRubyBignum() {
-        RubyBignum v = RubyBignum.newBignum(ruby, "-9223372036854776000");
+        RubyBignum v = RubyBignum.newBignum(RubyUtil.RUBY, "-9223372036854776000");
 
         Object result = Javafier.deep(v);
         assertEquals(BigInteger.class, result.getClass());
diff --git a/logstash-core/src/test/java/org/logstash/RubyfierTest.java b/logstash-core/src/test/java/org/logstash/RubyfierTest.java
index a26dbc7fd76..63da58b3729 100644
--- a/logstash-core/src/test/java/org/logstash/RubyfierTest.java
+++ b/logstash-core/src/test/java/org/logstash/RubyfierTest.java
@@ -21,11 +21,11 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class RubyfierTest extends TestBase {
+public class RubyfierTest {
 
     @Test
     public void testDeepWithString() {
-        Object result = Rubyfier.deep(ruby, "foo");
+        Object result = Rubyfier.deep(RubyUtil.RUBY, "foo");
         assertEquals(RubyString.class, result.getClass());
         assertEquals("foo", result.toString());
     }
@@ -34,14 +34,14 @@ public void testDeepWithString() {
     public void testDeepMapWithString() throws Exception {
         Map<String, String> data = new HashMap<>();
         data.put("foo", "bar");
-        RubyHash rubyHash = ((RubyHash) Rubyfier.deep(ruby, data));
+        RubyHash rubyHash = (RubyHash) Rubyfier.deep(RubyUtil.RUBY, data);
 
         // Hack to be able to retrieve the original, unconverted Ruby object from Map
         // it seems the only method providing this is internalGet but it is declared protected.
         // I know this is bad practice but I think this is practically acceptable.
         Method internalGet = RubyHash.class.getDeclaredMethod("internalGet", IRubyObject.class);
         internalGet.setAccessible(true);
-        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(ruby, "foo"));
+        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(RubyUtil.RUBY, "foo"));
 
         assertEquals(RubyString.class, result.getClass());
         assertEquals("bar", result.toString());
@@ -52,7 +52,7 @@ public void testDeepListWithString() throws Exception {
         List<String> data = new ArrayList<>();
         data.add("foo");
 
-        RubyArray rubyArray = ((RubyArray)Rubyfier.deep(ruby, data));
+        RubyArray rubyArray = (RubyArray)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // toJavaArray does not newFromRubyArray inner elements to Java types \o/
         assertEquals(RubyString.class, rubyArray.toJavaArray()[0].getClass());
@@ -61,7 +61,7 @@ public void testDeepListWithString() throws Exception {
 
     @Test
     public void testDeepWithInteger() {
-        Object result = Rubyfier.deep(ruby, 1);
+        Object result = Rubyfier.deep(RubyUtil.RUBY, 1);
         assertEquals(RubyFixnum.class, result.getClass());
         assertEquals(1L, ((RubyFixnum)result).getLongValue());
     }
@@ -70,14 +70,14 @@ public void testDeepWithInteger() {
     public void testDeepMapWithInteger() throws Exception {
         Map<String, Integer> data = new HashMap<>();
         data.put("foo", 1);
-        RubyHash rubyHash = ((RubyHash)Rubyfier.deep(ruby, data));
+        RubyHash rubyHash = (RubyHash)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // Hack to be able to retrieve the original, unconverted Ruby object from Map
         // it seems the only method providing this is internalGet but it is declared protected.
         // I know this is bad practice but I think this is practically acceptable.
         Method internalGet = RubyHash.class.getDeclaredMethod("internalGet", IRubyObject.class);
         internalGet.setAccessible(true);
-        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(ruby, "foo"));
+        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(RubyUtil.RUBY, "foo"));
 
         assertEquals(RubyFixnum.class, result.getClass());
         assertEquals(1L, ((RubyFixnum)result).getLongValue());
@@ -88,7 +88,7 @@ public void testDeepListWithInteger() throws Exception {
         List<Integer> data = new ArrayList<>();
         data.add(1);
 
-        RubyArray rubyArray = ((RubyArray)Rubyfier.deep(ruby, data));
+        RubyArray rubyArray = (RubyArray)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // toJavaArray does not newFromRubyArray inner elements to Java types \o/
         assertEquals(RubyFixnum.class, rubyArray.toJavaArray()[0].getClass());
@@ -97,7 +97,7 @@ public void testDeepListWithInteger() throws Exception {
 
     @Test
     public void testDeepWithFloat() {
-        Object result = Rubyfier.deep(ruby, 1.0F);
+        Object result = Rubyfier.deep(RubyUtil.RUBY, 1.0F);
         assertEquals(RubyFloat.class, result.getClass());
         assertEquals(1.0D, ((RubyFloat)result).getDoubleValue(), 0);
     }
@@ -106,14 +106,14 @@ public void testDeepWithFloat() {
     public void testDeepMapWithFloat() throws Exception {
         Map<String, Float> data = new HashMap<>();
         data.put("foo", 1.0F);
-        RubyHash rubyHash = ((RubyHash)Rubyfier.deep(ruby, data));
+        RubyHash rubyHash = (RubyHash)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // Hack to be able to retrieve the original, unconverted Ruby object from Map
         // it seems the only method providing this is internalGet but it is declared protected.
         // I know this is bad practice but I think this is practically acceptable.
         Method internalGet = RubyHash.class.getDeclaredMethod("internalGet", IRubyObject.class);
         internalGet.setAccessible(true);
-        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(ruby, "foo"));
+        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(RubyUtil.RUBY, "foo"));
 
         assertEquals(RubyFloat.class, result.getClass());
         assertEquals(1.0D, ((RubyFloat)result).getDoubleValue(), 0);
@@ -124,7 +124,7 @@ public void testDeepListWithFloat() throws Exception {
         List<Float> data = new ArrayList<>();
         data.add(1.0F);
 
-        RubyArray rubyArray = ((RubyArray)Rubyfier.deep(ruby, data));
+        RubyArray rubyArray = (RubyArray)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // toJavaArray does not newFromRubyArray inner elements to Java types \o/
         assertEquals(RubyFloat.class, rubyArray.toJavaArray()[0].getClass());
@@ -133,7 +133,7 @@ public void testDeepListWithFloat() throws Exception {
 
     @Test
     public void testDeepWithDouble() {
-        Object result = Rubyfier.deep(ruby, 1.0D);
+        Object result = Rubyfier.deep(RubyUtil.RUBY, 1.0D);
         assertEquals(RubyFloat.class, result.getClass());
         assertEquals(1.0D, ((RubyFloat)result).getDoubleValue(), 0);
     }
@@ -142,14 +142,14 @@ public void testDeepWithDouble() {
     public void testDeepMapWithDouble() throws Exception {
         Map<String, Double> data = new HashMap<>();
         data.put("foo", 1.0D);
-        RubyHash rubyHash = ((RubyHash)Rubyfier.deep(ruby, data));
+        RubyHash rubyHash = (RubyHash)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // Hack to be able to retrieve the original, unconverted Ruby object from Map
         // it seems the only method providing this is internalGet but it is declared protected.
         // I know this is bad practice but I think this is practically acceptable.
         Method internalGet = RubyHash.class.getDeclaredMethod("internalGet", IRubyObject.class);
         internalGet.setAccessible(true);
-        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(ruby, "foo"));
+        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(RubyUtil.RUBY, "foo"));
 
         assertEquals(RubyFloat.class, result.getClass());
         assertEquals(1.0D, ((RubyFloat)result).getDoubleValue(), 0);
@@ -160,7 +160,7 @@ public void testDeepListWithDouble() throws Exception {
         List<Double> data = new ArrayList<>();
         data.add(1.0D);
 
-        RubyArray rubyArray = ((RubyArray)Rubyfier.deep(ruby, data));
+        RubyArray rubyArray = (RubyArray)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // toJavaArray does not newFromRubyArray inner elements to Java types \o/
         assertEquals(RubyFloat.class, rubyArray.toJavaArray()[0].getClass());
@@ -169,7 +169,7 @@ public void testDeepListWithDouble() throws Exception {
 
     @Test
     public void testDeepWithBigDecimal() {
-        Object result = Rubyfier.deep(ruby, new BigDecimal(1));
+        Object result = Rubyfier.deep(RubyUtil.RUBY, new BigDecimal(1));
         assertEquals(RubyBigDecimal.class, result.getClass());
         assertEquals(1.0D, ((RubyBigDecimal)result).getDoubleValue(), 0);
     }
@@ -179,14 +179,14 @@ public void testDeepMapWithBigDecimal() throws Exception {
         Map<String, BigDecimal> data = new HashMap<>();
         data.put("foo", new BigDecimal(1));
 
-        RubyHash rubyHash = ((RubyHash)Rubyfier.deep(ruby, data));
+        RubyHash rubyHash = (RubyHash)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // Hack to be able to retrieve the original, unconverted Ruby object from Map
         // it seems the only method providing this is internalGet but it is declared protected.
         // I know this is bad practice but I think this is practically acceptable.
         Method internalGet = RubyHash.class.getDeclaredMethod("internalGet", IRubyObject.class);
         internalGet.setAccessible(true);
-        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(ruby, "foo"));
+        Object result = internalGet.invoke(rubyHash, JavaUtil.convertJavaToUsableRubyObject(RubyUtil.RUBY, "foo"));
 
         assertEquals(RubyBigDecimal.class, result.getClass());
         assertEquals(1.0D, ((RubyBigDecimal)result).getDoubleValue(), 0);
@@ -197,7 +197,7 @@ public void testDeepListWithBigDecimal() throws Exception {
         List<BigDecimal> data = new ArrayList<>();
         data.add(new BigDecimal(1));
 
-        RubyArray rubyArray = ((RubyArray)Rubyfier.deep(ruby, data));
+        RubyArray rubyArray = (RubyArray)Rubyfier.deep(RubyUtil.RUBY, data);
 
         // toJavaArray does not newFromRubyArray inner elements to Java types \o/
         assertEquals(RubyBigDecimal.class, rubyArray.toJavaArray()[0].getClass());
@@ -207,7 +207,7 @@ public void testDeepListWithBigDecimal() throws Exception {
 
     @Test
     public void testDeepWithBigInteger() {
-        Object result = Rubyfier.deep(ruby, new BigInteger("1"));
+        Object result = Rubyfier.deep(RubyUtil.RUBY, new BigInteger("1"));
         assertEquals(RubyBignum.class, result.getClass());
         assertEquals(1L, ((RubyBignum)result).getLongValue());
     }
diff --git a/logstash-core/src/test/java/org/logstash/TestBase.java b/logstash-core/src/test/java/org/logstash/TestBase.java
deleted file mode 100644
index d22f790f76f..00000000000
--- a/logstash-core/src/test/java/org/logstash/TestBase.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.logstash;
-
-import org.jruby.Ruby;
-import org.jruby.ext.bigdecimal.RubyBigDecimal;
-import org.junit.Before;
-import org.logstash.ext.JrubyTimestampExtLibrary;
-
-public abstract class TestBase {
-    private static boolean setupDone = false;
-    public static final Ruby ruby = Ruby.getGlobalRuntime();
-
-    @Before
-    public void setUp() throws Exception {
-        if (setupDone) return;
-        RubyBigDecimal.createBigDecimal(ruby); // we need to do 'require "bigdecimal"'
-        JrubyTimestampExtLibrary.createTimestamp(ruby);
-        setupDone = true;
-    }
-}
diff --git a/logstash-core/src/test/java/org/logstash/ValuefierTest.java b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
index 55f48c9acc7..0e88387439a 100644
--- a/logstash-core/src/test/java/org/logstash/ValuefierTest.java
+++ b/logstash-core/src/test/java/org/logstash/ValuefierTest.java
@@ -21,13 +21,13 @@
 
 import static junit.framework.TestCase.assertEquals;
 
-public class ValuefierTest extends TestBase {
+public class ValuefierTest {
     @Test
     public void testMapJavaProxy() {
         Map<IRubyObject, IRubyObject> map = new HashMap<>();
-        map.put(RubyString.newString(ruby, "foo"), RubyString.newString(ruby, "bar"));
-        RubyClass proxyClass = (RubyClass) Java.getProxyClass(ruby, HashMap.class);
-        MapJavaProxy mjp = new MapJavaProxy(ruby, proxyClass);
+        map.put(RubyString.newString(RubyUtil.RUBY, "foo"), RubyString.newString(RubyUtil.RUBY, "bar"));
+        RubyClass proxyClass = (RubyClass) Java.getProxyClass(RubyUtil.RUBY, HashMap.class);
+        MapJavaProxy mjp = new MapJavaProxy(RubyUtil.RUBY, proxyClass);
         mjp.setObject(map);
 
         Object result = Valuefier.convert(mjp);
@@ -37,9 +37,9 @@ public void testMapJavaProxy() {
 
     @Test
     public void testArrayJavaProxy() {
-        IRubyObject[] array = new IRubyObject[]{RubyString.newString(ruby, "foo")};
-        RubyClass proxyClass = (RubyClass) Java.getProxyClass(ruby, String[].class);
-        ArrayJavaProxy ajp = new ArrayJavaProxy(ruby, proxyClass, array);
+        IRubyObject[] array = new IRubyObject[]{RubyString.newString(RubyUtil.RUBY, "foo")};
+        RubyClass proxyClass = (RubyClass) Java.getProxyClass(RubyUtil.RUBY, String[].class);
+        ArrayJavaProxy ajp = new ArrayJavaProxy(RubyUtil.RUBY, proxyClass, array);
 
         Object result = Valuefier.convert(ajp);
         assertEquals(ConvertedList.class, result.getClass());
@@ -49,9 +49,9 @@ public void testArrayJavaProxy() {
     @Test
     public void testConcreteJavaProxy() {
         List<IRubyObject> array = new ArrayList<>();
-        array.add(RubyString.newString(ruby, "foo"));
-        RubyClass proxyClass = (RubyClass) Java.getProxyClass(ruby, ArrayList.class);
-        ConcreteJavaProxy cjp = new ConcreteJavaProxy(ruby, proxyClass, array);
+        array.add(RubyString.newString(RubyUtil.RUBY, "foo"));
+        RubyClass proxyClass = (RubyClass) Java.getProxyClass(RubyUtil.RUBY, ArrayList.class);
+        ConcreteJavaProxy cjp = new ConcreteJavaProxy(RubyUtil.RUBY, proxyClass, array);
         Object result = Valuefier.convert(cjp);
         assertEquals(ConvertedList.class, result.getClass());
         List<Object> a = (ConvertedList) result;
@@ -59,7 +59,7 @@ public void testConcreteJavaProxy() {
 
     @Test
     public void testRubyTime() {
-        RubyTime ro = RubyTime.newTime(ruby, DateTime.now());
+        RubyTime ro = RubyTime.newTime(RubyUtil.RUBY, DateTime.now());
         Object result = Valuefier.convert(ro);
         assertEquals(JrubyTimestampExtLibrary.RubyTimestamp.class, result.getClass());
     }
@@ -77,7 +77,7 @@ public void testJodaDateTIme() {
 
     @Test
     public void testUnhandledObject() {
-        RubyMatchData md = new RubyMatchData(ruby);
+        RubyMatchData md = new RubyMatchData(RubyUtil.RUBY);
         exception.expect(MissingConverterException.class);
         exception.expectMessage("Missing Converter handling for full class name=org.jruby.RubyMatchData, simple name=RubyMatchData");
         Valuefier.convert(md);
