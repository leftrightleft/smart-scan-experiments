diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java b/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
index 29e62ba607a..c7b03c07855 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/TailPage.java
@@ -15,7 +15,7 @@ public TailPage(HeadPage page) {
 
     // create a new TailPage object for an exiting Checkpoint and data file
     // @param pageIO the PageIO object is expected to be open/recover/create
-    public TailPage(Checkpoint checkpoint, Queue queue, PageIO pageIO) throws IOException {
+    public TailPage(Checkpoint checkpoint, Queue queue, PageIO pageIO) {
         super(checkpoint.getPageNum(), queue, checkpoint.getMinSeqNum(), checkpoint.getElementCount(), checkpoint.getFirstUnackedSeqNum(), new BitSet(), pageIO);
 
         // this page ackedSeqNums bitset is a new empty bitset, if we have some acked elements, set them in the bitset
@@ -45,4 +45,4 @@ public void close() throws IOException {
             this.pageIO.close();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
index 1b7a77f2549..bf80fb9b5b0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
@@ -276,7 +276,7 @@ private byte[] readData() throws IOException {
         return streamedInput.readByteArray();
     }
 
-    private void skipChecksum() throws IOException {
+    private void skipChecksum() {
         streamedInput.skip(CHECKSUM_SIZE);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java b/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
index 8afeb4eef2c..3cd0764c679 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/ByteBufferStreamInput.java
@@ -40,7 +40,7 @@ public int read(byte[] b, int off, int len) throws IOException {
     }
 
     @Override
-    public long skip(long n) throws IOException {
+    public long skip(long n) {
         if (n > buffer.remaining()) {
             int ret = buffer.position();
             buffer.position(buffer.limit());
@@ -67,7 +67,7 @@ public void movePosition(int position) {
         buffer.position(position);
     }
 
-    public void rewind() throws IOException {
+    public void rewind() {
         buffer.rewind();
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
index 6934e8e105a..fa8e22714ed 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/DeadLetterQueueReader.java
@@ -138,7 +138,7 @@ public Path getCurrentSegment() {
         return currentReader.getPath();
     }
 
-    public long getCurrentPosition() throws IOException {
+    public long getCurrentPosition() {
         return currentReader.getChannelPosition();
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index a21f60a3214..1ccce42a735 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -118,7 +118,7 @@ public <T> byte[] seekToNextEventPosition(T target, Function<byte[], T> keyExtra
         return event;
     }
 
-    public long getChannelPosition() throws IOException {
+    public long getChannelPosition() {
         return channelPosition;
     }
 
@@ -147,7 +147,7 @@ public boolean isEndOfStream() {
     /**
      *
      */
-     int seekToStartOfEventInBlock() throws IOException {
+     int seekToStartOfEventInBlock() {
          while (true) {
              RecordType type = RecordType.fromByte(currentBlock.array()[currentBlock.arrayOffset() + currentBlock.position()]);
              if (RecordType.COMPLETE.equals(type) || RecordType.START.equals(type)) {
@@ -189,7 +189,7 @@ private void maybeRollToNextBlock() throws IOException {
         }
     }
 
-    private void getRecord(ByteBuffer buffer, RecordHeader header) throws IOException {
+    private void getRecord(ByteBuffer buffer, RecordHeader header) {
         Checksum computedChecksum = new CRC32();
         computedChecksum.update(currentBlock.array(), currentBlock.position(), header.getSize());
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
index a0627a891fa..4d193e56f70 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
@@ -60,58 +60,58 @@ public static ValueExpression eValue(double value) {
         }
     }
 
-    public static Gt eGt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Gt eGt(SourceWithMetadata meta, Expression left, Expression right) {
         return new Gt(meta, left, right);
     }
 
-    public static Gt eGt(Expression left, Expression right) throws InvalidIRException {
+    public static Gt eGt(Expression left, Expression right) {
         return new Gt(null, left, right);
     }
 
-    public static Gte eGte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Gte eGte(SourceWithMetadata meta, Expression left, Expression right) {
         return new Gte(meta, left, right);
     }
 
-    public static Gte eGte(Expression left, Expression right) throws InvalidIRException {
+    public static Gte eGte(Expression left, Expression right) {
         return new Gte(null, left, right);
     }
 
-    public static Lt eLt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Lt eLt(SourceWithMetadata meta, Expression left, Expression right) {
         return new Lt(meta, left, right);
     }
 
-    public static Lt eLt(Expression left, Expression right) throws InvalidIRException {
+    public static Lt eLt(Expression left, Expression right) {
         return new Lt(null, left, right);
     }
 
-    public static Lte eLte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Lte eLte(SourceWithMetadata meta, Expression left, Expression right) {
         return new Lte(meta, left, right);
     }
-    public static Lte eLte(Expression left, Expression right) throws InvalidIRException {
+    public static Lte eLte(Expression left, Expression right) {
         return new Lte(null, left, right);
     }
 
-    public static Eq eEq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Eq eEq(SourceWithMetadata meta, Expression left, Expression right) {
         return new Eq(meta, left, right);
     }
 
-    public static Eq eEq(Expression left, Expression right) throws InvalidIRException {
+    public static Eq eEq(Expression left, Expression right) {
         return new Eq(null, left, right);
     }
 
-    public static And eAnd(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static And eAnd(SourceWithMetadata meta, Expression left, Expression right) {
         return new And(meta, left, right);
     }
 
-    public static And eAnd(Expression left, Expression right) throws InvalidIRException {
+    public static And eAnd(Expression left, Expression right) {
         return new And(null, left, right);
     }
 
-    public static Or eOr(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Or eOr(SourceWithMetadata meta, Expression left, Expression right) {
         return new Or(meta, left, right);
     }
 
-    public static Or eOr(Expression left, Expression right) throws InvalidIRException {
+    public static Or eOr(Expression left, Expression right) {
         return new Or(null, left, right);
     }
 
@@ -131,18 +131,18 @@ public static Expression eRegexNeq(Expression left, ValueExpression right) throw
         return eNot(eRegexEq(left, right));
     }
 
-    public static Neq eNeq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static Neq eNeq(SourceWithMetadata meta, Expression left, Expression right) {
         return new Neq(meta, left, right);
     }
-    public static Neq eNeq(Expression left, Expression right) throws InvalidIRException {
+    public static Neq eNeq(Expression left, Expression right) {
         return new Neq(null, left, right);
     }
 
-    public static In eIn(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public static In eIn(SourceWithMetadata meta, Expression left, Expression right) {
         return new In(meta, left, right);
     }
 
-    public static In eIn(Expression left, Expression right) throws InvalidIRException {
+    public static In eIn(Expression left, Expression right) {
         return new In(null, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
index 9023ee72076..132a2eb6d80 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/BinaryBooleanExpression.java
@@ -1,9 +1,8 @@
 package org.logstash.config.ir.expression;
 
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.common.Util;
 import org.logstash.config.ir.SourceComponent;
-import org.logstash.config.ir.InvalidIRException;
-import org.logstash.common.SourceWithMetadata;
 
 /**
  * Created by andrewvc on 9/6/16.
@@ -34,7 +33,7 @@ public Expression getLeft() {
 
     public BinaryBooleanExpression(SourceWithMetadata meta,
                                    Expression left,
-                                   Expression right) throws InvalidIRException {
+                                   Expression right) {
         super(meta);
         this.left = left;
         this.right = right;
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
index c9866037d87..3a1e7a448ff 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/And.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class And extends BinaryBooleanExpression {
-    public And(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public And(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
index a94f72187da..1addc385ee4 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Eq.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Eq extends BinaryBooleanExpression {
-    public Eq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Eq(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
index 2ff3222484c..d85ab1f7ca5 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gt.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Gt extends BinaryBooleanExpression {
-    public Gt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Gt(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
index 855a2280c88..354ba7de70b 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Gte.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Gte extends BinaryBooleanExpression {
-    public Gte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Gte(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
index 93bee6a44c2..8ad94e858b9 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/In.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class In extends BinaryBooleanExpression {
-    public In(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public In(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
index 4f4892c469a..9f421445938 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lt.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Lt extends BinaryBooleanExpression {
-    public Lt(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Lt(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
index 4fe77cd4238..f336d9b8a31 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Lte.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Lte extends BinaryBooleanExpression {
-    public Lte(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Lte(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
index 9ff2ee64cf4..6f17ed1e138 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Neq.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Neq extends BinaryBooleanExpression {
-    public Neq(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Neq(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
index f5292ab6b22..bed9d1561da 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/binary/Or.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression.binary;
 
-import org.logstash.config.ir.InvalidIRException;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.expression.BinaryBooleanExpression;
 import org.logstash.config.ir.expression.Expression;
@@ -9,7 +8,7 @@
  * Created by andrewvc on 9/21/16.
  */
 public class Or extends BinaryBooleanExpression {
-    public Or(SourceWithMetadata meta, Expression left, Expression right) throws InvalidIRException {
+    public Or(SourceWithMetadata meta, Expression left, Expression right) {
         super(meta, left, right);
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index e514a45dc88..df9367ca643 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -196,7 +196,7 @@ public IRubyObject ruby_append(ThreadContext context, IRubyObject value)
         }
 
         @JRubyMethod(name = "sprintf", required = 1)
-        public IRubyObject ruby_sprintf(ThreadContext context, IRubyObject format) throws IOException {
+        public IRubyObject ruby_sprintf(ThreadContext context, IRubyObject format) {
             try {
                 return RubyString.newString(context.runtime, event.sprintf(format.toString()));
             } catch (IOException e) {
@@ -211,14 +211,12 @@ public IRubyObject ruby_to_s(ThreadContext context)
         }
 
         @JRubyMethod(name = "to_hash")
-        public IRubyObject ruby_to_hash(ThreadContext context) throws IOException
-        {
+        public IRubyObject ruby_to_hash(ThreadContext context) {
             return Rubyfier.deep(context.runtime, this.event.getData());
         }
 
         @JRubyMethod(name = "to_hash_with_metadata")
-        public IRubyObject ruby_to_hash_with_metadata(ThreadContext context) throws IOException
-        {
+        public IRubyObject ruby_to_hash_with_metadata(ThreadContext context) {
             Map data = this.event.toMap();
             Map metadata = this.event.getMetadata();
 
