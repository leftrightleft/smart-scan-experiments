diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index 7c80317643c..347b5ef7b06 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -539,7 +539,7 @@ private Batch _readPageBatch(Page p, int limit, long timeout) throws IOException
         // NOTE: the tricky thing here is that upon entering this method, if p is initially a head page
         // it could become a tail page upon returning from the notEmpty.await call.
 
-        do {
+        while (left > 0) {
             if (isHeadPage(p) && p.isFullyRead()) {
                 boolean elapsed;
                 // a head page is fully read but can be written to so let's wait for more data
@@ -576,13 +576,13 @@ private Batch _readPageBatch(Page p, int limit, long timeout) throws IOException
             if (isTailPage(p) && p.isFullyRead()) {
                 break;
             }
-        } while (left > 0);
+        }
 
         if (isTailPage(p) && p.isFullyRead()) {
             removeUnreadPage(p);
         }
 
-        return (left >= limit) ? null :  new Batch(elements, seqNums, this);
+        return new Batch(elements, seqNums, this);
     }
 
     private static class TailPageResult {
@@ -644,6 +644,9 @@ private TailPageResult linearFindPageForSeqnum(long seqNum) {
      * @throws IOException
      */
     public void ack(LongVector seqNums) throws IOException {
+        if (seqNums.size() == 0) {
+            return;
+        }
         // as a first implementation we assume that all batches are created from the same page
         // so we will avoid multi pages acking here for now
 
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
index 02b0483b501..03d6fb78049 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
@@ -107,6 +107,18 @@ public void writeToFullyAckedHeadpage() throws IOException {
         }
     }
 
+    @Test
+    public void canReadBatchZeroSize() throws IOException {
+        final int page = MmapPageIO.MIN_CAPACITY;
+        try (Queue q = new Queue(
+            TestSettings.persistedQueueSettings(page, page * 2 - 1, dataPath))) {
+            q.open();
+            try (Batch b = q.readBatch(0, 500L)) {
+                assertThat(b.getElements().size(), is(0));
+            }
+        }
+    }
+
     /**
      * This test ensures that the {@link Queue} functions properly when pagesize is equal to overall
      * queue size (i.e. there is only a single page).
