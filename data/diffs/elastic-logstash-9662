diff --git a/lib/secretstore/cli.rb b/lib/secretstore/cli.rb
index 1a607524ca8..335403a0f5e 100644
--- a/lib/secretstore/cli.rb
+++ b/lib/secretstore/cli.rb
@@ -4,8 +4,8 @@
 
 require "logstash-core/logstash-core"
 require "logstash/util/settings_helper"
-require "logstash/util/secretstore"
 
+java_import "org.logstash.secret.store.SecretStoreExt"
 java_import "org.logstash.secret.store.SecretStoreFactory"
 java_import "org.logstash.secret.SecretIdentifier"
 java_import "org.logstash.secret.store.SecureConfig"
@@ -30,7 +30,7 @@ class LogStash::SecretStoreCli
     LogStash::Util::SettingsHelper.pre_process
     LogStash::Util::SettingsHelper.from_yaml(["--path.settings", path_settings_value])
     LogStash::Util::SettingsHelper.post_process
-    secure_config = LogStash::Util::SecretStore.get_config
+    secure_config = SecretStoreExt.getConfig(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)
     cli = SecretStoreCli.new(Terminal.new)
     cli.command(ARGV[0], secure_config, ARGV[1])
     exit 0
diff --git a/logstash-core/lib/logstash/util/secretstore.rb b/logstash-core/lib/logstash/util/secretstore.rb
index 8dba10ef36d..cf7879f56b6 100644
--- a/logstash-core/lib/logstash/util/secretstore.rb
+++ b/logstash-core/lib/logstash/util/secretstore.rb
@@ -1,38 +1 @@
-# encoding: utf-8
-
-# Ruby helper to work with the secret store
-module ::LogStash::Util::SecretStore
-
-  java_import "org.logstash.secret.store.SecretStoreFactory"
-  java_import "org.logstash.secret.SecretIdentifier"
-  java_import "org.logstash.secret.store.SecureConfig"
-  java_import "org.logstash.secret.cli.SecretStoreCli"
-
-  SECRET_STORE_FACTORY = SecretStoreFactory::fromEnvironment()
-
-  # Return the configuration necessary to work with a secret store
-  def self.get_config
-    secure_config = SecureConfig.new
-    secure_config.add("keystore.file", LogStash::SETTINGS.get_setting("keystore.file").value.chars)
-    pass = ENV["LOGSTASH_KEYSTORE_PASS"]
-    secure_config.add("keystore.pass", pass.chars) unless pass.nil?
-    secure_config.add("keystore.classname", LogStash::SETTINGS.get_setting("keystore.classname").value.chars)
-    secure_config
-  end
-
-  # Check to see if the secret store exists, return true if exists, false otherwise
-  def self.exists?
-    SECRET_STORE_FACTORY.exists(get_config)
-  end
-
-  # Returns a org.logstash.secret.store.SecretStore if it exists, nil otherwise
-  def self.get_if_exists
-    SECRET_STORE_FACTORY.load(get_config) if exists?
-  end
-
-  # Returns a org.org.logstash.secret.SecretIdentifier for use with the secret store
-  def self.get_store_id(id)
-    SecretIdentifier.new(id)
-  end
-
-end
+# Keeping this file for backwards compatibility with plugins that include it directly.
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index 0dd8da61224..41ff14a7ee7 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -1,5 +1,6 @@
 # encoding: utf-8
-require "logstash/util/secretstore"
+
+java_import "org.logstash.secret.store.SecretStoreExt"
 
 module ::LogStash::Util::SubstitutionVariables
 
@@ -41,8 +42,8 @@ def replace_placeholders(value)
       logger.debug("Replacing `#{placeholder}` with actual value")
 
       #check the secret store if it exists
-      secret_store = LogStash::Util::SecretStore.get_if_exists
-      replacement = secret_store.nil? ? nil : secret_store.retrieveSecret(LogStash::Util::SecretStore.get_store_id(name))
+      secret_store = SecretStoreExt.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)
+      replacement = secret_store.nil? ? nil : secret_store.retrieveSecret(SecretStoreExt.getStoreId(name))
       #check the environment
       replacement = ENV.fetch(name, default) if replacement.nil?
       if replacement.nil?
diff --git a/logstash-core/spec/logstash/util/secretstore_spec.rb b/logstash-core/spec/logstash/util/secretstore_spec.rb
index 59974dbffc4..5a868f7c96c 100644
--- a/logstash-core/spec/logstash/util/secretstore_spec.rb
+++ b/logstash-core/spec/logstash/util/secretstore_spec.rb
@@ -1,9 +1,10 @@
-require "logstash/util/secretstore"
 require "logstash/settings"
 
-describe LogStash::Util::SecretStore do
+java_import "org.logstash.secret.store.SecretStoreExt"
 
-  subject {LogStash::Util::SecretStore}
+describe SecretStoreExt do
+
+  subject {SecretStoreExt}
 
   describe "with missing keystore" do
     before :each do
@@ -11,8 +12,8 @@
     end
 
     it "should be not exist" do
-      expect(subject.exists?).to be_falsy
-      expect(subject.get_if_exists).to be_nil
+      expect(subject.exists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)).to be_falsy
+      expect(subject.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)).to be_nil
     end
   end
 
@@ -22,7 +23,7 @@
     end
 
     it "should be readable" do
-      expect(subject.get_if_exists.list).to include(subject.get_store_id("keystore.seed"))
+      expect(subject.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value).list).to include(subject.get_store_id("keystore.seed"))
     end
   end
 
@@ -41,7 +42,7 @@
       end
 
       it "should be readable" do
-        expect(subject.get_if_exists.list).to include(subject.get_store_id("keystore.seed"))
+        expect(subject.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value).list).to include(subject.get_store_id("keystore.seed"))
       end
     end
 
@@ -55,15 +56,14 @@
       end
 
       it "should be not readable" do
-        expect {subject.get_if_exists}.to raise_error.with_message(/Can not access Logstash keystore/)
+        expect {subject.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)}.to raise_error.with_message(/Can not access Logstash keystore/)
       end
     end
 
     describe "and missing password" do
       it "should be not readable" do
-        expect {subject.get_if_exists}.to raise_error.with_message(/Could not determine keystore password/)
+        expect {subject.getIfExists(LogStash::SETTINGS.get_setting("keystore.file").value, LogStash::SETTINGS.get_setting("keystore.classname").value)}.to raise_error.with_message(/Could not determine keystore password/)
       end
     end
   end
-
 end
\ No newline at end of file
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreExt.java b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreExt.java
new file mode 100644
index 00000000000..827e5205a1e
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreExt.java
@@ -0,0 +1,44 @@
+package org.logstash.secret.store;
+
+import org.jruby.RubyHash;
+import org.logstash.RubyUtil;
+import org.logstash.secret.SecretIdentifier;
+
+public class SecretStoreExt {
+
+    private static final SecretStoreFactory SECRET_STORE_FACTORY = SecretStoreFactory.fromEnvironment();
+
+    public static SecureConfig getConfig(String keystoreFile, String keystoreClassname) {
+        return getSecureConfig(RubyUtil.RUBY.getENV(), keystoreFile, keystoreClassname);
+    }
+
+    private static SecureConfig getSecureConfig(RubyHash env, String file, String classname) {
+        String keystorePass = (String) env.get("LOGSTASH_KEYSTORE_PASS");
+        return getSecureConfig(file, keystorePass, classname);
+    }
+
+    private static SecureConfig getSecureConfig(String keystoreFile, String keystorePass, String keystoreClassname) {
+        SecureConfig sc = new SecureConfig();
+        sc.add("keystore.file", keystoreFile.toCharArray());
+        if (keystorePass != null) {
+            sc.add("keystore.pass", keystorePass.toCharArray());
+        }
+        sc.add("keystore.classname", keystoreClassname.toCharArray());
+        return sc;
+    }
+
+    public static boolean exists(String keystoreFile, String keystoreClassname) {
+        return SECRET_STORE_FACTORY.exists(getConfig(keystoreFile, keystoreClassname));
+    }
+
+    public static SecretStore getIfExists(String keystoreFile, String keystoreClassname) {
+        SecureConfig sc = getConfig(keystoreFile, keystoreClassname);
+        return SECRET_STORE_FACTORY.exists(sc)
+                ? SECRET_STORE_FACTORY.load(sc)
+                : null;
+    }
+
+    public static SecretIdentifier getStoreId(String id) {
+        return new SecretIdentifier(id);
+    }
+}
