diff --git a/ci/ci_test.bat b/ci/ci_test.bat
index 7860a056225..e3a4467b9cf 100644
--- a/ci/ci_test.bat
+++ b/ci/ci_test.bat
@@ -1,4 +1,3 @@
-goto no_test
 @echo off
 
 setlocal
@@ -40,5 +39,3 @@ IF "%SELECTEDTESTSUITE%"=="core-fail-fast" (
     %RAKEPATH% test:core
   )
 )
-:no_test
-echo ***** SKIPPING TESTS : https://github.com/elastic/logstash/issues/7634 *****
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index ffb47e9cba1..188e7a6f7ba 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -159,6 +159,10 @@ def execute_bundler_with_retry(options)
           end
         end
       end
+            puts "**********************"
+            puts output
+            puts "**********************"
+  
       raise exception if exception
 
       return output
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
index 081a09da27e..98238680de0 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/HotThreadMonitorTest.java
@@ -50,7 +50,8 @@ public void testStackTraceSizeOption(){
         Map<String, String> options = new HashMap<>();
         options.put("stacktrace_size", testStackSize);
         HotThreadsMonitor.detect(options).stream().filter(tr -> !tr.getThreadName().equals("Signal Dispatcher") &&
-                                                                      !tr.getThreadName().equals("Reference Handler"))
+                                                                      !tr.getThreadName().equals("Reference Handler") &&
+                                                                            !tr.getThreadName().equals("Attach Listener"))
                                                         .forEach(tr -> {
             List stackTrace = (List)tr.toMap().get("thread.stacktrace");
             assertThat(stackTrace.size(), is(Integer.valueOf(testStackSize)));
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
index 1bb958e60df..6bc653be722 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
@@ -8,6 +8,7 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assume.assumeTrue;
 
 public class ProcessMonitorTest {
 
@@ -15,6 +16,7 @@ public class ProcessMonitorTest {
     @Test
     public void testReportFDStats(){
         Map<String, Object> processStats = ProcessMonitor.detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("open_file_descriptors", (Long)processStats.get("open_file_descriptors") > 0L, is(true));
         assertThat("max_file_descriptors", (Long)processStats.get("max_file_descriptors") > 0L, is(true));
     }
@@ -22,6 +24,7 @@ public void testReportFDStats(){
     @Test
     public void testReportCpuStats(){
         Map<String, Object> processStats = ProcessMonitor.detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("cpu", processStats.get("cpu"), instanceOf(Map.class));
         Map cpuStats = ((Map)processStats.get("cpu"));
         assertThat("cpu.process_percent", (Short)cpuStats.get("process_percent") >= 0, is(true));
@@ -32,6 +35,7 @@ public void testReportCpuStats(){
     @Test
     public void testReportMemStats() {
         Map<String, Object> processStats = ProcessMonitor.detect().toMap();
+        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("mem", processStats.get("mem"), instanceOf(Map.class));
         Map memStats = ((Map)processStats.get("mem"));
         assertThat("mem.total_virtual_in_bytes", (Long)memStats.get("total_virtual_in_bytes") >= 0L, is(true));
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
index 9fc5d4bba38..c3907bd09cd 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/SystemMonitorTest.java
@@ -14,10 +14,12 @@ public class SystemMonitorTest {
     @Test
     public void systemMonitorTest(){
         Map<String, Object> map = SystemMonitor.detect().toMap();
-        assertThat("system.load_average is missing", (Double)map.get("system.load_average") > 0, is(true));
+        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
+        if (!((String) map.get("os.name")).startsWith("Windows")) {
+            assertThat("system.load_average is missing", (Double) map.get("system.load_average") > 0, is(true));
+        }
         assertThat("system.available_processors is missing ", ((Integer)map.get("system.available_processors")) > 0, is(true));
         assertThat("os.version is missing", map.get("os.version"), allOf(notNullValue(), instanceOf(String.class)));
         assertThat("os.arch is missing", map.get("os.arch"), allOf(notNullValue(), instanceOf(String.class)));
-        assertThat("os.name is missing", map.get("os.name"), allOf(notNullValue(), instanceOf(String.class)));
     }
 }
