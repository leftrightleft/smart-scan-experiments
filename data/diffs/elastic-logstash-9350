diff --git a/logstash-core/benchmarks/bin/log4j2.xml b/logstash-core/benchmarks/bin/log4j2.xml
new file mode 100644
index 00000000000..f08c158694a
--- /dev/null
+++ b/logstash-core/benchmarks/bin/log4j2.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="INFO">
+    <Appenders>
+        <Console name="STDOUT" target="SYSTEM_OUT">
+            <PatternLayout pattern="%m%n"/>
+        </Console>
+    </Appenders>
+    <Loggers>
+        <Root level="INFO">
+            <AppenderRef ref="STDOUT" level="INFO"/>
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 6b921972dd9..3b145ebf196 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -121,6 +121,8 @@ dependencies {
     compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}"
     compile "org.jruby:jruby-complete:${jrubyVersion}"
     compile 'com.google.googlejavaformat:google-java-format:1.5'
+    // https://mvnrepository.com/artifact/com.squareup.okhttp/okhttp
+    compile group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'
     testCompile 'org.apache.logging.log4j:log4j-core:2.9.1:tests'
     testCompile 'junit:junit:4.12'
     testCompile 'net.javacrumbs.json-unit:json-unit:1.9.0'
diff --git a/logstash-core/src/main/java/org/logstash/pluginmanager/PluginInfo.java b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginInfo.java
new file mode 100644
index 00000000000..c6761d0515b
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginInfo.java
@@ -0,0 +1,11 @@
+package org.logstash.pluginmanager;
+
+public class PluginInfo {
+    final PluginLocation pluginLocation;
+    final PluginVersion pluginVersion;
+
+    public PluginInfo(PluginLocation pluginLocation, PluginVersion pluginVersion) {
+        this.pluginLocation = pluginLocation;
+        this.pluginVersion = pluginVersion;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/pluginmanager/PluginLocation.java b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginLocation.java
new file mode 100644
index 00000000000..963bf441a0a
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginLocation.java
@@ -0,0 +1,15 @@
+package org.logstash.pluginmanager;
+
+public class PluginLocation {
+    final String repositoryUrl;
+    final String repositoryId;
+    final String group;
+    final String artifact;
+
+    public PluginLocation(String repositoryUrl, String repositoryId, String group, String artifact) {
+        this.repositoryUrl = repositoryUrl;
+        this.repositoryId = repositoryId;
+        this.group = group;
+        this.artifact = artifact;
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/pluginmanager/PluginManager.java b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginManager.java
new file mode 100644
index 00000000000..51824dd4028
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginManager.java
@@ -0,0 +1,127 @@
+package org.logstash.pluginmanager;
+
+import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.Response;
+import org.w3c.dom.Document;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathExpression;
+import javax.xml.xpath.XPathExpressionException;
+import javax.xml.xpath.XPathFactory;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.PriorityQueue;
+import java.util.SortedSet;
+import java.util.TreeSet;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+public class PluginManager {
+    final ConcurrentHashMap<String, PluginInfo> registry = new ConcurrentHashMap<>();
+    final static OkHttpClient http = new OkHttpClient();
+    final static String DEFAULT_REPOSITORY_URL = System.getenv("LS_DEFAULT_MAVEN_URL");
+    final static String DEFAULT_REPOSITORY_ID = "maven-releases";
+
+    PluginManager() {
+
+    }
+
+    ConcurrentMap<PluginLocation, PluginInfo> installLatest(Collection<String> pluginLocationStrings) {
+        return installLocations(pluginLocationStrings.stream().map(this::parseStringToPluginLocation).collect(Collectors.toList()));
+    }
+
+
+    ConcurrentMap<PluginLocation, PluginInfo> installLocations(Collection<PluginLocation> pluginLocations) {
+        return pluginLocations.parallelStream().collect(Collectors.toConcurrentMap(Function.identity(), l -> {
+            try {
+                return this.installLatest(l);
+            } catch (SAXException | IOException | ParserConfigurationException e) {
+                // TODO This isn't production quality
+                e.printStackTrace();
+                return null;
+            }
+        }));
+    }
+
+    private PluginInfo installLatest(PluginLocation pluginLocation) throws IOException, ParserConfigurationException, SAXException {
+        Collection<PluginVersion> pluginVersions = getPluginVersions(pluginLocation);
+        Collection<PluginInfo> pluginInfos = getPluginInfos(pluginVersions);
+        return null;
+    }
+
+    private Collection<PluginInfo> getPluginInfos(Collection<PluginVersion> pluginVersions) {
+        return pluginVersions.parallelStream().map(this::getPluginInfo).collect(Collectors.toList());
+    }
+
+    private PluginInfo getPluginInfo(PluginVersion pluginVersion) {
+
+    }
+
+    private SortedSet<PluginVersion> getPluginVersions(PluginLocation pluginLocation) {
+        SortedSet<PluginVersion> versions = new TreeSet<>();
+        try {
+            String url = metadataXmlURL(pluginLocation);
+            Request request = new Request.Builder().url(url).build();
+            Response response = http.newCall(request).execute();
+
+            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+            DocumentBuilder db = dbf.newDocumentBuilder();
+            Document doc = db.parse(response.body().byteStream());
+
+            XPathFactory xPathFactory = XPathFactory.newInstance();
+            XPath xpath = xPathFactory.newXPath();
+
+            NodeList result = (NodeList) xpath.evaluate("//metadata/versioning/versions/version/text()", doc, XPathConstants.NODESET);
+            for (int i = 0; i < result.getLength(); i++) {
+                String versionString = result.item(i).getTextContent();
+                versions.add(new PluginVersion(versionString));
+            }
+            return null;
+        } catch (IOException | ParserConfigurationException | SAXException | XPathExpressionException e) {
+            // TODO handle for real
+            e.printStackTrace();
+        }
+
+        return versions;
+    }
+
+    private String metadataXmlURL(PluginLocation pluginLocation) {
+        return String.format(
+                "%s/repository/%s/%s/%s/maven-metadata.xml",
+                pluginLocation.repositoryUrl,
+                pluginLocation.repositoryId,
+                pluginLocation.group.replace(".", "/"),
+                pluginLocation.artifact);
+    }
+
+    private String versionPomURL(PluginLocation pluginLocation, PluginVersion pluginVersion) {
+        return String.format(
+                "%s/repository/%s/%s/%s/maven-metadata.xml",
+                pluginLocation.repositoryUrl,
+                pluginLocation.repositoryId,
+                pluginLocation.group.replace(".", "/"),
+                pluginLocation.artifact);
+    }
+
+    private PluginLocation parseStringToPluginLocation(String string) {
+        String[] split = string.split(":");
+        switch(split.length) {
+            case 2:
+                return new PluginLocation(DEFAULT_REPOSITORY_URL, DEFAULT_REPOSITORY_ID, split[0], split[1]);
+            case 4:
+                return new PluginLocation(split[0], split[1], split[2], split[3]);
+            default:
+                return null; // TODO: Probably should throw instead
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/pluginmanager/PluginVersion.java b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginVersion.java
new file mode 100644
index 00000000000..015a49ff8ac
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/pluginmanager/PluginVersion.java
@@ -0,0 +1,43 @@
+package org.logstash.pluginmanager;
+
+public class PluginVersion implements Comparable<PluginVersion>  {
+    final int major;
+    final int minor;
+    final int patch;
+    final boolean snapshot;
+
+    public PluginVersion(int major, int minor, int patch, boolean snapshot){
+        this.major = major;
+        this.minor = minor;
+        this.patch = patch;
+        this.snapshot = snapshot;
+    }
+
+    public PluginVersion(String versionString) {
+        // Split it
+        String[] split = versionString.split("\\.");
+        major = Integer.valueOf(split[0]);
+        minor = Integer.valueOf(split[1]);
+        patch = Integer.valueOf(split[2]);
+        snapshot = false;
+    }
+
+    @Override
+    public int compareTo(PluginVersion o) {
+        int majorDiff =Integer.compare(major, o.major);
+        if (majorDiff != 0) return majorDiff;
+        int minorDiff = Integer.compare(minor, o.minor);
+        if (minorDiff != 0) return minorDiff;
+
+        return Integer.compare(patch, o.patch);
+    }
+
+    @Override public String toString() {
+        String prefix = String.format("%s.%s.%s", major, minor, patch);
+        if (snapshot) {
+            return prefix + "-SNAPSHOT";
+        } else {
+            return prefix;
+        }
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/pluginmanager/PluginManagerTest.java b/logstash-core/src/test/java/org/logstash/pluginmanager/PluginManagerTest.java
new file mode 100644
index 00000000000..b578153b24d
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/pluginmanager/PluginManagerTest.java
@@ -0,0 +1,26 @@
+package org.logstash.pluginmanager;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class PluginManagerTest {
+    PluginManager manager;
+
+    @Before
+    public void initialize() {
+       manager = new PluginManager();
+    }
+
+    String validShortAddress = "com.example:logstash-filter-animal";
+    Collection<String> validShortAddresses = Collections.singleton(validShortAddress);
+
+    @Test
+    public void workflow() {
+       manager.installLatest(validShortAddresses);
+
+    }
+
+}
\ No newline at end of file
