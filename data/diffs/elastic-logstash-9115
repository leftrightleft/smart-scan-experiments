diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index 191e76ed698..b05ff8fc38d 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -76,6 +76,26 @@
         expect(e.get("[foo][-1]")).to eq(list[-1])
       end
     end
+
+    context("with default value") do
+      let(:event) do
+        LogStash::Event.new({"foo" => "bar", "false-value" => false, "nil-value" => nil})
+      end
+
+      it "should get values that exist" do
+        expect(event.get("foo", "supplied-default")).to eq("bar")
+        expect(event.get("[foo]", "supplied-default")).to eq("bar")
+        expect(event.get("false-value", "supplied-default")).to eq(false)
+        expect(event.get("[false-value]", "supplied-default")).to eq(false)
+        expect(event.get("nil-value", "supplied-default")).to eq(nil)
+        expect(event.get("[nil-value]", "supplied-default")).to eq(nil)
+      end
+
+      it "should fall back to default value when field doesn't exist" do
+        expect(event.get("not-set", "supplied-default")).to eq("supplied-default")
+        expect(event.get("[not-set]", "supplied-default")).to eq("supplied-default")
+      end
+    end
   end
 
   context "#set" do
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 1cda5eee31f..15fb3816281 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -127,7 +127,17 @@ public void setTimestamp(Timestamp t) {
     }
 
     public Object getField(final String reference) {
-        final Object unconverted = getUnconvertedField(FieldReference.from(reference));
+        return getField(reference, null);
+    }
+
+    public Object getField(final String reference,
+                           final Object defaultValue) {
+        return getField(FieldReference.from(reference), defaultValue);
+    }
+
+    public Object getField(final FieldReference reference,
+                           final Object defaultValue) {
+        final Object unconverted = getUnconvertedField(reference, defaultValue);
         return unconverted == null ? null : Javafier.deep(unconverted);
     }
 
@@ -136,6 +146,15 @@ public Object getUnconvertedField(final String reference) {
     }
 
     public Object getUnconvertedField(final FieldReference field) {
+        return getUnconvertedField(field, null);
+    }
+
+    public Object getUnconvertedField(final FieldReference field,
+                                      final Object defaultValue) {
+        if (!includes(field)) {
+            return defaultValue;
+        }
+
         switch (field.type()) {
             case FieldReference.META_PARENT:
                 return this.metadata;
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 80464d16053..1b1478062c4 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -82,6 +82,17 @@ public IRubyObject ruby_get_field(ThreadContext context, RubyString reference)
             );
         }
 
+        @JRubyMethod(name = "get", required = 2)
+        public IRubyObject ruby_get_field(final ThreadContext context,
+                                          final RubyString reference,
+                                          final IRubyObject defaultValue) {
+            final FieldReference fieldReference = FieldReference.from(reference.asJavaString());
+            return Rubyfier.deep(
+                    context.runtime,
+                    this.event.getUnconvertedField(fieldReference, defaultValue)
+            );
+        }
+
         @JRubyMethod(name = "set", required = 2)
         public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, IRubyObject value)
         {
diff --git a/logstash-core/src/test/java/org/logstash/EventTest.java b/logstash-core/src/test/java/org/logstash/EventTest.java
index e8a0e43f8ad..36e3b922f1a 100644
--- a/logstash-core/src/test/java/org/logstash/EventTest.java
+++ b/logstash-core/src/test/java/org/logstash/EventTest.java
@@ -1,5 +1,11 @@
 package org.logstash;
 
+import org.jruby.RubySymbol;
+import org.jruby.RubyTime;
+import org.jruby.java.proxies.ConcreteJavaProxy;
+import org.junit.Test;
+import org.logstash.ext.JrubyTimestampExtLibrary;
+
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -10,12 +16,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.jruby.RubySymbol;
-import org.jruby.RubyTime;
-import org.jruby.java.proxies.ConcreteJavaProxy;
-import org.junit.Test;
-import org.logstash.ext.JrubyTimestampExtLibrary;
-
 import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -193,6 +193,24 @@ public void testGetFieldList() throws Exception {
         assertEquals(1L, e.getField("[foo][0]"));
     }
 
+
+    @Test
+    public void testGetFieldDefaultValue() throws Exception {
+        Event event = new Event();
+
+        assertNull(event.getField("foo"));
+        assertEquals(1, event.getField("foo", 1));
+        event.setField("foo", 42L);
+        assertEquals(42L, event.getField("foo"));
+        assertEquals(42L, event.getField("foo", 1));
+
+        event.setField("[bar][innerFoo]", 42L);
+        assertEquals(42L, event.getField("[bar][innerFoo]"));
+        assertNull(event.getField("[bar][innerBar]"));
+        assertEquals(41L, event.getField("[bar][innerBar]", 41L));
+    }
+
+
     @Test
     public void testDeepGetField() throws Exception {
         Map<String, Object> data = new HashMap<>();
