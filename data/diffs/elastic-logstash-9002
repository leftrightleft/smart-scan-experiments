diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadBatchExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadBatchExt.java
index 88b2b919018..5a8b5bbf0f9 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadBatchExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadBatchExt.java
@@ -14,9 +14,9 @@
 import org.logstash.RubyUtil;
 
 @JRubyClass(name = "MemoryReadBatch")
-public class JrubyMemoryReadBatchExt extends RubyObject {
+public final class JrubyMemoryReadBatchExt extends RubyObject {
 
-    private LinkedHashSet<IRubyObject> events;
+    private final LinkedHashSet<IRubyObject> events;
 
     public JrubyMemoryReadBatchExt(final Ruby runtime, final RubyClass metaClass) {
         this(runtime, metaClass, new LinkedHashSet<>());
@@ -34,9 +34,7 @@ public static JrubyMemoryReadBatchExt create(LinkedHashSet<IRubyObject> events)
     }
 
     public static JrubyMemoryReadBatchExt create() {
-        JrubyMemoryReadBatchExt batch = new JrubyMemoryReadBatchExt(RubyUtil.RUBY,
-                RubyUtil.MEMORY_READ_BATCH_CLASS, new LinkedHashSet<>());
-        return batch;
+        return create(new LinkedHashSet<>());
     }
 
     @JRubyMethod(name = "to_a")
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
index 3f78f054f68..4ccc1c0174b 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryReadClientExt.java
@@ -1,5 +1,8 @@
 package org.logstash.ext;
 
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
 import org.jruby.Ruby;
 import org.jruby.RubyBasicObject;
 import org.jruby.RubyClass;
@@ -9,19 +12,14 @@
 import org.jruby.RubySymbol;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
-import org.jruby.java.proxies.JavaProxy;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.common.LsQueueUtils;
 import org.logstash.instrument.metrics.counter.LongCounter;
 
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.TimeUnit;
-
 @JRubyClass(name = "MemoryReadClient")
-public class JrubyMemoryReadClientExt extends RubyObject {
+public final class JrubyMemoryReadClientExt extends RubyObject {
 
     private static final RubySymbol OUT_KEY = RubyUtil.RUBY.newSymbol("out");
     private static final RubySymbol FILTERED_KEY = RubyUtil.RUBY.newSymbol("filtered");
@@ -52,16 +50,6 @@ private JrubyMemoryReadClientExt(final Ruby runtime, final RubyClass metaClass,
         waitForNanos = TimeUnit.NANOSECONDS.convert(waitForMillis, TimeUnit.MILLISECONDS);
     }
 
-    @JRubyMethod(name = "initialize")
-    @SuppressWarnings("unchecked")
-    public void rubyInitialize(final ThreadContext context, IRubyObject queue,
-                               IRubyObject batchSize, IRubyObject waitForMillis) {
-        this.queue = (BlockingQueue) (((JavaProxy) queue).getObject());
-        this.batchSize = ((RubyNumeric) batchSize).getIntValue();
-        waitForNanos = TimeUnit.NANOSECONDS.convert(
-                ((RubyNumeric) waitForMillis).getIntValue(), TimeUnit.MILLISECONDS);
-    }
-
     public static JrubyMemoryReadClientExt create(BlockingQueue queue, int batchSize,
                                                   int waitForMillis) {
         return new JrubyMemoryReadClientExt(RubyUtil.RUBY,
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryWriteClientExt.java
index 18b0a158a2d..cb7403fec26 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyMemoryWriteClientExt.java
@@ -1,21 +1,19 @@
 package org.logstash.ext;
 
+import java.util.Collection;
+import java.util.concurrent.BlockingQueue;
 import org.jruby.Ruby;
 import org.jruby.RubyClass;
 import org.jruby.RubyObject;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
-import org.jruby.java.proxies.JavaProxy;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.common.LsQueueUtils;
 
-import java.util.Collection;
-import java.util.concurrent.BlockingQueue;
-
 @JRubyClass(name = "MemoryWriteClient")
-public class JrubyMemoryWriteClientExt extends RubyObject {
+public final class JrubyMemoryWriteClientExt extends RubyObject {
 
     private BlockingQueue<JrubyEventExtLibrary.RubyEvent> queue;
 
@@ -35,13 +33,6 @@ public static JrubyMemoryWriteClientExt create(
                 RubyUtil.MEMORY_WRITE_CLIENT_CLASS, queue);
     }
 
-    @JRubyMethod(name = "initialize")
-    @SuppressWarnings("unchecked")
-    public void rubyInitialize(final ThreadContext context, IRubyObject queue) {
-        this.queue =
-                (BlockingQueue<JrubyEventExtLibrary.RubyEvent>) (((JavaProxy) queue).getObject());
-    }
-
     @JRubyMethod(name = {"push", "<<"}, required = 1)
     public IRubyObject rubyPush(final ThreadContext context, IRubyObject event)
             throws InterruptedException {
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyWrappedSynchronousQueueExt.java b/logstash-core/src/main/java/org/logstash/ext/JrubyWrappedSynchronousQueueExt.java
index 308f08b8546..a3c564e3420 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyWrappedSynchronousQueueExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyWrappedSynchronousQueueExt.java
@@ -13,7 +13,7 @@
 import java.util.concurrent.BlockingQueue;
 
 @JRubyClass(name = "WrappedSynchronousQueue")
-public class JrubyWrappedSynchronousQueueExt extends RubyObject {
+public final class JrubyWrappedSynchronousQueueExt extends RubyObject {
 
     private BlockingQueue<JrubyEventExtLibrary.RubyEvent> queue;
 
