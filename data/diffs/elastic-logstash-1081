diff --git a/lib/logstash/filters/wms.rb b/lib/logstash/filters/wms.rb
new file mode 100644
index 00000000000..9d09bf8b7ae
--- /dev/null
+++ b/lib/logstash/filters/wms.rb
@@ -0,0 +1,129 @@
+require "logstash/filters/base"
+require "logstash/namespace"
+
+#
+# This filter allows to parse WMS (Web-Map Service) queries.
+#
+# It can be used to extract the bounding box from the requests (in case of
+# GetMap queries for example), and the usual parameters defined in the OGC WMS
+# standard. See http://www.opengeospatial.org/standards/wms for more infos.
+#
+# The list of expected parameter can be customized by giving a specific array
+# of fields, but the default one should already fill in the logstash event with
+# the most common information we can find in regular WMS queries (service,
+# version, layers, requested projection, output format ...).
+# 
+# The module also permits to reproject the bounding boxes from getmap requests,
+# using the GeoScript (Gem / Wrapper to the Geotools java library).
+#
+# It can be customized using the following parameters:
+#
+# - output_epsg: the output projection to be used when setting the x/y
+#   coordinates, default to regular lat/long wgs84 ('epsg:4326')
+# - wms_fields: The fields that have to be potentially extracted from the query
+# - prefix: the string that will be used to prefix the variables added to the
+#   logstash event, defaults to 'wms.'
+#
+
+class LogStash::Filters::Wms < LogStash::Filters::Base
+
+  config_name "wms"
+  milestone 3
+
+  # epsg for the output
+  config :output_epsg, :validate => :string, :default => 'epsg:4326'
+
+
+  # default wms parameters to extract
+  config :wms_fields, :validate => :array, :default => [
+    'service', 'version', 'request', 'layers', 'styles', 'crs', 'srs',
+    'bbox', 'width', 'height', 'format', 'transparent', 'bgcolor',
+    'bgcolor', 'exceptions', 'time', 'elevation', 'wfs' 
+  ]
+
+  # prefix for parsed elements added by the plugin
+  config :prefix, :validate => :string, :default => "#{config_name}."
+
+  public
+  def register
+    require "geoscript"
+    require "uri"
+ end
+
+  public
+  def filter(event)
+
+    # we use the request field if available, else fallback onto message
+    msg = event["request"].nil? ? event["message"] : event["request"]
+
+    msg.downcase!
+
+    # not a valid WMS request
+    return unless msg.include? "service=wms"
+
+    begin
+      parsed_uri = URI(msg)
+      wms_parameters = Hash[*URI.decode_www_form(parsed_uri.query).flatten]
+    rescue # TODO: be more specific
+      event["#{@prefix}errmsg"] = "Unable to parse the provided request URI: #{msg}"
+      # at this point, we won't be able to do better
+      filter_matched(event)
+      return
+    end
+
+    @wms_fields.each do |f|
+
+      # if the parameter has been found in the uri,
+      # then parses it and adds infos to the event
+
+      unless wms_parameters[f].nil?
+
+        # bounding box parsing / reprojecting
+        if f == 'bbox'
+          begin
+            bbox = wms_parameters[f].split(",")
+            bbox.map!(&:to_f)
+            raise ArgumentError.new if bbox.length != 4 
+          rescue
+            event["#{@prefix}errmsg"] = "Unable to parse the bounding box"
+            next
+          end
+          in_proj = wms_parameters['crs'] || wms_parameters['srs'] || @output_epsg
+
+          event["#{@prefix}input_bbox.minx"] = bbox[0]
+          event["#{@prefix}input_bbox.miny"] = bbox[1]
+          event["#{@prefix}input_bbox.maxx"] = bbox[2]
+          event["#{@prefix}input_bbox.maxy"] = bbox[3]
+
+          # reprojection needed
+          if in_proj != @output_epsg
+            begin
+              max_xy = GeoScript::Geom::Point.new bbox[2], bbox[3]
+              min_xy = GeoScript::Geom::Point.new bbox[0], bbox[1]
+
+              max_reproj = GeoScript::Projection.reproject max_xy, in_proj, @output_epsg
+              min_reproj = GeoScript::Projection.reproject min_xy, in_proj, @output_epsg
+
+              bbox = [ min_reproj.get_x, min_reproj.get_y, max_reproj.get_x, max_reproj.get_y ]
+            rescue
+              event["#{@prefix}errmsg"] = "Unable to reproject the bounding box"
+              next
+            end
+          end
+          event["#{@prefix}output_bbox.minx"] = bbox[0]
+          event["#{@prefix}output_bbox.miny"] = bbox[1]
+          event["#{@prefix}output_bbox.maxx"] = bbox[2]
+          event["#{@prefix}output_bbox.maxy"] = bbox[3]
+
+        elsif f == "layers"
+          event["#{@prefix}#{f}"] = wms_parameters[f].split(",")
+          # Other parameters: no extra parsing of the parameter needed
+        else
+          event["#{@prefix}#{f}"] = wms_parameters[f]
+        end
+      end
+    end
+    filter_matched(event)
+  end
+
+end
diff --git a/lib/logstash/filters/wmts.rb b/lib/logstash/filters/wmts.rb
new file mode 100644
index 00000000000..d3e031a6dd0
--- /dev/null
+++ b/lib/logstash/filters/wmts.rb
@@ -0,0 +1,162 @@
+require "logstash/filters/base"
+require "logstash/namespace"
+
+#
+# This filter converts data from OGC WMTS (Web Map Tile Service) URLs to
+# geospatial information, and expands the logstash event accordingly. See
+# http://www.opengeospatial.org/standards/wmts for more information about WMTS. 
+#
+# Given a grid, WMTS urls contain all the necessary information to find out
+# which coordinates a requested tile belongs to.  Using a simple grok filter
+# you can extract all the relevant information. This plugin then translates
+# these information into coordinates in LV03 and WGS84.
+#
+# Here is an example of such a request: 
+# http://wmts4.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/20130213/21781/23/470/561.jpeg
+#
+# The current filter can be configured as follows in the configuration file:
+# 
+#  filter { 
+#     # First, waiting for varnish log file formats (combined apache logs)
+#     grok { match => [ "message", "%{COMBINEDAPACHELOG}" ] }
+#     # Then, parameters 
+#     grok {
+#       [ 
+#         "request",
+#         "(?<wmts.version>([0-9\.]{5}))\/(?<wmts.layer>([a-z0-9\.-]*))\/default\/(?<wmts.release>([0-9]*))\/(?<wmts.reference-system>([a-z0-9]*))\/(?<wmts.zoomlevel>([0-9]*))\/(?<wmts.row>([0-9]*))\/(?<wmts.col>([0-9]*))\.(?<wmts.filetype>([a-zA-Z]*))"
+#       ]
+#     }
+#     # actually passes the previously parsed message to the wmts plugin
+#     wmts { }
+#  }
+#
+# By default, the filter is configured to parse requests made on WMTS servers
+# configured with the Swisstopo WMTS grid, but this can be customized, by
+# setting the following parameters:
+#
+# - x_origin: the abscissa origin of the grid 
+# - y_origin: the ordinate origin of the grid
+# - tile_width: the width of the produced image tiles
+# - tile_height: the height of the image tiles
+# - resolutions: the array of resolutions for this wmts grid
+# 
+# Additionnally, the following parameters can be set:
+#
+# - prefix: the prefix used on the added variables, by default 'wmts.'
+# - output_epsg: the output projection, classical one by default (lat/lon /
+#   epsg:4326)
+# - zoomlevel_field: the name of the field where the filter can find the
+#   previously extracted zoomlevel, defaults to 'wmts.zoomlevel'
+# - column_field: same for column, defaults to 'wmts.col'
+# - row_field: same, defaults to 'wmts.row'
+# - refsys_field: same, defaults to 'wmts.reference-system'
+#   Note: if the reference system is different from the output_epsg, a
+#   reprojection of the coordinates will take place.
+# - epsg_mapping: sometimes, the reference-system can be given as a string
+#   ('swissgrid' for instance). This parameter allows to set a mapping between
+#   a regular name and the epsg number of a projection, e.g.:
+#   { 'swissgrid' => 21781 }
+#
+
+class LogStash::Filters::Wmts < LogStash::Filters::Base
+
+  config_name "wmts"
+  milestone 3
+
+
+  # WMTS grid configuration (by default, it is set to Swisstopo's WMTS grid)
+  # x_origin
+  config :x_origin, :validate => :number, :default => 420000
+  # y_origin
+  config :y_origin, :validate => :number, :default => 350000
+  # tile_width
+  config :tile_width, :validate => :number, :default => 256
+  # tile_height
+  config :tile_height, :validate => :number, :default => 256
+  # resolutions
+  config :resolutions, :validate => :array, :default => [ 4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000,
+        1750, 1500, 1250, 1000, 750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5, 0.25, 0.1 ]
+
+  # configures the prefix
+  config :prefix, :validate => :string, :default => "#{config_name}."
+
+  # configures the output projection
+  config :output_epsg, :validate => :string, :default => "epsg:4326"
+
+  # configures the name of the field for the WMTS zoomlevel
+  config :zoomlevel_field, :validate => :string, :default => "wmts.zoomlevel"
+
+  # configures the name of the field for the column
+  config :column_field, :validate => :string, :default => "wmts.col"
+
+  # configures the name of the field for the row
+  config :row_field, :validate => :string, :default => "wmts.row"
+
+  # configures the name of the field for the reference system
+  config :refsys_field, :validate => :string, :default => "wmts.reference-system"
+  
+  # configures a mapping between named projections and their actual EPSG code.
+  # Some production WMTS use a regular name instead of a numerical value for
+  # the projection code. This parameter allows to define a custom mapping
+  config :epsg_mapping, :validate => :hash, :default => {} 
+
+  public
+  def register
+    require "geoscript"
+ end
+
+  public
+  def filter(event)
+    begin
+      # cast values extracted upstream into integers
+      zoomlevel = Integer(event[@zoomlevel_field])
+      col = Integer(event[@column_field])
+      row = Integer(event[@row_field])
+
+      # checks if a mapping exists for the reference system extracted
+      translated_epsg = @epsg_mapping[event[@refsys_field]] || event[@refsys_field] 
+      input_epsg = "epsg:#{translated_epsg}"
+
+      resolution = @resolutions[zoomlevel]
+      raise ArgumentError if resolution.nil?
+    rescue ArgumentError, TypeError, NoMethodError
+      event["#{@prefix}errmsg"] = "Bad parameter received from upstream filter"
+      filter_matched(event)
+      return
+    end
+
+    begin
+      input_x = @x_origin + (((col+0.5)*@tile_width*resolution).floor)
+      input_y = @y_origin - (((row+0.5)*@tile_height*resolution).floor)
+
+      event["#{@prefix}service"] = "wmts"
+
+      event["#{@prefix}input_epsg"] = input_epsg
+      event["#{@prefix}input_x"] = input_x
+      event["#{@prefix}input_y"] = input_y
+      # add a combined field to the event. used for elaticsearch facets (heatmap!)
+      event["#{@prefix}input_xy"] = "#{input_x},#{input_y}"
+
+      # convert from input_epsg to output_epsg (if necessary)
+      event["#{@prefix}output_epsg"] = @output_epsg
+
+      unless input_epsg == @output_epsg
+        input_p = GeoScript::Geom::Point.new input_x, input_y
+        output_p = GeoScript::Projection.reproject input_p, input_epsg, @output_epsg
+        event["#{@prefix}output_xy"] = "#{output_p.x},#{output_p.y}"
+        event["#{@prefix}output_x"] = output_p.x
+        event["#{@prefix}output_y"] = output_p.y
+      else
+        # no reprojection needed
+        event["#{@prefix}output_xy"] = "#{input_x},#{input_y}"
+        event["#{@prefix}output_x"] = input_x
+        event["#{@prefix}output_y"] = input_y
+      end
+    rescue 
+      event["#{@prefix}errmsg"] = "Unable to reproject tile coordinates"
+    end
+    # filter matched => make changes persistent
+    filter_matched(event)
+
+  end # def filter
+end
diff --git a/logstash.gemspec b/logstash.gemspec
index 69612b72338..b7a99c68888 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -69,6 +69,7 @@ Gem::Specification.new do |gem|
     gem.add_runtime_dependency "bouncy-castle-java", "1.5.0147"   #(MIT license)
     gem.add_runtime_dependency "jruby-openssl", "0.8.7"           #(CPL/GPL/LGPL license)
     gem.add_runtime_dependency "msgpack-jruby"                    #(Apache 2.0 license)
+    gem.add_runtime_dependency "geoscript", "0.1.0.pre"           #(MIT license)
   else
     gem.add_runtime_dependency "excon"    #(MIT license)
     gem.add_runtime_dependency "msgpack"  #(Apache 2.0 license)
diff --git a/spec/filters/wms.rb b/spec/filters/wms.rb
new file mode 100644
index 00000000000..c1fecd98b3e
--- /dev/null
+++ b/spec/filters/wms.rb
@@ -0,0 +1,85 @@
+require "test_utils"
+require "logstash/filters/wms"
+
+describe LogStash::Filters::Wms do
+  extend LogStash::RSpec
+
+  describe "regular calls logged into Varnish logs (apache combined)" do
+    config <<-CONFIG
+      filter {
+        grok { match => [ "message", "%{COMBINEDAPACHELOG}" ] }
+       wms { }
+      }
+    CONFIG
+
+    # regular WMS query (GetCapabilities) from varnish logs
+    sample '12.13.14.15 - - [23/Jan/2014:06:52:00 +0100] "GET http://wms.myserver.com/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities' \
+    ' HTTP/1.1" 200 202 "http://referer.com" "ArcGIS Client Using WinInet"' do
+      insist { subject["wms.service"] } == "wms"
+      insist { subject["wms.version"] } == "1.3.0"
+      insist { subject["wms.request"] } == "getcapabilities"
+    end
+
+    # WMS query (GetMap) from varnish logs
+    sample '12.34.56.78 - - [23/Jan/2014:06:52:20 +0100] "GET http://tile2.wms.de/mapproxy/service/?FORMAT=image%2Fpng&LAYERS=WanderlandEtappenNational,WanderlandEtappenRegional,WanderlandEtappenLokal,WanderlandEtappenHandicap&TRANSPARENT=TRUE&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&STYLES=&SRS=EPSG%3A21781&BBOX=804000,30000,932000,158000&WIDTH=256&HEIGHT=256 HTTP/1.1" 200 1447 "http://map.wanderland.ch/?lang=de&route=all&layer=wanderwegnetz" "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)"' do
+       insist { subject["wms.service"] } == "wms"
+       insist { subject["wms.version"] } == "1.1.1"
+       insist { subject["wms.request"] } == "getmap"
+       insist { subject["wms.layers"] } == ["wanderlandetappennational", "wanderlandetappenregional", "wanderlandetappenlokal", "wanderlandetappenhandicap"]
+       insist { subject["wms.styles"] } == ""
+       insist { subject["wms.srs"] } == "epsg:21781"
+       insist { subject["wms.input_bbox.minx"] } == 804000.0
+       insist { subject["wms.input_bbox.miny"] } == 30000.0
+       insist { subject["wms.input_bbox.maxx"] } == 932000.0
+       insist { subject["wms.input_bbox.maxy"] } == 158000.0
+       insist { subject["wms.output_bbox.minx"] } == 10.043259272201887
+       insist { subject["wms.output_bbox.miny"] } == 45.39141145053888
+       insist { subject["wms.output_bbox.maxx"] } == 11.764979420793644
+       insist { subject["wms.output_bbox.maxy"] } == 46.49090648227697
+       insist { subject["wms.width"] } == "256"
+       insist { subject["wms.height"] } == "256"
+       insist { subject["wms.format"] } == "image/png"
+       insist { subject["wms.transparent"] } == "true"
+     end
+  end
+  # we will no use only the request part without grok for readability
+  describe "regular calls (message containing only the request URI)" do
+    config <<-CONFIG
+      filter {
+       wms { }
+      }
+    CONFIG
+    # illegal SRS provided
+    sample 'http://tile2.wms.de/mapproxy/service/?SERVICE=WmS&SRS=EPSG%3A9999999&BBOX=804000,30000,932000,158000' do
+      insist { subject["wms.errmsg"] } == "Unable to reproject the bounding box"
+    end
+    # no reprojection needed
+    sample 'http://tile2.wms.de/mapproxy/service/?SERVICE=WmS&SRS=EPSG%3A4326&BBOX=804000,30000,932000,158000' do
+      insist { subject["wms.input_bbox.minx"] } == subject["wms.output_bbox.minx"]
+      insist { subject["wms.input_bbox.miny"] } == subject["wms.output_bbox.miny"]
+      insist { subject["wms.input_bbox.maxx"] } == subject["wms.output_bbox.maxx"]
+      insist { subject["wms.input_bbox.maxy"] } == subject["wms.output_bbox.maxy"]
+    end
+    # bbox provided without SRS (probably not valid in WMS standard)
+    # no reproj needed either
+    sample 'http://tile2.wms.de/mapproxy/service/?SERVICE=WmS&BBOX=804000,30000,932000,158000' do
+      insist { subject["wms.input_bbox.minx"] } == subject["wms.output_bbox.minx"]
+      insist { subject["wms.input_bbox.miny"] } == subject["wms.output_bbox.miny"]
+      insist { subject["wms.input_bbox.maxx"] } == subject["wms.output_bbox.maxx"]
+      insist { subject["wms.input_bbox.maxy"] } == subject["wms.output_bbox.maxy"]
+    end
+    # illegal bbox provided
+    sample 'http://tile2.wms.de/mapproxy/service/?SERVICE=WmS&CRS=EPSG%3A2154&BBOX=8040NOTAVALIDBBOX93084' do
+      insist { subject["wms.errmsg"] } == "Unable to parse the bounding box"
+    end
+    # Unparseable URL provided
+    sample 'this is not a valid url, service=wms' do
+      insist { subject["wms.errmsg"].start_with?("Unable to parse the provided request URI:") }
+    end
+
+
+
+  end
+
+end
+
diff --git a/spec/filters/wmts.rb b/spec/filters/wmts.rb
new file mode 100644
index 00000000000..a1f4b8ac881
--- /dev/null
+++ b/spec/filters/wmts.rb
@@ -0,0 +1,175 @@
+require "test_utils"
+require "logstash/filters/wmts"
+
+describe LogStash::Filters::Wmts do
+  extend LogStash::RSpec
+
+  describe "regular calls logged into Varnish logs (apache combined)" do
+    config <<-CONFIG
+      filter {
+        # First, waiting for varnish log file formats (combined apache logs)
+        grok { match => [ "message", "%{COMBINEDAPACHELOG}" ] }
+        # Then, parameters 
+        # Note: the 'wmts.' prefix should match the configuration of the plugin,
+        # e.g if "wmts { 'prefix' => 'gis' }", then you should adapt the grok filter
+        # accordingly.
+        #
+        grok {
+          match => [
+            "request", 
+            "(?<wmts.version>([0-9\.]{5}))\/(?<wmts.layer>([a-z0-9\.-]*))\/default\/(?<wmts.release>([0-9]{8}))\/(?<wmts.reference-system>([0-9]*))\/(?<wmts.zoomlevel>([0-9]*))\/(?<wmts.row>([0-9]*))\/(?<wmts.col>([0-9]*))\.(?<wmts.filetype>([a-zA-Z]*))"]
+        }
+        wmts { }
+      }
+    CONFIG
+
+    # regular WMTS query from a varnish log
+    sample '127.0.0.1 - - [20/Jan/2014:16:48:28 +0100] "GET http://wmts4.testserver.org/1.0.0/' \
+      'mycustomlayer/default/20130213/21781/23/470/561.jpeg HTTP/1.1" 200 2114 ' \
+      '"http://localhost/ajaxplorer/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36' \
+      '(KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36"' do
+        # checks that the query has been successfully parsed  
+        # and the geopoint correctly reprojected into wgs:84 
+        insist { subject["wmts.version"] } == "1.0.0"
+        insist { subject["wmts.layer"] } == "mycustomlayer"
+        insist { subject["wmts.release"] } == "20130213"
+        insist { subject["wmts.reference-system"] } == "21781"
+        insist { subject["wmts.zoomlevel"] } == "23"
+        insist { subject["wmts.row"] } == "470"
+        insist { subject["wmts.col"] } == "561"
+        insist { subject["wmts.filetype"] } == "jpeg"
+        insist { subject["wmts.service"] } == "wmts"
+        insist { subject["wmts.input_epsg"] } == "epsg:21781"
+        insist { subject["wmts.input_x"] } == 707488
+        insist { subject["wmts.input_y"] } == 109104
+        insist { subject["wmts.input_xy"] } == "707488,109104"
+        insist { subject["wmts.output_epsg"] } == "epsg:4326"
+        insist { subject["wmts.output_xy"] } == "8.829295858079231,46.12486163053951"
+        insist { subject["wmts.output_x"] } == 8.829295858079231
+        insist { subject["wmts.output_y"] } == 46.12486163053951
+      end
+
+    # query extracted from a varnish log, but not matching a wmts request
+    sample '83.77.200.25 - - [23/Jan/2014:06:51:55 +0100] "GET http://map.schweizmobil.ch/api/api.css HTTP/1.1"' \
+      ' 200 682 "http://www.schaffhauserland.ch/de/besenbeiz" ' \
+      '"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko"' do
+        insist { subject["tags"] }.include?("_grokparsefailure")
+    end
+
+    # query looking like a legit wmts log but actually contains garbage [1]
+    # - parameters from the grok filter cannot be cast into integers
+    sample '127.0.0.1 - - [20/Jan/2014:16:48:28 +0100] "GET http://wmts4.testserver.org/1.0.0/' \
+      'mycustomlayer/default/12345678////.raw HTTP/1.1" 200 2114 ' \
+      '"http://localhost//" "ozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36' \
+      '(KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36"' do
+         insist { subject['wmts.errmsg'].start_with?("Bad parameter received") }
+    end
+
+    # query looking like a legit wmts log but actually contains garbage
+    # * 99999999 is not a valid EPSG code (but still parseable as an integer)
+    sample '127.0.0.1 - - [20/Jan/2014:16:48:28 +0100] "GET http://wmts4.testserver.org/1.0.0/' \
+      'mycustomlayer/default/20130213/99999999/23/470/561.jpeg HTTP/1.1" 200 2114 ' \
+      '"http://localhost//" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36' \
+      '(KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36"' do
+         insist { subject['wmts.errmsg'] } == "Unable to reproject tile coordinates"
+    end
+  end
+
+  describe "Testing the epsg_mapping parameter" do
+    config <<-CONFIG
+      filter {
+        grok { match => [ "message", "%{COMBINEDAPACHELOG}" ] }
+        grok {
+          match => [
+            "request", 
+            "(?<wmts.version>([0-9\.]{5}))\/(?<wmts.layer>([a-z0-9\.-]*))\/default\/(?<wmts.release>([0-9]*))\/(?<wmts.reference-system>([a-z0-9]*))\/(?<wmts.zoomlevel>([0-9]*))\/(?<wmts.row>([0-9]*))\/(?<wmts.col>([0-9]*))\.(?<wmts.filetype>([a-zA-Z]*))"]
+        }
+        wmts { epsg_mapping => { 'swissgrid' => 21781 } }
+      }
+    CONFIG
+
+    # regular query needing a mapping
+    sample '11.12.13.14 - - [10/Feb/2014:16:27:26 +0100] "GET http://tile1.wmts.example.org/1.0.0/grundkarte/default/2013/swissgrid/9/371/714.png HTTP/1.1" 200 8334 "http://example.org" "Mozilla/5.0 (Windows NT 6.1; rv:26.0) Gecko/20100101 Firefox/26.0"' do
+      insist { subject["wmts.version"] } == "1.0.0"
+      insist { subject["wmts.layer"] } == "grundkarte"
+      insist { subject["wmts.release"] } == "2013"
+      insist { subject["wmts.reference-system"] } == "swissgrid"
+      insist { subject["wmts.zoomlevel"] } == "9"
+      insist { subject["wmts.row"] } == "371"
+      insist { subject["wmts.col"] } == "714"
+      insist { subject["wmts.filetype"] } == "png"
+      insist { subject["wmts.service"] } == "wmts"
+      # it should have been correctly mapped
+      insist { subject["wmts.input_epsg"] } == "epsg:21781"
+      insist { subject["wmts.input_x"] } == 320516000
+      insist { subject["wmts.input_y"] } == -166082000
+      insist { subject["wmts.input_xy"] } == "320516000,-166082000"
+      insist { subject["wmts.output_epsg"] } == "epsg:4326"
+      insist { subject["wmts.output_xy"] } == "7.438691675813199,-43.38015041464443"
+      insist { subject["wmts.output_x"] } == 7.438691675813199
+      insist { subject["wmts.output_y"] } == -43.38015041464443
+    end
+ 
+    # regular query which does not need a mapping
+    sample '11.12.13.14 - - [10/Feb/2014:16:27:26 +0100] "GET http://tile1.wmts.example.org/1.0.0/grundkarte/default/2013/21781/9/371/714.png HTTP/1.1" 200 8334 "http://example.org" "Mozilla/5.0 (Windows NT 6.1; rv:26.0) Gecko/20100101 Firefox/26.0"' do
+      insist { subject["wmts.version"] } == "1.0.0"
+      insist { subject["wmts.layer"] } == "grundkarte"
+      insist { subject["wmts.release"] } == "2013"
+      insist { subject["wmts.reference-system"] } == "21781"
+      insist { subject["wmts.zoomlevel"] } == "9"
+      insist { subject["wmts.row"] } == "371"
+      insist { subject["wmts.col"] } == "714"
+      insist { subject["wmts.filetype"] } == "png"
+      insist { subject["wmts.service"] } == "wmts"
+      insist { subject["wmts.input_epsg"] } == "epsg:21781"
+      insist { subject["wmts.input_x"] } == 320516000
+      insist { subject["wmts.input_y"] } == -166082000
+      insist { subject["wmts.input_xy"] } == "320516000,-166082000"
+      insist { subject["wmts.output_epsg"] } == "epsg:4326"
+      insist { subject["wmts.output_xy"] } == "7.438691675813199,-43.38015041464443"
+      insist { subject["wmts.output_x"] } == 7.438691675813199
+      insist { subject["wmts.output_y"] } == -43.38015041464443
+    end
+  end
+  describe "Testing a custom grid sent as parameter to the filter" do
+    config <<-CONFIG
+      filter {
+        grok { match => [ "message", "%{COMBINEDAPACHELOG}" ] }
+        grok {
+          match => [
+            "request", 
+            "(?<wmts.version>([0-9\.]{5}))\/(?<wmts.layer>([a-z0-9\.-]*))\/default\/(?<wmts.release>([0-9]*))\/(?<wmts.reference-system>([a-z0-9]*))\/(?<wmts.zoomlevel>([0-9]*))\/(?<wmts.row>([0-9]*))\/(?<wmts.col>([0-9]*))\.(?<wmts.filetype>([a-zA-Z]*))"]
+        }
+        wmts { 
+          epsg_mapping => { 'swissgrid' => 21781 }
+          x_origin => 420000
+          y_origin => 350000
+          tile_width => 256
+          tile_height => 256
+          resolutions => [ 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5, 0.25, 0.1, 0.05 ]
+        }
+      }
+    CONFIG
+
+    sample '1.2.3.4 - - [10/Feb/2014:18:06:12 +0100] "GET http://tile1.example.net/1.0.0/ortho/default/2013/swissgrid/9/374/731.jpeg HTTP/1.1" 200 13872 "http://example.net" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 Safari/537.36"' do
+      insist { subject["wmts.version"] } == "1.0.0"
+      insist { subject["wmts.layer"] } == "ortho"
+      insist { subject["wmts.release"] } == "2013"
+      insist { subject["wmts.reference-system"] } == "swissgrid"
+      insist { subject["wmts.zoomlevel"] } == "9"
+      insist { subject["wmts.row"] } == "374"
+      insist { subject["wmts.col"] } == "731"
+      insist { subject["wmts.filetype"] } == "jpeg"
+      insist { subject["wmts.service"] } == "wmts"
+      insist { subject["wmts.input_epsg"] } == "epsg:21781"
+      insist { subject["wmts.input_x"] } == 700896
+      insist { subject["wmts.input_y"] } == 206192
+      insist { subject["wmts.input_xy"] } == "700896,206192"
+      insist { subject["wmts.output_epsg"] } == "epsg:4326"
+      insist { subject["wmts.output_xy"] } == "8.765263559441715,46.999112812287045"
+      insist { subject["wmts.output_x"] } == 8.765263559441715
+      insist { subject["wmts.output_y"] } == 46.999112812287045
+    end
+  end
+end
+
diff --git a/tools/Gemfile.jruby-1.9.lock b/tools/Gemfile.jruby-1.9.lock
index ac15932b345..3ef1c207d1e 100644
--- a/tools/Gemfile.jruby-1.9.lock
+++ b/tools/Gemfile.jruby-1.9.lock
@@ -18,6 +18,8 @@ GEM
     bindata (1.6.0)
     blankslate (2.1.2.4)
     bouncy-castle-java (1.5.0147)
+    bson (1.9.2)
+    bson (1.9.2-java)
     buftok (0.1)
     builder (3.2.2)
     cabin (0.6.1)
@@ -53,9 +55,21 @@ GEM
       json
     gelfd (0.2.0)
     geoip (1.3.3)
+    geoscript (0.1.0.pre-java)
+      geotools-jars (>= 8.0)
+    geotools-jars (10.0-java)
     gmetric (0.1.3)
     haml (4.0.4)
       tilt
+    hashie (2.0.5)
+    heroku (3.1.0)
+      heroku-api (~> 0.3.7)
+      launchy (>= 0.3.2)
+      netrc (~> 0.7.7)
+      rest-client (~> 1.6.1)
+      rubyzip
+    heroku-api (0.3.15)
+      excon (~> 0.25.1)
     hitimes (1.2.1)
     hitimes (1.2.1-java)
     http (0.5.0)
@@ -71,8 +85,16 @@ GEM
     jruby-httpclient (1.1.1-java)
     jruby-openssl (0.8.7)
       bouncy-castle-java (>= 1.5.0147)
+    jruby-win32ole (0.8.5)
     json (1.8.1)
     json (1.8.1-java)
+    jwt (0.1.8)
+      multi_json (>= 1.5)
+    launchy (2.4.2)
+      addressable (~> 2.3)
+    launchy (2.4.2-java)
+      addressable (~> 2.3)
+      spoon (~> 0.0.1)
     mail (2.5.3)
       i18n (>= 0.4.0)
       mime-types (~> 1.16)
@@ -93,6 +115,7 @@ GEM
     multi_json (1.8.2)
     multipart-post (1.2.0)
     murmurhash3 (0.1.3)
+    netrc (0.7.7)
     nokogiri (1.6.0)
       mini_portile (~> 0.5.0)
     nokogiri (1.6.0-java)
@@ -197,6 +220,7 @@ DEPENDENCIES
   gelf (= 1.3.2)
   gelfd (= 0.2.0)
   geoip (>= 1.3.2)
+  geoscript (= 0.1.0.pre)
   gmetric (= 0.1.3)
   haml
   i18n (>= 0.6.6)
