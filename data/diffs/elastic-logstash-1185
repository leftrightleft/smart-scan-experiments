diff --git a/lib/logstash/filters/json.rb b/lib/logstash/filters/json.rb
index 2f6d471356b..e83de55882c 100644
--- a/lib/logstash/filters/json.rb
+++ b/lib/logstash/filters/json.rb
@@ -4,7 +4,7 @@
 
 # This is a JSON parsing filter. It takes an existing field which contains JSON and
 # expands it into an actual data structure within the Logstash event.
-# 
+#
 # By default it will place the parsed JSON in the root (top level) of the Logstash event, but this
 # filter can be configured to place the JSON into any arbitrary event field, using the
 # `target` configuration.
@@ -61,6 +61,38 @@ def filter(event)
     return unless event.include?(@source)
 
     source = event[@source]
+
+    begin
+      parsed = JSON.parse(source)
+      if parsed.is_a?(Array)
+        parsed.each do |e|
+          new_event = event.clone
+          dest = get_target(new_event)
+          dest.merge!(e)
+          parse_timestamp(new_event)
+          filter_matched(new_event)
+          yield new_event
+        end
+        event.cancel
+      else
+        dest = get_target(event)
+        dest.merge!(parsed)
+        parse_timestamp(event)
+        filter_matched(event)
+      end
+    rescue => e
+      event.tag("_jsonparsefailure")
+      @logger.warn("Trouble parsing json", :source => @source,
+                   :raw => event[@source], :exception => e)
+      return
+    end
+
+    @logger.debug("Event after json filter", :event => event)
+
+  end # def filter
+
+  private
+  def get_target(event)
     if @target.nil?
       # Default is to write to the root of the event.
       dest = event.to_hash
@@ -72,14 +104,10 @@ def filter(event)
         dest = event[@target] ||= {}
       end
     end
+    return dest
+  end # def get_target
 
-    begin
-      # TODO(sissel): Note, this will not successfully handle json lists
-      # like your text is '[ 1,2,3 ]' JSON.parse gives you an array (correctly)
-      # which won't merge into a hash. If someone needs this, we can fix it
-      # later.
-      dest.merge!(JSON.parse(source))
-
+  def parse_timestamp(event)
       # If no target, we target the root of the event object. This can allow
       # you to overwrite @timestamp. If so, let's parse it as a timestamp!
       if !@target && event[TIMESTAMP].is_a?(String)
@@ -88,17 +116,6 @@ def filter(event)
         # "@timestamp" outside of the date filter, but nobody listens... ;)
         event[TIMESTAMP] = Time.parse(event[TIMESTAMP]).utc
       end
-
-      filter_matched(event)
-    rescue => e
-      event.tag("_jsonparsefailure")
-      @logger.warn("Trouble parsing json", :source => @source,
-                   :raw => event[@source], :exception => e)
-      return
-    end
-
-    @logger.debug("Event after json filter", :event => event)
-
-  end # def filter
+  end # def parse_timestamp
 
 end # class LogStash::Filters::Json
