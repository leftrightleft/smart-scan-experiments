diff --git a/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java b/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
index e382cba4172..fc81c50f563 100644
--- a/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
+++ b/logstash-core/src/main/java/org/logstash/execution/LsConfiguration.java
@@ -10,11 +10,13 @@
  */
 public final class LsConfiguration {
 
+    private final Map<String, String> rawSettings;
+
     /**
      * @param raw Configuration Settings Map. Values are serialized.
      */
     public LsConfiguration(final Map<String, String> raw) {
-
+        this.rawSettings = raw;
     }
 
     public <T> T get(final PluginConfigSpec<T> configSpec) {
@@ -22,6 +24,11 @@ public <T> T get(final PluginConfigSpec<T> configSpec) {
         return null;
     }
 
+    public String getRawValue(PluginConfigSpec<?> configSpec) {
+        String rawValue = rawSettings.get(configSpec.name());
+        return rawValue == null ? (String)configSpec.defaultValue() : rawValue;
+    }
+
     public boolean contains(final PluginConfigSpec<?> configSpec) {
         // TODO: Implement
         return false;
@@ -37,6 +44,12 @@ public static PluginConfigSpec<String> stringSetting(final String name) {
         );
     }
 
+    public static PluginConfigSpec<String> stringSetting(final String name, final String defaultValue) {
+        return new PluginConfigSpec<>(
+                name, String.class, defaultValue, false, false
+        );
+    }
+
     public static PluginConfigSpec<String> requiredStringSetting(final String name) {
         return new PluginConfigSpec<>(name, String.class, null, false, true);
     }
diff --git a/logstash-core/src/main/java/org/logstash/execution/codecs/Line.java b/logstash-core/src/main/java/org/logstash/execution/codecs/Line.java
index b5d843658ef..45ee45c3579 100644
--- a/logstash-core/src/main/java/org/logstash/execution/codecs/Line.java
+++ b/logstash-core/src/main/java/org/logstash/execution/codecs/Line.java
@@ -6,6 +6,7 @@
 import org.logstash.execution.LogstashPlugin;
 import org.logstash.execution.LsConfiguration;
 import org.logstash.execution.LsContext;
+import org.logstash.execution.PluginHelper;
 import org.logstash.execution.plugins.PluginConfigSpec;
 
 import java.io.IOException;
@@ -17,8 +18,8 @@
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
+import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Consumer;
@@ -26,16 +27,16 @@
 @LogstashPlugin(name = "line")
 public class Line implements Codec {
 
-    /*
+    public static final String DEFAULT_DELIMITER = "\n";
+
     private static final PluginConfigSpec<String> CHARSET_CONFIG =
             LsConfiguration.stringSetting("charset", "UTF-8");
 
     private static final PluginConfigSpec<String> DELIMITER_CONFIG =
-            LsConfiguration.stringSetting("delimiter", System.lineSeparator());
+            LsConfiguration.stringSetting("delimiter", DEFAULT_DELIMITER);
 
     private static final PluginConfigSpec<String> FORMAT_CONFIG =
             LsConfiguration.stringSetting("format");
-    */
 
     static final String MESSAGE_FIELD = "message";
 
@@ -48,13 +49,9 @@ public class Line implements Codec {
     private String remainder = "";
 
     public Line(final LsConfiguration configuration, final LsContext context) {
-        /*
-        delimiter = configuration.get(DELIMITER_CONFIG);
-        charset = Charset.forName(configuration.get(CHARSET_CONFIG));
-        format = configuration.get(FORMAT_CONFIG);
-        */
-        delimiter = "\n";
-        charset = Charset.forName("UTF-8");
+        delimiter = configuration.getRawValue(DELIMITER_CONFIG);
+        charset = Charset.forName(configuration.getRawValue(CHARSET_CONFIG));
+        format = configuration.getRawValue(FORMAT_CONFIG);
         decoder = charset.newDecoder();
         decoder.onMalformedInput(CodingErrorAction.IGNORE);
     }
@@ -76,7 +73,7 @@ public void decode(ByteBuffer buffer, Consumer<Map<String, Object>> eventConsume
                 buffer.position(bufferPosition);
                 s = "";
             } else {
-                remainder = s.substring(lastIndex + 1, s.length());
+                remainder = s.substring(lastIndex + delimiter.length(), s.length());
                 s = s.substring(0, lastIndex);
             }
         }
@@ -125,7 +122,7 @@ public void encode(Event event, OutputStream output) {
 
     @Override
     public Collection<PluginConfigSpec<?>> configSchema() {
-        //return Arrays.asList(CHARSET_CONFIG, DELIMITER_CONFIG, FORMAT_CONFIG);
-        return Collections.EMPTY_LIST;
+        return PluginHelper.commonInputOptions(
+                Arrays.asList(CHARSET_CONFIG, DELIMITER_CONFIG, FORMAT_CONFIG));
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/execution/codecs/LineTest.java b/logstash-core/src/test/java/org/logstash/execution/codecs/LineTest.java
index 2a3c2be393f..c4a88d07c03 100644
--- a/logstash-core/src/test/java/org/logstash/execution/codecs/LineTest.java
+++ b/logstash-core/src/test/java/org/logstash/execution/codecs/LineTest.java
@@ -27,7 +27,7 @@ public void testSimpleDecode() {
     @Test
     public void testDecodeDefaultDelimiter() {
         String[] inputStrings = {"foo", "bar", "baz"};
-        String input = String.join(System.lineSeparator(), inputStrings);
+        String input = String.join(Line.DEFAULT_DELIMITER, inputStrings);
 
         testDecode(null, null, input, inputStrings.length - 1, 1, inputStrings);
     }
@@ -113,7 +113,7 @@ public void testDecodeWithMulticharTrailingDelimiter() {
     @Test
     public void testDecodeWithUtf8() {
         String input = "München 安装中文输入法";
-        testDecode(null, null, input + System.lineSeparator(), 1, 0, new String[]{input});
+        testDecode(null, null, input + Line.DEFAULT_DELIMITER, 1, 0, new String[]{input});
     }
 
     @Test
@@ -166,7 +166,7 @@ public void testDecodeAcrossMultibyteCharBoundary() {
     @Test
     public void testFlush() {
         String[] inputs = {"The", "quick", "brown", "fox", "jumps"};
-        String input = String.join(System.lineSeparator(), inputs);
+        String input = String.join(Line.DEFAULT_DELIMITER, inputs);
         testDecode(null, null, input, inputs.length - 1, 1, inputs);
     }
 
@@ -254,7 +254,7 @@ public void testEncode() {
         e.setField("myfield2", 43L);
         line.encode(e, outputStream);
 
-        String delimiter = System.lineSeparator();
+        String delimiter = Line.DEFAULT_DELIMITER;
         String resultingString = outputStream.toString();
         // first delimiter should occur at the halfway point of the string
         assertEquals(resultingString.indexOf(delimiter), (resultingString.length() / 2) - delimiter.length());
@@ -288,7 +288,7 @@ public void testEncodeWithFormat() {
         Line line = new Line(new LsConfiguration(Collections.singletonMap("format", "%{host}-%{message}")), null);
         String message = "Hello world";
         String host = "test";
-        String expectedOutput = host + "-" + message + System.lineSeparator();
+        String expectedOutput = host + "-" + message + Line.DEFAULT_DELIMITER;
         Event e = new Event();
         e.setField("message", message);
         e.setField("host", host);
diff --git a/logstash-core/src/test/java/org/logstash/execution/inputs/StdinTest.java b/logstash-core/src/test/java/org/logstash/execution/inputs/StdinTest.java
index d4e1e54aa9a..47a4d736fa1 100644
--- a/logstash-core/src/test/java/org/logstash/execution/inputs/StdinTest.java
+++ b/logstash-core/src/test/java/org/logstash/execution/inputs/StdinTest.java
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 import org.logstash.execution.LsConfiguration;
+import org.logstash.execution.codecs.Line;
 import org.logstash.execution.queue.QueueWriter;
 
 import java.io.IOException;
@@ -23,14 +24,14 @@ public class StdinTest {
 
     @Test
     public void testSimpleEvent() throws IOException {
-        String testInput = "foo" + System.lineSeparator();
+        String testInput = "foo" + Line.DEFAULT_DELIMITER;
         TestQueueWriter queueWriter = testStdin(testInput.getBytes());
         assertEquals(1, queueWriter.getEvents().size());
     }
 
     @Test
     public void testEvents() throws IOException {
-        String testInput = "foo" + System.lineSeparator() + "bar" + System.lineSeparator() + "baz" + System.lineSeparator();
+        String testInput = "foo" + Line.DEFAULT_DELIMITER + "bar" + Line.DEFAULT_DELIMITER + "baz" + Line.DEFAULT_DELIMITER;
         TestQueueWriter queueWriter = testStdin(testInput.getBytes());
         assertEquals(3, queueWriter.getEvents().size());
     }
@@ -38,7 +39,7 @@ public void testEvents() throws IOException {
     @Test
     public void testUtf8Events() throws IOException {
         String[] inputs = {"München1", "安装中文输入法", "München3"};
-        String testInput = String.join(System.lineSeparator(), inputs) + System.lineSeparator();
+        String testInput = String.join(Line.DEFAULT_DELIMITER, inputs) + Line.DEFAULT_DELIMITER;
         TestQueueWriter queueWriter = testStdin(testInput.getBytes());
 
         List<Map<String, Object>> events = queueWriter.getEvents();
