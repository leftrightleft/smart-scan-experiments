diff --git a/lib/logstash/pluginmanager/uninstall.rb b/lib/logstash/pluginmanager/uninstall.rb
index a9a37fed08b..a9ed7810814 100644
--- a/lib/logstash/pluginmanager/uninstall.rb
+++ b/lib/logstash/pluginmanager/uninstall.rb
@@ -13,8 +13,6 @@ class LogStash::PluginManager::Uninstall < LogStash::PluginManager::Command
   parameter "PLUGIN", "plugin name"
 
   def execute
-    LogStash::Bundler.setup!
-
     signal_error("File #{LogStash::Environment::GEMFILE_PATH} does not exist or is not writable, aborting") unless File.writable?(LogStash::Environment::GEMFILE_PATH)
 
     # make sure this is an installed plugin and present in Gemfile.
@@ -30,7 +28,7 @@ def execute
 
       # any errors will be logged to $stderr by invoke_bundler!
       # output, exception = LogStash::Bundler.invoke_bundler!(:install => true, :clean => true)
-      output = LogStash::Bundler.invoke_bundler!(:install => true)
+      output = LogStash::Bundler.invoke_bundler!(:install => true, :clean => true)
 
       remove_unused_locally_installed_gems!
     end
diff --git a/lib/logstash/pluginmanager/update.rb b/lib/logstash/pluginmanager/update.rb
index 396fcb75cb2..19700cf138c 100644
--- a/lib/logstash/pluginmanager/update.rb
+++ b/lib/logstash/pluginmanager/update.rb
@@ -18,7 +18,7 @@ def execute
       error_plugin_that_use_path!(local_gems)
     else
       plugins_with_path = plugins_arg & local_gems
-      error_plugin_that_use_path!(plugins_with_path) if plugins_with_path.size > 0 
+      error_plugin_that_use_path!(plugins_with_path) if plugins_with_path.size > 0
     end
 
     update_gems!
@@ -52,7 +52,7 @@ def update_gems!
     # any errors will be logged to $stderr by invoke_bundler!
     # Bundler cannot update and clean gems in one operation so we have to call the CLI twice.
     output = LogStash::Bundler.invoke_bundler!(:update => plugins)
-    output = LogStash::Bundler.invoke_bundler!(:clean => true) 
+    output = LogStash::Bundler.invoke_bundler!(:clean => true)
 
     display_updated_plugins(previous_gem_specs_map)
   rescue => exception
@@ -95,7 +95,6 @@ def display_updated_plugins(previous_gem_specs_map)
   # retrieve only the latest spec for all locally installed plugins
   # @return [Hash] result hash {plugin_name.downcase => plugin_spec}
   def find_latest_gem_specs
-    LogStash::Bundler.setup!
     LogStash::PluginManager.find_plugins_gem_specs.inject({}) do |result, spec|
       previous = result[spec.name.downcase]
       result[spec.name.downcase] = previous ? [previous, spec].max_by{|s| s.version} : spec
