diff --git a/lib/logstash/codecs/line.rb b/lib/logstash/codecs/line.rb
index 20216527b84..a2b1da21ca4 100644
--- a/lib/logstash/codecs/line.rb
+++ b/lib/logstash/codecs/line.rb
@@ -1,4 +1,5 @@
 require "logstash/codecs/base"
+require "logstash/util/charset"
 
 # Line-oriented text data.
 #
@@ -25,22 +26,14 @@ class LogStash::Codecs::Line < LogStash::Codecs::Base
   def register
     require "logstash/util/buftok"
     @buffer = FileWatch::BufferedTokenizer.new
+    @converter = LogStash::Util::Charset.new(@charset)
+    @converter.logger = @logger
   end
   
   public
   def decode(data)
     @buffer.extract(data).each do |line|
-      line.force_encoding(@charset)
-      if @charset != "UTF-8"
-        # The user has declared the character encoding of this data is
-        # something other than UTF-8. Let's convert it (as cleanly as possible)
-        # into UTF-8 so we can use it with JSON, etc.
-
-        # To convert, we first tell ruby the string is *really* encoded as
-        # somethign else (@charset), then we convert it to UTF-8.
-        data = data.encode("UTF-8", :invalid => :replace, :undef => :replace)
-      end
-      yield LogStash::Event.new({"message" => line})
+      yield LogStash::Event.new("message" => @converter.convert(line))
     end
   end # def decode
 
diff --git a/lib/logstash/codecs/plain.rb b/lib/logstash/codecs/plain.rb
index b4498603799..d4d63236e7c 100644
--- a/lib/logstash/codecs/plain.rb
+++ b/lib/logstash/codecs/plain.rb
@@ -1,4 +1,5 @@
 require "logstash/codecs/base"
+require "logstash/util/charset"
 
 # The "plain" codec is for plain text with no delimiting between events.
 #
@@ -22,17 +23,16 @@ class LogStash::Codecs::Plain < LogStash::Codecs::Base
   #
   # This only affects "plain" format logs since json is UTF-8 already.
   config :charset, :validate => ::Encoding.name_list, :default => "UTF-8"
-  
+
+  public
+  def register
+    @converter = LogStash::Util::Charset.new(@charset)
+    @converter.logger = @logger
+  end
+
   public
   def decode(data)
-    data.force_encoding(@charset)
-    if @charset != "UTF-8"
-      # The user has declared the character encoding of this data is
-      # something other than UTF-8. Let's convert it (as cleanly as possible)
-      # into UTF-8 so we can use it with JSON, etc.
-      data = data.encode("UTF-8", :invalid => :replace, :undef => :replace)
-    end
-    yield LogStash::Event.new({"message" => data})
+    yield LogStash::Event.new("message" => @converter.convert(data))
   end # def decode
 
   public
diff --git a/lib/logstash/util/charset.rb b/lib/logstash/util/charset.rb
new file mode 100644
index 00000000000..4f0e3f42097
--- /dev/null
+++ b/lib/logstash/util/charset.rb
@@ -0,0 +1,38 @@
+require "logstash/namespace"
+require "logstash/util"
+
+class LogStash::Util::Charset
+  attr_accessor :logger
+  def initialize(charset)
+    @charset = charset
+  end
+
+  def convert(data)
+    data.force_encoding(@charset)
+    if @charset == "UTF-8"
+      # Some users don't know the charset of their logs or just don't know they
+      # can set the charset setting.
+      if !data.valid_encoding?
+        @logger.warn("Received an event that has a different character encoding than you configured.", :text => data.inspect[1..-2], :expected_charset => @charset)
+        #if @force_lossy_charset_conversion
+          ## Janky hack to force ruby to re-encode UTF-8 with replacement chars.
+          #data.force_encoding("CP65001")
+          #data = data.encode("UTF-8", :invalid => :replace, :undef => :replace)
+        #else
+        #end
+
+        # A silly hack to help convert some of the unknown bytes to
+        # somewhat-readable escape codes. The [1..-2] is to trim the quotes
+        # ruby puts on the value.
+        data = data.inspect[1..-2]
+      else
+        # The user has declared the character encoding of this data is
+        # something other than UTF-8. Let's convert it (as cleanly as possible)
+        # into UTF-8 so we can use it with JSON, etc.
+        data = data.encode("UTF-8", :invalid => :replace, :undef => :replace)
+      end
+    end
+    return data
+  end # def convert
+end # class LogStash::Util::Charset
+
