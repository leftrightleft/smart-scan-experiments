diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 532bf9989cc..4f57d0c7a16 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -333,7 +333,7 @@ def dispatch_events(converge_results)
       when LogStash::PipelineAction::Reload
         dispatcher.fire(:pipeline_stopped, get_pipeline(action.pipeline_id))
       when LogStash::PipelineAction::Stop
-        dispatcher.fire(:pipeline_started, get_pipeline(action.pipeline_id))
+        dispatcher.fire(:pipeline_stopped, get_pipeline(action.pipeline_id))
       end
     end
   end
diff --git a/x-pack/lib/monitoring/inputs/metrics.rb b/x-pack/lib/monitoring/inputs/metrics.rb
index 6f77f0bea93..442ce926674 100644
--- a/x-pack/lib/monitoring/inputs/metrics.rb
+++ b/x-pack/lib/monitoring/inputs/metrics.rb
@@ -54,7 +54,6 @@ def register
       @last_updated_pipeline_hashes = []
       @es_options = es_options_from_settings_or_modules(FEATURE, @settings)
       setup_license_checker(FEATURE)
-      configure_snapshot_poller
     end
 
     def pipeline_started(agent, pipeline)
@@ -70,7 +69,7 @@ def configure_snapshot_poller
         :execution_interval => @collection_interval,
         :timeout_interval => @collection_timeout_interval
       }) do
-        update(metric.collector.snapshot_metric)
+        update(metric.collector.snapshot_metric) unless @agent.nil?
       end
 
       @timer_task.add_observer(TimerTaskLogger.new)
@@ -80,6 +79,8 @@ def run(arg_queue)
         @logger.debug("Metric: input started")
         @queue = arg_queue
 
+        configure_snapshot_poller
+
         # This must be invoked here because we need a queue to store the data
         LogStash::PLUGIN_REGISTRY.hooks.register_hooks(LogStash::Agent, self)
 
