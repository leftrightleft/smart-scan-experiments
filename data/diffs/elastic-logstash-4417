diff --git a/logstash-core-event/lib/logstash/string_interpolation.rb b/logstash-core-event/lib/logstash/string_interpolation.rb
index 643160c27c3..d0e2b94e242 100644
--- a/logstash-core-event/lib/logstash/string_interpolation.rb
+++ b/logstash-core-event/lib/logstash/string_interpolation.rb
@@ -110,8 +110,12 @@ def evaluate(event)
   end
 
   class KeyNode
+    KEY_NODE_DEFAULT_DELIMITER = ":"
+
     def initialize(key)
-      @key = key
+      key_default = key.split(KEY_NODE_DEFAULT_DELIMITER, 2)
+      @key = key_default[0]
+      @default = key_default[1]
     end
 
     def evaluate(event)
@@ -119,7 +123,11 @@ def evaluate(event)
 
       case value
       when nil
-        "%{#{@key}}"
+        if @default.nil?
+          return "%{#{@key}}"
+        else
+          return @default
+        end
       when Array
         value.join(",")
       when Hash
diff --git a/logstash-core-event/spec/logstash/event_spec.rb b/logstash-core-event/spec/logstash/event_spec.rb
index 23b3a8a367c..b2dea403feb 100644
--- a/logstash-core-event/spec/logstash/event_spec.rb
+++ b/logstash-core-event/spec/logstash/event_spec.rb
@@ -123,6 +123,20 @@
           expect(subject.sprintf("%{unkown_pattern}").encoding).to eq(Encoding::UTF_8)
         end
       end
+
+      context "default value" do
+        it "should not evaluate without default value" do
+          expect(subject.sprintf("%{undefined-field}")).to eq("%{undefined-field}")
+        end
+
+        it "should use default value, if field is not found" do
+          expect(subject.sprintf("%{undefined-field:na}")).to eq("na")
+        end
+
+        it "should use empty default value, if field is not found" do
+          expect(subject.sprintf("%{undefined-field:}")).to eq("")
+        end
+      end
     end
 
     context "#[]" do
