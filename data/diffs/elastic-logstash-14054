diff --git a/x-pack/lib/filters/geoip/download_manager.rb b/x-pack/lib/filters/geoip/download_manager.rb
index c3d6fee604a..eb7586155d9 100644
--- a/x-pack/lib/filters/geoip/download_manager.rb
+++ b/x-pack/lib/filters/geoip/download_manager.rb
@@ -93,7 +93,9 @@ def download_database(database_type, dirname, db_info)
       actual_url = download_url(db_info['url'])
       logger.debug? && logger.debug("download #{actual_url}")
 
-      Down.download(actual_url, destination: zip_path)
+      options = { destination: zip_path }
+      options.merge!({proxy: ENV['http_proxy']}) if ENV.include?('http_proxy')
+      Down.download(actual_url, options)
       raise "the new download has wrong checksum" if md5(zip_path) != db_info['md5_hash']
 
       logger.debug("new database downloaded in ", :path => zip_path)
diff --git a/x-pack/spec/filters/geoip/download_manager_spec.rb b/x-pack/spec/filters/geoip/download_manager_spec.rb
index af0412b80b3..a245eb847d8 100644
--- a/x-pack/spec/filters/geoip/download_manager_spec.rb
+++ b/x-pack/spec/filters/geoip/download_manager_spec.rb
@@ -41,15 +41,24 @@
       end
 
       context "when ENV['http_proxy'] is set" do
+        let(:mock_resp) { JSON.parse(::File.read(::File.expand_path("./fixtures/normal_resp.json", ::File.dirname(__FILE__)))) }
+        let(:db_info) { mock_resp[1] }
         let(:proxy_url) { 'http://user:pass@example.com:1234' }
 
         around(:each) { |example| with_environment('http_proxy' => proxy_url, &example) }
 
-        it "initializes the client with the proxy" do
+        it "initializes the rest client with the proxy" do
           expect(::Manticore::Client).to receive(:new).with(a_hash_including(:proxy => proxy_url)).and_call_original
 
           download_manager.send(:rest_client)
         end
+
+        it "download database with the proxy" do
+          expect(download_manager).to receive(:md5).and_return(db_info['md5_hash'])
+          expect(::Down).to receive(:download).with(db_info['url'], a_hash_including(:proxy => proxy_url)).and_return(true)
+
+          download_manager.send(:download_database, database_type, second_dirname, db_info)
+        end
       end
     end
 
