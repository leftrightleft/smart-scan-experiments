diff --git a/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java b/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
index 32f6236879d..2580ac2f375 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/monitors/ProcessMonitor.java
@@ -53,7 +53,7 @@ public static class Report {
             this.isUnix = osMxBean instanceof UnixOperatingSystemMXBean;
             // Defaults are -1
             if (this.isUnix) {
-                UnixOperatingSystemMXBean unixOsBean = (UnixOperatingSystemMXBean) osMxBean;;
+                UnixOperatingSystemMXBean unixOsBean = (UnixOperatingSystemMXBean) osMxBean;
 
                 this.openFds = unixOsBean.getOpenFileDescriptorCount();
                 this.maxFds =  unixOsBean.getMaxFileDescriptorCount();
@@ -61,9 +61,19 @@ public static class Report {
                     unixOsBean.getProcessCpuTime(), TimeUnit.NANOSECONDS
                 );
                 this.cpuProcessPercent = scaleLoadToPercent(unixOsBean.getProcessCpuLoad());
-                this.cpuSystemPercent = getSystemCpuLoad();
+                this.cpuSystemPercent = getSystemCpuLoad(unixOsBean);
 
                 this.memTotalVirtualInBytes = unixOsBean.getCommittedVirtualMemorySize();
+            } else {
+                com.sun.management.OperatingSystemMXBean otherOsBean = (com.sun.management.OperatingSystemMXBean) osMxBean;
+
+                this.cpuMillisTotal = TimeUnit.MILLISECONDS.convert(
+                        otherOsBean.getProcessCpuTime(), TimeUnit.NANOSECONDS
+                );
+                this.cpuProcessPercent = scaleLoadToPercent(otherOsBean.getProcessCpuLoad());
+                this.cpuSystemPercent = getSystemCpuLoad(otherOsBean);
+
+                this.memTotalVirtualInBytes = otherOsBean.getCommittedVirtualMemorySize();
             }
         }
 
@@ -86,12 +96,8 @@ public Map<String, Object> toMap() {
         }
 
         private static short scaleLoadToPercent(double load) {
-            if (osMxBean instanceof UnixOperatingSystemMXBean) {
-                if (load >= 0) {
-                    return (short) (load * 100);
-                } else {
-                    return -1;
-                }
+            if (load >= 0) {
+                return (short) (load * 100);
             } else {
                 return -1;
             }
@@ -100,12 +106,12 @@ private static short scaleLoadToPercent(double load) {
         // The method `getSystemCpuLoad` is deprecated in favour of `getCpuLoad` since JDK14
         // This method uses reflection to use the correct method depending on the version of
         // the JDK being used.
-        private short getSystemCpuLoad() {
+        private short getSystemCpuLoad(OperatingSystemMXBean mxBeanInstance) {
             if (CPU_LOAD_METHOD == null){
                 return -1;
             }
             try {
-                return scaleLoadToPercent((double)CPU_LOAD_METHOD.invoke(osMxBean));
+                return scaleLoadToPercent((double) CPU_LOAD_METHOD.invoke(mxBeanInstance));
             } catch (Exception e){
                 return -1;
             }
diff --git a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
index 95e3e7d8b6f..a4d8fcb159a 100644
--- a/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
+++ b/logstash-core/src/test/java/org/logstash/instruments/monitors/ProcessMonitorTest.java
@@ -45,7 +45,6 @@ public void testReportFDStats(){
     @SuppressWarnings("unchecked")
     public void testReportCpuStats(){
         Map<String, Object> processStats = ProcessMonitor.detect().toMap();
-        assumeTrue((Boolean) processStats.get("is_unix"));
         assertThat("cpu", processStats.get("cpu"), instanceOf(Map.class));
         Map<String, Object> cpuStats = (Map<String, Object>) processStats.get("cpu");
         assertThat("cpu.process_percent", (Short)cpuStats.get("process_percent") >= 0, is(true));
