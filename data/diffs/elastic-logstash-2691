diff --git a/lib/logstash/bundler.rb b/lib/logstash/bundler.rb
index b645a1a1cba..bae332452d1 100644
--- a/lib/logstash/bundler.rb
+++ b/lib/logstash/bundler.rb
@@ -1,5 +1,7 @@
 require "bundler"
 require "bundler/cli"
+require 'fileutils'
+require 'yaml'
 
 module Bundler
   # Patch bundler to write a .lock file specific to the version of ruby.
@@ -66,6 +68,10 @@ def self.invoke_bundler!(options = {})
       ENV["BUNDLE_GEMFILE"] = LogStash::Environment::GEMFILE_PATH
       ENV["BUNDLE_WITHOUT"] = options[:without].join(":")
 
+      # Update the `.bundler/config` to contains at least the BUNDLE_PATH
+      # This is necessary because `bundle clean` doesnt obey to ENV['BUNDLE_PATH']
+      update_bundler_config({ "BUNDLE_PATH" => LogStash::Environment::BUNDLE_DIR })
+
       try = 0
 
       # capture_stdout also traps any raised exception and pass them back as the function return [output, exception]
@@ -97,6 +103,21 @@ def self.invoke_bundler!(options = {})
       end
     end
 
+    def self.update_bundler_config(options)
+      bundle_config_path = ::File.join(LogStash::Environment::LOGSTASH_HOME, '.bundle')
+      config_file = ::File.join(bundle_config_path, 'config')
+
+      if ::File.exist?(config_file)
+        content = YAML.load_file(config_file)
+      else
+        FileUtils.mkdir_p(bundle_config_path)
+        content = {}
+      end
+
+      content.merge!(options)
+      ::File.open(config_file, 'w') { |f| f.write(content.to_yaml) }
+    end
+
     # build Bundler::CLI.start arguments array from the given options hash
     # @param option [Hash] the invoke_bundler! options hash
     # @return [Array<String>] Bundler::CLI.start string arguments array
@@ -121,4 +142,4 @@ def self.bundler_arguments(options = {})
       arguments.flatten
     end
   end
-end
\ No newline at end of file
+end
