diff --git a/lib/logstash/outputs/file.rb b/lib/logstash/outputs/file.rb
index 4ca7b98ec50..d5df9597eb6 100644
--- a/lib/logstash/outputs/file.rb
+++ b/lib/logstash/outputs/file.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/namespace"
 require "logstash/outputs/base"
+require "logstash/errors"
 require "zlib"
 
 # This output will write events to files on disk. You can use fields
@@ -10,13 +11,16 @@ class LogStash::Outputs::File < LogStash::Outputs::Base
   config_name "file"
   milestone 2
 
-  # The path to the file to write. Event fields can be used here, 
+  # The path to the file to write. Event fields can be used here,
   # like "/var/log/logstash/%{host}/%{application}"
-  # One may also utilize the path option for date-based log 
+  # One may also utilize the path option for date-based log
   # rotation via the joda time format. This will use the event
   # timestamp.
-  # E.g.: path => "./test-%{+YYYY-MM-dd}.txt" to create 
-  # ./test-2013-05-29.txt 
+  # E.g.: path => "./test-%{+YYYY-MM-dd}.txt" to create
+  # ./test-2013-05-29.txt
+  #
+  # If you use an absolute path you cannot start with a dynamic string.
+  # E.g: /%{myfield}/, /test-%{myfield}/ are not valid paths
   config :path, :validate => :string, :required => true
 
   # The maximum size of file to write. When the file exceeds this
@@ -35,13 +39,17 @@ class LogStash::Outputs::File < LogStash::Outputs::Base
   # event will be written as a single line.
   config :message_format, :validate => :string
 
-  # Flush interval (in seconds) for flushing writes to log files. 
+  # Flush interval (in seconds) for flushing writes to log files.
   # 0 will flush on every message.
   config :flush_interval, :validate => :number, :default => 2
 
   # Gzip the output stream before writing to disk.
   config :gzip, :validate => :boolean, :default => false
 
+  # If the generated path is invalid, the events will be saved
+  # into this file and inside the defined path.
+  config :filename_failure, :validate => :string, :default => '_filepath_failures'
+
   public
   def register
     require "fileutils" # For mkdir_p
@@ -49,34 +57,90 @@ def register
     workers_not_supported
 
     @files = {}
+    
+    @path = File.expand_path(path)
+
+    validate_path
+
+    if path_with_field_ref?
+      @file_root = extract_file_root
+      @failure_path = File.join(@file_root, @filename_failure)
+    end
+
     now = Time.now
     @last_flush_cycle = now
     @last_stale_cleanup_cycle = now
-    flush_interval = @flush_interval.to_i
+    @flush_interval = @flush_interval.to_i
     @stale_cleanup_interval = 10
   end # def register
 
+  private
+  def validate_path
+    root_directory = @path.split(File::SEPARATOR).select { |item| !item.empty? }.shift
+
+    if (root_directory =~ /%\{[^}]+\}/) != nil
+      @logger.error("File: The starting part of the path should not be dynamic.", :path => @path)
+      raise LogStash::ConfigurationError.new("The starting part of the path should not be dynamic.")
+    end
+  end
+
   public
   def receive(event)
     return unless output?(event)
 
-    path = event.sprintf(@path)
-    fd = open(path)
-
-    # TODO(sissel): Check if we should rotate the file.
+    file_output_path = generate_filepath(event)
 
-    if @message_format
-      output = event.sprintf(@message_format)
-    else
-      output = event.to_json
+    if path_with_field_ref? && !inside_file_root?(file_output_path)
+      @logger.warn("File: the event tried to write outside the files root, writing the event to the failure file",  :event => event, :filename => @failure_path)
+      file_output_path = @failure_path
     end
 
-    fd.write(output)
+    output = format_message(event)
+    write_event(file_output_path, output)
+  end # def receive
+
+  private
+  def inside_file_root?(log_path)
+    target_file = File.expand_path(log_path)
+    return target_file.start_with?("#{@file_root.to_s}/")
+  end
+
+  private
+  def write_event(log_path, event)
+    @logger.debug("File, writing event to file.", :filename => log_path)
+    fd = open(log_path)
+
+    # TODO(sissel): Check if we should rotate the file.
+
+    fd.write(event)
     fd.write("\n")
 
     flush(fd)
     close_stale_files
-  end # def receive
+  end
+
+  private
+  def generate_filepath(event)
+    event.sprintf(@path)
+  end
+
+  private
+  def path_with_field_ref?
+    path =~ /%\{[^}]+\}/
+  end
+
+  def format_message(event)
+    if @message_format
+      event.sprintf(@message_format)
+    else
+      event.to_json
+    end
+  end
+
+  def extract_file_root
+    extracted_path = File.expand_path(path.gsub(/%{.+/, ''))
+    Pathname.new(extracted_path).expand_path
+  end
 
   def teardown
     @logger.debug("Teardown: closing files")
@@ -85,7 +149,7 @@ def teardown
         fd.close
         @logger.debug("Closed file #{path}", :fd => fd)
       rescue Exception => e
-        @logger.error("Excpetion while flushing and closing files.", :exception => e)
+        @logger.error("Exception while flushing and closing files.", :exception => e)
       end
     end
     finished
@@ -136,7 +200,7 @@ def open(path)
     dir = File.dirname(path)
     if !Dir.exists?(dir)
       @logger.info("Creating directory", :directory => dir)
-      FileUtils.mkdir_p(dir) 
+      FileUtils.mkdir_p(dir)
     end
 
     # work around a bug opening fifos (bug JRUBY-6280)
diff --git a/spec/core/event_spec.rb b/spec/core/event_spec.rb
index eaf19c08201..33cd172382e 100644
--- a/spec/core/event_spec.rb
+++ b/spec/core/event_spec.rb
@@ -380,5 +380,4 @@
     end
 
   end
-
 end
diff --git a/spec/outputs/file_spec.rb b/spec/outputs/file_spec.rb
index aef261acc2e..b5c4279a4ea 100644
--- a/spec/outputs/file_spec.rb
+++ b/spec/outputs/file_spec.rb
@@ -1,73 +1,206 @@
+# encoding: UTF-8
 require "spec_helper"
 require "logstash/outputs/file"
+require "logstash/event"
 require "logstash/json"
+require "stud/temporary"
 require "tempfile"
+require "uri"
 
 describe LogStash::Outputs::File do
-  
-
   describe "ship lots of events to a file" do
-    event_count = 10000 + rand(500)
     tmp_file = Tempfile.new('logstash-spec-output-file')
+    event_count = 10000 + rand(500)
 
     config <<-CONFIG
-      input {
-        generator {
-          message => "hello world"
-          count => #{event_count}
-          type => "generator"
-        }
+    input {
+      generator {
+        message => "hello world"
+        count => #{event_count}
+        type => "generator"
       }
-      output {
-        file {
-          path => "#{tmp_file.path}"
-        }
+    }
+    output {
+      file {
+        path => "#{tmp_file.path}"
       }
+    }
     CONFIG
 
     agent do
       line_num = 0
+      
       # Now check all events for order and correctness.
-      File.foreach(tmp_file) do |line|
+      tmp_file.each_line do |line|
         event = LogStash::Event.new(LogStash::Json.load(line))
         insist {event["message"]} == "hello world"
         insist {event["sequence"]} == line_num
         line_num += 1
       end
+
       insist {line_num} == event_count
     end # agent
   end
 
   describe "ship lots of events to a file gzipped" do
-    event_count = 10000 + rand(500)
-    tmp_file = Tempfile.new('logstash-spec-output-file')
+    Stud::Temporary.file('logstash-spec-output-file') do |tmp_file|
+      event_count = 10000 + rand(500)
 
-    config <<-CONFIG
-      input {
-        generator {
-          message => "hello world"
-          count => #{event_count}
-          type => "generator"
+      config <<-CONFIG
+        input {
+          generator {
+            message => "hello world"
+            count => #{event_count}
+            type => "generator"
+          }
         }
-      }
-      output {
-        file {
-          path => "#{tmp_file.path}"
-          gzip => true
+        output {
+          file {
+            path => "#{tmp_file.path}"
+            gzip => true
+          }
         }
-      }
-    CONFIG
+      CONFIG
 
-    agent do
-      line_num = 0
-      # Now check all events for order and correctness.
-      Zlib::GzipReader.open(tmp_file.path).each_line do |line|
-        event = LogStash::Event.new(LogStash::Json.load(line))
-        insist {event["message"]} == "hello world"
-        insist {event["sequence"]} == line_num
-        line_num += 1
+      agent do
+        line_num = 0
+        # Now check all events for order and correctness.
+        Zlib::GzipReader.open(tmp_file.path).each_line do |line|
+          event = LogStash::Event.new(LogStash::Json.load(line))
+          insist {event["message"]} == "hello world"
+          insist {event["sequence"]} == line_num
+          line_num += 1
+        end
+        insist {line_num} == event_count
+      end # agent
+    end
+  end
+
+  describe "#register" do
+    it 'doesnt allow the path to start with a dynamic string' do
+      path = '/%{name}'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.to raise_error(LogStash::ConfigurationError)
+    end
+
+    it 'doesnt allow the root directory to have some dynamic part' do
+      path = '/a%{name}/'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.to raise_error(LogStash::ConfigurationError)
+
+      path = '/a %{name}/'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.to raise_error(LogStash::ConfigurationError)
+
+      path = '/a- %{name}/'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.to raise_error(LogStash::ConfigurationError)
+
+      path = '/a- %{name}'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.to raise_error(LogStash::ConfigurationError)
+    end
+
+    it 'allow to have dynamic part after the file root' do
+      path = '/tmp/%{name}'
+      output = LogStash::Outputs::File.new({ "path" => path })
+      expect { output.register }.not_to raise_error
+    end
+  end
+
+  describe "receiving events" do
+    context "when using an interpolated path" do
+      context "when trying to write outside the files root directory" do
+        let(:bad_event) do
+          event = LogStash::Event.new
+          event['error'] = '../uncool/directory'
+          event
+        end
+
+        it 'writes the bad event in the specified error file' do
+          Stud::Temporary.directory('filepath_error') do |path|
+            config = { 
+              "path" => "#{path}/%{error}",
+              "filename_failure" => "_error"
+            }
+
+            # Trying to write outside the file root
+            outside_path = "#{'../' * path.split(File::SEPARATOR).size}notcool"
+            bad_event["error"] = outside_path
+
+
+            output = LogStash::Outputs::File.new(config)
+            output.register
+            output.receive(bad_event)
+
+            error_file = File.join(path, config["filename_failure"])
+
+            expect(File.exist?(error_file)).to eq(true)
+          end
+        end
+
+        it 'doesnt decode relatives paths urlencoded' do
+          Stud::Temporary.directory('filepath_error') do |path|
+            encoded_once = "%2E%2E%2ftest"  # ../test
+            encoded_twice = "%252E%252E%252F%252E%252E%252Ftest" # ../../test
+
+            output = LogStash::Outputs::File.new({ "path" =>  "/#{path}/%{error}"})
+            output.register
+
+            bad_event['error'] = encoded_once
+            output.receive(bad_event)
+
+            bad_event['error'] = encoded_twice
+            output.receive(bad_event)
+
+            expect(Dir.glob(File.join(path, "*")).size).to eq(2)
+          end
+        end
+
+        it 'doesnt write outside the file if the path is double escaped' do
+          Stud::Temporary.directory('filepath_error') do |path|
+            output = LogStash::Outputs::File.new({ "path" =>  "/#{path}/%{error}"})
+            output.register
+
+            bad_event['error'] = '../..//test'
+            output.receive(bad_event)
+
+            expect(Dir.glob(File.join(path, "*")).size).to eq(1)
+          end
+        end
       end
-      insist {line_num} == event_count
-    end # agent
+
+      context 'when trying to write inside the file root directory' do
+        it 'write the event to the generated filename' do
+          good_event = LogStash::Event.new
+          good_event['error'] = '42.txt'
+
+          Stud::Temporary.directory do |path|
+            config = { "path" => "#{path}/%{error}" }
+            output = LogStash::Outputs::File.new(config)
+            output.register
+            output.receive(good_event)
+
+            good_file = File.join(path, good_event['error'])
+            expect(File.exist?(good_file)).to eq(true)
+          end
+        end
+
+        it 'write the event to the generated filename with multiple deep' do
+          good_event = LogStash::Event.new
+          good_event['error'] = '/inside/errors/42.txt'
+
+          Stud::Temporary.directory do |path|
+            config = { "path" => "#{path}/%{error}" }
+            output = LogStash::Outputs::File.new(config)
+            output.register
+            output.receive(good_event)
+
+            good_file = File.join(path, good_event['error'])
+            expect(File.exist?(good_file)).to eq(true)
+          end
+        end
+      end
+    end
   end
 end
