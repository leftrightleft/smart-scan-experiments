diff --git a/lib/logstash/filters/dns.rb b/lib/logstash/filters/dns.rb
index 46bb0755574..f367254f79e 100644
--- a/lib/logstash/filters/dns.rb
+++ b/lib/logstash/filters/dns.rb
@@ -8,17 +8,15 @@
 require "logstash/namespace"
 
 # The DNS filter performs a lookup (either an A record/CNAME record lookup
-# or a reverse lookup at the PTR record) on records specified under the
-# "reverse" and "resolve" arrays.
+# or a reverse lookup at the PTR record) on the record specified in the
+# "source" field.
 #
 # The config should look like this:
 #
 #     filter {
 #       dns {
-#         type => 'type'
-#         reverse => [ "source_host", "field_with_address" ]
-#         resolve => [ "field_with_fqdn" ]
-#         action => "replace"
+#         source => [ "client_ip" ]
+#         target => [ "client_hostname" ]
 #       }
 #     }
 #
@@ -33,23 +31,15 @@ class LogStash::Filters::DNS < LogStash::Filters::Base
   config_name "dns"
   milestone 2
 
-  # Reverse resolve one or more fields.
-  config :reverse, :validate => :array
+  # The field containing the hostname or ip address to look up
+  config :source, :validate => :string, :required => true
 
-  # Forward resolve one or more fields.
-  config :resolve, :validate => :array
-
-  # Determine what action to do: append or replace the values in the fields
-  # specified under "reverse" and "resolve."
-  config :action, :validate => [ "append", "replace" ], :default => "append"
+  # The field where the result should be written to.
+  config :target, :validate => :string, :default => "dns"
 
   # Use custom nameserver.
   config :nameserver, :validate => :string
 
-  # TODO(sissel): make 'action' required? This was always the intent, but it
-  # due to a typo it was never enforced. Thus the default behavior in past
-  # versions was 'append' by accident.
-
   # resolv calls will be wrapped in a timeout instance
   config :timeout, :validate => :number, :default => 2
 
@@ -70,134 +60,56 @@ def register
   def filter(event)
     return unless filter?(event)
 
-    if @resolve
-      begin
-        status = Timeout::timeout(@timeout) {
-          resolve(event)
-        }
-      rescue Timeout::Error
-        @logger.debug("DNS: resolve action timed out")
+    raw = event[@source]
+    if raw.is_a?(Array)
+      if raw.length > 1
+        @logger.warn("DNS: skipping resolve, can't deal with multiple values", :field => @source, :value => raw)
         return
       end
+      raw = raw.first
     end
 
-    if @reverse
-      begin
+    result = nil
+
+    begin
+      if @ip_validator.match(raw)
         status = Timeout::timeout(@timeout) {
-          reverse(event)
+          result = @resolv.getname(raw)
         }
-      rescue Timeout::Error
-        @logger.debug("DNS: reverse action timed out")
-        return
-      end
-    end
-
-    filter_matched(event)
-  end
-
-  private
-  def resolve(event)
-    @resolve.each do |field|
-      is_array = false
-      raw = event[field]
-      if raw.is_a?(Array)
-        is_array = true
-        if raw.length > 1
-          @logger.warn("DNS: skipping resolve, can't deal with multiple values", :field => field, :value => raw)
-          return
-        end
-        raw = raw.first
-      end
-
-      begin
-        # in JRuby 1.7.11 outputs as US-ASCII
-        address = @resolv.getaddress(raw).force_encoding(Encoding::UTF_8)
-      rescue Resolv::ResolvError
-        @logger.debug("DNS: couldn't resolve the hostname.",
-                      :field => field, :value => raw)
-        return
-      rescue Resolv::ResolvTimeout
-        @logger.debug("DNS: timeout on resolving the hostname.",
-                      :field => field, :value => raw)
-        return
-      rescue SocketError => e
-        @logger.debug("DNS: Encountered SocketError.",
-                      :field => field, :value => raw)
-        return
-      rescue NoMethodError => e
-        # see JRUBY-5647
-        @logger.debug("DNS: couldn't resolve the hostname.",
-                      :field => field, :value => raw,
-                      :extra => "NameError instead of ResolvError")
-        return
-      end
-
-      if @action == "replace"
-        if is_array
-          event[field] = [address]
-        else
-          event[field] = address
-        end
       else
-        if !is_array
-          event[field] = [event[field], address]
-        else
-          event[field] << address
-        end
+        status = Timeout::timeout(@timeout) {
+          result = @resolv.getaddress(raw)
+        }
       end
-
+    rescue Resolv::ResolvError
+      @logger.debug("DNS: couldn't resolve.",
+                    :field => @source, :value => raw)
+      return
+    rescue Resolv::ResolvTimeout
+      @logger.debug("DNS: timeout on resolving.",
+                    :field => @source, :value => raw)
+      return
+    rescue SocketError => e
+      @logger.debug("DNS: Encountered SocketError.",
+                    :field => @source, :value => raw)
+      return
+    rescue NoMethodError => e
+      # see JRUBY-5647
+      @logger.debug("DNS: couldn't resolve the hostname.",
+                    :field => @source, :value => raw,
+                    :extra => "NameError instead of ResolvError")
+      return
     end
-  end
 
-  private
-  def reverse(event)
-    @reverse.each do |field|
-      raw = event[field]
-      is_array = false
-      if raw.is_a?(Array)
-          is_array = true
-          if raw.length > 1
-            @logger.warn("DNS: skipping reverse, can't deal with multiple values", :field => field, :value => raw)
-            return
-          end
-          raw = raw.first
-      end
-
-      if ! @ip_validator.match(raw)
-        @logger.debug("DNS: not an address",
-                      :field => field, :value => event[field])
-        return
-      end
-      begin
-        # in JRuby 1.7.11 outputs as US-ASCII
-        hostname = @resolv.getname(raw).force_encoding(Encoding::UTF_8)
-      rescue Resolv::ResolvError
-        @logger.debug("DNS: couldn't resolve the address.",
-                      :field => field, :value => raw)
-        return
-      rescue Resolv::ResolvTimeout
-        @logger.debug("DNS: timeout on resolving address.",
-                      :field => field, :value => raw)
-        return
-      rescue SocketError => e
-        @logger.debug("DNS: Encountered SocketError.",
-                      :field => field, :value => raw)
-        return
-      end
+    # Explicit encode, as Resolv returns ASCII
+    result.encode!('UTF-8')
 
-      if @action == "replace"
-        if is_array
-          event[field] = [hostname]
-        else
-          event[field] = hostname
-        end
-      else
-        if !is_array
-          event[field] = [event[field], hostname]
-        else
-          event[field] << hostname
-        end
-      end
+    if @target.empty?
+      event["dns"] = result
+    else
+      event[@target] = result
     end
+
+    filter_matched(event)
   end
 end # class LogStash::Filters::DNS
diff --git a/spec/filters/dns.rb b/spec/filters/dns.rb
index 80dae9885ad..81ae6b98c27 100644
--- a/spec/filters/dns.rb
+++ b/spec/filters/dns.rb
@@ -7,155 +7,150 @@
 describe LogStash::Filters::DNS do
   extend LogStash::RSpec
 
-  before(:all) do
-    begin
-      Resolv.new.getaddress("elasticsearch.com")
-    rescue Errno::ENOENT
-      $stderr.puts("DNS resolver error, no network? mocking resolver")
-      @mock_resolv = true
-    end
-  end
-
-  before(:each) do
-    if @mock_resolv
-      allow_any_instance_of(Resolv).to receive(:getaddress).with("carrera.databits.net").and_return("199.192.228.250")
-      allow_any_instance_of(Resolv).to receive(:getaddress).with("does.not.exist").and_return(nil)
-      allow_any_instance_of(Resolv).to receive(:getname).with("199.192.228.250").and_return("carrera.databits.net")
-    end
-  end
-
-  describe "dns reverse lookup, replace (on a field)" do
+  describe "dns reverse lookup, no target" do
     config <<-CONFIG
       filter {
         dns {
-          reverse => "foo"
-          action => "replace"
+          source => "host"
         }
       }
     CONFIG
 
-    sample("foo" => "199.192.228.250") do
-      insist { subject["foo"] } == "carrera.databits.net"
+    address = Resolv.new.getaddress("aspmx.l.google.com")
+    expected = Resolv.new.getname(address)
+    sample("host" => address) do
+      insist { subject["host"] } == address
+      insist { subject["dns"] } == expected
     end
   end
 
-  describe "dns reverse lookup, append" do
+  describe "dns lookup, with target" do
     config <<-CONFIG
       filter {
         dns {
-          reverse => "foo"
-          action => "append"
+          source => "foo"
+          target => "bar"
         }
       }
     CONFIG
 
-    sample("foo" => "199.192.228.250") do
-      insist { subject["foo"][0] } == "199.192.228.250"
-      insist { subject["foo"][1] } == "carrera.databits.net"
+    name = Resolv.new.getname("8.8.8.8")
+    expected = Resolv.new.getaddress(name)
+    sample("foo" => name) do
+      insist { subject["foo"] } == name
+      insist { subject["bar"] } == expected
     end
   end
 
-  describe "dns reverse lookup, not an IP" do
+  describe "dns lookup, empty target" do
     config <<-CONFIG
       filter {
         dns {
-          reverse => "foo"
+          source => "foo"
+          target => ""
         }
       }
     CONFIG
 
-    sample("foo" => "not.an.ip") do
-      insist { subject["foo"] } == "not.an.ip"
+    name = Resolv.new.getname("8.8.8.8")
+    expected = Resolv.new.getaddress(name)
+    sample("foo" => name) do
+      insist { subject["foo"] } == name
+      insist { subject["dns"] } == expected
     end
   end
 
-  describe "dns resolve lookup, replace" do
+  describe "dns lookup, NXDOMAIN, no target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve => "host"
-          action => "replace"
+          source => "foo"
         }
       }
     CONFIG
 
-    sample("host" => "carrera.databits.net") do
-      insist { subject["host"] } == "199.192.228.250"
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["dns"] }.nil?
     end
   end
 
-  describe "dns resolve lookup, replace (on a field)" do
+  describe "dns lookup, NXDOMAIN, with target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve => "foo"
-          action => "replace"
+          source => "foo"
+          target => "bar"
         }
       }
     CONFIG
 
-    sample("foo" => "carrera.databits.net") do
-      insist { subject["foo"] } == "199.192.228.250"
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["bar"] }.nil?
     end
   end
 
-  describe "dns resolve lookup, skip multi-value" do
+  # Tests for the source/target options
+  describe "dns reverse lookup, no target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve => "foo"
-          action => "replace"
+          source => "host"
         }
       }
     CONFIG
 
-    sample("foo" => ["carrera.databits.net", "foo.databits.net"]) do
-      insist { subject["foo"] } == ["carrera.databits.net", "foo.databits.net"]
+    sample("host" => "199.192.228.250") do
+      insist { subject["host"] } == "199.192.228.250"
+      insist { subject["dns"] } == "carrera.databits.net"
     end
   end
 
-  describe "dns resolve lookup, append" do
+  describe "dns lookup, with target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve => "foo"
-          action => "append"
+          source => "foo"
+          target => "bar"
         }
       }
     CONFIG
 
-    sample("foo" => "carrera.databits.net") do
-      insist { subject["foo"][0] } == "carrera.databits.net"
-      insist { subject["foo"][1] } == "199.192.228.250"
+    sample("foo" => "199.192.228.250") do
+      insist { subject["foo"] } == "199.192.228.250"
+      insist { subject["bar"] } == "carrera.databits.net"
     end
   end
 
-  describe "dns resolve lookup, append with multi-value does nothing" do
+  describe "dns lookup, NXDOMAIN, no target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve => "foo"
-          action => "append"
+          source => "foo"
         }
       }
     CONFIG
 
-    sample("foo" => ["carrera.databits.net", "foo.databits.net"]) do
-      insist { subject["foo"] } == ["carrera.databits.net", "foo.databits.net"]
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["dns"] } == nil
     end
   end
 
-  describe "dns resolve lookup, not a valid hostname" do
+  describe "dns lookup, NXDOMAIN, with target" do
     config <<-CONFIG
       filter {
         dns {
-          resolve=> "foo"
+          source => "foo"
+          target => "bar"
         }
       }
     CONFIG
 
-    sample("foo" => "does.not.exist") do
-      insist { subject["foo"] } == "does.not.exist"
+    sample("foo" => "doesnotexist.invalid.topleveldomain") do
+      insist { subject["foo"] } == "doesnotexist.invalid.topleveldomain"
+      insist { subject["bar"] } == nil
     end
   end
 end
