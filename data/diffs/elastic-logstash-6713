diff --git a/.travis.yml b/.travis.yml
index cda182983e4..ca84985559e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,7 +5,7 @@ cache:
     - vendor/bundle
     - ~/.gradle/
 rvm:
-  - jruby-1.7.25
+  - jruby-9.1.6.0
 jdk:
   - oraclejdk8
 env:
@@ -13,8 +13,8 @@ env:
   - INTEGRATION=true FEATURE_FLAG=persistent_queues
 before_install:
   # Force bundler 1.12.5 because version 1.13 has issues, see https://github.com/fastlane/fastlane/issues/6065#issuecomment-246044617
-  - gem uninstall -i /home/travis/.rvm/gems/jruby-1.7.25@global bundler
-  - gem install bundler -v 1.12.5 --no-rdoc --no-ri --no-document --quiet   
+  - gem uninstall -i /home/travis/.rvm/gems/jruby-9.1.6.0@global bundler
+  - gem install bundler -v 1.12.5 --no-rdoc --no-ri --no-document --quiet
 install:
   - rake test:install-core
   - ci/travis_integration_install.sh
diff --git a/Gemfile b/Gemfile
index 6ca8ab91fc0..69e1955a156 100644
--- a/Gemfile
+++ b/Gemfile
@@ -13,7 +13,7 @@ gem "file-dependencies", "0.1.6"
 gem "ci_reporter_rspec", "1.0.0", :group => :development
 gem "simplecov", :group => :development
 gem "tins", "1.6", :group => :development
-gem "rspec", "~> 3.1.0", :group => :development
+gem "rspec", "~> 3.5.0", :group => :development
 gem "logstash-devutils", :group => :development
 gem "benchmark-ips", :group => :development
 gem "octokit", "3.8.0", :group => :build
@@ -25,6 +25,7 @@ gem "rack-test", :require => "rack/test", :group => :development
 gem "flores", "~> 0.0.6", :group => :development
 gem "term-ansicolor", "~> 1.3.2", :group => :development
 gem "docker-api", "1.31.0", :group => :development
+gem "webmock", "~> 1.21.0", :group => :development
 gem "pleaserun", "~>0.0.28"
 gem "logstash-input-heartbeat"
 gem "logstash-codec-collectd"
@@ -55,6 +56,7 @@ gem "logstash-filter-grok"
 gem "logstash-filter-json"
 gem "logstash-filter-kv"
 gem "logstash-filter-metrics"
+gem "logstash-filter-multiline"
 gem "logstash-filter-mutate"
 gem "logstash-filter-ruby"
 gem "logstash-filter-sleep"
diff --git a/bin/bundle b/bin/bundle
index 420b7dbddce..f682b0928ef 100755
--- a/bin/bundle
+++ b/bin/bundle
@@ -10,7 +10,9 @@ Signal.trap("INT") { exit 1 }
 
 require_relative "../lib/bootstrap/environment"
 ::Gem.clear_paths
-::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
+
+ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
+::Gem.paths = ENV
 
 ENV["BUNDLE_GEMFILE"] = LogStash::Environment::GEMFILE_PATH
 
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index c90cd67488a..e9af6f528eb 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -13,7 +13,7 @@ def default_lockfile
         end
       end
 
-      # Patch to prevent Bundler to save a .bundle/config file in the root 
+      # Patch to prevent Bundler to save a .bundle/config file in the root
       # of the application
       ::Bundler::Settings.module_exec do
         def set_key(key, value, hash, file)
@@ -46,7 +46,8 @@ def setup!(options = {})
       # make sure we use our own installed bundler
       LogStash::Rubygems.patch!
       ::Gem.clear_paths
-      ::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = Environment.logstash_gem_home
+      ENV['GEM_HOME'] = ENV['GEM_PATH'] = Environment.logstash_gem_home
+      ::Gem.paths = ENV
 
       # set BUNDLE_GEMFILE ENV before requiring bundler to avoid bundler recurse and load unrelated Gemfile(s)
       ENV["BUNDLE_GEMFILE"] = Environment::GEMFILE_PATH
@@ -86,8 +87,8 @@ def invoke!(options = {})
       # require "logstash/patches/rubygems" # patch rubygems before clear_paths
       LogStash::Rubygems.patch!
       ::Gem.clear_paths
-      ::Gem.paths = ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
-
+      ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
+      ::Gem.paths = ENV
       # set BUNDLE_GEMFILE ENV before requiring bundler to avoid bundler recurse and load unrelated Gemfile(s).
       # in the context of calling Bundler::CLI this is not really required since Bundler::CLI will look at
       # Bundler.settings[:gemfile] unlike Bundler.setup. For the sake of consistency and defensive/future proofing, let's keep it here.
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index 79ff4c024df..fbe3e74f281 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -18,7 +18,7 @@ module Environment
     GEMFILE_PATH = ::File.join(LOGSTASH_HOME, "Gemfile")
     LOCAL_GEM_PATH = ::File.join(LOGSTASH_HOME, 'vendor', 'local_gems')
     CACHE_PATH = ::File.join(LOGSTASH_HOME, "vendor", "cache")
-    LOCKFILE = Pathname.new(::File.join(LOGSTASH_HOME, "Gemfile.jruby-1.9.lock"))
+    LOCKFILE = Pathname.new(::File.join(LOGSTASH_HOME, "Gemfile.jruby-2.0.lock"))
     GEMFILE = Pathname.new(::File.join(LOGSTASH_HOME, "Gemfile"))
 
     # @return [String] the ruby version string bundler uses to craft its gem path
diff --git a/lib/pluginmanager/gem_installer.rb b/lib/pluginmanager/gem_installer.rb
index abb686d50db..16f1e975197 100644
--- a/lib/pluginmanager/gem_installer.rb
+++ b/lib/pluginmanager/gem_installer.rb
@@ -10,7 +10,7 @@ module LogStash module PluginManager
   # - Generate the specifications
   # - Copy the data in the right folders
   class GemInstaller
-    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "1.9"))
+    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "2.0"))
     SPECIFICATIONS_DIR = "specifications"
     GEMS_DIR = "gems"
     CACHE_DIR = "cache"
diff --git a/logstash-core-event-java/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java b/logstash-core-event-java/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
index 76fe2b582c3..c8add15b4bf 100644
--- a/logstash-core-event-java/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
+++ b/logstash-core-event-java/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
@@ -206,15 +206,8 @@ public static IRubyObject ruby_at(ThreadContext context, IRubyObject recv, IRuby
         {
             RubyTime t;
             if (args.length == 1) {
-                IRubyObject epoch = args[0];
-
-                if (epoch instanceof RubyBigDecimal) {
-                    // bug in JRuby prevents correcly parsing a BigDecimal fractional part, see https://github.com/elastic/logstash/issues/4565
-                    double usec = ((RubyBigDecimal)epoch).frac().convertToFloat().getDoubleValue() * 1000000;
-                    t = (RubyTime)RubyTime.at(context, context.runtime.getTime(), ((RubyBigDecimal)epoch).to_int(), new RubyFloat(context.runtime, usec));
-                } else {
-                    t = (RubyTime)RubyTime.at(context, context.runtime.getTime(), epoch);
-                }
+                // JRuby 9K has fixed the problem iwth BigDecimal precision see https://github.com/elastic/logstash/issues/4565
+                t = (RubyTime)RubyTime.at(context, context.runtime.getTime(), args[0]);
             } else {
                 t = (RubyTime)RubyTime.at(context, context.runtime.getTime(), args[0], args[1]);
             }
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 94b79e35c75..12dedb785f5 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -211,8 +211,8 @@ def execute
 
     LogStash::Util::set_thread_name(self.class.name)
 
-    if RUBY_VERSION < "1.9.2"
-      logger.fatal "Ruby 1.9.2 or later is required. (You are running: " + RUBY_VERSION + ")"
+    if RUBY_VERSION < "2.0"
+      logger.fatal "Ruby 2.0 or later is required. (You are running: " + RUBY_VERSION + ")"
       return 1
     end
 
@@ -420,7 +420,7 @@ def fetch_settings_path(cli_args)
       nil
     end
   end
-  
+
   # is the user asking for CLI help subcommand?
   def cli_help?(args)
     # I know, double negative
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index 0d4107159d4..b3f25c9cc1d 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -30,7 +30,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "concurrent-ruby", "1.0.0"
   gem.add_runtime_dependency "sinatra", '~> 1.4', '>= 1.4.6'
   gem.add_runtime_dependency 'puma', '~> 2.16'
-  gem.add_runtime_dependency "jruby-openssl", "0.9.16" # >= 0.9.13 Required to support TLSv1.2
+  gem.add_runtime_dependency "jruby-openssl", "0.9.17" # >= 0.9.13 Required to support TLSv1.2
   gem.add_runtime_dependency "chronic_duration", "0.10.6"
   gem.add_runtime_dependency "jrmonitor", '~> 0.4.2'
 
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 1937bf4e262..8f236902f33 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -46,7 +46,7 @@ namespace "artifact" do
       # See more in https://github.com/elastic/logstash/issues/4818
       "vendor/??*/**/.mvn/**/*",
       "Gemfile",
-      "Gemfile.jruby-1.9.lock",
+      "Gemfile.jruby-2.3.lock",
     ]
   end
 
@@ -353,7 +353,7 @@ namespace "artifact" do
     File.join(basedir, "pkg", "log4j2.properties").tap do |path|
       dir.input("#{path}=/etc/logstash")
     end
-    
+
     package_filename = "logstash-#{LOGSTASH_VERSION}#{PACKAGE_SUFFIX}.TYPE"
 
     case platform
diff --git a/rakelib/test.rake b/rakelib/test.rake
index 503bec6c618..f3a0f8a8470 100644
--- a/rakelib/test.rake
+++ b/rakelib/test.rake
@@ -64,7 +64,7 @@ namespace "test" do
     plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
     # grab all spec files using the live plugins gem specs. this allows correclty also running the specs
     # of a local plugin dir added using the Gemfile :path option. before this, any local plugin spec would
-    # not be run because they were not under the vendor/bundle/jruby/1.9/gems path
+    # not be run because they were not under the vendor/bundle/jruby/2.0/gems path
     test_files = LogStash::PluginManager.find_plugins_gem_specs.map do |spec|
       if plugins_to_exclude.size > 0
         if !plugins_to_exclude.include?(Pathname.new(spec.gem_dir).basename.to_s)
@@ -79,6 +79,58 @@ namespace "test" do
     exit(RSpec::Core::Runner.run(["--order", "rand", test_files]))
   end
 
+  # needs bug fix in RSpec before we can run uncomment this out. https://github.com/rspec/rspec-core/pull/2368
+  # desc "run all installed plugins specs in a separate rspec run, args:['format']"
+  # task "plugins-separate", [:format] => ["setup"] do  |t, args|
+  #   format = args.format || "documentation"
+  #   # additionally we could have an output file path as an arg
+  #   exit_code = 0
+
+  #   plugins_to_exclude = ENV.fetch("EXCLUDE_PLUGIN", "").split(",")
+  #   # grab all spec files using the live plugins gem specs. this allows correclty also running the specs
+  #   # of a local plugin dir added using the Gemfile :path option. before this, any local plugin spec would
+  #   # not be run because they were not under the vendor/bundle/jruby/2.0/gems path
+
+  #   STDERR.puts "starting..."
+  #   i = 1
+
+  #   io = File.new("./data/rspec-out.txt", "a")
+
+  #   test_files = LogStash::PluginManager.find_plugins_gem_specs.shuffle.each do |spec|
+
+  #     if plugins_to_exclude.size > 0 && plugins_to_exclude.include?(Pathname.new(spec.gem_dir).basename.to_s)
+  #       next
+  #     end
+
+  #     test_files = Rake::FileList[File.join(spec.gem_dir, "spec/{input,filter,codec,output}s/*_spec.rb")]
+
+  #     # rspec_args = ["--color", "--order", "rand", "--format", format, "--out", "data/rspec-out.txt", test_files]
+  #     rspec_args = ["--no-color", "--order", "rand", "--format", format, test_files]
+  #     # rspec_args = ["--order", "rand", "--format", format, "--out", "data/rspec-out.txt", test_files]
+  #     # rspec_args = ["--order", "rand", "--format", format, test_files]
+
+  #     STDERR.print "#{i} "
+  #     io.print "----------------- #{i} Ran #{spec.gem_dir}\n\n"
+
+  #     begin
+  #       exit_code += RSpec::Core::Runner.run(rspec_args, $stderr, io)
+  #     rescue => e
+
+  #       io.puts "----------------- #{i}"
+  #       io.puts e.message
+  #       io.puts e.backtrace.take(8)
+  #     end
+
+  #     RSpec.clear_examples
+  #     i = i.succ
+  #   end
+
+  #   STDERR.puts "\ndone..."
+  #   io.close
+
+  #   exit(exit_code == 0 ? 0 : 1)
+  # end
+
   task "install-core" => ["bootstrap", "plugin:install-core", "plugin:install-development-dependencies"]
 
   task "install-default" => ["bootstrap", "plugin:install-default", "plugin:install-development-dependencies"]
diff --git a/rakelib/vendor.rake b/rakelib/vendor.rake
index b5cac5a353c..063d4cf80e8 100644
--- a/rakelib/vendor.rake
+++ b/rakelib/vendor.rake
@@ -1,6 +1,7 @@
 namespace "vendor" do
   VERSIONS = {
-    "jruby" => { "version" => "1.7.25", "sha1" => "cd15aef419f97cff274491e53fcfb8b88ec36785" },
+    "jruby" => { "version" => "9.1.6.0", "sha1" => "6dada28876caf2ac14de83dbb45d5243fbbd4940" },
+    # "jruby" => { "version" => "1.7.25", "sha1" => "cd15aef419f97cff274491e53fcfb8b88ec36785" },
   }
 
   def vendor(*args)
diff --git a/spec/unit/license_spec.rb b/spec/unit/license_spec.rb
index fdc5ea80065..2ca69e58989 100644
--- a/spec/unit/license_spec.rb
+++ b/spec/unit/license_spec.rb
@@ -1,6 +1,6 @@
 # encoding: utf-8
 require 'spec_helper'
-require 'rakelib/default_plugins'
+require_relative '../../rakelib/default_plugins'
 
 describe "Project licenses" do
 
@@ -55,7 +55,7 @@
         next unless runtime_spec
         next if skipped_dependencies.include?(runtime_spec.name)
         runtime_spec.licenses.each do |license|
-          expect(license.downcase).to match(expected_licenses), 
+          expect(license.downcase).to match(expected_licenses),
             lambda { "Runtime license check failed for gem #{runtime_spec.name} with version #{runtime_spec.version}" }
         end
       end
