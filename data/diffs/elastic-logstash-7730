diff --git a/logstash-core/src/main/java/org/logstash/Accessors.java b/logstash-core/src/main/java/org/logstash/Accessors.java
index f7197d1f260..20abcf93efd 100644
--- a/logstash-core/src/main/java/org/logstash/Accessors.java
+++ b/logstash-core/src/main/java/org/logstash/Accessors.java
@@ -28,11 +28,7 @@ public Object set(String reference, Object value) {
             ((Map<String, Object>) target).put(key, value);
         } else if (target instanceof List) {
             int i;
-            try {
-                i = Integer.parseInt(key);
-            } catch (NumberFormatException e) {
-                return null;
-            }
+            i = Integer.parseInt(key);
             int size = ((List<Object>) target).size();
             if (i >= size) {
                 // grow array by adding trailing null items
@@ -60,13 +56,12 @@ public Object del(String reference) {
             if (target instanceof Map) {
                 return ((Map<String, Object>) target).remove(field.getKey());
             } else if (target instanceof List) {
-                try {
-                    int i = Integer.parseInt(field.getKey());
-                    int offset = listIndex(i, ((List) target).size());
-                    return ((List)target).remove(offset);
-                } catch (IndexOutOfBoundsException|NumberFormatException e) {
+                int i = Integer.parseInt(field.getKey());
+                final int offset = listIndex(i, ((List) target).size());
+                if (offset < 0) {
                     return null;
                 }
+                return ((List) target).remove(offset);
             } else {
                 throw newCollectionException(target);
             }
@@ -129,13 +124,9 @@ private Object findCreateTarget(FieldReference field) {
                 if (target instanceof Map) {
                     ((Map<String, Object>)target).put(key, result);
                 } else if (target instanceof List) {
-                    try {
-                        int i = Integer.parseInt(key);
-                        // TODO: what about index out of bound?
-                        ((List<Object>)target).set(i, result);
-                    } catch (NumberFormatException e) {
-                        continue;
-                    }
+                    int i = Integer.parseInt(key);
+                    // TODO: what about index out of bound?
+                    ((List<Object>) target).set(i, result);
                 } else if (target != null) {
                     throw newCollectionException(target);
                 }
@@ -149,13 +140,11 @@ private Object findCreateTarget(FieldReference field) {
     }
 
     private static boolean foundInList(List<Object> target, int index) {
-        try {
-            int offset = listIndex(index, target.size());
-            return target.get(offset) != null;
-        } catch (IndexOutOfBoundsException e) {
+        final int offset = listIndex(index, target.size());
+        if (offset < 0) {
             return false;
         }
-
+        return target.get(offset) != null;
     }
 
     private static Object fetch(Object target, String key) {
@@ -163,12 +152,11 @@ private static Object fetch(Object target, String key) {
             Object result = ((Map<String, Object>) target).get(key);
             return result;
         } else if (target instanceof List) {
-            try {
-                int offset = listIndex(Integer.parseInt(key), ((List) target).size());
-                return ((List<Object>) target).get(offset);
-            } catch (IndexOutOfBoundsException|NumberFormatException e) {
+            final int offset = listIndex(Integer.parseInt(key), ((List) target).size());
+            if (offset < 0) {
                 return null;
             }
+            return ((List<Object>) target).get(offset);
         } else if (target == null) {
             return null;
         } else {
@@ -187,18 +175,19 @@ private static ClassCastException newCollectionException(Object target) {
         return new ClassCastException("expecting List or Map, found "  + target.getClass());
     }
 
-    /* 
-     * Returns a positive integer offset for a list of known size.
+    /**
+     * Returns a positive integer offset for a list of known size or -1 if the index does not exist
+     * in the list.
      *
      * @param i if positive, and offset from the start of the list. If negative, the offset from the end of the list, where -1 means the last element.
      * @param size the size of the list.
-     * @return the positive integer offset for the list given by index i.
+     * @return the positive integer offset for the list given by index i or -1 if there is no such
+     * index for the given size
      */
     public static int listIndex(int i, int size) {
         if (i >= size || i < -size) {
-            throw new IndexOutOfBoundsException("Index " + i + " is out of bounds for a list with size " + size);
+            return -1;
         }
-
         if (i < 0) { // Offset from the end of the array.
             return size + i;
         } else {
diff --git a/logstash-core/src/test/java/org/logstash/AccessorsTest.java b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
index 28776a35d90..1028520d41b 100644
--- a/logstash-core/src/test/java/org/logstash/AccessorsTest.java
+++ b/logstash-core/src/test/java/org/logstash/AccessorsTest.java
@@ -13,7 +13,6 @@
 import org.junit.runner.RunWith;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
@@ -125,30 +124,6 @@ public void testAbsentDeepListGet() throws Exception {
         assertNull(accessors.get(reference));
         assertEquals(inner, accessors.lutGet(reference));
     }
-    /*
-     * Check if accessors are able to recovery from
-     * failure to convert the key (string) to integer,
-     * when it is a non-numeric value, which is not
-     * expected.
-     */
-    @Test
-    public void testInvalidIdList() throws Exception {
-        Map<String, Object> data = new HashMap<>();
-        List inner = new ArrayList();
-        data.put("map1", inner);
-        inner.add("obj1");
-        inner.add("obj2");
-
-        String reference = "[map1][IdNonNumeric]";
-
-        TestableAccessors accessors = new TestableAccessors(data);
-        assertNull(accessors.lutGet(reference));
-        assertNull(accessors.get(reference));
-        assertNull(accessors.set(reference, "obj3"));
-        assertEquals(inner, accessors.lutGet(reference));
-        assertFalse(accessors.includes(reference));
-        assertNull(accessors.del(reference));
-    }
 
     @Test
     public void testBarePut() throws Exception {
@@ -262,8 +237,7 @@ public static class TestListIndexFailureCases {
 
       @Theory
       public void testListIndexOutOfBounds(int i) {
-        exception.expect(IndexOutOfBoundsException.class);
-        Accessors.listIndex(i, size);
+        assertEquals(-1, Accessors.listIndex(i, size));
       }
     }
 
