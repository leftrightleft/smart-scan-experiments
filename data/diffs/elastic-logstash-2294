diff --git a/lib/logstash/util/accessors.rb b/lib/logstash/util/accessors.rb
index 8e97ca7978a..6d97be9b294 100644
--- a/lib/logstash/util/accessors.rb
+++ b/lib/logstash/util/accessors.rb
@@ -32,11 +32,13 @@ def initialize(store)
 
     def get(accessor)
       target, key = lookup(accessor)
-      target.is_a?(Array) ? target[key.to_i] : target[key]
+      unless target.nil?
+        target.is_a?(Array) ? target[key.to_i] : target[key]
+      end
     end
 
     def set(accessor, value)
-      target, key = lookup(accessor)
+      target, key = store_and_lookup(accessor)
       target[target.is_a?(Array) ? key.to_i : key] = value
     end
 
@@ -52,9 +54,29 @@ def del(accessor)
     private
 
     def lookup(accessor)
+      target, key = lookup_path(accessor)
+      if target.nil?
+        [target, key]
+      else
+        @lut[accessor] = [target, key]
+      end
+    end
+
+    def store_and_lookup(accessor)
       @lut[accessor] ||= store_path(accessor)
     end
 
+    def lookup_path(accessor)
+      key, path = PathCache.get(accessor)
+      target = path.inject(@store) do |r, k|
+        if r.nil?
+          return nil
+        end
+        r[r.is_a?(Array) ? k.to_i : k]
+      end
+      [target, key]
+    end
+
     def store_path(accessor)
       key, path = PathCache.get(accessor)
       target = path.inject(@store) {|r, k| r[r.is_a?(Array) ? k.to_i : k] ||= {}}
diff --git a/spec/util/accessors_spec.rb b/spec/util/accessors_spec.rb
index f837b23e6ec..bd5e96cff95 100644
--- a/spec/util/accessors_spec.rb
+++ b/spec/util/accessors_spec.rb
@@ -83,11 +83,14 @@
       insist { accessors.get(str) } == data["hello"]["world"]
     end
 
-    it "should get deep string value" do
+    it "should return nil when getting a non-existant field (with no side-effects on original data)" do
       str = "[hello][world]"
-      data = { "hello" => { "world" => "foo", "bar" => "baz" } }
+      data = {}
       accessors = LogStash::Util::Accessors.new(data)
-      insist { accessors.get(str) } == data["hello"]["world"]
+      insist { accessors.get(str) }.nil?
+      insist { data } == {}
+      insist { accessors.set(str, "foo") } == "foo"
+      insist { data } == { "hello" => {"world" => "foo"} }
     end
 
     it "should handle delete" do
