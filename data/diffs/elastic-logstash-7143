diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
index 1560e78e391..885c585f51c 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Page.java
@@ -1,12 +1,11 @@
 package org.logstash.ackedqueue;
 
-import org.logstash.ackedqueue.io.PageIO;
-
 import java.io.Closeable;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.List;
-import java.util.stream.Collectors;
+import org.logstash.ackedqueue.io.PageIO;
 
 public abstract class Page implements Closeable {
     protected final int pageNum;
@@ -54,16 +53,18 @@ public Batch readBatch(int limit) throws IOException {
         this.pageIO.activate();
 
         SequencedList<byte[]> serialized = this.pageIO.read(this.firstUnreadSeqNum, limit);
-        List<Queueable> deserialized = serialized.getElements().stream().map(e -> this.queue.deserialize(e)).collect(Collectors.toList());
-
+        List<byte[]> elements = serialized.getElements();
+        final int count = elements.size();
+        List<Queueable> deserialized = new ArrayList<>(count);
+        for (final byte[] element : elements) {
+            deserialized.add(this.queue.deserialize(element));
+        }
         assert serialized.getSeqNums().get(0) == this.firstUnreadSeqNum :
             String.format("firstUnreadSeqNum=%d != first result seqNum=%d", this.firstUnreadSeqNum, serialized.getSeqNums().get(0));
 
-        Batch batch = new Batch(deserialized, serialized.getSeqNums(), this.queue);
-
-        this.firstUnreadSeqNum += deserialized.size();
+        this.firstUnreadSeqNum += count;
 
-        return batch;
+        return new Batch(deserialized, serialized.getSeqNums(), this.queue);
     }
 
     public boolean isFullyRead() {
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
index f983e7d5427..1b7a77f2549 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/wip/MemoryPageIOStream.java
@@ -1,5 +1,6 @@
 package org.logstash.ackedqueue.io.wip;
 
+import java.util.Collections;
 import org.logstash.ackedqueue.Checkpoint;
 import org.logstash.ackedqueue.SequencedList;
 import org.logstash.common.io.BufferedChecksumStreamInput;
@@ -142,7 +143,7 @@ public void write(byte[] bytes, long seqNum) throws IOException {
     @Override
     public SequencedList<byte[]> read(long seqNum, int limit) throws IOException {
         if (elementCount == 0) {
-            return new SequencedList<>(new ArrayList<>(), new ArrayList<>());
+            return new SequencedList<>(Collections.emptyList(), Collections.emptyList());
         }
         setReadPoint(seqNum);
         return read(limit);
@@ -215,7 +216,7 @@ public String readHeaderDetails() throws IOException {
         return details;
     }
 
-    private void setReadPoint(long seqNum) throws IOException {
+    private void setReadPoint(long seqNum) {
         int readPosition = offsetMap.get(calcRelativeSeqNum(seqNum));
         streamedInput.movePosition(readPosition);
     }
@@ -254,10 +255,9 @@ private void writeToBuffer(long seqNum, byte[] data, int len) throws IOException
     }
 
     private SequencedList<byte[]> read(int limit) throws IOException {
-        List<byte[]> elements = new ArrayList<>();
-        List<Long> seqNums = new ArrayList<>();
-
         int upto = available(limit);
+        List<byte[]> elements = new ArrayList<>(upto);
+        List<Long> seqNums = new ArrayList<>(upto);
         for (int i = 0; i < upto; i++) {
             long seqNum = readSeqNum();
             byte[] data = readData();
