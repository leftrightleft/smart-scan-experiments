diff --git a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
index 5e74d3de8e2..1a20948534d 100644
--- a/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
+++ b/logstash-core/src/main/java/org/logstash/common/io/RecordIOReader.java
@@ -55,8 +55,12 @@ public RecordIOReader(Path path) throws IOException {
         ByteBuffer versionBuffer = ByteBuffer.allocate(1);
         this.channel.read(versionBuffer);
         versionBuffer.rewind();
-        if (versionBuffer.get() != VERSION) {
-            throw new RuntimeException("Invalid file. check version");
+        byte versionInFile = versionBuffer.get();
+        if (versionInFile != VERSION) {
+            this.channel.close();
+            throw new RuntimeException(String.format(
+                    "Invalid version on PQ data file %s. Expected version: %c. Version found on file: %c",
+                    path, VERSION, versionInFile));
         }
         this.channelPosition = this.channel.position();
     }
diff --git a/logstash-core/src/test/java/org/logstash/common/io/RecordIOReaderTest.java b/logstash-core/src/test/java/org/logstash/common/io/RecordIOReaderTest.java
index 58d8aba68d9..e8e46d50a49 100644
--- a/logstash-core/src/test/java/org/logstash/common/io/RecordIOReaderTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/io/RecordIOReaderTest.java
@@ -8,7 +8,9 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
 import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.function.Function;
@@ -20,6 +22,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.logstash.common.io.RecordIOWriter.BLOCK_SIZE;
 import static org.logstash.common.io.RecordIOWriter.RECORD_HEADER_SIZE;
+import static org.logstash.common.io.RecordIOWriter.VERSION;
 
 public class RecordIOReaderTest {
     private Path file;
@@ -172,6 +175,25 @@ public void testReadWhileWriteAcrossBoundary() throws Exception {
         }
     }
 
+    @Test
+    public void testVersion() throws IOException {
+        RecordIOWriter writer = new RecordIOWriter(file);
+        FileChannel channel = FileChannel.open(file, StandardOpenOption.READ);
+        ByteBuffer versionBuffer = ByteBuffer.allocate(1);
+        channel.read(versionBuffer);
+        versionBuffer.rewind();
+        channel.close();
+        assertThat(versionBuffer.get() == VERSION, equalTo(true));
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testVersionMismatch() throws IOException {
+        FileChannel channel = FileChannel.open(file, StandardOpenOption.WRITE);
+        channel.write(ByteBuffer.wrap(new byte[] { '2' }));
+        channel.close();
+        RecordIOReader reader = new RecordIOReader(file);
+    }
+
     private char[] fillArray(final int fillSize) {
         char[] blockSize= new char[fillSize];
         Arrays.fill(blockSize, 'e');
