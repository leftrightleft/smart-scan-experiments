diff --git a/logstash-core/lib/logstash/util/secretstore.rb b/logstash-core/lib/logstash/util/secretstore.rb
index b5a726f29d0..8dba10ef36d 100644
--- a/logstash-core/lib/logstash/util/secretstore.rb
+++ b/logstash-core/lib/logstash/util/secretstore.rb
@@ -8,6 +8,8 @@ module ::LogStash::Util::SecretStore
   java_import "org.logstash.secret.store.SecureConfig"
   java_import "org.logstash.secret.cli.SecretStoreCli"
 
+  SECRET_STORE_FACTORY = SecretStoreFactory::fromEnvironment()
+
   # Return the configuration necessary to work with a secret store
   def self.get_config
     secure_config = SecureConfig.new
@@ -20,12 +22,12 @@ def self.get_config
 
   # Check to see if the secret store exists, return true if exists, false otherwise
   def self.exists?
-    SecretStoreFactory.exists(get_config)
+    SECRET_STORE_FACTORY.exists(get_config)
   end
 
   # Returns a org.logstash.secret.store.SecretStore if it exists, nil otherwise
   def self.get_if_exists
-    SecretStoreFactory.load(get_config) if exists?
+    SECRET_STORE_FACTORY.load(get_config) if exists?
   end
 
   # Returns a org.org.logstash.secret.SecretIdentifier for use with the secret store
diff --git a/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java b/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java
index ca9227fdb0c..b601313747c 100644
--- a/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java
+++ b/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java
@@ -15,6 +15,8 @@
 public class SecretStoreCli {
 
     private final Terminal terminal;
+    private final SecretStoreFactory secretStoreFactory;
+
     enum Command {
         CREATE("create"), LIST("list"), ADD("add"), REMOVE("remove"), HELP("--help");
 
@@ -31,7 +33,12 @@ static Optional<Command> fromString(final String input) {
     }
 
     public SecretStoreCli(Terminal terminal){
+        this(terminal, SecretStoreFactory.fromEnvironment());
+    }
+
+    SecretStoreCli(final Terminal terminal, final SecretStoreFactory secretStoreFactory) {
         this.terminal = terminal;
+        this.secretStoreFactory = secretStoreFactory;
     }
 
     /**
@@ -51,7 +58,7 @@ public void command(String primaryCommand, SecureConfig config, String argument)
                     terminal.writeLine("Creates a new keystore. For example: 'bin/logstash-keystore create'");
                     return;
                 }
-                if (SecretStoreFactory.exists(config.clone())) {
+                if (secretStoreFactory.exists(config.clone())) {
                     terminal.write("An Logstash keystore already exists. Overwrite ? [y/N] ");
                     if (isYes(terminal.readLine())) {
                         create(config);
@@ -67,7 +74,7 @@ public void command(String primaryCommand, SecureConfig config, String argument)
                             "`bin/logstash-keystore list`. Note - only the identifiers will be listed, not the secrets.");
                     return;
                 }
-                Collection<SecretIdentifier> ids = SecretStoreFactory.load(config).list();
+                Collection<SecretIdentifier> ids = secretStoreFactory.load(config).list();
                 List<String> keys = ids.stream().filter(id -> !id.equals(LOGSTASH_MARKER)).map(id -> id.getKey()).collect(Collectors.toList());
                 Collections.sort(keys);
                 keys.forEach(terminal::writeLine);
@@ -83,9 +90,9 @@ public void command(String primaryCommand, SecureConfig config, String argument)
                     terminal.writeLine("ERROR: You must supply a identifier to add. (e.g. bin/logstash-keystore add my-secret)");
                     return;
                 }
-                if (SecretStoreFactory.exists(config.clone())) {
+                if (secretStoreFactory.exists(config.clone())) {
                     SecretIdentifier id = new SecretIdentifier(argument);
-                    SecretStore secretStore = SecretStoreFactory.load(config);
+                    SecretStore secretStore = secretStoreFactory.load(config);
                     byte[] s = secretStore.retrieveSecret(id);
                     if (s == null) {
                         terminal.write(String.format("Enter value for %s: ", argument));
@@ -121,7 +128,7 @@ public void command(String primaryCommand, SecureConfig config, String argument)
                 }
                 SecretIdentifier id = new SecretIdentifier(argument);
 
-                SecretStore secretStore = SecretStoreFactory.load(config);
+                SecretStore secretStore = secretStoreFactory.load(config);
                 byte[] s = secretStore.retrieveSecret(id);
                 if (s == null) {
                     terminal.writeLine(String.format("ERROR: '%s' does not exist in the Logstash keystore.", argument));
@@ -177,8 +184,8 @@ private void create(SecureConfig config) {
     }
 
     private void deleteThenCreate(SecureConfig config) {
-        SecretStoreFactory.delete(config.clone());
-        SecretStoreFactory.create(config.clone());
+        secretStoreFactory.delete(config.clone());
+        secretStoreFactory.create(config.clone());
         char[] fileLocation = config.getPlainText("keystore.file");
         terminal.writeLine("Created Logstash keystore" + (fileLocation == null ? "." : " at " + new String(fileLocation)));
     }
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
index 8280bf0b842..e1e44698901 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
@@ -4,12 +4,20 @@
 import org.apache.logging.log4j.Logger;
 import org.logstash.secret.SecretIdentifier;
 
+import java.util.Map;
+
 /**
  * <p>A factory to load the implementation of a {@link SecretStore}. Implementation may be defined via the {@link SecureConfig} via with a key of "keystore.classname" and
  * value equal to the fqn of the class that implements {@link SecretStore}
  * </p>
  */
 public class SecretStoreFactory {
+    @FunctionalInterface
+    public interface EnvironmentVariableProvider {
+        String get(String env);
+    }
+
+    private final EnvironmentVariableProvider environmentVariableProvider;
 
     public static final String KEYSTORE_ACCESS_KEY = "keystore.pass";
     //secret stores should create a secret with this as the key and value to identify a logstash secret
@@ -18,9 +26,29 @@ public class SecretStoreFactory {
     public final static String ENVIRONMENT_PASS_KEY = "LOGSTASH_KEYSTORE_PASS";
 
     /**
-     * Private constructor
+     * @return a {@link SecretStoreFactory} that is capable of pulling credentials from the process' environment
+     *         variables using the platform-specific {@link System#getenv(String)}.
      */
-    private SecretStoreFactory() {
+    public static SecretStoreFactory fromEnvironment() {
+        return new SecretStoreFactory(System::getenv);
+    }
+
+    /**
+     * Get a {@link SecretStoreFactory} that is capable of pulling credentials from the specified environment variable map.
+     *
+     * Useful for testing scenarios, where overwriting the pseudo-immutable mapping of environment variables available
+     * via official APIs would require platform-dependent hackery.
+     *
+     * @param environmentVariables a Map of environment variables that wholly-overrides the process' environment for
+     *                             purposes of credential extraction by the returned instance of {@link SecretStoreFactory}.
+     * @return a {@link SecretStoreFactory} that uses only the provided environment variables.
+     */
+    public static SecretStoreFactory withEnvironment(final Map<String,String> environmentVariables) {
+        return new SecretStoreFactory(environmentVariables::get);
+    }
+
+    private SecretStoreFactory(final EnvironmentVariableProvider environmentVariableProvider) {
+        this.environmentVariableProvider = environmentVariableProvider;
     }
 
     private static final Logger LOGGER = LogManager.getLogger(SecretStoreFactory.class);
@@ -31,7 +59,7 @@ private enum MODE {LOAD, CREATE, EXISTS, DELETE}
      * Determine if this secret store currently exists
      * @return true if the secret store exists, false otherwise
      */
-    public static boolean exists(SecureConfig secureConfig) {
+    public boolean exists(SecureConfig secureConfig) {
         return doIt(MODE.EXISTS, secureConfig).exists(secureConfig);
     }
 
@@ -41,7 +69,7 @@ public static boolean exists(SecureConfig secureConfig) {
      * @param secureConfig The configuration to pass to the implementation
      * @return the newly created SecretStore, throws {@link SecretStoreException} if errors occur while loading, or if store already exists
      */
-    static public SecretStore create(SecureConfig secureConfig) {
+    public SecretStore create(SecureConfig secureConfig) {
         return doIt(MODE.CREATE, secureConfig);
     }
 
@@ -51,7 +79,7 @@ static public SecretStore create(SecureConfig secureConfig) {
      * @param secureConfig The configuration to pass to the implementation
      * throws {@link SecretStoreException} if errors occur
      */
-    static public void delete(SecureConfig secureConfig) {
+    public void delete(SecureConfig secureConfig) {
         doIt(MODE.DELETE, secureConfig);
     }
 
@@ -61,12 +89,12 @@ static public void delete(SecureConfig secureConfig) {
      * @param secureConfig The configuration to pass to the implementation
      * @return the loaded SecretStore, throws {@link SecretStoreException} if errors occur while loading, or if store does not exist
      */
-    static public SecretStore load(SecureConfig secureConfig) {
+    public SecretStore load(SecureConfig secureConfig) {
         return doIt(MODE.LOAD, secureConfig);
     }
 
     @SuppressWarnings({"unchecked", "JavaReflectionMemberAccess"})
-    private static SecretStore doIt(MODE mode, SecureConfig secureConfig) {
+    private SecretStore doIt(MODE mode, SecureConfig secureConfig) {
         char[] configuredClassName = secureConfig.getPlainText("keystore.classname");
         String className = configuredClassName != null ? new String(configuredClassName) : "org.logstash.secret.store.backend.JavaKeyStore";
         try {
@@ -99,13 +127,12 @@ private static SecretStore doIt(MODE mode, SecureConfig secureConfig) {
      *
      * @param secureConfig The configuration to add the secret store access
      */
-    private static void addSecretStoreAccess(SecureConfig secureConfig) {
-        String environment = System.getenv(ENVIRONMENT_PASS_KEY);
+    private void addSecretStoreAccess(SecureConfig secureConfig) {
+        String keystore_pass = environmentVariableProvider.get(ENVIRONMENT_PASS_KEY);
 
-        char[] pass = null;
-        if (environment != null) {
-            secureConfig.add(KEYSTORE_ACCESS_KEY, environment.toCharArray());
-            environment = null;
+        if (keystore_pass != null) {
+            secureConfig.add(KEYSTORE_ACCESS_KEY, keystore_pass.toCharArray());
+            keystore_pass = null;
         }
 
         //futile attempt to remove the original pass from memory
diff --git a/logstash-core/src/test/java/org/logstash/secret/EnvironmentUtil.java b/logstash-core/src/test/java/org/logstash/secret/EnvironmentUtil.java
deleted file mode 100644
index f731aaab08a..00000000000
--- a/logstash-core/src/test/java/org/logstash/secret/EnvironmentUtil.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.logstash.secret;
-
-import java.lang.reflect.Field;
-import java.util.Collections;
-import java.util.Map;
-
-/**
- * Tool to change the in-memory environment settings, does not change actual environment
- */
-public class EnvironmentUtil {
-
-    //near exact copy from https://stackoverflow.com/questions/318239/how-do-i-set-environment-variables-from-java
-    //thanks @pushy and @Edward Campbell !
-    @SuppressWarnings("unchecked")
-    private static void setEnv(Map<String, String> newenv, String removeKey) throws Exception {
-        try {
-            Class<?> processEnvironmentClass = Class.forName("java.lang.ProcessEnvironment");
-            Field theEnvironmentField = processEnvironmentClass.getDeclaredField("theEnvironment");
-            theEnvironmentField.setAccessible(true);
-            Map<String, String> env = (Map<String, String>) theEnvironmentField.get(null);
-            if(removeKey == null){
-                env.putAll(newenv);
-            }else{
-                env.remove(removeKey);
-            }
-            Field theCaseInsensitiveEnvironmentField = processEnvironmentClass.getDeclaredField("theCaseInsensitiveEnvironment");
-            theCaseInsensitiveEnvironmentField.setAccessible(true);
-            Map<String, String> cienv = (Map<String, String>) theCaseInsensitiveEnvironmentField.get(null);
-            if(removeKey == null){
-                cienv.putAll(newenv);
-            }else{
-                cienv.remove(removeKey);
-            }
-        } catch (NoSuchFieldException e) {
-            Class[] classes = Collections.class.getDeclaredClasses();
-            Map<String, String> env = System.getenv();
-            for (Class cl : classes) {
-                if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
-                    Field field = cl.getDeclaredField("m");
-                    field.setAccessible(true);
-                    Object obj = field.get(env);
-                    Map<String, String> map = (Map<String, String>) obj;
-                    map.clear();
-                    if(removeKey == null){
-                        map.putAll(newenv);
-                    }else{
-                        map.remove(removeKey);
-                    }
-                }
-            }
-        }
-    }
-
-    public static void add(Map<String, String> environment) throws Exception {
-        setEnv(environment, null);
-    }
-
-    public static void remove(String key) throws Exception {
-        setEnv(null, key);
-    }
-}
diff --git a/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java b/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java
index e45684d40ac..93dfe3b0567 100644
--- a/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java
@@ -4,10 +4,13 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.logstash.secret.EnvironmentUtil;
+import org.logstash.secret.store.SecretStoreFactory;
 import org.logstash.secret.store.SecureConfig;
 
 import java.nio.file.Paths;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.UUID;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -26,14 +29,17 @@ public class SecretStoreCliTest {
     @Before
     public void _setup() throws Exception {
         terminal = new TestTerminal();
-        cli = new SecretStoreCli(terminal);
+
+        final Map<String,String> environment = environmentWithout(ENVIRONMENT_PASS_KEY);
+        final SecretStoreFactory secretStoreFactory = SecretStoreFactory.withEnvironment(environment);
+
+        cli = new SecretStoreCli(terminal, secretStoreFactory);
         existingStoreConfig = new SecureConfig();
         existingStoreConfig.add("keystore.file",
                 Paths.get(this.getClass().getClassLoader().getResource("logstash.keystore.with.default.pass").toURI()).toString().toCharArray());
         char[] keyStorePath = folder.newFolder().toPath().resolve("logstash.keystore").toString().toCharArray();
         newStoreConfig = new SecureConfig();
         newStoreConfig.add("keystore.file", keyStorePath.clone());
-        EnvironmentUtil.remove(ENVIRONMENT_PASS_KEY);
     }
 
     @Test
@@ -207,6 +213,13 @@ private void assertPrimaryHelped() {
                 containsIgnoringCase("remove");
     }
 
+    private Map<String,String> environmentWithout(final String key) {
+        final Map<String,String> mutableEnvironment = new HashMap<>(System.getenv());
+        mutableEnvironment.remove(key);
+
+        return Collections.unmodifiableMap(mutableEnvironment);
+    }
+
 
     class TestTerminal extends Terminal {
         public String out = "";
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
index aaed17cefeb..052394416a3 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
@@ -4,7 +4,6 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
-import org.logstash.secret.EnvironmentUtil;
 import org.logstash.secret.SecretIdentifier;
 import org.logstash.secret.store.backend.JavaKeyStore;
 
@@ -32,13 +31,13 @@ public class SecretStoreFactoryTest {
     @Rule
     public ExpectedException thrown = ExpectedException.none();
 
-
+    private static final SecretStoreFactory secretStoreFactory = SecretStoreFactory.fromEnvironment();
 
     @Test
     public void testAlternativeImplementation() {
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.classname", "org.logstash.secret.store.SecretStoreFactoryTest$MemoryStore".toCharArray());
-        SecretStore secretStore = SecretStoreFactory.load(secureConfig);
+        SecretStore secretStore = secretStoreFactory.load(secureConfig);
         assertThat(secretStore).isInstanceOf(MemoryStore.class);
         validateMarker(secretStore);
     }
@@ -48,7 +47,7 @@ public void testAlternativeImplementationInvalid() {
         thrown.expect(SecretStoreException.ImplementationNotFoundException.class);
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.classname", "junk".toCharArray());
-        SecretStore secretStore = SecretStoreFactory.load(secureConfig);
+        SecretStore secretStore = secretStoreFactory.load(secureConfig);
         assertThat(secretStore).isInstanceOf(MemoryStore.class);
         validateMarker(secretStore);
     }
@@ -59,7 +58,7 @@ public void testCreateLoad() throws IOException {
         String value = UUID.randomUUID().toString();
         SecureConfig secureConfig = new SecureConfig();
         secureConfig.add("keystore.file", folder.newFolder().toPath().resolve("logstash.keystore").toString().toCharArray());
-        SecretStore secretStore = SecretStoreFactory.create(secureConfig.clone());
+        SecretStore secretStore = secretStoreFactory.create(secureConfig.clone());
 
         byte[] marker = secretStore.retrieveSecret(LOGSTASH_MARKER);
         assertThat(new String(marker, StandardCharsets.UTF_8)).isEqualTo(LOGSTASH_MARKER.getKey());
@@ -68,7 +67,7 @@ public void testCreateLoad() throws IOException {
         assertThat(new String(retrievedValue, StandardCharsets.UTF_8)).isEqualTo(value);
 
 
-        secretStore = SecretStoreFactory.load(secureConfig);
+        secretStore = secretStoreFactory.load(secureConfig);
         marker = secretStore.retrieveSecret(LOGSTASH_MARKER);
         assertThat(new String(marker, StandardCharsets.UTF_8)).isEqualTo(LOGSTASH_MARKER.getKey());
         secretStore.persistSecret(id, value.getBytes(StandardCharsets.UTF_8));
@@ -78,44 +77,41 @@ public void testCreateLoad() throws IOException {
 
     @Test
     public void testDefaultLoadWithEnvPass() throws Exception {
+        String pass = UUID.randomUUID().toString();
+        final Map<String,String> modifiedEnvironment = new HashMap<String,String>(System.getenv()) {{
+            put(ENVIRONMENT_PASS_KEY, pass);
+        }};
+
+        final SecretStoreFactory secretStoreFactory = SecretStoreFactory.withEnvironment(modifiedEnvironment);
+
+        //Each usage of the secure config requires it's own instance since implementations can/should clear all the values once used.
+        SecureConfig secureConfig1 = new SecureConfig();
+        secureConfig1.add("keystore.file", folder.newFolder().toPath().resolve("logstash.keystore").toString().toCharArray());
+        SecureConfig secureConfig2 = secureConfig1.clone();
+        SecureConfig secureConfig3 = secureConfig1.clone();
+        SecureConfig secureConfig4 = secureConfig1.clone();
+
+        //ensure that with only the environment we can retrieve the marker from the store
+        SecretStore secretStore = secretStoreFactory.create(secureConfig1);
+        validateMarker(secretStore);
+
+        //ensure that aren't simply using the defaults
+        boolean expectedException = false;
         try {
-            String pass = UUID.randomUUID().toString();
-            EnvironmentUtil.add(new HashMap<String, String>() {{
-                put(ENVIRONMENT_PASS_KEY, pass);
-            }});
-
-            //Each usage of the secure config requires it's own instance since implementations can/should clear all the values once used.
-            SecureConfig secureConfig1 = new SecureConfig();
-            secureConfig1.add("keystore.file", folder.newFolder().toPath().resolve("logstash.keystore").toString().toCharArray());
-            SecureConfig secureConfig2 = secureConfig1.clone();
-            SecureConfig secureConfig3 = secureConfig1.clone();
-            SecureConfig secureConfig4 = secureConfig1.clone();
-
-            //ensure that with only the environment we can retrieve the marker from the store
-            SecretStore secretStore = SecretStoreFactory.create(secureConfig1);
-            validateMarker(secretStore);
-
-            //ensure that aren't simply using the defaults
-            boolean expectedException = false;
-            try {
-                new JavaKeyStore().create(secureConfig2);
-            } catch (SecretStoreException e) {
-                expectedException = true;
-            }
-            assertThat(expectedException).isTrue();
-
-            //ensure that direct key access using the system key wil work
-            secureConfig3.add(KEYSTORE_ACCESS_KEY, pass.toCharArray());
-            secretStore = new JavaKeyStore().load(secureConfig3);
-            validateMarker(secretStore);
-
-            //ensure that pass will work again
-            secretStore = SecretStoreFactory.load(secureConfig4);
-            validateMarker(secretStore);
-
-        } finally {
-            EnvironmentUtil.remove(ENVIRONMENT_PASS_KEY);
+            new JavaKeyStore().create(secureConfig2);
+        } catch (SecretStoreException e) {
+            expectedException = true;
         }
+        assertThat(expectedException).isTrue();
+
+        //ensure that direct key access using the system key wil work
+        secureConfig3.add(KEYSTORE_ACCESS_KEY, pass.toCharArray());
+        secretStore = new JavaKeyStore().load(secureConfig3);
+        validateMarker(secretStore);
+
+        //ensure that pass will work again
+        secretStore = secretStoreFactory.load(secureConfig4);
+        validateMarker(secretStore);
     }
 
     /**
@@ -125,7 +121,7 @@ public void testDefaultLoadWithEnvPass() throws Exception {
     public void testErrorLoading() {
         thrown.expect(SecretStoreException.LoadException.class);
         //default implementation requires a path
-        SecretStoreFactory.load(new SecureConfig());
+        secretStoreFactory.load(new SecureConfig());
     }
 
     private void validateMarker(SecretStore secretStore) {
