diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
index aa2d5448499..7e0211fcdb0 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/RubyAckedBatch.java
@@ -1,8 +1,6 @@
 package org.logstash.ackedqueue.ext;
 
 import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
 import org.jruby.RubyClass;
@@ -14,8 +12,6 @@
 import org.logstash.Event;
 import org.logstash.RubyUtil;
 import org.logstash.ackedqueue.Batch;
-import org.logstash.ackedqueue.Queueable;
-import org.logstash.ackedqueue.io.LongVector;
 import org.logstash.ext.JrubyEventExtLibrary;
 
 @JRubyClass(name = "AckedBatch")
@@ -34,30 +30,6 @@ public static RubyAckedBatch create(Ruby runtime, Batch batch) {
         return ackedBatch;
     }
 
-    @SuppressWarnings("unchecked") // for the getList() calls
-    @JRubyMethod(name = "initialize", required = 3)
-    public IRubyObject ruby_initialize(ThreadContext context, IRubyObject events,
-        IRubyObject seqNums, IRubyObject queue) {
-        if (!(events instanceof RubyArray)) {
-            context.runtime.newArgumentError("expected events array");
-        }
-        if (!(seqNums instanceof RubyArray)) {
-            context.runtime.newArgumentError("expected seqNums array");
-        }
-        if (!(queue instanceof AbstractJRubyQueue.RubyAckedQueue)) {
-            context.runtime.newArgumentError("expected queue AckedQueue");
-        }
-        final Collection<Long> seqList = (List<Long>) seqNums;
-        final LongVector seqs = new LongVector(seqList.size());
-        for (final long seq : seqList) {
-            seqs.add(seq);
-        }
-        this.batch = new Batch((List<Queueable>) events, seqs,
-            ((AbstractJRubyQueue.RubyAckedQueue) queue).getQueue()
-        );
-        return context.nil;
-    }
-
     @JRubyMethod(name = "get_elements")
     public IRubyObject ruby_get_elements(ThreadContext context) {
         RubyArray result = context.runtime.newArray();
