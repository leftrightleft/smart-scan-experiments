diff --git a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
index d62fdb6e5d6..9ea11ba3a45 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/DSL.java
@@ -303,6 +303,9 @@ public static PluginVertex gPlugin(SourceWithMetadata meta, PluginDefinition.Typ
         return gPlugin(meta, type, pluginName, new HashMap<>());
     }
 
+    public static PluginVertex gPlugin(SourceWithMetadata meta, PluginDefinition pluginDefinition) {
+        return gPlugin(meta, pluginDefinition.getType(), pluginDefinition.getName(), pluginDefinition.getArguments());
+    }
 
     public static IfVertex gIf(SourceWithMetadata meta, BooleanExpression expression) {
        return new IfVertex(meta, expression);
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java b/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
index a77af33a7b4..78aa4ed3467 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/imperative/IfStatement.java
@@ -84,6 +84,12 @@ public Graph toGraph() throws InvalidIRException {
         Graph trueGraph = getTrueStatement().toGraph();
         Graph falseGraph = getFalseStatement().toGraph();
 
+        // If there is nothing in the true or false sections of this if statement,
+        // we can omit the if statement altogether!
+        if (trueGraph.isEmpty() && falseGraph.isEmpty()) {
+            return new Graph();
+        }
+
         Graph.GraphCombinationResult combination = Graph.combine(trueGraph, falseGraph);
         Graph newGraph = combination.graph;
         Collection<Vertex> trueRoots = trueGraph.roots().map(combination.oldToNewVertices::get).collect(Collectors.toList());
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/imperative/IfStatementTest.java b/logstash-core/src/test/java/org/logstash/config/ir/imperative/IfStatementTest.java
new file mode 100644
index 00000000000..0275f8e6e3e
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/config/ir/imperative/IfStatementTest.java
@@ -0,0 +1,117 @@
+package org.logstash.config.ir.imperative;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import java.util.stream.Stream;
+
+import org.logstash.common.SourceWithMetadata;
+import org.logstash.config.ir.DSL;
+import org.logstash.config.ir.InvalidIRException;
+import org.logstash.config.ir.PluginDefinition;
+import org.logstash.config.ir.expression.BooleanExpression;
+import org.logstash.config.ir.expression.Expression;
+import org.logstash.config.ir.graph.*;
+
+import static org.logstash.config.ir.IRHelpers.*;
+
+public class IfStatementTest {
+
+    @Test
+    public void testEmptyIf() throws InvalidIRException {
+        Statement trueStatement = new NoopStatement(randMeta());
+        Statement falseStatement = new NoopStatement(randMeta());
+        IfStatement ifStatement = new IfStatement(
+                randMeta(),
+                createTestExpression(),
+                trueStatement,
+                falseStatement
+        );
+
+        Graph ifStatementGraph = ifStatement.toGraph();
+        assertTrue(ifStatementGraph.isEmpty());
+    }
+
+    @Test
+    public void testIfWithOneTrueStatement() throws InvalidIRException {
+        PluginDefinition pluginDef = testPluginDefinition();
+        Statement trueStatement = new PluginStatement(randMeta(), pluginDef);
+        Statement falseStatement = new NoopStatement(randMeta());
+        BooleanExpression ifExpression = createTestExpression();
+        IfStatement ifStatement = new IfStatement(
+                randMeta(),
+                ifExpression,
+                trueStatement,
+                falseStatement
+        );
+
+        Graph ifStatementGraph = ifStatement.toGraph();
+        assertFalse(ifStatementGraph.isEmpty());
+        
+        Graph expected = new Graph();
+        IfVertex expectedIf = DSL.gIf(randMeta(), ifExpression);
+        expected.addVertex(expectedIf);
+        PluginVertex expectedT = DSL.gPlugin(randMeta(), pluginDef);
+        expected.chainVertices(true, expectedIf, expectedT);
+
+        assertSyntaxEquals(expected, ifStatementGraph);
+    }
+
+
+    @Test
+    public void testIfWithOneFalseStatement() throws InvalidIRException {
+        PluginDefinition pluginDef = testPluginDefinition();
+        Statement trueStatement = new NoopStatement(randMeta());
+        Statement falseStatement = new PluginStatement(randMeta(), pluginDef);
+        BooleanExpression ifExpression = createTestExpression();
+        IfStatement ifStatement = new IfStatement(
+                randMeta(),
+                createTestExpression(),
+                trueStatement,
+                falseStatement
+        );
+
+        Graph ifStatementGraph = ifStatement.toGraph();
+        assertFalse(ifStatementGraph.isEmpty());
+
+        Graph expected = new Graph();
+        IfVertex expectedIf = DSL.gIf(randMeta(), ifExpression);
+        expected.addVertex(expectedIf);
+
+        PluginVertex expectedF = DSL.gPlugin(randMeta(), pluginDef);
+        expected.chainVertices(false, expectedIf, expectedF);
+
+        assertSyntaxEquals(expected, ifStatementGraph);
+    }
+
+    @Test
+    public void testIfWithOneTrueOneFalseStatement() throws InvalidIRException {
+        PluginDefinition pluginDef = testPluginDefinition();
+        Statement trueStatement = new PluginStatement(randMeta(), pluginDef);
+        Statement falseStatement = new PluginStatement(randMeta(), pluginDef);
+        BooleanExpression ifExpression = createTestExpression();
+        IfStatement ifStatement = new IfStatement(
+                randMeta(),
+                createTestExpression(),
+                trueStatement,
+                falseStatement
+        );
+
+        Graph ifStatementGraph = ifStatement.toGraph();
+        assertFalse(ifStatementGraph.isEmpty());
+
+        Graph expected = new Graph();
+        IfVertex expectedIf = DSL.gIf(randMeta(), ifExpression);
+        expected.addVertex(expectedIf);
+
+        PluginVertex expectedT = DSL.gPlugin(randMeta(), pluginDef);
+        expected.chainVertices(true, expectedIf, expectedT);
+
+        PluginVertex expectedF = DSL.gPlugin(randMeta(), pluginDef);
+        expected.chainVertices(false, expectedIf, expectedF);
+
+        assertSyntaxEquals(expected, ifStatementGraph);
+    }
+}
