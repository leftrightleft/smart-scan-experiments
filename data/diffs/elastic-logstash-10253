diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
index fb20c4ffe39..29538855e6a 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/BenchmarkMeta.java
@@ -2,6 +2,7 @@
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.nio.file.Path;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -12,6 +13,8 @@ public final class BenchmarkMeta {
 
     private final String testcase;
 
+    private final Path configpath;
+
     private final String version;
 
     private final LsVersionType vtype;
@@ -20,15 +23,17 @@ public final class BenchmarkMeta {
 
     private final int batchsize;
 
-    BenchmarkMeta(final String testcase, final String version, final LsVersionType vtype,
-        final int workers, final int batchsize) {
+    BenchmarkMeta(final String testcase, final Path configpath, final String version, final LsVersionType vtype,
+                  final int workers, final int batchsize) {
         this.testcase = testcase;
+        this.configpath = configpath;
         this.version = version;
         this.vtype = vtype;
         this.workers = workers;
         this.batchsize = batchsize;
     }
 
+
     public String getVersion() {
         return version;
     }
@@ -37,6 +42,8 @@ public String getTestcase() {
         return testcase;
     }
 
+    public Path getConfigPath() { return configpath; }
+
     public LsVersionType getVtype() {
         return vtype;
     }
@@ -52,6 +59,7 @@ public int getBatchsize() {
     public Map<String, Object> asMap() {
         final Map<String, Object> result = new HashMap<>();
         result.put("test_name", testcase);
+        result.put("test_config_path", configpath);
         result.put("os_name", SystemUtils.OS_NAME);
         result.put("os_version", SystemUtils.OS_VERSION);
         try {
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
index 3bf842282b5..d482cf0bc26 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/LsMetricsMonitor.java
@@ -40,6 +40,7 @@ public EnumMap<LsMetricStats, ListStatistics> call() throws IOException {
         long count = 0L;
         final ListStatistics counts = new ListStatistics();
         final ListStatistics cpu = new ListStatistics();
+        final ListStatistics mem = new ListStatistics();
         long start = System.nanoTime();
         while (running) {
             try {
@@ -59,6 +60,7 @@ public EnumMap<LsMetricStats, ListStatistics> call() throws IOException {
                 count = newcount;
                 counts.addValue((double) count);
                 cpu.addValue(newcounts[1]);
+                mem.addValue(newcounts[2]);
             } catch (final InterruptedException ex) {
                 throw new IllegalStateException(ex);
             }
@@ -67,6 +69,7 @@ public EnumMap<LsMetricStats, ListStatistics> call() throws IOException {
         result.put(LsMetricStats.THROUGHPUT, stats);
         result.put(LsMetricStats.COUNT, counts);
         result.put(LsMetricStats.CPU_USAGE, cpu);
+        result.put(LsMetricStats.HEAP_USAGE, mem);
         store.store(result);
         return result;
     }
@@ -100,7 +103,13 @@ private long[] getCounts() {
             } else {
                 cpu = readNestedLong(data, "process", "cpu", "percent");
             }
-            return new long[]{count, cpu};
+            final long heapUsed;
+            if(count == -1L) {
+                heapUsed = -1L;
+            } else {
+                heapUsed = readNestedLong(data, "jvm", "mem", "heap_used_percent");
+            }
+            return new long[]{count, cpu, heapUsed};
         } catch (final IOException ex) {
             throw new IllegalStateException(ex);
         }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
index 94a822b7981..725df18bc5b 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/Main.java
@@ -17,6 +17,7 @@
 import joptsimple.OptionSpecBuilder;
 import org.logstash.benchmark.cli.cases.ApacheLogsComplex;
 import org.logstash.benchmark.cli.cases.Case;
+import org.logstash.benchmark.cli.cases.CustomTestCase;
 import org.logstash.benchmark.cli.cases.GeneratorToStdout;
 import org.logstash.benchmark.cli.ui.LsMetricStats;
 import org.logstash.benchmark.cli.ui.LsVersionType;
@@ -67,6 +68,9 @@ public static void main(final String... args) throws IOException, NoSuchAlgorith
         final OptionSpec<String> testcase = parser.accepts(
             UserInput.TEST_CASE_PARAM, UserInput.TEST_CASE_HELP
         ).withRequiredArg().ofType(String.class).defaultsTo(GeneratorToStdout.IDENTIFIER).forHelp();
+        final OptionSpec<File> testcaseconfig = parser.accepts(
+                UserInput.TEST_CASE_CONFIG_PARAM, UserInput.TEST_CASE_CONFIG_HELP
+        ).withRequiredArg().ofType(File.class).forHelp();
         final OptionSpec<File> pwd = parser.accepts(
             UserInput.WORKING_DIRECTORY_PARAM, UserInput.WORKING_DIRECTORY_HELP
         ).withRequiredArg().ofType(File.class).defaultsTo(UserInput.WORKING_DIRECTORY_DEFAULT)
@@ -108,8 +112,19 @@ public static void main(final String... args) throws IOException, NoSuchAlgorith
         settings.setProperty(
             LsBenchSettings.INPUT_DATA_REPEAT, String.valueOf(options.valueOf(repeats))
         );
+
+        Path testCaseConfigPath = null;
+        if (options.valueOf(testcase).equals("custom")) {
+            if (options.has(testcaseconfig)) {
+                testCaseConfigPath = options.valueOf(testcaseconfig).toPath();
+            }
+            else {
+                throw new IllegalArgumentException("Path to Test Case Config must be provided");
+            }
+        }
+
         final BenchmarkMeta runConfig = new BenchmarkMeta(
-            options.valueOf(testcase), version, type, options.valueOf(workers),
+            options.valueOf(testcase), testCaseConfigPath, version, type, options.valueOf(workers),
             options.valueOf(batchsize)
         );
         execute(
@@ -148,6 +163,12 @@ public static void execute(final UserOutput output, final Properties settings,
                 Integer.parseInt(settings.getProperty(LsBenchSettings.INPUT_DATA_REPEAT))
             )
         );
+        if (runConfig.getTestcase().equals("custom")) {
+            output.green(
+                    String.format("Test Case Config: %s", runConfig.getConfigPath())
+            );
+        }
+
         output.printLine();
         Files.createDirectories(cwd);
         final LogstashInstallation logstash;
@@ -185,7 +206,10 @@ private static Case setupTestCase(final DataStore store, final LogstashInstallat
             testcase = new GeneratorToStdout(store, logstash, settings, runConfig);
         } else if (ApacheLogsComplex.IDENTIFIER.equalsIgnoreCase(test)) {
             testcase = new ApacheLogsComplex(store, logstash, cwd, settings, output, runConfig);
-        } else {
+        } else if (CustomTestCase.IDENTIFIER.equalsIgnoreCase(test)) {
+            testcase = new CustomTestCase(store, logstash, cwd, settings, output, runConfig);
+        }
+        else {
             throw new IllegalArgumentException(String.format("Unknown test case %s", test));
         }
         return testcase;
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java
new file mode 100644
index 00000000000..d06bfe0eea9
--- /dev/null
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/cases/CustomTestCase.java
@@ -0,0 +1,46 @@
+package org.logstash.benchmark.cli.cases;
+
+import org.apache.commons.io.IOUtils;
+import org.logstash.benchmark.cli.*;
+import org.logstash.benchmark.cli.ui.LsMetricStats;
+import org.logstash.benchmark.cli.ui.UserOutput;
+import org.openjdk.jmh.util.ListStatistics;
+
+import java.io.*;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.AbstractMap;
+import java.util.Properties;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeoutException;
+
+public class CustomTestCase implements Case {
+    public static final String IDENTIFIER = "custom";
+
+    private final LogstashInstallation logstash;
+    private final DataStore store;
+    private final Path configpath;
+
+    public CustomTestCase(DataStore store, LogstashInstallation logstash, Path cwd, Properties settings, UserOutput output, BenchmarkMeta runConfig) {
+        this.logstash = logstash;
+        logstash.configure(runConfig);
+        this.store = store;
+        this.configpath = runConfig.getConfigPath();
+    }
+
+    @Override
+    public AbstractMap<LsMetricStats, ListStatistics> run() {
+        try (final LsMetricsMonitor.MonitorExecution monitor =
+                     new LsMetricsMonitor.MonitorExecution(logstash.metrics(), store)) {
+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+
+            try (final InputStream cfg = Files.newInputStream(configpath)){
+                IOUtils.copy(cfg, baos);
+            }
+            logstash.execute(baos.toString());
+            return monitor.stopAndGet();
+        } catch (final IOException | InterruptedException | ExecutionException | TimeoutException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+}
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/LsMetricStats.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/LsMetricStats.java
index 90cb7d798f8..7a99b176aac 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/LsMetricStats.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/LsMetricStats.java
@@ -15,5 +15,7 @@ public enum LsMetricStats {
     /**
      * Statistics on CPU usage.
      */
-    CPU_USAGE
+    CPU_USAGE,
+
+    HEAP_USAGE
 }
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
index 7347ac462cb..d5c5044742e 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserInput.java
@@ -32,7 +32,7 @@ public final class UserInput {
     public static final String TEST_CASE_PARAM = "testcase";
 
     public static final String TEST_CASE_HELP =
-        "Currently available test cases are 'baseline' and 'apache'.";
+        "Currently available test cases are 'baseline', 'apache' and 'custom'.";
 
     public static final String LS_WORKER_THREADS = "ls-workers";
 
@@ -79,6 +79,10 @@ public final class UserInput {
     public static final String WORKING_DIRECTORY_HELP =
             "Working directory to store cached files in.";
 
+    public static final String TEST_CASE_CONFIG_PARAM = "config";
+    public static final String TEST_CASE_CONFIG_HELP =
+            "Path to custom logstash config. Required if testcase is set to 'custom'";
+
     /**
      * Constructor.
      */
diff --git a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
index a67a3ff8952..3b23c73c072 100644
--- a/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
+++ b/tools/benchmark-cli/src/main/java/org/logstash/benchmark/cli/ui/UserOutput.java
@@ -80,6 +80,11 @@ public void printStatistics(final Map<LsMetricStats, ListStatistics> stats) {
                 "Mean CPU Usage: %.2f%%", stats.get(LsMetricStats.CPU_USAGE).getMean()
             )
         );
+        green(
+                String.format(
+                        "Mean Heap Usage: %.2f%%", stats.get(LsMetricStats.HEAP_USAGE).getMean()
+                )
+        );
     }
     
     private static String colorize(final String line, final String prefix) {
diff --git a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
index 217d9daaa8e..dab08126a8f 100644
--- a/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
+++ b/tools/benchmark-cli/src/test/java/org/logstash/benchmark/cli/MainTest.java
@@ -97,4 +97,16 @@ public void runsRepeatApacheAgainstRelease() throws Exception {
             String.format("--%s=%d", UserInput.REPEAT_PARAM, 2)
         );
     }
+
+    /**
+     * @throws Exception On Failure
+     */
+    @Test
+    public void runsCustomAgainstLocal() throws Exception {
+        Main.main(
+                String.format("--%s=custom", UserInput.TEST_CASE_PARAM),
+                String.format("--%s=%s", UserInput.TEST_CASE_CONFIG_PARAM, System.getProperty("logstash.benchmark.test.config.path") ),
+                String.format("--%s=%s", UserInput.LOCAL_VERSION_PARAM, System.getProperty("logstash.benchmark.test.local.path"))
+        );
+    }
 }
