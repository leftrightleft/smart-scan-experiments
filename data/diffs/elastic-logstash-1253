diff --git a/lib/logstash/filters/date.rb b/lib/logstash/filters/date.rb
index 937127a646b..8b98529c1e9 100644
--- a/lib/logstash/filters/date.rb
+++ b/lib/logstash/filters/date.rb
@@ -133,14 +133,14 @@ def setupMatcher(field, locale, value)
           end
           parser = lambda { |date| joda_parser.parseMillis(date) }
         when "UNIX" # unix epoch
-          joda_instant = org.joda.time.Instant.java_class.constructor(Java::long).method(:new_instance)
-          #parser = lambda { |date| joda_instant.call((date.to_f * 1000).to_i).to_java.toDateTime }
-          parser = lambda { |date| (date.to_f * 1000).to_i }
+          parser = lambda do |date|
+            raise "Invalid UNIX epoch value '#{date}'" unless /^\d+(?:\.\d+)?$/ === date || date.is_a?(Numeric)
+            (date.to_f * 1000).to_i
+          end
         when "UNIX_MS" # unix epoch in ms
-          joda_instant = org.joda.time.Instant.java_class.constructor(Java::long).method(:new_instance)
           parser = lambda do |date|
-            #return joda_instant.call(date.to_i).to_java.toDateTime
-            return date.to_i
+            raise "Invalid UNIX epoch value '#{date}'" unless /^\d+$/ === date || date.is_a?(Numeric)
+            date.to_i
           end
         when "TAI64N" # TAI64 with nanoseconds, -10000 accounts for leap seconds
           joda_instant = org.joda.time.Instant.java_class.constructor(Java::long).method(:new_instance)
diff --git a/spec/filters/date.rb b/spec/filters/date.rb
index 2419f4399ea..20f336a15e0 100644
--- a/spec/filters/date.rb
+++ b/spec/filters/date.rb
@@ -112,6 +112,12 @@
         insist { subject["@timestamp"].time } == Time.iso8601(output).utc
       end
     end # times.each
+
+    #Invalid value should not be evaluated to zero (String#to_i madness)
+    sample("mydate" => "%{bad_value}") do
+      insist { subject["mydate"] } == "%{bad_value}"
+      insist { subject["@timestamp"] } != Time.iso8601("1970-01-01T00:00:00.000Z").utc
+    end
   end
 
   describe "parsing microsecond-precise times with UNIX (#213)" do
@@ -128,6 +134,18 @@
       # Joda time only supports milliseconds :\
       insist { subject.timestamp.time } == Time.iso8601("2012-10-16T12:15:44.123-07:00").utc
     end
+
+    #Support float values
+    sample("mydate" => 1350414944.123456) do
+      insist { subject["mydate"] } == 1350414944.123456
+      insist { subject["@timestamp"].time } == Time.iso8601("2012-10-16T12:15:44.123-07:00").utc
+    end
+
+    #Invalid value should not be evaluated to zero (String#to_i madness)
+    sample("mydate" => "%{bad_value}") do
+      insist { subject["mydate"] } == "%{bad_value}"
+      insist { subject["@timestamp"] } != Time.iso8601("1970-01-01T00:00:00.000Z").utc
+    end
   end
 
   describe "parsing with UNIX_MS" do
