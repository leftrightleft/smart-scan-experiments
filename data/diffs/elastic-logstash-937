diff --git a/lib/logstash/inputs/tcp.rb b/lib/logstash/inputs/tcp.rb
index 05dd99d3461..954cbd4fea2 100644
--- a/lib/logstash/inputs/tcp.rb
+++ b/lib/logstash/inputs/tcp.rb
@@ -111,17 +111,17 @@ def handle_socket(socket, client_address, output_queue, codec)
         end
       end
       codec.decode(buf) do |event|
+        event["host"] ||= client_address
+        event["sslsubject"] ||= socket.peer_cert.subject if @ssl_enable && @ssl_verify
         decorate(event)
-        event["host"] = client_address
-        event["sslsubject"] = socket.peer_cert.subject if @ssl_enable && @ssl_verify
         output_queue << event
       end
     end # loop do
   rescue => e
     codec.respond_to?(:flush) && codec.flush do |event|
+      event["host"] ||= client_address
+      event["sslsubject"] ||= socket.peer_cert.subject if @ssl_enable && @ssl_verify
       decorate(event)
-      event["host"] = client_address
-      event["sslsubject"] = socket.peer_cert.subject if @ssl_enable && @ssl_verify
       output_queue << event
     end
 
diff --git a/spec/inputs/tcp.rb b/spec/inputs/tcp.rb
index 671bc59af49..d228eac13bd 100644
--- a/spec/inputs/tcp.rb
+++ b/spec/inputs/tcp.rb
@@ -82,7 +82,8 @@
       data = {
         "hello" => "world",
         "foo" => [1,2,3],
-        "baz" => { "1" => "2" }
+        "baz" => { "1" => "2" },
+        "host" => "example host"
       }
 
       socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
@@ -93,6 +94,39 @@
       insist { event["hello"] } == data["hello"]
       insist { event["foo"] } == data["foo"]
       insist { event["baz"] } == data["baz"]
+
+      # Make sure the tcp input, w/ json codec, uses the event's 'host' value,
+      # if present, instead of providing its own
+      insist { event["host"] } == data["host"]
+    end # input
+  end
+
+  describe "read events with json codec (testing 'host' handling)" do
+    port = 5514
+    config <<-CONFIG
+      input {
+        tcp {
+          port => #{port}
+          codec => json
+        }
+      }
+    CONFIG
+
+    input do |pipeline, queue|
+      Thread.new { pipeline.run }
+      sleep 0.1 while !pipeline.ready?
+
+      data = {
+        "hello" => "world"
+      }
+
+      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket.puts(data.to_json)
+      socket.close
+
+      event = queue.pop
+      insist { event["hello"] } == data["hello"]
+      insist { event }.include?("host")
     end # input
   end
 end
