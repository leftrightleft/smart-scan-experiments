diff --git a/Gemfile b/Gemfile
index 5ee06f9abd4..ef4a3dfb76e 100644
--- a/Gemfile
+++ b/Gemfile
@@ -2,6 +2,7 @@ source :rubygems
 
 gem "cabin", "0.3.8" # for logging. apache 2 license
 gem "bunny" # for amqp support, MIT-style license
+gem "hot_bunnies", :git => "git://github.com/ruby-amqp/hot_bunnies.git", :platforms => :jruby  #License: MIT
 gem "uuidtools" # for naming amqp queues, License ???
 
 gem "filewatch", "0.3.3"  # for file tailing, BSD License
diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index 19cc85d8e93..1cb9c18cddd 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -61,6 +61,8 @@ class LogStash::Inputs::Amqp < LogStash::Inputs::Base
   config :prefetch_count, :validate => :number, :default => 1
 
   # Enable message acknowledgement
+  # Disabling this can greatly increase speed
+  # at the expense of possible duplicate messages
   config :ack, :validate => :boolean, :default => true
 
   # Enable or disable debugging
@@ -72,6 +74,16 @@ class LogStash::Inputs::Amqp < LogStash::Inputs::Base
   # Validate SSL certificate
   config :verify_ssl, :validate => :boolean, :default => false
 
+  # Driver selection
+  # By default, logstash will use the `hot_bunnies` gem under JRuby
+  # and the `bunny` gem under MRI/YARV variants
+  # If you need to explcitly set this, do so here
+  # see [choosing a driver](choosing-a-driver) for more information
+  # Please note that currently, `hot_bunnies` does not yet
+  # support SSL. If you need SSL, please explicitly set this to
+  # `bunny`
+  config :driver, :validate => ["bunny", "hot_bunnies"]
+
   public
   def initialize(params)
     super
@@ -82,8 +94,12 @@ def initialize(params)
 
   public
   def register
+    require "logstash/util/amqp"
     @logger.info("Registering input #{@url}")
-    require "bunny" # rubygem 'bunny'
+    self.class.send(:include, LogStash::Util::AMQP)
+    @driver ||= select_driver
+    @logger.info("Logstash driver selected", :driver => driver)
+    require "#{@driver}"
     @vhost ||= "/"
     @port ||= 5672
     @key ||= "#"
@@ -111,28 +127,41 @@ def register
   def run(queue)
     begin
       @logger.debug("Connecting with AMQP settings #{@amqpsettings.inspect} to set up queue #{@name.inspect}")
-      @bunny = Bunny.new(@amqpsettings)
+      @connection = connect(@driver, @amqpsettings)
       return if terminating?
-      @bunny.start
-      @bunny.qos({:prefetch_count => @prefetch_count})
+      @channel = start!(@driver, @connection, @prefetch_count)
 
-      @queue = @bunny.queue(@name, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive})
-      @queue.bind(@exchange, :key => @key)
+      @queue = @channel.queue(@name, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive})
+      do_bind(@driver, @queue, @exchange, @key)
 
       timer = @metric_amqp_read.time
-      @queue.subscribe({:ack => @ack}) do |data|
-        timer.stop
-        e = to_event(data[:payload], @amqpurl)
-        if e
-          @metric_queue_write.time do
-            queue << e
+      if @driver == 'hot_bunnies'
+        subscription = @queue.subscribe(:ack => @ack, :blocking => true) do |headers,data|
+          timer.stop
+          e = to_event(data, @amqp_url)
+          if e
+            @metric_queue_write.time do
+              queue << e
+              headers.ack if @ack == true # ack after we know we're good
+            end
+          end
+          time = @metric_amqp_read.time
+        end # @queue.subscribe
+      else
+        @queue.subscribe({:ack => @ack}) do |data|
+          timer.stop
+          e = to_event(data[:payload], @amqpurl)
+          if e
+            @metric_queue_write.time do
+              queue << e
+            end
           end
-        end
-        timer = @metric_amqp_read.time
-      end # @queue.subscribe
+          timer = @metric_amqp_read.time
+        end # @queue.subscribe
+      end # @driver.subscribe
 
-    rescue *[Bunny::ConnectionError, Bunny::ServerDownError] => e
-      @logger.error("AMQP connection error, will reconnect: #{e}")
+    rescue Exception => e
+      @logger.error("AMQP connection error: #{e}")
       # Sleep for a bit before retrying.
       # TODO(sissel): Write 'backoff' method?
       sleep(1)
@@ -141,6 +170,7 @@ def run(queue)
   end # def run
 
   def teardown
+    do_unbind(@driver, @queue, @exchange, @key) unless @durable == true
     @queue.unsubscribe unless @durable == true
     @queue.delete unless @durable == true
     @bunny.close if @bunny
diff --git a/lib/logstash/outputs/amqp.rb b/lib/logstash/outputs/amqp.rb
index a33c62843c8..5333d0cf0b3 100644
--- a/lib/logstash/outputs/amqp.rb
+++ b/lib/logstash/outputs/amqp.rb
@@ -41,6 +41,12 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   # Is this exchange durable? (aka; Should it survive a broker restart?)
   config :durable, :validate => :boolean, :default => true
 
+  # Should the exchange be deleted on the broker when the last producer 
+  # disconnects? Set this option to 'false' if you want the exchange to remain
+  # on the broker. If set to true, queues attempting to bind before it is
+  # created will fail.
+  config :auto_delete, :validate => :boolean, :default => true
+
   # Should messages persist to disk on the AMQP broker until they are read by a
   # consumer?
   config :persistent, :validate => :boolean, :default => true
@@ -54,32 +60,46 @@ class LogStash::Outputs::Amqp < LogStash::Outputs::Base
   # Validate SSL certificate
   config :verify_ssl, :validate => :boolean, :default => false
 
+  # Driver selection
+  # By default, logstash will use the `hot_bunnies` gem under JRuby
+  # and the `bunny` gem under MRI/YARV variants
+  # If you need to explcitly set this, do so here
+  # see [choosing a driver](choosing-a-driver) for more information
+  # Please note that currently, `hot_bunnies` does not yet
+  # support SSL. If you need SSL, please explicitly set this to
+  # `bunny`
+  config :driver, :validate => ["bunny", "hot_bunnies"]
+
   public
   def register
-    require "bunny" # rubygem 'bunny'
-
+    require "logstash/util/amqp" # rubygem 'bunny'
     @logger.info("Registering output", :plugin => self)
-    connect
-  end # def register
+    self.class.send(:include, LogStash::Util::AMQP)
+    @driver ||= select_driver
+    @logger.info("Logstash driver selected", :driver => driver)
+    require "#{@driver}"
 
-  public
-  def connect
-    amqpsettings = {
+    @amqpsettings = {
       :vhost => @vhost,
       :host => @host,
       :port => @port,
       :logging => @debug,
     }
-    amqpsettings[:user] = @user if @user
-    amqpsettings[:pass] = @password.value if @password
-    amqpsettings[:ssl] = @ssl if @ssl
-    amqpsettings[:verify_ssl] = @verify_ssl if @verify_ssl
+    @amqpsettings[:user] = @user if @user
+    @amqpsettings[:pass] = @password.value if @password
+    @amqpsettings[:ssl] = @ssl if @ssl
+    @amqpsettings[:verify_ssl] = @verify_ssl if @verify_ssl
 
+    do_it # THIS WILL CONFLICT WITH THE AMQP HELPER
+  end # def register
+
+  public
+  def do_it
     begin
-      @logger.debug("Connecting to AMQP", :settings => amqpsettings,
+      @logger.debug("Connecting to AMQP", :settings => @amqpsettings,
                     :exchange_type => @exchange_type, :name => @name)
-      @bunny = Bunny.new(amqpsettings)
-      @bunny.start
+      @connection = connect(@driver, @amqpsettings)
+      @channel = start!(@driver, @connection, nil)
     rescue => e
       if terminating?
         return
@@ -93,7 +113,7 @@ def connect
 
     @logger.debug("Declaring exchange", :name => @name, :type => @exchange_type,
                   :durable => @durable)
-    @exchange = @bunny.exchange(@name, :type => @exchange_type.to_sym, :durable => @durable)
+    @exchange = @channel.exchange(@name, :type => @exchange_type.to_sym, :durable => @durable, :auto_delete => @auto_delete)
 
     @logger.debug("Binding exchange", :name => @name, :key => @key)
   end # def connect
@@ -119,11 +139,20 @@ def receive_raw(message, key=@key)
     begin
       if @exchange
         @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key }])
-        @exchange.publish(message, :persistent => @persistent, :key => key)
+        # TODO (lusis)
+        # Move options building to the helper
+        # Luckily both libs use similar approaches
+        case @driver
+        when 'hot_bunnies'
+          publish_opts = {:routing_key => key, :properties => {:persistent => @persistent}}
+        else
+          publish_opts = {:key => key, :persistent => @persistent}
+        end
+        @exchange.publish(message, publish_opts)
       else
         @logger.warn("Tried to send message, but not connected to amqp yet.")
       end
-    rescue *[Bunny::ServerDownError, Errno::ECONNRESET] => e
+    rescue Exception => e
       @logger.error("AMQP connection error (during publish), will reconnect: #{e}")
       connect
       retry
@@ -137,8 +166,10 @@ def to_s
 
   public
   def teardown
-    @bunny.close rescue nil
-    @bunny = nil
+    if driver == 'bunny'
+      @channel.close rescue nil
+    end
+    @connection = nil
     @exchange = nil
     finished
   end # def teardown
diff --git a/lib/logstash/util/amqp.rb b/lib/logstash/util/amqp.rb
new file mode 100644
index 00000000000..1f9f4454f6f
--- /dev/null
+++ b/lib/logstash/util/amqp.rb
@@ -0,0 +1,60 @@
+require 'logstash/namespace'
+
+module LogStash::Util::AMQP
+
+  def select_driver
+    case RUBY_ENGINE
+    when 'jruby'
+      driver = 'hot_bunnies'
+    else
+      driver = 'bunny'
+    end
+    return driver
+  end
+
+  def connect(driver, options={})
+    case driver
+    when 'hot_bunnies'
+      options.delete_if do |k,v|
+        %w{ssl verify_ssl logging}.include?(k)
+      end
+      connection = HotBunnies.connect(options)
+    else
+      connection = Bunny.new(options)
+    end
+    return connection
+  end
+
+  def start!(driver, connection, prefetch_count = nil)
+    case driver
+    when 'hot_bunnies'
+      # hot_bunnies operates on channel object
+      channel = connection.create_channel
+      channel.prefetch = prefetch_count unless prefetch_count == nil
+      return channel
+    else
+      # bunny operations on connection object
+      connection.start
+      connection.qos({:prefetch_count => prefetch_count}) unless prefetch_count == nil
+      return connection
+    end
+  end
+
+  def do_bind(driver, queue, exchange, key)
+    case driver
+    when 'hot_bunnies'
+      queue.bind(exchange, :routing_key => key)
+    else
+      queue.bind(exchange, :key => key)
+    end
+  end
+
+  def do_unbind(driver, queue, exchange, key)
+    case driver
+    when 'hot_bunnies'
+      queue.unbind(exchange, :routing_key => key)
+    else
+      queue.unbind(exchange, :key => key)
+    end
+  end
+end
