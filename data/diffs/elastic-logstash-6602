diff --git a/lib/pluginmanager/bundler/logstash_injector.rb b/lib/pluginmanager/bundler/logstash_injector.rb
index 6193cfb100a..45dcc83a594 100644
--- a/lib/pluginmanager/bundler/logstash_injector.rb
+++ b/lib/pluginmanager/bundler/logstash_injector.rb
@@ -5,11 +5,21 @@
 require "bundler/dependency"
 require "bundler/dsl"
 require "bundler/injector"
+require "bundler/shared_helpers"
 require "pluginmanager/gemfile"
+require "pathname"
 
 
 # This class cannot be in the logstash namespace, because of the way the DSL
 # class interact with the other libraries
+module Bundler
+  module SharedHelpers
+    def default_bundle_dir
+      Pathname.new(LogStash::Environment::LOGSTASH_HOME)
+    end
+  end
+end
+
 module Bundler
   class LogstashInjector < ::Bundler::Injector
     def self.inject!(new_deps, options = { :gemfile => LogStash::Environment::GEMFILE, :lockfile => LogStash::Environment::LOCKFILE })
@@ -20,7 +30,12 @@ def self.inject!(new_deps, options = { :gemfile => LogStash::Environment::GEMFIL
       dependencies = new_deps.dependencies.collect(&method(:dependency))
 
       injector = new(bundler_format)
-      injector.inject(gemfile, lockfile, dependencies)
+
+      # Some of the internal classes requires to be inside the LOGSTASH_HOME to find the relative
+      # path of the core gems.
+      Dir.chdir(LogStash::Environment::LOGSTASH_HOME) do
+        injector.inject(gemfile, lockfile, dependencies)
+      end
     end
 
     def self.dependency(plugin)
diff --git a/qa/integration/services/logstash_service.rb b/qa/integration/services/logstash_service.rb
index 282010ea4c7..cd4e054af26 100644
--- a/qa/integration/services/logstash_service.rb
+++ b/qa/integration/services/logstash_service.rb
@@ -238,7 +238,7 @@ def install(plugin_name)
       run("install #{plugin_name}")
     end
 
-    def run_raw(cmd_parameters)
+    def run_raw(cmd_parameters, change_dir = true)
       out = Tempfile.new("content")
       out.sync = true
 
@@ -248,8 +248,12 @@ def run_raw(cmd_parameters)
       process = ChildProcess.build(cmd, *parts)
       process.io.stdout = process.io.stderr = out
 
-      Dir.chdir(@logstash_home) do
-        Bundler.with_clean_env do
+      Bundler.with_clean_env do
+        if change_dir
+          Dir.chdir(@logstash_home) do
+            process.start
+          end
+        else
           process.start
         end
       end
diff --git a/qa/integration/specs/cli/install_spec.rb b/qa/integration/specs/cli/install_spec.rb
index 0208b292146..b9352e4c87a 100644
--- a/qa/integration/specs/cli/install_spec.rb
+++ b/qa/integration/specs/cli/install_spec.rb
@@ -4,6 +4,8 @@
 require_relative "../../services/logstash_service"
 require_relative "../../framework/helpers"
 require "logstash/devutils/rspec/spec_helper"
+require "stud/temporary"
+require "fileutils"
 
 def gem_in_lock_file?(pattern, lock_file)
   content =  File.read(lock_file)
@@ -19,8 +21,10 @@ def gem_in_lock_file?(pattern, lock_file)
     @pack_directory =  File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "fixtures", "logstash-dummy-pack"))
   end
 
-  context "pack" do
+  shared_examples "install from a pack" do
     let(:pack) { "file://#{File.join(@pack_directory, "logstash-dummy-pack.zip")}" }
+    let(:install_command) { "bin/logstash-plugin install" }
+    let(:change_dir) { true }
 
     # When you are on anything by linux we wont disable the internet with seccomp
     if RbConfig::CONFIG["host_os"] == "linux"
@@ -38,7 +42,7 @@ def gem_in_lock_file?(pattern, lock_file)
         let(:offline_wrapper_cmd) { File.join(offline_wrapper_path, "offline") }
 
         it "successfully install the pack" do
-          execute = @logstash_plugin.run_raw("#{offline_wrapper_cmd} bin/logstash-plugin install #{pack}")
+          execute = @logstash_plugin.run_raw("#{offline_wrapper_cmd} #{install_command} #{pack}", change_dir)
 
           expect(execute.stderr_and_stdout).to match(/Install successful/)
           expect(execute.exit_code).to eq(0)
@@ -50,9 +54,10 @@ def gem_in_lock_file?(pattern, lock_file)
         end
       end
     else
+
       context "with internet connection" do
         it "successfully install the pack" do
-          execute = @logstash_plugin.install(pack)
+          execute = @logstash_plugin.run_raw("#{install_command} #{pack}", change_dir)
 
           expect(execute.stderr_and_stdout).to match(/Install successful/)
           expect(execute.exit_code).to eq(0)
@@ -65,4 +70,28 @@ def gem_in_lock_file?(pattern, lock_file)
       end
     end
   end
+
+  context "pack" do
+    context "when the command is run in the `$LOGSTASH_HOME`" do
+      include_examples "install from a pack"
+    end
+
+    context "when the command is run outside of the `$LOGSTASH_HOME`" do
+      include_examples "install from a pack" do
+        let(:change_dir) { false }
+        let(:install_command) { "#{@logstash.logstash_home}/bin/logstash-plugin install" }
+
+        before :all do
+          @current = Dir.pwd
+          tmp = Stud::Temporary.pathname
+          FileUtils.mkdir_p(tmp)
+          Dir.chdir(tmp)
+        end
+
+        after :all do
+          Dir.chdir(@current)
+        end
+      end
+    end
+  end
 end
