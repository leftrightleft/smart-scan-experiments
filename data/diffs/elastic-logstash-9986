diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index f7a384fc3b6..38a3f54e8a3 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -22,6 +22,8 @@ module LogStash; class JavaPipeline < JavaBasePipeline
   def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @logger = self.logger
     super pipeline_config, namespaced_metric, @logger, agent
+    open_queue
+
     @worker_threads = []
 
     @drain_queue =  settings.get_value("queue.drain") || settings.get("queue.type") == "memory"
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 138ce59455b..ce1746f2dec 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -88,6 +88,7 @@ module LogStash; class Pipeline < BasePipeline
 
   def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     super
+    open_queue
 
     @worker_threads = []
 
diff --git a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
index 5712f261da6..17203d71701 100644
--- a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
@@ -126,14 +126,6 @@ public final AbstractPipelineExt initialize(final ThreadContext context,
             )
         );
         settings = pipelineSettings.callMethod(context, "settings");
-        try {
-            queue = QueueFactoryExt.create(context, null, settings);
-        } catch (final Exception ex) {
-            LOGGER.error("Logstash failed to create queue.", ex);
-            throw new IllegalStateException(ex);
-        }
-        inputQueueClient = queue.writeClient(context);
-        filterQueueClient = queue.readClient();
         final IRubyObject id = getSetting(context, "pipeline.id");
         if (id.isNil()) {
             pipelineId = id();
@@ -158,6 +150,28 @@ public final AbstractPipelineExt initialize(final ThreadContext context,
             configString.asJavaString(),
             getSetting(context, "config.support_escapes").isTrue()
         );
+        return this;
+    }
+
+    /**
+     * queue opening needs to happen out of the the initialize method because the
+     * AbstractPipeline is used for pipeline config validation and the queue
+     * should not be opened for this. This should be called only in the actual
+     * Pipeline/JavaPipeline initialisation.
+     * @param context ThreadContext
+     * @return Nil
+     */
+    @JRubyMethod(name = "open_queue")
+    public final IRubyObject openQueue(final ThreadContext context) throws IOException {
+        try {
+            queue = QueueFactoryExt.create(context, null, settings);
+        } catch (final Exception ex) {
+            LOGGER.error("Logstash failed to create queue.", ex);
+            throw new IllegalStateException(ex);
+        }
+        inputQueueClient = queue.writeClient(context);
+        filterQueueClient = queue.readClient();
+
         filterQueueClient.setEventsMetric(metric.namespace(context, EVENTS_METRIC_NAMESPACE));
         filterQueueClient.setPipelineMetric(
             metric.namespace(
@@ -171,7 +185,8 @@ public final AbstractPipelineExt initialize(final ThreadContext context,
                 )
             )
         );
-        return this;
+
+        return context.nil;
     }
 
     @JRubyMethod(name = "filter_queue_client")
