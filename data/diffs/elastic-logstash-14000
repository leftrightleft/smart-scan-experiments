diff --git a/.github/workflows/add-docs-preview-link.yml b/.github/workflows/add-docs-preview-link.yml
index f24a1367c26..fb465aa5f41 100644
--- a/.github/workflows/add-docs-preview-link.yml
+++ b/.github/workflows/add-docs-preview-link.yml
@@ -11,7 +11,7 @@ jobs:
       pull-requests: write
     steps:
     - name: Add Docs Preview link in PR Comment
-      uses: thollander/actions-comment-pull-request@v1
+      uses: thollander/actions-comment-pull-request@v1.0.5
       with:
         message: |
           :page_with_curl: **DOCS PREVIEW** :sparkles: https://logstash_${{ github.event.number }}.docs-preview.app.elstc.co/diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8cc0cc3142f..e6e923e8595 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -68,6 +68,24 @@ Or go directly here for an exhaustive list: https://github.com/elastic/logstash/
 
 Using IntelliJ? See a detailed getting started guide [here](https://docs.google.com/document/d/1kqunARvYMrlfTEOgMpYHig0U-ZqCcMJfhvTtGt09iZg/pub).
 
+## Breaking Changes
+
+When introducing new behaviour, we favor implementing it in a non-breaking way that users can opt into, meaning users' existing configurations continue to work as they expect them to after upgrading Logstash.
+
+But sometimes it is necessary to introduce "breaking changes," whether that is removing an option that doesn't make sense anymore, changing the default value of a setting, or reimplementing a major component differently for performance or safety reasons.
+
+When we do so, we need to acknowledge the work we are placing on the rest of our users the next time they upgrade, and work to ensure that they can upgrade confidently.
+
+Where possible, we:
+ 1. first implement new behaviour in a way that users can explicitly opt into (MINOR),
+ 2. commuicate the pending change in behaviour, including the introduction of deprecation warnings when old behaviour is used (MINOR, potentially along-side #1),
+ 3. change the default to be new behaviour, communicate the breaking change, optionally allow users to opt out in favor of the old behaviour (MAJOR), and eventually
+ 4. remove the old behaviour's implementation from the code-base (MAJOR, potentially along-side #3).
+
+After a pull request is marked as a "breaking change," it becomes necessary to either:
+ - refactor into a non-breaking change targeted at next minor; OR
+ - split into non-breaking change targeted at next minor, plus breaking change targeted at next major
+
 ## Contributing to plugins
 
 Check our [documentation](https://www.elastic.co/guide/en/logstash/current/contributing-to-logstash.html) on how to contribute to plugins or write your own!
diff --git a/ci/logstash_releases.json b/ci/logstash_releases.json
index ec813aa5ba9..7d63a4062a2 100644
--- a/ci/logstash_releases.json
+++ b/ci/logstash_releases.json
@@ -2,11 +2,11 @@
   "releases": {
     "5.x": "5.6.16",
     "6.x": "6.8.23",
-    "7.x": "7.17.2",
-    "8.x": "8.1.2"
+    "7.x": "7.17.3",
+    "8.x": "8.1.3"
   },
   "snapshots": {
-    "7.x": "7.17.3-SNAPSHOT",
+    "7.x": "7.17.4-SNAPSHOT",
     "8.x": "8.2.0-SNAPSHOT"
   }
 }
diff --git a/docs/index.asciidoc b/docs/index.asciidoc
index d5d1d75b7d0..ead78d2ae22 100644
--- a/docs/index.asciidoc
+++ b/docs/index.asciidoc
@@ -75,7 +75,7 @@ include::static/shutdown.asciidoc[]
 include::static/upgrading.asciidoc[]
 
 // Configuring Logstash
-include::static/configuration.asciidoc[]
+include::static/pipeline-configuration.asciidoc[]
 
 include::static/ls-to-cloud.asciidoc[]
 
diff --git a/docs/static/configuration.asciidoc b/docs/static/configuration.asciidoc
deleted file mode 100644
index 272c763cec5..00000000000
--- a/docs/static/configuration.asciidoc
+++ /dev/null
@@ -1,1151 +0,0 @@
-[[configuration]]
-== Configuring Logstash
-
-To configure Logstash, you create a config file that specifies which plugins you want to use and settings for each plugin.
-You can reference event fields in a configuration and use conditionals to process events when they meet certain
-criteria. When you run logstash, you use the `-f` to specify your config file.
-
-Let's step through creating a simple config file and using it to run Logstash. Create a file named "logstash-simple.conf" and save it in the same directory as Logstash.
-
-[source,ruby]
-----------------------------------
-input { stdin { } }
-output {
-  elasticsearch { hosts => ["localhost:9200"] }
-  stdout { codec => rubydebug }
-}
-----------------------------------
-
-Then, run logstash and specify the configuration file with the `-f` flag.
-
-[source,ruby]
-----------------------------------
-bin/logstash -f logstash-simple.conf
-----------------------------------
-
-Et voil√†! Logstash reads  the specified configuration file and outputs to both Elasticsearch and stdout. Note that if you see a message in stdout that reads "Elasticsearch Unreachable" that you will need to make sure Elasticsearch is installed and up and reachable on port 9200. Before we
-move on to some <<config-examples,more complex examples>>, let's take a closer look at what's in a config file.
-
-[[configuration-file-structure]]
-=== Structure of a config file
-
-A Logstash config file has a separate section for each type of plugin you want to add to the event processing pipeline. For example:
-
-[source,js]
-----------------------------------
-# This is a comment. You should use comments to describe
-# parts of your configuration.
-input {
-  ...
-}
-
-filter {
-  ...
-}
-
-output {
-  ...
-}
-----------------------------------
-
-Each section contains the configuration options for one or more plugins. If you specify
-multiple filters, they are applied in the order of their appearance in the configuration file.
-
-
-[discrete]
-[[plugin_configuration]]
-=== Plugin configuration
-
-The configuration of a plugin consists of the plugin name followed
-by a block of settings for that plugin. For example, this input section configures two file inputs:
-
-[source,js]
-----------------------------------
-input {
-  file {
-    path => "/var/log/messages"
-    type => "syslog"
-  }
-
-  file {
-    path => "/var/log/apache/access.log"
-    type => "apache"
-  }
-}
-----------------------------------
-
-In this example, two settings are configured for each of the file inputs: 'path' and 'type'.
-
-The settings you can configure vary according to the plugin type. For information about each plugin, see <<input-plugins,Input Plugins>>, <<output-plugins, Output Plugins>>, <<filter-plugins,Filter Plugins>>, and <<codec-plugins,Codec Plugins>>.
-
-[discrete]
-[[plugin-value-types]]
-=== Value types
-
-A plugin can require that the value for a setting be a
-certain type, such as boolean, list, or hash. The following value
-types are supported.
-
-[[array]]
-==== Array
-
-This type is now mostly deprecated in favor of using a standard type like `string` with the plugin defining the `:list => true` property for better type checking. It is still needed to handle lists of hashes or mixed types where type checking is not desired.
-
-Example:
-
-[source,js]
-----------------------------------
-  users => [ {id => 1, name => bob}, {id => 2, name => jane} ]
-----------------------------------
-
-[[list]]
-[discrete]
-==== Lists
-
-Not a type in and of itself, but a property types can have.
-This makes it possible to type check multiple values.
-Plugin authors can enable list checking by specifying `:list => true` when declaring an argument.
-
-Example:
-
-[source,js]
-----------------------------------
-  path => [ "/var/log/messages", "/var/log/*.log" ]
-  uris => [ "http://elastic.co", "http://example.net" ]
-----------------------------------
-
-This example configures `path`, which is a `string` to be a list that contains an element for each of the three strings. It also will configure the `uris` parameter to be a list of URIs, failing if any of the URIs provided are not valid.
-
-
-[[boolean]]
-[discrete]
-==== Boolean
-
-A boolean must be either `true` or `false`. Note that the `true` and `false` keywords
-are not enclosed in quotes.
-
-Example:
-
-[source,js]
-----------------------------------
-  ssl_enable => true
-----------------------------------
-
-[[bytes]]
-[discrete]
-==== Bytes
-
-A bytes field is a string field that represents a valid unit of bytes. It is a
-convenient way to declare specific sizes in your plugin options. Both SI (k M G T P E Z Y)
-and Binary (Ki Mi Gi Ti Pi Ei Zi Yi) units are supported. Binary units are in
-base-1024 and SI units are in base-1000. This field is case-insensitive
-and accepts space between the value and the unit. If no unit is specified, the integer string
-represents the number of bytes.
-
-Examples:
-
-[source,js]
-----------------------------------
-  my_bytes => "1113"   # 1113 bytes
-  my_bytes => "10MiB"  # 10485760 bytes
-  my_bytes => "100kib" # 102400 bytes
-  my_bytes => "180 mb" # 180000000 bytes
-----------------------------------
-
-[[codec]]
-[discrete]
-==== Codec
-
-A codec is the name of Logstash codec used to represent the data. Codecs can be
-used in both inputs and outputs.
-
-Input codecs provide a convenient way to decode your data before it enters the input.
-Output codecs provide a convenient way to encode your data before it leaves the output.
-Using an input or output codec eliminates the need for a separate filter in your Logstash pipeline.
-
-A list of available codecs can be found at the <<codec-plugins,Codec Plugins>> page.
-
-Example:
-
-[source,js]
-----------------------------------
-  codec => "json"
-----------------------------------
-
-[[hash]]
-[discrete]
-==== Hash
-
-A hash is a collection of key value pairs specified in the format `"field1" => "value1"`.
-Note that multiple key value entries are separated by spaces rather than commas.
-
-Example:
-
-[source,js]
-----------------------------------
-match => {
-  "field1" => "value1"
-  "field2" => "value2"
-  ...
-}
-# or as a single line. No commas between entries:
-match => { "field1" => "value1" "field2" => "value2" }
-----------------------------------
-
-[[number]]
-[discrete]
-==== Number
-
-Numbers must be valid numeric values (floating point or integer).
-
-Example:
-
-[source,js]
-----------------------------------
-  port => 33
-----------------------------------
-
-[[password]]
-[discrete]
-==== Password
-
-A password is a string with a single value that is not logged or printed.
-
-Example:
-
-[source,js]
-----------------------------------
-  my_password => "password"
-----------------------------------
-
-[[uri]]
-[discrete]
-==== URI
-
-A URI can be anything from a full URL like 'http://elastic.co/' to a simple identifier
-like 'foobar'. If the URI contains a password such as 'http://user:pass@example.net' the password
-portion of the URI will not be logged or printed.
-
-Example:
-[source,js]
-----------------------------------
-  my_uri => "http://foo:bar@example.net"
-----------------------------------
-
-
-[[path]]
-[discrete]
-==== Path
-
-A path is a string that represents a valid operating system path.
-
-Example:
-
-[source,js]
-----------------------------------
-  my_path => "/tmp/logstash"
-----------------------------------
-
-[[string]]
-[discrete]
-==== String
-
-A string must be a single character sequence. Note that string values are
-enclosed in quotes, either double or single.
-
-===== Escape sequences
-
-By default, escape sequences are not enabled. If you wish to use escape
-sequences in quoted strings, you will need to set
-`config.support_escapes: true` in your `logstash.yml`. When `true`, quoted
-strings (double and single) will have this transformation:
-
-|===========================
-| Text | Result
-| \r   | carriage return (ASCII 13)
-| \n   | new line (ASCII 10)
-| \t   | tab (ASCII 9)
-| \\   | backslash (ASCII 92)
-| \"   | double quote (ASCII 34)
-| \'   | single quote (ASCII 39)
-|===========================
-
-Example:
-
-[source,js]
-----------------------------------
-  name => "Hello world"
-  name => 'It\'s a beautiful day'
-----------------------------------
-
-[[field-reference]]
-[discrete]
-==== Field reference
-
-A Field Reference is a special <<string>> value representing the path to a field in an event, such as `@timestamp` or `[@timestamp]` to reference a top-level field, or `[client][ip]` to access a nested field.
-The <<field-references-deepdive>> provides detailed information about the structure of Field References.
-When provided as a configuration option, Field References need to be quoted and special characters must be escaped following the same rules as <<string>>.
-
-[discrete]
-[[comments]]
-=== Comments
-
-Comments are the same as in perl, ruby, and python. A comment starts with a '#' character, and does not need to be at the beginning of a line. For example:
-
-[source,js]
-----------------------------------
-# this is a comment
-
-input { # comments can appear at the end of a line, too
-  # ...
-}
-----------------------------------
-
-[[event-dependent-configuration]]
-=== Accessing event data and fields in the configuration
-
-The logstash agent is a processing pipeline with 3 stages: inputs -> filters ->
-outputs. Inputs generate events, filters modify them, outputs ship them
-elsewhere.
-
-All events have properties. For example, an apache access log would have things
-like status code (200, 404), request path ("/", "index.html"), HTTP verb
-(GET, POST), client IP address, etc. Logstash calls these properties "fields."
-
-Some of the configuration options in Logstash require the existence of fields in
-order to function.  Because inputs generate events, there are no fields to
-evaluate within the input block--they do not exist yet!
-
-Because of their dependency on events and fields, the following configuration
-options will only work within filter and output blocks.
-
-IMPORTANT: Field references, sprintf format and conditionals, described below,
-do not work in an input block.
-
-[discrete]
-[[logstash-config-field-references]]
-==== Field references
-
-It is often useful to be able to refer to a field by name. To do this,
-you can use the Logstash <<field-references-deepdive,field reference syntax>>.
-
-The basic syntax to access a field is `[fieldname]`. If you are referring to a
-**top-level field**, you can omit the `[]` and simply use `fieldname`.
-To refer to a **nested field**, you specify
-the full path to that field: `[top-level field][nested field]`.
-
-For example, the following event has five top-level fields (agent, ip, request, response,
-ua) and three nested fields (status, bytes, os).
-
-[source,js]
-----------------------------------
-{
-  "agent": "Mozilla/5.0 (compatible; MSIE 9.0)",
-  "ip": "192.168.24.44",
-  "request": "/index.html"
-  "response": {
-    "status": 200,
-    "bytes": 52353
-  },
-  "ua": {
-    "os": "Windows 7"
-  }
-}
-
-----------------------------------
-
-To reference the `os` field, you specify `[ua][os]`. To reference a top-level
-field such as `request`, you can simply specify the field name.
-
-For more detailed information, see <<field-references-deepdive>>.
-
-[discrete]
-[[sprintf]]
-==== sprintf format
-
-The field reference format is also used in what Logstash calls 'sprintf format'. This format
-enables you to refer to field values from within other strings. For example, the
-statsd output has an 'increment' setting that enables you to keep a count of
-apache logs by status code:
-
-[source,js]
-----------------------------------
-output {
-  statsd {
-    increment => "apache.%{[response][status]}"
-  }
-}
-----------------------------------
-
-Similarly, you can convert the UTC timestamp in the `@timestamp` field into a string.
-
-Instead of specifying a field name inside the curly braces, use the `%{{FORMAT}}` syntax where `FORMAT` is a https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns[java time format].
-
-For example, if you want to use the file output to write logs based on the event's UTC date and hour and the `type` field:
-
-[source,js]
-----------------------------------
-output {
-  file {
-    path => "/var/log/%{type}.%{{yyyy.MM.dd.HH}}"
-  }
-}
-----------------------------------
-
-NOTE: The sprintf format continues to support http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html[deprecated joda time format] strings as well using the `%{+FORMAT}` syntax.
-      These formats are not directly interchangeable, and we advise you to begin using the more modern Java Time format.
-
-NOTE: A Logstash timestamp represents an instant on the UTC-timeline, so using sprintf formatters will produce results that may not align with your machine-local timezone.
-
-[discrete]
-[[conditionals]]
-==== Conditionals
-
-Sometimes you want to filter or output an event only under
-certain conditions. For that, you can use a conditional.
-
-Conditionals in Logstash look and act the same way they do in programming
-languages. Conditionals support `if`, `else if` and `else` statements
-and can be nested.
-
-The conditional syntax is:
-
-[source,js]
-----------------------------------
-if EXPRESSION {
-  ...
-} else if EXPRESSION {
-  ...
-} else {
-  ...
-}
-----------------------------------
-
-What's an expression? Comparison tests, boolean logic, and so on!
-
-You can use the following comparison operators:
-
-* equality: `==`,  `!=`,  `<`,  `>`,  `<=`, `>=`
-* regexp: `=~`, `!~` (checks a pattern on the right against a string value on the left)
-* inclusion: `in`, `not in`
-
-Supported boolean operators are:
-
-* `and`, `or`, `nand`, `xor`
-
-Supported unary operators are:
-
-* `!`
-
-Expressions can be long and complex. Expressions can contain other expressions,
-you can negate expressions with `!`, and you can group them with parentheses `(...)`.
-
-For example, the following conditional uses the mutate filter to remove the field `secret` if the field
-`action` has a value of `login`:
-
-[source,js]
-----------------------------------
-filter {
-  if [action] == "login" {
-    mutate { remove_field => "secret" }
-  }
-}
-----------------------------------
-
-You can specify multiple expressions in a single condition:
-
-[source,js]
-----------------------------------
-output {
-  # Send production errors to pagerduty
-  if [loglevel] == "ERROR" and [deployment] == "production" {
-    pagerduty {
-    ...
-    }
-  }
-}
-----------------------------------
-
-You can use the `in` operator to test whether a field contains a specific string, key, or list element.
-Note that the semantic meaning of `in` can vary, based on the target type. For example, when applied to
-a string. `in` means "is a substring of". When applied to a collection type, `in` means "collection contains the exact value".
-
-[source,js]
-----------------------------------
-filter {
-  if [foo] in [foobar] {
-    mutate { add_tag => "field in field" }
-  }
-  if [foo] in "foo" {
-    mutate { add_tag => "field in string" }
-  }
-  if "hello" in [greeting] {
-    mutate { add_tag => "string in field" }
-  }
-  if [foo] in ["hello", "world", "foo"] {
-    mutate { add_tag => "field in list" }
-  }
-  if [missing] in [alsomissing] {
-    mutate { add_tag => "shouldnotexist" }
-  }
-  if !("foo" in ["hello", "world"]) {
-    mutate { add_tag => "shouldexist" }
-  }
-}
-----------------------------------
-
-You use the `not in` conditional the same way. For example,
-you could use `not in` to only route events to Elasticsearch
-when `grok` is successful:
-
-[source,js]
-----------------------------------
-output {
-  if "_grokparsefailure" not in [tags] {
-    elasticsearch { ... }
-  }
-}
-----------------------------------
-
-You can check for the existence of a specific field, but there's currently no way to differentiate between a field that
-doesn't exist versus a field that's simply false. The expression `if [foo]` returns `false` when:
-
-* `[foo]` doesn't exist in the event,
-* `[foo]` exists in the event, but is false, or
-* `[foo]` exists in the event, but is null
-
-For more complex examples, see <<using-conditionals, Using Conditionals>>.
-
-NOTE: Sprintf date/time format in conditionals is not currently supported. 
-A workaround using the `@metadata` field is available. 
-See <<date-time>> for more details and an example.
-
-
-[discrete]
-[[metadata]]
-==== The @metadata field
-
-In Logstash, there is a special field called `@metadata`.  The contents
-of `@metadata` are not part of any of your events at output time, which
-makes it great to use for conditionals, or extending and building event fields
-with field reference and `sprintf` formatting.
-
-This configuration file yields events from STDIN.  Whatever you type
-becomes the `message` field in the event.  The `mutate` events in the
-filter block add a few fields, some nested in the `@metadata` field.
-
-[source,ruby]
-----------------------------------
-input { stdin { } }
-
-filter {
-  mutate { add_field => { "show" => "This data will be in the output" } }
-  mutate { add_field => { "[@metadata][test]" => "Hello" } }
-  mutate { add_field => { "[@metadata][no_show]" => "This data will not be in the output" } }
-}
-
-output {
-  if [@metadata][test] == "Hello" {
-    stdout { codec => rubydebug }
-  }
-}
-
-----------------------------------
-
-Let's see what comes out:
-
-[source,ruby]
-----------------------------------
-
-$ bin/logstash -f ../test.conf
-Pipeline main started
-asdf
-{
-    "@timestamp" => 2016-06-30T02:42:51.496Z,
-      "@version" => "1",
-          "host" => "example.com",
-          "show" => "This data will be in the output",
-       "message" => "asdf"
-}
-
-----------------------------------
-
-The "asdf" typed in became the `message` field contents, and the conditional
-successfully evaluated the contents of the `test` field nested within the
-`@metadata` field.  But the output did not show a field called `@metadata`, or
-its contents.
-
-The `rubydebug` codec allows you to reveal the contents of the `@metadata` field
-if you add a config flag, `metadata => true`:
-
-[source,ruby]
-----------------------------------
-    stdout { codec => rubydebug { metadata => true } }
-----------------------------------
-
-Let's see what the output looks like with this change:
-
-[source,ruby]
-----------------------------------
-$ bin/logstash -f ../test.conf
-Pipeline main started
-asdf
-{
-    "@timestamp" => 2016-06-30T02:46:48.565Z,
-     "@metadata" => {
-           "test" => "Hello",
-        "no_show" => "This data will not be in the output"
-    },
-      "@version" => "1",
-          "host" => "example.com",
-          "show" => "This data will be in the output",
-       "message" => "asdf"
-}
-----------------------------------
-
-Now you can see the `@metadata` field and its sub-fields.
-
-IMPORTANT: Only the `rubydebug` codec allows you to show the contents of the
-`@metadata` field.
-
-Make use of the `@metadata` field any time you need a temporary field but do not
-want it to be in the final output.
-
-Perhaps one of the most common use cases for this new field is with the `date`
-filter and having a temporary timestamp.
-
-This configuration file has been simplified, but uses the timestamp format
-common to Apache and Nginx web servers.  In the past, you'd have to delete
-the timestamp field yourself, after using it to overwrite the `@timestamp`
-field.  With the `@metadata` field, this is no longer necessary:
-
-[source,ruby]
-----------------------------------
-input { stdin { } }
-
-filter {
-  grok { match => [ "message", "%{HTTPDATE:[@metadata][timestamp]}" ] }
-  date { match => [ "[@metadata][timestamp]", "dd/MMM/yyyy:HH:mm:ss Z" ] }
-}
-
-output {
-  stdout { codec => rubydebug }
-}
-----------------------------------
-
-Notice that this configuration puts the extracted date into the
-`[@metadata][timestamp]` field in the `grok` filter.  Let's feed this
-configuration a sample date string and see what comes out:
-
-[source,ruby]
-----------------------------------
-$ bin/logstash -f ../test.conf
-Pipeline main started
-02/Mar/2014:15:36:43 +0100
-{
-    "@timestamp" => 2014-03-02T14:36:43.000Z,
-      "@version" => "1",
-          "host" => "example.com",
-       "message" => "02/Mar/2014:15:36:43 +0100"
-}
-----------------------------------
-
-That's it!  No extra fields in the output, and a cleaner config file because you
-do not have to delete a "timestamp" field after conversion in the `date` filter.
-
-Another use case is the https://github.com/logstash-plugins/logstash-input-couchdb_changes[CouchDB Changes input plugin]. 
-This plugin automatically captures CouchDB document field metadata into the
-`@metadata` field within the input plugin itself.  When the events pass through
-to be indexed by Elasticsearch, the Elasticsearch output plugin allows you to
-specify the `action` (delete, update, insert, etc.) and the `document_id`, like
-this:
-
-[source,ruby]
-----------------------------------
-output {
-  elasticsearch {
-    action => "%{[@metadata][action]}"
-    document_id => "%{[@metadata][_id]}"
-    hosts => ["example.com"]
-    index => "index_name"
-    protocol => "http"
-  }
-}
-----------------------------------
-
-[discrete]
-[[date-time]]
-===== sprintf date/time format in conditionals
-
-Sprintf date/time format in conditionals is not currently supported, but a workaround is available. 
-Put the date calculation in a field so that you can use the field reference in a conditional. 
-
-*Example* 
-
-Using sprintf time format directly to add a field based on ingestion time _will not work_: 
-// This counter example is formatted to be understated to help users avoid following a bad example 
-
-```
-----------
-# non-working example
-filter{
-  if "%{+HH}:%{+mm}" < "16:30" {
-    mutate {
-      add_field => { "string_compare" => "%{+HH}:%{+mm} is before 16:30" }
-    }
-  }
-}
-----------
-```
-
-This workaround gives you the intended results:
-
-[source,js]
-----------------------------------
-filter {
-  mutate{ 
-     add_field => {
-      "[@metadata][time]" => "%{+HH}:%{+mm}"
-     }
-  }
-  if [@metadata][time] < "16:30" {
-    mutate {
-      add_field => {
-        "string_compare" => "%{+HH}:%{+mm} is before 16:30"
-      }
-    }
-  }
-}
-----------------------------------
-
-[[environment-variables]]
-=== Using environment variables in the configuration
-
-==== Overview
-
-* You can set environment variable references in the configuration for Logstash plugins by using `${var}`.
-* At Logstash startup, each reference will be replaced by the value of the environment variable.
-* The replacement is case-sensitive.
-* References to undefined variables raise a Logstash configuration error.
-* You can give a default value by using the form `${var:default value}`. Logstash uses the default value if the
-environment variable is undefined.
-* You can add environment variable references in any plugin option type : string, number, boolean, array, or hash.
-* Environment variables are immutable. If you update the environment variable, you'll have to restart Logstash to pick up the updated value.
-
-==== Examples
-
-The following examples show you how to use environment variables to set the values of some commonly used
-configuration options.
-
-===== Setting the TCP port
-
-Here's an example that uses an environment variable to set the TCP port:
-
-[source,ruby]
-----------------------------------
-input {
-  tcp {
-    port => "${TCP_PORT}"
-  }
-}
-----------------------------------
-
-Now let's set the value of `TCP_PORT`:
-
-[source,shell]
-----
-export TCP_PORT=12345
-----
-
-At startup, Logstash uses the following configuration:
-
-[source,ruby]
-----------------------------------
-input {
-  tcp {
-    port => 12345
-  }
-}
-----------------------------------
-
-If the `TCP_PORT` environment variable is not set, Logstash returns a configuration error.
-
-You can fix this problem by specifying a default value:
-
-[source,ruby]
-----
-input {
-  tcp {
-    port => "${TCP_PORT:54321}"
-  }
-}
-----
-
-Now, instead of returning a configuration error if the variable is undefined, Logstash uses the default:
-
-[source,ruby]
-----
-input {
-  tcp {
-    port => 54321
-  }
-}
-----
-
-If the environment variable is defined, Logstash uses the value specified for the variable instead of the default.
-
-===== Setting the value of a tag
-
-Here's an example that uses an environment variable to set the value of a tag:
-
-[source,ruby]
-----
-filter {
-  mutate {
-    add_tag => [ "tag1", "${ENV_TAG}" ]
-  }
-}
-----
-
-Let's set the value of `ENV_TAG`:
-
-[source,shell]
-----
-export ENV_TAG="tag2"
-----
-
-At startup, Logstash uses the following configuration:
-
-[source,ruby]
-----
-filter {
-  mutate {
-    add_tag => [ "tag1", "tag2" ]
-  }
-}
-----
-
-===== Setting a file path
-
-Here's an example that uses an environment variable to set the path to a log file:
-
-[source,ruby]
-----
-filter {
-  mutate {
-    add_field => {
-      "my_path" => "${HOME}/file.log"
-    }
-  }
-}
-----
-
-Let's set the value of `HOME`:
-
-[source,shell]
-----
-export HOME="/path"
-----
-
-At startup, Logstash uses the following configuration:
-
-[source,ruby]
-----
-filter {
-  mutate {
-    add_field => {
-      "my_path" => "/path/file.log"
-    }
-  }
-}
-----
-
-
-[[config-examples]]
-=== Logstash configuration examples
-These examples illustrate how you can configure Logstash to filter events, process Apache logs and syslog messages, and use conditionals to control what events are processed by a filter or output.
-
-TIP: If you need help building grok patterns, try out the
-{kibana-ref}/xpack-grokdebugger.html[Grok Debugger]. The Grok Debugger is an
-{xpack} feature under the Basic License and is therefore *free to use*.
-
-[discrete]
-[[filter-example]]
-==== Configuring filters
-Filters are an in-line processing mechanism that provide the flexibility to slice and dice your data to fit your needs. Let's take a look at some filters in action. The following configuration file sets up the `grok` and `date` filters.
-
-[source,ruby]
-----------------------------------
-input { stdin { } }
-
-filter {
-  grok {
-    match => { "message" => "%{COMBINEDAPACHELOG}" }
-  }
-  date {
-    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
-  }
-}
-
-output {
-  elasticsearch { hosts => ["localhost:9200"] }
-  stdout { codec => rubydebug }
-}
-----------------------------------
-
-Run Logstash with this configuration:
-
-[source,ruby]
-----------------------------------
-bin/logstash -f logstash-filter.conf
-----------------------------------
-
-Now, paste the following line into your terminal and press Enter so it will be
-processed by the stdin input:
-
-[source,ruby]
-----------------------------------
-127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] "GET /xampp/status.php HTTP/1.1" 200 3891 "http://cadenza/xampp/navi.php" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0"
-----------------------------------
-
-You should see something returned to stdout that looks like this:
-
-[source,ruby]
-----------------------------------
-{
-        "message" => "127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] \"GET /xampp/status.php HTTP/1.1\" 200 3891 \"http://cadenza/xampp/navi.php\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\"",
-     "@timestamp" => "2013-12-11T08:01:45.000Z",
-       "@version" => "1",
-           "host" => "cadenza",
-       "clientip" => "127.0.0.1",
-          "ident" => "-",
-           "auth" => "-",
-      "timestamp" => "11/Dec/2013:00:01:45 -0800",
-           "verb" => "GET",
-        "request" => "/xampp/status.php",
-    "httpversion" => "1.1",
-       "response" => "200",
-          "bytes" => "3891",
-       "referrer" => "\"http://cadenza/xampp/navi.php\"",
-          "agent" => "\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\""
-}
-----------------------------------
-
-As you can see, Logstash (with help from the `grok` filter) was able to parse the log line (which happens to be in Apache "combined log" format) and break it up into many different discrete bits of information. This is extremely useful once you start querying and analyzing our log data. For example, you'll be able to easily run reports on HTTP response codes, IP addresses, referrers, and so on. There are quite a few grok patterns included with Logstash out-of-the-box, so it's quite likely if you need to parse a common log format, someone has already done the work for you. For more information, see the list of https://github.com/logstash-plugins/logstash-patterns-core/tree/main/patterns[Logstash grok patterns] on GitHub.
-
-The other filter used in this example is the `date` filter. This filter parses out a timestamp and uses it as the timestamp for the event (regardless of when you're ingesting the log data). You'll notice that the `@timestamp` field in this example is set to December 11, 2013, even though Logstash is ingesting the event at some point afterwards. This is handy when backfilling logs. It gives you the ability to tell Logstash "use this value as the timestamp for this event".
-
-[discrete]
-==== Processing Apache logs
-Let's do something that's actually *useful*: process apache2 access log files! We are going to read the input from a file on the localhost, and use a <<conditionals,conditional>> to process the event according to our needs. First, create a file called something like 'logstash-apache.conf' with the following contents (you can change the log's file path to suit your needs):
-
-[source,js]
-----------------------------------
-input {
-  file {
-    path => "/tmp/access_log"
-    start_position => "beginning"
-  }
-}
-
-filter {
-  if [path] =~ "access" {
-    mutate { replace => { "type" => "apache_access" } }
-    grok {
-      match => { "message" => "%{COMBINEDAPACHELOG}" }
-    }
-  }
-  date {
-    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
-  }
-}
-
-output {
-  elasticsearch {
-    hosts => ["localhost:9200"]
-  }
-  stdout { codec => rubydebug }
-}
-
-----------------------------------
-
-Then, create the input file you configured above (in this example, "/tmp/access_log") with the following log entries (or use some from your own webserver):
-
-[source,js]
-----------------------------------
-71.141.244.242 - kurt [18/May/2011:01:48:10 -0700] "GET /admin HTTP/1.1" 301 566 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
-134.39.72.245 - - [18/May/2011:12:40:18 -0700] "GET /favicon.ico HTTP/1.1" 200 1189 "-" "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; InfoPath.2; .NET4.0C; .NET4.0E)"
-98.83.179.51 - - [18/May/2011:19:35:08 -0700] "GET /css/main.css HTTP/1.1" 200 1837 "http://www.safesand.com/information.htm" "Mozilla/5.0 (Windows NT 6.0; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"
-----------------------------------
-
-Now, run Logstash with the -f flag to pass in the configuration file:
-
-[source,js]
-----------------------------------
-bin/logstash -f logstash-apache.conf
-----------------------------------
-
-Now you should see your apache log data in Elasticsearch! Logstash opened and read the specified input file, processing each event it encountered. Any additional lines logged to this file will also be captured, processed by Logstash as events, and stored in Elasticsearch. As an added bonus, they are stashed with the field "type" set to "apache_access" (this is done by the type => "apache_access" line in the input configuration).
-
-In this configuration, Logstash is only watching the apache access_log, but it's easy enough to watch both the access_log and the error_log (actually, any file matching `*log`), by changing one line in the above configuration:
-
-[source,js]
-----------------------------------
-input {
-  file {
-    path => "/tmp/*_log"
-...
-----------------------------------
-
-When you restart Logstash, it will process both the error and access logs. However, if you inspect your data (using elasticsearch-kopf, perhaps), you'll see that the access_log is broken up into discrete fields, but the error_log isn't. That's because we used a `grok` filter to match the standard combined apache log format and automatically split the data into separate fields. Wouldn't it be nice *if* we could control how a line was parsed, based on its format? Well, we can...
-
-Note that Logstash did not reprocess the events that were already seen in the access_log file. When reading from a file, Logstash saves its position and only processes new lines as they are added. Neat!
-
-[discrete]
-[[using-conditionals]]
-==== Using conditionals
-You use conditionals to control what events are processed by a filter or output. For example, you could label each event according to which file it appeared in (access_log, error_log, and other random files that end with "log").
-
-[source,ruby]
-----------------------------------
-input {
-  file {
-    path => "/tmp/*_log"
-  }
-}
-
-filter {
-  if [path] =~ "access" {
-    mutate { replace => { type => "apache_access" } }
-    grok {
-      match => { "message" => "%{COMBINEDAPACHELOG}" }
-    }
-    date {
-      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
-    }
-  } else if [path] =~ "error" {
-    mutate { replace => { type => "apache_error" } }
-  } else {
-    mutate { replace => { type => "random_logs" } }
-  }
-}
-
-output {
-  elasticsearch { hosts => ["localhost:9200"] }
-  stdout { codec => rubydebug }
-}
-----------------------------------
-
-This example labels all events using the `type` field, but doesn't actually parse the `error` or `random` files. There are so many types of error logs that how they should be labeled really depends on what logs you're working with.
-
-Similarly, you can use conditionals to direct events to particular outputs. For example, you could:
-
-* alert nagios of any apache events with status 5xx
-* record any 4xx status to Elasticsearch
-* record all status code hits via statsd
-
-To tell nagios about any http event that has a 5xx status code, you
-first need to check the value of the `type` field. If it's apache, then you can
-check to see if the `status` field contains a 5xx error. If it is, send it to nagios. If it isn't
-a 5xx error, check to see if the `status` field contains a 4xx error. If so, send it to Elasticsearch.
-Finally, send all apache status codes to statsd no matter what the `status` field contains:
-
-[source,js]
-----------------------------------
-output {
-  if [type] == "apache" {
-    if [status] =~ /^5\d\d/ {
-      nagios { ...  }
-    } else if [status] =~ /^4\d\d/ {
-      elasticsearch { ... }
-    }
-    statsd { increment => "apache.%{status}" }
-  }
-}
-----------------------------------
-
-[discrete]
-==== Processing Syslog messages
-Syslog is one of the most common use cases for Logstash, and one it handles exceedingly well (as long as the log lines conform roughly to RFC3164). Syslog is the de facto UNIX networked logging standard, sending messages from client machines to a local file, or to a centralized log server via rsyslog. For this example, you won't need a functioning syslog instance; we'll fake it from the command line so you can get a feel for what happens.
-
-First, let's make a simple configuration file for Logstash + syslog, called 'logstash-syslog.conf'.
-
-[source,ruby]
-----------------------------------
-input {
-  tcp {
-    port => 5000
-    type => syslog
-  }
-  udp {
-    port => 5000
-    type => syslog
-  }
-}
-
-filter {
-  if [type] == "syslog" {
-    grok {
-      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
-      add_field => [ "received_at", "%{@timestamp}" ]
-      add_field => [ "received_from", "%{host}" ]
-    }
-    date {
-      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
-    }
-  }
-}
-
-output {
-  elasticsearch { hosts => ["localhost:9200"] }
-  stdout { codec => rubydebug }
-}
-----------------------------------
-
-Run Logstash with this new configuration:
-
-[source,ruby]
-----------------------------------
-bin/logstash -f logstash-syslog.conf
-----------------------------------
-
-Normally, a client machine would connect to the Logstash instance on port 5000 and send its message. For this example, we'll just telnet to Logstash and enter a log line (similar to how we entered log lines into STDIN earlier). Open another shell window to interact with the Logstash syslog input and enter the following command:
-
-[source,ruby]
-----------------------------------
-telnet localhost 5000
-----------------------------------
-
-Copy and paste the following lines as samples. (Feel free to try some of your own, but keep in mind they might not parse if the `grok` filter is not correct for your data).
-
-[source,ruby]
-----------------------------------
-Dec 23 12:11:43 louis postfix/smtpd[31499]: connect from unknown[95.75.93.154]
-Dec 23 14:42:56 louis named[16000]: client 199.48.164.7#64817: query (cache) 'amsterdamboothuren.com/MX/IN' denied
-Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)
-Dec 22 18:28:06 louis rsyslogd: [origin software="rsyslogd" swVersion="4.2.0" x-pid="2253" x-info="http://www.rsyslog.com"] rsyslogd was HUPed, type 'lightweight'.
-----------------------------------
-
-Now you should see the output of Logstash in your original shell as it processes and parses messages!
-
-[source,ruby]
-----------------------------------
-{
-                 "message" => "Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)",
-              "@timestamp" => "2013-12-23T22:30:01.000Z",
-                "@version" => "1",
-                    "type" => "syslog",
-                    "host" => "0:0:0:0:0:0:0:1:52617",
-        "syslog_timestamp" => "Dec 23 14:30:01",
-         "syslog_hostname" => "louis",
-          "syslog_program" => "CRON",
-              "syslog_pid" => "619",
-          "syslog_message" => "(www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)",
-             "received_at" => "2013-12-23 22:49:22 UTC",
-           "received_from" => "0:0:0:0:0:0:0:1:52617",
-    "syslog_severity_code" => 5,
-    "syslog_facility_code" => 1,
-         "syslog_facility" => "user-level",
-         "syslog_severity" => "notice"
-}
-----------------------------------
diff --git a/docs/static/env-vars.asciidoc b/docs/static/env-vars.asciidoc
new file mode 100644
index 00000000000..6d550a01d96
--- /dev/null
+++ b/docs/static/env-vars.asciidoc
@@ -0,0 +1,142 @@
+[[environment-variables]]
+=== Using environment variables in the configuration
+
+==== Overview
+
+* You can set environment variable references in the configuration for Logstash plugins by using `${var}`.
+* At Logstash startup, each reference will be replaced by the value of the environment variable.
+* The replacement is case-sensitive.
+* References to undefined variables raise a Logstash configuration error.
+* You can give a default value by using the form `${var:default value}`. Logstash uses the default value if the
+environment variable is undefined.
+* You can add environment variable references in any plugin option type : string, number, boolean, array, or hash.
+* Environment variables are immutable. If you update the environment variable, you'll have to restart Logstash to pick up the updated value.
+
+==== Examples
+
+The following examples show you how to use environment variables to set the values of some commonly used
+configuration options.
+
+===== Setting the TCP port
+
+Here's an example that uses an environment variable to set the TCP port:
+
+[source,ruby]
+----------------------------------
+input {
+  tcp {
+    port => "${TCP_PORT}"
+  }
+}
+----------------------------------
+
+Now let's set the value of `TCP_PORT`:
+
+[source,shell]
+----
+export TCP_PORT=12345
+----
+
+At startup, Logstash uses the following configuration:
+
+[source,ruby]
+----------------------------------
+input {
+  tcp {
+    port => 12345
+  }
+}
+----------------------------------
+
+If the `TCP_PORT` environment variable is not set, Logstash returns a configuration error.
+
+You can fix this problem by specifying a default value:
+
+[source,ruby]
+----
+input {
+  tcp {
+    port => "${TCP_PORT:54321}"
+  }
+}
+----
+
+Now, instead of returning a configuration error if the variable is undefined, Logstash uses the default:
+
+[source,ruby]
+----
+input {
+  tcp {
+    port => 54321
+  }
+}
+----
+
+If the environment variable is defined, Logstash uses the value specified for the variable instead of the default.
+
+===== Setting the value of a tag
+
+Here's an example that uses an environment variable to set the value of a tag:
+
+[source,ruby]
+----
+filter {
+  mutate {
+    add_tag => [ "tag1", "${ENV_TAG}" ]
+  }
+}
+----
+
+Let's set the value of `ENV_TAG`:
+
+[source,shell]
+----
+export ENV_TAG="tag2"
+----
+
+At startup, Logstash uses the following configuration:
+
+[source,ruby]
+----
+filter {
+  mutate {
+    add_tag => [ "tag1", "tag2" ]
+  }
+}
+----
+
+===== Setting a file path
+
+Here's an example that uses an environment variable to set the path to a log file:
+
+[source,ruby]
+----
+filter {
+  mutate {
+    add_field => {
+      "my_path" => "${HOME}/file.log"
+    }
+  }
+}
+----
+
+Let's set the value of `HOME`:
+
+[source,shell]
+----
+export HOME="/path"
+----
+
+At startup, Logstash uses the following configuration:
+
+[source,ruby]
+----
+filter {
+  mutate {
+    add_field => {
+      "my_path" => "/path/file.log"
+    }
+  }
+}
+----
+
diff --git a/docs/static/event-data.asciidoc b/docs/static/event-data.asciidoc
new file mode 100644
index 00000000000..1a958ff5137
--- /dev/null
+++ b/docs/static/event-data.asciidoc
@@ -0,0 +1,416 @@
+[[event-dependent-configuration]]
+=== Accessing event data and fields in the configuration
+
+The logstash agent is a processing pipeline with 3 stages: inputs -> filters ->
+outputs. Inputs generate events, filters modify them, outputs ship them
+elsewhere.
+
+All events have properties. For example, an apache access log would have things
+like status code (200, 404), request path ("/", "index.html"), HTTP verb
+(GET, POST), client IP address, etc. Logstash calls these properties "fields."
+
+Some of the configuration options in Logstash require the existence of fields in
+order to function.  Because inputs generate events, there are no fields to
+evaluate within the input block--they do not exist yet!
+
+Because of their dependency on events and fields, the following configuration
+options will only work within filter and output blocks.
+
+IMPORTANT: Field references, sprintf format and conditionals, described below,
+do not work in an input block.
+
+[discrete]
+[[logstash-config-field-references]]
+==== Field references
+
+It is often useful to be able to refer to a field by name. To do this,
+you can use the Logstash <<field-references-deepdive,field reference syntax>>.
+
+The basic syntax to access a field is `[fieldname]`. If you are referring to a
+**top-level field**, you can omit the `[]` and simply use `fieldname`.
+To refer to a **nested field**, you specify
+the full path to that field: `[top-level field][nested field]`.
+
+For example, the following event has five top-level fields (agent, ip, request, response,
+ua) and three nested fields (status, bytes, os).
+
+[source,js]
+----------------------------------
+{
+  "agent": "Mozilla/5.0 (compatible; MSIE 9.0)",
+  "ip": "192.168.24.44",
+  "request": "/index.html"
+  "response": {
+    "status": 200,
+    "bytes": 52353
+  },
+  "ua": {
+    "os": "Windows 7"
+  }
+}
+
+----------------------------------
+
+To reference the `os` field, you specify `[ua][os]`. To reference a top-level
+field such as `request`, you can simply specify the field name.
+
+For more detailed information, see <<field-references-deepdive>>.
+
+[discrete]
+[[sprintf]]
+==== sprintf format
+
+The field reference format is also used in what Logstash calls 'sprintf format'. This format
+enables you to refer to field values from within other strings. For example, the
+statsd output has an 'increment' setting that enables you to keep a count of
+apache logs by status code:
+
+[source,js]
+----------------------------------
+output {
+  statsd {
+    increment => "apache.%{[response][status]}"
+  }
+}
+----------------------------------
+
+Similarly, you can convert the UTC timestamp in the `@timestamp` field into a string.
+
+Instead of specifying a field name inside the curly braces, use the `%{{FORMAT}}` syntax where `FORMAT` is a https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns[java time format].
+
+For example, if you want to use the file output to write logs based on the event's UTC date and hour and the `type` field:
+
+[source,js]
+----------------------------------
+output {
+  file {
+    path => "/var/log/%{type}.%{{yyyy.MM.dd.HH}}"
+  }
+}
+----------------------------------
+
+NOTE: The sprintf format continues to support http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html[deprecated joda time format] strings as well using the `%{+FORMAT}` syntax.
+      These formats are not directly interchangeable, and we advise you to begin using the more modern Java Time format.
+
+NOTE: A Logstash timestamp represents an instant on the UTC-timeline, so using sprintf formatters will produce results that may not align with your machine-local timezone.
+
+[discrete]
+[[conditionals]]
+==== Conditionals
+
+Sometimes you want to filter or output an event only under
+certain conditions. For that, you can use a conditional.
+
+Conditionals in Logstash look and act the same way they do in programming
+languages. Conditionals support `if`, `else if` and `else` statements
+and can be nested.
+
+The conditional syntax is:
+
+[source,js]
+----------------------------------
+if EXPRESSION {
+  ...
+} else if EXPRESSION {
+  ...
+} else {
+  ...
+}
+----------------------------------
+
+What's an expression? Comparison tests, boolean logic, and so on!
+
+You can use the following comparison operators:
+
+* equality: `==`,  `!=`,  `<`,  `>`,  `<=`, `>=`
+* regexp: `=~`, `!~` (checks a pattern on the right against a string value on the left)
+* inclusion: `in`, `not in`
+
+Supported boolean operators are:
+
+* `and`, `or`, `nand`, `xor`
+
+Supported unary operators are:
+
+* `!`
+
+Expressions can be long and complex. Expressions can contain other expressions,
+you can negate expressions with `!`, and you can group them with parentheses `(...)`.
+
+For example, the following conditional uses the mutate filter to remove the field `secret` if the field
+`action` has a value of `login`:
+
+[source,js]
+----------------------------------
+filter {
+  if [action] == "login" {
+    mutate { remove_field => "secret" }
+  }
+}
+----------------------------------
+
+You can specify multiple expressions in a single condition:
+
+[source,js]
+----------------------------------
+output {
+  # Send production errors to pagerduty
+  if [loglevel] == "ERROR" and [deployment] == "production" {
+    pagerduty {
+    ...
+    }
+  }
+}
+----------------------------------
+
+You can use the `in` operator to test whether a field contains a specific string, key, or list element.
+Note that the semantic meaning of `in` can vary, based on the target type. For example, when applied to
+a string. `in` means "is a substring of". When applied to a collection type, `in` means "collection contains the exact value".
+
+[source,js]
+----------------------------------
+filter {
+  if [foo] in [foobar] {
+    mutate { add_tag => "field in field" }
+  }
+  if [foo] in "foo" {
+    mutate { add_tag => "field in string" }
+  }
+  if "hello" in [greeting] {
+    mutate { add_tag => "string in field" }
+  }
+  if [foo] in ["hello", "world", "foo"] {
+    mutate { add_tag => "field in list" }
+  }
+  if [missing] in [alsomissing] {
+    mutate { add_tag => "shouldnotexist" }
+  }
+  if !("foo" in ["hello", "world"]) {
+    mutate { add_tag => "shouldexist" }
+  }
+}
+----------------------------------
+
+You use the `not in` conditional the same way. For example,
+you could use `not in` to only route events to Elasticsearch
+when `grok` is successful:
+
+[source,js]
+----------------------------------
+output {
+  if "_grokparsefailure" not in [tags] {
+    elasticsearch { ... }
+  }
+}
+----------------------------------
+
+You can check for the existence of a specific field, but there's currently no way to differentiate between a field that
+doesn't exist versus a field that's simply false. The expression `if [foo]` returns `false` when:
+
+* `[foo]` doesn't exist in the event,
+* `[foo]` exists in the event, but is false, or
+* `[foo]` exists in the event, but is null
+
+For more complex examples, see <<using-conditionals, Using Conditionals>>.
+
+NOTE: Sprintf date/time format in conditionals is not currently supported. 
+A workaround using the `@metadata` field is available. 
+See <<date-time>> for more details and an example.
+
+
+[discrete]
+[[metadata]]
+==== The @metadata field
+
+In Logstash, there is a special field called `@metadata`.  The contents
+of `@metadata` are not part of any of your events at output time, which
+makes it great to use for conditionals, or extending and building event fields
+with field reference and `sprintf` formatting.
+
+This configuration file yields events from STDIN.  Whatever you type
+becomes the `message` field in the event.  The `mutate` events in the
+filter block add a few fields, some nested in the `@metadata` field.
+
+[source,ruby]
+----------------------------------
+input { stdin { } }
+
+filter {
+  mutate { add_field => { "show" => "This data will be in the output" } }
+  mutate { add_field => { "[@metadata][test]" => "Hello" } }
+  mutate { add_field => { "[@metadata][no_show]" => "This data will not be in the output" } }
+}
+
+output {
+  if [@metadata][test] == "Hello" {
+    stdout { codec => rubydebug }
+  }
+}
+
+----------------------------------
+
+Let's see what comes out:
+
+[source,ruby]
+----------------------------------
+
+$ bin/logstash -f ../test.conf
+Pipeline main started
+asdf
+{
+    "@timestamp" => 2016-06-30T02:42:51.496Z,
+      "@version" => "1",
+          "host" => "example.com",
+          "show" => "This data will be in the output",
+       "message" => "asdf"
+}
+
+----------------------------------
+
+The "asdf" typed in became the `message` field contents, and the conditional
+successfully evaluated the contents of the `test` field nested within the
+`@metadata` field.  But the output did not show a field called `@metadata`, or
+its contents.
+
+The `rubydebug` codec allows you to reveal the contents of the `@metadata` field
+if you add a config flag, `metadata => true`:
+
+[source,ruby]
+----------------------------------
+    stdout { codec => rubydebug { metadata => true } }
+----------------------------------
+
+Let's see what the output looks like with this change:
+
+[source,ruby]
+----------------------------------
+$ bin/logstash -f ../test.conf
+Pipeline main started
+asdf
+{
+    "@timestamp" => 2016-06-30T02:46:48.565Z,
+     "@metadata" => {
+           "test" => "Hello",
+        "no_show" => "This data will not be in the output"
+    },
+      "@version" => "1",
+          "host" => "example.com",
+          "show" => "This data will be in the output",
+       "message" => "asdf"
+}
+----------------------------------
+
+Now you can see the `@metadata` field and its sub-fields.
+
+IMPORTANT: Only the `rubydebug` codec allows you to show the contents of the
+`@metadata` field.
+
+Make use of the `@metadata` field any time you need a temporary field but do not
+want it to be in the final output.
+
+Perhaps one of the most common use cases for this new field is with the `date`
+filter and having a temporary timestamp.
+
+This configuration file has been simplified, but uses the timestamp format
+common to Apache and Nginx web servers.  In the past, you'd have to delete
+the timestamp field yourself, after using it to overwrite the `@timestamp`
+field.  With the `@metadata` field, this is no longer necessary:
+
+[source,ruby]
+----------------------------------
+input { stdin { } }
+
+filter {
+  grok { match => [ "message", "%{HTTPDATE:[@metadata][timestamp]}" ] }
+  date { match => [ "[@metadata][timestamp]", "dd/MMM/yyyy:HH:mm:ss Z" ] }
+}
+
+output {
+  stdout { codec => rubydebug }
+}
+----------------------------------
+
+Notice that this configuration puts the extracted date into the
+`[@metadata][timestamp]` field in the `grok` filter.  Let's feed this
+configuration a sample date string and see what comes out:
+
+[source,ruby]
+----------------------------------
+$ bin/logstash -f ../test.conf
+Pipeline main started
+02/Mar/2014:15:36:43 +0100
+{
+    "@timestamp" => 2014-03-02T14:36:43.000Z,
+      "@version" => "1",
+          "host" => "example.com",
+       "message" => "02/Mar/2014:15:36:43 +0100"
+}
+----------------------------------
+
+That's it!  No extra fields in the output, and a cleaner config file because you
+do not have to delete a "timestamp" field after conversion in the `date` filter.
+
+Another use case is the https://github.com/logstash-plugins/logstash-input-couchdb_changes[CouchDB Changes input plugin]. 
+This plugin automatically captures CouchDB document field metadata into the
+`@metadata` field within the input plugin itself.  When the events pass through
+to be indexed by Elasticsearch, the Elasticsearch output plugin allows you to
+specify the `action` (delete, update, insert, etc.) and the `document_id`, like
+this:
+
+[source,ruby]
+----------------------------------
+output {
+  elasticsearch {
+    action => "%{[@metadata][action]}"
+    document_id => "%{[@metadata][_id]}"
+    hosts => ["example.com"]
+    index => "index_name"
+    protocol => "http"
+  }
+}
+----------------------------------
+
+[discrete]
+[[date-time]]
+===== sprintf date/time format in conditionals
+
+Sprintf date/time format in conditionals is not currently supported, but a workaround is available. 
+Put the date calculation in a field so that you can use the field reference in a conditional. 
+
+*Example* 
+
+Using sprintf time format directly to add a field based on ingestion time _will not work_: 
+// This counter example is formatted to be understated to help users avoid following a bad example 
+
+```
+----------
+# non-working example
+filter{
+  if "%{+HH}:%{+mm}" < "16:30" {
+    mutate {
+      add_field => { "string_compare" => "%{+HH}:%{+mm} is before 16:30" }
+    }
+  }
+}
+----------
+```
+
+This workaround gives you the intended results:
+
+[source,js]
+----------------------------------
+filter {
+  mutate{ 
+     add_field => {
+      "[@metadata][time]" => "%{+HH}:%{+mm}"
+     }
+  }
+  if [@metadata][time] < "16:30" {
+    mutate {
+      add_field => {
+        "string_compare" => "%{+HH}:%{+mm} is before 16:30"
+      }
+    }
+  }
+}
+----------------------------------
\ No newline at end of file
diff --git a/docs/static/jvm.asciidoc b/docs/static/jvm.asciidoc
index 0e5f8975390..ff79cd76e49 100644
--- a/docs/static/jvm.asciidoc
+++ b/docs/static/jvm.asciidoc
@@ -20,7 +20,7 @@ for the official word on supported versions across releases.
 ===== 
 {ls} offers architecture-specific
 https://www.elastic.co/downloads/logstash[downloads] that include
-Adoptium Eclipse Temurin 17, the latest long term support (LTS) release of the JDK.
+Adoptium Eclipse Temurin 11, the latest long term support (LTS) release of the JDK.
 
 Use the LS_JAVA_HOME environment variable if you want to use a JDK other than the
 version that is bundled. 
diff --git a/docs/static/pipeline-config-exps.asciidoc b/docs/static/pipeline-config-exps.asciidoc
new file mode 100644
index 00000000000..bb4926bf28d
--- /dev/null
+++ b/docs/static/pipeline-config-exps.asciidoc
@@ -0,0 +1,292 @@
+
+[[config-examples]]
+=== Logstash configuration examples
+These examples illustrate how you can configure Logstash to filter events, process Apache logs and syslog messages, and use conditionals to control what events are processed by a filter or output.
+
+TIP: If you need help building grok patterns, try out the
+{kibana-ref}/xpack-grokdebugger.html[Grok Debugger]. The Grok Debugger is an
+{xpack} feature under the Basic License and is therefore *free to use*.
+
+[discrete]
+[[filter-example]]
+==== Configuring filters
+Filters are an in-line processing mechanism that provide the flexibility to slice and dice your data to fit your needs. Let's take a look at some filters in action. The following configuration file sets up the `grok` and `date` filters.
+
+[source,ruby]
+----------------------------------
+input { stdin { } }
+
+filter {
+  grok {
+    match => { "message" => "%{COMBINEDAPACHELOG}" }
+  }
+  date {
+    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
+  }
+}
+
+output {
+  elasticsearch { hosts => ["localhost:9200"] }
+  stdout { codec => rubydebug }
+}
+----------------------------------
+
+Run Logstash with this configuration:
+
+[source,ruby]
+----------------------------------
+bin/logstash -f logstash-filter.conf
+----------------------------------
+
+Now, paste the following line into your terminal and press Enter so it will be
+processed by the stdin input:
+
+[source,ruby]
+----------------------------------
+127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] "GET /xampp/status.php HTTP/1.1" 200 3891 "http://cadenza/xampp/navi.php" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0"
+----------------------------------
+
+You should see something returned to stdout that looks like this:
+
+[source,ruby]
+----------------------------------
+{
+        "message" => "127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] \"GET /xampp/status.php HTTP/1.1\" 200 3891 \"http://cadenza/xampp/navi.php\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\"",
+     "@timestamp" => "2013-12-11T08:01:45.000Z",
+       "@version" => "1",
+           "host" => "cadenza",
+       "clientip" => "127.0.0.1",
+          "ident" => "-",
+           "auth" => "-",
+      "timestamp" => "11/Dec/2013:00:01:45 -0800",
+           "verb" => "GET",
+        "request" => "/xampp/status.php",
+    "httpversion" => "1.1",
+       "response" => "200",
+          "bytes" => "3891",
+       "referrer" => "\"http://cadenza/xampp/navi.php\"",
+          "agent" => "\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\""
+}
+----------------------------------
+
+As you can see, Logstash (with help from the `grok` filter) was able to parse the log line (which happens to be in Apache "combined log" format) and break it up into many different discrete bits of information. This is extremely useful once you start querying and analyzing our log data. For example, you'll be able to easily run reports on HTTP response codes, IP addresses, referrers, and so on. There are quite a few grok patterns included with Logstash out-of-the-box, so it's quite likely if you need to parse a common log format, someone has already done the work for you. For more information, see the list of https://github.com/logstash-plugins/logstash-patterns-core/tree/main/patterns[Logstash grok patterns] on GitHub.
+
+The other filter used in this example is the `date` filter. This filter parses out a timestamp and uses it as the timestamp for the event (regardless of when you're ingesting the log data). You'll notice that the `@timestamp` field in this example is set to December 11, 2013, even though Logstash is ingesting the event at some point afterwards. This is handy when backfilling logs. It gives you the ability to tell Logstash "use this value as the timestamp for this event".
+
+[discrete]
+==== Processing Apache logs
+Let's do something that's actually *useful*: process apache2 access log files! We are going to read the input from a file on the localhost, and use a <<conditionals,conditional>> to process the event according to our needs. First, create a file called something like 'logstash-apache.conf' with the following contents (you can change the log's file path to suit your needs):
+
+[source,js]
+----------------------------------
+input {
+  file {
+    path => "/tmp/access_log"
+    start_position => "beginning"
+  }
+}
+
+filter {
+  if [path] =~ "access" {
+    mutate { replace => { "type" => "apache_access" } }
+    grok {
+      match => { "message" => "%{COMBINEDAPACHELOG}" }
+    }
+  }
+  date {
+    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
+  }
+}
+
+output {
+  elasticsearch {
+    hosts => ["localhost:9200"]
+  }
+  stdout { codec => rubydebug }
+}
+
+----------------------------------
+
+Then, create the input file you configured above (in this example, "/tmp/access_log") with the following log entries (or use some from your own webserver):
+
+[source,js]
+----------------------------------
+71.141.244.242 - kurt [18/May/2011:01:48:10 -0700] "GET /admin HTTP/1.1" 301 566 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
+134.39.72.245 - - [18/May/2011:12:40:18 -0700] "GET /favicon.ico HTTP/1.1" 200 1189 "-" "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; InfoPath.2; .NET4.0C; .NET4.0E)"
+98.83.179.51 - - [18/May/2011:19:35:08 -0700] "GET /css/main.css HTTP/1.1" 200 1837 "http://www.safesand.com/information.htm" "Mozilla/5.0 (Windows NT 6.0; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"
+----------------------------------
+
+Now, run Logstash with the -f flag to pass in the configuration file:
+
+[source,js]
+----------------------------------
+bin/logstash -f logstash-apache.conf
+----------------------------------
+
+Now you should see your apache log data in Elasticsearch! Logstash opened and read the specified input file, processing each event it encountered. Any additional lines logged to this file will also be captured, processed by Logstash as events, and stored in Elasticsearch. As an added bonus, they are stashed with the field "type" set to "apache_access" (this is done by the type => "apache_access" line in the input configuration).
+
+In this configuration, Logstash is only watching the apache access_log, but it's easy enough to watch both the access_log and the error_log (actually, any file matching `*log`), by changing one line in the above configuration:
+
+[source,js]
+----------------------------------
+input {
+  file {
+    path => "/tmp/*_log"
+...
+----------------------------------
+
+When you restart Logstash, it will process both the error and access logs. However, if you inspect your data (using elasticsearch-kopf, perhaps), you'll see that the access_log is broken up into discrete fields, but the error_log isn't. That's because we used a `grok` filter to match the standard combined apache log format and automatically split the data into separate fields. Wouldn't it be nice *if* we could control how a line was parsed, based on its format? Well, we can...
+
+Note that Logstash did not reprocess the events that were already seen in the access_log file. When reading from a file, Logstash saves its position and only processes new lines as they are added. Neat!
+
+[discrete]
+[[using-conditionals]]
+==== Using conditionals
+You use conditionals to control what events are processed by a filter or output. For example, you could label each event according to which file it appeared in (access_log, error_log, and other random files that end with "log").
+
+[source,ruby]
+----------------------------------
+input {
+  file {
+    path => "/tmp/*_log"
+  }
+}
+
+filter {
+  if [path] =~ "access" {
+    mutate { replace => { type => "apache_access" } }
+    grok {
+      match => { "message" => "%{COMBINEDAPACHELOG}" }
+    }
+    date {
+      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
+    }
+  } else if [path] =~ "error" {
+    mutate { replace => { type => "apache_error" } }
+  } else {
+    mutate { replace => { type => "random_logs" } }
+  }
+}
+
+output {
+  elasticsearch { hosts => ["localhost:9200"] }
+  stdout { codec => rubydebug }
+}
+----------------------------------
+
+This example labels all events using the `type` field, but doesn't actually parse the `error` or `random` files. There are so many types of error logs that how they should be labeled really depends on what logs you're working with.
+
+Similarly, you can use conditionals to direct events to particular outputs. For example, you could:
+
+* alert nagios of any apache events with status 5xx
+* record any 4xx status to Elasticsearch
+* record all status code hits via statsd
+
+To tell nagios about any http event that has a 5xx status code, you
+first need to check the value of the `type` field. If it's apache, then you can
+check to see if the `status` field contains a 5xx error. If it is, send it to nagios. If it isn't
+a 5xx error, check to see if the `status` field contains a 4xx error. If so, send it to Elasticsearch.
+Finally, send all apache status codes to statsd no matter what the `status` field contains:
+
+[source,js]
+----------------------------------
+output {
+  if [type] == "apache" {
+    if [status] =~ /^5\d\d/ {
+      nagios { ...  }
+    } else if [status] =~ /^4\d\d/ {
+      elasticsearch { ... }
+    }
+    statsd { increment => "apache.%{status}" }
+  }
+}
+----------------------------------
+
+[discrete]
+==== Processing Syslog messages
+Syslog is one of the most common use cases for Logstash, and one it handles exceedingly well (as long as the log lines conform roughly to RFC3164). Syslog is the de facto UNIX networked logging standard, sending messages from client machines to a local file, or to a centralized log server via rsyslog. For this example, you won't need a functioning syslog instance; we'll fake it from the command line so you can get a feel for what happens.
+
+First, let's make a simple configuration file for Logstash + syslog, called 'logstash-syslog.conf'.
+
+[source,ruby]
+----------------------------------
+input {
+  tcp {
+    port => 5000
+    type => syslog
+  }
+  udp {
+    port => 5000
+    type => syslog
+  }
+}
+
+filter {
+  if [type] == "syslog" {
+    grok {
+      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
+      add_field => [ "received_at", "%{@timestamp}" ]
+      add_field => [ "received_from", "%{host}" ]
+    }
+    date {
+      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
+    }
+  }
+}
+
+output {
+  elasticsearch { hosts => ["localhost:9200"] }
+  stdout { codec => rubydebug }
+}
+----------------------------------
+
+Run Logstash with this new configuration:
+
+[source,ruby]
+----------------------------------
+bin/logstash -f logstash-syslog.conf
+----------------------------------
+
+Normally, a client machine would connect to the Logstash instance on port 5000 and send its message. For this example, we'll just telnet to Logstash and enter a log line (similar to how we entered log lines into STDIN earlier). Open another shell window to interact with the Logstash syslog input and enter the following command:
+
+[source,ruby]
+----------------------------------
+telnet localhost 5000
+----------------------------------
+
+Copy and paste the following lines as samples. (Feel free to try some of your own, but keep in mind they might not parse if the `grok` filter is not correct for your data).
+
+[source,ruby]
+----------------------------------
+Dec 23 12:11:43 louis postfix/smtpd[31499]: connect from unknown[95.75.93.154]
+Dec 23 14:42:56 louis named[16000]: client 199.48.164.7#64817: query (cache) 'amsterdamboothuren.com/MX/IN' denied
+Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)
+Dec 22 18:28:06 louis rsyslogd: [origin software="rsyslogd" swVersion="4.2.0" x-pid="2253" x-info="http://www.rsyslog.com"] rsyslogd was HUPed, type 'lightweight'.
+----------------------------------
+
+Now you should see the output of Logstash in your original shell as it processes and parses messages!
+
+[source,ruby]
+----------------------------------
+{
+                 "message" => "Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)",
+              "@timestamp" => "2013-12-23T22:30:01.000Z",
+                "@version" => "1",
+                    "type" => "syslog",
+                    "host" => "0:0:0:0:0:0:0:1:52617",
+        "syslog_timestamp" => "Dec 23 14:30:01",
+         "syslog_hostname" => "louis",
+          "syslog_program" => "CRON",
+              "syslog_pid" => "619",
+          "syslog_message" => "(www-data) CMD (php /usr/share/cacti/site/poller.php >/dev/null 2>/var/log/cacti/poller-error.log)",
+             "received_at" => "2013-12-23 22:49:22 UTC",
+           "received_from" => "0:0:0:0:0:0:0:1:52617",
+    "syslog_severity_code" => 5,
+    "syslog_facility_code" => 1,
+         "syslog_facility" => "user-level",
+         "syslog_severity" => "notice"
+}
+----------------------------------
+
+
+
diff --git a/docs/static/pipeline-configuration.asciidoc b/docs/static/pipeline-configuration.asciidoc
new file mode 100644
index 00000000000..85e3b8f9cd2
--- /dev/null
+++ b/docs/static/pipeline-configuration.asciidoc
@@ -0,0 +1,307 @@
+[[configuration]]
+== Configuring Logstash
+
+To configure Logstash, you create a config file that specifies which plugins you want to use and settings for each plugin.
+You can reference event fields in a configuration and use conditionals to process events when they meet certain
+criteria. When you run logstash, you use the `-f` to specify your config file.
+
+Let's step through creating a simple config file and using it to run Logstash. Create a file named "logstash-simple.conf" and save it in the same directory as Logstash.
+
+[source,ruby]
+----------------------------------
+input { stdin { } }
+output {
+  elasticsearch { hosts => ["localhost:9200"] }
+  stdout { codec => rubydebug }
+}
+----------------------------------
+
+Then, run logstash and specify the configuration file with the `-f` flag.
+
+[source,ruby]
+----------------------------------
+bin/logstash -f logstash-simple.conf
+----------------------------------
+
+Et voil√†! Logstash reads  the specified configuration file and outputs to both Elasticsearch and stdout. Note that if you see a message in stdout that reads "Elasticsearch Unreachable" that you will need to make sure Elasticsearch is installed and up and reachable on port 9200. Before we
+move on to some <<config-examples,more complex examples>>, let's take a closer look at what's in a config file.
+
+[[configuration-file-structure]]
+=== Structure of a config file
+
+A Logstash config file has a separate section for each type of plugin you want to add to the event processing pipeline. For example:
+
+[source,js]
+----------------------------------
+# This is a comment. You should use comments to describe
+# parts of your configuration.
+input {
+  ...
+}
+
+filter {
+  ...
+}
+
+output {
+  ...
+}
+----------------------------------
+
+Each section contains the configuration options for one or more plugins. If you specify
+multiple filters, they are applied in the order of their appearance in the configuration file.
+
+
+[discrete]
+[[plugin_configuration]]
+=== Plugin configuration
+
+The configuration of a plugin consists of the plugin name followed
+by a block of settings for that plugin. For example, this input section configures two file inputs:
+
+[source,js]
+----------------------------------
+input {
+  file {
+    path => "/var/log/messages"
+    type => "syslog"
+  }
+
+  file {
+    path => "/var/log/apache/access.log"
+    type => "apache"
+  }
+}
+----------------------------------
+
+In this example, two settings are configured for each of the file inputs: 'path' and 'type'.
+
+The settings you can configure vary according to the plugin type. For information about each plugin, see <<input-plugins,Input Plugins>>, <<output-plugins, Output Plugins>>, <<filter-plugins,Filter Plugins>>, and <<codec-plugins,Codec Plugins>>.
+
+[discrete]
+[[plugin-value-types]]
+=== Value types
+
+A plugin can require that the value for a setting be a
+certain type, such as boolean, list, or hash. The following value
+types are supported.
+
+[[array]]
+==== Array
+
+This type is now mostly deprecated in favor of using a standard type like `string` with the plugin defining the `:list => true` property for better type checking. It is still needed to handle lists of hashes or mixed types where type checking is not desired.
+
+Example:
+
+[source,js]
+----------------------------------
+  users => [ {id => 1, name => bob}, {id => 2, name => jane} ]
+----------------------------------
+
+[[list]]
+[discrete]
+==== Lists
+
+Not a type in and of itself, but a property types can have.
+This makes it possible to type check multiple values.
+Plugin authors can enable list checking by specifying `:list => true` when declaring an argument.
+
+Example:
+
+[source,js]
+----------------------------------
+  path => [ "/var/log/messages", "/var/log/*.log" ]
+  uris => [ "http://elastic.co", "http://example.net" ]
+----------------------------------
+
+This example configures `path`, which is a `string` to be a list that contains an element for each of the three strings. It also will configure the `uris` parameter to be a list of URIs, failing if any of the URIs provided are not valid.
+
+
+[[boolean]]
+[discrete]
+==== Boolean
+
+A boolean must be either `true` or `false`. Note that the `true` and `false` keywords
+are not enclosed in quotes.
+
+Example:
+
+[source,js]
+----------------------------------
+  ssl_enable => true
+----------------------------------
+
+[[bytes]]
+[discrete]
+==== Bytes
+
+A bytes field is a string field that represents a valid unit of bytes. It is a
+convenient way to declare specific sizes in your plugin options. Both SI (k M G T P E Z Y)
+and Binary (Ki Mi Gi Ti Pi Ei Zi Yi) units are supported. Binary units are in
+base-1024 and SI units are in base-1000. This field is case-insensitive
+and accepts space between the value and the unit. If no unit is specified, the integer string
+represents the number of bytes.
+
+Examples:
+
+[source,js]
+----------------------------------
+  my_bytes => "1113"   # 1113 bytes
+  my_bytes => "10MiB"  # 10485760 bytes
+  my_bytes => "100kib" # 102400 bytes
+  my_bytes => "180 mb" # 180000000 bytes
+----------------------------------
+
+[[codec]]
+[discrete]
+==== Codec
+
+A codec is the name of Logstash codec used to represent the data. Codecs can be
+used in both inputs and outputs.
+
+Input codecs provide a convenient way to decode your data before it enters the input.
+Output codecs provide a convenient way to encode your data before it leaves the output.
+Using an input or output codec eliminates the need for a separate filter in your Logstash pipeline.
+
+A list of available codecs can be found at the <<codec-plugins,Codec Plugins>> page.
+
+Example:
+
+[source,js]
+----------------------------------
+  codec => "json"
+----------------------------------
+
+[[hash]]
+[discrete]
+==== Hash
+
+A hash is a collection of key value pairs specified in the format `"field1" => "value1"`.
+Note that multiple key value entries are separated by spaces rather than commas.
+
+Example:
+
+[source,js]
+----------------------------------
+match => {
+  "field1" => "value1"
+  "field2" => "value2"
+  ...
+}
+# or as a single line. No commas between entries:
+match => { "field1" => "value1" "field2" => "value2" }
+----------------------------------
+
+[[number]]
+[discrete]
+==== Number
+
+Numbers must be valid numeric values (floating point or integer).
+
+Example:
+
+[source,js]
+----------------------------------
+  port => 33
+----------------------------------
+
+[[password]]
+[discrete]
+==== Password
+
+A password is a string with a single value that is not logged or printed.
+
+Example:
+
+[source,js]
+----------------------------------
+  my_password => "password"
+----------------------------------
+
+[[uri]]
+[discrete]
+==== URI
+
+A URI can be anything from a full URL like 'http://elastic.co/' to a simple identifier
+like 'foobar'. If the URI contains a password such as 'http://user:pass@example.net' the password
+portion of the URI will not be logged or printed.
+
+Example:
+[source,js]
+----------------------------------
+  my_uri => "http://foo:bar@example.net"
+----------------------------------
+
+
+[[path]]
+[discrete]
+==== Path
+
+A path is a string that represents a valid operating system path.
+
+Example:
+
+[source,js]
+----------------------------------
+  my_path => "/tmp/logstash"
+----------------------------------
+
+[[string]]
+[discrete]
+==== String
+
+A string must be a single character sequence. Note that string values are
+enclosed in quotes, either double or single.
+
+===== Escape sequences
+
+By default, escape sequences are not enabled. If you wish to use escape
+sequences in quoted strings, you will need to set
+`config.support_escapes: true` in your `logstash.yml`. When `true`, quoted
+strings (double and single) will have this transformation:
+
+|===========================
+| Text | Result
+| \r   | carriage return (ASCII 13)
+| \n   | new line (ASCII 10)
+| \t   | tab (ASCII 9)
+| \\   | backslash (ASCII 92)
+| \"   | double quote (ASCII 34)
+| \'   | single quote (ASCII 39)
+|===========================
+
+Example:
+
+[source,js]
+----------------------------------
+  name => "Hello world"
+  name => 'It\'s a beautiful day'
+----------------------------------
+
+[[field-reference]]
+[discrete]
+==== Field reference
+
+A Field Reference is a special <<string>> value representing the path to a field in an event, such as `@timestamp` or `[@timestamp]` to reference a top-level field, or `[client][ip]` to access a nested field.
+The <<field-references-deepdive>> provides detailed information about the structure of Field References.
+When provided as a configuration option, Field References need to be quoted and special characters must be escaped following the same rules as <<string>>.
+
+[discrete]
+[[comments]]
+=== Comments
+
+Comments are the same as in perl, ruby, and python. A comment starts with a '#' character, and does not need to be at the beginning of a line. For example:
+
+[source,js]
+----------------------------------
+# this is a comment
+
+input { # comments can appear at the end of a line, too
+  # ...
+}
+----------------------------------
+
+
+include::event-data.asciidoc[]
+include::env-vars.asciidoc[]
+include::pipeline-config-exps.asciidoc[]
diff --git a/docs/static/pipeline-structure.asciidoc b/docs/static/pipeline-structure.asciidoc
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/docs/static/security/es-security.asciidoc b/docs/static/security/es-security.asciidoc
index 471d8ae4319..0c985aa1f4b 100644
--- a/docs/static/security/es-security.asciidoc
+++ b/docs/static/security/es-security.asciidoc
@@ -2,11 +2,14 @@
 [[es-security-on]]
 == {es} security on by default
 
-{es} {ref}/configuring-stack-security.html[security is on by default] starting in 8.0.
 {es} generates its own default self-signed Secure Sockets Layer (SSL) certificates at startup. 
 
-For an on-premise {es} cluster, {ls} must establish a secure connection using the self-signed SSL certificate before it can transfer data.  
-On the other hand, {ess} uses standard publicly trusted certificates, and therefore setting a cacert is not necessary.
+{ls} must establish a Secure Sockets Layer (SSL) connection before it can transfer data to a secured {es} cluster. 
+{ls} must have a copy of the certificate authority (CA) that signed the {es} cluster's certificates.
+When a new {es} cluster is started up _without_ dedicated certificates, it generates its own default self-signed Certificate Authority at startup.
+See {ref}/configuring-stack-security.html[Starting the Elastic Stack with security enabled] for more info.
+  
+{ess} uses certificates signed by standard publicly trusted certificate authorities, and therefore setting a cacert is not necessary.
 
 .Hosted {ess} simplifies security
 [NOTE]
diff --git a/logstash-core/build.gradle b/logstash-core/build.gradle
index 112e6e0c075..1574c64f51d 100644
--- a/logstash-core/build.gradle
+++ b/logstash-core/build.gradle
@@ -167,7 +167,7 @@ dependencies {
     runtimeOnly 'commons-logging:commons-logging:1.2'
     // also handle libraries relying on log4j 1.x to redirect their logs
     runtimeOnly "org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}"
-    implementation('org.reflections:reflections:0.9.11') {
+    implementation('org.reflections:reflections:0.9.12') {
         exclude group: 'com.google.guava', module: 'guava'
     }
     implementation 'commons-codec:commons-codec:1.14'
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 2d0598eccb5..8adc5785a74 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -51,7 +51,7 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
     @auto_reload = setting("config.reload.automatic")
     @ephemeral_id = SecureRandom.uuid
 
-    # Mutex to synchonize in the exclusive method
+    # Mutex to synchronize in the exclusive method
     # Initial usage for the Ruby pipeline initialization which is not thread safe
     @webserver_control_lock = Mutex.new
 
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 0147a1cf61f..9458d58708d 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -76,6 +76,12 @@ module Environment
             Setting::String.new("api.auth.type", "none", true, %w(none basic)),
             Setting::String.new("api.auth.basic.username", nil, false).nullable,
           Setting::Password.new("api.auth.basic.password", nil, false).nullable,
+            Setting::String.new("password_policy.mode", "WARN"),
+            Setting::Numeric.new("password_policy.length.minimum", 8),
+            Setting::String.new("password_policy.include.upper", "REQUIRED"),
+            Setting::String.new("password_policy.include.lower", "REQUIRED"),
+            Setting::String.new("password_policy.include.digit", "REQUIRED"),
+            Setting::String.new("password_policy.include.symbol", "OPTIONAL"),
            Setting::Boolean.new("api.ssl.enabled", false),
   Setting::ExistingFilePath.new("api.ssl.keystore.path", nil, false).nullable,
           Setting::Password.new("api.ssl.keystore.password", nil, false).nullable,
diff --git a/logstash-core/lib/logstash/pipeline_action.rb b/logstash-core/lib/logstash/pipeline_action.rb
index 910ce66bf6f..3ae612ec058 100644
--- a/logstash-core/lib/logstash/pipeline_action.rb
+++ b/logstash-core/lib/logstash/pipeline_action.rb
@@ -20,12 +20,14 @@
 require "logstash/pipeline_action/stop"
 require "logstash/pipeline_action/reload"
 require "logstash/pipeline_action/delete"
+require "logstash/pipeline_action/stop_and_delete"
 
 module LogStash module PipelineAction
   ORDERING = {
     LogStash::PipelineAction::Create => 100,
     LogStash::PipelineAction::Reload => 200,
     LogStash::PipelineAction::Stop => 300,
+    LogStash::PipelineAction::StopAndDelete => 350,
     LogStash::PipelineAction::Delete => 400
   }
 end end
diff --git a/logstash-core/lib/logstash/pipeline_action/stop_and_delete.rb b/logstash-core/lib/logstash/pipeline_action/stop_and_delete.rb
new file mode 100644
index 00000000000..c627087ed42
--- /dev/null
+++ b/logstash-core/lib/logstash/pipeline_action/stop_and_delete.rb
@@ -0,0 +1,42 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require "logstash/pipeline_action/base"
+
+module LogStash module PipelineAction
+  class StopAndDelete < Base
+    attr_reader :pipeline_id
+
+    def initialize(pipeline_id)
+      @pipeline_id = pipeline_id
+    end
+
+    def execute(agent, pipelines_registry)
+      pipelines_registry.terminate_pipeline(pipeline_id) do |pipeline|
+        pipeline.shutdown
+      end
+
+      success = pipelines_registry.delete_pipeline(@pipeline_id)
+
+      LogStash::ConvergeResult::ActionResult.create(self, success)
+    end
+
+    def to_s
+      "PipelineAction::StopAndDelete<#{pipeline_id}>"
+    end
+  end
+end end
diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index 1c434a5f2cd..a91ad91105f 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -123,7 +123,7 @@ def initialize(alias_registry = nil)
       @registry = java.util.concurrent.ConcurrentHashMap.new
       @java_plugins = java.util.concurrent.ConcurrentHashMap.new
       @hooks = HooksRegistry.new
-      @alias_registry = alias_registry || Java::org.logstash.plugins.AliasRegistry.new
+      @alias_registry = alias_registry || Java::org.logstash.plugins.AliasRegistry.instance
     end
 
     def setup!
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 1df5315ca01..89f9e5ee527 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -23,6 +23,7 @@
 require "logstash/util/time_value"
 
 module LogStash
+
   class Settings
 
     include LogStash::Util::SubstitutionVariables
@@ -542,6 +543,47 @@ def validate(value)
       end
     end
 
+    class ValidatedPassword < Setting::Password
+      def initialize(name, value, password_policies)
+        @password_policies = password_policies
+        super(name, value, true)
+      end
+
+      def coerce(password)
+        if password && !password.kind_of?(::LogStash::Util::Password)
+          raise(ArgumentError, "Setting `#{name}` could not coerce LogStash::Util::Password value to password")
+        end
+
+        policies = set_password_policies
+        errors = LogStash::Util::PasswordValidator.new(policies).validate(password.value)
+        if errors.length() > 0
+          raise(ArgumentError, "Password #{errors}.") unless @password_policies.fetch(:mode).eql?("WARN")
+          logger.warn("Password #{errors}.")\
+        end
+        password
+      end
+
+      def set_password_policies
+        policies = {}
+        # check by default for empty password once basic auth ios enabled
+        policies[Util::PasswordPolicyType::EMPTY_STRING] = Util::PasswordPolicyParam.new
+        policies[Util::PasswordPolicyType::LENGTH] = Util::PasswordPolicyParam.new("MINIMUM_LENGTH", @password_policies.dig(:length, :minimum).to_s)
+        if @password_policies.dig(:include, :upper).eql?("REQUIRED")
+          policies[Util::PasswordPolicyType::UPPER_CASE] = Util::PasswordPolicyParam.new
+        end
+        if @password_policies.dig(:include, :lower).eql?("REQUIRED")
+          policies[Util::PasswordPolicyType::LOWER_CASE] = Util::PasswordPolicyParam.new
+        end
+        if @password_policies.dig(:include, :digit).eql?("REQUIRED")
+          policies[Util::PasswordPolicyType::DIGIT] = Util::PasswordPolicyParam.new
+        end
+        if @password_policies.dig(:include, :symbol).eql?("REQUIRED")
+          policies[Util::PasswordPolicyType::SYMBOL] = Util::PasswordPolicyParam.new
+        end
+        policies
+      end
+    end
+
     # The CoercibleString allows user to enter any value which coerces to a String.
     # For example for true/false booleans; if the possible_strings are ["foo", "true", "false"]
     # then these options in the config file or command line will be all valid: "foo", true, false, "true", "false"
diff --git a/logstash-core/lib/logstash/state_resolver.rb b/logstash-core/lib/logstash/state_resolver.rb
index 8045c4b0be5..efa6e44a6f2 100644
--- a/logstash-core/lib/logstash/state_resolver.rb
+++ b/logstash-core/lib/logstash/state_resolver.rb
@@ -44,10 +44,10 @@ def resolve(pipelines_registry, pipeline_configs)
       configured_pipelines = pipeline_configs.each_with_object(Set.new) { |config, set| set.add(config.pipeline_id.to_sym) }
 
       # If one of the running pipeline is not in the pipeline_configs, we assume that we need to
-      # stop it.
-      pipelines_registry.running_pipelines.keys
+      # stop it and delete it in registry.
+      pipelines_registry.running_pipelines(include_loading: true).keys
         .select { |pipeline_id| !configured_pipelines.include?(pipeline_id) }
-        .each { |pipeline_id| actions << LogStash::PipelineAction::Stop.new(pipeline_id) }
+        .each { |pipeline_id| actions << LogStash::PipelineAction::StopAndDelete.new(pipeline_id) }
 
       # If one of the terminated pipeline is not in the pipeline_configs, delete it in registry.
       pipelines_registry.non_running_pipelines.keys
diff --git a/logstash-core/lib/logstash/util/password.rb b/logstash-core/lib/logstash/util/password.rb
index f1f4dd2d44f..531a794fb4c 100644
--- a/logstash-core/lib/logstash/util/password.rb
+++ b/logstash-core/lib/logstash/util/password.rb
@@ -19,5 +19,8 @@
 # logged, you don't accidentally print the password itself.
 
 module LogStash; module Util
-    java_import "co.elastic.logstash.api.Password"
-end; end # class LogStash::Util::Password
+    java_import "co.elastic.logstash.api.Password" # class LogStash::Util::Password
+    java_import "org.logstash.secret.password.PasswordValidator" # class LogStash::Util::PasswordValidator
+    java_import "org.logstash.secret.password.PasswordPolicyType" # class LogStash::Util::PasswordPolicyType
+    java_import "org.logstash.secret.password.PasswordPolicyParam" # class LogStash::Util::PasswordPolicyParam
+end; end
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 93fa29914c8..22c824b9e10 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -52,6 +52,38 @@ def self.from_settings(logger, agent, settings)
         auth_basic[:username] = required_setting(settings, 'api.auth.basic.username', "api.auth.type")
         auth_basic[:password] = required_setting(settings, 'api.auth.basic.password', "api.auth.type")
 
+        # TODO: create a separate setting global param for password policy.
+        # create a shared method for REQUIRED/OPTIONAL requirement checks
+        password_policies = {}
+        password_policies[:mode] = required_setting(settings, 'password_policy.mode', "api.auth.type")
+
+        password_policies[:length] = {}
+        password_policies[:length][:minimum] = required_setting(settings, 'password_policy.length.minimum', "api.auth.type")
+        if password_policies[:length][:minimum] < 5 || password_policies[:length][:minimum] > 1024
+          fail(ArgumentError, "api.auth.basic.password.policies.length.minimum has to be between 5 and 1024.")
+        end
+        password_policies[:include] = {}
+        password_policies[:include][:upper] = required_setting(settings, 'password_policy.include.upper', "api.auth.type")
+        if password_policies[:include][:upper].eql?("REQUIRED") == false && password_policies[:include][:upper].eql?("OPTIONAL") == false
+          fail(ArgumentError, "password_policy.include.upper has to be either REQUIRED or OPTIONAL.")
+        end
+
+        password_policies[:include][:lower] = required_setting(settings, 'password_policy.include.lower', "api.auth.type")
+        if password_policies[:include][:lower].eql?("REQUIRED") == false && password_policies[:include][:lower].eql?("OPTIONAL") == false
+          fail(ArgumentError, "password_policy.include.lower has to be either REQUIRED or OPTIONAL.")
+        end
+
+        password_policies[:include][:digit] = required_setting(settings, 'password_policy.include.digit', "api.auth.type")
+        if password_policies[:include][:digit].eql?("REQUIRED") == false && password_policies[:include][:digit].eql?("OPTIONAL") == false
+          fail(ArgumentError, "password_policy.include.digit has to be either REQUIRED or OPTIONAL.")
+        end
+
+        password_policies[:include][:symbol] = required_setting(settings, 'password_policy.include.symbol', "api.auth.type")
+        if password_policies[:include][:symbol].eql?("REQUIRED") == false && password_policies[:include][:symbol].eql?("OPTIONAL") == false
+          fail(ArgumentError, "password_policy.include.symbol has to be either REQUIRED or OPTIONAL.")
+        end
+
+        auth_basic[:password_policies] = password_policies
         options[:auth_basic] = auth_basic.freeze
       else
         warn_ignored(logger, settings, "api.auth.basic.", "api.auth.type")
@@ -125,7 +157,9 @@ def initialize(logger, agent, options={})
       if options.include?(:auth_basic)
         username = options[:auth_basic].fetch(:username)
         password = options[:auth_basic].fetch(:password)
-        app = Rack::Auth::Basic.new(app, "logstash-api") { |u, p| u == username && p == password.value }
+        password_policies = options[:auth_basic].fetch(:password_policies)
+        validated_password = Setting::ValidatedPassword.new("api.auth.basic.password", password, password_policies).freeze
+        app = Rack::Auth::Basic.new(app, "logstash-api") { |u, p| u == username && p == validated_password.value.value }
       end
 
       @app = app
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index 8ad77283242..e91a0cc98aa 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -56,7 +56,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "rack", '~> 2'
   gem.add_runtime_dependency "mustermann", '~> 1.0.3'
   gem.add_runtime_dependency "sinatra", '~> 2.1.0' # pinned until GH-13777 is resolved
-  gem.add_runtime_dependency 'puma', '~> 5'
+  gem.add_runtime_dependency 'puma', '~> 5', '>= 5.6.2'
   gem.add_runtime_dependency "jruby-openssl", "~> 0.11"
 
   gem.add_runtime_dependency "treetop", "~> 1" #(MIT license)
diff --git a/logstash-core/spec/logstash/agent/converge_spec.rb b/logstash-core/spec/logstash/agent/converge_spec.rb
index 482fc06114b..52815d0139d 100644
--- a/logstash-core/spec/logstash/agent/converge_spec.rb
+++ b/logstash-core/spec/logstash/agent/converge_spec.rb
@@ -289,7 +289,7 @@
           expect(subject.converge_state_and_update).to be_a_successful_converge
         }.not_to change { subject.running_pipelines_count }
         expect(subject).to have_running_pipeline?(modified_pipeline_config)
-        expect(subject).not_to have_pipeline?(pipeline_config)
+        expect(subject).to have_stopped_pipeline?(pipeline_config)
       end
     end
 
diff --git a/logstash-core/spec/logstash/settings_spec.rb b/logstash-core/spec/logstash/settings_spec.rb
index d6a183713a1..50795c4dd31 100644
--- a/logstash-core/spec/logstash/settings_spec.rb
+++ b/logstash-core/spec/logstash/settings_spec.rb
@@ -21,8 +21,10 @@
 require "fileutils"
 
 describe LogStash::Settings do
+
   let(:numeric_setting_name) { "number" }
   let(:numeric_setting) { LogStash::Setting.new(numeric_setting_name, Numeric, 1) }
+
   describe "#register" do
     context "if setting has already been registered" do
       before :each do
@@ -44,6 +46,7 @@
       end
     end
   end
+
   describe "#get_setting" do
     context "if setting has been registered" do
       before :each do
@@ -59,6 +62,7 @@
       end
     end
   end
+
   describe "#get_subset" do
     let(:numeric_setting_1) { LogStash::Setting.new("num.1", Numeric, 1) }
     let(:numeric_setting_2) { LogStash::Setting.new("num.2", Numeric, 2) }
@@ -239,6 +243,30 @@
     end
   end
 
+  describe "#validated_password" do
+
+    context "when running PasswordValidator coerce" do
+
+      it "raises an error when supplied value is not LogStash::Util::Password" do
+        expect {
+          LogStash::Setting::ValidatedPassword.new("test.validated.password", "testPassword")
+        }.to raise_error(ArgumentError, a_string_including("Setting `test.validated.password` could not coerce LogStash::Util::Password value to password"))
+      end
+
+      it "fails on validation" do
+        password = LogStash::Util::Password.new("Password!")
+        expect {
+          LogStash::Setting::ValidatedPassword.new("test.validated.password", password)
+        }.to raise_error(ArgumentError, a_string_including("Password must contain at least one digit between 0 and 9."))
+      end
+
+      it "validates the password successfully" do
+        password = LogStash::Util::Password.new("Password123!")
+        expect(LogStash::Setting::ValidatedPassword.new("test.validated.password", password)).to_not be_nil
+      end
+    end
+  end
+
   context "placeholders in nested logstash.yml" do
 
     before :each do
diff --git a/logstash-core/spec/logstash/state_resolver_spec.rb b/logstash-core/spec/logstash/state_resolver_spec.rb
index 741afe967f1..e99ccab87cb 100644
--- a/logstash-core/spec/logstash/state_resolver_spec.rb
+++ b/logstash-core/spec/logstash/state_resolver_spec.rb
@@ -51,7 +51,7 @@
 
       it "returns some actions" do
         expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-          [:create, :hello_world],
+          [:Create, :hello_world],
         )
       end
     end
@@ -72,17 +72,17 @@
 
         it "creates the new one and keep the other one" do
           expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-            [:create, :hello_world],
+            [:Create, :hello_world],
           )
         end
 
         context "when the pipeline config contains only the new one" do
           let(:pipeline_configs) { [mock_pipeline_config(:hello_world)] }
 
-          it "creates the new one and stop the old one one" do
+          it "creates the new one and stop and delete the old one one" do
             expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-              [:create, :hello_world],
-              [:stop, :main]
+              [:Create, :hello_world],
+              [:StopAndDelete, :main]
             )
           end
         end
@@ -90,9 +90,9 @@
         context "when the pipeline config contains no pipeline" do
           let(:pipeline_configs) { [] }
 
-          it "stops the old one one" do
+          it "stops and delete the old one one" do
             expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-              [:stop, :main]
+              [:StopAndDelete, :main]
             )
           end
         end
@@ -102,7 +102,7 @@
 
           it "reloads the old one one" do
             expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-              [:reload, :main]
+              [:Reload, :main]
             )
           end
         end
@@ -134,13 +134,13 @@
 
         it "generates actions required to converge" do
           expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-            [:create, :main7],
-            [:create, :main9],
-            [:reload, :main3],
-            [:reload, :main5],
-            [:stop, :main2],
-            [:stop, :main4],
-            [:stop, :main6]
+            [:Create, :main7],
+            [:Create, :main9],
+            [:Reload, :main3],
+            [:Reload, :main5],
+            [:StopAndDelete, :main2],
+            [:StopAndDelete, :main4],
+            [:StopAndDelete, :main6]
           )
         end
       end
@@ -159,14 +159,14 @@
 
         it "creates the system pipeline before user defined pipelines" do
           expect(subject.resolve(pipelines, pipeline_configs)).to have_actions(
-            [:create, :monitoring],
-            [:create, :main7],
-            [:create, :main9],
-            [:reload, :main3],
-            [:reload, :main5],
-            [:stop, :main2],
-            [:stop, :main4],
-            [:stop, :main6]
+            [:Create, :monitoring],
+            [:Create, :main7],
+            [:Create, :main9],
+            [:Reload, :main3],
+            [:Reload, :main5],
+            [:StopAndDelete, :main2],
+            [:StopAndDelete, :main4],
+            [:StopAndDelete, :main6]
           )
         end
       end
@@ -189,7 +189,7 @@
         let(:pipeline_configs) { [mock_pipeline_config(:hello_world), main_pipeline_config ] }
 
         it "creates the new one and keep the other one stop" do
-          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:create, :hello_world])
+          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:Create, :hello_world])
           expect(pipelines.non_running_pipelines.size).to eq(1)
         end
       end
@@ -198,7 +198,7 @@
         let(:pipeline_configs) { [mock_pipeline_config(:main, "input { generator {}}")] }
 
         it "should reload the stopped pipeline" do
-          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:reload, :main])
+          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:Reload, :main])
         end
       end
 
@@ -206,7 +206,7 @@
         let(:pipeline_configs) { [] }
 
         it "should delete the stopped one" do
-          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:delete, :main])
+          expect(subject.resolve(pipelines, pipeline_configs)).to have_actions([:Delete, :main])
         end
       end
     end
diff --git a/logstash-core/spec/support/matchers.rb b/logstash-core/spec/support/matchers.rb
index 52d78de0562..a55ba16c236 100644
--- a/logstash-core/spec/support/matchers.rb
+++ b/logstash-core/spec/support/matchers.rb
@@ -51,7 +51,7 @@ def all_instance_methods_implemented?
     expect(actual.size).to eq(expected.size)
 
     expected_values = expected.each_with_object([]) do |i, obj|
-      klass_name = "LogStash::PipelineAction::#{i.first.capitalize}"
+      klass_name = "LogStash::PipelineAction::#{i.first}"
       obj << [klass_name, i.last]
     end
 
@@ -76,6 +76,16 @@ def all_instance_methods_implemented?
   end
 
   match_when_negated do |agent|
+    pipeline = nil
+    try(30) do
+      pipeline = agent.get_pipeline(pipeline_config.pipeline_id)
+      expect(pipeline).to be_nil
+    end
+  end
+end
+
+RSpec::Matchers.define :have_stopped_pipeline? do |pipeline_config|
+  match do |agent|
     pipeline = nil
     try(30) do
       pipeline = agent.get_pipeline(pipeline_config.pipeline_id)
@@ -84,6 +94,10 @@ def all_instance_methods_implemented?
     # either the pipeline_id is not in the running pipelines OR it is but have different configurations
     expect(!agent.running_pipelines.keys.map(&:to_s).include?(pipeline_config.pipeline_id.to_s) ||  pipeline.config_str != pipeline_config.config_string).to be_truthy
   end
+
+  match_when_negated do
+    raise "Not implemented"
+  end
 end
 
 RSpec::Matchers.define :have_running_pipeline? do |pipeline_config|
diff --git a/logstash-core/src/main/java/org/logstash/Rubyfier.java b/logstash-core/src/main/java/org/logstash/Rubyfier.java
index 41604ada48b..4d6288d80b2 100644
--- a/logstash-core/src/main/java/org/logstash/Rubyfier.java
+++ b/logstash-core/src/main/java/org/logstash/Rubyfier.java
@@ -25,6 +25,7 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
 import org.jruby.RubyBignum;
@@ -36,8 +37,10 @@
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
 import org.jruby.ext.bigdecimal.RubyBigDecimal;
+import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.ext.JrubyTimestampExtLibrary;
+import org.logstash.secret.SecretVariable;
 
 public final class Rubyfier {
 
@@ -49,6 +52,9 @@ public final class Rubyfier {
     private static final Rubyfier.Converter LONG_CONVERTER =
         (runtime, input) -> runtime.newFixnum(((Number) input).longValue());
 
+    private static final Rubyfier.Converter JAVAUTIL_CONVERTER =
+            JavaUtil::convertJavaToRuby;
+
     private static final Map<Class<?>, Rubyfier.Converter> CONVERTER_MAP = initConverters();
 
     /**
@@ -126,6 +132,7 @@ private static Map<Class<?>, Rubyfier.Converter> initConverters() {
                 runtime, (Timestamp) input
             )
         );
+        converters.put(SecretVariable.class, JAVAUTIL_CONVERTER);
         return converters;
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index d31794cde4a..6db3afc123d 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -243,27 +243,42 @@ private Map<String, Object> expandArguments(final PluginDefinition pluginDefinit
     }
 
     @SuppressWarnings({"rawtypes", "unchecked"})
-    public static Map<String, Object> expandConfigVariables(ConfigVariableExpander cve, Map<String, Object> configArgs) {
+    public static Map<String, Object> expandConfigVariables(ConfigVariableExpander cve, Map<String, Object> configArgs, boolean keepSecrets) {
         Map<String, Object> expandedConfig = new HashMap<>();
         for (Map.Entry<String, Object> e : configArgs.entrySet()) {
-            if (e.getValue() instanceof List) {
-                List list = (List) e.getValue();
-                List<Object> expandedObjects = new ArrayList<>();
-                for (Object o : list) {
-                    expandedObjects.add(cve.expand(o));
-                }
-                expandedConfig.put(e.getKey(), expandedObjects);
-            } else if (e.getValue() instanceof Map) {
-                expandedConfig.put(e.getKey(), expandConfigVariables(cve, (Map<String, Object>) e.getValue()));
-            } else if (e.getValue() instanceof String) {
-                expandedConfig.put(e.getKey(), cve.expand(e.getValue()));
-            } else {
-                expandedConfig.put(e.getKey(), e.getValue());
-            }
+            expandedConfig.put(e.getKey(), expandConfigVariable(cve, e.getValue(), keepSecrets));
         }
         return expandedConfig;
     }
 
+    public static Map<String, Object> expandConfigVariables(ConfigVariableExpander cve, Map<String, Object> configArgs) {
+        return expandConfigVariables(cve, configArgs, false);
+    }
+
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    public static Object expandConfigVariable(ConfigVariableExpander cve, Object valueToExpand, boolean keepSecrets) {
+        if (valueToExpand instanceof List) {
+            List list = (List) valueToExpand;
+            List<Object> expandedObjects = new ArrayList<>();
+            for (Object o : list) {
+                expandedObjects.add(cve.expand(o, keepSecrets));
+            }
+            return expandedObjects;
+        }
+        if (valueToExpand instanceof Map) {
+            // hidden recursion here expandConfigVariables -> expandConfigVariable
+            return expandConfigVariables(cve, (Map<String, Object>) valueToExpand, keepSecrets);
+        }
+        if (valueToExpand instanceof String) {
+            return cve.expand(valueToExpand, keepSecrets);
+        }
+        return valueToExpand;
+    }
+
+    public static Object expandConfigVariableKeepingSecrets(ConfigVariableExpander cve, Object valueToExpand) {
+        return expandConfigVariable(cve, valueToExpand, true);
+    }
+
     /**
      * Checks if a certain {@link Vertex} represents a {@link AbstractFilterDelegatorExt}.
      * @param vertex Vertex to check
@@ -524,7 +539,7 @@ private Collection<Dataset> compileDependencies(
                     } else if (isOutput(dependency)) {
                         return outputDataset(dependency, datasets);
                     } else {
-                        // We know that it's an if vertex since the the input children are either
+                        // We know that it's an if vertex since the input children are either
                         // output, filter or if in type.
                         final IfVertex ifvert = (IfVertex) dependency;
                         final SplitDataset ifDataset = split(
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
index 8c8a91327e7..a68ec8a9888 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/EventCondition.java
@@ -29,6 +29,7 @@
 import org.jruby.Ruby;
 import org.jruby.RubyRegexp;
 import org.jruby.RubyString;
+import org.jruby.java.proxies.ConcreteJavaProxy;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.jruby.util.ByteList;
 import org.logstash.ConvertedList;
@@ -57,6 +58,7 @@
 import org.logstash.config.ir.expression.unary.Not;
 import org.logstash.config.ir.expression.unary.Truthy;
 import org.logstash.ext.JrubyEventExtLibrary;
+import org.logstash.secret.SecretVariable;
 
 /**
  * A pipeline execution "if" condition, compiled from the {@link BooleanExpression} of an
@@ -475,8 +477,21 @@ private static boolean contains(final ConvertedList list, final Object value) {
         private static EventCondition rubyFieldEquals(final Comparable<IRubyObject> left,
                                                       final String field) {
             final FieldReference reference = FieldReference.from(field);
+
+            final Comparable<IRubyObject> decryptedLeft = eventuallyDecryptSecretVariable(left);
             return event ->
-                    left.equals(Rubyfier.deep(RubyUtil.RUBY, event.getEvent().getUnconvertedField(reference)));
+                    decryptedLeft.equals(Rubyfier.deep(RubyUtil.RUBY, event.getEvent().getUnconvertedField(reference)));
+        }
+
+        private static Comparable<IRubyObject> eventuallyDecryptSecretVariable(Comparable<IRubyObject> value) {
+            if (!(value instanceof ConcreteJavaProxy)) {
+                return value;
+            }
+            if (!((ConcreteJavaProxy) value).getJavaClass().isAssignableFrom(SecretVariable.class)) {
+                return value;
+            }
+            SecretVariable secret = ((ConcreteJavaProxy) value).toJava(SecretVariable.class);
+            return RubyUtil.RUBY.newString(secret.getSecretValue());
         }
 
         private static EventCondition constant(final boolean value) {
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/ExpressionSubstitution.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/ExpressionSubstitution.java
index adddd34e680..721566d8827 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/ExpressionSubstitution.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/ExpressionSubstitution.java
@@ -1,6 +1,5 @@
 package org.logstash.config.ir.expression;
 
-import com.google.common.collect.ImmutableMap;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.CompiledPipeline;
 import org.logstash.config.ir.InvalidIRException;
@@ -8,7 +7,6 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
-import java.util.Map;
 
 public class ExpressionSubstitution {
     /**
@@ -36,10 +34,8 @@ public static Expression substituteBoolExpression(ConfigVariableExpander cve, Ex
                     return constructor.newInstance(unaryBoolExp.getSourceWithMetadata(), substitutedExp);
                 }
             } else if (expression instanceof ValueExpression && !(expression instanceof RegexValueExpression) && (((ValueExpression) expression).get() != null)) {
-                final String key = "placeholder";
-                Map<String, Object> args = ImmutableMap.of(key, ((ValueExpression) expression).get());
-                Map<String, Object> substitutedArgs = CompiledPipeline.expandConfigVariables(cve, args);
-                return new ValueExpression(expression.getSourceWithMetadata(), substitutedArgs.get(key));
+                Object expanded = CompiledPipeline.expandConfigVariableKeepingSecrets(cve, ((ValueExpression) expression).get());
+                return new ValueExpression(expression.getSourceWithMetadata(), expanded);
             }
 
             return expression;
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java b/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
index 2b0a6db3377..c93f71e439a 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/expression/ValueExpression.java
@@ -23,10 +23,12 @@
 import java.math.BigDecimal;
 import java.time.Instant;
 import java.util.List;
+
 import org.jruby.RubyHash;
 import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.InvalidIRException;
 import org.logstash.config.ir.SourceComponent;
+import org.logstash.secret.SecretVariable;
 
 public class ValueExpression extends Expression {
     protected final Object value;
@@ -44,7 +46,8 @@ public ValueExpression(SourceWithMetadata meta, Object value) throws InvalidIREx
                 value instanceof String ||
                 value instanceof List ||
                 value instanceof RubyHash ||
-                value instanceof Instant
+                value instanceof Instant ||
+                value instanceof SecretVariable
         )) {
             // This *should* be caught by the treetop grammar, but we need this case just in case there's a bug
             // somewhere
diff --git a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
index 5218a1261f0..468f4eb93df 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/AliasRegistry.java
@@ -13,6 +13,8 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
+import java.net.URLConnection;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.util.Collections;
@@ -123,7 +125,20 @@ Map<PluginCoordinate, String> loadAliasesDefinitions(Path yamlPath) {
 
         Map<PluginCoordinate, String> loadAliasesDefinitions() {
             final String filePath = "org/logstash/plugins/plugin_aliases.yml";
-            final InputStream in = AliasYamlLoader.class.getClassLoader().getResourceAsStream(filePath);
+            InputStream in = null;
+            try {
+                URL url = AliasYamlLoader.class.getClassLoader().getResource(filePath);
+                if (url != null) {
+                    URLConnection connection = url.openConnection();
+                    if (connection != null) {
+                        connection.setUseCaches(false);
+                        in = connection.getInputStream();
+                    }
+                }
+            } catch (IOException e){
+                LOGGER.warn("Unable to read alias definition in jar resources: {}", filePath, e);
+                return Collections.emptyMap();
+            }
             if (in == null) {
                 LOGGER.warn("Malformed yaml file in yml definition file in jar resources: {}", filePath);
                 return Collections.emptyMap();
@@ -177,7 +192,15 @@ private Map<PluginCoordinate, String> extractDefinitions(PluginType pluginType,
     private final Map<PluginCoordinate, String> aliases = new HashMap<>();
     private final Map<PluginCoordinate, String> reversedAliases = new HashMap<>();
 
-    public AliasRegistry() {
+    private static final AliasRegistry INSTANCE = new AliasRegistry();
+    public static AliasRegistry getInstance() {
+        return INSTANCE;
+    }
+
+    // The Default implementation of AliasRegistry.
+    // This needs to be a singleton as multiple threads accessing may cause the first thread to close the jar file
+    // leading to issues with subsequent threads loading the yaml file.
+    private AliasRegistry() {
         final AliasYamlLoader loader = new AliasYamlLoader();
         final Map<PluginCoordinate, String> defaultDefinitions = loader.loadAliasesDefinitions();
         configurePluginAliases(defaultDefinitions);
diff --git a/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java b/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
index a66037a0729..008ddc599d6 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/ConfigVariableExpander.java
@@ -22,6 +22,7 @@
 
 import org.logstash.common.EnvironmentVariableProvider;
 import org.logstash.secret.SecretIdentifier;
+import org.logstash.secret.SecretVariable;
 import org.logstash.secret.store.SecretStore;
 
 import java.nio.charset.StandardCharsets;
@@ -70,46 +71,52 @@ public ConfigVariableExpander(SecretStore secretStore, EnvironmentVariableProvid
      * If a substitution variable is not found, the value is return unchanged
      *
      * @param value Config value in which substitution variables, if any, should be replaced.
+     * @param keepSecrets True if secret stores resolved variables must be kept secret in a Password instance
      * @return Config value with any substitution variables replaced
      */
-    public Object expand(Object value) {
-        String variable;
-        if (value instanceof String) {
-            variable = (String) value;
-        } else {
+    public Object expand(Object value, boolean keepSecrets) {
+        if (!(value instanceof String)) {
             return value;
         }
 
-        Matcher m = substitutionPattern.matcher(variable);
-        if (m.matches()) {
-            String variableName = m.group("name");
+        String variable = (String) value;
 
-            if (secretStore != null) {
-                byte[] ssValue = secretStore.retrieveSecret(new SecretIdentifier(variableName));
-                if (ssValue != null) {
+        Matcher m = substitutionPattern.matcher(variable);
+        if (!m.matches()) {
+            return variable;
+        }
+        String variableName = m.group("name");
+
+        if (secretStore != null) {
+            byte[] ssValue = secretStore.retrieveSecret(new SecretIdentifier(variableName));
+            if (ssValue != null) {
+                if (keepSecrets) {
+                    return new SecretVariable(variableName, new String(ssValue, StandardCharsets.UTF_8));
+                } else {
                     return new String(ssValue, StandardCharsets.UTF_8);
                 }
             }
+        }
 
-            if (envVarProvider != null) {
-                String evValue = envVarProvider.get(variableName);
-                if (evValue != null) {
-                    return evValue;
-                }
-            }
-
-            String defaultValue = m.group("default");
-            if (defaultValue != null) {
-                return defaultValue;
+        if (envVarProvider != null) {
+            String evValue = envVarProvider.get(variableName);
+            if (evValue != null) {
+                return evValue;
             }
+        }
 
+        String defaultValue = m.group("default");
+        if (defaultValue == null) {
             throw new IllegalStateException(String.format(
                     "Cannot evaluate `%s`. Replacement variable `%s` is not defined in a Logstash " +
                             "secret store or an environment entry and there is no default value given.",
                     variable, variableName));
-        } else {
-            return variable;
         }
+        return defaultValue;
+    }
+
+    public Object expand(Object value) {
+        return expand(value, false);
     }
 
     @Override
diff --git a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
index 84148e7ef18..301d5430dc1 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
@@ -20,7 +20,6 @@
 
 package org.logstash.plugins.discovery;
 
-import com.google.common.base.Predicate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.logstash.plugins.AliasRegistry;
@@ -61,18 +60,17 @@ public final class PluginRegistry {
     private final Map<String, Class<Codec>> codecs = new HashMap<>();
     private static final Object LOCK = new Object();
     private static volatile PluginRegistry INSTANCE;
-    private final AliasRegistry aliasRegistry;
+    private final AliasRegistry aliasRegistry = AliasRegistry.getInstance();
 
-    private PluginRegistry(AliasRegistry aliasRegistry) {
-        this.aliasRegistry = aliasRegistry;
+    private PluginRegistry() {
         discoverPlugins();
     }
 
-    public static PluginRegistry getInstance(AliasRegistry aliasRegistry) {
+    public static PluginRegistry getInstance() {
         if (INSTANCE == null) {
             synchronized (LOCK) {
                 if (INSTANCE == null) {
-                    INSTANCE = new PluginRegistry(aliasRegistry);
+                    INSTANCE = new PluginRegistry();
                 }
             }
         }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
index 53c6a4c9210..9846d22fd67 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/factory/PluginFactoryExt.java
@@ -18,7 +18,6 @@
 import org.logstash.instrument.metrics.AbstractMetricExt;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
-import org.logstash.plugins.AliasRegistry;
 import org.logstash.plugins.ConfigVariableExpander;
 import org.logstash.plugins.PluginLookup;
 import org.logstash.plugins.discovery.PluginRegistry;
@@ -83,7 +82,7 @@ public static IRubyObject filterDelegator(final ThreadContext context,
     }
 
     public PluginFactoryExt(final Ruby runtime, final RubyClass metaClass) {
-        this(runtime, metaClass, new PluginLookup(PluginRegistry.getInstance(new AliasRegistry())));
+        this(runtime, metaClass, new PluginLookup(PluginRegistry.getInstance()));
     }
 
     PluginFactoryExt(final Ruby runtime, final RubyClass metaClass, PluginResolver pluginResolver) {
diff --git a/logstash-core/src/main/java/org/logstash/secret/SecretVariable.java b/logstash-core/src/main/java/org/logstash/secret/SecretVariable.java
new file mode 100644
index 00000000000..ddd887c66d9
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/SecretVariable.java
@@ -0,0 +1,36 @@
+package org.logstash.secret;
+
+/**
+ * Value clas to carry the secret key id and secret value.
+ *
+ * Used to avoid inadvertently leak of secrets.
+ * */
+public final class SecretVariable {
+
+    private final String key;
+    private final String secretValue;
+
+    public SecretVariable(String key, String secretValue) {
+        this.key = key;
+        this.secretValue = secretValue;
+    }
+
+    public String getSecretValue() {
+        return secretValue;
+    }
+
+    @Override
+    public String toString() {
+        return "${" +key + "}";
+    }
+
+    // Ruby code compatibility, value attribute
+    public String getValue() {
+        return getSecretValue();
+    }
+
+    // Ruby code compatibility, inspect method
+    public String inspect() {
+        return toString();
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/DigitValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/DigitValidator.java
new file mode 100644
index 00000000000..5021ade5f81
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/DigitValidator.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates digit regex.
+ */
+public class DigitValidator implements Validator {
+
+    /**
+     A regex for digit number inclusion.
+     */
+    private static final String DIGIT_REGEX = ".*\\d.*";
+
+    /**
+     A policy failure reasoning if password does not contain digit number(s).
+     */
+    private static final String DIGIT_REASONING = "must contain at least one digit between 0 and 9";
+
+    @Override
+    public Optional<String> validate(String password) {
+        return password.matches(DIGIT_REGEX)
+                ? Optional.empty()
+                : Optional.of(DIGIT_REASONING);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/EmptyStringValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/EmptyStringValidator.java
new file mode 100644
index 00000000000..830e9c02cbb
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/EmptyStringValidator.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import com.google.common.base.Strings;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates empty policy.
+ */
+public class EmptyStringValidator implements Validator {
+
+    /**
+     A policy failure reasoning for empty password.
+     */
+    private static final String EMPTY_PASSWORD_REASONING = "must not be empty";
+
+    @Override
+    public Optional<String> validate(String password) {
+        return Strings.isNullOrEmpty(password)
+                ? Optional.of(EMPTY_PASSWORD_REASONING)
+                : Optional.empty();
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java
new file mode 100644
index 00000000000..c858fd0e41c
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import com.google.common.base.Strings;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates length policy.
+ */
+public class LengthValidator implements Validator {
+
+    /**
+     Required minimum length of the password.
+     */
+    private static final int MINIMUM_LENGTH = 5;
+
+    /**
+     Required maximum length of the password.
+     */
+    private static final int MAXIMUM_LENGTH = 1024;
+
+    /**
+     A policy failure reasoning for password length.
+     */
+    private static final String LENGTH_REASONING = "must be length of between 5 and " + MAXIMUM_LENGTH;
+
+    /**
+     Required minimum length of the password.
+     */
+    private int minimumLength;
+
+    public LengthValidator(int minimumLength) {
+        if (minimumLength < MINIMUM_LENGTH || minimumLength > MAXIMUM_LENGTH) {
+            throw new IllegalArgumentException("Password length should be between " + MINIMUM_LENGTH + " and " + MAXIMUM_LENGTH + ".");
+        }
+        this.minimumLength = minimumLength;
+    }
+
+    @Override
+    public Optional<String> validate(String password) {
+        return Strings.isNullOrEmpty(password) || password.length() < minimumLength
+                ? Optional.of(LENGTH_REASONING)
+                : Optional.empty();
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/LowerCaseValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/LowerCaseValidator.java
new file mode 100644
index 00000000000..867f7833994
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/LowerCaseValidator.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates lower case policy.
+ */
+public class LowerCaseValidator implements Validator {
+
+    /**
+     A regex for lower case character inclusion.
+     */
+    private static final String LOWER_CASE_REGEX = ".*[a-z].*";
+
+    /**
+     A policy failure reasoning if password does not contain lower case character(s).
+     */
+    private static final String LOWER_CASE_REASONING = "must contain at least one lower case";
+
+    @Override
+    public Optional<String> validate(String password) {
+        return password.matches(LOWER_CASE_REGEX)
+                ? Optional.empty()
+                : Optional.of(LOWER_CASE_REASONING);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/PasswordParamConverter.java b/logstash-core/src/main/java/org/logstash/secret/password/PasswordParamConverter.java
new file mode 100644
index 00000000000..b70ec49876a
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/PasswordParamConverter.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import com.google.common.base.Strings;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.Function;
+
+/**
+ * Converter class for password params.
+ */
+public class PasswordParamConverter {
+
+    @SuppressWarnings("rawtypes")
+    private static final Map<Class, Function<String, ?>> converters = new HashMap<>();
+
+    static {
+        converters.put(Integer.class, Integer::parseInt);
+        converters.put(String.class, String::toString);
+        converters.put(Boolean.class, Boolean::parseBoolean);
+        converters.put(Double.class, Double::parseDouble);
+    }
+
+    /**
+     * Converts given value to expected klass.
+     * @param klass a class type of the desired output value.
+     * @param value a value to be converted.
+     * @param <T> desired type.
+     * @return converted value.
+     * throws {@link IllegalArgumentException} if klass is not supported or value is empty.
+     */
+    @SuppressWarnings("unchecked")
+    public static <T> T convert(Class<T> klass, String value) {
+        if (Strings.isNullOrEmpty(value)) {
+            throw new IllegalArgumentException("Value must not be empty.");
+        }
+
+        if (Objects.isNull(converters.get(klass))) {
+            throw new IllegalArgumentException("No conversion supported for given class.");
+        }
+        return (T)converters.get(klass).apply(value);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyParam.java b/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyParam.java
new file mode 100644
index 00000000000..ac3aad1243d
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyParam.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+public class PasswordPolicyParam {
+
+    private String type;
+
+    private String value;
+
+    public PasswordPolicyParam() {}
+
+    public PasswordPolicyParam(String type, String value) {
+        this.type = type;
+        this.value = value;
+    }
+
+    public String getType() {
+        return this.type;
+    }
+
+    public String getValue() {
+        return this.value;
+    }
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyType.java b/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyType.java
new file mode 100644
index 00000000000..095816c1a73
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/PasswordPolicyType.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+/**
+ * Types of password policy declarations.
+ */
+public enum PasswordPolicyType {
+
+    EMPTY_STRING,
+    DIGIT,
+    LOWER_CASE,
+    UPPER_CASE,
+    SYMBOL,
+    LENGTH
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/PasswordValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/PasswordValidator.java
new file mode 100644
index 00000000000..cdcd3e91b27
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/PasswordValidator.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+
+/**
+ * A class to validate the given password string and give a reasoning for validation failures.
+ * Default validation policies are based on complex password generation recommendation from several institutions
+ * such as NIST (https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf),
+ * OWASP (https://github.com/OWASP/www-community/blob/master/pages/OWASP_Validation_Regex_Repository.md), etc...
+ */
+public class PasswordValidator {
+
+    /**
+     * List of validators set through a constructor.
+     */
+    @VisibleForTesting
+    protected List<Validator> validators;
+
+    private static final Logger LOGGER = LogManager.getLogger(PasswordValidator.class);
+
+    /**
+     * A constructor to initialize the password validator.
+     * @param policies required policies with their parameters.
+     */
+    public PasswordValidator(Map<PasswordPolicyType, PasswordPolicyParam> policies) {
+        validators = new ArrayList<>();
+        policies.forEach((policy, param) -> {
+            switch (policy) {
+                case DIGIT:
+                    validators.add(new DigitValidator());
+                    break;
+                case LENGTH:
+                    int minimumLength = param.getType().equals("MINIMUM_LENGTH")
+                            ? PasswordParamConverter.convert(Integer.class, param.getValue())
+                            : 8;
+                    validators.add(new LengthValidator(minimumLength));
+                    break;
+                case SYMBOL:
+                    validators.add(new SymbolValidator());
+                    break;
+                case LOWER_CASE:
+                    validators.add(new LowerCaseValidator());
+                    break;
+                case UPPER_CASE:
+                    validators.add(new UpperCaseValidator());
+                    break;
+                case EMPTY_STRING:
+                    validators.add(new EmptyStringValidator());
+                    break;
+            }
+        });
+    }
+
+    /**
+     * Validates given string against strong password policy and returns the list of failure reasoning.
+     * Empty return list means password policy requirements meet.
+     * @param password a password string going to be validated.
+     * @return List of failure reasoning.
+     */
+    public String validate(String password) {
+        return validators.stream()
+                .map(validator -> validator.validate(password))
+                .filter(Optional::isPresent).map(Optional::get)
+                .reduce("", (partialString, element) -> (partialString.isEmpty() ? "" : partialString + ", ") + element);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/SymbolValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/SymbolValidator.java
new file mode 100644
index 00000000000..6fff4950d20
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/SymbolValidator.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates symbol regex.
+ */
+public class SymbolValidator implements Validator {
+
+    /**
+     A regex for special character inclusion.
+     */
+    private static final String SYMBOL_REGEX = ".*[~!@#$%^&*()_+|<>?:{}].*";
+
+    /**
+     A policy failure reasoning if password does not contain special character(s).
+     */
+    private static final String SYMBOL_REASONING = "must contain at least one special character";
+
+    @Override
+    public Optional<String> validate(String password) {
+        return password.matches(SYMBOL_REGEX)
+                ? Optional.empty()
+                : Optional.of(SYMBOL_REASONING);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/UpperCaseValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/UpperCaseValidator.java
new file mode 100644
index 00000000000..8d82001bdf0
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/UpperCaseValidator.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to Elasticsearch B.V. under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch B.V. licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.logstash.secret.password;
+
+import java.util.Optional;
+
+/**
+ * A validator which check if given password appropriates upper case policy.
+ */
+public class UpperCaseValidator implements Validator {
+
+    /**
+     A regex for upper case character inclusion.
+     */
+    private static final String UPPER_CASE_REGEX = ".*[A-Z].*";
+
+    /**
+     A policy failure reasoning if password does not contain upper case character(s).
+     */
+    private static final String UPPER_CASE_REASONING = "must contain at least one upper case";
+
+    @Override
+    public Optional<String> validate(String password) {
+        return password.matches(UPPER_CASE_REGEX)
+                ? Optional.empty()
+                : Optional.of(UPPER_CASE_REASONING);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/Validator.java b/logstash-core/src/main/java/org/logstash/secret/password/Validator.java
new file mode 100644
index 00000000000..c24aaadda88
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/password/Validator.java
@@ -0,0 +1,15 @@
+package org.logstash.secret.password;
+
+import java.util.Optional;
+
+/**
+ * A validator interface for password validation policies.
+ */
+public interface Validator {
+    /**
+     * Validates the input password.
+     * @param password a password string
+     * @return optional empty if succeeds or value for reasoning.
+     */
+    Optional<String> validate(String password);
+}
diff --git a/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java b/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
index 31b8536f034..0b111308f3d 100644
--- a/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/ConfigVariableExpanderTest.java
@@ -24,11 +24,13 @@
 import org.junit.Test;
 import org.logstash.plugins.ConfigVariableExpander;
 import org.logstash.secret.SecretIdentifier;
+import org.logstash.secret.SecretVariable;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Map;
 
+import static org.hamcrest.Matchers.instanceOf;
 import static org.logstash.secret.store.SecretStoreFactoryTest.MemoryStore;
 
 public class ConfigVariableExpanderTest {
@@ -97,6 +99,21 @@ public void testPrecedenceOfSecretStoreValue() throws Exception {
         Assert.assertEquals(ssVal, expandedValue);
     }
 
+    @Test
+    public void testPrecedenceOfSecretStoreValueKeepingSecrets() {
+        String key = "foo";
+        String ssVal = "ssbar";
+        String evVal = "evbar";
+        String defaultValue = "defaultbar";
+        ConfigVariableExpander cve = getFakeCve(
+                Collections.singletonMap(key, ssVal),
+                Collections.singletonMap(key, evVal));
+
+        Object expandedValue = cve.expand("${" + key + ":" + defaultValue + "}", true);
+        Assert.assertThat(expandedValue, instanceOf(SecretVariable.class));
+        Assert.assertEquals(ssVal, ((SecretVariable) expandedValue).getSecretValue());
+    }
+
     @Test
     public void testPrecedenceOfEnvironmentVariableValue() throws Exception {
         String key = "foo";
@@ -110,7 +127,8 @@ public void testPrecedenceOfEnvironmentVariableValue() throws Exception {
         Assert.assertEquals(evVal, expandedValue);
     }
 
-    private static ConfigVariableExpander getFakeCve(
+    // used by tests IfVertexTest, EventConditionTest
+    public static ConfigVariableExpander getFakeCve(
             final Map<String, Object> ssValues, final Map<String, String> envVarValues) {
 
         MemoryStore ms = new MemoryStore();
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/EventConditionTest.java b/logstash-core/src/test/java/org/logstash/config/ir/EventConditionTest.java
index 329a1f2c7d6..c7130b7e430 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/EventConditionTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/EventConditionTest.java
@@ -21,10 +21,12 @@
 package org.logstash.config.ir;
 
 import org.jruby.RubyArray;
+import org.jruby.runtime.builtin.IRubyObject;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.logstash.RubyUtil;
+import org.logstash.common.ConfigVariableExpanderTest;
 import org.logstash.common.EnvironmentVariableProvider;
 import org.logstash.ext.JrubyEventExtLibrary;
 import org.logstash.plugins.ConfigVariableExpander;
@@ -189,4 +191,43 @@ private Supplier<Consumer<Collection<RubyEvent>>> mockOutputSupplier() {
                 event -> EVENT_SINKS.get(runId).add(event)
         );
     }
+
+    private Supplier<IRubyObject> nullInputSupplier() {
+        return () -> null;
+    }
+
+    @Test
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    public void testConditionWithSecretStoreVariable() throws InvalidIRException {
+        ConfigVariableExpander cve = ConfigVariableExpanderTest.getFakeCve(
+                Collections.singletonMap("secret_key", "s3cr3t"), Collections.emptyMap());
+
+        final PipelineIR pipelineIR = ConfigCompiler.configToPipelineIR(
+                IRHelpers.toSourceWithMetadata("input {mockinput{}} " +
+                        "output { " +
+                        "  if [left] == \"${secret_key}\" { " +
+                        "    mockoutput{}" +
+                        "  } }"),
+                false,
+                cve);
+
+        // left and right string values match when right.contains(left)
+        RubyEvent leftIsString1 = RubyEvent.newRubyEvent(RubyUtil.RUBY);
+        leftIsString1.getEvent().setField("left", "s3cr3t");
+
+        RubyArray inputBatch = RubyUtil.RUBY.newArray(leftIsString1);
+
+        new CompiledPipeline(
+                pipelineIR,
+                new CompiledPipelineTest.MockPluginFactory(
+                        Collections.singletonMap("mockinput", nullInputSupplier()),
+                        Collections.emptyMap(), // no filters
+                        Collections.singletonMap("mockoutput", mockOutputSupplier())
+                )
+        ).buildExecution().compute(inputBatch, false, false);
+        final RubyEvent[] outputEvents = EVENT_SINKS.get(runId).toArray(new RubyEvent[0]);
+
+        assertThat(outputEvents.length, is(1));
+        assertThat(outputEvents[0], is(leftIsString1));
+    }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java b/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
index 59e07f4dd42..996533a7d04 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/graph/IfVertexTest.java
@@ -21,7 +21,15 @@
 package org.logstash.config.ir.graph;
 
 import org.junit.Test;
+import org.logstash.common.ConfigVariableExpanderTest;
+import org.logstash.config.ir.DSL;
 import org.logstash.config.ir.InvalidIRException;
+import org.logstash.config.ir.expression.BooleanExpression;
+import org.logstash.config.ir.expression.ExpressionSubstitution;
+import org.logstash.config.ir.expression.binary.Eq;
+import org.logstash.plugins.ConfigVariableExpander;
+
+import java.util.Collections;
 
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.assertThat;
@@ -80,4 +88,21 @@ public IfVertex testIfVertex() throws InvalidIRException {
         return new IfVertex(randMeta(), createTestExpression());
     }
 
+    @Test
+    public void testIfVertexWithSecretsIsntLeaked() throws InvalidIRException {
+        BooleanExpression booleanExpression = DSL.eEq(DSL.eEventValue("password"), DSL.eValue("${secret_key}"));
+
+        ConfigVariableExpander cve = ConfigVariableExpanderTest.getFakeCve(
+                Collections.singletonMap("secret_key", "s3cr3t"), Collections.emptyMap());
+
+        IfVertex ifVertex = new IfVertex(randMeta(),
+                (BooleanExpression) ExpressionSubstitution.substituteBoolExpression(cve, booleanExpression));
+
+        // Exercise
+        String output = ifVertex.toString();
+
+        // Verify
+        assertThat(output, not(containsString("s3cr3t")));
+    }
+
 }
diff --git a/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java b/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java
index 054bfbef7a2..4ad12ed0060 100644
--- a/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java
+++ b/logstash-core/src/test/java/org/logstash/plugins/AliasRegistryTest.java
@@ -16,7 +16,7 @@ public class AliasRegistryTest {
 
     @Test
     public void testLoadAliasesFromYAML() {
-        final AliasRegistry sut = new AliasRegistry();
+        final AliasRegistry sut = AliasRegistry.getInstance();
 
         assertEquals("aliased_input1 should be the alias for beats input",
                 "beats", sut.originalFromAlias(PluginType.INPUT, "aliased_input1"));
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/DigitValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/DigitValidatorTest.java
new file mode 100644
index 00000000000..82aff67e772
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/DigitValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link DigitValidator}
+ */
+public class DigitValidatorTest {
+
+    private DigitValidator digitValidator;
+
+    @Before
+    public void setUp() {
+        digitValidator = new DigitValidator();
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = digitValidator.validate("Password123");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = digitValidator.validate("Password");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must contain at least one digit between 0 and 9");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/EmptyStringValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/EmptyStringValidatorTest.java
new file mode 100644
index 00000000000..4e3d768178b
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/EmptyStringValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link EmptyStringValidator}
+ */
+public class EmptyStringValidatorTest {
+
+    private EmptyStringValidator emptyStringValidator;
+
+    @Before
+    public void setUp() {
+        emptyStringValidator = new EmptyStringValidator();
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = emptyStringValidator.validate("Password123");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = emptyStringValidator.validate("");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must not be empty");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java
new file mode 100644
index 00000000000..56f81686add
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link LengthValidator}
+ */
+public class LengthValidatorTest {
+
+    private LengthValidator lengthValidator;
+
+    @Before
+    public void setUp() {
+        lengthValidator = new LengthValidator(8);
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = lengthValidator.validate("Password123");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = lengthValidator.validate("Pwd");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must be length of between 5 and 1024");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/LowerCaseValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/LowerCaseValidatorTest.java
new file mode 100644
index 00000000000..0ce40e2514d
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/LowerCaseValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link LowerCaseValidator}
+ */
+public class LowerCaseValidatorTest {
+
+    private LowerCaseValidator lowerCaseValidator;
+
+    @Before
+    public void setUp() {
+        lowerCaseValidator = new LowerCaseValidator();
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = lowerCaseValidator.validate("Password123");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = lowerCaseValidator.validate("PASSWORD");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must contain at least one lower case");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/PasswordParamConverterTest.java b/logstash-core/src/test/java/org/logstash/secret/password/PasswordParamConverterTest.java
new file mode 100644
index 00000000000..ac862a68280
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/PasswordParamConverterTest.java
@@ -0,0 +1,35 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * A test class for {@link PasswordParamConverter}
+ */
+public class PasswordParamConverterTest {
+
+    @Test
+    public void testConvert() {
+        int intResult = PasswordParamConverter.convert(Integer.class, "8");
+        Assert.assertEquals(8, intResult);
+
+        String stringResult = PasswordParamConverter.convert(String.class, "test");
+        Assert.assertEquals("test", stringResult);
+
+        boolean booleanResult = PasswordParamConverter.convert(Boolean.class, "false");
+        Assert.assertEquals(false, booleanResult);
+
+        double doubleResult = PasswordParamConverter.convert(Double.class, "0.0012");
+        Assert.assertEquals(0.0012, doubleResult, 0);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testEmptyValue() {
+        PasswordParamConverter.convert(Double.class, "");
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testUnsupportedKlass() {
+        PasswordParamConverter.convert(Float.class, "0.012f");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/PasswordValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/PasswordValidatorTest.java
new file mode 100644
index 00000000000..65192e5fa6a
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/PasswordValidatorTest.java
@@ -0,0 +1,47 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Test for {@link PasswordValidator}
+ */
+public class PasswordValidatorTest {
+
+    private PasswordValidator passwordValidator;
+
+    @Before
+    public void setUp() {
+        Map<PasswordPolicyType, PasswordPolicyParam> policies = new HashMap<>();
+        policies.put(PasswordPolicyType.EMPTY_STRING, new PasswordPolicyParam());
+        policies.put(PasswordPolicyType.DIGIT, new PasswordPolicyParam());
+        policies.put(PasswordPolicyType.LENGTH, new PasswordPolicyParam("MINIMUM_LENGTH", "8"));
+        policies.put(PasswordPolicyType.LOWER_CASE, new PasswordPolicyParam());
+        policies.put(PasswordPolicyType.UPPER_CASE, new PasswordPolicyParam());
+        policies.put(PasswordPolicyType.SYMBOL, new PasswordPolicyParam());
+        passwordValidator = new PasswordValidator(policies);
+    }
+
+    @Test
+    public void testPolicyMap() {
+        Assert.assertEquals(6, passwordValidator.validators.size());
+    }
+
+    @Test
+    public void testValidPassword() {
+        String output = passwordValidator.validate("Password123$");
+        Assert.assertTrue(output.isEmpty());
+    }
+
+    @Test
+    public void testPolicyCombinedOutput() {
+        String specialCharacterErrorMessage = "must contain at least one special character";
+        String upperCaseErrorMessage = "must contain at least one upper case";
+        String output = passwordValidator.validate("password123");
+        Assert.assertTrue(output.contains(specialCharacterErrorMessage) && output.contains(upperCaseErrorMessage));
+    }
+}
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/SymbolValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/SymbolValidatorTest.java
new file mode 100644
index 00000000000..e16bf52e4f4
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/SymbolValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link SymbolValidator}
+ */
+public class SymbolValidatorTest {
+
+    private SymbolValidator symbolValidator;
+
+    @Before
+    public void setUp() {
+        symbolValidator = new SymbolValidator();
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = symbolValidator.validate("Password123$");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = symbolValidator.validate("Password123");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must contain at least one special character");
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/UpperCaseValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/UpperCaseValidatorTest.java
new file mode 100644
index 00000000000..ff004a91d88
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/password/UpperCaseValidatorTest.java
@@ -0,0 +1,33 @@
+package org.logstash.secret.password;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Optional;
+
+/**
+ * A test class for {@link UpperCaseValidator}
+ */
+public class UpperCaseValidatorTest {
+
+    private UpperCaseValidator upperCaseValidator;
+
+    @Before
+    public void setUp() {
+        upperCaseValidator = new UpperCaseValidator();
+    }
+
+    @Test
+    public void testValidateSuccess() {
+        Optional<String> result = upperCaseValidator.validate("Password123$");
+        Assert.assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void testValidateFailure() {
+        Optional<String> result = upperCaseValidator.validate("password123");
+        Assert.assertTrue(result.isPresent());
+        Assert.assertEquals(result.get(), "must contain at least one upper case");
+    }
+}
\ No newline at end of file
diff --git a/qa/integration/specs/env_variables_condition_spec.rb b/qa/integration/specs/env_variables_condition_spec.rb
index 0a9ec2dd57f..a0d0ae320c8 100644
--- a/qa/integration/specs/env_variables_condition_spec.rb
+++ b/qa/integration/specs/env_variables_condition_spec.rb
@@ -60,11 +60,11 @@
   }
   let(:settings_dir) { Stud::Temporary.directory }
   let(:settings) {{"pipeline.id" => "${pipeline.id}"}}
-  let(:logstash_keystore_passowrd) { "keystore_pa9454w3rd" }
+  let(:logstash_keystore_password) { "keystore_pa9454w3rd" }
 
   it "expands variables and evaluate expression successfully" do
     test_env["TEST_ENV_PATH"] = test_path
-    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_passowrd
+    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_password
 
     @logstash.env_variables = test_env
     @logstash.start_background_with_config_settings(config_to_temp_file(@fixture.config), settings_dir)
@@ -76,7 +76,7 @@
   end
 
   it "expands variables in secret store" do
-    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_passowrd
+    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_password
     test_env['TAG1'] = "wrong_env" # secret store should take precedence
     logstash = @logstash.run_cmd(["bin/logstash", "-e",
                                   "input { generator { count => 1 } }
@@ -90,7 +90,7 @@
   end
 
   it "exits with error when env variable is undefined" do
-    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_passowrd
+    test_env["LOGSTASH_KEYSTORE_PASS"] = logstash_keystore_password
     logstash = @logstash.run_cmd(["bin/logstash","-e", "filter { if \"${NOT_EXIST}\" { mutate {add_tag => \"oh no\"} } }", "--path.settings", settings_dir], true, test_env)
     expect(logstash.stderr_and_stdout).to match(/Cannot evaluate `\$\{NOT_EXIST\}`/)
     expect(logstash.exit_code).to be(1)
