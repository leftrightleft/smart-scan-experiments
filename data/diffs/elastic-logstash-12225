diff --git a/docs/index.asciidoc b/docs/index.asciidoc
index 742a11f9a50..08f4b614fcb 100644
--- a/docs/index.asciidoc
+++ b/docs/index.asciidoc
@@ -102,10 +102,26 @@ include::static/upgrading.asciidoc[]
 :edit_url!:
 include::static/configuration.asciidoc[]
 
+
+// Securing Logstash
+
+:edit_url!:
+include::static/security/secure.asciidoc[]
+
+:edit_url!:
+include::static/security/users.asciidoc[]
+
 :edit_url!:
-include::static/security/logstash.asciidoc[]
+include::static/security/tls.asciidoc[]
+
+:edit_url!:
+include::static/security/pki-auth.asciidoc[]
+
+:edit_url!:
+include::static/security/api-keys.asciidoc[]
+
 
-// Advanced Logstash Configurion
+// Advanced Logstash Configuration
 
 :edit_url!:
 include::static/configuration-advanced.asciidoc[]
diff --git a/docs/static/security/api-keys.asciidoc b/docs/static/security/api-keys.asciidoc
index 596d31250ce..18100dcfa7e 100644
--- a/docs/static/security/api-keys.asciidoc
+++ b/docs/static/security/api-keys.asciidoc
@@ -1,6 +1,5 @@
-[float]
 [[ls-api-keys]]
-==== Grant access using API keys
+=== Grant access using API keys
 
 Instead of using usernames and passwords, you can use API keys to grant
 access to {es} resources. You can set API keys to expire at a certain time,
@@ -25,9 +24,8 @@ NOTE: For security reasons, we recommend using a unique API key per {ls} instanc
 You can create as many API keys per user as necessary.
 
 
-[float]
 [[ls-create-api-key]]
-===== Create an API key 
+==== Create an API key 
 
 You can create API keys using either the
 {ref}/security-api-create-api-key.html[Create API key API] or the
@@ -74,9 +72,8 @@ The return value should look similar to this:
 <2> Generated API key
 
 
-[float]
 [[ls-api-key-publish]]
-====== Create an API key for publishing
+===== Create an API key for publishing
 
 You're in luck! The example we used in the <<ls-create-api-key>> section creates
 an API key for publishing to {es} using the
@@ -112,9 +109,8 @@ output {
 <1> Format is `id:api_key` (as returned by
 {ref}/security-api-create-api-key.html[Create API key])
 
-[float]
 [[ls-api-key-input]]
-====== Create an API key for reading
+===== Create an API key for reading
 
 Creating an API key to use for reading data from {es} is similar to creating an
 API key for publishing described earlier. You can use the example in the
@@ -149,9 +145,8 @@ input {
 {ref}/security-api-create-api-key.html[Create API key])s
 
 
-[float]
 [[ls-api-key-filter]]
-====== Create an API key for filtering
+===== Create an API key for filtering
 
 Creating an API key to use for processing data from {es} is similar to creating
 an API key for publishing described earlier. You can use the example in the
@@ -186,9 +181,8 @@ filter {
 <1> Format is `id:api_key` (as returned by {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
 [[ls-api-key-monitor]]
-====== Create an API key for monitoring
+===== Create an API key for monitoring
 
 To create an API key to use for sending monitoring data to {es}, use the
 {ref}/security-api-create-api-key.html[Create API key API]. For example:
@@ -235,9 +229,8 @@ xpack.monitoring.elasticsearch.api_key: TiNAGG4BaaMdaH1tRfuU:KnR6yE41RrSowb0kQ0H
 <1> Format is `id:api_key` (as returned by {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
 [[ls-api-key-man]]
-====== Create an API key for central management
+===== Create an API key for central management
 
 To create an API key to use for central management, use the
 {ref}/security-api-create-api-key.html[Create API key API]. For example:
@@ -280,9 +273,8 @@ xpack.management.elasticsearch.api_key: TiNAGG4BaaMdaH1tRfuU:KnR6yE41RrSowb0kQ0H
 {ref}/security-api-create-api-key.html[Create API key])
 
 
-[float]
 [[learn-more-api-keys]]
-===== Learn more about API keys
+==== Learn more about API keys
 
 See the {es} API key documentation for more information:
 
diff --git a/docs/static/security/pki-auth.asciidoc b/docs/static/security/pki-auth.asciidoc
new file mode 100644
index 00000000000..b86d7fea8fd
--- /dev/null
+++ b/docs/static/security/pki-auth.asciidoc
@@ -0,0 +1,21 @@
+[[ls-http-auth-pki]]
+=== Configure PKI authentication
+
+The `elasticsearch` output supports PKI authentication. To use an X.509
+client-certificate for authentication, configure the `keystore` and
+`keystore_password` options in your Logstash `.conf` file:
+
+[source,js]
+--------------------------------------------------
+output {
+  elasticsearch {
+    ...
+    keystore => /path/to/keystore.jks
+    keystore_password => realpassword
+    truststore =>  /path/to/truststore.jks <1>
+    truststore_password =>  realpassword
+  }
+}
+--------------------------------------------------
+<1> If you use a separate truststore, the truststore path and password are
+also required.
diff --git a/docs/static/security/secure.asciidoc b/docs/static/security/secure.asciidoc
new file mode 100644
index 00000000000..99d4048cc98
--- /dev/null
+++ b/docs/static/security/secure.asciidoc
@@ -0,0 +1,26 @@
+[role="xpack"]
+[[ls-security]]
+== Secure Logstash
+[subs="attributes"]
+++++
+<titleabbrev>Secure {ls}</titleabbrev>
+++++
+
+////
+// ToDo: This section is a collection of random security statements. Needs rework and rearchitecture.
+////
+
+The Logstash {es} {logstash-ref}/plugins-outputs-elasticsearch.html[output],
+{logstash-ref}/plugins-inputs-elasticsearch.html[input], and
+{logstash-ref}/plugins-filters-elasticsearch.html[filter] plugins,
+{logstash-ref}/monitoring-logstash.html[monitoring], and central management
+support authentication and encryption over HTTP.
+
+To use Logstash with a secured cluster, you need to configure authentication
+credentials for Logstash. Logstash throws an exception and the processing
+pipeline is halted if authentication fails.
+If encryption is enabled on the cluster, you also need to enable TLS/SSL in the
+Logstash configuration.
+
+In addition to configuring authentication credentials for Logstash, you need
+to grant authorized users permission to access the Logstash indices.
diff --git a/docs/static/security/tls.asciidoc b/docs/static/security/tls.asciidoc
new file mode 100644
index 00000000000..97189b85983
--- /dev/null
+++ b/docs/static/security/tls.asciidoc
@@ -0,0 +1,18 @@
+[[ls-http-ssl]]
+=== Configure TLS Encryption
+
+If TLS encryption is enabled on the {es} cluster, you need to
+configure the `ssl` and `cacert` options in your Logstash `.conf` file:
+
+[source,js]
+--------------------------------------------------
+output {
+  elasticsearch {
+    ...
+    ssl => true
+    cacert => '/path/to/cert.pem' <1>
+  }
+}
+--------------------------------------------------
+<1> The path to the local `.pem` file that contains the Certificate
+    Authority's certificate.
diff --git a/docs/static/security/logstash.asciidoc b/docs/static/security/users.asciidoc
similarity index 59%
rename from docs/static/security/logstash.asciidoc
rename to docs/static/security/users.asciidoc
index 2638cd4780e..40031fa84c7 100644
--- a/docs/static/security/logstash.asciidoc
+++ b/docs/static/security/users.asciidoc
@@ -1,47 +1,76 @@
 [role="xpack"]
-[[ls-security]]
-=== Configuring Security in Logstash
+[[ls-grant-access]]
+=== Grant users access to secured resources
 [subs="attributes"]
-++++
-<titleabbrev>Configuring Security</titleabbrev>
-++++
 
-The Logstash {es} plugins ({logstash-ref}/plugins-outputs-elasticsearch.html[output],
-{logstash-ref}/plugins-inputs-elasticsearch.html[input],
-{logstash-ref}/plugins-filters-elasticsearch.html[filter]
-and {logstash-ref}/monitoring-logstash.html[monitoring])
-support authentication and encryption over HTTP.
+You can use role-based access control to grant users access to secured
+resources. The roles that you set up depend on your organization's security
+requirements and the minimum privileges required to use specific features.
 
-To use Logstash with a secured cluster, you need to configure authentication
-credentials for Logstash. Logstash throws an exception and the processing
-pipeline is halted if authentication fails.
+Typically you need the create the following roles:
 
-If encryption is enabled on the cluster, you also need to enable TLS/SSL in the
-Logstash configuration.
+* <<create-writer-role,writer role>> for publishing events
+* <<create-reader-role,reader role>> so that users can access the indices {ls} creates
 
-If you want to monitor your Logstash instance with {monitoring}, and store the
-monitoring data in a secured {es} cluster, you must configure Logstash
-with a username and password for a user with the appropriate permissions.
+{es-security-features} provide {ref}/built-in-roles.html[built-in roles] that
+grant a subset of the privileges needed by {ls} users. 
+For example, `logstash_admin` is a built-in role that provides access to `.logstash-*`
+indices for managing configurations.
+
+When possible, use the built-in roles to minimize the affect of future changes
+on your security strategy.
+
+NOTE: You can assign roles and privileges to **API keys** as an alternative to
+using usernames and passwords. See <<ls-api-keys>> for more information on that
+alternate approach to security.
 
-In addition to configuring authentication credentials for Logstash, you need
-to grant authorized users permission to access the Logstash indices.
 
-[float]
 [[ls-http-auth-basic]]
-==== Configuring Logstash to use Basic Authentication
+==== Configure Logstash to use basic authentication
+[subs="attributes"]
 
-Logstash needs to be able to manage index templates, create indices,
+Logstash must be able to manage index templates, create indices,
 and write and delete documents in the indices it creates.
 
-To set up authentication credentials for Logstash:
+To set up authentication credentials for Logstash, you need to:
 
-. Use the the **Management > Roles** UI in {kib} or the `role` API to create a
-`logstash_writer` role. For *cluster* privileges, add `manage_index_templates` and `monitor`. 
-For *indices* privileges, add `write`, `create`, `delete`, and `create_index`.
+. Create a <<create-writer-role,writer role>>, and grant it cluster and indices
+privileges.
 +
-If you plan to use {ref}/getting-started-index-lifecycle-management.html[index lifecycle
-management], also add `manage_ilm` for cluster and `manage` and `manage_ilm` for indices.
+Example: `logstash_writer`
+. Create an <<create-internal-user,internal user>>, and assign the
+`logstash_writer` role to it.
 +
+Example: `logstash_internal`
+
+. Configure {ls} to <<auth-int-user,authenticate using the internal user>>.
+
+
+[[create-writer-role]]
+===== Create a writer role
+
+Use the **Management > Roles** UI in {kib} or the `role` API to create a
+*writer* role (`logstash_writer`, for example). 
+Add these *cluster* privileges:
+
+* `manage_index_templates`
+* `monitor` (to allow retrieving cluster details, such as version)
+* `manage_ilm` (for use with {ref}/getting-started-index-lifecycle-management.html[index lifecycle
+management])
+
+Add these *indices* privileges: 
+
+* `write`
+* `create`
+* `delete`
+* `create_index` (to allow creating daily indices on clusters that do not support ILM. 
+Not needed when using ILM.)
+* `manage`
+* `manage_ilm` (for use with {ref}/getting-started-index-lifecycle-management.html[index lifecycle
+management])
+
+Omit any privileges that aren’t relevant in your environment.
+
 [source, sh]
 ---------------------------------------------------------------
 POST _security/role/logstash_writer
@@ -65,10 +94,13 @@ management] is enabled, the role requires the `manage` and `manage_ilm`
 privileges to load index lifecycle policies, create rollover aliases, and create
 and manage rollover indices.
 
-. Create a `logstash_internal` user and assign it the `logstash_writer` role.
+[[create-internal-user]]
+===== Create an internal user
+
+Create a `logstash_internal` user and assign it the `logstash_writer` role.
 You can create users from the **Management > Users** UI in {kib} or through
 the `user` API:
-+
+
 [source, sh]
 ---------------------------------------------------------------
 POST _security/user/logstash_internal
@@ -79,10 +111,13 @@ POST _security/user/logstash_internal
 }
 ---------------------------------------------------------------
 
-. Configure Logstash to authenticate as the `logstash_internal` user you just
-created. You configure credentials separately for each of the {es} plugins in
+[[auth-int-user]]
+===== Configure {ls} to authenticate as the internal user
+
+Configure Logstash to authenticate as the `logstash_internal` user you just
+created. Configure credentials separately for each of the {es} plugins in
 your Logstash `.conf` file. For example:
-+
+
 [source,js]
 --------------------------------------------------
 input {
@@ -108,17 +143,34 @@ output {
 }
 --------------------------------------------------
 
-[float]
+
 [[ls-user-access]]
-==== Granting Users Access to the Logstash Indices
+==== Grant users access to the {ls} indices
 
-To access the indices Logstash creates, users need the `read` and
-`view_index_metadata` privileges:
+Users must be able to access the indices {ls} creates.
+To grant access to the [ls] indices:
 
-. Create a `logstash_reader` role that has the `read` and `view_index_metadata`
-privileges  for the Logstash indices. You can create roles from the
-**Management > Roles** UI in {kib} or through the `role` API:
+. Create a <<create-reader-role,reader role>>, and grant it appropriate privileges. 
 +
+Example: `logstash_reader`
+
+. <<assign-reader-role,Assign reader role>> to users.
+
+
+[[create-reader-role]]
+==== Create a reader role
+
+Create a `logstash_reader` role that has the `read` and `view_index_metadata`
+privileges  for the Logstash indices. You can create roles from the
+**Management > Roles** UI in {kib} or through the `role` API.
+
+Add these index privileges to allow users to access the indices that {ls}
+creates:
+
+* `read` 
+* `view_index_metadata` 
+
+
 [source, sh]
 ---------------------------------------------------------------
 POST _security/role/logstash_reader
@@ -134,12 +186,19 @@ POST _security/role/logstash_reader
 <1> If you use a custom Logstash index pattern, specify that pattern
 instead of the default `logstash-*` pattern.
 
-. Assign your Logstash users the `logstash_reader` role. If the Logstash user
+
+
+
+
+[[assign-reader-role]]
+==== Assign reader role to users
+
+Assign your Logstash users the `logstash_reader` role. If the Logstash user
 will be using
 {logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
 also assign the `logstash_admin` role. You can create and manage users from the
 **Management > Users** UI in {kib} or through the `user` API:
-+
+
 [source, sh]
 ---------------------------------------------------------------
 POST _security/user/logstash_user
@@ -152,53 +211,10 @@ POST _security/user/logstash_user
 <1> `logstash_admin` is a built-in role that provides access to `.logstash-*`
 indices for managing configurations.
 
-[float]
-[[ls-http-auth-pki]]
-==== Configuring the {es} Output to use PKI Authentication
-
-The `elasticsearch` output supports PKI authentication. To use an X.509
-client-certificate for authentication, you configure the `keystore` and
-`keystore_password` options in your Logstash `.conf` file:
-
-[source,js]
---------------------------------------------------
-output {
-  elasticsearch {
-    ...
-    keystore => /path/to/keystore.jks
-    keystore_password => realpassword
-    truststore =>  /path/to/truststore.jks <1>
-    truststore_password =>  realpassword
-  }
-}
---------------------------------------------------
-<1> If you use a separate truststore, the truststore path and password are
-also required.
-
-[float]
-[[ls-http-ssl]]
-==== Configuring Logstash to use TLS Encryption
 
-If TLS encryption is enabled on the {es} cluster, you need to
-configure the `ssl` and `cacert` options in your Logstash `.conf` file:
-
-[source,js]
---------------------------------------------------
-output {
-  elasticsearch {
-    ...
-    ssl => true
-    cacert => '/path/to/cert.pem' <1>
-  }
-}
---------------------------------------------------
-<1> The path to the local `.pem` file that contains the Certificate
-    Authority's certificate.
-
-[float]
 [role="xpack"]
 [[ls-monitoring-user]]
-==== Configuring Credentials for Logstash Monitoring
+==== Configure Credentials for Logstash Monitoring
 
 If you plan to ship Logstash {logstash-ref}/configuring-logstash.html[monitoring]
 data to a secure cluster, you need to configure the username and password that
@@ -207,7 +223,7 @@ Logstash uses to authenticate for shipping monitoring data.
 The {security-features} come preconfigured with a
 {ref}/built-in-users.html[`logstash_system` built-in user]
 for this purpose. This user has the minimum permissions necessary for the
-monitoring function, and _should not_ be used for any other purpose - it is
+monitoring function, and _should not_ be used for any other purpose. It is
 specifically _not intended_ for use within a Logstash pipeline.
 
 By default, the `logstash_system` user does not have a password. The user will
@@ -232,10 +248,10 @@ PUT _security/user/logstash_system/_enable
 ---------------------------------------------------------------------
 // CONSOLE
 
-[float]
+
 [role="xpack"]
 [[ls-pipeline-management-user]]
-==== Configuring Credentials for Centralized Pipeline Management
+==== Configure Credentials for Centralized Pipeline Management
 
 If you plan to use Logstash
 {logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
@@ -251,6 +267,3 @@ xpack.management.elasticsearch.password: t0p.s3cr3t
 ----------------------------------------------------------
 <1> The user you specify here must have the built-in `logstash_admin` role as
 well as the `logstash_writer` role that you created earlier.
-
-include::api-keys.asciidoc[]
-
