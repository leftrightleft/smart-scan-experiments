diff --git a/lib/logstash/codecs/base.rb b/lib/logstash/codecs/base.rb
index e8384e11c2e..8d381840186 100644
--- a/lib/logstash/codecs/base.rb
+++ b/lib/logstash/codecs/base.rb
@@ -43,6 +43,6 @@ def flush(&block)
 
   public
   def clone
-    return self.class.new(@params)
+    return self.class.new(params)
   end
 end; end # class LogStash::Codecs::Base
diff --git a/lib/logstash/config/config_ast.rb b/lib/logstash/config/config_ast.rb
index f0bbd77eb31..601ab9b9bc8 100644
--- a/lib/logstash/config/config_ast.rb
+++ b/lib/logstash/config/config_ast.rb
@@ -175,7 +175,7 @@ def compile
             "end",
           ].map { |l| "#{l}\n" }.join("")
         when "output"
-          return "#{variable_name}.receive(event)\n"
+          return "#{variable_name}.handle(event)\n"
         when "codec"
           settings = attributes.recursive_select(Attribute).collect(&:compile).reject(&:empty?)
           attributes_code = "LogStash::Util.hash_merge_many(#{settings.map { |c| "{ #{c} }" }.join(", ")})"
diff --git a/lib/logstash/config/mixin.rb b/lib/logstash/config/mixin.rb
index e6e0e59be29..479ec5ca57d 100644
--- a/lib/logstash/config/mixin.rb
+++ b/lib/logstash/config/mixin.rb
@@ -29,6 +29,7 @@
 #
 module LogStash::Config::Mixin
   attr_accessor :config
+  attr_accessor :original_params
 
   CONFIGSORT = {
     Symbol => 0,
@@ -46,6 +47,11 @@ def config_init(params)
     # Validation will modify the values inside params if necessary.
     # For example: converting a string to a number, etc.
     
+    # Keep a copy of the original config params so that we can later
+    # differentiate between explicit configuration and implicit (default)
+    # configuration.
+    @original_params = params.clone
+    
     # store the plugin type, turns LogStash::Inputs::Base into 'input'
     @plugin_type = self.class.ancestors.find { |a| a.name =~ /::Base$/ }.config_name
 
diff --git a/lib/logstash/outputs/base.rb b/lib/logstash/outputs/base.rb
index 2a5159624b6..e0e8690c558 100644
--- a/lib/logstash/outputs/base.rb
+++ b/lib/logstash/outputs/base.rb
@@ -28,6 +28,10 @@ class LogStash::Outputs::Base < LogStash::Plugin
   # The codec used for output data
   config :codec, :validate => :codec, :default => "plain"
 
+  # The number of workers to use for this output.
+  # Note that this setting may not be useful for all outputs.
+  config :workers, :validate => :number, :default => 1
+
   public
   def initialize(params={})
     super
@@ -45,15 +49,37 @@ def receive(event)
   end # def receive
 
   public
-  def handle(event)
-    if event == LogStash::SHUTDOWN
-      @codec.teardown if @codec.is_a? LogStash::Codecs::Base
-      finished
-      return
+  def worker_setup
+    #return unless @workers > 1
+
+    @worker_queue = SizedQueue.new(20)
+
+    @worker_threads = @workers.times do |i|
+      Thread.new(original_params, @worker_queue) do |params, queue|
+        LogStash::Util::set_thread_name(">#{self.class.config_name}.#{i}")
+        worker_params = params.merge("workers" => 1, "codec" => @codec.clone)
+        worker_plugin = self.class.new(worker_params)
+        worker_plugin.register
+        while true
+          event = queue.pop
+          worker_plugin.receive(event)
+        end
+      end
     end
+  end
 
-    receive(event)
+  public
+  def handle(event)
+    #if @worker_queue
+      handle_worker(event)
+    #else
+      #receive(event)
+    #end
   end # def handle
+  
+  def handle_worker(event)
+    @worker_queue.push(event)
+  end
 
   private
   def output?(event)
diff --git a/lib/logstash/pipeline.rb b/lib/logstash/pipeline.rb
index 75c8a3801e6..825720ffc7c 100644
--- a/lib/logstash/pipeline.rb
+++ b/lib/logstash/pipeline.rb
@@ -206,6 +206,7 @@ def filterworker
   def outputworker
     LogStash::Util::set_thread_name(">output")
     @outputs.each(&:register)
+    @outputs.each(&:worker_setup)
     while true
       event = @filter_to_output.pop
       break if event == LogStash::ShutdownSignal
