diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 77cccd39ff6..bf5db1999e3 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -45,6 +45,12 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
     # Generate / load the persistent uuid
     id
 
+    # Set the global FieldReference parsing mode
+    if @settings.set?('config.field_reference.parser')
+      # TODO: i18n
+      logger.warn("deprecated setting `config.field_reference.parser` set; field reference parsing is strict by default")
+    end
+
     # This is for backward compatibility in the tests
     if source_loader.nil?
       @source_loader = LogStash::Config::SourceLoader.new
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index d9f89d0202b..5af45e828d1 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -33,6 +33,7 @@ module Environment
            Setting::Boolean.new("config.reload.automatic", false),
            Setting::TimeValue.new("config.reload.interval", "3s"), # in seconds
            Setting::Boolean.new("config.support_escapes", false),
+            Setting::String.new("config.field_reference.parser", "STRICT", true, %w(STRICT)),
            Setting::Boolean.new("metric.collect", true),
             Setting::String.new("pipeline.id", "main"),
            Setting::Boolean.new("pipeline.system", false),
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index db649c9c397..07609a60761 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -68,6 +68,11 @@ class LogStash::Runner < Clamp::StrictCommand
     :default => LogStash::SETTINGS.get_default("config.string"),
     :attribute_name => "config.string"
 
+  option ["--field-reference-parser"], "MODE",
+         I18n.t("logstash.runner.flag.field-reference-parser"),
+         :attribute_name => "config.field_reference.parser",
+         :default => LogStash::SETTINGS.get_default("config.field_reference.parser")
+
   # Module settings
   option ["--modules"], "MODULES",
     I18n.t("logstash.runner.flag.modules"),
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index a037fef9fef..f5da5c33992 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -228,6 +228,24 @@ en:
           "%{default_output}"
           If you wish to use both defaults, please use
           the empty string for the '-e' flag.
+        field-reference-parser: |+
+          (DEPRECATED) This option is no longer
+          configurable.
+
+          Use the given MODE when parsing field
+          references.
+
+          The field reference parser is used to expand
+          field references in your pipeline configs,
+          and has become more strict to better handle
+          ambiguous- and illegal-syntax inputs.
+
+          The only available MODE is:
+           - `STRICT`: parse in a strict manner; when
+             given ambiguous- or illegal-syntax input,
+             raises a runtime exception that should
+             be handled by the calling plugin.
+
         modules: |+
           Load Logstash modules.
           Modules can be defined using multiple instances
diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index cd1f98fe894..0e1bcf81a9e 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -76,6 +76,17 @@
         expect(e.get("[foo][-1]")).to eq(list[-1])
       end
     end
+
+    context 'with illegal-syntax field reference' do
+      # NOTE: in true-legacy-mode FieldReference parsing, the input `[` caused Logstash
+      # to crash entirely with a Java ArrayIndexOutOfBounds exception; this spec ensures that
+      # we instead raise a RuntimeException that can be handled normally within the
+      # Ruby runtime.
+      it 'raises a RuntimeError' do
+        e = LogStash::Event.new
+        expect { e.get('[') }.to raise_exception(::RuntimeError)
+      end
+    end
   end
 
   context "#set" do
@@ -155,6 +166,17 @@
       # expect(s2.encoding.name).to eq("UTF-8")
       # expect(s2.valid_encoding?).to eq(true)
     end
+
+    context 'with illegal-syntax field reference' do
+      # NOTE: in true-legacy-mode FieldReference parsing, the input `[` caused Logstash
+      # to crash entirely with a Java ArrayIndexOutOfBounds exception; this spec ensures that
+      # we instead raise a RuntimeException that can be handled normally within the
+      # Ruby runtime.
+      it 'raises a RuntimeError' do
+        e = LogStash::Event.new
+        expect { e.set('[', 'value') }.to raise_exception(::RuntimeError)
+      end
+    end
   end
 
   context "timestamp" do
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index 041500a6490..bb72f8ef1ca 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -3,11 +3,22 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
+
 import java.util.concurrent.ConcurrentHashMap;
 import org.jruby.RubyString;
 
 public final class FieldReference {
+    /**
+     * A custom unchecked {@link RuntimeException} that can be thrown by parsing methods when
+     * when they encounter an input with illegal syntax.
+     */
+    public static class IllegalSyntaxException extends RuntimeException {
+        IllegalSyntaxException(String message) {
+            super(message);
+        }
+    }
 
     /**
      * This type indicates that the referenced that is the metadata of an {@link Event} found in
@@ -32,6 +43,11 @@ public final class FieldReference {
      */
     private static final Map<FieldReference, FieldReference> DEDUP = new HashMap<>(64);
 
+    /**
+     * The tokenizer that will be used when parsing field references
+     */
+    private static final StrictTokenizer TOKENIZER = new StrictTokenizer();
+
     /**
      * Unique {@link FieldReference} pointing at the timestamp field in a {@link Event}.
      */
@@ -164,25 +180,8 @@ private static FieldReference parseToCache(final String reference) {
     }
 
     private static FieldReference parse(final CharSequence reference) {
-        final ArrayList<String> path = new ArrayList<>();
-        final int length = reference.length();
-        int splitPoint = 0;
-        for (int i = 0; i < length; ++i) {
-            final char seen = reference.charAt(i);
-            if (seen == '[' || seen == ']') {
-                if (i == 0) {
-                    splitPoint = 1;
-                }
-                if (i > splitPoint) {
-                    path.add(reference.subSequence(splitPoint, i).toString().intern());
-                }
-                splitPoint = i + 1;
-            }
-        }
-        if (splitPoint < length || length == 0) {
-            path.add(reference.subSequence(splitPoint, length).toString().intern());
-        }
-        path.trimToSize();
+        final List<String> path = TOKENIZER.tokenize(reference);
+
         final String key = path.remove(path.size() - 1).intern();
         final boolean empty = path.isEmpty();
         if (empty && key.equals(Event.METADATA)) {
@@ -195,4 +194,96 @@ private static FieldReference parse(final CharSequence reference) {
             return new FieldReference(path.toArray(EMPTY_STRING_ARRAY), key, DATA_CHILD);
         }
     }
+
+    /**
+     * The {@link StrictTokenizer} parses field-references in a strict manner; when illegal syntax is encountered,
+     * the input is considered ambiguous and the reference is not expanded.
+     **/
+    private static class StrictTokenizer {
+
+        public List<String> tokenize(CharSequence reference) {
+            ArrayList<String> path = new ArrayList<>();
+            final int length = reference.length();
+
+            boolean potentiallyAmbiguousSyntaxDetected = false;
+            boolean seenBracket = false;
+            int depth = 0;
+            int splitPoint = 0;
+            char current = 0;
+            char previous = 0;
+            scan: for (int i=0 ; i < length; i++) {
+                previous = current;
+                current = reference.charAt(i);
+                switch (current) {
+                    case '[':
+                        seenBracket = true;
+                        if (splitPoint != i) {
+                            // if the current split point isn't the previous character, we have ambiguous input,
+                            // such as a mix of square-bracket and top-level unbracketed chunks, or an embedded
+                            // field reference that doesn't wholly occupy an outer fragment, and cannot
+                            // reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        depth++;
+                        splitPoint = i + 1;
+                        continue scan;
+
+                    case ']':
+                        seenBracket = true;
+                        if (depth <= 0) {
+                            // if we get to a close-bracket without having previously hit an open-bracket,
+                            // we have an illegal field reference and cannot reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+                        if (splitPoint == i && previous != ']') {
+                            // if we have a zero-length fragment and are not closing an embedded fieldreference,
+                            // we have an illegal field reference and cannot possibly recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        if (splitPoint < i) {
+                            // if we have something to add, add it.
+                            path.add(reference.subSequence(splitPoint, i).toString().intern());
+                        }
+
+                        depth--;
+                        splitPoint = i + 1;
+                        continue scan;
+
+                    default:
+                        if (seenBracket && previous == ']') {
+                            // if we have seen a bracket and encounter one or more characters that are _not_ enclosed
+                            // in brackets, we have illegal syntax and cannot reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        continue scan;
+                }
+            }
+
+            if (!seenBracket) {
+                // if we saw no brackets, this is a top-level reference that can be emitted as-is without
+                // further processing
+                path.add(reference.toString());
+                return path;
+            } else if (depth > 0) {
+                // when we hit the end-of-input while still in an open bracket, we have an invalid field reference
+                potentiallyAmbiguousSyntaxDetected = true;
+            }
+
+            // if we have encountered ambiguous syntax and are not in strict-mode,
+            // fall back to legacy parser.
+            if (potentiallyAmbiguousSyntaxDetected) {
+                throw new FieldReference.IllegalSyntaxException(String.format("Invalid FieldReference: `%s`", reference.toString()));
+            }
+
+            path.trimToSize();
+            return path;
+        }
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index debb8303759..5e81cefc72c 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -82,14 +82,14 @@ public IRubyObject ruby_get_field(ThreadContext context, RubyString reference)
         {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.getUnconvertedField(FieldReference.from(reference))
+                this.event.getUnconvertedField(extractFieldReference(reference))
             );
         }
 
         @JRubyMethod(name = "set", required = 2)
         public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, IRubyObject value)
         {
-            final FieldReference r = FieldReference.from(reference);
+            final FieldReference r = extractFieldReference(reference);
             if (r.equals(FieldReference.TIMESTAMP_REFERENCE)) {
                 if (!(value instanceof JrubyTimestampExtLibrary.RubyTimestamp)) {
                     throw context.runtime.newTypeError("wrong argument type " + value.getMetaClass() + " (expected LogStash::Timestamp)");
@@ -124,7 +124,7 @@ public IRubyObject ruby_cancelled(ThreadContext context)
         @JRubyMethod(name = "include?", required = 1)
         public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
             return RubyBoolean.newBoolean(
-                context.runtime, this.event.includes(FieldReference.from(reference))
+                context.runtime, this.event.includes(extractFieldReference(reference))
             );
         }
 
@@ -132,7 +132,7 @@ public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
         public IRubyObject ruby_remove(ThreadContext context, RubyString reference) {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.remove(FieldReference.from(reference))
+                this.event.remove(extractFieldReference(reference))
             );
         }
 
@@ -304,6 +304,23 @@ private void initializeFallback(final ThreadContext context, final IRubyObject d
             }
         }
 
+        /**
+         * Shared logic to wrap {@link FieldReference.IllegalSyntaxException}s that are raised by
+         * {@link FieldReference#from(RubyString)} when encountering illegal syntax in a ruby-exception
+         * that can be easily handled within the ruby plugins
+         *
+         * @param reference a {@link RubyString} representing the path to a field
+         * @return the corresponding {@link FieldReference} (see: {@link FieldReference#from(RubyString)})
+         */
+        private static FieldReference extractFieldReference(final RubyString reference) {
+            try {
+                return FieldReference.from(reference);
+            } catch (FieldReference.IllegalSyntaxException ise) {
+                throw RubyUtil.RUBY.newRuntimeError(ise.getMessage());
+            }
+        }
+
+
         private void setEvent(Event event) {
             this.event = event;
         }
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index 63fd16f6763..c96c2742fed 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -3,6 +3,7 @@
 import java.lang.reflect.Field;
 import java.util.Map;
 import org.hamcrest.CoreMatchers;
+import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertArrayEquals;
@@ -13,32 +14,22 @@
 
 public final class FieldReferenceTest {
 
-    @Test
-    public void testParseSingleBareField() throws Exception {
-        FieldReference f = FieldReference.from("foo");
-        assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
-    }
-
-    @Test
-    public void testParseSingleFieldPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo]");
-        assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
-    }
-
-    @Test
-    public void testParse2FieldsPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo][bar]");
-        assertArrayEquals(f.getPath(), new String[]{"foo"});
-        assertEquals(f.getKey(), "bar");
+    @Before
+    public void clearParsingCache() throws Exception {
+        final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
+        cacheField.setAccessible(true);
+        final Map<CharSequence, FieldReference> cache =
+                (Map<CharSequence, FieldReference>) cacheField.get(null);
+        cache.clear();
     }
 
-    @Test
-    public void testParse3FieldsPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo][bar]]baz]");
-        assertArrayEquals(f.getPath(), new String[]{"foo", "bar"});
-        assertEquals(f.getKey(), "baz");
+    @Before
+    public void clearDedupCache() throws Exception  {
+        final Field cacheField = FieldReference.class.getDeclaredField("DEDUP");
+        cacheField.setAccessible(true);
+        final Map<CharSequence, FieldReference> cache =
+                (Map<CharSequence, FieldReference>) cacheField.get(null);
+        cache.clear();
     }
 
     @Test
@@ -51,7 +42,7 @@ public void testParseEmptyString() {
         final FieldReference emptyReference = FieldReference.from("");
         assertNotNull(emptyReference);
         assertEquals(
-            emptyReference, FieldReference.from(RubyUtil.RUBY.newString(""))
+                emptyReference, FieldReference.from(RubyUtil.RUBY.newString(""))
         );
     }
 
@@ -60,11 +51,113 @@ public void testCacheUpperBound() throws NoSuchFieldException, IllegalAccessExce
         final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
         cacheField.setAccessible(true);
         final Map<CharSequence, FieldReference> cache =
-            (Map<CharSequence, FieldReference>) cacheField.get(null);
+                (Map<CharSequence, FieldReference>) cacheField.get(null);
         final int initial = cache.size();
         for (int i = 0; i < 10_001 - initial; ++i) {
             FieldReference.from(String.format("[array][%d]", i));
         }
         assertThat(cache.size(), CoreMatchers.is(10_000));
     }
+
+    @Test
+    public void testParseSingleBareField() throws Exception {
+        FieldReference f = FieldReference.from("foo");
+        assertEquals(0, f.getPath().length);
+        assertEquals("foo", f.getKey());
+    }
+
+    @Test
+    public void testParseSingleFieldPath() throws Exception {
+        FieldReference f = FieldReference.from("[foo]");
+        assertEquals(0, f.getPath().length);
+        assertEquals("foo", f.getKey());
+    }
+
+    @Test
+    public void testParse2FieldsPath() throws Exception {
+        FieldReference f = FieldReference.from("[foo][bar]");
+        assertArrayEquals(new String[]{"foo"}, f.getPath());
+        assertEquals("bar", f.getKey());
+    }
+
+    @Test
+    public void testParse3FieldsPath() throws Exception {
+        FieldReference f = FieldReference.from("[foo][bar][baz]");
+        assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+        assertEquals("baz", f.getKey());
+    }
+
+    @Test
+    public void testEmbeddedSingleReference() throws Exception {
+        FieldReference f = FieldReference.from("[[foo]][bar]");
+        assertArrayEquals(new String[]{"foo"}, f.getPath());
+        assertEquals("bar", f.getKey());
+    }
+
+    @Test
+    public void testEmbeddedDeepReference() throws Exception {
+        FieldReference f = FieldReference.from("[[foo][bar]][baz]");
+        assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+        assertEquals("baz", f.getKey());
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidEmbeddedDeepReference() throws Exception {
+        FieldReference f = FieldReference.from("[[foo][bar]nope][baz]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidEmbeddedDeepReference2() throws Exception {
+        FieldReference f = FieldReference.from("[nope[foo][bar]][baz]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidNoCloseBracket() throws Exception {
+        FieldReference.from("[foo][bar][baz");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidNoInitialOpenBracket() throws Exception {
+        FieldReference.from("foo[bar][baz]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidMissingMiddleBracket() throws Exception {
+        FieldReference.from("[foo]bar[baz]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidOnlyOpenBracket() throws Exception {
+        FieldReference.from("[");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidOnlyCloseBracket() throws Exception {
+        FieldReference.from("]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidLotsOfOpenBrackets() throws Exception {
+        FieldReference.from("[[[[[[[[[[[]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseInvalidDoubleCloseBrackets() throws Exception {
+        FieldReference.from("[foo]][bar]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseNestingSquareBrackets() throws Exception {
+        FieldReference.from("[this[is]terrible]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseChainedNestingSquareBrackets() throws Exception {
+        FieldReference.from("[this[is]terrible][and][it[should-not[work]]]");
+    }
+
+    @Test(expected=FieldReference.IllegalSyntaxException.class)
+    public void testParseLiteralSquareBrackets() throws Exception {
+        FieldReference.from("this[index]");
+    }
 }
