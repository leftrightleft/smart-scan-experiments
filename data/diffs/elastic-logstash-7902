diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index fb0569ae67e..c71fd20affe 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -44,12 +44,11 @@ def multi_filter(events)
       clock.stop
 
       # There is no guarantee in the context of filter
-      # that EVENTS_INT == EVENTS_OUT, see the aggregates and
+      # that EVENTS_IN == EVENTS_OUT, see the aggregates and
       # the split filter
       c = new_events.count { |event| !event.cancelled? }
       @metric_events.increment(:out, c) if c > 0
-
-      return new_events
+      new_events
     end
 
     private
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 04168152581..bee50faaed2 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicLong;
 import org.jruby.Ruby;
 import org.jruby.RubyArray;
 import org.jruby.RubyBoolean;
@@ -65,9 +66,21 @@ public void load(Ruby runtime, boolean wrap) throws IOException {
 
     @JRubyClass(name = "Event")
     public static final class RubyEvent extends RubyObject {
+
+        /**
+         * Sequence number generator, for generating {@link RubyEvent#hash}.
+         */
+        private static final AtomicLong SEQUENCE_GENERATOR = new AtomicLong(1L);
+
+        /**
+         * Hashcode of this instance. Used to avoid the more expensive {@link RubyObject#hashCode()}
+         * since we only care about reference equality for this class anyway.
+         */
+        private final int hash = nextHash();
+
         private Event event;
 
-        private RubyEvent(Ruby runtime, RubyClass klass) {
+        private RubyEvent(final Ruby runtime, final RubyClass klass) {
             super(runtime, klass);
         }
 
@@ -286,6 +299,16 @@ public IRubyObject ruby_set_timestamp(ThreadContext context, IRubyObject value)
             return value;
         }
 
+        @Override
+        public int hashCode() {
+            return hash;
+        }
+
+        @Override
+        public boolean equals(final Object that) {
+            return this == that;
+        }
+
         /**
          * Cold path for the Ruby constructor
          * {@link JrubyEventExtLibrary.RubyEvent#ruby_initialize(ThreadContext, IRubyObject[])} for
@@ -309,5 +332,14 @@ private void initializeFallback(final ThreadContext context, final IRubyObject d
         private void setEvent(Event event) {
             this.event = event;
         }
+
+        /**
+         * Generates a fixed hashcode.
+         * @return HashCode value
+         */
+        private static int nextHash() {
+            final long sequence = SEQUENCE_GENERATOR.incrementAndGet();
+            return (int) (sequence ^ sequence >>> 32) + 31;
+        }
     }
 }
