diff --git a/config/logstash.yml b/config/logstash.yml
index 9fab4b9cb2e..f096700e401 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -150,6 +150,12 @@
 # api.ssl.keystore.path: /path/to/keystore.jks
 # api.ssl.keystore.password: "y0uRp4$$w0rD"
 #
+# The availability of SSL/TLS protocols depends on the JVM version. Certain protocols are
+# disabled by default and need to be enabled manually by changing `jdk.tls.disabledAlgorithms`
+# in the $JDK_HOME/conf/security/java.security configuration file.
+#
+# api.ssl.supported_protocols: [TLSv1.2,TLSv1.3]
+#
 # The HTTP API can be configured to require authentication. Acceptable values are
 #  - `none`:  no auth is required (default)
 #  - `basic`: clients must authenticate with HTTP Basic auth, as configured
diff --git a/docs/static/settings-file.asciidoc b/docs/static/settings-file.asciidoc
index af3c21a91b8..e9a5c8e1098 100644
--- a/docs/static/settings-file.asciidoc
+++ b/docs/static/settings-file.asciidoc
@@ -282,6 +282,16 @@ Current options are:
   This setting is ignored unless `api.ssl.enabled` is set to `true`.
 | _N/A_
 
+| `api.ssl.supported_protocols`
+a| List of allowed SSL/TLS versions to use when establishing a secure connection. The availability of protocols depends on the JVM version. Certain protocols are disabled by default and need to be enabled manually by changing `jdk.tls.disabledAlgorithms` in the *$JDK_HOME/conf/security/java.security* configuration file.
+Possible values are:
+
+* `TLSv1`
+* `TLSv1.1`
+* `TLSv1.2`
+* `TLSv1.3`
+| _N/A_
+
 | `api.auth.type`
 | Set to `basic` to require HTTP Basic auth on the API using the credentials supplied with `api.auth.basic.username` and `api.auth.basic.password`.
 | `none`
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 8e305ebb0a4..76c42e75d5b 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -88,6 +88,7 @@ module Environment
            Setting::Boolean.new("api.ssl.enabled", false),
   Setting::ExistingFilePath.new("api.ssl.keystore.path", nil, false).nullable,
           Setting::Password.new("api.ssl.keystore.password", nil, false).nullable,
+          Setting::StringArray.new("api.ssl.supported_protocols", nil, true, %w[TLSv1 TLSv1.1 TLSv1.2 TLSv1.3]),
             Setting::String.new("queue.type", "memory", true, ["persisted", "memory"]),
            Setting::Boolean.new("queue.drain", false),
              Setting::Bytes.new("queue.page_capacity", "64mb"),
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 44889ffd8f6..f2bd23d385d 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -761,6 +761,26 @@ def coerce(value)
       end
     end
 
+    class StringArray < ArrayCoercible
+      def initialize(name, default, strict=true, possible_strings=[], &validator_proc)
+        @possible_strings = possible_strings
+        super(name, ::String, default, strict, &validator_proc)
+      end
+
+      protected
+
+      def validate(value)
+        super(value)
+        return unless @possible_strings&.any?
+
+        invalid_value = coerce(value).reject { |val| @possible_strings.include?(val) }
+        return unless invalid_value.any?
+
+        raise ArgumentError,
+          "Failed to validate the setting \"#{@name}\" value(s): #{invalid_value.inspect}. Valid options are: #{@possible_strings.inspect}"
+      end
+    end
+
     class Modules < Coercible
       def initialize(name, klass, default = nil)
         super(name, klass, default, false)
@@ -905,6 +925,5 @@ def validate_value
     end
   end
 
-
   SETTINGS = Settings.new
 end
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index e92fa322409..37dfb814eaa 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -42,7 +42,7 @@ def self.from_settings(logger, agent, settings)
         ssl_params = {}
         ssl_params[:keystore_path] = required_setting(settings, 'api.ssl.keystore.path', "api.ssl.enabled")
         ssl_params[:keystore_password] = required_setting(settings, 'api.ssl.keystore.password', "api.ssl.enabled")
-
+        ssl_params[:supported_protocols] = settings.get('api.ssl.supported_protocols')
         options[:ssl_params] = ssl_params.freeze
       else
         warn_ignored(logger, settings, "api.ssl.", "api.ssl.enabled")
@@ -225,11 +225,15 @@ def create_server_thread
     def bind_to_port(candidate_port)
       logger.debug("Trying to start API WebServer", :port => candidate_port, :ssl_enabled => ssl_enabled?)
       if @ssl_params
-        unwrapped_ssl_params = {
+        context_builder_params = {
             'keystore' => @ssl_params.fetch(:keystore_path),
-            'keystore-pass' => @ssl_params.fetch(:keystore_password).value
+            'keystore-pass' => @ssl_params.fetch(:keystore_password).value,
         }
-        ssl_context = Puma::MiniSSL::ContextBuilder.new(unwrapped_ssl_params, @server.log_writer).context
+
+        supported_protocols = @ssl_params.fetch(:supported_protocols, [])
+        context_builder_params['protocols'] = supported_protocols if supported_protocols.any?
+
+        ssl_context = Puma::MiniSSL::ContextBuilder.new(context_builder_params, @server.log_writer).context
         @server.add_ssl_listener(http_host, candidate_port, ssl_context)
       else
         @server.add_tcp_listener(http_host, candidate_port)
diff --git a/logstash-core/spec/logstash/settings/string_array_spec.rb b/logstash-core/spec/logstash/settings/string_array_spec.rb
new file mode 100644
index 00000000000..7dfd1a297ca
--- /dev/null
+++ b/logstash-core/spec/logstash/settings/string_array_spec.rb
@@ -0,0 +1,62 @@
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require 'spec_helper'
+require 'logstash/settings'
+
+describe LogStash::Setting::StringArray do
+  let(:value) { [] }
+  let(:strict) { true }
+  let(:possible_strings) { nil }
+
+  subject { described_class.new('testing', value, strict, possible_strings) }
+
+  context 'when given a coercible string' do
+    context 'with 1 element' do
+      let(:value) { %w[hello] }
+
+      it 'returns 1 element' do
+        expect(subject.value).to match(%w[hello])
+      end
+    end
+
+    context 'with multiple elements' do
+      let(:value) { %w[hello ninja] }
+
+      it 'returns an array of strings' do
+        expect(subject.value).to match(value)
+      end
+    end
+  end
+
+  context 'when defining possible_strings' do
+    let(:possible_strings) { %w[foo bar] }
+    let(:value) { %w[bar foo] }
+
+    context 'when a single given value is not a possible_strings' do
+      it 'should raise an ArgumentError' do
+        expect { subject.set(%w[foo baz]) }.to raise_error(ArgumentError, "Failed to validate the setting \"#{subject.name}\" value(s): [\"baz\"]. Valid options are: #{possible_strings.inspect}")
+      end
+    end
+
+    context 'when multiple given values are not a possible_strings' do
+      it 'should raise an ArgumentError' do
+        expect { subject.set(%w[foo baz boot]) }.to raise_error(ArgumentError, "Failed to validate the setting \"#{subject.name}\" value(s): [\"baz\", \"boot\"]. Valid options are: #{possible_strings.inspect}")
+      end
+    end
+  end
+end
diff --git a/qa/integration/specs/webserver_spec.rb b/qa/integration/specs/webserver_spec.rb
index de19b93782e..da087a2a31f 100644
--- a/qa/integration/specs/webserver_spec.rb
+++ b/qa/integration/specs/webserver_spec.rb
@@ -19,6 +19,8 @@
 
 require 'logstash/util'
 require 'logstash/webserver'
+require "stud/try"
+require "manticore"
 
 describe 'api webserver' do
   let!(:logger) { double("Logger").as_null_object }
@@ -55,6 +57,35 @@
     end
   end
 
+  context "when configured with api.ssl.supported_protocols" do
+    let(:ca_file) { File.join(certs_path, "root.crt") }
+    let(:certs_path) { File.expand_path("../../fixtures/webserver_certs/generated", __FILE__) }
+    let(:keystore_path) { File.join(certs_path,  "server_from_root.p12") }
+    let(:keystore_password) { "12345678" }
+    let(:supported_protocols) { %w[TLSv1.3] }
+    let(:ssl_params) { {:supported_protocols => supported_protocols, :keystore_path => keystore_path, :keystore_password => LogStash::Util::Password.new(keystore_password)} }
+    let(:webserver_options) { super().merge(:ssl_params => ssl_params) }
+    let(:client_protocols) { nil }
+    let(:client) { Manticore::Client.new(ssl: { ca_file: ca_file, protocols: client_protocols }) }
+    let(:response) { client.get("https://127.0.0.1:#{webserver.port}") }
+
+    include_context 'running webserver'
+
+    context 'an HTTPS request using TLSv1.3' do
+      let(:client_protocols) { %w[TLSv1.3] }
+      it 'succeeds' do
+        expect(response.code).to eq(200)
+      end
+    end
+
+    context 'an HTTPS request using TLSv1.2' do
+      let(:client_protocols) { %w[TLSv1.2] }
+      it 'fails' do
+        expect { response.code }.to raise_error(Manticore::ClientProtocolException, a_string_including("handshake"))
+      end
+    end
+  end
+
   %w(
       server_from_root.p12
       server_from_intermediate.p12
