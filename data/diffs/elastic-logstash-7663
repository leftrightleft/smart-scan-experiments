diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index c798907087a..16892d789f4 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -84,6 +84,15 @@
       expect(e.get("foo")).to eq("bar")
     end
 
+    it "should propagate changes to mutable strings to java APIs" do
+      e = LogStash::Event.new()
+      e.to_java.setField("foo", "bar")
+      expect(e.get("foo")).to eq("bar")
+      e.get("foo").gsub!(/bar/, 'pff')
+      expect(e.get("foo")).to eq("pff")
+      expect(e.to_java.getField("foo")).to eq("pff")
+    end
+
     it "should set deep hash values" do
       e = LogStash::Event.new()
       expect(e.set("[foo][bar]", "baz")).to eq("baz")
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
index 5369e23e7bf..97c4b054873 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/StringBiValue.java
@@ -1,15 +1,15 @@
 package org.logstash.bivalues;
 
+import com.fasterxml.jackson.annotation.JsonValue;
+import java.io.ObjectStreamException;
 import org.jruby.Ruby;
 import org.jruby.RubyString;
 
-import java.io.ObjectStreamException;
-
-public class StringBiValue extends BiValueCommon<RubyString, String> implements BiValue<RubyString, String> {
+public final class StringBiValue extends BiValueCommon<RubyString, String>
+    implements BiValue<RubyString, String> {
 
     public StringBiValue(RubyString rubyValue) {
         this.rubyValue = rubyValue;
-        javaValue = null;
     }
 
     public StringBiValue(String javaValue) {
@@ -20,12 +20,35 @@ public StringBiValue(String javaValue) {
     private StringBiValue() {
     }
 
+    @Override
+    @JsonValue
+    public String javaValue() {
+        return rubyValue != null ? rubyValue.toString() : javaValue;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o instanceof BiValue) {
+            final BiValueCommon<?, ?> other = (BiValueCommon<?, ?>) o;
+            return other.hasRubyValue() && other.rubyValueUnconverted().equals(rubyValue) ||
+                (other.hasJavaValue() && other.javaValue().equals(this.javaValue()));
+        } else {
+            return String.class.isAssignableFrom(o.getClass()) && this.javaValue().equals(o);
+        }
+    }
+
     protected void addRuby(Ruby runtime) {
         rubyValue = RubyString.newUnicodeString(runtime, javaValue);
     }
 
+    @Override
     protected void addJava() {
-        javaValue = rubyValue.asJavaString();
+    }
+
+    @Override
+    public boolean hasJavaValue() {
+        return true;
     }
 
     // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
diff --git a/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java b/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
index 2b7d3d7fd01..0ed71759a39 100644
--- a/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
+++ b/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
@@ -29,7 +29,7 @@ public void testStringBiValueFromRuby() {
         String s = "foo bar baz";
         StringBiValue subject = new StringBiValue(RubyString.newString(ruby, s));
         assertTrue(subject.hasRubyValue());
-        assertFalse(subject.hasJavaValue());
+        assertTrue(subject.hasJavaValue());
         assertEquals(s, subject.javaValue());
     }
 
