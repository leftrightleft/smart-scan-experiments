diff --git a/Gemfile.jruby-2.5.lock.release b/Gemfile.jruby-2.5.lock.release
index 13c84f8219f..bce11628e35 100644
--- a/Gemfile.jruby-2.5.lock.release
+++ b/Gemfile.jruby-2.5.lock.release
@@ -886,4 +886,4 @@ DEPENDENCIES
   webmock (~> 3)
 
 BUNDLED WITH
-   1.17.3
\ No newline at end of file
+   2.2.26
diff --git a/build.gradle b/build.gradle
index c94c7fc8ff0..e93f2dfd60f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -282,7 +282,7 @@ tasks.register("installBundler") {
     dependsOn assemblyDeps
     outputs.files file("${projectDir}/vendor/bundle/jruby/2.5.0/bin/bundle")
     doLast {
-      gem(projectDir, buildDir, "bundler", "1.17.3", "${projectDir}/vendor/bundle/jruby/2.5.0")
+    gem(projectDir, buildDir, "bundler", "~> 2", "${projectDir}/vendor/bundle/jruby/2.5.0")
   }
 }
 
@@ -408,10 +408,10 @@ def qaBundleBin = "${qaBundledGemPath}/bin/bundle"
 
 tasks.register("installIntegrationTestBundler"){
     dependsOn unpackTarDistribution
-    outputs.files fileTree("${qaBundledGemPath}/gems/bundler-1.17.3")
-  doLast {
-      gem(projectDir, buildDir, "bundler", "1.17.3", qaBundledGemPath)
-  }
+    outputs.files file("${qaBundleBin}")
+    doLast {
+        gem(projectDir, buildDir, "bundler", "~> 2", qaBundledGemPath)
+    }
 }
 
 tasks.register("installIntegrationTestGems") {
diff --git a/ci/acceptance_tests.sh b/ci/acceptance_tests.sh
index acb55662679..82219fb5e08 100755
--- a/ci/acceptance_tests.sh
+++ b/ci/acceptance_tests.sh
@@ -27,6 +27,7 @@ QA_DIR="$PWD/qa"
 
 # Always run the halt, even if the test times out or an exit is sent
 cleanup() {
+
   cd $QA_DIR
   bundle check || bundle install
   bundle exec rake qa:vm:halt
@@ -39,6 +40,7 @@ cleanup
 if [[ $SELECTED_TEST_SUITE == $"redhat" ]]; then
   echo "Generating the RPM, make sure you start with a clean environment before generating other packages."
   cd $LS_HOME
+  ./gradlew clean bootstrap
   rake artifact:rpm
   echo "Acceptance: Installing dependencies"
   cd $QA_DIR
@@ -52,6 +54,7 @@ if [[ $SELECTED_TEST_SUITE == $"redhat" ]]; then
 elif [[ $SELECTED_TEST_SUITE == $"debian" ]]; then
   echo "Generating the DEB, make sure you start with a clean environment before generating other packages."
   cd $LS_HOME
+  ./gradlew clean bootstrap
   rake artifact:deb
   echo "Acceptance: Installing dependencies"
   cd $QA_DIR
@@ -65,6 +68,7 @@ elif [[ $SELECTED_TEST_SUITE == $"debian" ]]; then
 elif [[ $SELECTED_TEST_SUITE == $"all" ]]; then
   echo "Building Logstash artifacts"
   cd $LS_HOME
+  ./gradlew clean bootstrap
   rake artifact:all
 
   echo "Acceptance: Installing dependencies"
diff --git a/docs/static/running-logstash-command-line.asciidoc b/docs/static/running-logstash-command-line.asciidoc
index f077be51728..c82a7c97377 100644
--- a/docs/static/running-logstash-command-line.asciidoc
+++ b/docs/static/running-logstash-command-line.asciidoc
@@ -227,5 +227,14 @@ With this command, Logstash concatenates three config files, `/tmp/one`, `/tmp/t
   as the log4j logging configuration. This can also be set through the LS_SETTINGS_DIR environment variable.
   The default is the `config` directory under Logstash home.
 
+*`--enable-local-plugin-development`*::
+  This flag enables developers to update their local Gemfile without running into issues caused by a frozen lockfile.
+  This flag can be helpful when you are developing/testing plugins locally.
+
+NOTE: This flag is for Logstash developers only. End users should not need it.
+
+
+
+
 *`-h, --help`*::
   Print help
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index 0873f351472..b2c0c73e10a 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -73,7 +73,7 @@ def setup!(options = {})
       # in the context of Bundler.setup it looks like this is useless here because Gemfile path can only be specified using
       # the ENV, see https://github.com/bundler/bundler/blob/v1.8.3/lib/bundler/shared_helpers.rb#L103
       ::Bundler.settings.set_local(:gemfile, Environment::GEMFILE_PATH)
-
+      ::Bundler.settings.set_local(:frozen, true) unless options[:allow_gemfile_changes]
       ::Bundler.reset!
       ::Bundler.setup
     end
@@ -95,7 +95,6 @@ def invoke!(options = {})
                  :jobs => 12, :all => false, :package => false, :without => [:development]}.merge(options)
       options[:without] = Array(options[:without])
       options[:update] = Array(options[:update]) if options[:update]
-
       ::Gem.clear_paths
       ENV['GEM_HOME'] = ENV['GEM_PATH'] = LogStash::Environment.logstash_gem_home
       ::Gem.paths = ENV
@@ -128,13 +127,18 @@ def invoke!(options = {})
       ::Bundler.settings.set_local(:gemfile, LogStash::Environment::GEMFILE_PATH)
       ::Bundler.settings.set_local(:without, options[:without])
       ::Bundler.settings.set_local(:force, options[:force])
-
-      if !debug?
-        # Will deal with transient network errors
-        execute_bundler_with_retry(options)
-      else
-        options[:verbose] = true
-        execute_bundler(options)
+      # This env setting avoids the warning given when bundler is run as root, as is required
+      # to update plugins when logstash is run as a service
+      # Note: Using an `ENV` here because ::Bundler.settings.set_local(:silence_root_warning, true)
+      # does not work (set_global *does*, but that seems too drastic a change)
+      with_env("BUNDLE_SILENCE_ROOT_WARNING" => "true") do
+        if !debug?
+          # Will deal with transient network errors
+          execute_bundler_with_retry(options)
+        else
+          options[:verbose] = true
+          execute_bundler(options)
+        end
       end
     end
 
@@ -176,6 +180,18 @@ def execute_bundler(options)
       ::Bundler::CLI.start(bundler_arguments(options))
     end
 
+    def specific_platforms(platforms=::Gem.platforms)
+      platforms.find_all {|plat| plat.is_a?(::Gem::Platform) && plat.os=='java' && !plat.cpu.nil?}
+    end
+
+    def genericize_platform
+      output = LogStash::Bundler.invoke!({:add_platform => 'java'})
+      specific_platforms.each do |platform|
+        output << LogStash::Bundler.invoke!({:remove_platform => platform})
+      end
+      output
+    end
+
     def debug?
       ENV["DEBUG"]
     end
@@ -185,7 +201,6 @@ def debug?
     # @return [Array<String>] Bundler::CLI.start string arguments array
     def bundler_arguments(options = {})
       arguments = []
-
       if options[:install]
         arguments << "install"
         arguments << "--clean" if options[:clean]
@@ -202,14 +217,30 @@ def bundler_arguments(options = {})
       elsif options[:package]
         arguments << "package"
         arguments << "--all" if options[:all]
+      elsif options[:add_platform]
+        arguments << "lock"
+        arguments << "--add_platform"
+        arguments << options[:add_platform]
+      elsif options[:remove_platform]
+        arguments << "lock"
+        arguments << "--remove_platform"
+        arguments << options[:remove_platform]
       end
 
       arguments << "--verbose" if options[:verbose]
-
       arguments.flatten
     end
 
-   # capture any $stdout from the passed block. also trap any exception in that block, in which case the trapped exception will be returned
+    def with_env(modifications)
+      backup_env = ENV.to_hash
+      ENV.replace(backup_env.merge(modifications))
+
+      yield
+    ensure
+      ENV.replace(backup_env)
+    end
+
+    # capture any $stdout from the passed block. also trap any exception in that block, in which case the trapped exception will be returned
     # @param [Proc] the code block to execute
     # @return [String, Exception] the captured $stdout string and any trapped exception or nil if none
     def capture_stdout(&block)
diff --git a/lib/bootstrap/environment.rb b/lib/bootstrap/environment.rb
index cd86574b153..c0b9972da14 100644
--- a/lib/bootstrap/environment.rb
+++ b/lib/bootstrap/environment.rb
@@ -81,7 +81,12 @@ def pattern_path(path)
 # defined and exposing the LogStash::Runner#main instance method which will be called with the current ARGV
 # currently lib/logstash/runner.rb and lib/pluginmanager/main.rb are called using this.
 if $0 == __FILE__
-  LogStash::Bundler.setup!({:without => [:build, :development]})
+  bundler_options = {:without => [:build, :development]}
+  ## Check for dev flags - this needs to be done before the runner is invoked to set bundler options
+  if ARGV.include?("--enable-local-plugin-development")
+    bundler_options[:allow_gemfile_changes] = true
+  end
+  LogStash::Bundler.setup!(bundler_options)
   require_relative "patches/jar_dependencies"
 
   require ARGV.shift
diff --git a/lib/pluginmanager/bundler/logstash_injector.rb b/lib/pluginmanager/bundler/logstash_injector.rb
index dc0b89dd786..d9d5a7ad8e8 100644
--- a/lib/pluginmanager/bundler/logstash_injector.rb
+++ b/lib/pluginmanager/bundler/logstash_injector.rb
@@ -93,6 +93,10 @@ def inject(gemfile_path, lockfile_path, dependencies)
 
           builder.eval_gemfile("bundler file", gemfile.generate())
           definition = builder.to_definition(lockfile_path, {})
+          LogStash::Bundler.specific_platforms(definition.platforms).each do |specific_platform|
+            definition.remove_platform(specific_platform)
+          end
+          definition.add_platform(Gem::Platform.new('java'))
           definition.lock(lockfile_path)
           gemfile.save
         rescue => e
diff --git a/lib/pluginmanager/install.rb b/lib/pluginmanager/install.rb
index 4a1dc4d7b1d..6623fb06cf0 100644
--- a/lib/pluginmanager/install.rb
+++ b/lib/pluginmanager/install.rb
@@ -202,9 +202,12 @@ def install_gems_list!(install_list)
     bundler_options[:without] = [] if development?
     bundler_options[:rubygems_source] = gemfile.gemset.sources
     bundler_options[:local] = true if local?
-
-    output = LogStash::Bundler.invoke!(bundler_options)
-
+    output = nil
+    # Unfreeze the bundle when installing gems
+    Bundler.settings.temporary({:frozen => false}) do
+      output = LogStash::Bundler.invoke!(bundler_options)
+      output << LogStash::Bundler.genericize_platform.to_s
+    end
     puts("Installation successful")
   rescue => exception
     gemfile.restore!
diff --git a/lib/pluginmanager/remove.rb b/lib/pluginmanager/remove.rb
index cde193fdf63..1106bb5beb1 100644
--- a/lib/pluginmanager/remove.rb
+++ b/lib/pluginmanager/remove.rb
@@ -54,7 +54,7 @@ def execute
     signal_error("This plugin has not been previously installed") unless LogStash::PluginManager.installed_plugin?(plugin, gemfile)
 
     exit(1) unless ::Bundler::LogstashUninstall.uninstall!(plugin)
-
+    LogStash::Bundler.genericize_platform
     remove_unused_locally_installed_gems!
   rescue => exception
     report_exception("Operation aborted, cannot remove plugin", exception)
diff --git a/lib/pluginmanager/update.rb b/lib/pluginmanager/update.rb
index 028948fadc9..f8dbee2422b 100644
--- a/lib/pluginmanager/update.rb
+++ b/lib/pluginmanager/update.rb
@@ -80,7 +80,13 @@ def update_gems!
     # Bundler cannot update and clean gems in one operation so we have to call the CLI twice.
     options = {:update => plugins, :rubygems_source => gemfile.gemset.sources}
     options[:local] = true if local?
-    output = LogStash::Bundler.invoke!(options)
+    output=nil
+    # Unfreeze the bundle when updating gems
+    Bundler.settings.temporary({:frozen => false}) do
+      output = LogStash::Bundler.invoke!(options)
+      output << LogStash::Bundler.genericize_platform unless output.nil?
+    end
+
     # We currently dont removed unused gems from the logstash installation
     # see: https://github.com/elastic/logstash/issues/6339
     # output = LogStash::Bundler.invoke!(:clean => true)
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 8e22d051775..05e0b916e71 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -69,6 +69,7 @@ module Environment
             Setting::String.new("log.level", "info", true, ["fatal", "error", "warn", "debug", "info", "trace"]),
            Setting::Boolean.new("version", false),
            Setting::Boolean.new("help", false),
+            Setting::Boolean.new("enable-local-plugin-development", false),
             Setting::String.new("log.format", "plain", true, ["json", "plain"]),
            Setting::Boolean.new("http.enabled", true),
             Setting::String.new("http.host", "127.0.0.1"),
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index c5424770dd4..e9c4eab2e47 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -73,6 +73,11 @@ class LogStash::Runner < Clamp::StrictCommand
     :attribute_name => "node.name",
     :default => LogStash::SETTINGS.get_default("node.name")
 
+  option ["--enable-local-plugin-development"], :flag,
+         I18n.t("logstash.runner.flag.enable-local-plugin-development"),
+         :attribute_name => "enable-local-plugin-development",
+         :default => LogStash::SETTINGS.get_default("enable-local-plugin-development")
+
   # Config Settings
   option ["-f", "--path.config"], "CONFIG_PATH",
     I18n.t("logstash.runner.flag.config"),
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index 8890d9ecd0f..79d8538ffb9 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -287,6 +287,13 @@ en:
           enabled by default.
         http_host: Web API binding host
         http_port: Web API http port
+        enable-local-plugin-development: |+
+          Allow Gemfile to be manipulated directly
+          to facilitate simpler local plugin
+          development.
+          This is an advanced setting, intended
+          only for use by Logstash developers,
+          and should not be used in production.
         pipeline-id: |+
           Sets the ID of the pipeline.
         pipeline-workers: |+
diff --git a/logstash-core/src/main/java/org/logstash/Logstash.java b/logstash-core/src/main/java/org/logstash/Logstash.java
index e2afce899c0..901fbf8ef04 100644
--- a/logstash-core/src/main/java/org/logstash/Logstash.java
+++ b/logstash-core/src/main/java/org/logstash/Logstash.java
@@ -32,8 +32,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jruby.Ruby;
+import org.jruby.RubyClass;
 import org.jruby.RubyException;
 import org.jruby.RubyInstanceConfig;
+import org.jruby.RubyStandardError;
 import org.jruby.RubySystemExit;
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.builtin.IRubyObject;
@@ -73,7 +75,8 @@ public static void main(final String... args) {
             Throwable t = e;
             String message = e.getMessage();
             if (message != null) {
-                if (message.startsWith(UNCLEAN_SHUTDOWN_PREFIX)) {
+                if (message.startsWith(UNCLEAN_SHUTDOWN_PREFIX) ||
+                    message.startsWith(MUTATED_GEMFILE_ERROR)) {
                     t = e.getCause(); // be less verbose with uncleanShutdown's wrapping exception
                 } else if (message.contains("Could not load FFI Provider")) {
                     message =
@@ -176,6 +179,15 @@ public void run() {
             ruby.runFromMain(script, config.displayedFileName());
         } catch (final RaiseException ex) {
             final RubyException re = ex.getException();
+
+            // If this is a production error this signifies an issue with the Gemfile, likely
+            // that a logstash developer has made changes to their local Gemfile for plugin
+            // development, etc. If this is the case, exit with a warning giving remediating
+            // information for Logstash devs.
+            if (isProductionError(re)){
+                bundlerStartupError(ex);
+            }
+
             if (re instanceof RubySystemExit) {
                 IRubyObject success = ((RubySystemExit) re).success_p();
                 if (!success.isTrue()) {
@@ -189,6 +201,15 @@ public void run() {
         }
     }
 
+    // Tests whether the RubyException is of type `Bundler::ProductionError`
+    private boolean isProductionError(RubyException re){
+        if (re instanceof RubyStandardError){
+            RubyClass metaClass = re.getMetaClass();
+            return (metaClass.getName().equals("Bundler::ProductionError"));
+        }
+        return false;
+    }
+
     @Override
     public void close() {
         ruby.tearDown(false);
@@ -233,6 +254,14 @@ private static String safePath(final Path home, final String... subs) {
     }
 
     private static final String UNCLEAN_SHUTDOWN_PREFIX = "Logstash stopped processing because of an error: ";
+    private static final String MUTATED_GEMFILE_ERROR = "Logstash was unable to start due to an unexpected Gemfile change.\n" +
+            "If you are a user, this is a bug.\n" +
+            "If you are a logstash developer, please try restarting logstash with the " +
+            "`--enable-local-plugin-development` flag set.";
+
+    private static void bundlerStartupError(final Exception ex){
+        throw new IllegalStateException(MUTATED_GEMFILE_ERROR);
+    }
 
     private static void uncleanShutdown(final Exception ex) {
         throw new IllegalStateException(UNCLEAN_SHUTDOWN_PREFIX + ex.getMessage(), ex);
diff --git a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/install.rb b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/install.rb
index fa06d90c5a7..0ff24a62549 100644
--- a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/install.rb
+++ b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/install.rb
@@ -44,32 +44,50 @@
             command = logstash.run_command_in_path("bin/logstash-plugin install #{gem_path_on_vagrant}")
             expect(command).to install_successfully
             expect(logstash).to have_installed?("logstash-filter-dns")
+            expect(logstash).not_to be_running
+            with_running_logstash_service(logstash) do
+              expect(logstash).to be_running
+            end
           end
         end
 
         context "when fetching a gem from rubygems" do
-
           it "successfully install the plugin" do
             command = logstash.run_command_in_path("bin/logstash-plugin install logstash-filter-qatest")
             expect(command).to install_successfully
             expect(logstash).to have_installed?("logstash-filter-qatest")
+            expect(logstash).not_to be_running
+            with_running_logstash_service(logstash) do
+              expect(logstash).to be_running
+            end
           end
 
           it "successfully install the plugin when verification is disabled" do
             command = logstash.run_command_in_path("bin/logstash-plugin install --no-verify logstash-filter-qatest")
             expect(command).to install_successfully
             expect(logstash).to have_installed?("logstash-filter-qatest")
+            expect(logstash).not_to be_running
+            with_running_logstash_service(logstash) do
+              expect(logstash).to be_running
+            end
           end
 
           it "fails when installing a non logstash plugin" do
             command = logstash.run_command_in_path("bin/logstash-plugin install  bundler")
             expect(command).not_to install_successfully
+            expect(logstash).not_to be_running
+            with_running_logstash_service(logstash) do
+              expect(logstash).to be_running
+            end
           end
 
           it "allow to install a specific version" do
             command = logstash.run_command_in_path("bin/logstash-plugin install --no-verify --version 0.1.0 logstash-filter-qatest")
             expect(command).to install_successfully
             expect(logstash).to have_installed?("logstash-filter-qatest", "0.1.0")
+            with_running_logstash_service(logstash) do
+              expect(logstash).to be_running
+            end
           end
         end
       end
@@ -78,6 +96,9 @@
         it "fails to install and report an error" do
           command = logstash.run_command_in_path("bin/logstash-plugin install --no-verify logstash-output-impossible-plugin")
           expect(command.stderr).to match(/Plugin not found, aborting/)
+          with_running_logstash_service(logstash) do
+            expect(logstash).to be_running
+          end
         end
       end
     end
diff --git a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/remove.rb b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/remove.rb
index 93ee966bf63..6c8a4685021 100644
--- a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/remove.rb
+++ b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/remove.rb
@@ -43,6 +43,10 @@
 
         result = logstash.run_command_in_path("bin/logstash-plugin remove logstash-filter-qatest")
         expect(logstash).not_to have_installed?("logstash-filter-qatest")
+        expect(logstash).not_to be_running
+        with_running_logstash_service(logstash) do
+          expect(logstash).to be_running
+        end
       end
     end
   end
diff --git a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/uninstall.rb b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/uninstall.rb
index 36b283c6a7b..a1f8aed3354 100644
--- a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/uninstall.rb
+++ b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/uninstall.rb
@@ -43,6 +43,10 @@
 
         result = logstash.run_command_in_path("bin/logstash-plugin uninstall logstash-filter-qatest")
         expect(logstash).not_to have_installed?("logstash-filter-qatest")
+        expect(logstash).not_to be_running
+        with_running_logstash_service(logstash) do
+          expect(logstash).to be_running
+        end
       end
     end
   end
diff --git a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/update.rb b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/update.rb
index c7965031eea..1904fbf0011 100644
--- a/qa/acceptance/spec/shared_examples/cli/logstash-plugin/update.rb
+++ b/qa/acceptance/spec/shared_examples/cli/logstash-plugin/update.rb
@@ -33,16 +33,22 @@
 
     before do
       logstash.run_command_in_path("bin/logstash-plugin install --no-verify --version #{previous_version} #{plugin_name}")
+      logstash.run_command_in_path("bin/logstash-plugin list")
+      expect(logstash).to have_installed?(plugin_name, previous_version)
       # Logstash won't update when we have a pinned version in the gemfile so we remove them
       logstash.replace_in_gemfile(',[[:space:]]"0.1.0"', "")
-      expect(logstash).to have_installed?(plugin_name, previous_version)
     end
 
     context "update a specific plugin" do
       it "has executed successfully" do
         cmd = logstash.run_command_in_path("bin/logstash-plugin update --no-verify #{plugin_name}")
         expect(cmd.stdout).to match(/Updating #{plugin_name}/)
+        expect(logstash).to have_installed?(plugin_name, "0.1.1")
         expect(logstash).not_to have_installed?(plugin_name, previous_version)
+        expect(logstash).not_to be_running
+        with_running_logstash_service(logstash) do
+          expect(logstash).to be_running
+        end
       end
     end
 
@@ -50,6 +56,10 @@
       it "has executed successfully" do
         logstash.run_command_in_path("bin/logstash-plugin update --no-verify")
         expect(logstash).to have_installed?(plugin_name, "0.1.1")
+        expect(logstash).not_to be_running
+        with_running_logstash_service(logstash) do
+          expect(logstash).to be_running
+        end
       end
     end
   end
diff --git a/qa/acceptance/spec/shared_examples/installed.rb b/qa/acceptance/spec/shared_examples/installed.rb
index 032dcf60f79..70c7e53e96e 100644
--- a/qa/acceptance/spec/shared_examples/installed.rb
+++ b/qa/acceptance/spec/shared_examples/installed.rb
@@ -31,9 +31,9 @@
   end
 
   it "is running on #{logstash.hostname}" do
-    logstash.start_service
-    expect(logstash).to be_running
-    logstash.stop_service
+    with_running_logstash_service(logstash) do
+      expect(logstash).to be_running
+    end
   end
 
   it "is removable on #{logstash.hostname}" do
diff --git a/qa/acceptance/spec/shared_examples/installed_with_jdk.rb b/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
index df74f49144e..4e18a291901 100644
--- a/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
+++ b/qa/acceptance/spec/shared_examples/installed_with_jdk.rb
@@ -40,9 +40,9 @@
   end
 
   it "is running on #{logstash.hostname}" do
-    logstash.start_service
-    expect(logstash).to be_running_with("/usr/share/logstash/jdk/bin/java")
-    logstash.stop_service
+    with_running_logstash_service(logstash, "/usr/share/logstash/jdk/bin/java") do
+      expect(logstash).to be_running_with("/usr/share/logstash/jdk/bin/java")
+    end
   end
 
   it "is removable on #{logstash.hostname}" do
diff --git a/qa/acceptance/spec/shared_examples/running.rb b/qa/acceptance/spec/shared_examples/running.rb
index 2a04ca52b67..f6f0a42faa3 100644
--- a/qa/acceptance/spec/shared_examples/running.rb
+++ b/qa/acceptance/spec/shared_examples/running.rb
@@ -26,9 +26,8 @@
   end
 
   it "is running on #{logstash.hostname}" do
-    logstash.start_service
-    expect(logstash).to be_running
-    logstash.stop_service
+    with_running_logstash_service(logstash) do
+      expect(logstash).to be_running
+    end
   end
-
 end
diff --git a/qa/acceptance/spec/shared_examples/updated.rb b/qa/acceptance/spec/shared_examples/updated.rb
index a0762497f14..c397020fc03 100644
--- a/qa/acceptance/spec/shared_examples/updated.rb
+++ b/qa/acceptance/spec/shared_examples/updated.rb
@@ -38,7 +38,8 @@
     logstash.install({:version => LOGSTASH_VERSION})
     expect(logstash).to be_installed
     # starts the service to be sure it runs after the upgrade
-    logstash.start_service
-    expect(logstash).to be_running
+    with_running_logstash_service(logstash) do
+      expect(logstash).to be_running
+    end
   end
 end
diff --git a/qa/acceptance/spec/spec_helper.rb b/qa/acceptance/spec/spec_helper.rb
index ec9b26f8a42..cea8e125038 100644
--- a/qa/acceptance/spec/spec_helper.rb
+++ b/qa/acceptance/spec/spec_helper.rb
@@ -56,3 +56,20 @@
 SpecsHelper.configure(selected_boxes)
 
 puts "[Acceptance specs] running on #{ServiceTester.configuration.hosts}" if !selected_boxes.empty?
+
+def with_running_logstash_service(logstash, jdk_path=nil)
+  begin
+    logstash.start_service
+    Stud.try(40.times, RSpec::Expectations::ExpectationNotMetError) do
+      if jdk_path
+        expect(logstash).to be_running_with(jdk_path)
+      else
+        expect(logstash).to be_running
+      end
+    end
+
+    yield
+  ensure
+    logstash.stop_service
+  end
+end
diff --git a/qa/rspec/commands.rb b/qa/rspec/commands.rb
index d2c97c13254..0822b49eda2 100644
--- a/qa/rspec/commands.rb
+++ b/qa/rspec/commands.rb
@@ -21,7 +21,6 @@
 require_relative "./commands/suse"
 require_relative "./commands/centos/centos-6"
 require_relative "./commands/oel/oel-6"
-require_relative "./commands/ubuntu/ubuntu-1604"
 require_relative "./commands/suse/sles-11"
 
 require "forwardable"
@@ -131,11 +130,7 @@ def self.fetch(type, host)
       case type
       when "debian"
         if host.start_with?("ubuntu")
-          if host == "ubuntu-1604"
-            return Ubuntu1604Commands.new
-          else
-            return UbuntuCommands.new
-          end
+          return UbuntuCommands.new
         else
           return DebianCommands.new
         end
diff --git a/qa/rspec/commands/system_helpers.rb b/qa/rspec/commands/system_helpers.rb
index 58354687a3e..ae9efa41e27 100644
--- a/qa/rspec/commands/system_helpers.rb
+++ b/qa/rspec/commands/system_helpers.rb
@@ -28,7 +28,7 @@ def running?(hosts, package, jdk_path='/usr/bin/java')
       stdout.force_encoding(Encoding::UTF_8)
       (
         stdout.match(/Active: active \(running\)/) &&
-        stdout.match(/^\s*└─\d*\s.*#{jdk_path}/) &&
+        stdout.match(/^\s*(└─|`-)\d*\s.*#{jdk_path}/) &&
         stdout.match(/#{package}.service - #{package}/)
       )
     end
@@ -49,12 +49,15 @@ def running?(hosts, package, jdk_path='/usr/bin/java')
         stdout = cmd.stdout
       end
       running = stdout.match(/#{package} start\/running/)
-      pid = stdout.match(/#{package} start\/running, process (\d*)/).captures[0]
-      at(hosts, {in: :serial}) do |host|
-        cmd = sudo_exec!("ps ax | grep #{pid}")
-        stdout = cmd.stdout
+      if running
+        pid = stdout.match(/#{package} start\/running, process (\d*)/).captures[0]
+        at(hosts, {in: :serial}) do |host|
+          cmd = sudo_exec!("ps ax | grep #{pid}")
+          stdout = cmd.stdout
+        end
+        running = (running && stdout.match(/#{jdk_path}/))
       end
-      (running && stdout.match(/#{jdk_path}/))
+      running
     end
 
     def service_manager(service, action, host=nil)
diff --git a/qa/rspec/commands/ubuntu.rb b/qa/rspec/commands/ubuntu.rb
index 00c9fe9d1e9..22952af09cb 100644
--- a/qa/rspec/commands/ubuntu.rb
+++ b/qa/rspec/commands/ubuntu.rb
@@ -19,15 +19,6 @@
 
 module ServiceTester
   class UbuntuCommands < DebianCommands
-
-    def running?(hosts, package)
-      stdout = ""
-      at(hosts, {in: :serial}) do |host|
-        cmd = sudo_exec!("service #{package} status")
-        stdout = cmd.stdout
-      end
-      stdout.match(/^#{package} start\/running/)
-    end
-
+    include ::ServiceTester::SystemD
   end
 end
diff --git a/qa/rspec/commands/ubuntu/ubuntu-1604.rb b/qa/rspec/commands/ubuntu/ubuntu-1604.rb
deleted file mode 100644
index 8765c15a14e..00000000000
--- a/qa/rspec/commands/ubuntu/ubuntu-1604.rb
+++ /dev/null
@@ -1,25 +0,0 @@
-# Licensed to Elasticsearch B.V. under one or more contributor
-# license agreements. See the NOTICE file distributed with
-# this work for additional information regarding copyright
-# ownership. Elasticsearch B.V. licenses this file to you under
-# the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#  http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-require_relative "../base"
-require_relative "../ubuntu"
-
-module ServiceTester
-  class Ubuntu1604Commands < UbuntuCommands
-      include ::ServiceTester::SystemD
-  end
-end
diff --git a/qa/vagrant/command.rb b/qa/vagrant/command.rb
index 97bc93e969f..a5efce0221a 100644
--- a/qa/vagrant/command.rb
+++ b/qa/vagrant/command.rb
@@ -71,7 +71,7 @@ def self.run!(cmd, debug=false)
 
     def self.reporter(io, wait_thr, &block)
       Thread.new(io, wait_thr) do |_io, _wait_thr|
-        while (_wait_thr.status == "run")
+        while (_wait_thr.status == "run" || _wait_thr.status == "sleep")
           begin
             c = _io.read(1)
             block.call(c) if c
diff --git a/qa/vagrant/helpers.rb b/qa/vagrant/helpers.rb
index 5125f649028..e99480cd3ac 100644
--- a/qa/vagrant/helpers.rb
+++ b/qa/vagrant/helpers.rb
@@ -46,7 +46,7 @@ def self.restore_snapshot(machine="")
     end
 
     def self.fetch_config
-      machines = CommandExecutor.run!("vagrant status").stdout.split("\n").select { |l| l.include?("running") }.map { |r| r.split(' ')[0]}
+      machines = CommandExecutor.run!("vagrant status --machine-readable").stdout.split("\n").select { |l| l.include?("state,running") }.map { |r| r.split(',')[1]}
       CommandExecutor.run!("vagrant ssh-config #{machines.join(' ')}")
     end
 
diff --git a/rubyUtils.gradle b/rubyUtils.gradle
index 58c5f0b5055..b0f99e2641b 100644
--- a/rubyUtils.gradle
+++ b/rubyUtils.gradle
@@ -155,6 +155,7 @@ void setupJruby(File projectDir, File buildDir) {
         jruby.currentDirectory = projectDir
         jruby.runScriptlet("require '${projectDir}/lib/bootstrap/environment'")
         jruby.runScriptlet("LogStash::Bundler.invoke!")
+        jruby.runScriptlet("LogStash::Bundler.genericize_platform")
     }
 }
 
