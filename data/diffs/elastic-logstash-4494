diff --git a/Gemfile b/Gemfile
index 70d17c8350e..060844f1798 100644
--- a/Gemfile
+++ b/Gemfile
@@ -3,8 +3,8 @@
 
 source "https://rubygems.org"
 gem "logstash-core", "3.0.0.dev", :path => "./logstash-core"
-gem "logstash-core-event", "3.0.0.dev", :path => "./logstash-core-event"
-# gem "logstash-core-event-java", "3.0.0.dev", :path => "./logstash-core-event-java"
+# gem "logstash-core-event", "3.0.0.dev", :path => "./logstash-core-event"
+gem "logstash-core-event-java", "3.0.0.dev", :path => "./logstash-core-event-java"
 gem "file-dependencies", "0.1.6"
 gem "ci_reporter_rspec", "1.0.0", :group => :development
 gem "simplecov", :group => :development
diff --git a/logstash-core-event-java/build.gradle b/logstash-core-event-java/build.gradle
index 6e4c299a79d..8cb55d9c3d6 100644
--- a/logstash-core-event-java/build.gradle
+++ b/logstash-core-event-java/build.gradle
@@ -1,104 +1,107 @@
 buildscript {
-  repositories {
-    mavenLocal()
-    mavenCentral()
-    jcenter()
-  }
-  dependencies {
-    classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
-    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
-  }
+    repositories {
+        mavenLocal()
+        mavenCentral()
+        jcenter()
+    }
+    dependencies {
+        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
+    }
 }
 
-//allprojects {
-
-  repositories {
+repositories {
     mavenLocal()
     mavenCentral()
-  }
+    jcenter()
+}
 
-  gradle.projectsEvaluated {
+gradle.projectsEvaluated {
     tasks.withType(JavaCompile) {
-      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
+        options.compilerArgs << "-Xlint:deprecation"
+//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
     }
-  }
-
-//}
-
-//subprojects { project ->
+}
 
-  apply plugin: 'java'
-  apply plugin: 'idea'
-  apply plugin: 'com.github.johnrengelman.shadow'
+apply plugin: 'java'
+apply plugin: 'idea'
 
-  group = 'org.logstash'
+group = 'org.logstash'
 
-  project.sourceCompatibility = 1.7
+project.sourceCompatibility = 1.7
 
-  task sourcesJar(type: Jar, dependsOn:classes) {
+task sourcesJar(type: Jar, dependsOn: classes) {
     from sourceSets.main.allSource
     classifier 'sources'
     extension 'jar'
-  }
+}
 
-  task javadocJar(type: Jar, dependsOn:javadoc) {
+task javadocJar(type: Jar, dependsOn: javadoc) {
     from javadoc.destinationDir
     classifier 'javadoc'
     extension 'jar'
-  }
+}
 
-  configurations.create('sources')
-  configurations.create('javadoc')
-  configurations.archives {
+task copyGemjar(type: Copy, dependsOn: sourcesJar) {
+    from project.jar
+    into project.file('lib/')
+}
+
+task cleanGemjar {
+    delete fileTree(project.file('lib/')) {
+        include '*.jar'
+    }
+}
+
+clean.dependsOn(cleanGemjar)
+build.finalizedBy(copyGemjar)
+
+configurations.create('sources')
+configurations.create('javadoc')
+configurations.archives {
     extendsFrom configurations.sources
     extendsFrom configurations.javadoc
-  }
+}
 
-  artifacts {
+artifacts {
     sources(sourcesJar) {
-      // Weird Gradle quirk where type will be used for the extension, but only for sources
-      type 'jar'
+        // Weird Gradle quirk where type will be used for the extension, but only for sources
+        type 'jar'
     }
 
     javadoc(javadocJar) {
-      type 'javadoc'
+        type 'javadoc'
     }
-  }
+}
 
-  configurations {
+configurations {
     provided
-  }
+}
 
-  project.sourceSets {
+project.sourceSets {
     main.compileClasspath += project.configurations.provided
     main.runtimeClasspath += project.configurations.provided
     test.compileClasspath += project.configurations.provided
     test.runtimeClasspath += project.configurations.provided
-  }
-  project.javadoc.classpath += project.configurations.provided
+}
+project.javadoc.classpath += project.configurations.provided
 
-  idea {
+idea {
     module {
-      scopes.PROVIDED.plus += [ project.configurations.provided ]
+        scopes.PROVIDED.plus += [project.configurations.provided]
     }
-  }
-
-  dependencies {
-    compile     'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
-    compile     'org.codehaus.jackson:jackson-core-asl:1.9.13'
-    compile     'joda-time:joda-time:2.8.2'
-    compile     'com.google.guava:guava:18.0'
-    compile     'org.slf4j:slf4j-api:1.7.12'
-    provided    'org.jruby:jruby-core:1.7.22'
-    testCompile 'org.testng:testng:6.9.6'
-    testCompile 'org.mockito:mockito-core:1.10.19'
-  }
+}
 
-//}
+dependencies {
+    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
+    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
+    provided 'org.jruby:jruby-core:1.7.22'
+    testCompile 'junit:junit:4.12'
+    testCompile 'net.javacrumbs.json-unit:json-unit:1.9.0'
+}
 
 // See http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
 task wrapper(type: Wrapper) {
-  description = 'Install Gradle wrapper'
-  gradleVersion = '2.7'
+    description = 'Install Gradle wrapper'
+    gradleVersion = '2.8'
 }
 
diff --git a/logstash-core-event-java/gradle/wrapper/gradle-wrapper.jar b/logstash-core-event-java/gradle/wrapper/gradle-wrapper.jar
index 085a1cdc27d..13372aef5e2 100644
Binary files a/logstash-core-event-java/gradle/wrapper/gradle-wrapper.jar and b/logstash-core-event-java/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/logstash-core-event-java/gradle/wrapper/gradle-wrapper.properties b/logstash-core-event-java/gradle/wrapper/gradle-wrapper.properties
index bd7deb6d61c..25611753f15 100644
--- a/logstash-core-event-java/gradle/wrapper/gradle-wrapper.properties
+++ b/logstash-core-event-java/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Mar 17 11:58:32 PDT 2015
+#Fri Jan 22 14:29:02 EST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
diff --git a/logstash-core-event-java/gradlew b/logstash-core-event-java/gradlew
index 91a7e269e19..9d82f789151 100755
--- a/logstash-core-event-java/gradlew
+++ b/logstash-core-event-java/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/logstash-core-event-java/lib/logstash-core-event-java/logstash-core-event-java.rb b/logstash-core-event-java/lib/logstash-core-event-java/logstash-core-event-java.rb
index 7bf90a9bc0b..03f1c2db744 100644
--- a/logstash-core-event-java/lib/logstash-core-event-java/logstash-core-event-java.rb
+++ b/logstash-core-event-java/lib/logstash-core-event-java/logstash-core-event-java.rb
@@ -5,14 +5,7 @@
 module LogStash
 end
 
-# TODO: (colin) integrate jar loading with gradle and verify dev vs prod environment setups
-
-# insert all jars in this directory into CLASSPATH
-Dir.glob(File.join(File.expand_path("..", __FILE__), "*.jar")).each do |jar|
-  $CLASSPATH << jar unless $CLASSPATH.include?(jar)
-end
-
-# TODO: (colin) correctly handle dev env build/ dir and local jar
+require "logstash-core-event-java_jars"
 
 # local dev setup
 classes_dir = File.expand_path("../../../build/classes/main", __FILE__)
@@ -22,7 +15,13 @@ module LogStash
   $CLASSPATH << classes_dir unless $CLASSPATH.include?(classes_dir)
 else
   # otherwise use included jar
-  raise("TODO build dir not found and no jar file")
+  begin
+    jar = Dir[File.dirname(__FILE__) + "/logstash-core-event-java*.jar"].first
+    raise("No logstash-core-event-java jar file found") unless jar
+    require jar
+  rescue Exception => e
+    raise("Error loading logstash-core-event-java jar file, cause: #{e.message}")
+  end
 end
 
 require "jruby_event_ext"
diff --git a/logstash-core-event-java/lib/logstash-core-event-java_jars.rb b/logstash-core-event-java/lib/logstash-core-event-java_jars.rb
new file mode 100644
index 00000000000..7c584fcffba
--- /dev/null
+++ b/logstash-core-event-java/lib/logstash-core-event-java_jars.rb
@@ -0,0 +1,5 @@
+# this is a generated file, to avoid over-writing it just delete this comment
+require 'jar_dependencies'
+
+require_jar( 'org.codehaus.jackson', 'jackson-core-asl', '1.9.13' )
+require_jar( 'org.codehaus.jackson', 'jackson-mapper-asl', '1.9.13' )
diff --git a/logstash-core-event-java/logstash-core-event-java.gemspec b/logstash-core-event-java/logstash-core-event-java.gemspec
index 77667f66e40..2b39eaf5bb4 100644
--- a/logstash-core-event-java/logstash-core-event-java.gemspec
+++ b/logstash-core-event-java/logstash-core-event-java.gemspec
@@ -11,13 +11,17 @@ Gem::Specification.new do |gem|
   gem.homepage      = "http://www.elastic.co/guide/en/logstash/current/index.html"
   gem.license       = "Apache License (2.0)"
 
-  gem.files         = Dir.glob(["logstash-core-event-java.gemspec", "lib/**/*.rb", "spec/**/*.rb"])
+  gem.files         = Dir.glob(["logstash-core-event-java.gemspec", "lib/**/*.jar", "lib/**/*.rb", "spec/**/*.rb"])
   gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
   gem.name          = "logstash-core-event-java"
   gem.require_paths = ["lib"]
   gem.version       = LOGSTASH_CORE_EVENT_JAVA_VERSION
 
-  if RUBY_PLATFORM == 'java'
-    gem.platform = RUBY_PLATFORM
-  end
+  gem.platform = "java"
+
+  gem.add_runtime_dependency "jar-dependencies"
+
+  gem.requirements << "jar org.codehaus.jackson:jackson-mapper-asl, 1.9.13"
+  gem.requirements << "jar org.codehaus.jackson:jackson-core-asl, 1.9.13"
 end
+
diff --git a/logstash-core-event-java/src/main/java/com/logstash/Event.java b/logstash-core-event-java/src/main/java/com/logstash/Event.java
index bfc530f0a6a..083d4b58063 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/Event.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/Event.java
@@ -3,7 +3,6 @@
 import com.logstash.ext.JrubyTimestampExtLibrary;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
-import org.jruby.RubyHash;
 import org.jruby.RubySymbol;
 
 import java.io.IOException;
@@ -50,7 +49,9 @@ public Event()
     public Event(Map data)
     {
         this.data = data;
-        this.data.putIfAbsent(VERSION, VERSION_ONE);
+        if (!this.data.containsKey(VERSION)) {
+            this.data.put(VERSION, VERSION_ONE);
+        }
 
         if (this.data.containsKey(METADATA)) {
             this.metadata = (HashMap<String, Object>) this.data.remove(METADATA);
@@ -203,8 +204,12 @@ public String toString() {
         try {
             return (getTimestamp().toIso8601() + " " + this.sprintf("%{host} %{message}"));
         } catch (IOException e) {
-            String host = (String)this.data.getOrDefault("host", "%{host}");
-            String message = (String)this.data.getOrDefault("message", "%{message}");
+            String host = (String)this.data.get("host");
+            host = (host != null ? host : "%{host}");
+
+            String message = (String)this.data.get("message");
+            message = (message != null ? message : "%{message}");
+
             return (host + " " + message);
         }
     }
diff --git a/logstash-core-event-java/src/main/java/com/logstash/FieldReference.java b/logstash-core-event-java/src/main/java/com/logstash/FieldReference.java
index 508291693f1..e0d7e3ee969 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/FieldReference.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/FieldReference.java
@@ -11,7 +11,7 @@ public class FieldReference {
     private List<String> path;
     private String key;
     private String reference;
-    private static List<String> EMPTY_STRINGS = new ArrayList(Arrays.asList(new String[]{""}));
+    private static List<String> EMPTY_STRINGS = Arrays.asList("");
 
     public FieldReference(List<String> path, String key, String reference) {
         this.path = path;
diff --git a/logstash-core-event-java/src/main/java/com/logstash/KeyNode.java b/logstash-core-event-java/src/main/java/com/logstash/KeyNode.java
index c74902361fd..153ab0af7ef 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/KeyNode.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/KeyNode.java
@@ -27,7 +27,7 @@ public String evaluate(Event event) throws IOException {
 
         if (value != null) {
             if (value instanceof List) {
-                return String.join(",", (List) value);
+                return join((List)value, ",");
             } else if (value instanceof Map) {
                 ObjectMapper mapper = new ObjectMapper();
                 return mapper.writeValueAsString((Map<String, Object>)value);
@@ -39,4 +39,20 @@ public String evaluate(Event event) throws IOException {
             return "%{" + this.key + "}";
         }
     }
+
+    // TODO: (colin) this should be moved somewhere else to make it reusable
+    //   this is a quick fix to compile on JDK7 a not use String.join that is
+    //   only available in JDK8
+    public static String join(List<?> list, String delim) {
+        int len = list.size();
+
+        if (len == 0) return "";
+
+        StringBuilder result = new StringBuilder(list.get(0).toString());
+        for (int i = 1; i < len; i++) {
+            result.append(delim);
+            result.append(list.get(i).toString());
+        }
+        return result.toString();
+    }
 }
\ No newline at end of file
diff --git a/logstash-core-event-java/src/main/java/com/logstash/StringInterpolation.java b/logstash-core-event-java/src/main/java/com/logstash/StringInterpolation.java
index b1dc9b8dfe9..5830cc89672 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/StringInterpolation.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/StringInterpolation.java
@@ -40,10 +40,9 @@ public int cacheSize() {
     public String evaluate(Event event, String template) throws IOException {
         TemplateNode compiledTemplate = (TemplateNode) this.cache.get(template);
 
-        if(compiledTemplate == null) {
+        if (compiledTemplate == null) {
             compiledTemplate = this.compile(template);
-            TemplateNode set = (TemplateNode) this.cache.putIfAbsent(template, compiledTemplate);
-            compiledTemplate = (set != null) ? set : compiledTemplate;
+            this.cache.put(template, compiledTemplate);
         }
 
         return compiledTemplate.evaluate(event);
diff --git a/logstash-core-event-java/src/main/java/com/logstash/Timestamp.java b/logstash-core-event-java/src/main/java/com/logstash/Timestamp.java
index e8beb175da2..3900d05d26d 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/Timestamp.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/Timestamp.java
@@ -7,8 +7,6 @@
 import org.joda.time.Duration;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
-import org.jruby.Ruby;
-import org.jruby.RubyString;
 
 import java.util.Date;
 
diff --git a/logstash-core-event-java/src/main/java/com/logstash/Util.java b/logstash-core-event-java/src/main/java/com/logstash/Util.java
index 9d2cc12f89e..907fd5489b1 100644
--- a/logstash-core-event-java/src/main/java/com/logstash/Util.java
+++ b/logstash-core-event-java/src/main/java/com/logstash/Util.java
@@ -1,8 +1,5 @@
 package com.logstash;
 
-import com.google.common.collect.Lists;
-import org.jruby.RubyHash;
-
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -24,7 +21,8 @@ public static void mapMerge(Map<String, Object> target, Map<String, Object> add)
                         target.put(e.getKey(), new ArrayList<Object>(new LinkedHashSet<Object>(targetList)));
                     } else {
                         Object targetValue = target.get(e.getKey());
-                        List targetValueList = Lists.newArrayList(targetValue);
+                        List targetValueList = new ArrayList();
+                        targetValueList.add(targetValue);
                         for (Object o : (List) e.getValue()) {
                             if (!targetValue.equals(o)) {
                                 targetValueList.add(o);
@@ -38,8 +36,8 @@ public static void mapMerge(Map<String, Object> target, Map<String, Object> add)
                         t.add(e.getValue());
                     }
                 } else if (!target.get(e.getKey()).equals(e.getValue())) {
-                    Object targetValue = target.get(e.getKey());
-                    targetValue = Lists.newArrayList(targetValue);
+                    List targetValue = new ArrayList();
+                    targetValue.add(target.get(e.getKey()));
                     ((List) targetValue).add(e.getValue());
                     target.put(e.getKey(), targetValue);
                 }
diff --git a/logstash-core-event-java/src/test/java/com/logstash/EventTest.java b/logstash-core-event-java/src/test/java/com/logstash/EventTest.java
index 46ad8292817..1450bf3c7c4 100644
--- a/logstash-core-event-java/src/test/java/com/logstash/EventTest.java
+++ b/logstash-core-event-java/src/test/java/com/logstash/EventTest.java
@@ -1,25 +1,15 @@
 package com.logstash;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import org.jruby.RubyHash;
-import org.jruby.ir.operands.Hash;
 import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import java.util.*;
 import static org.junit.Assert.*;
+import static net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals;
 
 public class EventTest {
-
     @Test
     public void testBareToJson() throws Exception {
         Event e = new Event();
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -27,7 +17,7 @@ public void testSimpleStringFieldToJson() throws Exception {
         Map data = new HashMap();
         data.put("foo", "bar");
         Event e = new Event(data);
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":\"bar\",\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":\"bar\",\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -35,7 +25,7 @@ public void testSimpleIntegerFieldToJson() throws Exception {
         Map data = new HashMap();
         data.put("foo", 1);
         Event e = new Event(data);
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1,\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1,\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -43,7 +33,7 @@ public void testSimpleDecimalFieldToJson() throws Exception {
         Map data = new HashMap();
         data.put("foo", 1.0);
         Event e = new Event(data);
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -53,18 +43,18 @@ public void testSimpleMultipleFieldToJson() throws Exception {
         data.put("bar", "bar");
         data.put("baz", 1);
         Event e = new Event(data);
-        assertEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", e.toJson());
+        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", e.toJson());
     }
 
     @Test
     public void testDeepMapFieldToJson() throws Exception {
         Event e = new Event();
         e.setField("[foo][bar][baz]", 1);
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"bar\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"bar\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
 
         e = new Event();
         e.setField("[foo][0][baz]", 1);
-        assertEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"0\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
+        assertJsonEquals("{\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"foo\":{\"0\":{\"baz\":1}},\"@version\":\"1\"}", e.toJson());
     }
 
     @Test
@@ -107,18 +97,23 @@ public void testClone() throws Exception {
         Event e = new Event(data);
 
         Event f = e.clone();
-        assertEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"array\":[{\"foo\":\"bar\"}],\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", f.toJson());
-        assertEquals(f.toJson(), e.toJson());
+
+        assertJsonEquals("{\"bar\":\"bar\",\"@timestamp\":\"" + e.getTimestamp().toIso8601() + "\",\"array\":[{\"foo\":\"bar\"}],\"foo\":1.0,\"@version\":\"1\",\"baz\":1}", f.toJson());
+        assertJsonEquals(f.toJson(), e.toJson());
     }
 
     @Test
     public void testAppend() throws Exception {
-        Map  data1 = Maps.newHashMap(ImmutableMap.of("field1", Lists.newArrayList("original1", "original2")));
-        Map  data2 = Maps.newHashMap(ImmutableMap.of("field1", "original1"));
+        Map data1 = new HashMap();
+        data1.put("field1", Arrays.asList("original1", "original2"));
+
+        Map data2 = new HashMap();
+        data2.put("field1", "original1");
+
         Event e = new Event(data1);
         Event e2 = new Event(data2);
         e.append(e2);
 
-        assertEquals(Lists.newArrayList("original1", "original2"), e.getField("field1"));
+        assertEquals(Arrays.asList("original1", "original2"), e.getField("field1"));
     }
 }
\ No newline at end of file
diff --git a/logstash-core-event-java/src/test/java/com/logstash/FieldReferenceTest.java b/logstash-core-event-java/src/test/java/com/logstash/FieldReferenceTest.java
index ad17810a72c..73f04e3a7c4 100644
--- a/logstash-core-event-java/src/test/java/com/logstash/FieldReferenceTest.java
+++ b/logstash-core-event-java/src/test/java/com/logstash/FieldReferenceTest.java
@@ -27,14 +27,14 @@ public void testParseSingleFieldPath() throws Exception {
     @Test
     public void testParse2FieldsPath() throws Exception {
         FieldReference f = FieldReference.parse("[foo][bar]");
-        assertEquals(f.getPath().toArray(), new String[]{"foo"});
+        assertArrayEquals(f.getPath().toArray(), new String[]{"foo"});
         assertEquals(f.getKey(), "bar");
     }
 
     @Test
     public void testParse3FieldsPath() throws Exception {
         FieldReference f = FieldReference.parse("[foo][bar]]baz]");
-        assertEquals(f.getPath().toArray(), new String[]{"foo", "bar"});
+        assertArrayEquals(f.getPath().toArray(), new String[]{"foo", "bar"});
         assertEquals(f.getKey(), "baz");
     }
 }
\ No newline at end of file
diff --git a/logstash-core-event-java/src/test/java/com/logstash/KeyNodeTest.java b/logstash-core-event-java/src/test/java/com/logstash/KeyNodeTest.java
new file mode 100644
index 00000000000..ee9e99ef0df
--- /dev/null
+++ b/logstash-core-event-java/src/test/java/com/logstash/KeyNodeTest.java
@@ -0,0 +1,27 @@
+package com.logstash;
+
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static org.junit.Assert.assertEquals;
+
+public class KeyNodeTest {
+
+    @Test
+    public void testNoElementJoin() throws IOException {
+        assertEquals("", KeyNode.join(new ArrayList(), ","));
+    }
+
+    @Test
+    public void testOneElementJoin() throws IOException {
+        assertEquals("foo", KeyNode.join(Arrays.asList("foo"), ","));
+    }
+
+    @Test
+    public void testTwoElementJoin() throws IOException {
+        assertEquals("foo,bar", KeyNode.join(Arrays.asList("foo", "bar"), ","));
+    }
+}
diff --git a/logstash-core/logstash-core.gemspec b/logstash-core/logstash-core.gemspec
index 7acb447598b..1cb1f9106cc 100644
--- a/logstash-core/logstash-core.gemspec
+++ b/logstash-core/logstash-core.gemspec
@@ -17,7 +17,7 @@ Gem::Specification.new do |gem|
   gem.require_paths = ["lib"]
   gem.version       = LOGSTASH_CORE_VERSION
 
-  gem.add_runtime_dependency "logstash-core-event", "~> 3.0.0.dev"
+  gem.add_runtime_dependency "logstash-core-event-java", "~> 3.0.0.dev"
 
   gem.add_runtime_dependency "cabin", "~> 0.7.0" #(Apache 2.0 license)
   gem.add_runtime_dependency "pry", "~> 0.10.1"  #(Ruby license)
diff --git a/rakelib/compile.rake b/rakelib/compile.rake
index be5693bead7..aa20eb7091b 100644
--- a/rakelib/compile.rake
+++ b/rakelib/compile.rake
@@ -11,12 +11,11 @@ namespace "compile" do
 
   task "grammar" => "logstash-core/lib/logstash/config/grammar.rb"
 
-  desc "Build everything"
-  # task "all" => ["grammar", "logstash-core-event-java"]
-  task "all" => ["grammar"]
-
   task "logstash-core-event-java" do
     puts("Building logstash-core-event-java using gradle")
     system("logstash-core-event-java/gradlew", "jar", "-p", "./logstash-core-event-java")
   end
+
+  desc "Build everything"
+  task "all" => ["grammar", "logstash-core-event-java"]
 end
