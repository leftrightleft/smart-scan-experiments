diff --git a/docs/static/logging.asciidoc b/docs/static/logging.asciidoc
index 9d568d53ff8..8e78ff284d8 100644
--- a/docs/static/logging.asciidoc
+++ b/docs/static/logging.asciidoc
@@ -5,87 +5,54 @@ Logstash emits internal logs during its operation, which are placed in `LS_HOME/
 DEB/RPM). The default logging level is `INFO`. Logstash's logging framework is based on
 http://logging.apache.org/log4j/2.x/[Log4j 2 framework], and much of its functionality is exposed directly to users.
 
-When debugging problems, particularly problems with plugins, it can be helpful to increase the logging level to `DEBUG`
-to get more verbose messages. Previously, you could only set a log level that applied to the entire Logstash product.
-Starting with 5.0, you can configure logging for a particular subsystem in Logstash. For example, if you are
-debugging issues with Elasticsearch Output, you can increase log levels just for that component. This way
-you can reduce noise due to excessive logging and focus on the problem area effectively.
+You can configure logging for a particular subsystem, module, or plugin.
 
-==== Log file location
-
-You can specify the log file location using `--path.logs` setting.
+When you need to debug problems, particularly problems with plugins, consider
+increasing the logging level to `DEBUG` to get more verbose messages. For
+example, if you are debugging issues with Elasticsearch Output, you can increase
+log levels just for that component. This approach reduces noise from
+excessive logging and helps you focus on the problem area.
 
-[[log4j2]]
-==== Log4j 2 Configuration
-
-Logstash ships with a `log4j2.properties` file with out-of-the-box settings. You can modify this file to change the
-rotation policy, type, and other https://logging.apache.org/log4j/2.x/manual/configuration.html#Loggers[log4j2 configuration].
-You must restart Logstash to apply any changes that you make to this file.
+You can configure logging using the `log4j2.properties` file or the Logstash API.
 
-==== Slowlog
+* *`log4j2.properties` file.*  Changes made through the `log4j2.properties`
+file require you to restart Logstash for the changes to take effect.  Changes *persist*
+through subsequent restarts. 
+* *Logging API.* Changes made through the Logging API are effective immediately 
+without a restart. The changes *do not persist* after Logstash
+is restarted.
 
-Slow-log for Logstash adds the ability to log when a specific event takes an abnormal amount of time to make its way
-through the pipeline. Just like the normal application log, you can find slow-logs in your `--path.logs` directory.
-Slowlog is configured in the `logstash.yml` settings file with the following options:
+[[log4j2]]
+==== Log4j2 configuration
 
-[source,yaml]
-------------------------------
-slowlog.threshold.warn (default: -1)
-slowlog.threshold.info (default: -1)
-slowlog.threshold.debug (default: -1)
-slowlog.threshold.trace (default: -1)
-------------------------------
+Logstash ships with a `log4j2.properties` file with out-of-the-box settings. You
+can modify this file to change the rotation policy, type, and other
+https://logging.apache.org/log4j/2.x/manual/configuration.html#Loggers[log4j2
+configuration]. 
 
-By default, these values are set to `-1nanos` to represent an infinite threshold where no slowlog will be invoked. These `slowlog.threshold`
-fields are configured using a time-value format which enables a wide range of trigger intervals. The positive numeric ranges
-can be specified using the following time units: `nanos` (nanoseconds), `micros` (microseconds), `ms` (milliseconds), `s` (second), `m` (minute),
-`h` (hour), `d` (day).
+You must restart Logstash to apply any changes that you make to
+this file.
+Changes to `log4j2.properties` persist after Logstash is restarted.
 
-Here is an example:
+Here's an example using `outputs.elasticsearch`:
 
 [source,yaml]
-------------------------------
-slowlog.threshold.warn: 2s
-slowlog.threshold.info: 1s
-slowlog.threshold.debug: 500ms
-slowlog.threshold.trace: 100ms
-------------------------------
-
-In the above configuration, events that take longer than two seconds to be processed within a filter will be logged.
-The logs will include the full event and filter configuration that are responsible for the slowness.
+--------------------------------------------------
+logger.elasticsearchoutput.name = logstash.outputs.elasticsearch
+logger.elasticsearchoutput.level = debug
+--------------------------------------------------
 
 ==== Logging APIs
 
-You could modify the `log4j2.properties` file and restart your Logstash, but that is both tedious and leads to unnecessary
+For temporary logging changes, modifying the `log4j2.properties` file and restarting Logstash leads to unnecessary
 downtime. Instead, you can dynamically update logging levels through the logging API. These settings are effective
-immediately and do not need a restart.
+immediately and do not need a restart. 
 
 NOTE: By default, the logging API attempts to bind to `tcp:9600`. If this port is already in use by another Logstash
 instance, you need to launch Logstash with the `--http.port` flag specified to bind to a different port. See
 <<command-line-flags>> for more information.
 
-To update logging levels, take the subsystem/module you are interested in and prepend
-`logger.` to it. For example:
-
-[source,js]
---------------------------------------------------
-curl -XPUT 'localhost:9600/_node/logging?pretty' -H 'Content-Type: application/json' -d'
-{
-    "logger.logstash.outputs.elasticsearch" : "DEBUG"
-}
-'
---------------------------------------------------
-
-While this setting is in effect, Logstash emits DEBUG-level logs for __all__ the Elasticsearch outputs
-specified in your configuration. Please note this new setting is transient and will not survive a restart.
-
-Persistent changes should be added to `log4j2.properties`. For example:
-
-[source,yaml]
---------------------------------------------------
-logger.elasticsearchoutput.name = logstash.outputs.elasticsearch
-logger.elasticsearchoutput.level = debug
---------------------------------------------------
+===== Retrieve list of logging configurations
 
 To retrieve a list of logging subsystems available at runtime, you can do a `GET` request to `_node/logging`
 
@@ -126,6 +93,28 @@ Example response:
 }
 --------------------------------------------------
 
+===== Update logging levels
+
+Prepend the name of the subsystem, module, or plugin with `logger.`. 
+
+Here is an example using `outputs.elasticsearch`:
+
+[source,js]
+--------------------------------------------------
+curl -XPUT 'localhost:9600/_node/logging?pretty' -H 'Content-Type: application/json' -d'
+{
+    "logger.logstash.outputs.elasticsearch" : "DEBUG"
+}
+'
+--------------------------------------------------
+
+While this setting is in effect, Logstash emits DEBUG-level logs for __all__ the Elasticsearch outputs
+specified in your configuration. Please note this new setting is transient and will not survive a restart.
+
+NOTE: If you want logging changes to persist after a restart, add them to `log4j2.properties` instead. 
+
+===== Reset dynamic logging levels
+
 To reset any logging levels that may have been dynamically changed via the logging API, send a `PUT` request to
 `_node/logging/reset`. All logging levels will revert to the values specified in the `log4j2.properties` file.
 
@@ -133,3 +122,53 @@ To reset any logging levels that may have been dynamically changed via the loggi
 --------------------------------------------------
 curl -XPUT 'localhost:9600/_node/logging/reset?pretty'
 --------------------------------------------------
+
+==== Log file location
+
+You can specify the log file location using `--path.logs` setting.
+
+==== Slowlog
+
+Slowlog for Logstash adds the ability to log when a specific event takes an abnormal amount of time to make its way
+through the pipeline. Just like the normal application log, you can find slowlogs in your `--path.logs` directory.
+Slowlog is configured in the `logstash.yml` settings file with the following options:
+
+[source,yaml]
+------------------------------
+slowlog.threshold.warn (default: -1)
+slowlog.threshold.info (default: -1)
+slowlog.threshold.debug (default: -1)
+slowlog.threshold.trace (default: -1)
+------------------------------
+
+Slowlog is disabled by default. The default threshold values are set to
+`-1nanos` to represent an infinite threshold. No slowlog will be invoked. 
+
+===== Enable slowlog
+
+The `slowlog.threshold` fields use a time-value format which enables a wide
+range of trigger intervals. You can specify ranges using the following time
+units: `nanos` (nanoseconds), `micros` (microseconds), `ms` (milliseconds), `s`
+(second), `m` (minute), `h` (hour), `d` (day).
+
+Slowlog becomes more sensitive and logs more events as you raise the log level. 
+
+Example:
+
+[source,yaml]
+------------------------------
+slowlog.threshold.warn: 2s
+slowlog.threshold.info: 1s
+slowlog.threshold.debug: 500ms
+slowlog.threshold.trace: 100ms
+------------------------------
+
+In this example:
+
+* If the log level is set to `warn`, the log shows events that took longer than 2 seconds to process.
+* If the log level is set to `info`, the log shows events that took longer than 1s to process.
+* If the log level is set to `trace`, the log shows events that took longer than 100ms to process.
+* If the log level is set to `debug`, the log shows events that took longer than 500ms to process.
+
+The logs include the full event and filter configuration that are responsible
+for the slowness.
