diff --git a/config/logstash.yml b/config/logstash.yml
index c2bb685863a..9fc2fbde02a 100644
--- a/config/logstash.yml
+++ b/config/logstash.yml
@@ -165,6 +165,16 @@
 # api.auth.basic.username: "logstash-user"
 # api.auth.basic.password: "s3cUreP4$$w0rD"
 #
+# When setting `api.auth.basic.password`, the password should meet
+# the default password policy requirements.
+# The default password policy requires non-empty minimum 8 char string that
+# includes a digit, upper case letter and lower case letter.
+# Policy mode sets Logstash to WARN or ERROR when HTTP authentication password doesn't
+# meet the password policy requirements.
+# The default is WARN. Setting to ERROR enforces stronger passwords (recommended).
+#
+# api.auth.basic.password_policy.mode: WARN
+#
 # ------------ Module Settings ---------------
 # Define modules here.  Modules definitions must be defined as an array.
 # The simple way to see this is to prepend each `name` with a `-`, and keep
@@ -286,17 +296,6 @@
 # log.level: info
 # path.logs:
 #
-# ------------ Password Policy --------------
-# password_policy.mode: WARN or ERROR
-# password_policy:
-#  length:
-#    minimum: 8
-#  include:
-#    upper: REQUIRED
-#    lower: REQUIRED
-#    digit: REQUIRED
-#    symbol: OPTIONAL
-#
 # ------------ Other Settings --------------
 #
 # Allow or block running Logstash as superuser (default: true)
diff --git a/docker/data/logstash/env2yaml/env2yaml.go b/docker/data/logstash/env2yaml/env2yaml.go
index 0a1a6c69bd8..575826633c9 100644
--- a/docker/data/logstash/env2yaml/env2yaml.go
+++ b/docker/data/logstash/env2yaml/env2yaml.go
@@ -94,12 +94,15 @@ func normalizeSetting(setting string) (string, error) {
 		"modules",
 		"path.logs",
 		"path.plugins",
-		"password_policy.mode",
-		"password_policy.length.minimum",
-		"password_policy.include.upper",
-		"password_policy.include.lower",
-		"password_policy.include.digit",
-		"password_policy.include.symbol",
+		"api.auth.type",
+		"api.auth.basic.username",
+		"api.auth.basic.password",
+		"api.auth.basic.password_policy.mode",
+		"api.auth.basic.password_policy.length.minimum",
+		"api.auth.basic.password_policy.include.upper",
+		"api.auth.basic.password_policy.include.lower",
+		"api.auth.basic.password_policy.include.digit",
+		"api.auth.basic.password_policy.include.symbol",
 		"allow_superuser",
 		"xpack.monitoring.enabled",
 		"xpack.monitoring.collection.interval",
diff --git a/docs/static/monitoring/monitoring-apis.asciidoc b/docs/static/monitoring/monitoring-apis.asciidoc
index 2538df26c58..97050e765b2 100644
--- a/docs/static/monitoring/monitoring-apis.asciidoc
+++ b/docs/static/monitoring/monitoring-apis.asciidoc
@@ -58,7 +58,7 @@ You can also require HTTP Basic authentication by setting `api.auth.type: basic`
 --------------------------------------------------
 api.auth.type: basic
 api.auth.basic.username: "logstash"
-api.auth.basic.password: "stashy"
+api.auth.basic.password: "s3cUreP4$$w0rD"
 --------------------------------------------------
 
 NOTE: Usage of Keystore or Environment or variable replacements is encouraged for password-type fields to avoid storing them in plain text.
diff --git a/docs/static/settings-file.asciidoc b/docs/static/settings-file.asciidoc
index 6e8d523ef36..40a8387d846 100644
--- a/docs/static/settings-file.asciidoc
+++ b/docs/static/settings-file.asciidoc
@@ -279,10 +279,23 @@ Values other than `disabled` are currently considered BETA, and may produce unin
 | _N/A_
 
 | `api.auth.basic.password`
-| The password to require for HTTP Basic auth
-Ignored unless `api.auth.type` is set to `basic`.
+a| The password to require for HTTP Basic auth. Ignored unless `api.auth.type` is set to `basic`.
+It should meet default password policy which requires non-empty minimum 8 char string that includes a digit, upper case letter and lower case letter.
+The default password policy can be customized by following options:
+
+* Set `api.auth.basic.password_policy.include.digit` `REQUIRED` (default) to accept only passwords that include at least one digit or `OPTIONAL` to exclude from requirement.
+* Set `api.auth.basic.password_policy.include.upper` `REQUIRED` (default) to accept only passwords that include at least one upper case letter or `OPTIONAL` to exclude from requirement.
+* Set `api.auth.basic.password_policy.include.lower` `REQUIRED` (default) to accept only passwords that include at least one lower case letter or `OPTIONAL` to exclude from requirement.
+* Set `api.auth.basic.password_policy.include.symbol` `REQUIRED` to accept only passwords that include at least one special character or `OPTIONAL` (default) to exclude from requirement.
+* Set `api.auth.basic.password_policy.length.minimum` to a value from 9 to 1024 if you want to require more than the 8 character default setting for passwords.
+
 | _N/A_
 
+| `api.auth.basic.password_policy.mode`
+| Raises either `WARN` or `ERROR` message when password requirements are not met.
+Ignored unless `api.auth.type` is set to `basic`.
+| `WARN`
+
 | `log.level`
 a|
 The log level. Valid options are:
@@ -320,22 +333,4 @@ separating each log lines per pipeline could be helpful in case you need to trou
 | `allow_superuser`
 | Setting to `true` to allow or `false` to block running Logstash as a superuser.
 | `true`
-
-| `password_policy.mode`
-| Raises either `WARN` or `ERROR` message when password requirements are not met.
-| `WARN`
-
-| `password_policy.length.minimum`
-| Minimum number of characters required for a valid password.
-| 8
-
-| `password_policy.include`
-| Validates passwords based on `upper`, `lower`, `digit` and `symbol` requirements. When a character type is `REQUIRED`, Logstash will `WARN` or `ERROR` according to the `password_policy.mode` if the character type is not included in the password. Valid entries are `REQUIRED` and `OPTIONAL`.
-| `upper`: `REQUIRED`
-
-`lower`: `REQUIRED`
-
-`digit`: `REQUIRED`
-
-`symbol`: `OPTIONAL`
 |=======================================================================
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 3d4f0dd472b..75760925e35 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -77,12 +77,12 @@ module Environment
             Setting::String.new("api.auth.type", "none", true, %w(none basic)),
             Setting::String.new("api.auth.basic.username", nil, false).nullable,
           Setting::Password.new("api.auth.basic.password", nil, false).nullable,
-            Setting::String.new("password_policy.mode", "WARN", true, ["WARN", "ERROR"]),
-           Setting::Numeric.new("password_policy.length.minimum", 8),
-            Setting::String.new("password_policy.include.upper", "REQUIRED", true, ["REQUIRED", "OPTIONAL"]),
-            Setting::String.new("password_policy.include.lower", "REQUIRED", true, ["REQUIRED", "OPTIONAL"]),
-            Setting::String.new("password_policy.include.digit", "REQUIRED", true, ["REQUIRED", "OPTIONAL"]),
-            Setting::String.new("password_policy.include.symbol", "OPTIONAL", true, ["REQUIRED", "OPTIONAL"]),
+            Setting::String.new("api.auth.basic.password_policy.mode", "WARN", true, %w[WARN ERROR]),
+           Setting::Numeric.new("api.auth.basic.password_policy.length.minimum", 8),
+            Setting::String.new("api.auth.basic.password_policy.include.upper", "REQUIRED", true, %w[REQUIRED OPTIONAL]),
+            Setting::String.new("api.auth.basic.password_policy.include.lower", "REQUIRED", true, %w[REQUIRED OPTIONAL]),
+            Setting::String.new("api.auth.basic.password_policy.include.digit", "REQUIRED", true, %w[REQUIRED OPTIONAL]),
+            Setting::String.new("api.auth.basic.password_policy.include.symbol", "OPTIONAL", true, %w[REQUIRED OPTIONAL]),
            Setting::Boolean.new("api.ssl.enabled", false),
   Setting::ExistingFilePath.new("api.ssl.keystore.path", nil, false).nullable,
           Setting::Password.new("api.ssl.keystore.password", nil, false).nullable,
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 9c53d77849f..b0da430a2a7 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -555,12 +555,12 @@ def coerce(password)
           raise(ArgumentError, "Setting `#{name}` could not coerce LogStash::Util::Password value to password")
         end
 
-        policies = set_password_policies
+        policies = build_password_policies
         validatedResult = LogStash::Util::PasswordValidator.new(policies).validate(password.value)
         if validatedResult.length() > 0
           if @password_policies.fetch(:mode).eql?("WARN")
             logger.warn("Password #{validatedResult}.")
-            deprecation_logger.deprecated("Password policies may become more restrictive in future releases. Set the mode to 'ERROR' to enforce stricter password requirements now.")
+            deprecation_logger.deprecated("Password policies may become more restrictive in future releases. Set the 'api.auth.basic.password_policy.mode' to 'ERROR' to enforce stricter password requirements now.")
           else
             raise(ArgumentError, "Password #{validatedResult}.")
           end
@@ -568,9 +568,8 @@ def coerce(password)
         password
       end
 
-      def set_password_policies
+      def build_password_policies
         policies = {}
-        # check by default for empty password once basic auth is enabled
         policies[Util::PasswordPolicyType::EMPTY_STRING] = Util::PasswordPolicyParam.new
         policies[Util::PasswordPolicyType::LENGTH] = Util::PasswordPolicyParam.new("MINIMUM_LENGTH", @password_policies.dig(:length, :minimum).to_s)
         if @password_policies.dig(:include, :upper).eql?("REQUIRED")
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index ba472c115a1..6b2b843ac7c 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -53,18 +53,18 @@ def self.from_settings(logger, agent, settings)
         auth_basic[:password] = required_setting(settings, 'api.auth.basic.password', "api.auth.type")
 
         password_policies = {}
-        password_policies[:mode] = required_setting(settings, 'password_policy.mode', "api.auth.type")
-
+        password_policies[:mode] = required_setting(settings, 'api.auth.basic.password_policy.mode', "api.auth.type")
         password_policies[:length] = {}
-        password_policies[:length][:minimum] = required_setting(settings, 'password_policy.length.minimum', "api.auth.type")
-        if !password_policies[:length][:minimum].between(5, 1024)
-          fail(ArgumentError, "password_policy.length.minimum has to be between 5 and 1024.")
+        password_policies[:length][:minimum] = required_setting(settings, 'api.auth.basic.password_policy.length.minimum', "api.auth.type")
+        if !password_policies[:length][:minimum].between?(8, 1024)
+          fail(ArgumentError, "api.auth.basic.password_policy.length.minimum has to be between 8 and 1024.")
         end
         password_policies[:include] = {}
-        password_policies[:include][:upper] = required_setting(settings, 'password_policy.include.upper', "api.auth.type")
-        password_policies[:include][:lower] = required_setting(settings, 'password_policy.include.lower', "api.auth.type")
-        password_policies[:include][:digit] = required_setting(settings, 'password_policy.include.digit', "api.auth.type")
-        password_policies[:include][:symbol] = required_setting(settings, 'password_policy.include.symbol', "api.auth.type")
+        password_policies[:include][:upper] = required_setting(settings, 'api.auth.basic.password_policy.include.upper', "api.auth.type")
+        password_policies[:include][:lower] = required_setting(settings, 'api.auth.basic.password_policy.include.lower', "api.auth.type")
+        password_policies[:include][:digit] = required_setting(settings, 'api.auth.basic.password_policy.include.digit', "api.auth.type")
+        password_policies[:include][:symbol] = required_setting(settings, 'api.auth.basic.password_policy.include.symbol', "api.auth.type")
+
         auth_basic[:password_policies] = password_policies
         options[:auth_basic] = auth_basic.freeze
       else
diff --git a/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java b/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java
index 13e0654e545..fe5d72e46e8 100644
--- a/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java
+++ b/logstash-core/src/main/java/org/logstash/secret/password/LengthValidator.java
@@ -32,22 +32,17 @@ public class LengthValidator implements Validator {
     /**
      Required minimum length of the password.
      */
-    private static final int MINIMUM_LENGTH = 5;
+    private static final int MINIMUM_LENGTH = 8;
 
     /**
      Required maximum length of the password.
      */
     private static final int MAXIMUM_LENGTH = 1024;
 
-    /**
-     A policy failure reasoning for password length.
-     */
-    private static final String LENGTH_REASONING = "must be length of between " + MINIMUM_LENGTH + " and " + MAXIMUM_LENGTH;
-
     /**
      Required minimum length of the password.
      */
-    private int minimumLength;
+    private int minimumLength = MINIMUM_LENGTH;
 
     public LengthValidator(int minimumLength) {
         if (minimumLength < MINIMUM_LENGTH || minimumLength > MAXIMUM_LENGTH) {
@@ -58,6 +53,7 @@ public LengthValidator(int minimumLength) {
 
     @Override
     public Optional<String> validate(String password) {
+        final String LENGTH_REASONING = "must be length of between " + minimumLength + " and " + MAXIMUM_LENGTH;
         return Strings.isNullOrEmpty(password) || password.length() < minimumLength
                 ? Optional.of(LENGTH_REASONING)
                 : Optional.empty();
diff --git a/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java b/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java
index 56f81686add..298de93adac 100644
--- a/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/password/LengthValidatorTest.java
@@ -15,7 +15,7 @@ public class LengthValidatorTest {
 
     @Before
     public void setUp() {
-        lengthValidator = new LengthValidator(8);
+        lengthValidator = new LengthValidator(10);
     }
 
     @Test
@@ -28,6 +28,6 @@ public void testValidateSuccess() {
     public void testValidateFailure() {
         Optional<String> result = lengthValidator.validate("Pwd");
         Assert.assertTrue(result.isPresent());
-        Assert.assertEquals(result.get(), "must be length of between 5 and 1024");
+        Assert.assertEquals(result.get(), "must be length of between 10 and 1024");
     }
 }
\ No newline at end of file
