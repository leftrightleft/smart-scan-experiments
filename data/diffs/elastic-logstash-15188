diff --git a/.rubocop.yml b/.rubocop.yml
index 7271de775f0..cab4cc57351 100644
--- a/.rubocop.yml
+++ b/.rubocop.yml
@@ -27,6 +27,12 @@ Lint/DeprecatedClassMethods:
 
 #################### Layout ###########################
 ##### Enabled Cops #####
+Layout/AccessModifierIndentation:
+  Enabled: true
+  EnforcedStyle: indent
+Layout/ArgumentAlignment:
+  Enabled: true
+  EnforcedStyle:  with_fixed_indentation
 Layout/TrailingWhitespace:
   Enabled: true
 Layout/TrailingEmptyLines:
@@ -39,10 +45,6 @@ Layout/SpaceAfterSemicolon:
   Enabled: true
 
 ##### Need review #####
-Layout/AccessModifierIndentation:
-  Enabled: false
-Layout/ArgumentAlignment:
-  Enabled: false
 Layout/ArrayAlignment:
   Enabled: false
 Layout/AssignmentIndentation:
diff --git a/lib/pluginmanager/install.rb b/lib/pluginmanager/install.rb
index 085b6430214..4c097a44d84 100644
--- a/lib/pluginmanager/install.rb
+++ b/lib/pluginmanager/install.rb
@@ -192,8 +192,8 @@ def update_logstash_mixin_dependencies(install_list)
     if unlock_dependencies.any?
       puts "Updating mixin dependencies #{unlock_dependencies.join(', ')}"
       LogStash::Bundler.invoke! update: unlock_dependencies,
-                                rubygems_source: gemfile.gemset.sources,
-                                conservative: conservative?
+        rubygems_source: gemfile.gemset.sources,
+        conservative: conservative?
     end
 
     unlock_dependencies
diff --git a/lib/pluginmanager/update.rb b/lib/pluginmanager/update.rb
index 6d3d7a86bf5..6f43b93e130 100644
--- a/lib/pluginmanager/update.rb
+++ b/lib/pluginmanager/update.rb
@@ -82,9 +82,9 @@ def update_gems!
     # Bundler cannot update and clean gems in one operation so we have to call the CLI twice.
     Bundler.settings.temporary(:frozen => false) do # Unfreeze the bundle when updating gems
       output = LogStash::Bundler.invoke! update: plugins,
-                                         rubygems_source: gemfile.gemset.sources,
-                                         local: local?,
-                                         conservative: conservative?
+        rubygems_source: gemfile.gemset.sources,
+        local: local?,
+        conservative: conservative?
       output << LogStash::Bundler.genericize_platform unless output.nil?
     end
 
diff --git a/lib/pluginmanager/utils/downloader.rb b/lib/pluginmanager/utils/downloader.rb
index 48594bc55cd..4247b8a5008 100644
--- a/lib/pluginmanager/utils/downloader.rb
+++ b/lib/pluginmanager/utils/downloader.rb
@@ -30,9 +30,9 @@ class ProgressbarFeedback
 
       def initialize(max)
         @progress_bar = ProgressBar.create(:title => TITLE,
-                                           :starting_at => 0,
-                                           :total => max,
-                                           :format => FORMAT)
+          :starting_at => 0,
+          :total => max,
+          :format => FORMAT)
       end
 
       def update(status)
diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 3971d41738d..cd459fcf4bc 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -193,10 +193,10 @@ def converge_state_and_update
     update_metrics(converge_result)
 
     logger.info(
-        "Pipelines running",
-        :count => running_pipelines.size,
-        :running_pipelines => running_pipelines.keys,
-        :non_running_pipelines => non_running_pipelines.keys
+      "Pipelines running",
+      :count => running_pipelines.size,
+      :running_pipelines => running_pipelines.keys,
+      :non_running_pipelines => non_running_pipelines.keys
     ) if converge_result.success? && converge_result.total > 0
 
     dispatch_events(converge_result)
@@ -245,25 +245,25 @@ def id
         uuid = ::File.open(id_path) {|f| f.each_line.first.chomp }
       rescue => e
         logger.warn("Could not open persistent UUID file!",
-                    :path => id_path,
-                    :error => e.message,
-                    :class => e.class.name)
+          :path => id_path,
+          :error => e.message,
+          :class => e.class.name)
       end
     end
 
     if !uuid
       uuid = SecureRandom.uuid
       logger.info("No persistent UUID file found. Generating new UUID",
-                  :uuid => uuid,
-                  :path => id_path)
+        :uuid => uuid,
+        :path => id_path)
       begin
         ::File.open(id_path, 'w') {|f| f.write(uuid) }
       rescue => e
         logger.warn("Could not write persistent UUID file! Will use ephemeral UUID",
-                    :uuid => uuid,
-                    :path => id_path,
-                    :error => e.message,
-                    :class => e.class.name)
+          :uuid => uuid,
+          :path => id_path,
+          :error => e.message,
+          :class => e.class.name)
       end
     end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 4a6063d2823..dcc1a339685 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -150,9 +150,9 @@ def validate(expr_attributes)
         if !codec_attribute.nil? && codec_attribute.kind_of?(::Array)
           raise ::LogStash::ConfigurationError.new(
             I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
-                   :plugin => plugin_name,
-                   :type => section_type,
-                   :line => input.line_of(interval.first)
+              :plugin => plugin_name,
+              :type => section_type,
+              :line => input.line_of(interval.first)
             )
           )
         end
diff --git a/logstash-core/lib/logstash/config/config_ast.rb b/logstash-core/lib/logstash/config/config_ast.rb
index 385edc77fe3..2da75a34f9c 100644
--- a/logstash-core/lib/logstash/config/config_ast.rb
+++ b/logstash-core/lib/logstash/config/config_ast.rb
@@ -374,11 +374,11 @@ def validate!
       if duplicate_values.size > 0
         raise ConfigurationError.new(
           I18n.t("logstash.runner.configuration.invalid_plugin_settings_duplicate_keys",
-                 :keys => duplicate_values.join(', '),
-                 :line => input.line_of(interval.first),
-                 :column => input.column_of(interval.first),
-                 :byte => interval.first + 1,
-                 :after => input[0..interval.first]
+            :keys => duplicate_values.join(', '),
+            :line => input.line_of(interval.first),
+            :column => input.column_of(interval.first),
+            :byte => interval.first + 1,
+            :after => input[0..interval.first]
                 )
         )
       end
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index bcf60c3ba39..d0515fa4b89 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -139,7 +139,7 @@ def config_init(params)
         extra.gsub!("%PLUGIN%", self.class.config_name)
         raise LogStash::ConfigurationError,
           I18n.t("logstash.runner.configuration.obsolete", :name => name,
-                 :plugin => self.class.config_name, :extra => extra)
+            :plugin => self.class.config_name, :extra => extra)
       end
     end
 
@@ -311,8 +311,8 @@ def validate_check_required_parameter_names(params)
         value = params[config_key]
         if value.nil? || (config[:list] && Array(value).empty?)
           self.logger.error(I18n.t("logstash.runner.configuration.setting_missing",
-                               :setting => config_key, :plugin => @plugin_name,
-                               :type => @plugin_type))
+            :setting => config_key, :plugin => @plugin_name,
+            :type => @plugin_type))
           is_valid = false
         end
       end
@@ -361,10 +361,10 @@ def validate_check_parameter_values(params)
             params[key] = processed_value
           else
             self.logger.error(I18n.t("logstash.runner.configuration.setting_invalid",
-                                 :plugin => @plugin_name, :type => @plugin_type,
-                                 :setting => key, :value => value.inspect,
-                                 :value_type => config_settings[:validate],
-                                 :note => processed_value))
+              :plugin => @plugin_name, :type => @plugin_type,
+              :setting => key, :value => value.inspect,
+              :value_type => config_settings[:validate],
+              :note => processed_value))
           end
 
           all_params_valid &&= is_valid
@@ -445,7 +445,7 @@ def validate_value(value, validator)
               # which ensure the inner plugin has access to the outer's execution context and metric store.
               # This deprecation exists to warn plugins that call `Config::Mixin::validate_value` directly.
               self.deprecation_logger.deprecated("Codec instantiated by `Config::Mixin::DSL::validate_value(String, :codec)` which cannot propagate parent plugin's execution context or metrics. ",
-                                                 self.logger.debug? ? {:backtrace => caller} : {})
+                self.logger.debug? ? {:backtrace => caller} : {})
               value = LogStash::Codecs::Delegator.new LogStash::Plugin.lookup("codec", value.first).new
               return true, value
             else
diff --git a/logstash-core/lib/logstash/config/modules_common.rb b/logstash-core/lib/logstash/config/modules_common.rb
index 5d5db1b878d..1243c55687d 100644
--- a/logstash-core/lib/logstash/config/modules_common.rb
+++ b/logstash-core/lib/logstash/config/modules_common.rb
@@ -100,8 +100,8 @@ def self.pipeline_configs(settings)
             if esconnected && kbnconnected
               current_module.add_kibana_version(kbnclient.version_parts)
               current_module.import(
-                  LogStash::Modules::ElasticsearchImporter.new(esclient),
-                  LogStash::Modules::KibanaImporter.new(kbnclient)
+                LogStash::Modules::ElasticsearchImporter.new(esclient),
+                LogStash::Modules::KibanaImporter.new(kbnclient)
                 )
             else
               connect_fail_args[:module_name] = module_name
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index 49d56423723..d119058f0dc 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -200,7 +200,7 @@ def filter_matched(event)
     @remove_field.each do |field|
       field = event.sprintf(field)
       @logger.debug? and @logger.debug("filters/#{self.class.name}: removing field",
-                                       :field => field)
+        :field => field)
       event.remove(field)
     end
 
diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index c481c186350..108a8498c9b 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -55,12 +55,12 @@ def push(namespaces_path, key, type, *metric_type_params)
         logger.error("Collector: Cannot record metric", :exception => e)
       rescue NameError => e
         logger.error("Collector: Cannot create concrete class for this metric type",
-                     :type => type,
-                     :namespaces_path => namespaces_path,
-                     :key => key,
-                     :metrics_params => metric_type_params,
-                     :exception => e,
-                     :stacktrace => e.backtrace)
+          :type => type,
+          :namespaces_path => namespaces_path,
+          :key => key,
+          :metrics_params => metric_type_params,
+          :exception => e,
+          :stacktrace => e.backtrace)
       end
     end
 
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
index 98750675736..a59ef8a2ed2 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
@@ -43,20 +43,20 @@ def update(time, result, exception)
         # On a busy system this can happen, we just log it as a debug
         # event instead of an error, Some of the JVM calls can take a long time or block.
         logger.debug("Timeout exception",
-                :poller => self,
-                :result => result,
-                :polling_timeout => @options[:polling_timeout],
-                :polling_interval => @options[:polling_interval],
-                :exception => exception.class,
-                :executed_at => time)
+          :poller => self,
+          :result => result,
+          :polling_timeout => @options[:polling_timeout],
+          :polling_interval => @options[:polling_interval],
+          :exception => exception.class,
+          :executed_at => time)
       else
         logger.error("Exception",
-                :poller => self,
-                :result => result,
-                :exception => exception.class,
-                :polling_timeout => @options[:polling_timeout],
-                :polling_interval => @options[:polling_interval],
-                :executed_at => time)
+          :poller => self,
+          :result => result,
+          :exception => exception.class,
+          :polling_timeout => @options[:polling_timeout],
+          :polling_interval => @options[:polling_interval],
+          :executed_at => time)
       end
     end
 
@@ -66,8 +66,8 @@ def collect
 
     def start
       logger.debug("Starting",
-                   :polling_interval => @options[:polling_interval],
-                   :polling_timeout => @options[:polling_timeout]) if logger.debug?
+        :polling_interval => @options[:polling_interval],
+        :polling_timeout => @options[:polling_timeout]) if logger.debug?
 
       collect # Collect data right away if possible
       @task.execute
diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 079be843224..1ad229de9c1 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -51,7 +51,7 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @worker_threads = []
 
     @worker_observer = org.logstash.execution.WorkerObserver.new(process_events_namespace_metric,
-                                                                 pipeline_events_namespace_metric)
+      pipeline_events_namespace_metric)
 
     @drain_queue =  settings.get_value("queue.drain") || settings.get("queue.type") == MEMORY
 
@@ -77,8 +77,8 @@ def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @finished_run = Concurrent::AtomicBoolean.new(false)
 
     @logger.info(I18n.t('logstash.pipeline.effective_ecs_compatibility',
-                        :pipeline_id       => pipeline_id,
-                        :ecs_compatibility => settings.get('pipeline.ecs_compatibility')))
+      :pipeline_id       => pipeline_id,
+      :ecs_compatibility => settings.get('pipeline.ecs_compatibility')))
 
     @thread = nil
   end # def initialize
@@ -108,7 +108,7 @@ def safe_pipeline_worker_count
       # warn if the default is multiple
       if default > 1
         @logger.warn("Defaulting pipeline worker threads to 1 because there are some filters that might not work with multiple worker threads",
-                     default_logging_keys(:count_was => default, :filters => plugins))
+          default_logging_keys(:count_was => default, :filters => plugins))
         return 1 # can't allow the default value to propagate if there are unsafe filters
       end
     end
@@ -416,10 +416,10 @@ def inputworker(plugin)
       if plugin.stop?
         @logger.debug(
           "Input plugin raised exception during shutdown, ignoring it.",
-           default_logging_keys(
-             :plugin => plugin.class.config_name,
-             :exception => e.message,
-             :backtrace => e.backtrace))
+          default_logging_keys(
+            :plugin => plugin.class.config_name,
+            :exception => e.message,
+            :backtrace => e.backtrace))
         return
       end
 
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 8a73ecdef9d..e433cbeeadd 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -71,9 +71,9 @@ def initialize(params={})
     # need to access settings statically because plugins are initialized in config_ast with no context.
     settings = LogStash::SETTINGS
     @slow_logger = self.slow_logger(settings.get("slowlog.threshold.warn").to_nanos,
-                                    settings.get("slowlog.threshold.info").to_nanos,
-                                    settings.get("slowlog.threshold.debug").to_nanos,
-                                    settings.get("slowlog.threshold.trace").to_nanos)
+      settings.get("slowlog.threshold.info").to_nanos,
+      settings.get("slowlog.threshold.debug").to_nanos,
+      settings.get("slowlog.threshold.trace").to_nanos)
     @params = LogStash::Util.deep_clone(params)
     # The id should always be defined normally, but in tests that might not be the case
     # In the future we may make this more strict in the Plugin API
diff --git a/logstash-core/lib/logstash/plugins/ca_trusted_fingerprint_support.rb b/logstash-core/lib/logstash/plugins/ca_trusted_fingerprint_support.rb
index a610bca4d55..e272e2491c2 100644
--- a/logstash-core/lib/logstash/plugins/ca_trusted_fingerprint_support.rb
+++ b/logstash-core/lib/logstash/plugins/ca_trusted_fingerprint_support.rb
@@ -12,7 +12,7 @@ def self.included(base)
       extend LogStash::Util::ThreadSafeAttributes
 
       lazy_init_attr(:trust_strategy_for_ca_trusted_fingerprint,
-                     variable: :@_trust_strategy_for_ca_trusted_fingerprint) do
+        variable: :@_trust_strategy_for_ca_trusted_fingerprint) do
         require 'logstash/patches/manticore/trust_strategies'
         @ca_trusted_fingerprint && CATrustedFingerprintTrustStrategy.new(@ca_trusted_fingerprint)
       end
diff --git a/logstash-core/lib/logstash/plugins/ecs_compatibility_support.rb b/logstash-core/lib/logstash/plugins/ecs_compatibility_support.rb
index 21398ba776a..839ae69ebf5 100644
--- a/logstash-core/lib/logstash/plugins/ecs_compatibility_support.rb
+++ b/logstash-core/lib/logstash/plugins/ecs_compatibility_support.rb
@@ -4,7 +4,7 @@ module ECSCompatibilitySupport
       def self.included(base)
         base.extend(ArgumentValidator)
         base.config(:ecs_compatibility, :validate => :ecs_compatibility_argument,
-                                        :attr_accessor => false)
+          :attr_accessor => false)
       end
 
       def ecs_compatibility
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 9352ef725f1..32e796692d2 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -70,9 +70,9 @@ class LogStash::Runner < Clamp::StrictCommand
     :default => LogStash::SETTINGS.get_default("node.name")
 
   option ["--enable-local-plugin-development"], :flag,
-         I18n.t("logstash.runner.flag.enable-local-plugin-development"),
-         :attribute_name => "enable-local-plugin-development",
-         :default => LogStash::SETTINGS.get_default("enable-local-plugin-development")
+    I18n.t("logstash.runner.flag.enable-local-plugin-development"),
+    :attribute_name => "enable-local-plugin-development",
+    :default => LogStash::SETTINGS.get_default("enable-local-plugin-development")
 
   # Config Settings
   option ["-f", "--path.config"], "CONFIG_PATH",
@@ -87,14 +87,14 @@ class LogStash::Runner < Clamp::StrictCommand
     :attribute_name => "config.string"
 
   option ["--field-reference-escape-style"], "STYLE",
-         I18n.t("logstash.runner.flag.field-reference-escape-style"),
-         :default => LogStash::SETTINGS.get_default("config.field_reference.escape_style"),
-         :attribute_name => "config.field_reference.escape_style"
+    I18n.t("logstash.runner.flag.field-reference-escape-style"),
+    :default => LogStash::SETTINGS.get_default("config.field_reference.escape_style"),
+    :attribute_name => "config.field_reference.escape_style"
 
   option ["--event_api.tags.illegal"], "STRING",
-         I18n.t("logstash.runner.flag.event_api.tags.illegal"),
-         :default => LogStash::SETTINGS.get_default("event_api.tags.illegal"),
-         :attribute_name => "event_api.tags.illegal"
+    I18n.t("logstash.runner.flag.event_api.tags.illegal"),
+    :default => LogStash::SETTINGS.get_default("event_api.tags.illegal"),
+    :attribute_name => "event_api.tags.illegal"
 
   # Module settings
   option ["--modules"], "MODULES",
@@ -137,9 +137,9 @@ class LogStash::Runner < Clamp::StrictCommand
     :default => LogStash::SETTINGS.get_default("pipeline.ordered")
 
   option ["--plugin-classloaders"], :flag,
-         I18n.t("logstash.runner.flag.plugin-classloaders"),
-         :attribute_name => "pipeline.plugin_classloaders",
-         :default => LogStash::SETTINGS.get_default("pipeline.plugin_classloaders")
+    I18n.t("logstash.runner.flag.plugin-classloaders"),
+    :attribute_name => "pipeline.plugin_classloaders",
+    :default => LogStash::SETTINGS.get_default("pipeline.plugin_classloaders")
 
   option ["-b", "--pipeline.batch.size"], "SIZE",
     I18n.t("logstash.runner.flag.pipeline-batch-size"),
@@ -311,7 +311,7 @@ def execute
 
     if JavaVersion::CURRENT < JavaVersion::JAVA_11
       logger.warn I18n.t("logstash.runner.java.version",
-                                             :java_home => java.lang.System.getProperty("java.home"))
+        :java_home => java.lang.System.getProperty("java.home"))
     end
 
     logger.warn I18n.t("logstash.runner.java.home") if ENV["JAVA_HOME"]
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index d1df037cda7..abdeb229a19 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -842,15 +842,15 @@ def initialize(canonical_proxy, alias_name)
 
       def set(value)
         deprecation_logger.deprecated(I18n.t("logstash.settings.deprecation.set",
-                                             deprecated_alias: name,
-                                             canonical_name: canonical_proxy.name))
+          deprecated_alias: name,
+          canonical_name: canonical_proxy.name))
         super
       end
 
       def value
         logger.warn(I18n.t("logstash.settings.deprecation.queried",
-                           deprecated_alias: name,
-                           canonical_name: canonical_proxy.name))
+          deprecated_alias: name,
+          canonical_name: canonical_proxy.name))
         @canonical_proxy.value
       end
 
@@ -916,8 +916,8 @@ def format(output)
       def validate_value
         if deprecated_alias.set? && canonical_setting.set?
           fail(ArgumentError, I18n.t("logstash.settings.deprecation.ambiguous",
-                                     canonical_name: canonical_setting.name,
-                                     deprecated_alias: deprecated_alias.name))
+            canonical_name: canonical_setting.name,
+            deprecated_alias: deprecated_alias.name))
         end
 
         super
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 37dfb814eaa..49d9779d79e 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -80,11 +80,11 @@ def self.from_settings(logger, agent, settings)
       end
 
       logger.debug("Initializing API WebServer",
-                   "api.http.host"        => options[:http_host],
-                   "api.http.port"        => settings.get("api.http.port"),
-                   "api.ssl.enabled"      => settings.get("api.ssl.enabled"),
-                   "api.auth.type"        => settings.get("api.auth.type"),
-                   "api.environment"      => settings.get("api.environment"))
+        "api.http.host"        => options[:http_host],
+        "api.http.port"        => settings.get("api.http.port"),
+        "api.ssl.enabled"      => settings.get("api.ssl.enabled"),
+        "api.auth.type"        => settings.get("api.auth.type"),
+        "api.environment"      => settings.get("api.environment"))
 
       new(logger, agent, options)
     end
@@ -256,7 +256,7 @@ def validate_keystore_access!
 
       java.security.KeyStore.getInstance("JKS")
           .load(java.io.FileInputStream.new(@ssl_params.fetch(:keystore_path)),
-                @ssl_params.fetch(:keystore_password).value.chars&.to_java(:char))
+            @ssl_params.fetch(:keystore_password).value.chars&.to_java(:char))
     rescue => e
       raise ArgumentError.new("API Keystore could not be opened (#{e})")
     end
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index 776c0ed290c..db4829c5f39 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -615,7 +615,7 @@ def register
   describe "using persisted queue" do
     it_behaves_like "all Agent tests" do
       let(:agent_settings) { mock_settings("queue.type" => "persisted", "queue.drain" => true,
-                                           "queue.page_capacity" => "8mb", "queue.max_bytes" => "64mb") }
+        "queue.page_capacity" => "8mb", "queue.max_bytes" => "64mb") }
     end
   end
 end
diff --git a/logstash-core/spec/logstash/api/commands/stats_spec.rb b/logstash-core/spec/logstash/api/commands/stats_spec.rb
index cd8936266be..4fbc31e5470 100644
--- a/logstash-core/spec/logstash/api/commands/stats_spec.rb
+++ b/logstash-core/spec/logstash/api/commands/stats_spec.rb
@@ -81,11 +81,11 @@
 
     it "should validate flow metric keys are exist" do
       expect(report.keys).to include(
-                               :input_throughput,
-                               :output_throughput,
-                               :filter_throughput,
-                               :queue_backpressure,
-                               :worker_concurrency)
+        :input_throughput,
+        :output_throughput,
+        :filter_throughput,
+        :queue_backpressure,
+        :worker_concurrency)
     end
   end
 
@@ -143,8 +143,8 @@
 
     it "return reloads information" do
       expect(report.keys).to include(
-      :successes,
-      :failures,
+        :successes,
+        :failures,
       )
     end
   end
@@ -175,30 +175,30 @@
       end
       it "returns flow metric information" do
         expect(report[:main][:flow].keys).to include(
-                                                 :output_throughput,
-                                                 :filter_throughput,
-                                                 :queue_backpressure,
-                                                 :worker_concurrency,
-                                                 :input_throughput,
-                                                 :queue_persisted_growth_bytes,
-                                                 :queue_persisted_growth_events
+          :output_throughput,
+          :filter_throughput,
+          :queue_backpressure,
+          :worker_concurrency,
+          :input_throughput,
+          :queue_persisted_growth_bytes,
+          :queue_persisted_growth_events
                                                )
       end
       it "returns queue metric information" do
         expect(report[:main][:queue].keys).to include(
-                                               :capacity,
-                                               :events,
-                                               :type,
-                                               :data)
+          :capacity,
+          :events,
+          :type,
+          :data)
         expect(report[:main][:queue][:capacity].keys).to include(
-                                                           :page_capacity_in_bytes,
-                                                           :max_queue_size_in_bytes,
-                                                           :queue_size_in_bytes,
-                                                           :max_unread_events)
+          :page_capacity_in_bytes,
+          :max_queue_size_in_bytes,
+          :queue_size_in_bytes,
+          :max_unread_events)
         expect(report[:main][:queue][:data].keys).to include(
-                                                           :storage_type,
-                                                           :path,
-                                                           :free_space_in_bytes)
+          :storage_type,
+          :path,
+          :free_space_in_bytes)
       end
     end
     context "when using multiple pipelines" do
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 3bb464bf019..f67ad0acda0 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -205,9 +205,9 @@ def rand_meta
         let(:plugin_source) { "generator { codec => plain codec => json }" }
         let(:expected_error_message) {
           I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
-                 :plugin => "generator",
-                 :type => "input",
-                 :line => "1"
+            :plugin => "generator",
+            :type => "input",
+            :line => "1"
           )
         }
 
@@ -234,9 +234,9 @@ def rand_meta
         let(:source) { "input { generator {} } output { stdout { codec => plain codec => json } }" }
         let(:expected_error_message) {
           I18n.t("logstash.runner.configuration.invalid_plugin_settings_multiple_codecs",
-                 :plugin => "stdout",
-                 :type => "output",
-                 :line => "1"
+            :plugin => "stdout",
+            :type => "output",
+            :line => "1"
           )
         }
 
@@ -379,8 +379,8 @@ def rand_meta
 
         it "should contain both inputs" do
           expect(input).to ir_eql(j.iComposeParallel(
-                                j.iPlugin(rand_meta, INPUT, "generator", {"count" => 1}),
-                                j.iPlugin(rand_meta, INPUT, "generator", {"count" => 2})
+            j.iPlugin(rand_meta, INPUT, "generator", {"count" => 1}),
+            j.iPlugin(rand_meta, INPUT, "generator", {"count" => 2})
                               ))
         end
       end
@@ -431,8 +431,8 @@ def compose(*statements)
 
         it "should contain both section declarations, in order" do
           expect(compiled_section).to ir_eql(compose(
-                                      splugin("aplugin", {"count" => 1}),
-                                        splugin("aplugin", {"count" => 2})
+            splugin("aplugin", {"count" => 1}),
+            splugin("aplugin", {"count" => 2})
                                       ))
                                     end
       end
@@ -450,8 +450,8 @@ def compose(*statements)
 
         it "should contain both" do
           expect(compiled_section).to ir_eql(compose(
-                                        splugin("aplugin", {"count" => 1}),
-                                        splugin("aplugin", {"count" => 2})
+            splugin("aplugin", {"count" => 1}),
+            splugin("aplugin", {"count" => 2})
                                       ))
         end
 
@@ -688,9 +688,9 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                            rand_meta,
-                                            j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                            splugin("grok")
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              splugin("grok")
                                           )
                                        )
           end
@@ -701,10 +701,10 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          j.noop,
-                                          splugin("fplugin"),
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              j.noop,
+              splugin("fplugin"),
                                         )
                                        )
           end
@@ -715,10 +715,10 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          j.noop,
-                                          j.noop
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              j.noop,
+              j.noop
                                         )
                                        )
           end
@@ -729,10 +729,10 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          splugin("tplugin"),
-                                          splugin("fplugin")
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              splugin("tplugin"),
+              splugin("fplugin")
                                         )
                                        )
           end
@@ -743,15 +743,15 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          splugin("tplugin"),
-                                          j.iIf(
-                                            rand_meta,
-                                            j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
-                                            splugin("eifplugin"),
-                                            splugin("fplugin")
-                                          )
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              splugin("tplugin"),
+              j.iIf(
+                rand_meta,
+                j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
+                splugin("eifplugin"),
+                splugin("fplugin")
+              )
                                         )
                                        )
           end
@@ -771,20 +771,20 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          splugin("tplugin"),
-                                          j.iIf(
-                                            rand_meta,
-                                            j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
-                                            splugin("eifplugin"),
-                                            j.iIf(
-                                              rand_meta,
-                                              j.eEq(j.eEventValue("[baz]"), j.eEventValue("[bot]")),
-                                              splugin("eeifplugin"),
-                                              splugin("fplugin")
-                                            )
-                                          )
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              splugin("tplugin"),
+              j.iIf(
+                rand_meta,
+                j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
+                splugin("eifplugin"),
+                j.iIf(
+                  rand_meta,
+                  j.eEq(j.eEventValue("[baz]"), j.eEventValue("[bot]")),
+                  splugin("eeifplugin"),
+                  splugin("fplugin")
+                )
+              )
                                         )
                                        )
           end
@@ -806,23 +806,23 @@ def compose(*statements)
 
           it "should compile correctly" do
             expect(compiled_section).to ir_eql(j.iIf(
-                                          rand_meta,
-                                          j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
-                                          j.iIf(rand_meta, j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
-                                                   splugin("aplugin"),
-                                                   j.noop
-                                                  ),
-                                          j.iIf(
-                                            rand_meta,
-                                            j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
-                                            splugin("bplugin"),
-                                            j.iIf(
-                                              rand_meta,
-                                              j.eEq(j.eEventValue("[baz]"), j.eEventValue("[bot]")),
-                                              splugin("cplugin"),
-                                              splugin("dplugin")
-                                            )
-                                          )
+              rand_meta,
+              j.eEq(j.eEventValue("[foo]"), j.eEventValue("[bar]")),
+              j.iIf(rand_meta, j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
+                splugin("aplugin"),
+                j.noop
+                      ),
+              j.iIf(
+                rand_meta,
+                j.eEq(j.eEventValue("[bar]"), j.eEventValue("[baz]")),
+                splugin("bplugin"),
+                j.iIf(
+                  rand_meta,
+                  j.eEq(j.eEventValue("[baz]"), j.eEventValue("[bot]")),
+                  splugin("cplugin"),
+                  splugin("dplugin")
+                )
+              )
                                         )
                                        )
           end
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index 37fda51511f..c0dff595c01 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -46,7 +46,7 @@ def register; end
 
   subject {
     LogStash::Plugins::PluginFactory.filter_delegator(
-        described_class, plugin_klass, config, metric, execution_context
+      described_class, plugin_klass, config, metric, execution_context
     )
   }
 
diff --git a/logstash-core/spec/logstash/instrument/collector_spec.rb b/logstash-core/spec/logstash/instrument/collector_spec.rb
index bd8b950a476..dc91228bd28 100644
--- a/logstash-core/spec/logstash/instrument/collector_spec.rb
+++ b/logstash-core/spec/logstash/instrument/collector_spec.rb
@@ -36,7 +36,7 @@
       it "logs an error but dont crash" do
         expect(subject.logger).to receive(:error)
           .with("Collector: Cannot create concrete class for this metric type",
-        hash_including({ :type => wrong_type, :namespaces_path => namespaces_path }))
+            hash_including({ :type => wrong_type, :namespaces_path => namespaces_path }))
 
           subject.push(namespaces_path, key, wrong_type, :increment)
       end
@@ -50,7 +50,7 @@
 
         expect(subject.logger).to receive(:error)
           .with("Collector: Cannot record metric",
-          hash_including({ :exception => instance_of(LogStash::Instrument::MetricStore::NamespacesExpectedError) }))
+            hash_including({ :exception => instance_of(LogStash::Instrument::MetricStore::NamespacesExpectedError) }))
 
           subject.push(conflicting_namespaces, :random_key, :counter, :increment)
       end
diff --git a/logstash-core/spec/logstash/java_filter_delegator_spec.rb b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
index 75bfca54b37..d041474c938 100644
--- a/logstash-core/spec/logstash/java_filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/java_filter_delegator_spec.rb
@@ -36,7 +36,7 @@ def increment(_)
   end
   let(:metric) {
     LogStash::Instrument::NamespacedMetric.new(
-        LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new), [:filter]
+      LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new), [:filter]
     )
   }
   let(:counter_in) {
@@ -70,7 +70,7 @@ def register; end
 
   subject {
     LogStash::Plugins::PluginFactory.filter_delegator(
-        described_class, plugin_klass, config, metric, execution_context
+      described_class, plugin_klass, config, metric, execution_context
     )
   }
 
diff --git a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
index 7adc7a91f93..0cd308fb191 100644
--- a/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
+++ b/logstash-core/spec/logstash/plugins/builtin/pipeline_input_output_spec.rb
@@ -33,7 +33,7 @@
   let(:inputs) { [input] }
   let(:metric) {
     LogStash::Instrument::NamespacedMetric.new(
-        LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new), [:filter]
+      LogStash::Instrument::Metric.new(LogStash::Instrument::Collector.new), [:filter]
     )
   }
 
diff --git a/logstash-core/spec/support/helpers.rb b/logstash-core/spec/support/helpers.rb
index 5f96083e567..4424459d905 100644
--- a/logstash-core/spec/support/helpers.rb
+++ b/logstash-core/spec/support/helpers.rb
@@ -111,8 +111,8 @@ def compose_pipeline_config(pipeline_id, config_string, pipeline_settings)
 def mock_pipeline(pipeline_id, reloadable = true, config_hash = nil)
   config_string = "input { stdin { id => '#{pipeline_id}' }}"
   settings = mock_settings("pipeline.id" => pipeline_id.to_s,
-                           "config.string" => config_string,
-                           "config.reload.automatic" => reloadable)
+    "config.string" => config_string,
+    "config.reload.automatic" => reloadable)
   pipeline_config = mock_pipeline_config(pipeline_id, config_string, settings)
   LogStash::JavaPipeline.new(pipeline_config)
 end
diff --git a/qa/integration/specs/env_variables_condition_spec.rb b/qa/integration/specs/env_variables_condition_spec.rb
index a12b2acb17c..08bf30c4a26 100644
--- a/qa/integration/specs/env_variables_condition_spec.rb
+++ b/qa/integration/specs/env_variables_condition_spec.rb
@@ -83,7 +83,7 @@
                                     filter { if (\"${APP}\") { mutate { add_tag => \"${TAG1}\"} } }
                                     output { stdout{} }",
                                   "--path.settings", settings_dir],
-                                 true, test_env)
+      true, test_env)
     expect(logstash.stderr_and_stdout).to match(/mytag1/)
     expect(logstash.stderr_and_stdout).not_to match(/wrong_env/)
     expect(logstash.exit_code).to be(0)
diff --git a/qa/integration/specs/fatal_error_spec.rb b/qa/integration/specs/fatal_error_spec.rb
index 2ba0ccad8ce..78fbc3f6a12 100644
--- a/qa/integration/specs/fatal_error_spec.rb
+++ b/qa/integration/specs/fatal_error_spec.rb
@@ -71,9 +71,9 @@
 
   def spawn_logstash_and_wait_for_exit!(config, timeout)
     @logstash.spawn_logstash('--pipeline.workers=1',
-                             '--path.logs', logs_dir,
-                             '--path.data', data_dir,
-                             '--config.string', config)
+      '--path.logs', logs_dir,
+      '--path.data', data_dir,
+      '--config.string', config)
 
     time = Time.now
     while (Time.now - time) < timeout
diff --git a/qa/integration/specs/monitoring_api_spec.rb b/qa/integration/specs/monitoring_api_spec.rb
index 71bb5be6cad..98835a8e699 100644
--- a/qa/integration/specs/monitoring_api_spec.rb
+++ b/qa/integration/specs/monitoring_api_spec.rb
@@ -211,7 +211,7 @@
 
     #default
     logging_get_assert logstash_service, "INFO", "TRACE",
-                       skip: 'logstash.licensechecker.licensereader' #custom (ERROR) level to start with
+      skip: 'logstash.licensechecker.licensereader' #custom (ERROR) level to start with
 
     #root logger - does not apply to logger.slowlog
     logging_put_assert logstash_service.monitoring_api.logging_put({"logger." => "WARN"})
@@ -277,8 +277,8 @@
       )
       if logstash_service.settings.feature_flag == "persistent_queues"
         expect(flow_status).to include(
-                                 'queue_persisted_growth_bytes'  => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric)),
-                                 'queue_persisted_growth_events' => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric))
+          'queue_persisted_growth_bytes'  => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric)),
+          'queue_persisted_growth_events' => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric))
                                )
       else
         expect(flow_status).to_not include('queue_persisted_growth_bytes')
@@ -316,12 +316,12 @@
 
       expect(input_plugin_flow_status).to include('throughput' => hash_including('current' => a_value >= 0, 'lifetime' => a_value > 0))
       expect(filter_plugin_flow_status).to include(
-                                             'worker_utilization' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
-                                             'worker_millis_per_event' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
+        'worker_utilization' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
+        'worker_millis_per_event' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
                                            )
       expect(output_plugin_flow_status).to include(
-                                             'worker_utilization' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
-                                             'worker_millis_per_event' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
+        'worker_utilization' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
+        'worker_millis_per_event' => hash_including('current' => a_value >= 0, 'lifetime' => a_value >= 0),
                                            )
     end
   end
diff --git a/qa/integration/specs/reload_config_spec.rb b/qa/integration/specs/reload_config_spec.rb
index b210def0bcf..44aa6697190 100644
--- a/qa/integration/specs/reload_config_spec.rb
+++ b/qa/integration/specs/reload_config_spec.rb
@@ -127,8 +127,8 @@
 
       if logstash_service.settings.feature_flag == "persistent_queues"
         expect(pipeline_flow_stats).to include(
-                                 'queue_persisted_growth_bytes'  => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric)),
-                                 'queue_persisted_growth_events' => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric))
+          'queue_persisted_growth_bytes'  => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric)),
+          'queue_persisted_growth_events' => hash_including('current' => a_kind_of(Numeric), 'lifetime' => a_kind_of(Numeric))
                                )
       else
         expect(pipeline_flow_stats).to_not include('queue_persisted_growth_bytes')
diff --git a/qa/integration/specs/reserved_tags_field_spec.rb b/qa/integration/specs/reserved_tags_field_spec.rb
index 999ecf14107..7c8b7a1cabe 100644
--- a/qa/integration/specs/reserved_tags_field_spec.rb
+++ b/qa/integration/specs/reserved_tags_field_spec.rb
@@ -53,8 +53,8 @@
     it "[#{mode}] update tags and _tags successfully" do
       @logstash.env_variables = test_env
       @logstash.spawn_logstash("-f", config_to_temp_file(@fixture.config(pipeline_fixture)),
-                               "--event_api.tags.illegal", "#{mode}",
-                               "--path.settings", settings_dir)
+        "--event_api.tags.illegal", "#{mode}",
+        "--path.settings", settings_dir)
 
       Stud.try(num_retries.times, [StandardError, RSpec::Expectations::ExpectationNotMetError]) do
         output = IO.read(File.join(test_path, "#{pipeline_fixture}.log"))
@@ -76,7 +76,7 @@
     ['rename', 'warn'].each do |mode|
       logstash = @logstash.run_cmd(["bin/logstash", "-e", @fixture.config('set_illegal_tags').gsub("\n", ""),
                                     "--path.settings", settings_dir, "--event_api.tags.illegal", mode],
-                                   true, test_env)
+        true, test_env)
       expect(logstash.stderr_and_stdout).to match(/Ruby exception occurred/)
     end
   end
diff --git a/qa/platform_config.rb b/qa/platform_config.rb
index df0f2151891..8d29bd89ea9 100644
--- a/qa/platform_config.rb
+++ b/qa/platform_config.rb
@@ -41,7 +41,7 @@ def initialize(name, data)
 
     def configure_bootstrap_scripts(data)
       @bootstrap = OpenStruct.new(:privileged     => "sys/#{type}/bootstrap.sh",
-                                  :non_privileged => "sys/#{type}/user_bootstrap.sh")
+        :non_privileged => "sys/#{type}/user_bootstrap.sh")
       ##
       # for now the only specific bootstrap scripts are ones need
       # with privileged access level, whenever others are also
diff --git a/spec/unit/bootstrap/bundler_spec.rb b/spec/unit/bootstrap/bundler_spec.rb
index f635ba709f2..52d15de49f7 100644
--- a/spec/unit/bootstrap/bundler_spec.rb
+++ b/spec/unit/bootstrap/bundler_spec.rb
@@ -72,15 +72,15 @@
       expect(::Bundler::CLI).to receive(:start).with(bundler_args)
       expect(ENV).to receive(:replace) do |args|
         expect(args).to include("BUNDLE_PATH" => LogStash::Environment::BUNDLE_DIR,
-                                                            "BUNDLE_GEMFILE" => LogStash::Environment::GEMFILE_PATH,
-                                                            "BUNDLE_SILENCE_ROOT_WARNING" => "true",
-                                                            "BUNDLE_WITHOUT" => "development")
+          "BUNDLE_GEMFILE" => LogStash::Environment::GEMFILE_PATH,
+          "BUNDLE_SILENCE_ROOT_WARNING" => "true",
+          "BUNDLE_WITHOUT" => "development")
       end
       expect(ENV).to receive(:replace) do |args|
         expect(args).not_to include(
-                                "BUNDLE_PATH" => LogStash::Environment::BUNDLE_DIR,
-                                "BUNDLE_SILENCE_ROOT_WARNING" => "true",
-                                "BUNDLE_WITHOUT" => "development")
+          "BUNDLE_PATH" => LogStash::Environment::BUNDLE_DIR,
+          "BUNDLE_SILENCE_ROOT_WARNING" => "true",
+          "BUNDLE_WITHOUT" => "development")
       end
 
       LogStash::Bundler.invoke!(options)
diff --git a/spec/unit/plugin_manager/update_spec.rb b/spec/unit/plugin_manager/update_spec.rb
index e82321a4362..a6b85fef399 100644
--- a/spec/unit/plugin_manager/update_spec.rb
+++ b/spec/unit/plugin_manager/update_spec.rb
@@ -31,8 +31,8 @@
   it "pass all gem sources to the bundle update command" do
     sources = cmd.gemfile.gemset.sources
     expect_any_instance_of(LogStash::Bundler).to receive(:invoke!).with(
-        :update => [], :rubygems_source => sources,
-        :conservative => true, :local => false
+      :update => [], :rubygems_source => sources,
+      :conservative => true, :local => false
     )
     cmd.execute
   end
diff --git a/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb b/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
index babeb778dfa..40e1c95a758 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/asciidoc_format.rb
@@ -42,9 +42,9 @@ def generate(context)
         erb
       else
         Asciidoctor.convert(erb,
-                            :header_footer => true,
-                            :stylesheet => CSS_FILE,
-                            :safe => 'safe')
+          :header_footer => true,
+          :stylesheet => CSS_FILE,
+          :safe => 'safe')
       end
     end
 
diff --git a/tools/logstash-docgen/lib/logstash/docgen/runner.rb b/tools/logstash-docgen/lib/logstash/docgen/runner.rb
index 492f1b8d1cc..b429cedafb3 100644
--- a/tools/logstash-docgen/lib/logstash/docgen/runner.rb
+++ b/tools/logstash-docgen/lib/logstash/docgen/runner.rb
@@ -41,9 +41,9 @@ def execute
       end
 
       DocumentationGenerator.new(with_plugins,
-                                 target,
-                                 source,
-                                 YAML.load(File.read(config))).generate
+        target,
+        source,
+        YAML.load(File.read(config))).generate
     end
   end
 end end
diff --git a/x-pack/lib/config_management/elasticsearch_source.rb b/x-pack/lib/config_management/elasticsearch_source.rb
index f3fe2c2227b..94ec1a34a9c 100644
--- a/x-pack/lib/config_management/elasticsearch_source.rb
+++ b/x-pack/lib/config_management/elasticsearch_source.rb
@@ -15,7 +15,7 @@ module LogStash
   module ConfigManagement
     class ElasticsearchSource < LogStash::Config::Source::Base
       include LogStash::Util::Loggable, LogStash::LicenseChecker::Licensed,
-              LogStash::Helpers::ElasticsearchOptions
+        LogStash::Helpers::ElasticsearchOptions
 
       class RemoteConfigError < LogStash::Error; end
 
diff --git a/x-pack/lib/filters/geoip/database_manager.rb b/x-pack/lib/filters/geoip/database_manager.rb
index 7ef4751e2e9..e79a3b87af5 100644
--- a/x-pack/lib/filters/geoip/database_manager.rb
+++ b/x-pack/lib/filters/geoip/database_manager.rb
@@ -50,13 +50,13 @@ def setup
     asn_database_path = @metadata.database_path(ASN)
 
     @states = { "#{CITY}" => DatabaseState.new(@metadata.is_eula(CITY),
-                                               Concurrent::Array.new,
-                                               city_database_path,
-                                               cc_city_database_path),
+      Concurrent::Array.new,
+      city_database_path,
+      cc_city_database_path),
                 "#{ASN}" => DatabaseState.new(@metadata.is_eula(ASN),
-                                              Concurrent::Array.new,
-                                              asn_database_path,
-                                              cc_asn_database_path) }
+                  Concurrent::Array.new,
+                  asn_database_path,
+                  cc_asn_database_path) }
 
     @download_manager = DownloadManager.new(@metadata)
 
@@ -112,7 +112,7 @@ def execute_download_job
 
           notify_plugins(database_type, :update, new_database_path) do |db_type, ids|
             logger.info("geoip plugin will use database #{new_database_path}",
-                        :database_type => db_type, :pipeline_ids => ids) unless ids.empty?
+              :database_type => db_type, :pipeline_ids => ids) unless ids.empty?
           end
 
           success_cnt += 1
@@ -166,7 +166,7 @@ def check_age(database_types = DB_TYPES)
               "which you can download from https://dev.maxmind.com/geoip/geoip2/geolite2/ ")
 
             logger.warn("geoip plugin will stop filtering and will tag all events with the '_geoip_expired_database' tag.",
-                        :database_type => db_type, :pipeline_ids => ids)
+              :database_type => db_type, :pipeline_ids => ids)
           end
         end
 
diff --git a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
index a70f85648e9..b8044ab5e6d 100644
--- a/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
+++ b/x-pack/lib/monitoring/inputs/metrics/stats_event_factory.rb
@@ -60,7 +60,7 @@ def format_jvm_stats(stats)
       result = stats.extract_metrics([:jvm], :uptime_in_millis)
 
       heap_stats = stats.extract_metrics([:jvm, :memory, :heap],
-                      :used_in_bytes, :used_percent, :max_in_bytes)
+        :used_in_bytes, :used_percent, :max_in_bytes)
 
       result["mem"] = {
         "heap_used_in_bytes" => heap_stats[:used_in_bytes],
@@ -71,9 +71,9 @@ def format_jvm_stats(stats)
       result["gc"] = {
         "collectors" => {
           "old" => stats.extract_metrics([:jvm, :gc, :collectors, :old],
-                        :collection_time_in_millis, :collection_count),
+            :collection_time_in_millis, :collection_count),
           "young" => stats.extract_metrics([:jvm, :gc, :collectors, :young],
-                        :collection_time_in_millis, :collection_count)
+            :collection_time_in_millis, :collection_count)
         }
       }
 
diff --git a/x-pack/lib/monitoring/monitoring.rb b/x-pack/lib/monitoring/monitoring.rb
index 72f0e6a1e04..e37f0d67e54 100644
--- a/x-pack/lib/monitoring/monitoring.rb
+++ b/x-pack/lib/monitoring/monitoring.rb
@@ -208,9 +208,9 @@ def generate_pipeline_config(settings)
         end
         es_settings = es_options_from_settings_or_modules('monitoring', settings)
         data = TemplateData.new(LogStash::SETTINGS.get("node.uuid"), API_VERSION,
-                                es_settings,
-                                opt[:collection_interval], opt[:collection_timeout_interval],
-                                opt[:extended_performance_collection], opt[:config_collection])
+          es_settings,
+          opt[:collection_interval], opt[:collection_timeout_interval],
+          opt[:extended_performance_collection], opt[:config_collection])
 
         template_path = ::File.join(::File.dirname(__FILE__), "..", "template.cfg.erb")
         template = ::File.read(template_path)
diff --git a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
index 96a5569886e..0295018925e 100644
--- a/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
+++ b/x-pack/qa/integration/support/elasticsearch/api/actions/update_password.rb
@@ -10,8 +10,8 @@ module Actions
       def update_password(arguments={})
         method = HTTP_PUT
         path   = Utils.__pathify '_security/user/',
-                                 Utils.__escape(arguments[:user]),
-                                 '/_password'
+          Utils.__escape(arguments[:user]),
+          '/_password'
         params = {}
         body   = {
             "password" => "#{arguments[:password]}"
diff --git a/x-pack/spec/config_management/bootstrap_check_spec.rb b/x-pack/spec/config_management/bootstrap_check_spec.rb
index ba0ea22cbbb..b819c9045ad 100644
--- a/x-pack/spec/config_management/bootstrap_check_spec.rb
+++ b/x-pack/spec/config_management/bootstrap_check_spec.rb
@@ -111,11 +111,11 @@
     context "when `path.config` is given" do
       let(:settings) do
         apply_settings(
-            {
-                "xpack.management.enabled" => true,
-                "path.config" => config_location
-            },
-            system_settings
+          {
+              "xpack.management.enabled" => true,
+              "path.config" => config_location
+          },
+          system_settings
         )
       end
 
@@ -198,11 +198,11 @@
         let(:pipeline_ids) { ["pipeline1", "pipeline2", "*pipeline*"] }
         let(:settings) do
           apply_settings(
-              {
-                  "xpack.management.enabled" => true,
-                  "xpack.management.pipeline.id" => pipeline_ids
-              },
-              system_settings
+            {
+                "xpack.management.enabled" => true,
+                "xpack.management.pipeline.id" => pipeline_ids
+            },
+            system_settings
           )
         end
 
diff --git a/x-pack/spec/filters/geoip/download_manager_spec.rb b/x-pack/spec/filters/geoip/download_manager_spec.rb
index a245eb847d8..b08b3b6d044 100644
--- a/x-pack/spec/filters/geoip/download_manager_spec.rb
+++ b/x-pack/spec/filters/geoip/download_manager_spec.rb
@@ -66,8 +66,8 @@
       before(:each) do
         expect(download_manager).to receive(:uuid).and_return(SecureRandom.uuid)
         mock_resp = double("geoip_endpoint",
-                           :body => ::File.read(::File.expand_path("./fixtures/normal_resp.json", ::File.dirname(__FILE__))),
-                           :code => 200)
+          :body => ::File.read(::File.expand_path("./fixtures/normal_resp.json", ::File.dirname(__FILE__))),
+          :code => 200)
         allow(download_manager).to receive_message_chain("rest_client.get").and_return(mock_resp)
       end
 
diff --git a/x-pack/spec/helpers/elasticsearch_options_spec.rb b/x-pack/spec/helpers/elasticsearch_options_spec.rb
index 1b42c6fdfd7..e0dd9afc19c 100644
--- a/x-pack/spec/helpers/elasticsearch_options_spec.rb
+++ b/x-pack/spec/helpers/elasticsearch_options_spec.rb
@@ -12,9 +12,9 @@
 shared_examples "elasticsearch options hash is populated without security" do
   it "with username, hosts and password" do
       expect(test_class.es_options_from_settings_or_modules('monitoring', system_settings)).to include(
-                                                                                                   "hosts" => expected_url,
-                                                                                                   "user" => expected_username,
-                                                                                                   "password" => expected_password
+        "hosts" => expected_url,
+        "user" => expected_username,
+        "password" => expected_password
                                                                                                )
   end
 end
@@ -26,11 +26,11 @@
 
     it "creates the elasticsearch output options hash" do
       expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                        "hosts" => elasticsearch_url,
-                                                                                        "user" => elasticsearch_username,
-                                                                                        "password" => elasticsearch_password,
-                                                                                        "ssl_enabled" => true,
-                                                                                        "ssl_certificate_authorities" => elasticsearch_ca
+        "hosts" => elasticsearch_url,
+        "user" => elasticsearch_username,
+        "password" => elasticsearch_password,
+        "ssl_enabled" => true,
+        "ssl_certificate_authorities" => elasticsearch_ca
                                                                                     )
     end
   end
@@ -41,11 +41,11 @@
 
     it "creates the elasticsearch output options hash" do
       expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                      "hosts" => elasticsearch_url,
-                                                                                      "user" => elasticsearch_username,
-                                                                                      "password" => elasticsearch_password,
-                                                                                      "ssl_enabled" => true,
-                                                                                      "ca_trusted_fingerprint" => ca_trusted_fingerprint
+        "hosts" => elasticsearch_url,
+        "user" => elasticsearch_username,
+        "password" => elasticsearch_password,
+        "ssl_enabled" => true,
+        "ca_trusted_fingerprint" => ca_trusted_fingerprint
                                                                                     )
     end
   end
@@ -62,12 +62,12 @@
 
     it "creates the elasticsearch output options hash" do
       expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                        "hosts" => elasticsearch_url,
-                                                                                        "user" => elasticsearch_username,
-                                                                                        "password" => elasticsearch_password,
-                                                                                        "ssl_enabled" => true,
-                                                                                        "ssl_truststore_path" => elasticsearch_truststore_path,
-                                                                                        "ssl_truststore_password" => elasticsearch_truststore_password
+        "hosts" => elasticsearch_url,
+        "user" => elasticsearch_username,
+        "password" => elasticsearch_password,
+        "ssl_enabled" => true,
+        "ssl_truststore_path" => elasticsearch_truststore_path,
+        "ssl_truststore_password" => elasticsearch_truststore_password
                                                                                     )
     end
   end
@@ -85,12 +85,12 @@
 
     it "creates the elasticsearch output options hash" do
       expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                        "hosts" => elasticsearch_url,
-                                                                                        "user" => elasticsearch_username,
-                                                                                        "password" => elasticsearch_password,
-                                                                                        "ssl_enabled" => true,
-                                                                                        "ssl_keystore_path" => elasticsearch_keystore_path,
-                                                                                        "ssl_keystore_password" => elasticsearch_keystore_password
+        "hosts" => elasticsearch_url,
+        "user" => elasticsearch_username,
+        "password" => elasticsearch_password,
+        "ssl_enabled" => true,
+        "ssl_keystore_path" => elasticsearch_keystore_path,
+        "ssl_keystore_password" => elasticsearch_keystore_password
                                                                                     )
     end
   end
@@ -108,12 +108,12 @@
 
     it "creates the elasticsearch output options hash" do
       expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                        "hosts" => elasticsearch_url,
-                                                                                        "user" => elasticsearch_username,
-                                                                                        "password" => elasticsearch_password,
-                                                                                        "ssl_enabled" => true,
-                                                                                        "ssl_certificate" => elasticsearch_certificate_path,
-                                                                                        "ssl_key" => elasticsearch_key_path
+        "hosts" => elasticsearch_url,
+        "user" => elasticsearch_username,
+        "password" => elasticsearch_password,
+        "ssl_enabled" => true,
+        "ssl_certificate" => elasticsearch_certificate_path,
+        "ssl_key" => elasticsearch_key_path
                                                                                       )
     end
   end
@@ -128,11 +128,11 @@
 
       it "creates the elasticsearch output options hash" do
         expect(test_class.es_options_from_settings('monitoring', system_settings)).to include(
-                                                                                          "hosts" => elasticsearch_url,
-                                                                                          "user" => elasticsearch_username,
-                                                                                          "password" => elasticsearch_password,
-                                                                                          "ssl_enabled" => true,
-                                                                                          "ssl_cipher_suites" => ["FOO", "BAR"],
+          "hosts" => elasticsearch_url,
+          "user" => elasticsearch_username,
+          "password" => elasticsearch_password,
+          "ssl_enabled" => true,
+          "ssl_cipher_suites" => ["FOO", "BAR"],
                                                                                         )
       end
     end
