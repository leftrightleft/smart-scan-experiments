diff --git a/logstash-core/lib/logstash/config/source/local.rb b/logstash-core/lib/logstash/config/source/local.rb
index e9601c2b5f5..b9490f0d4cf 100644
--- a/logstash-core/lib/logstash/config/source/local.rb
+++ b/logstash-core/lib/logstash/config/source/local.rb
@@ -32,23 +32,29 @@ module LogStash module Config module Source
   #
   class Local < Base
     class ConfigStringLoader
+      include LogStash::Util::SubstitutionVariables
+      include LogStash::Util::Loggable
+
       INPUT_BLOCK_RE = /input *{/
       OUTPUT_BLOCK_RE = /output *{/
       EMPTY_RE = /^\s*$/
 
-      def self.read(config_string)
-        config_parts = [org.logstash.common.SourceWithMetadata.new("string", "config_string", 0, 0, config_string)]
+      def initialize(config_string)
+        @config_string = config_string
+      end
+
+      def read
+        config_parts = [org.logstash.common.SourceWithMetadata.new("string", "config_string", 0, 0, replace_placeholders(@config_string, false))]
 
         # Make sure we have an input and at least 1 output
         # if its not the case we will add stdin and stdout
         # this is for backward compatibility reason
-        if !INPUT_BLOCK_RE.match(config_string)
+        if !INPUT_BLOCK_RE.match(@config_string)
           config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default input", 0, 0, LogStash::Config::Defaults.input)
-
         end
 
         # include a default stdout output if no outputs given
-        if !OUTPUT_BLOCK_RE.match(config_string)
+        if !OUTPUT_BLOCK_RE.match(@config_string)
           config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default output", 0, 0, LogStash::Config::Defaults.output)
         end
 
@@ -57,6 +63,7 @@ def self.read(config_string)
     end
 
     class ConfigPathLoader
+      include LogStash::Util::SubstitutionVariables
       include LogStash::Util::Loggable
 
       TEMPORARY_FILE_RE = /~$/
@@ -88,7 +95,7 @@ def read
           config_string.force_encoding("UTF-8")
 
           if config_string.valid_encoding?
-            part = org.logstash.common.SourceWithMetadata.new("file", file, 0, 0, config_string)
+            part = org.logstash.common.SourceWithMetadata.new("file", file, 0, 0, deep_replace(config_string, false))
             config_parts << part
           else
             encoding_issue_files << file
@@ -106,10 +113,6 @@ def read
         config_parts
       end
 
-      def self.read(path)
-        ConfigPathLoader.new(path).read
-      end
-
       private
       def normalize_path(path)
         path.gsub!(LOCAL_FILE_URI, "")
@@ -141,8 +144,15 @@ def temporary_file?(filepath)
     end
 
     class ConfigRemoteLoader
-      def self.read(uri)
-        uri = URI.parse(uri)
+      include LogStash::Util::SubstitutionVariables
+      include LogStash::Util::Loggable
+
+      def initialize(uri)
+        @uri = uri
+      end
+
+      def read
+        uri = URI.parse(@uri)
 
         Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme == "https") do |http|
           request = Net::HTTP::Get.new(uri.path)
@@ -151,7 +161,7 @@ def self.read(uri)
           # since we have fetching config we wont follow any redirection.
           case response.code.to_i
           when 200
-            [org.logstash.common.SourceWithMetadata.new(uri.scheme, uri.to_s, 0, 0, response.body)]
+            [org.logstash.common.SourceWithMetadata.new(uri.scheme, uri.to_s, 0, 0, deep_replace(response.body, false))]
           when 302
             raise LogStash::ConfigLoadingError, I18n.t("logstash.runner.configuration.fetch-failed", :path => uri.to_s, :message => "We don't follow redirection for remote configuration")
           when 404
@@ -201,11 +211,11 @@ def config_conflict?
 
     def local_pipeline_configs
       config_parts = if config_string?
-        ConfigStringLoader.read(config_string)
+        ConfigStringLoader.new(config_string).read
       elsif local_config?
-        ConfigPathLoader.read(config_path)
+        ConfigPathLoader.new(config_path).read
       elsif remote_config?
-        ConfigRemoteLoader.read(config_path)
+        ConfigRemoteLoader.new(config_path).read
       else
         []
       end
diff --git a/logstash-core/lib/logstash/config/source/multi_local.rb b/logstash-core/lib/logstash/config/source/multi_local.rb
index 39f72823463..a9eb1d2f3dc 100644
--- a/logstash-core/lib/logstash/config/source/multi_local.rb
+++ b/logstash-core/lib/logstash/config/source/multi_local.rb
@@ -30,7 +30,7 @@ def initialize(settings)
     end
 
     def pipeline_configs
-      pipelines = deep_replace(retrieve_yaml_pipelines())
+      pipelines = deep_replace(retrieve_yaml_pipelines(), false)
       pipelines_settings = pipelines.map do |pipeline_settings|
         clone = @original_settings.clone
         clone.merge_pipeline_settings(pipeline_settings)
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index 90c8962f090..c87bc93f6bd 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -30,29 +30,30 @@ module ::LogStash::Util::SubstitutionVariables
   private_constant :SECRET_STORE
 
   # Recursive method to replace substitution variable references in parameters
-  def deep_replace(value)
+  def deep_replace(value, substitute_with_secret_store = true)
     if value.is_a?(Hash)
       value.each do |valueHashKey, valueHashValue|
-        value[valueHashKey.to_s] = deep_replace(valueHashValue)
+        value[valueHashKey.to_s] = deep_replace(valueHashValue, substitute_with_secret_store)
       end
     else
       if value.is_a?(Array)
         value.each_index do | valueArrayIndex|
-          value[valueArrayIndex] = deep_replace(value[valueArrayIndex])
+          value[valueArrayIndex] = deep_replace(value[valueArrayIndex], substitute_with_secret_store)
         end
       else
-        return replace_placeholders(value)
+        return replace_placeholders(value, substitute_with_secret_store)
       end
     end
   end
 
-  # Replace all substitution variable references in the 'value' param and returns the substituted value, or the original value if a substitution can not be made
-  # Process following patterns : ${VAR}, ${VAR:defaultValue}
-  # If value matches the pattern, returns the following precedence : Secret store value, Environment entry value, default value as provided in the pattern
-  # If the value does not match the pattern, the 'value' param returns as-is
-  def replace_placeholders(value)
+  # Replace all substitution variable references, ${VAR}, ${VAR:defaultValue}, in the 'value' param and
+  # returns the substituted value as following precedence : Secret store value, Environment entry value, default value as provided in the pattern
+  # When substitute_with_secret_store flog is false, it does not take the substitution from secret store.
+  #   If no substitution found, return the original pattern
+
+  def replace_placeholders(value, substitute_with_secret_store = true)
     if value.kind_of?(::LogStash::Util::Password)
-      interpolated = replace_placeholders(value.value)
+      interpolated = replace_placeholders(value.value, substitute_with_secret_store)
       return ::LogStash::Util::Password.new(interpolated)
     end
     return value unless value.is_a?(String)
@@ -69,15 +70,21 @@ def replace_placeholders(value)
       #check the secret store if it exists
       secret_store = SECRET_STORE.instance
       replacement = secret_store.nil? ? nil : secret_store.retrieveSecret(SecretStoreExt.getStoreId(name))
+
       #check the environment
       replacement = ENV.fetch(name, default) if replacement.nil?
       if replacement.nil?
         raise LogStash::ConfigurationError, "Cannot evaluate `#{placeholder}`. Replacement variable `#{name}` is not defined in a Logstash secret store " +
             "or as an Environment entry and there is no default value given."
       end
-      replacement.to_s
+
+      if substitute_with_secret_store
+        replacement
+      else
+        ENV.fetch(name, default) || placeholder
+      end
     end
-  end # def replace_placeholders
+  end
 
   class << self
     private
diff --git a/logstash-core/spec/logstash/config/source/local_spec.rb b/logstash-core/spec/logstash/config/source/local_spec.rb
index f44b35ab5a1..956e52bdde4 100644
--- a/logstash-core/spec/logstash/config/source/local_spec.rb
+++ b/logstash-core/spec/logstash/config/source/local_spec.rb
@@ -25,322 +25,278 @@
 require "spec_helper"
 require "webmock/rspec"
 
-describe LogStash::Config::Source::Local::ConfigStringLoader do
-  subject { described_class }
-  let(:config_string) { "input { generator {} } output { stdout {} }"}
+describe "multiple config loader" do
+  let(:env_config_string) { "input { generator { tags => \"${z}\" } } if [app] != \"${APP}\" { } output { stdout {} }" }
 
-  it "returns one config_parts" do
-    expect(subject.read(config_string).size).to eq(1)
-  end
+  RSpec.shared_examples "support env variable in condition" do |logstash|
 
-  it "returns a valid config part" do
-    config_part = subject.read(config_string).first
-    expect(config_part).to be_a_source_with_metadata("string", "config_string", config_string)
-  end
-end
+    subject { described_class }
 
-describe LogStash::Config::Source::Local::ConfigPathLoader do
-  subject { described_class }
+    before { ENV['APP'] = 'foobar' }
 
-  context "no configs" do
-    context "in the directory" do
-      let(:directory) do
-        p =  Stud::Temporary.pathname
-        FileUtils.mkdir_p(p)
-        p
-      end
+    it "give env value in config string" do
+      swm = subject.new(loader_input).read.first
+      expect(swm.text).to match(/if \[app\] != "foobar"/)
+    end
 
-      it "returns an empty array" do
-        expect(subject.read(directory)).to be_empty
-      end
+    it "does not give empty string to unknown variable" do
+      swm = subject.new(loader_input).read.first
+      expect(swm.text).to match(/tags => "\${z}"/)
     end
 
-    context "target file doesn't exist" do
-      let(:directory) do
-        p =  Stud::Temporary.pathname
-        FileUtils.mkdir_p(p)
-        ::File.join(p, "ls.conf")
+    context "with secret store" do
+      before :each do
+        LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../../../src/test/resources/logstash.keystore.with.default.pass"))
+        LogStash::Util::SubstitutionVariables.send(:reset_secret_store)
       end
 
-      it "returns an empty array" do
-        expect(subject.read(directory)).to be_empty
+      after(:each) do
+        LogStash::Util::SubstitutionVariables.send(:reset_secret_store)
+      end
+
+      it "does not resolve secret store value" do
+        swm = subject.new(loader_input).read.first
+        expect(swm.text).to match(/tags => "\${z}"/)
       end
     end
   end
 
-  context "when it exist" do
-    shared_examples "read config from files" do
-      let(:directory) { Stud::Temporary.pathname }
+  describe LogStash::Config::Source::Local::ConfigStringLoader do
+    subject { described_class }
+    let(:config_string) { "input { generator {} } output { stdout {} }"}
 
-      before do
-        files.each do |file, content|
-          temporary_file(content, file, directory)
-        end
+    it "returns one config_parts" do
+      expect(subject.new(config_string).read.size).to eq(1)
+    end
 
-        expect(files.size).to be >= 1
-        expect(Dir.glob(::File.join(directory, "*")).size).to eq(files.size)
-      end
+    it "returns a valid config part" do
+      config_part = subject.new(config_string).read.first
+      expect(config_part).to be_a_source_with_metadata("string", "config_string", config_string)
+    end
 
-      it "returns a `config_parts` per file" do
-        expect(subject.read(reader_config).size).to eq(files.size)
-      end
+    context "config string with env" do
+      let(:loader_input) { env_config_string }
 
-      it "returns alphabetically sorted parts" do
-        parts = subject.read(reader_config)
-        expect(parts.collect { |part| ::File.basename(part.id) }).to eq(files.keys.sort)
-      end
+      include_examples "support env variable in condition"
+    end
+  end
 
-      it "returns valid `config_parts`" do
-        parts = subject.read(reader_config)
+  describe LogStash::Config::Source::Local::ConfigPathLoader do
+    subject { described_class }
 
-        parts.each do |part|
-          basename = ::File.basename(part.id)
-          file_path = ::File.expand_path(::File.join(directory, basename))
-          content = files[basename]
-          expect(part).to be_a_source_with_metadata("file", file_path, content)
+    context "no configs" do
+      context "in the directory" do
+        let(:directory) do
+          p =  Stud::Temporary.pathname
+          FileUtils.mkdir_p(p)
+          p
         end
-      end
-    end
-
-    context "when the files have invalid encoding" do
-      let(:config_string) { "\x80" }
-      let(:file_path) { Stud::Temporary.pathname }
-      let(:file) { ::File.join(file_path, "wrong_encoding.conf") }
 
-      before do
-        FileUtils.mkdir_p(file_path)
-        f = File.open(file, "wb") do |file|
-          file.write(config_string)
+        it "returns an empty array" do
+          expect(subject.new(directory).read).to be_empty
         end
       end
 
-      it "raises an exception" do
-        # check against base name because on Windows long paths are shrinked in the exception message
-        expect { subject.read(file_path) }.to raise_error LogStash::ConfigLoadingError, /.+#{::File.basename(file_path)}/
+      context "target file doesn't exist" do
+        let(:directory) do
+          p =  Stud::Temporary.pathname
+          FileUtils.mkdir_p(p)
+          ::File.join(p, "ls.conf")
+        end
+
+        it "returns an empty array" do
+          expect(subject.new(directory).read).to be_empty
+        end
       end
     end
 
-    context "when we target one file" do
-      let(:reader_config) { ::File.join(directory, files.keys.first) }
-      let(:files) {
-        {
-          "config1.conf" => "input1",
-        }
-      }
+    context "when it exist" do
+      shared_examples "read config from files" do
+        let(:directory) { Stud::Temporary.pathname }
 
-      include_examples "read config from files"
-    end
+        before do
+          files.each do |file, content|
+            temporary_file(content, file, directory)
+          end
 
-    context "when we target a path with multiples files" do
-      let(:reader_config) { directory }
+          expect(files.size).to be >= 1
+          expect(Dir.glob(::File.join(directory, "*")).size).to eq(files.size)
+        end
 
-      let(:files) {
-        {
-          "config1.conf" => "input1",
-          "config2.conf" => "input2",
-          "config3.conf" => "input3",
-          "config4.conf" => "input4"
-        }
-      }
+        it "returns a `config_parts` per file" do
+          expect(subject.new(reader_config).read.size).to eq(files.size)
+        end
 
-      include_examples "read config from files"
-    end
+        it "returns alphabetically sorted parts" do
+          parts = subject.new(reader_config).read
+          expect(parts.collect { |part| ::File.basename(part.id) }).to eq(files.keys.sort)
+        end
 
-    context "when there temporary files in the directory" do
-      let(:reader_config) { ::File.join(directory, "conf*.conf") }
+        it "returns valid `config_parts`" do
+          parts = subject.new(reader_config).read
 
-      let(:files) {
-        {
-          "config1.conf" => "input1",
-          "config2.conf" => "input2",
-          "config3.conf" => "input3",
-          "config4.conf" => "input4"
-        }
-      }
-
-      let(:other_files) do
-        {
-          "config1.conf~" => "input1",
-          "config2.conf~" => "input2",
-          "config3.conf~" => "input3",
-          "config4.conf~" => "input4"
-        }
+          parts.each do |part|
+            basename = ::File.basename(part.id)
+            file_path = ::File.expand_path(::File.join(directory, basename))
+            content = files[basename]
+            expect(part).to be_a_source_with_metadata("file", file_path, content)
+          end
+        end
       end
 
-      include_examples "read config from files" do
+      context "when config with local file" do
+        let(:file_path) { Stud::Temporary.pathname }
+
         before do
-          other_files.keys.shuffle.each do |file|
-            content = files[file]
-            temporary_file(content, file, directory)
+          FileUtils.mkdir_p(file_path)
+          f = File.open(file, "wb") do |file|
+            file.write(config_string)
           end
-
-          # make sure we actually do some filtering
-          expect(Dir.glob(::File.join(directory, "*")).size).to eq(other_files.size + files.size)
         end
-      end
-    end
-
-    context "when the path is a wildcard" do
-      let(:reader_config) { ::File.join(directory, "conf*.conf") }
 
-      let(:files) {
-        {
-          "config1.conf" => "input1",
-          "config2.conf" => "input2",
-          "config3.conf" => "input3",
-          "config4.conf" => "input4"
-        }
-      }
-
-      let(:other_files) do
-        {
-          "bad1.conf" => "input1",
-          "bad2.conf" => "input2",
-          "bad3.conf" => "input3",
-          "bad4.conf" => "input4"
-        }
-      end
+        context "when the files have invalid encoding" do
+          let(:config_string) { "\x80" }
+          let(:file) { ::File.join(file_path, "wrong_encoding.conf") }
 
-      include_examples "read config from files" do
-        before do
-          other_files.keys.shuffle.each do |file|
-            content = files[file]
-            temporary_file(content, file, directory)
+          it "raises an exception" do
+            # check against base name because on Windows long paths are shrinked in the exception message
+            expect { subject.new(file_path).read }.to raise_error LogStash::ConfigLoadingError, /.+#{::File.basename(file_path)}/
           end
+        end
 
-          # make sure we actually do some filtering
-          expect(Dir.glob(::File.join(directory, "*")).size).to eq(other_files.size + files.size)
+        context "when the files have env variable" do
+          let(:config_string) { env_config_string }
+          let(:file) { ::File.join(file_path, "env_condition.conf") }
+          let(:loader_input) { file_path }
+
+          include_examples "support env variable in condition"
         end
       end
-    end
 
-    context "URI defined path (file://..)" do
-      let(:reader_config) { "file://#{::File.join(directory, files.keys.first)}" }
-      let(:files) {
-        {
-          "config1.conf" => "input1",
+      context "when we target one file" do
+        let(:reader_config) { ::File.join(directory, files.keys.first) }
+        let(:files) {
+          {
+            "config1.conf" => "input1",
+          }
         }
-      }
 
-      include_examples "read config from files"
-    end
-
-    context "relative path" do
-      let(:reader_config) do
-        FileUtils.mkdir_p(::File.join(directory, "inside"))
-        ::File.join(directory, "inside", "../")
+        include_examples "read config from files"
       end
 
-      let(:files) {
-        {
-          "config2.conf" => "input1",
-          "config1.conf" => "input2",
+      context "when we target a path with multiples files" do
+        let(:reader_config) { directory }
+
+        let(:files) {
+          {
+            "config1.conf" => "input1",
+            "config2.conf" => "input2",
+            "config3.conf" => "input3",
+            "config4.conf" => "input4"
+          }
         }
-      }
 
-      include_examples "read config from files"
-    end
-  end
-end
+        include_examples "read config from files"
+      end
 
-describe LogStash::Config::Source::Local::ConfigRemoteLoader do
-  before :all do
-    WebMock.disable_net_connect!
-  end
+      context "when there temporary files in the directory" do
+        let(:reader_config) { ::File.join(directory, "conf*.conf") }
 
-  after :all do
-    WebMock.allow_net_connect!
-  end
+        let(:files) {
+          {
+            "config1.conf" => "input1",
+            "config2.conf" => "input2",
+            "config3.conf" => "input3",
+            "config4.conf" => "input4"
+          }
+        }
 
-  subject { described_class }
+        let(:other_files) do
+          {
+            "config1.conf~" => "input1",
+            "config2.conf~" => "input2",
+            "config3.conf~" => "input3",
+            "config4.conf~" => "input4"
+          }
+        end
 
-  let(:remote_url) { "http://test.dev/superconfig.conf" }
+        include_examples "read config from files" do
+          before do
+            other_files.keys.shuffle.each do |file|
+              content = files[file]
+              temporary_file(content, file, directory)
+            end
 
-  context "when the remote configuration exist" do
-    let(:config_string) { "input { generator {} } output { stdout {} }"}
+            # make sure we actually do some filtering
+            expect(Dir.glob(::File.join(directory, "*")).size).to eq(other_files.size + files.size)
+          end
+        end
+      end
 
-    before do
-      stub_request(:get, remote_url)
-        .to_return({
-        :body => config_string,
-        :status => 200
-      })
-    end
+      context "when the path is a wildcard" do
+        let(:reader_config) { ::File.join(directory, "conf*.conf") }
 
-    it "returns one config_parts" do
-      expect(subject.read(remote_url).size).to eq(1)
-    end
+        let(:files) {
+          {
+            "config1.conf" => "input1",
+            "config2.conf" => "input2",
+            "config3.conf" => "input3",
+            "config4.conf" => "input4"
+          }
+        }
 
-    it "returns a valid config part" do
-      config_part = subject.read(remote_url).first
-      expect(config_part).to be_a_source_with_metadata("http", remote_url, config_string)
-    end
-  end
+        let(:other_files) do
+          {
+            "bad1.conf" => "input1",
+            "bad2.conf" => "input2",
+            "bad3.conf" => "input3",
+            "bad4.conf" => "input4"
+          }
+        end
 
-  # I am aware that 656 http doesn't exist I am just testing the
-  # catch all block
-  [302, 404, 500, 403, 656].each do |code|
-    context "when the remote return an error code: #{code}" do
-      before do
-        stub_request(:get, remote_url)
-          .to_return({ :status => code })
-      end
+        include_examples "read config from files" do
+          before do
+            other_files.keys.shuffle.each do |file|
+              content = files[file]
+              temporary_file(content, file, directory)
+            end
 
-      it "raises the exception up" do
-        expect { subject.read(remote_url) }.to raise_error LogStash::ConfigLoadingError
+            # make sure we actually do some filtering
+            expect(Dir.glob(::File.join(directory, "*")).size).to eq(other_files.size + files.size)
+          end
+        end
       end
-    end
-  end
-end
 
-describe LogStash::Config::Source::Local do
-  let(:input_block) { "input { generator {} }" }
-  let(:filter_block) { "filter { mutate {} } " }
-  let(:output_block) { "output { elasticsearch {}}" }
-  subject { described_class.new(settings) }
-
-  context "when `config.string` and `config.path` are set`" do
-    let(:config_file) { temporary_file(input_block) }
-
-    let(:settings) do
-      mock_settings(
-        "config.string" => "#{filter_block} #{output_block}",
-        "path.config" => config_file,
-        "modules.cli" => [],
-        "modules" => []
-      )
-    end
-
-    # this should be impossible as the bootstrap checks should catch this
-    it "raises an exception" do
-      expect { subject.pipeline_configs }.to raise_error(LogStash::ConfigurationError)
-    end
-  end
+      context "URI defined path (file://..)" do
+        let(:reader_config) { "file://#{::File.join(directory, files.keys.first)}" }
+        let(:files) {
+          {
+            "config1.conf" => "input1",
+          }
+        }
 
-  context "when only the `config.string` is set" do
-    let(:settings) do
-      mock_settings( "config.string" => filter_block)
-    end
+        include_examples "read config from files"
+      end
 
-    it "returns a config" do
-      expect(subject.pipeline_configs.first.config_string).to include(filter_block)
-    end
-  end
+      context "relative path" do
+        let(:reader_config) do
+          FileUtils.mkdir_p(::File.join(directory, "inside"))
+          ::File.join(directory, "inside", "../")
+        end
 
-  context "when only the `path.config` is set" do
-    let(:config_file) { temporary_file(input_block) }
-    let(:settings) do
-      mock_settings( "path.config" => config_file)
-    end
+        let(:files) {
+          {
+            "config2.conf" => "input1",
+            "config1.conf" => "input2",
+          }
+        }
 
-    it "returns a config" do
-      expect(subject.pipeline_configs.first.config_string).to include(input_block)
+        include_examples "read config from files"
+      end
     end
   end
 
-  context "when the `path.config` is an url" do
-    let(:remote_url) { "http://test.dev/superconfig.conf" }
-
+  describe LogStash::Config::Source::Local::ConfigRemoteLoader do
     before :all do
       WebMock.disable_net_connect!
     end
@@ -349,83 +305,189 @@
       WebMock.allow_net_connect!
     end
 
-    before do
-      stub_request(:get, remote_url)
-        .to_return({
-        :body => input_block,
-        :status => 200
-      })
-    end
+    subject { described_class }
+
+    let(:remote_url) { "http://test.dev/superconfig.conf" }
+
+    context "when the remote configuration exist" do
+      let(:config_string) { "input { generator {} } output { stdout {} }"}
+
+      before do
+        stub_request(:get, remote_url)
+          .to_return({
+                       :body => config_string,
+                       :status => 200
+                     })
+      end
+
+      it "returns one config_parts" do
+        expect(subject.new(remote_url).read.size).to eq(1)
+      end
 
-    let(:settings) do
-      mock_settings( "path.config" => remote_url)
+      it "returns a valid config part" do
+        config_part = subject.new(remote_url).read.first
+        expect(config_part).to be_a_source_with_metadata("http", remote_url, config_string)
+      end
+
+      context "config string with env variable" do
+        let(:loader_input) { remote_url }
+        let(:config_string) { env_config_string }
+
+        include_examples "support env variable in condition"
+      end
     end
 
-    it "returns a config" do
-      expect(subject.pipeline_configs.first.config_string).to include(input_block)
+    # I am aware that 656 http doesn't exist I am just testing the
+    # catch all block
+    [302, 404, 500, 403, 656].each do |code|
+      context "when the remote return an error code: #{code}" do
+        before do
+          stub_request(:get, remote_url)
+            .to_return({ :status => code })
+        end
+
+        it "raises the exception up" do
+          expect { subject.new(remote_url).read }.to raise_error LogStash::ConfigLoadingError
+        end
+      end
     end
+  end
+
+  describe LogStash::Config::Source::Local do
+    let(:input_block) { "input { generator {} }" }
+    let(:filter_block) { "filter { mutate {} } " }
+    let(:output_block) { "output { elasticsearch {}}" }
+    subject { described_class.new(settings) }
+
+    context "when `config.string` and `config.path` are set`" do
+      let(:config_file) { temporary_file(input_block) }
 
-    context "when `config.string` is set" do
       let(:settings) do
         mock_settings(
-          "path.config" => remote_url,
-          "config.string" => filter_block
+          "config.string" => "#{filter_block} #{output_block}",
+          "path.config" => config_file,
+          "modules.cli" => [],
+          "modules" => []
         )
       end
 
+      # this should be impossible as the bootstrap checks should catch this
       it "raises an exception" do
-        expect { subject.pipeline_configs }.to raise_error
+        expect { subject.pipeline_configs }.to raise_error(LogStash::ConfigurationError)
       end
     end
-  end
 
-  context "incomplete configuration" do
-    context "when using path.config" do
-      let(:config_string) { filter_block }
-      let(:config_path) do
-        file = Stud::Temporary.file
-        path = file.path
-        file.write(config_string)
-        file.close # we need to flush the write
-        path
+    context "when only the `config.string` is set" do
+      let(:settings) do
+        mock_settings( "config.string" => filter_block)
       end
-      let(:settings) { mock_settings( "path.config" => config_path) }
 
-      it "doesn't add anything" do
-        expect(subject.pipeline_configs.first.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+      it "returns a config" do
+        expect(subject.pipeline_configs.first.config_string).to include(filter_block)
       end
     end
 
-    context "when the input block is missing" do
-      let(:settings) { mock_settings( "config.string" => "#{filter_block} #{output_block}") }
+    context "when only the `path.config` is set" do
+      let(:config_file) { temporary_file(input_block) }
+      let(:settings) do
+        mock_settings( "path.config" => config_file)
+      end
 
-      it "add stdin input" do
-        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.input)
+      it "returns a config" do
+        expect(subject.pipeline_configs.first.config_string).to include(input_block)
       end
     end
 
-    context "when the output block is missing" do
-      let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block}") }
+    context "when the `path.config` is an url" do
+      let(:remote_url) { "http://test.dev/superconfig.conf" }
 
-      it "add stdout output" do
-        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output)
+      before :all do
+        WebMock.disable_net_connect!
+      end
+
+      after :all do
+        WebMock.allow_net_connect!
+      end
+
+      before do
+        stub_request(:get, remote_url)
+          .to_return({
+                       :body => input_block,
+                       :status => 200
+                     })
+      end
+
+      let(:settings) do
+        mock_settings( "path.config" => remote_url)
       end
-    end
 
-    context "when both the output block and input block are missing" do
-      let(:settings) { mock_settings( "config.string" => "#{filter_block}") }
+      it "returns a config" do
+        expect(subject.pipeline_configs.first.config_string).to include(input_block)
+      end
 
-      it "add stdin and output" do
-        expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+      context "when `config.string` is set" do
+        let(:settings) do
+          mock_settings(
+            "path.config" => remote_url,
+            "config.string" => filter_block
+          )
+        end
+
+        it "raises an exception" do
+          expect { subject.pipeline_configs }.to raise_error
+        end
       end
     end
 
-    context "when it has an input and an output" do
-      let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block} #{output_block}") }
+    context "incomplete configuration" do
+      context "when using path.config" do
+        let(:config_string) { filter_block }
+        let(:config_path) do
+          file = Stud::Temporary.file
+          path = file.path
+          file.write(config_string)
+          file.close # we need to flush the write
+          path
+        end
+        let(:settings) { mock_settings( "path.config" => config_path) }
+
+        it "doesn't add anything" do
+          expect(subject.pipeline_configs.first.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        end
+      end
+
+      context "when the input block is missing" do
+        let(:settings) { mock_settings( "config.string" => "#{filter_block} #{output_block}") }
+
+        it "add stdin input" do
+          expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.input)
+        end
+      end
+
+      context "when the output block is missing" do
+        let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block}") }
 
-      it "doesn't add anything" do
-        expect(subject.pipeline_configs.first.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        it "add stdout output" do
+          expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output)
+        end
+      end
+
+      context "when both the output block and input block are missing" do
+        let(:settings) { mock_settings( "config.string" => "#{filter_block}") }
+
+        it "add stdin and output" do
+          expect(subject.pipeline_configs.first.config_string).to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        end
+      end
+
+      context "when it has an input and an output" do
+        let(:settings) { mock_settings( "config.string" => "#{input_block} #{filter_block} #{output_block}") }
+
+        it "doesn't add anything" do
+          expect(subject.pipeline_configs.first.config_string).not_to include(LogStash::Config::Defaults.output, LogStash::Config::Defaults.input)
+        end
       end
     end
   end
 end
+
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index 026ef64c999..95d6968ea50 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -7,7 +7,7 @@
  * not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *	http://www.apache.org/licenses/LICENSE-2.0
+ *  http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
diff --git a/qa/integration/fixtures/env_variables_config_spec.yml b/qa/integration/fixtures/env_variables_config_spec.yml
index 008e2c95f2f..601e77ff880 100644
--- a/qa/integration/fixtures/env_variables_config_spec.yml
+++ b/qa/integration/fixtures/env_variables_config_spec.yml
@@ -8,8 +8,10 @@ config: |-
     }
   }
   filter {
-    mutate {
-      add_tag => [ "blah", "${TEST_ENV_TAG}" ]
+    if [host] == "${TEST_ENV_HOST}" or [@metadata][input][tcp][source][name] == "${TEST_ENV_HOST}" {
+     mutate {
+       add_tag => [ "blah", "${TEST_ENV_TAG}" ]
+     }
     }
   }
   output {
diff --git a/qa/integration/specs/env_variables_config_spec.rb b/qa/integration/specs/env_variables_config_spec.rb
index 248d8c35280..8a689fb5b89 100644
--- a/qa/integration/specs/env_variables_config_spec.rb
+++ b/qa/integration/specs/env_variables_config_spec.rb
@@ -42,7 +42,8 @@
     test_env["TEST_ENV_TCP_PORT"] = "#{test_tcp_port}"
     test_env["TEST_ENV_TAG"] = test_tag
     test_env["TEST_ENV_PATH"] = test_path
-    
+    test_env["TEST_ENV_HOST"] = "localhost"
+
     logstash_service = @fixture.get_service("logstash")
     logstash_service.env_variables = test_env
     logstash_service.start_background(@fixture.config)
diff --git a/qa/integration/specs/secret_store_spec.rb b/qa/integration/specs/secret_store_spec.rb
index c25aa3202b2..136718bafad 100644
--- a/qa/integration/specs/secret_store_spec.rb
+++ b/qa/integration/specs/secret_store_spec.rb
@@ -79,6 +79,13 @@
     end
   end
 
+  it "won't show secret value when pipeline definition is wrong" do
+    test_env["LOGSTASH_KEYSTORE_PASS"] = "keystore_pa9454w3rd"
+    logstash = @logstash.run_cmd(["bin/logstash","-e", "input { http { user => test password => \"${tag1}\" port = \"3333\" }}", "--path.settings", settings_dir], true, test_env)
+    expect(logstash.stderr_and_stdout).to match(/\[ERROR\]/)
+    expect(logstash.stderr_and_stdout).to match(/\\"\$\{tag1\}\\"/)
+  end
+
   context "won't start" do
     it "with the wrong password when variables are in settings" do
       test_env["LOGSTASH_KEYSTORE_PASS"] = "WRONG_PASSWRD"
diff --git a/x-pack/lib/config_management/elasticsearch_source.rb b/x-pack/lib/config_management/elasticsearch_source.rb
index 43b7c9bc644..686b81b0052 100644
--- a/x-pack/lib/config_management/elasticsearch_source.rb
+++ b/x-pack/lib/config_management/elasticsearch_source.rb
@@ -13,8 +13,11 @@
 module LogStash
   module ConfigManagement
     class ElasticsearchSource < LogStash::Config::Source::Base
-      include LogStash::Util::Loggable, LogStash::LicenseChecker::Licensed,
-              LogStash::Helpers::ElasticsearchOptions
+      include LogStash::Util::Loggable
+      include LogStash::LicenseChecker::Licensed
+      include LogStash::Helpers::ElasticsearchOptions
+      include LogStash::Util::SubstitutionVariables
+
 
       class RemoteConfigError < LogStash::Error; end
 
@@ -93,7 +96,8 @@ def get_pipeline(pipeline_id, fetcher)
 
         raise RemoteConfigError, "Empty configuration for pipeline_id: #{pipeline_id}" if config_string.nil? || config_string.empty?
 
-        config_part = org.logstash.common.SourceWithMetadata.new("x-pack-config-management", pipeline_id.to_s, config_string, pipeline_metadata_str)
+        config_part = org.logstash.common.SourceWithMetadata.new("x-pack-config-management", pipeline_id.to_s,
+                                                                 replace_placeholders(config_string, false), pipeline_metadata_str)
 
         # We don't support multiple pipelines, so use the global settings from the logstash.yml file
         settings = @settings.clone
diff --git a/x-pack/spec/config_management/elasticsearch_source_spec.rb b/x-pack/spec/config_management/elasticsearch_source_spec.rb
index c9667d2438e..08a2082838d 100644
--- a/x-pack/spec/config_management/elasticsearch_source_spec.rb
+++ b/x-pack/spec/config_management/elasticsearch_source_spec.rb
@@ -480,6 +480,16 @@
                 end
               end
             end
+
+            context "when config string has env variable" do
+              let(:config) { "input { generator {} } if [app] != \"${APP}\" { } output { stdout {} }" }
+              before { ENV['APP'] = 'foobar' }
+
+              it "give env value in config string" do
+                pipeline_config = subject.pipeline_configs
+                expect(pipeline_config.first.config_string).to match(/if \[app\] != "foobar"/)
+              end
+            end
           end
 
           context "when the license has expired [#{es_version}]" do
