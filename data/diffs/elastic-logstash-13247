diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index 29680db94f3..5356736f079 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -162,7 +162,7 @@ setup_vendored_jruby() {
   fi
 
   if [ -z "$LS_GEM_HOME" ] ; then
-    export GEM_HOME="${LOGSTASH_HOME}/vendor/bundle/jruby/2.5.0"
+    export GEM_HOME="${LOGSTASH_HOME}/vendor/bundle/jruby/2.6.0"
   else
     export GEM_HOME=${LS_GEM_HOME}
   fi
diff --git a/build.gradle b/build.gradle
index 00514ff3825..a691cbedc2b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -305,14 +305,21 @@ def assemblyDeps = [downloadAndInstallJRuby, assemble] + subprojects.collect {
 
 tasks.register("installBundler") {
     dependsOn assemblyDeps
-    outputs.files file("${projectDir}/vendor/bundle/jruby/2.5.0/bin/bundle")
+    outputs.files file("${projectDir}/vendor/bundle/jruby/2.6.0/bin/bundle")
     doLast {
-      gem(projectDir, buildDir, "bundler", "~> 2", "${projectDir}/vendor/bundle/jruby/2.5.0")
+      gem(projectDir, buildDir, "bundler", "~> 2", "${projectDir}/vendor/bundle/jruby/2.6.0")
+  }
+}
+
+tasks.register("installRake") {
+    dependsOn assemblyDeps
+    doLast {
+      gem(projectDir, buildDir, "rake", "~> 13", "${projectDir}/vendor/bundle/jruby/2.6.0")
   }
 }
 
 tasks.register("bootstrap"){
-    dependsOn installBundler
+    dependsOn assemblyDeps
     doLast {
       setupJruby(projectDir, buildDir)
   }
@@ -321,9 +328,9 @@ tasks.register("bootstrap"){
 
 tasks.register("installDefaultGems") {
     dependsOn bootstrap
-  doLast {
-      rake(projectDir, buildDir, 'plugin:install-default')
-  }
+    doLast {
+        rake(projectDir, buildDir, 'plugin:install-default')
+    }
 }
 
 tasks.register("installTestGems") {
@@ -428,7 +435,7 @@ tasks.register("unpackTarDistribution", Copy) {
 
 def qaBuildPath = "${buildDir}/qa/integration"
 def qaVendorPath = "${qaBuildPath}/vendor"
-def qaBundledGemPath = "${qaVendorPath}/jruby/2.5.0".toString()
+def qaBundledGemPath = "${qaVendorPath}/jruby/2.6.0".toString()
 def qaBundleBin = "${qaBundledGemPath}/bin/bundle"
 
 tasks.register("installIntegrationTestBundler"){
diff --git a/lib/pluginmanager/gem_installer.rb b/lib/pluginmanager/gem_installer.rb
index bcf961205cf..9cdc390d661 100644
--- a/lib/pluginmanager/gem_installer.rb
+++ b/lib/pluginmanager/gem_installer.rb
@@ -26,7 +26,7 @@ module LogStash module PluginManager
   # - Generate the specifications
   # - Copy the data in the right folders
   class GemInstaller
-    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "2.5.0"))
+    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "2.6.0"))
     SPECIFICATIONS_DIR = "specifications"
     GEMS_DIR = "gems"
     CACHE_DIR = "cache"
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index 9da3874a028..7894c3419aa 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -69,9 +69,9 @@ def self.logstash_plugin?(plugin, version = nil, options={})
         return false
       end
     else
-      dep = Gem::Dependency.new(plugin, version || Gem::Requirement.default)
-      Gem.sources = Gem::SourceList.from(options[:rubygems_source]) if options[:rubygems_source]
-      specs, errors = Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
+      dep = ::Gem::Dependency.new(plugin, version || ::Gem::Requirement.default)
+      ::Gem.sources = ::Gem::SourceList.from(options[:rubygems_source]) if options[:rubygems_source]
+      specs, errors = ::Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
 
       # dump errors
       errors.each { |error| $stderr.puts(error.wordy) }
@@ -113,7 +113,7 @@ def self.logstash_plugin_gem_spec?(spec)
   # @return [Gem::Specification] .get file gem specification
   # @raise [Exception] Gem::Package::FormatError will be raised on invalid .gem file format, might be other exceptions too
   def self.plugin_file_spec(path)
-    Gem::Package.new(path).spec
+    ::Gem::Package.new(path).spec
   end
 
   # @param plugin [String] the plugin name or the local path to a .gem file
@@ -126,7 +126,7 @@ def self.plugin_file?(plugin)
   # @param name [String] specific plugin name to find or nil for all plugins
   # @return [Array<Gem::Specification>] all local logstash plugin gem specs
   def self.find_plugins_gem_specs(name = nil)
-    specs = name ? Gem::Specification.find_all_by_name(name) : Gem::Specification.find_all
+    specs = name ? ::Gem::Specification.find_all_by_name(name) : ::Gem::Specification.find_all
     specs.select{|spec| logstash_plugin_gem_spec?(spec)}
   end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 7c792a9a885..c028d10a270 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -112,7 +112,7 @@ def plugin_name
     def expr_attributes
       # Turn attributes into a hash map
       self.attributes.recursive_select(Attribute).map(&:expr).map {|k,v|
-        if v.java_kind_of?(Java::OrgLogstashConfigIrExpression::ValueExpression)
+        if v.kind_of?(Java::OrgLogstashConfigIrExpression::ValueExpression)
           [k, v.get]
         else
           [k,v]
@@ -347,7 +347,7 @@ def precedence(op)
     def jconvert(sexpr)
       raise "jconvert cannot handle nils!" if sexpr.nil?
 
-      if sexpr.java_kind_of?(Java::OrgLogstashConfigIrExpression::Expression)
+      if sexpr.kind_of?(Java::OrgLogstashConfigIrExpression::Expression)
         return sexpr
       end
 
diff --git a/logstash-core/lib/logstash/config/lir_serializer.rb b/logstash-core/lib/logstash/config/lir_serializer.rb
index 6740ae70e75..663d3ad506c 100644
--- a/logstash-core/lib/logstash/config/lir_serializer.rb
+++ b/logstash-core/lib/logstash/config/lir_serializer.rb
@@ -71,13 +71,13 @@ def vertex(v)
     end
     
     def vertex_type(v)
-      if v.java_kind_of?(org.logstash.config.ir.graph.PluginVertex)
+      if v.kind_of?(org.logstash.config.ir.graph.PluginVertex)
         :plugin
-      elsif v.java_kind_of?(org.logstash.config.ir.graph.IfVertex)
+      elsif v.kind_of?(org.logstash.config.ir.graph.IfVertex)
         :if
-      elsif v.java_kind_of?(org.logstash.config.ir.graph.QueueVertex)
+      elsif v.kind_of?(org.logstash.config.ir.graph.QueueVertex)
         :queue
-      elsif v.java_kind_of?(org.logstash.config.ir.graph.SeparatorVertex)
+      elsif v.kind_of?(org.logstash.config.ir.graph.SeparatorVertex)
         :separator
       else
         raise "Unexpected vertex type! #{v}"
@@ -121,7 +121,7 @@ def remove_separators_from_edges(edges)
       edges.each do |e|
         if vertex_type(e.to) == :separator
           e.to.getOutgoingEdges.each do |outgoing|
-            if e.java_kind_of?(org.logstash.config.ir.graph.BooleanEdge)
+            if e.kind_of?(org.logstash.config.ir.graph.BooleanEdge)
               edges_with_separators_removed << edge(org.logstash.config.ir.graph.BooleanEdge.new(e.edgeType, e.from, outgoing.to))
             else
               edges_with_separators_removed << edge(org.logstash.config.ir.graph.PlainEdge.factory.make(e.from, outgoing.to))
@@ -143,7 +143,7 @@ def edge(e)
         "id" => e.id
       }
       
-      if e.java_kind_of?(org.logstash.config.ir.graph.BooleanEdge)
+      if e.kind_of?(org.logstash.config.ir.graph.BooleanEdge)
         e_json["when"] = e.edge_type
         e_json["type"] = "boolean"
       else
diff --git a/logstash-core/spec/support/helpers.rb b/logstash-core/spec/support/helpers.rb
index de7beb31ebb..aa2a5554980 100644
--- a/logstash-core/spec/support/helpers.rb
+++ b/logstash-core/spec/support/helpers.rb
@@ -110,7 +110,7 @@ def temporary_file(content, file_name = Time.now.to_i.to_s, directory = Stud::Te
 
 RSpec::Matchers.define :ir_eql do |expected|
   match do |actual|
-    next unless expected.java_kind_of?(org.logstash.config.ir.SourceComponent) && actual.java_kind_of?(org.logstash.config.ir.SourceComponent)
+    next unless expected.kind_of?(org.logstash.config.ir.SourceComponent) && actual.kind_of?(org.logstash.config.ir.SourceComponent)
 
     expected.sourceComponentEquals(actual)
   end
diff --git a/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java b/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
index 4ec9fadca09..d3d15c118cc 100644
--- a/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
+++ b/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
@@ -31,9 +31,11 @@
 import org.jruby.Ruby;
 import org.jruby.RubyBasicObject;
 import org.jruby.RubyString;
+import org.jruby.RubyModule;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.java.proxies.JavaProxy;
 import org.jruby.java.proxies.MapJavaProxy;
+import org.jruby.javasupport.Java;
 import org.jruby.javasupport.JavaClass;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.Block;
@@ -60,14 +62,14 @@ public static void setupRubyJavaIntegration(final Ruby ruby) {
         ruby.getArray().defineAnnotatedMethods(RubyJavaIntegration.RubyArrayOverride.class);
         ruby.getHash().defineAnnotatedMethods(RubyJavaIntegration.RubyHashOverride.class);
         Stream.of(LinkedHashMap.class, HashMap.class).forEach(cls ->
-            JavaClass.get(ruby, cls).getProxyModule().defineAnnotatedMethods(
+            Java.getProxyClass(ruby, cls).defineAnnotatedMethods(
                 RubyJavaIntegration.RubyMapProxyOverride.class
             )
         );
-        JavaClass.get(ruby, Map.class).getProxyModule().defineAnnotatedMethods(
+        Java.getProxyClass(ruby, Map.class).defineAnnotatedMethods(
             RubyJavaIntegration.JavaMapOverride.class
         );
-        JavaClass.get(ruby, Collection.class).getProxyModule().defineAnnotatedMethods(
+        Java.getProxyClass(ruby, Collection.class).defineAnnotatedMethods(
             RubyJavaIntegration.JavaCollectionOverride.class
         );
     }
@@ -279,7 +281,8 @@ public static IRubyObject containsKey(final ThreadContext context, final IRubyOb
         @JRubyMethod
         public static IRubyObject merge(final ThreadContext context, final IRubyObject self,
             final IRubyObject other) {
-            return ((MapJavaProxy) self.dup()).merge_bang(context, other, Block.NULL_BLOCK);
+            IRubyObject[] other_array = { other };
+            return ((MapJavaProxy) self.dup()).merge_bang(context, other_array, Block.NULL_BLOCK);
         }
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
index 1d540876f4b..3d0262d2a71 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
@@ -23,6 +23,8 @@
 import java.nio.file.Path;
 
 import org.jruby.RubyHash;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.jruby.runtime.load.LibrarySearcher;
 import org.jruby.runtime.load.LoadService;
 import org.junit.BeforeClass;
 import org.logstash.RubyTestBase;
@@ -41,7 +43,8 @@ public static void before() {
      */
     private static void ensureLoadpath() {
         final LoadService loader = RubyUtil.RUBY.getLoadService();
-        if (loader.findFileForLoad("logstash/compiler").library == null) {
+        final LibrarySearcher librarySearcher = new LibrarySearcher(loader);
+        if (librarySearcher.findLibraryForLoad("logstash/compiler") == null) {
             final String gems = LS_HOME.
                     resolve("vendor").resolve("bundle").resolve("jruby").resolve("2.5.0").
                     toFile().getAbsolutePath();
diff --git a/qa/integration/rspec.rb b/qa/integration/rspec.rb
index 6b2740e5d8f..ac58f1051b7 100644
--- a/qa/integration/rspec.rb
+++ b/qa/integration/rspec.rb
@@ -20,7 +20,7 @@
 ::Gem.clear_paths
 
 ENV['GEM_HOME'] = ENV['GEM_PATH'] = ::File.expand_path(
-    ::File.join(__FILE__, "..", "..", "..", "build", "qa", "integration", "vendor", "jruby", "2.5.0")
+    ::File.join(__FILE__, "..", "..", "..", "build", "qa", "integration", "vendor", "jruby", "2.6.0")
 )
 
 ::Gem.paths = ENV
diff --git a/rubyUtils.gradle b/rubyUtils.gradle
index 7032e0f9fcd..e5f3daac5ed 100644
--- a/rubyUtils.gradle
+++ b/rubyUtils.gradle
@@ -25,7 +25,7 @@ buildscript {
     dependencies {
         classpath 'org.yaml:snakeyaml:1.29'
         classpath "de.undercouch:gradle-download-task:4.0.4"
-        classpath "org.jruby:jruby-complete:9.2.20.1"
+        classpath "org.jruby:jruby-complete:9.3.3.0"
     }
 }
 
@@ -139,7 +139,7 @@ void buildGem(File projectDir, File buildDir, String gemspec) {
 void rake(File projectDir, File buildDir, String task) {
     executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
         jruby.currentDirectory = projectDir
-        jruby.runScriptlet("require 'rake'")
+        jruby.runScriptlet("require 'rake'; require 'time'")
         jruby.runScriptlet("""
                 rake = Rake.application
                 rake.init
@@ -168,7 +168,7 @@ void setupJruby(File projectDir, File buildDir) {
 Object executeJruby(File projectDir, File buildDir, Closure<?> /* Object*/ block) {
     def jruby = new ScriptingContainer()
     def env = jruby.environment
-    def gemDir = "${projectDir}/vendor/bundle/jruby/2.5.0".toString()
+    def gemDir = "${projectDir}/vendor/bundle/jruby/2.6.0".toString()
     env.put "USE_RUBY", "1"
     env.put "GEM_HOME", gemDir
     env.put "GEM_SPEC_CACHE", "${buildDir}/cache".toString()
diff --git a/versions.yml b/versions.yml
index 421415a94da..bcc4c576c5d 100644
--- a/versions.yml
+++ b/versions.yml
@@ -13,8 +13,8 @@ bundled_jdk:
 # jruby must reference a *released* version of jruby which can be downloaded from the official download url
 # *and* for which jars artifacts are published for compile-time
 jruby:
-  version: 9.2.20.1
-  sha1: 7f45f8a3d53d5f19f69952014abcb542b2670846
+  version: 9.3.3.0
+  sha1: 3d65f3afe9e811372e402ea81060d00cd950ca3f
 
 # jruby-runtime-override, if specified, will override the jruby version installed in vendor/jruby
 #jruby-runtime-override:
