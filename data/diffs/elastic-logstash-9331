diff --git a/bin/dependencies-report b/bin/dependencies-report
index 63979513c93..bf4e8273494 100755
--- a/bin/dependencies-report
+++ b/bin/dependencies-report
@@ -29,4 +29,9 @@ fi
 . "$(cd `dirname ${SOURCEPATH}`/..; pwd)/bin/logstash.lib.sh"
 setup
 
+SCRIPT=$(readlink -f "$0")
+SCRIPTPATH=$(dirname "$SCRIPT")
+
+
+mkdir -p build
 ruby_exec "logstash-core/lib/logstash/dependency_report_runner.rb" "$@"
diff --git a/build.gradle b/build.gradle
index 433d4f66d5a..d311e31c9af 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,9 +1,13 @@
 buildscript {
     repositories {
         mavenCentral()
+        maven {
+            url 'https://plugins.gradle.org/m2/'
+        }
     }
     dependencies {
         classpath 'org.yaml:snakeyaml:1.17'
+        classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.7.1"
     }
 }
 
@@ -72,6 +76,24 @@ allprojects {
   }
 }
 
+subprojects {
+    repositories {
+        maven {
+            url 'https://plugins.gradle.org/m2/'
+        }
+    }
+    dependencies {
+        compile "gradle.plugin.com.github.jk1:gradle-license-report:0.7.1"
+    }
+
+    apply plugin: 'com.github.jk1.dependency-license-report'
+
+    licenseReport {
+        renderer = new com.github.jk1.license.render.CsvReportRenderer()
+        configurations = ['compile', 'runtime']
+    }
+}
+
 // fetch version from Logstash's master versions.yml file
 def versionMap = (Map) (new Yaml()).load(new File("${projectDir}/versions.yml").text)
 version = versionMap['logstash-core']
@@ -102,6 +124,8 @@ clean {
   delete "${projectDir}/.bundle"
   delete "${projectDir}/qa/integration/Gemfile.lock"
   delete "${projectDir}/qa/integration/.bundle"
+  delete "${projectDir}/build/licenseReportFolders.txt"
+  delete "${projectDir}/build/rubyDependencies.csv"
 }
 
 task bootstrap {}
@@ -274,6 +298,46 @@ project(":logstash-integration-tests") {
 
 task runIntegrationTests(dependsOn: [tasks.getByPath(":logstash-integration-tests:integrationTests")]) {}
 
+task generateLicenseReport(type: JavaExec) {
+    dependsOn("generateLicenseReportInputs")
+    dependsOn(":dependencies-report:assemble")
+
+    def jarFile = project('dependencies-report').getBuildDir().toString() + "/libs/dependencies-report.jar"
+
+    String licenseReportInputCSV = project.hasProperty("licenseReportInputCSV") ? project.property("licenseReportInputCSV") : "build/dependencies.csv.ruby"
+    String licenseReportOutputCSV = project.hasProperty("licenseReportOutputCSV") ? project.property("licenseReportOutputCSV") : "build/dependencies.csv"
+
+    classpath = project.files([jarFile])
+    main = "org.logstash.dependencies.Main"
+    args \
+      licenseReportInputCSV, \
+      project.getBuildDir().toString() + "/licenseReportFolders.txt", \
+      licenseReportOutputCSV
+}
+
+task generateLicenseReportInputs() {
+    dependsOn subprojects.generateLicenseReport
+
+    // write location of all license reports for subprojects containing artifacts that are distributed to single file
+    StringBuilder licenseReportFolders = new StringBuilder()
+    subprojects.findAll { s1 -> !s1.hasProperty("isDistributedArtifact") || s1.property("isDistributedArtifact") == 'true'}.each { s ->
+        s.tasks.findAll { t2 -> t2.getName() == "generateLicenseReport" }.each { t3 ->
+            licenseReportFolders.append(t3.outputs.files.asPath + "\n")
+        }
+    }
+
+    if (gradle.startParameter.taskNames.contains("generateLicenseReport")) {
+        def licenseReportPath = project.getBuildDir().toString() + "/licenseReportFolders.txt"
+        def licenseReportFolder = new File(licenseReportPath)
+        licenseReportFolder.delete()
+        licenseReportFolder = new File(licenseReportPath)
+        licenseReportFolder.createNewFile()
+        if (licenseReportFolder.canWrite()) {
+            licenseReportFolder.text = licenseReportFolders.toString()
+        }
+    }
+}
+
 // If you are running a JRuby snapshot we will skip the integrity check.
 verifyFile.onlyIf { doChecksum }
 bootstrap.dependsOn installTestGems
diff --git a/logstash-core/benchmarks/gradle.properties b/logstash-core/benchmarks/gradle.properties
new file mode 100644
index 00000000000..7f7a1fae05e
--- /dev/null
+++ b/logstash-core/benchmarks/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=false
+
diff --git a/logstash-core/gradle.properties b/logstash-core/gradle.properties
new file mode 100644
index 00000000000..ee05cbf9c32
--- /dev/null
+++ b/logstash-core/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=true
+
diff --git a/logstash-core/lib/logstash/dependency_report.rb b/logstash-core/lib/logstash/dependency_report.rb
index 5f85c245817..493c4d0d737 100644
--- a/logstash-core/lib/logstash/dependency_report.rb
+++ b/logstash-core/lib/logstash/dependency_report.rb
@@ -6,6 +6,8 @@
 require "clamp"
 require "rubygems"
 require "jars/gemspec_artifacts"
+require 'fileutils'
+require 'securerandom'
 
 class LogStash::DependencyReport < Clamp::Command
   option [ "--csv" ], "OUTPUT_PATH", "The path to write the dependency report in csv format.",
@@ -13,19 +15,37 @@ class LogStash::DependencyReport < Clamp::Command
 
   def execute
     require "csv"
-    CSV.open(output_path, "wb", :headers => [ "name", "version", "url", "license" ], :write_headers => true) do |csv|
+
+    tmp_dir = java.lang.System.getProperty("java.io.tmpdir")
+    ruby_output_path = File.join(tmp_dir, SecureRandom.uuid)
+    # Write a CSV with just the ruby stuff
+    CSV.open(ruby_output_path, "wb", :headers => [ "name", "version", "url", "license" ], :write_headers => true) do |csv|
       puts "Finding gem dependencies"
       gems.each { |d| csv << d }
-      puts "Finding java/jar dependencies"
+      puts "Finding gem embedded java/jar dependencies"
       jars.each { |d| csv << d }
     end
+    puts "Wrote temporary ruby deps CSV to #{ruby_output_path}"
+
 
     # Copy in COPYING.csv which is a best-effort, hand-maintained file of dependency license information.
-    File.open(output_path, "a+") do |file|
+    File.open(ruby_output_path, "a+") do |file|
       extra = File.join(File.dirname(__FILE__), "..", "..", "..", "COPYING.csv")
       file.write(IO.read(extra))
     end
+
+    # Use gradle to find the rest and add to the ruby CSV
+    puts "Find gradle jar dependencies #{Dir.pwd}"
+    command = ["./gradlew", "generateLicenseReport", "-PlicenseReportInputCSV=#{ruby_output_path}", "-PlicenseReportOutputCSV=#{output_path}"]
+    puts "Executing #{command}"
+    system(*command)
+    if $?.exitstatus != 0
+      raise "Could not run gradle java deps! Exit status #{$?.exitstatus}"
+    end
+
     nil
+  ensure
+    FileUtils.rm(ruby_output_path) if ruby_output_path
   end
 
   def gems
diff --git a/qa/integration/gradle.properties b/qa/integration/gradle.properties
new file mode 100644
index 00000000000..7f7a1fae05e
--- /dev/null
+++ b/qa/integration/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=false
+
diff --git a/settings.gradle b/settings.gradle
index f3f977fdfd8..256c87a70b1 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,6 +1,7 @@
-include ':logstash-core', 'logstash-core-benchmarks', 'ingest-converter', 'benchmark-cli', 'logstash-integration-tests'
+include ':logstash-core', 'logstash-core-benchmarks', 'ingest-converter', 'benchmark-cli', 'logstash-integration-tests', 'dependencies-report'
 project(':logstash-core').projectDir = new File('./logstash-core')
 project(':logstash-core-benchmarks').projectDir = new File('./logstash-core/benchmarks')
 project(':logstash-integration-tests').projectDir = new File('./qa/integration')
 project(':ingest-converter').projectDir = new File('./tools/ingest-converter')
 project(':benchmark-cli').projectDir = new File('./tools/benchmark-cli')
+project(':dependencies-report').projectDir = new File('./tools/dependencies-report')
diff --git a/tools/benchmark-cli/gradle.properties b/tools/benchmark-cli/gradle.properties
new file mode 100644
index 00000000000..7f7a1fae05e
--- /dev/null
+++ b/tools/benchmark-cli/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=false
+
diff --git a/tools/dependencies-report/build.gradle b/tools/dependencies-report/build.gradle
new file mode 100644
index 00000000000..a75a33c66f3
--- /dev/null
+++ b/tools/dependencies-report/build.gradle
@@ -0,0 +1,53 @@
+import org.yaml.snakeyaml.Yaml
+
+// fetch version from Logstash's master versions.yml file
+def versionMap = (Map) (new Yaml()).load(new File("$projectDir/../../versions.yml").text)
+
+description = """Logstash Dependency Reporting Utility"""
+version = versionMap['logstash-core']
+String jacksonVersion = versionMap['jackson']
+
+repositories {
+  mavenCentral()
+  jcenter()
+}
+
+buildscript {
+  repositories {
+    mavenCentral()
+    jcenter()
+  }
+  dependencies {
+    classpath 'org.yaml:snakeyaml:1.17'
+    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
+  }
+}
+
+dependencies {
+  compile 'commons-io:commons-io:2.6'
+  compile 'org.apache.commons:commons-csv:1.5'
+  compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
+  compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
+  compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
+  testCompile 'junit:junit:4.12'
+}
+
+javadoc {
+  enabled = false
+}
+
+test {
+  // We need to force IPV4 usage to make WireMock tests portable between *nix and Windows.
+  // For details see: https://github.com/elastic/logstash/pull/8372
+  jvmArgs '-Djava.net.preferIPv4Stack=true'
+}
+
+apply plugin: 'com.github.johnrengelman.shadow'
+
+shadowJar {
+  baseName = 'dependencies-report'
+  classifier = null
+  version = null
+}
+
+assemble.dependsOn shadowJar
diff --git a/tools/dependencies-report/gradle.properties b/tools/dependencies-report/gradle.properties
new file mode 100644
index 00000000000..7f7a1fae05e
--- /dev/null
+++ b/tools/dependencies-report/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=false
+
diff --git a/tools/dependencies-report/src/main/java/org/logstash/dependencies/Dependency.java b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Dependency.java
new file mode 100644
index 00000000000..43c0ebd36ad
--- /dev/null
+++ b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Dependency.java
@@ -0,0 +1,81 @@
+package org.logstash.dependencies;
+
+import org.apache.commons.csv.CSVRecord;
+
+import java.util.Objects;
+
+class Dependency implements Comparable<Dependency> {
+    public static final String RUBY_TYPE = "ruby";
+    public static final String JAVA_TYPE = "java";
+
+    String type;
+    String name;
+    String version;
+    String license;
+    String spdxLicense;
+
+    // optional
+    String licenseUrl;
+
+    public static Dependency fromRubyCsvRecord(CSVRecord record) {
+        Dependency d = new Dependency();
+
+        // name, version, url, license
+        d.type = RUBY_TYPE;
+        d.name = record.get(0);
+        d.version = record.get(1);
+        d.license = record.get(3);
+
+        return d;
+    }
+
+    public static Dependency fromJavaCsvRecord(CSVRecord record) {
+        Dependency d = new Dependency();
+
+        // artifact,moduleUrl,moduleLicense,moduleLicenseUrl
+        d.type = JAVA_TYPE;
+
+        String nameAndVersion = record.get(0);
+        int colonIndex = nameAndVersion.indexOf(':');
+        if (colonIndex == -1) {
+            String err = String.format("Could not parse java artifact name and version from '%s'",
+                    nameAndVersion);
+            throw new IllegalStateException(err);
+        }
+        colonIndex = nameAndVersion.indexOf(':', colonIndex + 1);
+        if (colonIndex == -1) {
+            String err = String.format("Could not parse java artifact name and version from '%s'",
+                    nameAndVersion);
+            throw new IllegalStateException(err);
+        }
+        d.name = nameAndVersion.substring(0, colonIndex);
+        d.version = nameAndVersion.substring(colonIndex + 1);
+
+        // We DON'T read the license info out of this CSV because it is not reliable, we want humans
+        // to use the overrides to ensure our license info is accurate
+
+        return d;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Dependency d = (Dependency) o;
+        return Objects.equals(name, d.name) && Objects.equals(version, d.version);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, version);
+    }
+
+    @Override
+    public int compareTo(Dependency o) {
+        return (name + version).compareTo(o.name + o.version);
+    }
+}
diff --git a/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java
new file mode 100644
index 00000000000..140a62ac839
--- /dev/null
+++ b/tools/dependencies-report/src/main/java/org/logstash/dependencies/Main.java
@@ -0,0 +1,49 @@
+package org.logstash.dependencies;
+
+import java.io.FileInputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.List;
+
+/**
+ * Entry point for {@link ReportGenerator}.
+ */
+public class Main {
+
+    static final String LICENSE_MAPPING_PATH = "/licenseMapping.csv";
+    static final String ACCEPTABLE_LICENSES_PATH = "/acceptableLicenses.csv";
+
+    public static void main(String[] args) throws IOException {
+        if (args.length < 3) {
+            System.out.println("Usage: org.logstash.dependencies.Main <pathToRubyDependencies.csv> <pathToJavaLicenseReportFolders.txt> <output.csv>");
+            System.exit(1);
+        }
+
+        InputStream rubyDependenciesStream = new FileInputStream(args[0]);
+        List<String> javaDependencyReports = Files.readAllLines(Paths.get(args[1]));
+        InputStream[] javaDependenciesStreams = new InputStream[javaDependencyReports.size()];
+        for (int k = 0; k < javaDependencyReports.size(); k++) {
+            javaDependenciesStreams[k] = new FileInputStream(javaDependencyReports.get(k) + "/licenses.csv");
+        }
+        FileWriter outputWriter = new FileWriter(args[2]);
+
+        boolean reportResult = new ReportGenerator().generateReport(
+                getResourceAsStream(LICENSE_MAPPING_PATH),
+                getResourceAsStream(ACCEPTABLE_LICENSES_PATH),
+                rubyDependenciesStream,
+                javaDependenciesStreams,
+                outputWriter
+        );
+
+        // If there were unknown results in the report, exit with a non-zero status
+        System.exit(reportResult ? 0 : 1);
+
+    }
+
+    static InputStream getResourceAsStream(String resourcePath) {
+        return ReportGenerator.class.getResourceAsStream(resourcePath);
+    }
+}
diff --git a/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java b/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java
new file mode 100644
index 00000000000..a719705655e
--- /dev/null
+++ b/tools/dependencies-report/src/main/java/org/logstash/dependencies/ReportGenerator.java
@@ -0,0 +1,135 @@
+package org.logstash.dependencies;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVPrinter;
+import org.apache.commons.csv.CSVRecord;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+/**
+ * Generates Java dependencies report for Logstash.
+ *
+ * See:
+ * https://github.com/elastic/logstash/issues/8725
+ * https://github.com/elastic/logstash/pull/8837
+ * https://github.com/elastic/logstash/pull/9331
+ */
+public class ReportGenerator {
+
+    final String UNKNOWN_LICENSE = "UNKNOWN";
+    final Collection<Dependency> UNKNOWN_LICENSES = new ArrayList<Dependency>();
+
+    public boolean generateReport(
+            InputStream licenseMappingStream,
+            InputStream acceptableLicensesStream,
+            InputStream rubyDependenciesStream,
+            InputStream[] javaDependenciesStreams,
+            Writer output) throws IOException {
+
+        SortedSet<Dependency> dependencies = new TreeSet<>();
+        readRubyDependenciesReport(rubyDependenciesStream, dependencies);
+
+        for (InputStream stream : javaDependenciesStreams) {
+            readJavaDependenciesReport(stream, dependencies);
+        }
+
+        Map<String, String> licenseMapping = new HashMap<>();
+        readLicenseMapping(licenseMappingStream, licenseMapping);
+        List<String> acceptableLicenses = new ArrayList<>();
+        readAcceptableLicenses(acceptableLicensesStream, acceptableLicenses);
+        for (Dependency dependency : dependencies) {
+            String nameAndVersion = dependency.name + ":" + dependency.version;
+            if (licenseMapping.containsKey(nameAndVersion)) {
+                String mappedLicense = licenseMapping.get(nameAndVersion);
+
+                if (acceptableLicenses.stream().anyMatch(mappedLicense::equalsIgnoreCase)) {
+                    dependency.spdxLicense = licenseMapping.get(nameAndVersion);
+                } else {
+                    // unacceptable license
+                    UNKNOWN_LICENSES.add(dependency);
+                }
+            } else {
+                dependency.spdxLicense = UNKNOWN_LICENSE;
+                UNKNOWN_LICENSES.add(dependency);
+            }
+
+        }
+
+        try (CSVPrinter csvPrinter = new CSVPrinter(output,
+                CSVFormat.DEFAULT.withHeader("dependencyName", "dependencyVersion", "license"))) {
+            for (Dependency dependency : dependencies) {
+                csvPrinter.printRecord(dependency.name, dependency.version, dependency.spdxLicense);
+            }
+            csvPrinter.flush();
+        }
+
+        String msg = "Generated report with %d dependencies (%d unknown or unacceptable licenses).";
+        System.out.println(String.format(msg + "\n", dependencies.size(), UNKNOWN_LICENSES.size()));
+
+        if (UNKNOWN_LICENSES.size() > 0) {
+            String errMsg =
+                "Add complying licenses (using the SPDX license ID from https://spdx.org/licenses) " +
+                "for the libraries listed below to tools/dependencies-report/src/main/resources/" +
+                "licenseMapping.csv:";
+            System.out.println(errMsg);
+            for (Dependency dependency : UNKNOWN_LICENSES) {
+                System.out.println(
+                        String.format("\"%s:%s\"", dependency.name, dependency.version));
+            }
+        }
+
+        return UNKNOWN_LICENSES.size() == 0;
+    }
+
+    private void readRubyDependenciesReport(InputStream stream, SortedSet<Dependency> dependencies)
+            throws IOException {
+        Reader in = new InputStreamReader(stream);
+        for (CSVRecord record : CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in)) {
+            dependencies.add(Dependency.fromRubyCsvRecord(record));
+        }
+    }
+
+    private void readJavaDependenciesReport(InputStream stream, SortedSet<Dependency> dependencies)
+            throws IOException {
+        Reader in = new InputStreamReader(stream);
+        for (CSVRecord record : CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in)) {
+            dependencies.add(Dependency.fromJavaCsvRecord(record));
+        }
+    }
+
+    private void readAcceptableLicenses(InputStream stream, List<String> acceptableLicenses)
+            throws IOException {
+        Reader in = new InputStreamReader(stream);
+        for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) {
+            String acceptableLicenseId = record.get(0);
+            if (acceptableLicenseId != null && !acceptableLicenseId.equals("")) {
+                acceptableLicenses.add(acceptableLicenseId);
+            }
+        }
+    }
+
+    private void readLicenseMapping(InputStream stream, Map<String, String> licenseMapping)
+            throws IOException {
+        Reader in = new InputStreamReader(stream);
+        for (CSVRecord record : CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in)) {
+            String dependencyNameAndVersion = record.get(0);
+            if (dependencyNameAndVersion != null && !dependencyNameAndVersion.equals("")) {
+                licenseMapping.put(dependencyNameAndVersion, record.get(1));
+            }
+        }
+    }
+
+
+}
diff --git a/tools/dependencies-report/src/main/resources/acceptableLicenses.csv b/tools/dependencies-report/src/main/resources/acceptableLicenses.csv
new file mode 100644
index 00000000000..a1c6a8ed038
--- /dev/null
+++ b/tools/dependencies-report/src/main/resources/acceptableLicenses.csv
@@ -0,0 +1,7 @@
+Apache-2.0
+BSD-2-Clause-FreeBSD
+BSD-3-Clause-Attribution
+EPL-1.0
+EPL-2.0
+MIT
+Ruby
\ No newline at end of file
diff --git a/tools/dependencies-report/src/main/resources/licenseMapping.csv b/tools/dependencies-report/src/main/resources/licenseMapping.csv
new file mode 100644
index 00000000000..0b3aa3cfaa7
--- /dev/null
+++ b/tools/dependencies-report/src/main/resources/licenseMapping.csv
@@ -0,0 +1,44 @@
+dependency,licenseOverride
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"webrick:1.3.1",BSD-2-Clause-FreeBSD
+"webhdfs:0.8.0",Apache-2.0
+"avl_tree:1.2.1",BSD-2-Clause-FreeBSD
+"filesize:0.0.4",MIT
+"filewatch:0.9.0",MIT
+"gelfd:0.2.0",Apache-2.0
+"gmetric:0.1.3",MIT
+"jls-grok:0.11.4",Apache-2.0
+"jls-lumberjack:0.0.26",Apache-2.0
+"march_hare:3.1.1",MIT
+"method_source:0.8.2",MIT
+"metriks:0.9.9.8",MIT
+"numerizer:0.1.1",MIT
+"rspec-sequencing:0.1.0",Apache-2.0
+"rubyzip:1.2.1",BSD-2-Clause-FreeBSD
+"snappy-jars:1.1.0.1.2",Apache-2.0
+"snmp:1.2.0",MIT
+"stud:0.0.23",Apache-2.0
+"com.google.googlejavaformat:google-java-format:1.1",Apache-2.0
+"com.google.guava:guava:19.0",Apache-2.0
+"org.apache.logging.log4j:log4j-api:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-core:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-slf4j-impl:2.9.1",Apache-2.0
+"org.codehaus.janino:commons-compiler:3.0.8",BSD-3-Clause-Attribution
+"org.codehaus.janino:janino:3.0.8",BSD-3-Clause-Attribution
+"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.5",Apache-2.0
+"org.jruby:jruby-complete:9.1.13.0",EPL-2.0|Ruby
+"org.slf4j:slf4j-api:1.7.25",MIT
+"org.eclipse.core:org.eclipse.core.commands:3.6.0",EPL-1.0
+"org.eclipse.core:org.eclipse.core.contenttype:3.4.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.expressions:3.4.300",EPL-1.0
+"org.eclipse.core:org.eclipse.core.filesystem:1.3.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.jobs:3.5.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.resources:3.7.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.runtime:3.7.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.app:1.3.100",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.common:3.6.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.preferences:3.4.1",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.registry:3.5.101",EPL-1.0
+"org.eclipse.jdt:org.eclipse.jdt.core:3.10.0",EPL-1.0
+"org.eclipse.osgi:org.eclipse.osgi:3.7.1",EPL-1.0
+"org.eclipse.text:org.eclipse.text:3.5.101",EPL-1.0
diff --git a/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java b/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java
new file mode 100644
index 00000000000..1c320b63917
--- /dev/null
+++ b/tools/dependencies-report/src/test/java/org/logstash/dependencies/ReportGeneratorTest.java
@@ -0,0 +1,73 @@
+package org.logstash.dependencies;
+
+import org.junit.Test;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.StringWriter;
+import java.util.Scanner;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.logstash.dependencies.Main.ACCEPTABLE_LICENSES_PATH;
+
+public class ReportGeneratorTest {
+
+    @Test
+    public void testSuccessfulReport() throws IOException {
+        String expectedOutput = getStringFromStream(
+                Main.getResourceAsStream("/expectedOutput.txt"));
+        StringWriter output = new StringWriter();
+        boolean result = runReportGenerator("/licenseMapping-good.csv", output);
+
+        assertTrue(result);
+        assertEquals(expectedOutput, output.toString());
+    }
+
+    @Test
+    public void testReportWithMissingLicenses() throws IOException {
+        StringWriter output = new StringWriter();
+        boolean result = runReportGenerator("/licenseMapping-missing.csv", output);
+
+        assertFalse(result);
+
+        // verify that the two components in the test input with missing licenses are
+        // listed in the output with no license, i.e., an empty license field followed by CR/LF
+        assertTrue(output.toString().contains("commons-io:commons-io,2.5,\r\n"));
+        assertTrue(output.toString().contains("filesize,0.0.4,\r\n"));
+    }
+
+    @Test
+    public void testReportWithUnacceptableLicenses() throws IOException {
+        StringWriter output = new StringWriter();
+        boolean result = runReportGenerator("/licenseMapping-unacceptable.csv", output);
+
+        assertFalse(result);
+
+        // verify that the two components in the test input with unacceptable licenses are
+        // listed in the output with no license, i.e., an empty license field followed by CR/LF
+        assertTrue(output.toString().contains("com.fasterxml.jackson.core:jackson-core,2.7.3,\r\n"));
+        assertTrue(output.toString().contains("bundler,1.16.0,\r\n"));
+    }
+
+    private static boolean runReportGenerator(String licenseMappingPath, StringWriter output)
+            throws IOException {
+        ReportGenerator rg = new ReportGenerator();
+        return rg.generateReport(
+                Main.getResourceAsStream(licenseMappingPath),
+                Main.getResourceAsStream(ACCEPTABLE_LICENSES_PATH),
+                Main.getResourceAsStream("/rubyDependencies.csv"),
+                new InputStream[]{
+                        Main.getResourceAsStream("/javaLicenses1.csv"),
+                        Main.getResourceAsStream("/javaLicenses2.csv"),
+                },
+                output
+        );
+    }
+
+    private static String getStringFromStream(InputStream stream) {
+        return new Scanner(stream, "UTF-8").useDelimiter("\\A").next();
+    }
+}
+
diff --git a/tools/dependencies-report/src/test/resources/expectedOutput.txt b/tools/dependencies-report/src/test/resources/expectedOutput.txt
new file mode 100644
index 00000000000..df50fbf8679
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/expectedOutput.txt
@@ -0,0 +1,20 @@
+dependencyName,dependencyVersion,license
+bundler,1.16.0,MIT
+bundler,1.16.1,MIT
+com.fasterxml.jackson.core:jackson-core,2.7.3,Apache-2.0
+com.fasterxml.jackson.core:jackson-core,2.9.1,Apache-2.0
+com.fasterxml.jackson.core:jackson-core,2.9.4,Apache-2.0
+com.google.errorprone:javac-shaded,9-dev-r4023-3,EPL-1.0
+commons-io:commons-io,2.5,Apache-2.0
+control.js,,MIT
+filesize,0.0.4,MIT
+gradle.plugin.com.github.jk1:gradle-license-report,0.7.1,Apache-2.0
+jar-dependencies,0.3.10,Apache-2.0
+jar-dependencies,0.3.11,MIT
+jar-dependencies,0.3.12,MIT
+jruby-openssl,0.9.20,Apache-2.0
+jruby-openssl,0.9.21,Apache-2.0
+jruby-readline,1.1.1,Apache-2.0
+json-parser,,Apache-2.0
+junit:junit,4.12,Apache-2.0
+org.codehaus.janino:commons-compiler,3.0.8,BSD-3-Clause-Attribution
diff --git a/tools/dependencies-report/src/test/resources/javaLicenses1.csv b/tools/dependencies-report/src/test/resources/javaLicenses1.csv
new file mode 100644
index 00000000000..5fcf72e40b1
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/javaLicenses1.csv
@@ -0,0 +1,6 @@
+"artifact","moduleUrl","moduleLicense","moduleLicenseUrl",
+"com.fasterxml.jackson.core:jackson-core:2.9.4","https://github.com/FasterXML/jackson-core","The Apache Software License, Version 2.0","http://www.apache.org/licenses/LICENSE-2.0.txt",
+"com.google.errorprone:javac-shaded:9-dev-r4023-3","https://github.com/google/error-prone-javac","GNU General Public License, version 2, with the Classpath Exception","http://openjdk.java.net/legal/gplv2+ce.html",
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",,,,
+"junit:junit:4.12","http://junit.org","Eclipse Public License 1.0","http://www.eclipse.org/legal/epl-v10.html",
+"org.codehaus.janino:commons-compiler:3.0.8",,"New BSD License","https://raw.githubusercontent.com/janino-compiler/janino/master/LICENSE",
diff --git a/tools/dependencies-report/src/test/resources/javaLicenses2.csv b/tools/dependencies-report/src/test/resources/javaLicenses2.csv
new file mode 100644
index 00000000000..d3e7bd6e3b2
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/javaLicenses2.csv
@@ -0,0 +1,3 @@
+"artifact","moduleUrl","moduleLicense","moduleLicenseUrl",
+"commons-io:commons-io:2.5","http://commons.apache.org/proper/commons-io/","Apache License, Version 2.0","http://www.apache.org/licenses/LICENSE-2.0.txt",
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",,,,
diff --git a/tools/dependencies-report/src/test/resources/licenseMapping-good.csv b/tools/dependencies-report/src/test/resources/licenseMapping-good.csv
new file mode 100644
index 00000000000..21492873833
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/licenseMapping-good.csv
@@ -0,0 +1,62 @@
+dependency,licenseOverride
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"webrick:1.3.1",BSD-2-Clause-FreeBSD
+"bundler:1.16.0",MIT
+"webhdfs:0.8.0",Apache-2.0
+"avl_tree:1.2.1",BSD-2-Clause-FreeBSD
+"filesize:0.0.4",MIT
+"filewatch:0.9.0",MIT
+"gelfd:0.2.0",Apache-2.0
+"gmetric:0.1.3",MIT
+"UNKNOWNgzip:1.0",UNKNOWN
+"UNKNOWNjls-grok:0.11.4",UNKNOWN
+"jls-lumberjack:0.0.26",Apache-2.0
+"march_hare:3.1.1",MIT
+"method_source:0.8.2",MIT
+"metriks:0.9.9.8",MIT
+"numerizer:0.1.1",MIT
+"rspec-sequencing:0.1.0",Apache-2.0
+"rubyzip:1.2.1",BSD-2-Clause-FreeBSD
+"snappy-jars:1.1.0.1.2",Apache-2.0
+"snmp:1.2.0",MIT
+"stud:0.0.23",Apache-2.0
+"com.google.googlejavaformat:google-java-format:1.1",Apache-2.0
+"com.google.guava:guava:19.0",Apache-2.0
+"org.apache.logging.log4j:log4j-api:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-core:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-slf4j-impl:2.9.1",Apache-2.0
+"org.codehaus.janino:commons-compiler:3.0.8",BSD-3-Clause-Attribution
+"org.codehaus.janino:janino:3.0.8",BSD-3-Clause-Attribution
+"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.5",Apache-2.0
+"org.jruby:jruby-complete:9.1.13.0",EPL-2.0|Ruby
+"org.slf4j:slf4j-api:1.7.25",MIT
+"org.eclipse.core:org.eclipse.core.commands:3.6.0",EPL-1.0
+"org.eclipse.core:org.eclipse.core.contenttype:3.4.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.expressions:3.4.300",EPL-1.0
+"org.eclipse.core:org.eclipse.core.filesystem:1.3.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.jobs:3.5.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.resources:3.7.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.runtime:3.7.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.app:1.3.100",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.common:3.6.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.preferences:3.4.1",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.registry:3.5.101",EPL-1.0
+"org.eclipse.jdt:org.eclipse.jdt.core:3.10.0",EPL-1.0
+"org.eclipse.osgi:org.eclipse.osgi:3.7.1",EPL-1.0
+"org.eclipse.text:org.eclipse.text:3.5.101",EPL-1.0
+"bundler:1.16.1",MIT
+"com.fasterxml.jackson.core:jackson-core:2.7.3",Apache-2.0
+"com.fasterxml.jackson.core:jackson-core:2.9.1",Apache-2.0
+"com.fasterxml.jackson.core:jackson-core:2.9.4",Apache-2.0
+"com.google.errorprone:javac-shaded:9-dev-r4023-3",EPL-1.0
+"commons-io:commons-io:2.5",Apache-2.0
+"control.js:",MIT
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"jar-dependencies:0.3.10",Apache-2.0
+"jar-dependencies:0.3.11",MIT
+"jar-dependencies:0.3.12",MIT
+"jruby-openssl:0.9.20",Apache-2.0
+"jruby-openssl:0.9.21",Apache-2.0
+"jruby-readline:1.1.1",Apache-2.0
+"json-parser:",Apache-2.0
+"junit:junit:4.12",Apache-2.0
\ No newline at end of file
diff --git a/tools/dependencies-report/src/test/resources/licenseMapping-missing.csv b/tools/dependencies-report/src/test/resources/licenseMapping-missing.csv
new file mode 100644
index 00000000000..550fbe2b56f
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/licenseMapping-missing.csv
@@ -0,0 +1,62 @@
+dependency,licenseOverride
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"webrick:1.3.1",BSD-2-Clause-FreeBSD
+"bundler:1.16.0",MIT
+"webhdfs:0.8.0",Apache-2.0
+"avl_tree:1.2.1",BSD-2-Clause-FreeBSD
+"filesize:0.0.4",
+"filewatch:0.9.0",MIT
+"gelfd:0.2.0",Apache-2.0
+"gmetric:0.1.3",MIT
+"UNKNOWNgzip:1.0",UNKNOWN
+"UNKNOWNjls-grok:0.11.4",UNKNOWN
+"jls-lumberjack:0.0.26",Apache-2.0
+"march_hare:3.1.1",MIT
+"method_source:0.8.2",MIT
+"metriks:0.9.9.8",MIT
+"numerizer:0.1.1",MIT
+"rspec-sequencing:0.1.0",Apache-2.0
+"rubyzip:1.2.1",BSD-2-Clause-FreeBSD
+"snappy-jars:1.1.0.1.2",Apache-2.0
+"snmp:1.2.0",MIT
+"stud:0.0.23",Apache-2.0
+"com.google.googlejavaformat:google-java-format:1.1",Apache-2.0
+"com.google.guava:guava:19.0",Apache-2.0
+"org.apache.logging.log4j:log4j-api:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-core:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-slf4j-impl:2.9.1",Apache-2.0
+"org.codehaus.janino:commons-compiler:3.0.8",BSD-3-Clause-Attribution
+"org.codehaus.janino:janino:3.0.8",BSD-3-Clause-Attribution
+"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.5",Apache-2.0
+"org.jruby:jruby-complete:9.1.13.0",EPL-2.0|Ruby
+"org.slf4j:slf4j-api:1.7.25",MIT
+"org.eclipse.core:org.eclipse.core.commands:3.6.0",EPL-1.0
+"org.eclipse.core:org.eclipse.core.contenttype:3.4.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.expressions:3.4.300",EPL-1.0
+"org.eclipse.core:org.eclipse.core.filesystem:1.3.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.jobs:3.5.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.resources:3.7.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.runtime:3.7.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.app:1.3.100",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.common:3.6.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.preferences:3.4.1",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.registry:3.5.101",EPL-1.0
+"org.eclipse.jdt:org.eclipse.jdt.core:3.10.0",EPL-1.0
+"org.eclipse.osgi:org.eclipse.osgi:3.7.1",EPL-1.0
+"org.eclipse.text:org.eclipse.text:3.5.101",EPL-1.0
+"bundler:1.16.1",MIT
+"com.fasterxml.jackson.core:jackson-core:2.7.3",Apache-2.0
+"com.fasterxml.jackson.core:jackson-core:2.9.1",Apache-2.0
+"com.fasterxml.jackson.core:jackson-core:2.9.4",Apache-2.0
+"com.google.errorprone:javac-shaded:9-dev-r4023-3",EPL-1.0
+"commons-io:commons-io:2.5",
+"control.js:",MIT
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"jar-dependencies:0.3.10",Apache-2.0
+"jar-dependencies:0.3.11",MIT
+"jar-dependencies:0.3.12",MIT
+"jruby-openssl:0.9.20",Apache-2.0
+"jruby-openssl:0.9.21",Apache-2.0
+"jruby-readline:1.1.1",Apache-2.0
+"json-parser:",Apache-2.0
+"junit:junit:4.12",Apache-2.0
\ No newline at end of file
diff --git a/tools/dependencies-report/src/test/resources/licenseMapping-unacceptable.csv b/tools/dependencies-report/src/test/resources/licenseMapping-unacceptable.csv
new file mode 100644
index 00000000000..8a90397033f
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/licenseMapping-unacceptable.csv
@@ -0,0 +1,62 @@
+dependency,licenseOverride
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"webrick:1.3.1",BSD-2-Clause-FreeBSD
+"bundler:1.16.0",LGPL-2.0-only
+"webhdfs:0.8.0",Apache-2.0
+"avl_tree:1.2.1",BSD-2-Clause-FreeBSD
+"filesize:0.0.4",MIT
+"filewatch:0.9.0",MIT
+"gelfd:0.2.0",Apache-2.0
+"gmetric:0.1.3",MIT
+"UNKNOWNgzip:1.0",UNKNOWN
+"UNKNOWNjls-grok:0.11.4",UNKNOWN
+"jls-lumberjack:0.0.26",Apache-2.0
+"march_hare:3.1.1",MIT
+"method_source:0.8.2",MIT
+"metriks:0.9.9.8",MIT
+"numerizer:0.1.1",MIT
+"rspec-sequencing:0.1.0",Apache-2.0
+"rubyzip:1.2.1",BSD-2-Clause-FreeBSD
+"snappy-jars:1.1.0.1.2",Apache-2.0
+"snmp:1.2.0",MIT
+"stud:0.0.23",Apache-2.0
+"com.google.googlejavaformat:google-java-format:1.1",Apache-2.0
+"com.google.guava:guava:19.0",Apache-2.0
+"org.apache.logging.log4j:log4j-api:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-core:2.9.1",Apache-2.0
+"org.apache.logging.log4j:log4j-slf4j-impl:2.9.1",Apache-2.0
+"org.codehaus.janino:commons-compiler:3.0.8",BSD-3-Clause-Attribution
+"org.codehaus.janino:janino:3.0.8",BSD-3-Clause-Attribution
+"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.5",Apache-2.0
+"org.jruby:jruby-complete:9.1.13.0",EPL-2.0|Ruby
+"org.slf4j:slf4j-api:1.7.25",MIT
+"org.eclipse.core:org.eclipse.core.commands:3.6.0",EPL-1.0
+"org.eclipse.core:org.eclipse.core.contenttype:3.4.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.expressions:3.4.300",EPL-1.0
+"org.eclipse.core:org.eclipse.core.filesystem:1.3.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.jobs:3.5.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.resources:3.7.100",EPL-1.0
+"org.eclipse.core:org.eclipse.core.runtime:3.7.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.app:1.3.100",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.common:3.6.0",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.preferences:3.4.1",EPL-1.0
+"org.eclipse.equinox:org.eclipse.equinox.registry:3.5.101",EPL-1.0
+"org.eclipse.jdt:org.eclipse.jdt.core:3.10.0",EPL-1.0
+"org.eclipse.osgi:org.eclipse.osgi:3.7.1",EPL-1.0
+"org.eclipse.text:org.eclipse.text:3.5.101",EPL-1.0
+"bundler:1.16.1",MIT
+"com.fasterxml.jackson.core:jackson-core:2.7.3",LGPL-2.0-only
+"com.fasterxml.jackson.core:jackson-core:2.9.1",Apache-2.0
+"com.fasterxml.jackson.core:jackson-core:2.9.4",Apache-2.0
+"com.google.errorprone:javac-shaded:9-dev-r4023-3",EPL-1.0
+"commons-io:commons-io:2.5",Apache-2.0
+"control.js:",MIT
+"gradle.plugin.com.github.jk1:gradle-license-report:0.7.1",Apache-2.0
+"jar-dependencies:0.3.10",Apache-2.0
+"jar-dependencies:0.3.11",MIT
+"jar-dependencies:0.3.12",MIT
+"jruby-openssl:0.9.20",Apache-2.0
+"jruby-openssl:0.9.21",Apache-2.0
+"jruby-readline:1.1.1",Apache-2.0
+"json-parser:",Apache-2.0
+"junit:junit:4.12",Apache-2.0
\ No newline at end of file
diff --git a/tools/dependencies-report/src/test/resources/rubyDependencies.csv b/tools/dependencies-report/src/test/resources/rubyDependencies.csv
new file mode 100644
index 00000000000..a73b5e35c80
--- /dev/null
+++ b/tools/dependencies-report/src/test/resources/rubyDependencies.csv
@@ -0,0 +1,14 @@
+name,version,url,license
+bundler,1.16.1,http://bundler.io,MIT
+bundler,1.16.0,http://bundler.io,MIT
+filesize,0.0.4,http://filesize.rubyforge.org/,UNKNOWN
+jar-dependencies,0.3.12,https://github.com/mkristian/jar-dependencies,MIT
+jar-dependencies,0.3.11,https://github.com/mkristian/jar-dependencies,MIT
+jar-dependencies,0.3.10,https://github.com/mkristian/jar-dependencies,MIT
+jruby-openssl,0.9.21,https://github.com/jruby/jruby-openssl,EPL-1.0|GPL-2.0|LGPL-2.1
+jruby-openssl,0.9.20,https://github.com/jruby/jruby-openssl,EPL-1.0|GPL-2.0|LGPL-2.1
+jruby-readline,1.1.1,https://github.com/jruby/jruby,EPL-1.0|GPL-2.0|LGPL-2.1
+com.fasterxml.jackson.core:jackson-core,2.7.3,https://github.com/FasterXML/jackson-core,Apache-2.0
+com.fasterxml.jackson.core:jackson-core,2.9.1,https://github.com/FasterXML/jackson-core,Apache-2.0
+control.js,,,MIT
+json-parser,,https://github.com/flori/json,Ruby
diff --git a/tools/ingest-converter/gradle.properties b/tools/ingest-converter/gradle.properties
new file mode 100644
index 00000000000..7f7a1fae05e
--- /dev/null
+++ b/tools/ingest-converter/gradle.properties
@@ -0,0 +1,2 @@
+isDistributedArtifact=false
+
