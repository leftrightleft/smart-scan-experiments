diff --git a/lib/logstash/agent.rb b/lib/logstash/agent.rb
index 481df8be177..d0123db0285 100644
--- a/lib/logstash/agent.rb
+++ b/lib/logstash/agent.rb
@@ -320,8 +320,22 @@ def wait
   private
   def start_input(input)
     @logger.debug("Starting input", :plugin => input)
+    t = 0
     # inputs should write directly to output queue if there are no filters.
     input_target = @filters.length > 0 ? @filter_queue : @output_queue
+    # check to see if input supports multiple threads
+    if input.threadable
+      @logger.debug("Threadable input", :plugin => input)
+      # start up extra threads if need be
+      (input.threads-1).times do
+        input_thread = input.clone
+        @logger.debug("Starting thread", :plugin => input, :thread => (t+=1))
+        @plugins[input_thread] = Thread.new(input_thread, input_target) do |*args|
+          run_input(*args)
+        end
+      end
+    end
+    @logger.debug("Starting thread", :plugin => input, :thread => (t+=1))
     @plugins[input] = Thread.new(input, input_target) do |*args|
       run_input(*args)
     end
diff --git a/lib/logstash/inputs/amqp.rb b/lib/logstash/inputs/amqp.rb
index d7dc3f22390..8c36e3d7fa5 100644
--- a/lib/logstash/inputs/amqp.rb
+++ b/lib/logstash/inputs/amqp.rb
@@ -1,4 +1,4 @@
-require "logstash/inputs/base"
+require "logstash/inputs/threadable"
 require "logstash/namespace"
 
 # Pull events from an AMQP exchange.
@@ -9,7 +9,7 @@
 #
 # The default settings will create an entirely transient queue and listen for all messages by default.
 # If you need durability or any other advanced settings, please set the appropriate options
-class LogStash::Inputs::Amqp < LogStash::Inputs::Base
+class LogStash::Inputs::Amqp < LogStash::Inputs::Threadable
 
   config_name "amqp"
   plugin_status "beta"
diff --git a/lib/logstash/inputs/base.rb b/lib/logstash/inputs/base.rb
index b3fdf09a6b8..c18837fec7a 100755
--- a/lib/logstash/inputs/base.rb
+++ b/lib/logstash/inputs/base.rb
@@ -54,10 +54,12 @@ class LogStash::Inputs::Base < LogStash::Plugin
   config :add_field, :validate => :hash, :default => {}
 
   attr_accessor :params
+  attr_accessor :threadable
 
   public
   def initialize(params)
     super
+    @threadable = false
     config_init(params)
     @tags ||= []
   end # def initialize
diff --git a/lib/logstash/inputs/generator.rb b/lib/logstash/inputs/generator.rb
index 1b81d4f77de..d75d6e2f796 100644
--- a/lib/logstash/inputs/generator.rb
+++ b/lib/logstash/inputs/generator.rb
@@ -1,4 +1,4 @@
-require "logstash/inputs/base"
+require "logstash/inputs/threadable"
 require "logstash/namespace"
 require "socket" # for Socket.gethostname
 
@@ -7,7 +7,7 @@
 # The general intention of this is to test performance of plugins.
 #
 # An event is generated first
-class LogStash::Inputs::Generator < LogStash::Inputs::Base
+class LogStash::Inputs::Generator < LogStash::Inputs::Threadable
   config_name "generator"
   plugin_status "experimental"
 
diff --git a/lib/logstash/inputs/threadable.rb b/lib/logstash/inputs/threadable.rb
new file mode 100755
index 00000000000..73c08af9795
--- /dev/null
+++ b/lib/logstash/inputs/threadable.rb
@@ -0,0 +1,17 @@
+require "logstash/namespace"
+require "logstash/inputs/base"
+
+# This is the threadable class for logstash inputs. 
+# Use this class in your inputs if it can support multiple threads
+class LogStash::Inputs::Threadable < LogStash::Inputs::Base
+
+  # Set this to the number of threads you want this input to spawn.
+  # This is the same as declaring the input multiple times
+  config :threads, :validate => :number, :default => 1
+ 
+  def initialize(params)
+    super
+    @threadable = true
+  end
+
+end # class LogStash::Inputs::Threadable
