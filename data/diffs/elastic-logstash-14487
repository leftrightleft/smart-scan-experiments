diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/SettingsImpl.java b/logstash-core/src/main/java/org/logstash/ackedqueue/SettingsImpl.java
index 417bc81a87f..dd23001886f 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/SettingsImpl.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/SettingsImpl.java
@@ -169,7 +169,7 @@ private BuilderImpl(final String dirForFiles, final Class<? extends Queueable> e
         public Builder elementClass(final Class<? extends Queueable> elementClass) {
             return new BuilderImpl(
                 this.dirForFiles, elementClass, this.capacity, this.queueMaxBytes, this.maxUnread,
-                this.checkpointMaxAcks, this.checkpointMaxWrites, false
+                this.checkpointMaxAcks, this.checkpointMaxWrites, this.checkpointRetry
             );
         }
 
@@ -177,7 +177,7 @@ public Builder elementClass(final Class<? extends Queueable> elementClass) {
         public Builder capacity(final int capacity) {
             return new BuilderImpl(
                 this.dirForFiles, this.elementClass, capacity, this.queueMaxBytes, this.maxUnread,
-                this.checkpointMaxAcks, this.checkpointMaxWrites, false
+                this.checkpointMaxAcks, this.checkpointMaxWrites, this.checkpointRetry
             );
         }
 
@@ -185,7 +185,7 @@ public Builder capacity(final int capacity) {
         public Builder queueMaxBytes(final long size) {
             return new BuilderImpl(
                 this.dirForFiles, this.elementClass, this.capacity, size, this.maxUnread,
-                this.checkpointMaxAcks, this.checkpointMaxWrites, false
+                this.checkpointMaxAcks, this.checkpointMaxWrites, this.checkpointRetry
             );
         }
 
@@ -194,7 +194,7 @@ public Builder maxUnread(final int maxUnread) {
             return new BuilderImpl(
                 this.dirForFiles, this.elementClass,
                 this.capacity, this.queueMaxBytes, maxUnread, this.checkpointMaxAcks,
-                this.checkpointMaxWrites, false
+                this.checkpointMaxWrites, this.checkpointRetry
             );
         }
 
@@ -203,7 +203,7 @@ public Builder checkpointMaxAcks(final int checkpointMaxAcks) {
             return new BuilderImpl(
                 this.dirForFiles, this.elementClass,
                 this.capacity, this.queueMaxBytes, this.maxUnread, checkpointMaxAcks,
-                this.checkpointMaxWrites, false
+                this.checkpointMaxWrites, this.checkpointRetry
             );
         }
 
@@ -211,7 +211,7 @@ public Builder checkpointMaxAcks(final int checkpointMaxAcks) {
         public Builder checkpointMaxWrites(final int checkpointMaxWrites) {
             return new BuilderImpl(
                 this.dirForFiles, this.elementClass, this.capacity, this.queueMaxBytes,
-                this.maxUnread, this.checkpointMaxAcks, checkpointMaxWrites, false
+                this.maxUnread, this.checkpointMaxAcks, checkpointMaxWrites, this.checkpointRetry
             );
         }
 
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/SettingsImplTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/SettingsImplTest.java
new file mode 100644
index 00000000000..708231a30eb
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/SettingsImplTest.java
@@ -0,0 +1,32 @@
+package org.logstash.ackedqueue;
+
+import junit.framework.TestCase;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class SettingsImplTest {
+
+    @Test
+    public void verifyConfiguredValues() {
+        Settings settings =  SettingsImpl.fileSettingsBuilder("PATH/TO/Q")
+                .capacity(10)
+                .maxUnread(1024)
+                .queueMaxBytes(2147483647)
+                .checkpointMaxAcks(1)
+                .checkpointMaxWrites(1)
+                .checkpointRetry(true)
+                .elementClass(StringElement.class)
+                .build();
+
+        assertEquals(settings.getDirPath(), "PATH/TO/Q");
+        assertEquals(settings.getCapacity(), 10);
+        assertEquals(settings.getMaxUnread(), 1024);
+        assertEquals(settings.getQueueMaxBytes(), 2147483647);
+        assertEquals(settings.getCheckpointMaxAcks(), 1);
+        assertEquals(settings.getCheckpointMaxWrites(), 1);
+        assertTrue(settings.getCheckpointRetry());
+        assertEquals(settings.getElementClass(), StringElement.class);
+    }
+}
\ No newline at end of file
