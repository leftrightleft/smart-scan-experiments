diff --git a/Dockerfile b/Dockerfile
index e567b4b47e0..9491ee8c98c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -35,7 +35,7 @@ ADD LICENSE.txt /opt/logstash/LICENSE.txt
 ADD NOTICE.TXT /opt/logstash/NOTICE.TXT
 ADD licenses /opt/logstash/licenses
 ADD CONTRIBUTORS /opt/logstash/CONTRIBUTORS
-ADD Gemfile.template Gemfile.jruby-2.6.lock.* /opt/logstash/
+ADD Gemfile.template Gemfile.jruby-2.5.lock.* /opt/logstash/
 ADD Rakefile /opt/logstash/Rakefile
 ADD build.gradle /opt/logstash/build.gradle
 ADD rubyUtils.gradle /opt/logstash/rubyUtils.gradle
diff --git a/Gemfile.jruby-2.5.lock.release b/Gemfile.jruby-2.5.lock.release
index c9bd09acca4..f453f1a4840 100644
--- a/Gemfile.jruby-2.5.lock.release
+++ b/Gemfile.jruby-2.5.lock.release
@@ -691,7 +691,7 @@ GEM
     mustermann (1.0.3)
     naught (1.1.0)
     nio4r (2.5.8-java)
-    nokogiri (1.13.6-java)
+    nokogiri (1.12.5-java)
       racc (~> 1.4)
     octokit (4.24.0)
       faraday (>= 1, < 3)
diff --git a/Gemfile.template b/Gemfile.template
index e2e48e4a5fc..482871f7cf2 100644
--- a/Gemfile.template
+++ b/Gemfile.template
@@ -6,12 +6,10 @@ gem "logstash-core", :path => "./logstash-core"
 gem "logstash-core-plugin-api", :path => "./logstash-core-plugin-api"
 
 gem "paquet", "~> 0.2"
-gem "pleaserun", "~>0.0.28", require: false
-gem "rake", "~> 12", require: false
-gem "ruby-progressbar", "~> 1", require: false
+gem "pleaserun", "~>0.0.28"
+gem "rake", "~> 12"
+gem "ruby-progressbar", "~> 1"
 gem "logstash-output-elasticsearch", ">= 10.4.2"
-gem "polyglot", require: false
-gem "treetop", require: false
 gem "faraday", "~> 1", :require => false # due elasticsearch-transport (elastic-transport) depending faraday '~> 1'
 gem "childprocess", "~> 4", :group => :build
 gem "fpm", "~> 1", ">= 1.14.1", :group => :build # compound due to bugfix https://github.com/jordansissel/fpm/pull/1856
diff --git a/bin/logstash.lib.sh b/bin/logstash.lib.sh
index f5092b2b1bc..53d541ca802 100755
--- a/bin/logstash.lib.sh
+++ b/bin/logstash.lib.sh
@@ -163,7 +163,7 @@ setup_vendored_jruby() {
   fi
 
   if [ -z "$LS_GEM_HOME" ] ; then
-    export GEM_HOME="${LOGSTASH_HOME}/vendor/bundle/jruby/2.6.0"
+    export GEM_HOME="${LOGSTASH_HOME}/vendor/bundle/jruby/2.5.0"
   else
     export GEM_HOME=${LS_GEM_HOME}
   fi
diff --git a/build.gradle b/build.gradle
index 2be78e70575..d5d8e252508 100644
--- a/build.gradle
+++ b/build.gradle
@@ -292,9 +292,9 @@ def bundlerVersion = "~> 2"
 
 tasks.register("installBundler") {
     dependsOn assemblyDeps
-    outputs.files file("${projectDir}/vendor/bundle/jruby/2.6.0/bin/bundle")
+    outputs.files file("${projectDir}/vendor/bundle/jruby/2.5.0/bin/bundle")
     doLast {
-      gem(projectDir, buildDir, "bundler", bundlerVersion, "${projectDir}/vendor/bundle/jruby/2.6.0")
+      gem(projectDir, buildDir, "bundler", bundlerVersion, "${projectDir}/vendor/bundle/jruby/2.5.0")
   }
 }
 
@@ -308,9 +308,9 @@ tasks.register("bootstrap"){
 
 tasks.register("installDefaultGems") {
     dependsOn bootstrap
-    doLast {
-        rake(projectDir, buildDir, 'plugin:install-default')
-    }
+  doLast {
+      rake(projectDir, buildDir, 'plugin:install-default')
+  }
 }
 
 tasks.register("installTestGems") {
@@ -415,7 +415,7 @@ tasks.register("unpackTarDistribution", Copy) {
 
 def qaBuildPath = "${buildDir}/qa/integration"
 def qaVendorPath = "${qaBuildPath}/vendor"
-def qaBundledGemPath = "${qaVendorPath}/jruby/2.6.0".toString()
+def qaBundledGemPath = "${qaVendorPath}/jruby/2.5.0".toString()
 def qaBundleBin = "${qaBundledGemPath}/bin/bundle"
 
 tasks.register("installIntegrationTestBundler"){
diff --git a/lib/bootstrap/bundler.rb b/lib/bootstrap/bundler.rb
index 2cdc631494a..2dd70b0136f 100644
--- a/lib/bootstrap/bundler.rb
+++ b/lib/bootstrap/bundler.rb
@@ -119,7 +119,7 @@ def invoke!(options = {})
         )
       end
       # create Gemfile.jruby-1.9.lock from template iff a template exists it itself does not exist
-      lock_template = ::File.join(ENV["LOGSTASH_HOME"], "Gemfile.jruby-2.6.lock.release")
+      lock_template = ::File.join(ENV["LOGSTASH_HOME"], "Gemfile.jruby-2.5.lock.release")
       if ::File.exists?(lock_template) && !::File.exists?(Environment::LOCKFILE)
         FileUtils.copy(lock_template, Environment::LOCKFILE)
       end
diff --git a/lib/pluginmanager/gem_installer.rb b/lib/pluginmanager/gem_installer.rb
index 9cdc390d661..bcf961205cf 100644
--- a/lib/pluginmanager/gem_installer.rb
+++ b/lib/pluginmanager/gem_installer.rb
@@ -26,7 +26,7 @@ module LogStash module PluginManager
   # - Generate the specifications
   # - Copy the data in the right folders
   class GemInstaller
-    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "2.6.0"))
+    GEM_HOME = Pathname.new(::File.join(LogStash::Environment::BUNDLE_DIR, "jruby", "2.5.0"))
     SPECIFICATIONS_DIR = "specifications"
     GEMS_DIR = "gems"
     CACHE_DIR = "cache"
diff --git a/lib/pluginmanager/util.rb b/lib/pluginmanager/util.rb
index 638ff734d75..4d963f785e6 100644
--- a/lib/pluginmanager/util.rb
+++ b/lib/pluginmanager/util.rb
@@ -68,9 +68,9 @@ def self.logstash_plugin?(plugin, version = nil, options={})
         return false
       end
     else
-      dep = ::Gem::Dependency.new(plugin, version || ::Gem::Requirement.default)
-      ::Gem.sources = ::Gem::SourceList.from(options[:rubygems_source]) if options[:rubygems_source]
-      specs, errors = ::Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
+      dep = Gem::Dependency.new(plugin, version || Gem::Requirement.default)
+      Gem.sources = Gem::SourceList.from(options[:rubygems_source]) if options[:rubygems_source]
+      specs, errors = Gem::SpecFetcher.fetcher.spec_for_dependency(dep)
 
       # dump errors
       errors.each { |error| $stderr.puts(error.wordy) }
@@ -112,7 +112,7 @@ def self.logstash_plugin_gem_spec?(spec)
   # @return [Gem::Specification] .get file gem specification
   # @raise [Exception] Gem::Package::FormatError will be raised on invalid .gem file format, might be other exceptions too
   def self.plugin_file_spec(path)
-    ::Gem::Package.new(path).spec
+    Gem::Package.new(path).spec
   end
 
   # @param plugin [String] the plugin name or the local path to a .gem file
@@ -125,7 +125,7 @@ def self.plugin_file?(plugin)
   # @param name [String] specific plugin name to find or nil for all plugins
   # @return [Array<Gem::Specification>] all local logstash plugin gem specs
   def self.find_plugins_gem_specs(name = nil)
-    specs = name ? ::Gem::Specification.find_all_by_name(name) : ::Gem::Specification.find_all
+    specs = name ? Gem::Specification.find_all_by_name(name) : Gem::Specification.find_all
     specs.select{|spec| logstash_plugin_gem_spec?(spec)}
   end
 
diff --git a/logstash-core/lib/logstash/api/app_helpers.rb b/logstash-core/lib/logstash/api/app_helpers.rb
index d8d623b7cba..99db7d9631a 100644
--- a/logstash-core/lib/logstash/api/app_helpers.rb
+++ b/logstash-core/lib/logstash/api/app_helpers.rb
@@ -60,11 +60,8 @@ def extract_fields(filter_string)
   end
 
   def as_boolean(string)
-    return true if string == true
-    return false if string == false
-
-    return true if string =~ (/(true|t|yes|y|1)$/i)
-    return false if  LogStash::Util.blank?(string) || string =~ (/(false|f|no|n|0)$/i)
+    return true   if string == true   || string =~ (/(true|t|yes|y|1)$/i)
+    return false  if string == false  || LogStash::Util.blank?(string) || string =~ (/(false|f|no|n|0)$/i)
     raise ArgumentError.new("invalid value for Boolean: \"#{string}\"")
   end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl.rb b/logstash-core/lib/logstash/compiler/lscl.rb
index 76ddab5ed06..7c792a9a885 100644
--- a/logstash-core/lib/logstash/compiler/lscl.rb
+++ b/logstash-core/lib/logstash/compiler/lscl.rb
@@ -15,7 +15,7 @@
 # specific language governing permissions and limitations
 # under the License.
 
-require 'treetop/runtime'
+require "treetop"
 require "logstash/compiler/treetop_monkeypatches"
 require "logstash/compiler/lscl/helpers"
 require "logstash/config/string_escape"
@@ -112,7 +112,7 @@ def plugin_name
     def expr_attributes
       # Turn attributes into a hash map
       self.attributes.recursive_select(Attribute).map(&:expr).map {|k,v|
-        if v.kind_of?(Java::OrgLogstashConfigIrExpression::ValueExpression)
+        if v.java_kind_of?(Java::OrgLogstashConfigIrExpression::ValueExpression)
           [k, v.get]
         else
           [k,v]
@@ -347,7 +347,7 @@ def precedence(op)
     def jconvert(sexpr)
       raise "jconvert cannot handle nils!" if sexpr.nil?
 
-      if sexpr.kind_of?(Java::OrgLogstashConfigIrExpression::Expression)
+      if sexpr.java_kind_of?(Java::OrgLogstashConfigIrExpression::Expression)
         return sexpr
       end
 
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
index d84f6ef0fc6..d1a3cb9d6f8 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.rb
@@ -1,7 +1,21 @@
-# Autogenerated from a Treetop grammar. Edits may be lost.
-
-
-require "treetop/runtime"
+# Licensed to Elasticsearch B.V. under one or more contributor
+# license agreements. See the NOTICE file distributed with
+# this work for additional information regarding copyright
+# ownership. Elasticsearch B.V. licenses this file to you under
+# the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+require "treetop"
 require "logstash/compiler/lscl.rb"
 
 module LogStashCompilerLSCLGrammar
@@ -3553,4 +3567,3 @@ def _nt_selector_element
 class LogStashCompilerLSCLGrammarParser < Treetop::Runtime::CompiledParser
   include LogStashCompilerLSCLGrammar
 end
-
diff --git a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
index 4cb6b82f810..50109cd02d8 100644
--- a/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
+++ b/logstash-core/lib/logstash/compiler/lscl/lscl_grammar.treetop
@@ -1,4 +1,4 @@
-require "treetop/runtime"
+require "treetop"
 require "logstash/compiler/lscl.rb"
 
 grammar LogStashCompilerLSCLGrammar
diff --git a/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb b/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
index cbc02128a34..6ad1823b3ce 100644
--- a/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
+++ b/logstash-core/lib/logstash/compiler/treetop_monkeypatches.rb
@@ -15,8 +15,6 @@
 # specific language governing permissions and limitations
 # under the License.
 
-require 'treetop/runtime'
-
 class Treetop::Runtime::SyntaxNode
   def get_meta(key)
     @ast_metadata ||= {}
diff --git a/logstash-core/lib/logstash/config/config_ast.rb b/logstash-core/lib/logstash/config/config_ast.rb
index 8d57b644198..c7c5f9cfee0 100644
--- a/logstash-core/lib/logstash/config/config_ast.rb
+++ b/logstash-core/lib/logstash/config/config_ast.rb
@@ -16,7 +16,7 @@
 # under the License.
 
 require "logstash/compiler/lscl/helpers"
-require 'treetop/runtime'
+require "treetop"
 
 require "logstash/compiler/treetop_monkeypatches"
 
diff --git a/logstash-core/lib/logstash/config/grammar.rb b/logstash-core/lib/logstash/config/grammar.rb
index 5cb3dc683a0..7007fee7490 100644
--- a/logstash-core/lib/logstash/config/grammar.rb
+++ b/logstash-core/lib/logstash/config/grammar.rb
@@ -15,7 +15,7 @@
 # specific language governing permissions and limitations
 # under the License.
 
-require "treetop/runtime"
+require "treetop"
 require "logstash/config/config_ast"
 
 module LogStashConfig
diff --git a/logstash-core/lib/logstash/config/grammar.treetop b/logstash-core/lib/logstash/config/grammar.treetop
index aaa7d223cbd..710684dee28 100644
--- a/logstash-core/lib/logstash/config/grammar.treetop
+++ b/logstash-core/lib/logstash/config/grammar.treetop
@@ -1,4 +1,4 @@
-require "treetop/runtime"
+require "treetop"
 require "logstash/config/config_ast"
 
 grammar LogStashConfig
diff --git a/logstash-core/lib/logstash/config/lir_serializer.rb b/logstash-core/lib/logstash/config/lir_serializer.rb
index 663d3ad506c..6740ae70e75 100644
--- a/logstash-core/lib/logstash/config/lir_serializer.rb
+++ b/logstash-core/lib/logstash/config/lir_serializer.rb
@@ -71,13 +71,13 @@ def vertex(v)
     end
     
     def vertex_type(v)
-      if v.kind_of?(org.logstash.config.ir.graph.PluginVertex)
+      if v.java_kind_of?(org.logstash.config.ir.graph.PluginVertex)
         :plugin
-      elsif v.kind_of?(org.logstash.config.ir.graph.IfVertex)
+      elsif v.java_kind_of?(org.logstash.config.ir.graph.IfVertex)
         :if
-      elsif v.kind_of?(org.logstash.config.ir.graph.QueueVertex)
+      elsif v.java_kind_of?(org.logstash.config.ir.graph.QueueVertex)
         :queue
-      elsif v.kind_of?(org.logstash.config.ir.graph.SeparatorVertex)
+      elsif v.java_kind_of?(org.logstash.config.ir.graph.SeparatorVertex)
         :separator
       else
         raise "Unexpected vertex type! #{v}"
@@ -121,7 +121,7 @@ def remove_separators_from_edges(edges)
       edges.each do |e|
         if vertex_type(e.to) == :separator
           e.to.getOutgoingEdges.each do |outgoing|
-            if e.kind_of?(org.logstash.config.ir.graph.BooleanEdge)
+            if e.java_kind_of?(org.logstash.config.ir.graph.BooleanEdge)
               edges_with_separators_removed << edge(org.logstash.config.ir.graph.BooleanEdge.new(e.edgeType, e.from, outgoing.to))
             else
               edges_with_separators_removed << edge(org.logstash.config.ir.graph.PlainEdge.factory.make(e.from, outgoing.to))
@@ -143,7 +143,7 @@ def edge(e)
         "id" => e.id
       }
       
-      if e.kind_of?(org.logstash.config.ir.graph.BooleanEdge)
+      if e.java_kind_of?(org.logstash.config.ir.graph.BooleanEdge)
         e_json["when"] = e.edge_type
         e_json["type"] = "boolean"
       else
diff --git a/logstash-core/lib/logstash/patches/polyglot.rb b/logstash-core/lib/logstash/patches/polyglot.rb
deleted file mode 100644
index 7e319d4c38d..00000000000
--- a/logstash-core/lib/logstash/patches/polyglot.rb
+++ /dev/null
@@ -1,20 +0,0 @@
-# NOTE: this patch is meant to be used when polyglot (a tree-top dependency) is loaded.
-# At runtime we avoid loading polyglot, it's only needed for the rake compile task atm.
-require 'polyglot'
-
-module Kernel
-  alias original_require require
-
-  def require(*a, &b)
-    begin
-      original_require(*a, &b)
-    rescue RuntimeError => e
-      # https://github.com/jruby/jruby/pull/7145 introduced an exception check for circular causes, which
-      # breaks when the polyglot library is used and LoadErrors are emitted
-      if e.message == "circular causes"
-        raise e.cause
-      end
-      raise e
-    end
-  end
-end
diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index 342b1d288b1..0f8453136cf 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -293,6 +293,7 @@ def namespace_lookup(type, name)
     # @return [Boolean] true if klass is a valid plugin for name
     def is_a_plugin?(klass, name)
       (klass.class == Java::JavaLang::Class && klass.simple_name.downcase == name.gsub('_','')) ||
+      (klass.class == Java::JavaClass && klass.simple_name.downcase == name.gsub('_','')) ||
       (klass.ancestors.include?(LogStash::Plugin) && klass.respond_to?(:config_name) &&
         klass.config_name == name)
     end
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index 14541c728a0..0c737af7436 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -32,6 +32,7 @@
 end
 
 require "clamp"
+
 require "logstash-core/logstash-core"
 require "logstash/environment"
 require "logstash/modules/cli_parser"
diff --git a/logstash-core/lib/logstash/util/cloud_setting_auth.rb b/logstash-core/lib/logstash/util/cloud_setting_auth.rb
index e7eb9b5b213..1ff52528726 100644
--- a/logstash-core/lib/logstash/util/cloud_setting_auth.rb
+++ b/logstash-core/lib/logstash/util/cloud_setting_auth.rb
@@ -16,5 +16,5 @@
 # under the License.
 
 module LogStash; module Util
-  java_import "org.logstash.util.CloudSettingAuth"
+  java_import org.logstash.util.CloudSettingAuth
 end; end
diff --git a/logstash-core/lib/logstash/util/cloud_setting_id.rb b/logstash-core/lib/logstash/util/cloud_setting_id.rb
index 71851a2ed42..5fb35c3d3d5 100644
--- a/logstash-core/lib/logstash/util/cloud_setting_id.rb
+++ b/logstash-core/lib/logstash/util/cloud_setting_id.rb
@@ -18,5 +18,5 @@
 require "base64"
 
 module LogStash; module Util
-    java_import "org.logstash.util.CloudSettingId"
+    java_import org.logstash.util.CloudSettingId
 end; end
diff --git a/logstash-core/lib/logstash/util/modules_setting_array.rb b/logstash-core/lib/logstash/util/modules_setting_array.rb
index d092f7e3633..854cdca5f6a 100644
--- a/logstash-core/lib/logstash/util/modules_setting_array.rb
+++ b/logstash-core/lib/logstash/util/modules_setting_array.rb
@@ -16,5 +16,5 @@
 # under the License.
 
 module LogStash; module Util
-    java_import "org.logstash.util.ModulesSettingArray"
+    java_import org.logstash.util.ModulesSettingArray
 end; end
diff --git a/logstash-core/lib/logstash/util/time_value.rb b/logstash-core/lib/logstash/util/time_value.rb
index 5b9ad9bd10f..85094c41700 100644
--- a/logstash-core/lib/logstash/util/time_value.rb
+++ b/logstash-core/lib/logstash/util/time_value.rb
@@ -17,6 +17,6 @@
 
 module LogStash
   module Util
-    java_import "org.logstash.util.TimeValue"
+    java_import org.logstash.util.TimeValue
   end
 end
diff --git a/logstash-core/spec/logstash/util_spec.rb b/logstash-core/spec/logstash/util_spec.rb
index 9123f3e7fde..c3297ed7745 100644
--- a/logstash-core/spec/logstash/util_spec.rb
+++ b/logstash-core/spec/logstash/util_spec.rb
@@ -90,5 +90,17 @@ class TestKlass
       expect( thread_id ).to be_a Integer
       expect( thread_id ).to eq(java.lang.Thread.currentThread.getId)
     end
+
+    context "when a (native) thread is collected" do
+      let(:dead_thread) { Thread.new { 42 }.tap { |t| sleep(0.01) while t.status } }
+
+      it "returns nil as id" do
+        thread = dead_thread
+        p thread if $VERBOSE
+        2.times { java.lang.System.gc || sleep(0.01) } # we're assuming a full-gc to clear all weak-refs
+        # NOTE: if you notice this spec failing - remote it (a java.lang.Thread weak-ref might stick around)
+        expect(LogStash::Util.get_thread_id(thread)).to be nil
+      end
+    end
   end
 end
diff --git a/logstash-core/spec/support/helpers.rb b/logstash-core/spec/support/helpers.rb
index aa2a5554980..de7beb31ebb 100644
--- a/logstash-core/spec/support/helpers.rb
+++ b/logstash-core/spec/support/helpers.rb
@@ -110,7 +110,7 @@ def temporary_file(content, file_name = Time.now.to_i.to_s, directory = Stud::Te
 
 RSpec::Matchers.define :ir_eql do |expected|
   match do |actual|
-    next unless expected.kind_of?(org.logstash.config.ir.SourceComponent) && actual.kind_of?(org.logstash.config.ir.SourceComponent)
+    next unless expected.java_kind_of?(org.logstash.config.ir.SourceComponent) && actual.java_kind_of?(org.logstash.config.ir.SourceComponent)
 
     expected.sourceComponentEquals(actual)
   end
diff --git a/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java b/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
index d3d15c118cc..4ec9fadca09 100644
--- a/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
+++ b/logstash-core/src/main/java/org/logstash/RubyJavaIntegration.java
@@ -31,11 +31,9 @@
 import org.jruby.Ruby;
 import org.jruby.RubyBasicObject;
 import org.jruby.RubyString;
-import org.jruby.RubyModule;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.java.proxies.JavaProxy;
 import org.jruby.java.proxies.MapJavaProxy;
-import org.jruby.javasupport.Java;
 import org.jruby.javasupport.JavaClass;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.Block;
@@ -62,14 +60,14 @@ public static void setupRubyJavaIntegration(final Ruby ruby) {
         ruby.getArray().defineAnnotatedMethods(RubyJavaIntegration.RubyArrayOverride.class);
         ruby.getHash().defineAnnotatedMethods(RubyJavaIntegration.RubyHashOverride.class);
         Stream.of(LinkedHashMap.class, HashMap.class).forEach(cls ->
-            Java.getProxyClass(ruby, cls).defineAnnotatedMethods(
+            JavaClass.get(ruby, cls).getProxyModule().defineAnnotatedMethods(
                 RubyJavaIntegration.RubyMapProxyOverride.class
             )
         );
-        Java.getProxyClass(ruby, Map.class).defineAnnotatedMethods(
+        JavaClass.get(ruby, Map.class).getProxyModule().defineAnnotatedMethods(
             RubyJavaIntegration.JavaMapOverride.class
         );
-        Java.getProxyClass(ruby, Collection.class).defineAnnotatedMethods(
+        JavaClass.get(ruby, Collection.class).getProxyModule().defineAnnotatedMethods(
             RubyJavaIntegration.JavaCollectionOverride.class
         );
     }
@@ -281,8 +279,7 @@ public static IRubyObject containsKey(final ThreadContext context, final IRubyOb
         @JRubyMethod
         public static IRubyObject merge(final ThreadContext context, final IRubyObject self,
             final IRubyObject other) {
-            IRubyObject[] other_array = { other };
-            return ((MapJavaProxy) self.dup()).merge_bang(context, other_array, Block.NULL_BLOCK);
+            return ((MapJavaProxy) self.dup()).merge_bang(context, other, Block.NULL_BLOCK);
         }
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
index 666bd15671c..1d540876f4b 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/RubyEnvTestCase.java
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 
 import org.jruby.RubyHash;
-import org.jruby.runtime.load.LibrarySearcher;
 import org.jruby.runtime.load.LoadService;
 import org.junit.BeforeClass;
 import org.logstash.RubyTestBase;
@@ -42,10 +41,9 @@ public static void before() {
      */
     private static void ensureLoadpath() {
         final LoadService loader = RubyUtil.RUBY.getLoadService();
-        final LibrarySearcher librarySearcher = new LibrarySearcher(loader);
-        if (librarySearcher.findLibraryForLoad("logstash/compiler") == null) {
+        if (loader.findFileForLoad("logstash/compiler").library == null) {
             final String gems = LS_HOME.
-                    resolve("vendor").resolve("bundle").resolve("jruby").resolve("2.6.0").
+                    resolve("vendor").resolve("bundle").resolve("jruby").resolve("2.5.0").
                     toFile().getAbsolutePath();
             final RubyHash environment = RubyUtil.RUBY.getENV();
             environment.put("GEM_HOME", gems);
diff --git a/qa/integration/rspec.rb b/qa/integration/rspec.rb
index ac58f1051b7..6b2740e5d8f 100644
--- a/qa/integration/rspec.rb
+++ b/qa/integration/rspec.rb
@@ -20,7 +20,7 @@
 ::Gem.clear_paths
 
 ENV['GEM_HOME'] = ENV['GEM_PATH'] = ::File.expand_path(
-    ::File.join(__FILE__, "..", "..", "..", "build", "qa", "integration", "vendor", "jruby", "2.6.0")
+    ::File.join(__FILE__, "..", "..", "..", "build", "qa", "integration", "vendor", "jruby", "2.5.0")
 )
 
 ::Gem.paths = ENV
diff --git a/qa/integration/specs/command_line_spec.rb b/qa/integration/specs/command_line_spec.rb
index a8ba277403f..5eeb3e3495b 100644
--- a/qa/integration/specs/command_line_spec.rb
+++ b/qa/integration/specs/command_line_spec.rb
@@ -40,7 +40,7 @@
     execute = @logstash.run
     lines = execute.stderr_and_stdout.split("\n")
     expect(lines.shift).to match(/^(Using system java)|(Using bundled JDK)|(Using LS_JAVA_HOME defined java):/)
-    while (up_line = lines.shift).match(/OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated|warning: ignoring JAVA_TOOL_OPTIONS|warning: already initialized constant Socket::Constants/) do end
+    while (up_line = lines.shift).match(/OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated|warning: ignoring JAVA_TOOL_OPTIONS/) do end
     expect(up_line).to match(/^Sending Logstash logs to/)
   end
 end
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index e8cfaa8a3f7..442651b7e90 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -346,8 +346,6 @@ namespace "artifact" do
   end
 
   task "generate_build_metadata" do
-    require 'time'
-
     return if defined?(BUILD_METADATA_FILE)
     BUILD_METADATA_FILE = Tempfile.new('build.rb')
     BUILD_DATE=Time.now.iso8601
diff --git a/rakelib/compile.rake b/rakelib/compile.rake
index 72ec52c3ce3..009c293657b 100644
--- a/rakelib/compile.rake
+++ b/rakelib/compile.rake
@@ -16,7 +16,6 @@
 # under the License.
 
 rule ".rb" => ".treetop" do |task, args|
-  require 'logstash/patches/polyglot'
   require "treetop"
   compiler = Treetop::Compiler::GrammarCompiler.new
   compiler.compile(task.source, task.name)
diff --git a/rubyUtils.gradle b/rubyUtils.gradle
index 4f8e238ee28..7032e0f9fcd 100644
--- a/rubyUtils.gradle
+++ b/rubyUtils.gradle
@@ -25,7 +25,7 @@ buildscript {
     dependencies {
         classpath 'org.yaml:snakeyaml:1.29'
         classpath "de.undercouch:gradle-download-task:4.0.4"
-        classpath "org.jruby:jruby-complete:9.3.4.0"
+        classpath "org.jruby:jruby-complete:9.2.20.1"
     }
 }
 
@@ -139,7 +139,7 @@ void buildGem(File projectDir, File buildDir, String gemspec) {
 void rake(File projectDir, File buildDir, String task) {
     executeJruby projectDir, buildDir, { ScriptingContainer jruby ->
         jruby.currentDirectory = projectDir
-        jruby.runScriptlet("require 'rake'; require 'time'")
+        jruby.runScriptlet("require 'rake'")
         jruby.runScriptlet("""
                 rake = Rake.application
                 rake.init
@@ -168,7 +168,7 @@ void setupJruby(File projectDir, File buildDir) {
 Object executeJruby(File projectDir, File buildDir, Closure<?> /* Object*/ block) {
     def jruby = new ScriptingContainer()
     def env = jruby.environment
-    def gemDir = "${projectDir}/vendor/bundle/jruby/2.6.0".toString()
+    def gemDir = "${projectDir}/vendor/bundle/jruby/2.5.0".toString()
     env.put "USE_RUBY", "1"
     env.put "GEM_HOME", gemDir
     env.put "GEM_SPEC_CACHE", "${buildDir}/cache".toString()
diff --git a/tools/release/bump_plugin_versions.rb b/tools/release/bump_plugin_versions.rb
index 81794deecb5..ebdfdaa3246 100755
--- a/tools/release/bump_plugin_versions.rb
+++ b/tools/release/bump_plugin_versions.rb
@@ -66,14 +66,14 @@ def compute_dependecy(version, allow_for)
 if base_logstash_version == "LOCAL"
   puts "Using local lockfile..."
   begin
-    result = File.read("Gemfile.jruby-2.6.lock.release")
+    result = File.read("Gemfile.jruby-2.5.lock.release")
   rescue => e
     puts "Failed to read local lockfile #{e}"
     exit(1)
   end
 else
   puts "Fetching lock file for #{base_logstash_version}.."
-  uri = URI.parse("https://raw.githubusercontent.com/elastic/logstash/v#{base_logstash_version}/Gemfile.jruby-2.6.lock.release")
+  uri = URI.parse("https://raw.githubusercontent.com/elastic/logstash/v#{base_logstash_version}/Gemfile.jruby-2.5.lock.release")
   result = Net::HTTP.get(uri)
   if result.match(/404/)
     puts "Lock file or git tag for #{base_logstash_version} not found. Aborting"
@@ -104,7 +104,7 @@ def compute_dependecy(version, allow_for)
 IO.write("Gemfile.template", gemfile)
 
 puts "Cleaning up before running computing dependencies"
-FileUtils.rm_f("Gemfile.jruby-2.6.lock.release")
+FileUtils.rm_f("Gemfile.jruby-2.5.lock.release")
 
 # compute new lock file
 puts "Running: ./gradlew clean installDefaultGems"
@@ -121,18 +121,18 @@ def compute_dependecy(version, allow_for)
 
 # rename file
 puts "Finishing up.."
-FileUtils.mv("Gemfile.lock", "Gemfile.jruby-2.6.lock.release")
+FileUtils.mv("Gemfile.lock", "Gemfile.jruby-2.5.lock.release")
 
 `git checkout -- Gemfile.template`
 
-puts `git diff Gemfile.jruby-2.6.lock.release`
+puts `git diff Gemfile.jruby-2.5.lock.release`
 
 exit(0) unless options[:pr]
 puts "Creating commit.."
 
 branch_name = "update_lock_#{Time.now.to_i}"
 `git checkout -b #{branch_name}`
-`git commit Gemfile.jruby-2.6.lock.release -m "Update #{allow_bump_for} plugin versions in gemfile lock"`
+`git commit Gemfile.jruby-2.5.lock.release -m "Update #{allow_bump_for} plugin versions in gemfile lock"`
 
 puts "Pushing commit.."
 `git remote add upstream git@github.com:elastic/logstash.git`
diff --git a/versions.yml b/versions.yml
index ce5fcb6e36a..93a612e828c 100644
--- a/versions.yml
+++ b/versions.yml
@@ -13,8 +13,9 @@ bundled_jdk:
 # jruby must reference a *released* version of jruby which can be downloaded from the official download url
 # *and* for which jars artifacts are published for compile-time
 jruby:
-  version: 9.3.4.0
-  sha1: 91e54b1c8962dd7a7fbcbab012f5d8ba1f15e5a4
+  version: 9.2.20.1
+  sha1: 7f45f8a3d53d5f19f69952014abcb542b2670846
+
 # jruby-runtime-override, if specified, will override the jruby version installed in vendor/jruby
 #jruby-runtime-override:
 #  url: https://oss.sonatype.org/content/repositories/snapshots/org/jruby/jruby-dist/9.3.0.0-SNAPSHOT/jruby-dist-9.3.0.0-20210723.214927-259-bin.tar.gz
