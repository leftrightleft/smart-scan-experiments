diff --git a/config/jvm.options b/config/jvm.options
index aa265bf83c2..0ac75f70e82 100644
--- a/config/jvm.options
+++ b/config/jvm.options
@@ -3,7 +3,7 @@
 # Xms represents the initial size of total heap space
 # Xmx represents the maximum size of total heap space
 
--Xms256m
+-Xms1g
 -Xmx1g
 
 ################################################################
diff --git a/docs/static/performance-checklist.asciidoc b/docs/static/performance-checklist.asciidoc
index 58c741dfcee..ba53b33ed3d 100644
--- a/docs/static/performance-checklist.asciidoc
+++ b/docs/static/performance-checklist.asciidoc
@@ -43,6 +43,7 @@ You may be tempted to jump ahead and change settings like `pipeline.workers` (`-
 * Often times CPU utilization can go through the roof if the heap size is too low, resulting in the JVM constantly garbage collecting.
 * A quick way to check for this issue is to double the heap size and see if performance improves. Do not increase the heap size past the amount of physical memory. Leave at least 1GB free for the OS and other processes.
 * You can make more accurate measurements of the JVM heap by using either the `jmap` command line utility distributed with Java or by using VisualVM. For more info, see <<profiling-the-heap>>.
+* Always make sure to set the minimum (Xms) and maximum (Xmx) heap allocation size to the same value to prevent the heap from resizing at runtime, which is a very costly process.
 
 . *Tune Logstash worker settings:*
 +
