diff --git a/lib/logstash/filters/date.rb b/lib/logstash/filters/date.rb
index 62eecb2abd6..5052c130220 100644
--- a/lib/logstash/filters/date.rb
+++ b/lib/logstash/filters/date.rb
@@ -208,6 +208,7 @@ def filter(event)
           #event[@target] = Time.at(epochmillis / 1000.0).utc
 
           @logger.debug? && @logger.debug("Date parsing done", :value => value, :timestamp => event[@target])
+          filter_matched(event)
         rescue StandardError, JavaException => e
           @logger.warn("Failed parsing date from field", :field => field,
                        :value => value, :exception => e)
@@ -219,7 +220,6 @@ def filter(event)
       end # fieldvalue.each 
     end # @parsers.each
 
-    filter_matched(event) if !event.cancelled?
     return event
   end # def filter
 end # class LogStash::Filters::Date
diff --git a/spec/filters/date.rb b/spec/filters/date.rb
index c59f9dd2271..175f83e743a 100644
--- a/spec/filters/date.rb
+++ b/spec/filters/date.rb
@@ -246,6 +246,38 @@
     end
   end
 
+   describe "success to parse should apply on_success config(add_tag,add_field...)" do
+    config <<-CONFIG
+      filter { 
+        date {
+          match => [ "thedate", "yyyy/MM/dd" ]
+          add_tag => "tagged"
+        }
+      }
+    CONFIG
+
+    sample("thedate" => "2013/04/21") do
+      insist { subject["@timestamp"] } != "2013-04-21T00:00:00.000Z"
+      insist { subject["tags"] } == ["tagged"]
+    end
+  end
+
+   describe "failing to parse should not apply on_success config(add_tag,add_field...)" do
+    config <<-CONFIG
+      filter { 
+        date {
+          match => [ "thedate", "yyyy/MM/dd" ]
+          add_tag => "tagged"
+        }
+      }
+    CONFIG
+
+    sample("thedate" => "2013/Apr/21") do
+      insist { subject["@timestamp"] } != "2013-04-21T00:00:00.000Z"
+      insist { subject["tags"] } == nil
+    end
+  end
+
   describe "parsing with timezone parameter" do
     config <<-CONFIG
       filter {
