diff --git a/logstash-core/src/main/java/org/logstash/common/FsUtil.java b/logstash-core/src/main/java/org/logstash/common/FsUtil.java
index eb0fb74b042..25c7bed1b86 100644
--- a/logstash-core/src/main/java/org/logstash/common/FsUtil.java
+++ b/logstash-core/src/main/java/org/logstash/common/FsUtil.java
@@ -32,9 +32,6 @@ public final class FsUtil {
     private FsUtil() {
     }
 
-    private static final boolean IS_WINDOWS = System.getProperty("os.name").startsWith("Windows");
-    private static final Logger logger = LogManager.getLogger(FsUtil.class);
-
     /**
      * Checks if the request number of bytes of free disk space are available under the given
      * path.
@@ -44,18 +41,6 @@ private FsUtil() {
      */
     public static boolean hasFreeSpace(final Path path, final long size)
     {
-        final long freeSpace = path.toFile().getFreeSpace();
-
-        if (freeSpace == 0L && IS_WINDOWS) {
-            // On Windows, SUBST'ed drives report 0L from getFreeSpace().
-            // The API doc says "The number of unallocated bytes on the partition or 0L if the abstract pathname does not name a partition."
-            // There is no straightforward fix for this and it seems a fix is included in Java 9.
-            // One alternative is to launch and parse a DIR command and look at the reported free space.
-            // This is a temporary fix to get the CI tests going which relies on SUBST'ed drives to manage long paths.
-            logger.warn("Cannot retrieve free space on " +  path.toString() +  ". This is probably a SUBST'ed drive.");
-            return true;
-        }
-
-        return freeSpace >= size;
+        return path.toFile().getUsableSpace() >= size;
     }
 }
