diff --git a/logstash-core/src/main/java/org/logstash/ConvertedMap.java b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
index 66f94d77793..fb54139c4c9 100644
--- a/logstash-core/src/main/java/org/logstash/ConvertedMap.java
+++ b/logstash-core/src/main/java/org/logstash/ConvertedMap.java
@@ -1,9 +1,6 @@
 package org.logstash;
 
-import org.logstash.bivalues.BiValues;
-import org.jruby.RubyHash;
-import org.jruby.runtime.builtin.IRubyObject;
-
+import java.io.Serializable;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
@@ -11,6 +8,8 @@
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Function;
+import org.jruby.RubyHash;
+import org.jruby.runtime.builtin.IRubyObject;
 
 public class ConvertedMap<K, V> implements Map<K, V> {
 
@@ -20,11 +19,10 @@ private ConvertedMap(final int size) {
         this.delegate = new HashMap<>(size);
     }
 
-    public static ConvertedMap<String, Object> newFromMap(Map<String, Object> o) {
+    public static ConvertedMap<String, Object> newFromMap(Map<Serializable, Object> o) {
         ConvertedMap<String, Object> cm = new ConvertedMap<>(o.size());
-        for (Map.Entry<String, Object> entry : o.entrySet()) {
-            String k = String.valueOf(BiValues.newBiValue(entry.getKey()).javaValue());
-            cm.put(k, Valuefier.convert(entry.getValue()));
+        for (final Map.Entry<Serializable, Object> entry : o.entrySet()) {
+            cm.put(entry.getKey().toString(), Valuefier.convert(entry.getValue()));
         }
         return cm;
     }
@@ -35,8 +33,7 @@ public static ConvertedMap<String, Object> newFromRubyHash(RubyHash o) {
         o.visitAll(new RubyHash.Visitor() {
             @Override
             public void visit(IRubyObject key, IRubyObject value) {
-                String k = String.valueOf(BiValues.newBiValue(key).javaValue()) ;
-                result.put(k, Valuefier.convert(value));
+                result.put(key.toString(), Valuefier.convert(value));
             }
         });
         return result;
diff --git a/logstash-core/src/main/java/org/logstash/Event.java b/logstash-core/src/main/java/org/logstash/Event.java
index 4670e1ff6ef..cdfe873ed94 100644
--- a/logstash-core/src/main/java/org/logstash/Event.java
+++ b/logstash-core/src/main/java/org/logstash/Event.java
@@ -97,10 +97,6 @@ public Map<String, Object> getMetadata() {
         return this.metadata;
     }
 
-    public void setData(Map<String, Object> data) {
-        this.data = ConvertedMap.newFromMap(data);
-    }
-
     public Accessors getAccessors() {
         return this.accessors;
     }
diff --git a/logstash-core/src/main/java/org/logstash/Valuefier.java b/logstash-core/src/main/java/org/logstash/Valuefier.java
index 229c864a51a..bea1831a1f1 100644
--- a/logstash-core/src/main/java/org/logstash/Valuefier.java
+++ b/logstash-core/src/main/java/org/logstash/Valuefier.java
@@ -1,5 +1,6 @@
 package org.logstash;
 
+import java.io.Serializable;
 import org.logstash.bivalues.BiValue;
 import org.logstash.bivalues.BiValues;
 import org.logstash.ext.JrubyTimestampExtLibrary;
@@ -67,7 +68,7 @@ public static Object convert(Object o) throws IllegalArgumentException {
             return ConvertedList.newFromRubyArray((RubyArray) o);
         }
         if (o instanceof Map) {
-            return ConvertedMap.newFromMap((Map<String, Object>) o);
+            return ConvertedMap.newFromMap((Map<Serializable, Object>) o);
         }
         if (o instanceof List) {
             return ConvertedList.newFromList((List<Object>) o);
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index 2edd25e6645..7ccddc61a87 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -98,8 +98,9 @@ public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args)
             } else if (data instanceof RubyHash) {
                 this.event = new Event(ConvertedMap.newFromRubyHash((RubyHash) data));
             } else if (data instanceof MapJavaProxy) {
-                Map<String, Object> m = (Map)((MapJavaProxy)data).getObject();
-                this.event = new Event(ConvertedMap.newFromMap(m));
+                this.event = new Event(ConvertedMap.newFromMap(
+                    (Map)((MapJavaProxy)data).getObject())
+                );
             } else {
                 throw context.runtime.newTypeError("wrong argument type " + data.getMetaClass() + " (expected Hash)");
             }
