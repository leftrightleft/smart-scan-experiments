diff --git a/logstash-core/lib/logstash/api/lib/app/service.rb b/logstash-core/lib/logstash/api/lib/app/service.rb
index b8396e07577..4b63593c18a 100644
--- a/logstash-core/lib/logstash/api/lib/app/service.rb
+++ b/logstash-core/lib/logstash/api/lib/app/service.rb
@@ -23,6 +23,10 @@ def agent
     LogStash::Instrument::Collector.instance.agent
   end
 
+  def started?
+    !@snapshot.nil? && has_counters?
+  end
+
   def update(snapshot)
     logger.debug("[api-service] snapshot received", :snapshot => snapshot) if logger.debug?
     if @snapshot_rotation_mutex.try_lock
@@ -40,4 +44,18 @@ def get(key)
     end
     LogStash::Json.dump(data)
   end
+
+  private
+
+  def has_counters?
+    (["LogStash::Instrument::MetricType::Counter", "LogStash::Instrument::MetricType::Gauge"] - metric_types).empty?
+  end
+
+  def metric_types
+    types = []
+    @snapshot_rotation_mutex.synchronize do
+      types = @snapshot.metric_store.all.map { |t| t.class.to_s }
+    end
+    return types
+  end
 end
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
index b4dd0086067..3b85d92efa6 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/jvm.rb
@@ -47,10 +47,20 @@ def collect_pools_metrics(data)
     end
 
     def build_pools_metrics(data)
+      heap = data["heap"]
+      old  = {}
+      old = old.merge!(heap["CMS Old Gen"]) if heap.has_key?("CMS Old Gen")
+      old = old.merge!(heap["PS Old Gen"])  if heap.has_key?("PS Old Gen")
+      young = {}
+      young = young.merge!(heap["Par Eden Space"]) if heap.has_key?("Par Eden Space")
+      young = young.merge!(heap["PS Eden Space"])  if heap.has_key?("PS Eden Space")
+      survivor = {}
+      survivor = survivor.merge!(heap["Par Survivor Space"]) if heap.has_key?("Par Survivor Space")
+      survivor = survivor.merge!(heap["PS Survivor Space"])  if heap.has_key?("PS Survivor Space")
       {
-        "young"    => aggregate_information_for(data["heap"]["Par Eden Space"]),
-        "old"      => aggregate_information_for(data["heap"]["CMS Old Gen"]),
-        "survivor" => aggregate_information_for(data["heap"]["Par Survivor Space"]),
+        "young"    => aggregate_information_for(young),
+        "old"      => aggregate_information_for(old),
+        "survivor" => aggregate_information_for(survivor)
       }
     end
 
diff --git a/logstash-core/lib/logstash/webserver.rb b/logstash-core/lib/logstash/webserver.rb
index 45587d11f15..23bcaf0b576 100644
--- a/logstash-core/lib/logstash/webserver.rb
+++ b/logstash-core/lib/logstash/webserver.rb
@@ -24,7 +24,12 @@ def initialize(logger, options={})
       @options     = {}
       @cli_options = options.merge({ :rackup => ::File.join(::File.dirname(__FILE__), "api", "init.ru"),
                                      :binds => ["tcp://#{http_host}:#{http_port}"],
-                                     :debug => logger.debug? })
+                                     :debug => logger.debug?,
+                                     # Prevent puma from queueing request when not able to properly handling them,
+                                     # fixed https://github.com/elastic/logstash/issues/4674. See
+                                     # https://github.com/puma/puma/pull/640 for mode internal details in PUMA.
+                                     :queue_requests => false
+      })
       @status      = nil
 
       parse_options
diff --git a/logstash-core/spec/api/fixtures/memory.json b/logstash-core/spec/api/fixtures/memory.json
deleted file mode 100644
index 2cd94aef053..00000000000
--- a/logstash-core/spec/api/fixtures/memory.json
+++ /dev/null
@@ -1,42 +0,0 @@
-{
-	"heap": {
-		"used_in_bytes": 1,
-		"committed_in_bytes": 2,
-		"max_in_bytes": 3,
-		"peak_used_in_bytes": 4,
-		"peak_max_in_bytes": 5,
-		"used_percent": 7
-
-	},
-	"non_heap": {
-		"used_in_bytes": 1,
-		"committed_in_bytes": 2,
-		"max_in_bytes": 3,
-		"peak_used_in_bytes": 4,
-		"peak_max_in_bytes": 5
-
-	},
-	"pools": {
-		"young": {
-			"used_in_bytes": 1,
-			"committed_in_bytes": 2,
-			"max_in_bytes": 3,
-			"peak_used_in_bytes": 4,
-			"peak_max_in_bytes": 5
-		},
-		"old": {
-			"used_in_bytes": 1,
-			"committed_in_bytes": 2,
-			"max_in_bytes": 3,
-			"peak_used_in_bytes": 4,
-			"peak_max_in_bytes": 5
-		},
-		"survivor": {
-			"used_in_bytes": 1,
-			"committed_in_bytes": 2,
-			"max_in_bytes": 3,
-			"peak_used_in_bytes": 4,
-			"peak_max_in_bytes": 5
-		}
-	}
-}
diff --git a/logstash-core/spec/api/lib/api/node_spec.rb b/logstash-core/spec/api/lib/api/node_spec.rb
new file mode 100644
index 00000000000..becde036405
--- /dev/null
+++ b/logstash-core/spec/api/lib/api/node_spec.rb
@@ -0,0 +1,77 @@
+# encoding: utf-8
+require_relative "../../spec_helper"
+require "sinatra"
+require "app/modules/node"
+
+describe LogStash::Api::Node do
+
+  include Rack::Test::Methods
+
+  def app()
+    described_class
+  end
+
+  describe "#hot threads" do
+
+    before(:all) do
+      do_request { get "/hot_threads" }
+    end
+
+    it "respond OK" do
+      expect(last_response).to be_ok
+    end
+
+    it "should return a JSON object" do
+      expect{ JSON.parse(last_response.body) }.not_to raise_error
+    end
+
+    context "#threads count" do
+
+      before(:all) do
+        do_request { get "/hot_threads?threads=5" }
+      end
+
+      let(:payload) { JSON.parse(last_response.body) }
+
+      it "should return a json payload content type" do
+        expect(last_response.content_type).to eq("application/json")
+      end
+
+      it "should return information for <= # requested threads" do
+        expect(payload["threads"].count).to be <= 5
+      end
+    end
+
+    context "when asking for human output" do
+
+      before(:all) do
+        do_request { get "/hot_threads?human" }
+      end
+
+      let(:payload) { last_response.body }
+
+      it "should return a text/plain content type" do
+        expect(last_response.content_type).to eq("text/plain;charset=utf-8")
+      end
+
+      it "should return a plain text payload" do
+        expect{ JSON.parse(payload) }.to raise_error
+      end
+    end
+
+    context "when requesting idle threads" do
+
+      before(:all) do
+        do_request { get "/hot_threads?ignore_idle_threads=false&threads=10" }
+      end
+
+      let(:payload) { JSON.parse(last_response.body) }
+
+      it "should return JIT threads" do
+        thread_names = payload["threads"].map { |thread_info| thread_info["name"] }
+        expect(thread_names.grep(/JIT/)).not_to be_empty
+      end
+    end
+
+  end
+end
diff --git a/logstash-core/spec/api/lib/api/node_stats_spec.rb b/logstash-core/spec/api/lib/api/node_stats_spec.rb
index 7772a500846..71845620bd0 100644
--- a/logstash-core/spec/api/lib/api/node_stats_spec.rb
+++ b/logstash-core/spec/api/lib/api/node_stats_spec.rb
@@ -11,26 +11,57 @@ def app()
     described_class
   end
 
-  let(:mem) do
-    { :heap_used_in_bytes => 10,
-      :pools => { :used_in_bytes => 20 }}
-  end
+  let(:payload) { JSON.parse(last_response.body) }
+
+  context "#root" do
+
+    before(:all) do
+      do_request { get "/" }
+    end
+
+    it "respond OK" do
+      expect(last_response).to be_ok
+    end
 
-  let(:events) do
-    { :in => 10, :out => 20 }
+    ["events", "jvm"].each do |key|
+      it "contains #{key} information" do
+        expect(payload).to include(key)
+      end
+    end
   end
 
-  it "respond to the events resource" do
-    expect_any_instance_of(LogStash::Api::StatsEventsCommand).to receive(:run).and_return(events)
-    get "/events"
-    expect(last_response).to be_ok
+  context "#events" do
+
+    let(:payload) { JSON.parse(last_response.body) }
+
+    before(:all) do
+      do_request { get "/events" }
+    end
+
+    it "respond OK" do
+      expect(last_response).to be_ok
+    end
+
+    it "contains events information" do
+      expect(payload).to include("events")
+    end
   end
 
-  it "respond to the jvm resource" do
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:run).and_return(mem)
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:started_at).and_return(10)
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:uptime).and_return(100)
-    get "jvm"
-    expect(last_response).to be_ok
+  context "#jvm" do
+
+    let(:payload) { JSON.parse(last_response.body) }
+
+    before(:all) do
+      do_request { get "/jvm" }
+    end
+
+    it "respond OK" do
+      expect(last_response).to be_ok
+    end
+
+    it "contains memory information" do
+      expect(payload).to include("mem")
+    end
   end
+
 end
diff --git a/logstash-core/spec/api/lib/api/root_spec.rb b/logstash-core/spec/api/lib/api/root_spec.rb
index 83abb232957..6bc8a4937b6 100644
--- a/logstash-core/spec/api/lib/api/root_spec.rb
+++ b/logstash-core/spec/api/lib/api/root_spec.rb
@@ -12,15 +12,8 @@ def app()
     described_class
   end
 
-  let(:agent) { double("agent") }
-
-  before(:each) do
-    allow(agent).to receive(:node_name).and_return("foo")
-    expect_any_instance_of(LogStash::Api::Service).to receive(:agent).and_return(agent)
-  end
-
   it "should respond to root resource" do
-    get "/"
+    do_request { get "/" }
     expect(last_response).to be_ok
   end
 
diff --git a/logstash-core/spec/api/lib/api/stats_spec.rb b/logstash-core/spec/api/lib/api/stats_spec.rb
index 2f140e05c95..8dfd2617b42 100644
--- a/logstash-core/spec/api/lib/api/stats_spec.rb
+++ b/logstash-core/spec/api/lib/api/stats_spec.rb
@@ -11,19 +11,8 @@ def app()
     described_class
   end
 
-  let(:mem) do
-    { :heap_used_in_bytes => 10,
-      :pools => { :used_in_bytes => 20 }}
-  end
-
-  before(:each) do
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:started_at).and_return(1234567890)
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:uptime).and_return(10)
-    expect_any_instance_of(LogStash::Api::JvmMemoryCommand).to receive(:run).and_return(mem)
-  end
-
   it "respond to the jvm resource" do
-    get "/jvm"
+    do_request { get "/jvm" }
     expect(last_response).to be_ok
   end
 
diff --git a/logstash-core/spec/api/lib/commands/events_spec.rb b/logstash-core/spec/api/lib/commands/events_spec.rb
index 54c4dc86459..9bbcc3e7aa8 100644
--- a/logstash-core/spec/api/lib/commands/events_spec.rb
+++ b/logstash-core/spec/api/lib/commands/events_spec.rb
@@ -4,26 +4,14 @@
 
 describe LogStash::Api::StatsEventsCommand do
 
-  let(:service) { double("snapshot-service") }
-
-  subject { described_class.new(service) }
-
-  let(:stats) do
-    { "stats" => { "events" => { "in" => 100,
-                                 "out" => 0,
-                                 "filtered" => 200 }}}
-  end
-
-  before(:each) do
-    allow(service).to receive(:get).with(:events_stats).and_return(LogStash::Json.dump(stats))
-  end
-
   context "#schema" do
-    let(:report) { subject.run }
 
-    it "return events information" do
-      expect(report).to include({"in" => 100, "filtered" => 200 })
+    let(:report) do
+      do_request { subject.run }
     end
 
+    it "return events information" do
+      expect(report).to include("in", "filtered", "out")
+    end
   end
 end
diff --git a/logstash-core/spec/api/lib/commands/jvm_spec.rb b/logstash-core/spec/api/lib/commands/jvm_spec.rb
index 5cf1651b221..e3f01d00aaf 100644
--- a/logstash-core/spec/api/lib/commands/jvm_spec.rb
+++ b/logstash-core/spec/api/lib/commands/jvm_spec.rb
@@ -5,20 +5,15 @@
 
 describe "JVM stats" do
 
-  let(:agent) { double("agent") }
-
   describe LogStash::Api::HotThreadsCommand do
 
-    before(:each) do
-      allow(agent).to receive(:node_name).and_return("foo")
-      expect_any_instance_of(LogStash::Api::Service).to receive(:agent).and_return(agent)
-      allow(subject).to receive(:uptime).and_return(10)
+    let(:report) do
+      do_request { subject.run }
     end
 
     context "#schema" do
-      let(:report) { subject.run }
-
       it "return hot threads information" do
+        report = do_request { subject.run }
         expect(report.to_s).not_to be_empty
       end
 
@@ -29,22 +24,8 @@
 
     context "#schema" do
 
-      let(:service) { double("snapshot-service") }
-
-      subject { described_class.new(service) }
-
-      let(:stats) do
-        read_fixture("memory.json")
-      end
-
-      before(:each) do
-        allow(service).to receive(:agent).and_return(agent)
-        allow(service).to receive(:get).with(:jvm_memory_stats).and_return(stats)
-      end
-
-
       let(:report) do
-        subject.run
+        do_request { subject.run }
       end
 
       it "return hot threads information" do
diff --git a/logstash-core/spec/api/spec_helper.rb b/logstash-core/spec/api/spec_helper.rb
index f6f9ac70ca9..3e5184897b8 100644
--- a/logstash-core/spec/api/spec_helper.rb
+++ b/logstash-core/spec/api/spec_helper.rb
@@ -1,7 +1,5 @@
 # encoding: utf-8
-ROOT = File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "lib", "logstash", "api"))
-$LOAD_PATH.unshift File.join(ROOT, 'lib')
-Dir.glob(File.join(ROOT, "lib" "**")).each{ |d| $LOAD_PATH.unshift(d) }
+API_ROOT = File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "lib", "logstash", "api"))
 
 require "logstash/devutils/rspec/spec_helper"
 
@@ -11,9 +9,107 @@
 
 ENV['RACK_ENV'] = 'test'
 
-Rack::Builder.parse_file(File.join(ROOT, 'init.ru'))
+Rack::Builder.parse_file(File.join(API_ROOT, 'init.ru'))
 
 def read_fixture(name)
   path = File.join(File.dirname(__FILE__), "fixtures", name)
   File.read(path)
 end
+
+module LogStash
+  class DummyAgent < Agent
+    def fetch_config(settings)
+      "input { generator {count => 0} } output { }"
+    end
+
+    def start_webserver; end
+    def stop_webserver; end
+  end
+end
+
+##
+# Class used to wrap and manage the execution of an agent for test,
+# this helps a lot in order to have a more integrated test for the
+# web api, could be also used for other use cases if generalized enought
+##
+class LogStashRunner
+
+  attr_reader :config_str, :agent, :pipeline_settings
+
+  def initialize
+    args = [
+      :logger => Cabin::Channel.get(LogStash),
+      :auto_reload => false,
+      :collect_metric => true,
+      :debug => false,
+      :node_name => "test_agent",
+      :web_api_http_port => rand(9600..9700)
+    ]
+
+    @config_str   = "input { generator {count => 0} } output { }"
+    @agent = LogStash::DummyAgent.new(*args)
+    @pipeline_settings ||= { :pipeline_id => "main",
+                             :config_str => config_str,
+                            :pipeline_batch_size => 1,
+                            :flush_interval => 1,
+                            :pipeline_workers => 1 }
+  end
+
+  def start
+    agent.register_pipeline("main", pipeline_settings)
+    @runner = Thread.new(agent) do |_agent|
+      _agent.execute
+    end
+    wait_until_snapshot_received
+  end
+
+  def stop
+    agent.shutdown
+    Thread.kill(@runner)
+    sleep 0.1 while !@runner.stop?
+  end
+
+  private
+
+  def wait_until_snapshot_received
+    while !LogStash::Api::Service.instance.started? do
+      sleep 0.5
+    end
+  end
+end
+
+
+##
+# Method used to wrap up a request in between of a running
+# pipeline, this makes the hole execution model easier and
+# more contained as some threads might go wild.
+##
+def do_request(&block)
+  runner = LogStashRunner.new
+  runner.start
+  ret_val = block.call
+  runner.stop
+  ret_val
+end
+
+##
+# Helper module that setups necessary mocks when doing the requests,
+# this could be just included in the test and the runner will be
+# started managed for all tests.
+##
+module LogStash; module RSpec; module RunnerConfig
+  def self.included(klass)
+    klass.before(:all) do
+      LogStashRunner.instance.start
+    end
+
+    klass.before(:each) do
+      runner = LogStashRunner.instance
+      allow(LogStash::Instrument::Collector.instance).to receive(:agent).and_return(runner.agent)
+    end
+
+    klass.after(:all) do
+      LogStashRunner.instance.stop
+    end
+  end
+end; end; end
