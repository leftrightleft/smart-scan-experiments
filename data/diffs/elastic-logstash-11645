diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index a8febea0b0e..c51f69c57b2 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -77,15 +77,11 @@ def config_init(params)
     # Set defaults from 'config :foo, :default => somevalue'
     self.class.get_config.each do |name, opts|
       next if params.include?(name.to_s)
+
       if opts.include?(:default) and (name.is_a?(Symbol) or name.is_a?(String))
         # default values should be cloned if possible
-        # cloning prevents
-        case opts[:default]
-          when FalseClass, TrueClass, NilClass, Numeric
-            params[name.to_s] = opts[:default]
-          else
-            params[name.to_s] = opts[:default].clone
-        end
+        default = opts[:default]
+        params[name.to_s] = default.frozen? ? default : default.clone
       end
 
       # Allow plugins to override default values of config settings
@@ -96,7 +92,7 @@ def config_init(params)
 
     # Resolve environment variables references
     params.each do |name, value|
-      params[name.to_s] = deep_replace(value)
+      params[name.to_s] = deep_replace(value) if !value.frozen?
     end
 
     if !self.class.validate(params)
@@ -304,14 +300,6 @@ def validate_check_invalid_parameter_names(params)
       return true
     end # def validate_check_invalid_parameter_names
 
-    def validate_check_required_parameter(config_key, config_opts, k, v)
-      if config_key.is_a?(Regexp)
-        (k =~ config_key && v)
-      elsif config_key.is_a?(String)
-        k && v
-      end
-    end
-
     def validate_check_required_parameter_names(params)
       is_valid = true
 
@@ -339,8 +327,8 @@ def process_parameter_value(value, config_settings)
 
       if config_settings[:list]
         value = Array(value) # coerce scalars to lists
+        return true, value if value.frozen?
         # Empty lists are converted to nils
-        return true, [] if value.empty?
 
         return validate_value(value, :uri_list) if config_val == :uri
 
@@ -351,7 +339,7 @@ def process_parameter_value(value, config_settings)
         is_valid, processed_value = validate_value(value, config_val)
       end
 
-      return [is_valid, processed_value]
+      return is_valid, processed_value
     end
 
     def validate_check_parameter_values(params)
@@ -407,7 +395,7 @@ def validate_value(value, validator)
       # (see LogStash::Inputs::File for example)
       result = nil
 
-      value = deep_replace(value)
+      value = value.frozen? ? value : deep_replace(value)
 
       if validator.nil?
         return true, value
@@ -583,7 +571,7 @@ def secure_params!(params)
 
     def hash_or_array(value)
       if !value.is_a?(Hash)
-        value = [*value] # coerce scalar to array if necessary
+        value = Array(value) # coerce scalar to array if necessary
       end
       return value
     end
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index ed24a8ec428..fb79a53b916 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -15,12 +15,12 @@
 # specific language governing permissions and limitations
 # under the License.
 
-java_import "org.logstash.secret.store.SecretStoreExt"
-
 require_relative 'lazy_singleton'
 
 module ::LogStash::Util::SubstitutionVariables
 
+  java_import "org.logstash.secret.store.SecretStoreExt"
+
   include LogStash::Util::Loggable
 
   SUBSTITUTION_PLACEHOLDER_REGEX = /\${(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?}/
@@ -31,13 +31,19 @@ module ::LogStash::Util::SubstitutionVariables
   # Recursive method to replace substitution variable references in parameters
   def deep_replace(value)
     if value.is_a?(Hash)
-      value.each do |valueHashKey, valueHashValue|
-        value[valueHashKey.to_s] = deep_replace(valueHashValue)
+      value.each do |key, val|
+        repl = deep_replace(val)
+        if !val.eql?(repl) || !key.is_a?(String)
+          value[key.to_s] = repl
+        end
       end
     else
       if value.is_a?(Array)
-        value.each_index do | valueArrayIndex|
-          value[valueArrayIndex] = deep_replace(value[valueArrayIndex])
+        value.each_with_index do |elem, index|
+          repl = deep_replace(elem)
+          if !elem.eql?(repl)
+            value[index] = repl
+          end
         end
       else
         return replace_placeholders(value)
diff --git a/logstash-core/spec/logstash/config/mixin_spec.rb b/logstash-core/spec/logstash/config/mixin_spec.rb
index 3fa8f09659e..3aa2e750f45 100644
--- a/logstash-core/spec/logstash/config/mixin_spec.rb
+++ b/logstash-core/spec/logstash/config/mixin_spec.rb
@@ -554,4 +554,31 @@ def initialize(params)
       end
     end
   end
+
+  context "defaults" do
+    subject do
+      Class.new(LogStash::Filters::Base) do
+        include LogStash::Config::Mixin
+
+        @@frozen_string_default = "default".freeze
+        @@frozen_array_default = [ 'foo', 'bar' ].freeze
+        @@frozen_hash_default = { 'foo' => 'bar' }.freeze
+
+        config_name "test_defaults"
+        config :sample_opt, :validate => :string, :default => ""
+        config :frozen_opt, :validate => :string, :default => @@frozen_string_default
+        config :boolean_opt, :validate => :boolean, :default => true
+        config :array_opt, :validate => :array, :default => @@frozen_array_default
+        config :hashy_opt, :validate => :hash, :default => @@frozen_hash_default
+      end.new({})
+    end
+
+    it "should have defaults" do
+      expect( subject.sample_opt ).to eql '' # dup-ed
+      expect( subject.boolean_opt ).to eql true
+      expect( subject.frozen_opt ).to be subject.class.class_variable_get :@@frozen_string_default # not dup-ed
+      expect( subject.array_opt ).to be subject.class.class_variable_get :@@frozen_array_default
+      expect( subject.hashy_opt ).to be subject.class.class_variable_get :@@frozen_hash_default
+    end
+  end
 end
