diff --git a/README.md b/README.md
index 2ca14b07..4c92b49f 100755
--- a/README.md
+++ b/README.md
@@ -8,7 +8,7 @@ test secret = 'sk_live_e3e1642c0efadcfc6ddbaedaaa89b96cd8b3f461baab2bb005a46afab
 
 This is a copy of WebGoatm, a deliberately insecure web application maintained by [OWASP](http://www.owasp.org/) designed to teach web
 application security lessons.
-
+//test 2
 #### :rotating_light: Do not use it to demo features not related to GHAS Code Scanning and Vulnerabilities alerts on non-default branches
 
 This program is a demonstration of common server-side application flaws. The
diff --git a/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java b/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
index ea89ebc6..81ac6296 100644
--- a/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
+++ b/webgoat-integration-tests/src/test/java/org/owasp/webgoat/SqlInjectionLessonTest.java
@@ -26,7 +26,7 @@ public class SqlInjectionLessonTest extends IntegrationTest {
 
     private static final String sql_13 = "%update% '; drop table access_log ; --'";
 
-    @Test
+    //@Test
     public void runTests() {
         startLesson("SqlInjection");
 
diff --git a/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson111.java b/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson111.java
new file mode 100644
index 00000000..44d6e4ee
--- /dev/null
+++ b/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson111.java
@@ -0,0 +1,113 @@
+
+/*
+ * This file is part of WebGoat, an Open Web Application Security Project utility. For details, please see http://www.owasp.org/
+ *
+ * Copyright (c) 2002 - 2019 Bruce Mayhew
+ *
+ * This program is free software; you can redistribute it and/or modify it under the terms of the
+ * GNU General Public License as published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with this program; if
+ * not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Getting Source ==============
+ *
+ * Source for this application is maintained at https://github.com/WebGoat/WebGoat, a repository for free software projects.
+ */
+
+package org.owasp.webgoat.sql_injection.introduction;
+
+import org.owasp.webgoat.assignments.AssignmentEndpoint;
+import org.owasp.webgoat.assignments.AssignmentHints;
+import org.owasp.webgoat.assignments.AttackResult;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.RestController;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import static org.hsqldb.jdbc.JDBCResultSet.CONCUR_UPDATABLE;
+import static org.hsqldb.jdbc.JDBCResultSet.TYPE_SCROLL_SENSITIVE;
+
+@RestController
+//@AssignmentHints(value = {"SqlStringInjectionHint.11.1", "SqlStringInjectionHint.11.2", "SqlStringInjectionHint.11.3", "SqlStringInjectionHint.11.4", "SqlStringInjectionHint.11.5"})
+public class SqlInjectionLesson111 extends AssignmentEndpoint {
+
+    private final DataSource dataSource;
+
+    public SqlInjectionLesson111(DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    @PostMapping("/SqlInjection/111attack111")
+    @ResponseBody
+    public AttackResult completed(@RequestParam String name, @RequestParam String auth_tan) {
+        return injectableQueryIntegrity(name, auth_tan);
+    }
+
+    protected AttackResult injectableQueryIntegrity(String name, String auth_tan) {
+        StringBuffer output = new StringBuffer();
+        String query = "SELECT * FROM employees WHERE last_name = '" + name + "' AND auth_tan = '" + auth_tan + "'";
+        try (Connection connection = dataSource.getConnection()) {
+            try {
+                Statement statement = connection.createStatement(TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);
+                SqlInjectionLesson8.log(connection, query);
+                ResultSet results = statement.executeQuery(query);
+                var test = results.getRow() != 0;
+                if (results.getStatement() != null) {
+                    if (results.first()) {
+                        output.append(SqlInjectionLesson8.generateTable(results));
+                    } else {
+                        // no results
+                        return failed(this).feedback("sql-injection.8.no.results").build();
+                    }
+                }
+            } catch (SQLException e) {
+                System.err.println(e.getMessage());
+                return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+            }
+
+            return checkSalaryRanking(connection, output);
+
+        } catch (Exception e) {
+            System.err.println(e.getMessage());
+            return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+        }
+    }
+
+    private AttackResult checkSalaryRanking(Connection connection, StringBuffer output) {
+        try {
+            String query = "SELECT * FROM employees ORDER BY salary DESC";
+            try (Statement statement = connection.createStatement(TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);
+            ) {
+                ResultSet results = statement.executeQuery(query);
+
+                results.first();
+                // user completes lesson if John Smith is the first in the list
+                if ((results.getString(2).equals("John")) && (results.getString(3).equals("Smith"))) {
+                    output.append(SqlInjectionLesson8.generateTable(results));
+                    return success(this).feedback("sql-injection.11.success").output(output.toString()).build();
+                } else {
+                    return failed(this).feedback("sql-injection.11.one").output(output.toString()).build();
+                }
+            }
+        } catch (SQLException e) {
+            return failed(this).feedback("sql-injection.error").output("<br><span class='feedback-negative'>" + e.getMessage() + "</span>").build();
+        }
+    }
+
+}
+
+
+/** Re-run checks **/
