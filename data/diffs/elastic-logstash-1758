diff --git a/.gitignore b/.gitignore
index 72e92c59021..d8e74989adf 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,3 +23,5 @@ etc/jira-output.conf
 coverage/*
 .VERSION.mk
 .idea/*
+spec/reports
+rspec.xml
diff --git a/lib/logstash/runner.rb b/lib/logstash/runner.rb
index 6bd2fc87949..8aacfced759 100644
--- a/lib/logstash/runner.rb
+++ b/lib/logstash/runner.rb
@@ -111,8 +111,7 @@ def run(args)
         require "rspec"
         spec_path = File.expand_path(File.join(File.dirname(__FILE__), "/../../spec"))
         $LOAD_PATH << spec_path
-        require "test_utils"
-        all_specs = Dir.glob(File.join(spec_path, "/**/*.rb"))
+        all_specs = Dir.glob(File.join(spec_path, "/**/*_spec.rb"))
         rspec = LogStash::RSpecsRunner.new(args.empty? ? all_specs : args)
         return rspec.run
       end,
diff --git a/logstash.gemspec b/logstash.gemspec
index 2de6afb5f11..a95bfc6e8f9 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -102,7 +102,7 @@ Gem::Specification.new do |gem|
   gem.add_runtime_dependency "spoon"            #(Apache 2.0 license)
   gem.add_runtime_dependency "mocha"            #(MIT license)
   gem.add_runtime_dependency "shoulda"          #(MIT license)
-  gem.add_runtime_dependency "rspec"            #(MIT license)
+  gem.add_runtime_dependency "rspec", "~> 2.14.0"            #(MIT license)
   gem.add_runtime_dependency "insist", "1.0.0"  #(Apache 2.0 license)
   gem.add_runtime_dependency "rumbster"         # For faking smtp in email tests (Apache 2.0 license)
 
diff --git a/spec/codecs/collectd.rb b/spec/codecs/collectd_spec.rb
similarity index 100%
rename from spec/codecs/collectd.rb
rename to spec/codecs/collectd_spec.rb
diff --git a/spec/codecs/edn_lines.rb b/spec/codecs/edn_lines_spec.rb
similarity index 100%
rename from spec/codecs/edn_lines.rb
rename to spec/codecs/edn_lines_spec.rb
diff --git a/spec/codecs/edn.rb b/spec/codecs/edn_spec.rb
similarity index 100%
rename from spec/codecs/edn.rb
rename to spec/codecs/edn_spec.rb
diff --git a/spec/codecs/graphite.rb b/spec/codecs/graphite_spec.rb
similarity index 100%
rename from spec/codecs/graphite.rb
rename to spec/codecs/graphite_spec.rb
diff --git a/spec/codecs/json_lines.rb b/spec/codecs/json_lines_spec.rb
similarity index 100%
rename from spec/codecs/json_lines.rb
rename to spec/codecs/json_lines_spec.rb
diff --git a/spec/codecs/json.rb b/spec/codecs/json_spec.rb
similarity index 100%
rename from spec/codecs/json.rb
rename to spec/codecs/json_spec.rb
diff --git a/spec/codecs/json_spooler.rb b/spec/codecs/json_spooler_spec.rb
similarity index 100%
rename from spec/codecs/json_spooler.rb
rename to spec/codecs/json_spooler_spec.rb
diff --git a/spec/codecs/line.rb b/spec/codecs/line_spec.rb
similarity index 100%
rename from spec/codecs/line.rb
rename to spec/codecs/line_spec.rb
diff --git a/spec/codecs/msgpack.rb b/spec/codecs/msgpack_spec.rb
similarity index 100%
rename from spec/codecs/msgpack.rb
rename to spec/codecs/msgpack_spec.rb
diff --git a/spec/codecs/multiline.rb b/spec/codecs/multiline_spec.rb
similarity index 100%
rename from spec/codecs/multiline.rb
rename to spec/codecs/multiline_spec.rb
diff --git a/spec/codecs/oldlogstashjson.rb b/spec/codecs/oldlogstashjson_spec.rb
similarity index 100%
rename from spec/codecs/oldlogstashjson.rb
rename to spec/codecs/oldlogstashjson_spec.rb
diff --git a/spec/codecs/plain.rb b/spec/codecs/plain_spec.rb
similarity index 100%
rename from spec/codecs/plain.rb
rename to spec/codecs/plain_spec.rb
diff --git a/spec/codecs/spool.rb b/spec/codecs/spool_spec.rb
similarity index 100%
rename from spec/codecs/spool.rb
rename to spec/codecs/spool_spec.rb
diff --git a/spec/conditionals/test.rb b/spec/core/conditionals_spec.rb
similarity index 99%
rename from spec/conditionals/test.rb
rename to spec/core/conditionals_spec.rb
index 95166e63be5..2bb46b2825f 100644
--- a/spec/conditionals/test.rb
+++ b/spec/core/conditionals_spec.rb
@@ -1,4 +1,4 @@
-require "test_utils"
+require "spec_helper"
 
 module ConditionalFanciness
   def description
@@ -22,7 +22,6 @@ def conditional(expression, &block)
 end
 
 describe "conditionals in output" do
-  extend LogStash::RSpec
   extend ConditionalFanciness
 
   describe "simple" do
@@ -47,7 +46,6 @@ def conditional(expression, &block)
 end
 
 describe "conditionals in filter" do
-  extend LogStash::RSpec
   extend ConditionalFanciness
 
   describe "simple" do
diff --git a/spec/config.rb b/spec/core/config_spec.rb
similarity index 100%
rename from spec/config.rb
rename to spec/core/config_spec.rb
diff --git a/spec/event.rb b/spec/core/event_spec.rb
similarity index 100%
rename from spec/event.rb
rename to spec/core/event_spec.rb
diff --git a/spec/runner_spec.rb b/spec/core/runner_spec.rb
similarity index 100%
rename from spec/runner_spec.rb
rename to spec/core/runner_spec.rb
diff --git a/spec/timestamp.rb b/spec/core/timestamp_spec.rb
similarity index 100%
rename from spec/timestamp.rb
rename to spec/core/timestamp_spec.rb
diff --git a/spec/web.rb b/spec/core/web_spec.rb
similarity index 100%
rename from spec/web.rb
rename to spec/core/web_spec.rb
diff --git a/spec/examples/fail2ban.rb b/spec/examples/fail2ban_spec.rb
similarity index 94%
rename from spec/examples/fail2ban.rb
rename to spec/examples/fail2ban_spec.rb
index edb0baa9693..ee352d2004d 100644
--- a/spec/examples/fail2ban.rb
+++ b/spec/examples/fail2ban_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 
 describe "fail2ban logs", :if => RUBY_ENGINE == "jruby"  do
-  extend LogStash::RSpec
+  
 
   # The logstash config goes here.
   # At this time, only filters are supported.
diff --git a/spec/examples/graphite-input.rb b/spec/examples/graphite-input_spec.rb
similarity index 95%
rename from spec/examples/graphite-input.rb
rename to spec/examples/graphite-input_spec.rb
index b1f4e96f571..579b214d88d 100644
--- a/spec/examples/graphite-input.rb
+++ b/spec/examples/graphite-input_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 
 describe "receive graphite input", :if => RUBY_ENGINE == "jruby" do
-  extend LogStash::RSpec
+  
 
   # The logstash config goes here.
   # At this time, only filters are supported.
diff --git a/spec/examples/mysql-slow-query.rb b/spec/examples/mysql-slow-query_spec.rb
similarity index 97%
rename from spec/examples/mysql-slow-query.rb
rename to spec/examples/mysql-slow-query_spec.rb
index da019e0b616..bce57b96458 100644
--- a/spec/examples/mysql-slow-query.rb
+++ b/spec/examples/mysql-slow-query_spec.rb
@@ -1,8 +1,8 @@
-require "test_utils"
+require "spec_helper"
 
 # Skip until we convert this to use multiline codec
 describe "parse mysql slow query log", :if => false do
-  extend LogStash::RSpec
+  
 
   config <<-'CONFIG'
     filter {
diff --git a/spec/examples/parse-apache-logs.rb b/spec/examples/parse-apache-logs_spec.rb
similarity index 98%
rename from spec/examples/parse-apache-logs.rb
rename to spec/examples/parse-apache-logs_spec.rb
index 4407a95f29c..7a403f66857 100644
--- a/spec/examples/parse-apache-logs.rb
+++ b/spec/examples/parse-apache-logs_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 
 describe "apache common log format", :if => RUBY_ENGINE == "jruby" do
-  extend LogStash::RSpec
+  
 
   # The logstash config goes here.
   # At this time, only filters are supported.
diff --git a/spec/examples/parse-haproxy-logs.rb b/spec/examples/parse-haproxy-logs_spec.rb
similarity index 99%
rename from spec/examples/parse-haproxy-logs.rb
rename to spec/examples/parse-haproxy-logs_spec.rb
index 90f272c7a54..8c8abcfc044 100644
--- a/spec/examples/parse-haproxy-logs.rb
+++ b/spec/examples/parse-haproxy-logs_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 
 describe "haproxy httplog format" do
-  extend LogStash::RSpec
+  
 
   # The logstash config goes here.
   # At this time, only filters are supported.
diff --git a/spec/examples/syslog.rb b/spec/examples/syslog_spec.rb
similarity index 97%
rename from spec/examples/syslog.rb
rename to spec/examples/syslog_spec.rb
index fe617cf59df..1559a125cb2 100644
--- a/spec/examples/syslog.rb
+++ b/spec/examples/syslog_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 
 describe "parse syslog", :if => RUBY_ENGINE == "jruby" do
-  extend LogStash::RSpec
+  
 
   config <<-'CONFIG'
     filter {
diff --git a/spec/filters/anonymize.rb b/spec/filters/anonymize_spec.rb
similarity index 99%
rename from spec/filters/anonymize.rb
rename to spec/filters/anonymize_spec.rb
index 43f571b8284..dae90e620bc 100644
--- a/spec/filters/anonymize.rb
+++ b/spec/filters/anonymize_spec.rb
@@ -1,10 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/anonymize"
 
 describe LogStash::Filters::Anonymize do
-  extend LogStash::RSpec
 
   describe "anonymize ipaddress with IPV4_NETWORK algorithm" do
     # The logstash config goes here.
diff --git a/spec/filters/checksum.rb b/spec/filters/checksum_spec.rb
similarity index 95%
rename from spec/filters/checksum.rb
rename to spec/filters/checksum_spec.rb
index bb8f2eae887..a79c70e8b97 100644
--- a/spec/filters/checksum.rb
+++ b/spec/filters/checksum_spec.rb
@@ -1,11 +1,10 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/checksum"
 require 'openssl'
 
 describe LogStash::Filters::Checksum do
-  extend LogStash::RSpec
 
   LogStash::Filters::Checksum::ALGORITHMS.each do |alg|
     describe "#{alg} checksum with single field" do
diff --git a/spec/filters/clone.rb b/spec/filters/clone_spec.rb
similarity index 98%
rename from spec/filters/clone.rb
rename to spec/filters/clone_spec.rb
index 900539f3a76..df4edeff24e 100644
--- a/spec/filters/clone.rb
+++ b/spec/filters/clone_spec.rb
@@ -1,8 +1,7 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/clone"
 
 describe LogStash::Filters::Clone do
-  extend LogStash::RSpec
 
   describe "all defaults" do
     type "original"
diff --git a/spec/filters/csv.rb b/spec/filters/csv_spec.rb
similarity index 98%
rename from spec/filters/csv.rb
rename to spec/filters/csv_spec.rb
index ad44a4bcc24..f9d7d3a00c2 100644
--- a/spec/filters/csv.rb
+++ b/spec/filters/csv_spec.rb
@@ -1,10 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/csv"
 
 describe LogStash::Filters::CSV do
-  extend LogStash::RSpec
 
   describe "all defaults" do
     # The logstash config goes here.
diff --git a/spec/filters/date.rb b/spec/filters/date_spec.rb
similarity index 99%
rename from spec/filters/date.rb
rename to spec/filters/date_spec.rb
index e9942e35649..39936fe581f 100644
--- a/spec/filters/date.rb
+++ b/spec/filters/date_spec.rb
@@ -1,9 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/date"
 
 puts "Skipping date performance tests because this ruby is not jruby" if RUBY_ENGINE != "jruby"
 RUBY_ENGINE == "jruby" and describe LogStash::Filters::Date do
-  extend LogStash::RSpec
 
   describe "giving an invalid match config, raise a configuration error" do
     config <<-CONFIG
diff --git a/spec/filters/dns.rb b/spec/filters/dns_spec.rb
similarity index 99%
rename from spec/filters/dns.rb
rename to spec/filters/dns_spec.rb
index ddcd30f14cc..cc5a3a4d914 100644
--- a/spec/filters/dns.rb
+++ b/spec/filters/dns_spec.rb
@@ -1,11 +1,9 @@
 # encoding: utf-8
-
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/dns"
 require "resolv"
 
 describe LogStash::Filters::DNS do
-  extend LogStash::RSpec
 
   before(:all) do
     begin
diff --git a/spec/filters/drop.rb b/spec/filters/drop_spec.rb
similarity index 84%
rename from spec/filters/drop.rb
rename to spec/filters/drop_spec.rb
index 94fa78b8c77..8d8fcb65628 100644
--- a/spec/filters/drop.rb
+++ b/spec/filters/drop_spec.rb
@@ -1,8 +1,7 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/drop"
 
 describe LogStash::Filters::Drop do
-  extend LogStash::RSpec
 
   describe "drop the event" do
     config <<-CONFIG
diff --git a/spec/filters/filter_chains.rb b/spec/filters/filter_chains_spec.rb
similarity index 98%
rename from spec/filters/filter_chains.rb
rename to spec/filters/filter_chains_spec.rb
index edff7979bc6..7c956de50ce 100644
--- a/spec/filters/filter_chains.rb
+++ b/spec/filters/filter_chains_spec.rb
@@ -1,11 +1,11 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/split"
 require "logstash/filters/clone"
 
 describe LogStash::Filters do
-  extend LogStash::RSpec
+  
 
   describe "chain split with mutate filter" do
     config <<-CONFIG
diff --git a/spec/filters/fingerprint.rb b/spec/filters/fingerprint_spec.rb
similarity index 99%
rename from spec/filters/fingerprint.rb
rename to spec/filters/fingerprint_spec.rb
index d8973441f70..346ed84f621 100644
--- a/spec/filters/fingerprint.rb
+++ b/spec/filters/fingerprint_spec.rb
@@ -1,10 +1,8 @@
 # encoding: utf-8
-
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/fingerprint"
 
 describe LogStash::Filters::Fingerprint do
-  extend LogStash::RSpec
 
   describe "fingerprint ipaddress with IPV4_NETWORK method" do
     config <<-CONFIG
diff --git a/spec/filters/geoip.rb b/spec/filters/geoip_spec.rb
similarity index 98%
rename from spec/filters/geoip.rb
rename to spec/filters/geoip_spec.rb
index b1864de6e3e..1ecb56b6470 100644
--- a/spec/filters/geoip.rb
+++ b/spec/filters/geoip_spec.rb
@@ -1,8 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/geoip"
 
 describe LogStash::Filters::GeoIP do
-  extend LogStash::RSpec
+
   describe "defaults" do
     config <<-CONFIG
       filter {
diff --git a/spec/filters/grok-patterns/java.rb b/spec/filters/grok-patterns/java_spec.rb
similarity index 98%
rename from spec/filters/grok-patterns/java.rb
rename to spec/filters/grok-patterns/java_spec.rb
index ce0eb3b64fc..7423cec2415 100644
--- a/spec/filters/grok-patterns/java.rb
+++ b/spec/filters/grok-patterns/java_spec.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 
 # Test suite for the grok patterns defined in patterns/java
 # For each pattern:
@@ -7,7 +7,6 @@
 #  - a sample is considered invalid i.e. "should NOT match"  where message != result
 #
 describe "java grok pattern" do
-  extend LogStash::RSpec
 
   describe "JAVACLASS" do
     config <<-CONFIG
diff --git a/spec/filters/grok/timeouts.rb b/spec/filters/grok/timeout1_spec.rb
similarity index 99%
rename from spec/filters/grok/timeouts.rb
rename to spec/filters/grok/timeout1_spec.rb
index 3039cb76f21..3d165856184 100644
--- a/spec/filters/grok/timeouts.rb
+++ b/spec/filters/grok/timeout1_spec.rb
@@ -1,4 +1,4 @@
-require "test_utils"
+require "spec_helper"
 require "grok-pure"
 require "timeout"
 
diff --git a/spec/filters/grok/timeout2.rb b/spec/filters/grok/timeout2_spec.rb
similarity index 98%
rename from spec/filters/grok/timeout2.rb
rename to spec/filters/grok/timeout2_spec.rb
index 89c3a0cc712..11332c9c269 100644
--- a/spec/filters/grok/timeout2.rb
+++ b/spec/filters/grok/timeout2_spec.rb
@@ -1,9 +1,9 @@
-require "test_utils"
+require "spec_helper"
 require "grok-pure"
 require "timeout"
 
 describe "grok known timeout failures" do
-  extend LogStash::RSpec
+  
 
   describe "user reported timeout" do
     config <<-'CONFIG'
diff --git a/spec/filters/grok.rb b/spec/filters/grok_spec.rb
similarity index 95%
rename from spec/filters/grok.rb
rename to spec/filters/grok_spec.rb
index 5d84105b690..ac192a66c20 100644
--- a/spec/filters/grok.rb
+++ b/spec/filters/grok_spec.rb
@@ -1,10 +1,8 @@
 # encoding: utf-8
-
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/grok"
 
 describe LogStash::Filters::Grok do
-  extend LogStash::RSpec
 
   describe "simple syslog line" do
     # The logstash config goes here.
@@ -629,4 +627,22 @@
     end
   end
 
+  describe  "grok with unicode" do
+    config <<-CONFIG
+      filter {
+        grok {
+          #pattern => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
+          pattern => "<%{POSINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(:?)(?:\\[%{GREEDYDATA:syslog_pid}\\])?(:?) %{GREEDYDATA:syslog_message}"
+        }
+      }
+    CONFIG
+
+    sample "<22>Jan  4 07:50:46 mailmaster postfix/policy-spf[9454]: : SPF permerror (Junk encountered in record 'v=spf1 mx a:mail.domain.no ip4:192.168.0.4 �all'): Envelope-from: email@domain.no" do
+      insist { subject["tags"] }.nil?
+      insist { subject["syslog_pri"] } == "22"
+      insist { subject["syslog_program"] } == "postfix/policy-spf"
+    end
+  end
+
+
 end
diff --git a/spec/filters/json.rb b/spec/filters/json_spec.rb
similarity index 98%
rename from spec/filters/json.rb
rename to spec/filters/json_spec.rb
index b571b9b4023..1a8536aeb20 100644
--- a/spec/filters/json.rb
+++ b/spec/filters/json_spec.rb
@@ -1,9 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/json"
 require "logstash/timestamp"
 
 describe LogStash::Filters::Json do
-  extend LogStash::RSpec
 
   describe "parse message into the event" do
     config <<-CONFIG
diff --git a/spec/filters/kv.rb b/spec/filters/kv_spec.rb
similarity index 99%
rename from spec/filters/kv.rb
rename to spec/filters/kv_spec.rb
index 39f72fa9788..d907a9e80d4 100644
--- a/spec/filters/kv.rb
+++ b/spec/filters/kv_spec.rb
@@ -1,8 +1,7 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/kv"
 
 describe LogStash::Filters::KV do
-  extend LogStash::RSpec
 
   describe "defaults" do
     # The logstash config goes here.
diff --git a/spec/filters/metrics.rb b/spec/filters/metrics_spec.rb
similarity index 99%
rename from spec/filters/metrics.rb
rename to spec/filters/metrics_spec.rb
index b34af869c19..921c7fe9968 100644
--- a/spec/filters/metrics.rb
+++ b/spec/filters/metrics_spec.rb
@@ -1,3 +1,4 @@
+require "spec_helper"
 require "logstash/filters/metrics"
 
 describe LogStash::Filters::Metrics do
diff --git a/spec/filters/multiline.rb b/spec/filters/multiline_spec.rb
similarity index 98%
rename from spec/filters/multiline.rb
rename to spec/filters/multiline_spec.rb
index dcb8bb74873..a9e1b18307d 100644
--- a/spec/filters/multiline.rb
+++ b/spec/filters/multiline_spec.rb
@@ -1,12 +1,10 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/multiline"
 
 describe LogStash::Filters::Multiline do
 
-  extend LogStash::RSpec
-
   describe "simple multiline" do
     config <<-CONFIG
     filter {
diff --git a/spec/filters/mutate.rb b/spec/filters/mutate_spec.rb
similarity index 99%
rename from spec/filters/mutate.rb
rename to spec/filters/mutate_spec.rb
index ea9a318eb6b..38afe392a77 100644
--- a/spec/filters/mutate.rb
+++ b/spec/filters/mutate_spec.rb
@@ -1,10 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/mutate"
 
 describe LogStash::Filters::Mutate do
-  extend LogStash::RSpec
 
   context "config validation" do
    describe "invalid convert type should raise a configuration error" do
diff --git a/spec/filters/noop.rb b/spec/filters/noop_spec.rb
similarity index 99%
rename from spec/filters/noop.rb
rename to spec/filters/noop_spec.rb
index 810d2fbab12..e2cb6ecb428 100644
--- a/spec/filters/noop.rb
+++ b/spec/filters/noop_spec.rb
@@ -1,9 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/noop"
 
 #NOOP filter is perfect for testing Filters::Base features with minimal overhead
 describe LogStash::Filters::NOOP do
-  extend LogStash::RSpec
 
   describe "adding multiple value to one field" do
     config <<-CONFIG
diff --git a/spec/filters/ruby.rb b/spec/filters/ruby_spec.rb
similarity index 97%
rename from spec/filters/ruby.rb
rename to spec/filters/ruby_spec.rb
index 6bb4b7b7c74..b1c83f19e0a 100644
--- a/spec/filters/ruby.rb
+++ b/spec/filters/ruby_spec.rb
@@ -1,9 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/ruby"
 require "logstash/filters/date"
 
 describe LogStash::Filters::Ruby do
-  extend LogStash::RSpec
 
   describe "generate pretty json on event.to_hash" do
     # this obviously tests the Ruby filter but also makes sure
diff --git a/spec/filters/split.rb b/spec/filters/split_spec.rb
similarity index 96%
rename from spec/filters/split.rb
rename to spec/filters/split_spec.rb
index 7e95c80894c..05fbbd7f076 100644
--- a/spec/filters/split.rb
+++ b/spec/filters/split_spec.rb
@@ -1,10 +1,8 @@
 # encoding: utf-8
-
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/split"
 
 describe LogStash::Filters::Split do
-  extend LogStash::RSpec
 
   describe "all defaults" do
     config <<-CONFIG
diff --git a/spec/filters/spool.rb b/spec/filters/spool_spec.rb
similarity index 98%
rename from spec/filters/spool.rb
rename to spec/filters/spool_spec.rb
index 0758aaee518..b68c3483cd8 100644
--- a/spec/filters/spool.rb
+++ b/spec/filters/spool_spec.rb
@@ -1,9 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/spool"
 
 #NOOP filter is perfect for testing Filters::Base features with minimal overhead
 describe LogStash::Filters::Spool do
-  extend LogStash::RSpec
 
   # spool test are really flush tests. spool does nothing more than waiting for flush to be called.
 
diff --git a/spec/filters/throttle.rb b/spec/filters/throttle_spec.rb
similarity index 98%
rename from spec/filters/throttle.rb
rename to spec/filters/throttle_spec.rb
index 5cf77adb749..746fe0663cc 100644
--- a/spec/filters/throttle.rb
+++ b/spec/filters/throttle_spec.rb
@@ -1,8 +1,7 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/throttle"
 
 describe LogStash::Filters::Throttle do
-  extend LogStash::RSpec
 
   describe "no before_count" do
     config <<-CONFIG
diff --git a/spec/filters/urldecode.rb b/spec/filters/urldecode_spec.rb
similarity index 96%
rename from spec/filters/urldecode.rb
rename to spec/filters/urldecode_spec.rb
index 4fe3a4f5297..4b8225d7a0c 100644
--- a/spec/filters/urldecode.rb
+++ b/spec/filters/urldecode_spec.rb
@@ -1,10 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/urldecode"
 
 describe LogStash::Filters::Urldecode do
-  extend LogStash::RSpec
 
   describe "urldecode of correct urlencoded data" do
     # The logstash config goes here.
diff --git a/spec/filters/useragent.rb b/spec/filters/useragent_spec.rb
similarity index 94%
rename from spec/filters/useragent.rb
rename to spec/filters/useragent_spec.rb
index d7d83e0e418..cd1c6c1f4e6 100644
--- a/spec/filters/useragent.rb
+++ b/spec/filters/useragent_spec.rb
@@ -1,10 +1,9 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/useragent"
 
 describe LogStash::Filters::UserAgent do
-  extend LogStash::RSpec
 
   describe "defaults" do
     config <<-CONFIG
@@ -25,7 +24,7 @@
     end
   end
 
-  describe "" do
+  describe "Without target field" do
     config <<-CONFIG
       filter {
         useragent {
diff --git a/spec/filters/xml.rb b/spec/filters/xml_spec.rb
similarity index 98%
rename from spec/filters/xml.rb
rename to spec/filters/xml_spec.rb
index bbfff94eee6..591f2a16759 100644
--- a/spec/filters/xml.rb
+++ b/spec/filters/xml_spec.rb
@@ -1,9 +1,8 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/xml"
 
 describe LogStash::Filters::Xml do
-  extend LogStash::RSpec
 
   describe "parse standard xml (Deprecated checks)" do
     config <<-CONFIG
diff --git a/spec/inputs/base.rb b/spec/inputs/base_spec.rb
similarity index 95%
rename from spec/inputs/base.rb
rename to spec/inputs/base_spec.rb
index bfb546343e0..4aec45401bb 100644
--- a/spec/inputs/base.rb
+++ b/spec/inputs/base_spec.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 
 describe "LogStash::Inputs::Base#fix_streaming_codecs" do
   it "should carry the charset setting along when switching" do
diff --git a/spec/inputs/collectd.rb b/spec/inputs/collectd_spec.rb
similarity index 99%
rename from spec/inputs/collectd.rb
rename to spec/inputs/collectd_spec.rb
index 939db0967df..7f3093a8d44 100644
--- a/spec/inputs/collectd.rb
+++ b/spec/inputs/collectd_spec.rb
@@ -1,9 +1,9 @@
-require "test_utils"
+require "spec_helper"
 require "socket"
 require "tempfile"
 
 describe "inputs/collectd", :socket => true do
-  extend LogStash::RSpec
+  
   udp_sock = UDPSocket.new(Socket::AF_INET)
 
   describe "parses a normal packet" do
diff --git a/spec/inputs/elasticsearch.rb b/spec/inputs/elasticsearch_spec.rb
similarity index 98%
rename from spec/inputs/elasticsearch.rb
rename to spec/inputs/elasticsearch_spec.rb
index d695a2ed871..4eb0f456346 100644
--- a/spec/inputs/elasticsearch.rb
+++ b/spec/inputs/elasticsearch_spec.rb
@@ -1,8 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/inputs/elasticsearch"
 
 describe "inputs/elasticsearch" do
-  extend LogStash::RSpec
+  
 
   search_response = <<-RESPONSE
     {
diff --git a/spec/inputs/file.rb b/spec/inputs/file_spec.rb
similarity index 98%
rename from spec/inputs/file.rb
rename to spec/inputs/file_spec.rb
index 9126719db99..462ade1c454 100644
--- a/spec/inputs/file.rb
+++ b/spec/inputs/file_spec.rb
@@ -1,10 +1,10 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "tempfile"
 
 describe "inputs/file" do
-  extend LogStash::RSpec
+  
 
   describe "starts at the end of an existing file" do
     tmp_file = Tempfile.new('logstash-spec-input-file')
diff --git a/spec/inputs/gelf.rb b/spec/inputs/gelf_spec.rb
similarity index 95%
rename from spec/inputs/gelf.rb
rename to spec/inputs/gelf_spec.rb
index 458b34a647b..32f3aaca99c 100644
--- a/spec/inputs/gelf.rb
+++ b/spec/inputs/gelf_spec.rb
@@ -1,8 +1,8 @@
 
-require "test_utils"
+require "spec_helper"
 require "gelf"
 describe "inputs/gelf" do
-  extend LogStash::RSpec
+  
 
   describe "reads chunked gelf messages " do
     port = 12209
diff --git a/spec/inputs/generator.rb b/spec/inputs/generator_spec.rb
similarity index 97%
rename from spec/inputs/generator.rb
rename to spec/inputs/generator_spec.rb
index b21ffaeb77f..0df2c0dae26 100644
--- a/spec/inputs/generator.rb
+++ b/spec/inputs/generator_spec.rb
@@ -1,7 +1,7 @@
-require "test_utils"
+require "spec_helper"
 
 describe "inputs/generator" do
-  extend LogStash::RSpec
+  
 
   context "performance", :performance => true do
     event_count = 100000 + rand(50000)
diff --git a/spec/inputs/imap.rb b/spec/inputs/imap_spec.rb
similarity index 100%
rename from spec/inputs/imap.rb
rename to spec/inputs/imap_spec.rb
diff --git a/spec/inputs/kafka.rb b/spec/inputs/kafka_spec.rb
similarity index 98%
rename from spec/inputs/kafka.rb
rename to spec/inputs/kafka_spec.rb
index 6950a80f871..7aba00ccfbd 100644
--- a/spec/inputs/kafka.rb
+++ b/spec/inputs/kafka_spec.rb
@@ -7,7 +7,7 @@
 require 'logstash/errors'
 
 describe LogStash::Inputs::Kafka do
-  extend LogStash::RSpec
+  
 
   let (:kafka_config) {{"topic_id" => "test"}}
 
diff --git a/spec/inputs/log4j.rb b/spec/inputs/log4j_spec.rb
similarity index 100%
rename from spec/inputs/log4j.rb
rename to spec/inputs/log4j_spec.rb
diff --git a/spec/inputs/pipe.rb b/spec/inputs/pipe_spec.rb
similarity index 96%
rename from spec/inputs/pipe.rb
rename to spec/inputs/pipe_spec.rb
index 067937b4a75..e78a3dcceb5 100644
--- a/spec/inputs/pipe.rb
+++ b/spec/inputs/pipe_spec.rb
@@ -1,9 +1,9 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 require "tempfile"
 
 describe "inputs/pipe" do
-  extend LogStash::RSpec
+  
 
   describe "echo" do
     event_count = 1
diff --git a/spec/inputs/redis.rb b/spec/inputs/redis_spec.rb
similarity index 96%
rename from spec/inputs/redis.rb
rename to spec/inputs/redis_spec.rb
index c7f6b513fbc..04eceaf1348 100644
--- a/spec/inputs/redis.rb
+++ b/spec/inputs/redis_spec.rb
@@ -1,4 +1,4 @@
-require "test_utils"
+require "spec_helper"
 require "redis"
 
 def populate(key, event_count)
@@ -23,7 +23,7 @@ def process(pipeline, queue, event_count)
 end # process
 
 describe "inputs/redis", :redis => true do
-  extend LogStash::RSpec
+  
 
   describe "read events from a list" do
     key = 10.times.collect { rand(10).to_s }.join("")
diff --git a/spec/inputs/stdin.rb b/spec/inputs/stdin_spec.rb
similarity index 97%
rename from spec/inputs/stdin.rb
rename to spec/inputs/stdin_spec.rb
index a3efea1e5e4..8da76aad9d6 100644
--- a/spec/inputs/stdin.rb
+++ b/spec/inputs/stdin_spec.rb
@@ -1,5 +1,5 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 require "socket"
 require "logstash/inputs/stdin"
 
diff --git a/spec/inputs/syslog.rb b/spec/inputs/syslog_spec.rb
similarity index 98%
rename from spec/inputs/syslog.rb
rename to spec/inputs/syslog_spec.rb
index ef40a4aac37..48bb7552c37 100644
--- a/spec/inputs/syslog.rb
+++ b/spec/inputs/syslog_spec.rb
@@ -1,11 +1,11 @@
 # coding: utf-8
-require "test_utils"
+require "spec_helper"
 require "socket"
 require "logstash/inputs/syslog"
 require "logstash/event"
 
 describe "inputs/syslog" do
-  extend LogStash::RSpec
+  
 
   it "should properly handle priority, severity and facilities", :socket => true do
     port = 5511
diff --git a/spec/inputs/tcp.rb b/spec/inputs/tcp_spec.rb
similarity index 90%
rename from spec/inputs/tcp.rb
rename to spec/inputs/tcp_spec.rb
index cbcccef404a..bbec11f010d 100644
--- a/spec/inputs/tcp.rb
+++ b/spec/inputs/tcp_spec.rb
@@ -1,12 +1,13 @@
 # encoding: utf-8
-require "test_utils"
+require "spec_helper"
 require "socket"
 require "timeout"
 require "logstash/json"
 require "logstash/inputs/tcp"
+require 'stud/try'
 
 describe LogStash::Inputs::Tcp do
-  extend LogStash::RSpec
+  
 
   context "codec (PR #1372)" do
     it "switches from plain to line" do
@@ -40,7 +41,7 @@
       Thread.new { pipeline.run }
       sleep 0.1 while !pipeline.ready?
 
-      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
       event_count.times do |i|
         # unicode smiley for testing unicode support!
         socket.puts("#{i} ☹")
@@ -57,7 +58,7 @@
     end # input
   end
 
-  describe "read events with plain codec and ISO-8859-1 charset", :socket => true do
+  describe "read events with plain codec and ISO-8859-1 charset" do
     port = 5513
     charset = "ISO-8859-1"
     config <<-CONFIG
@@ -73,7 +74,7 @@
       Thread.new { pipeline.run }
       sleep 0.1 while !pipeline.ready?
 
-      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
       text = "\xA3" # the £ symbol in ISO-8859-1 aka Latin-1
       text.force_encoding("ISO-8859-1")
       socket.puts(text)
@@ -92,7 +93,7 @@
     end # input
   end
 
-  describe "read events with json codec", :socket => true do
+  describe "read events with json codec" do
     port = 5514
     config <<-CONFIG
       input {
@@ -114,7 +115,7 @@
         "host" => "example host"
       }
 
-      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
       socket.puts(LogStash::Json.dump(data))
       socket.close
 
@@ -132,7 +133,7 @@
     end # input
   end
 
-  describe "read events with json codec (testing 'host' handling)", :socket => true do
+  describe "read events with json codec (testing 'host' handling)" do
     port = 5514
     config <<-CONFIG
       input {
@@ -151,7 +152,7 @@
         "hello" => "world"
       }
 
-      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
       socket.puts(LogStash::Json.dump(data))
       socket.close
 
@@ -164,7 +165,7 @@
     end # input
   end
 
-  describe "read events with json_lines codec", :socket => true do
+  describe "read events with json_lines codec" do
     port = 5515
     config <<-CONFIG
       input {
@@ -186,7 +187,7 @@
         "idx" => 0
       }
 
-      socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+      socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
       (1..5).each do |idx|
         data["idx"] = idx
         socket.puts(LogStash::Json.dump(data) + "\n")
@@ -205,7 +206,7 @@
 
   describe "one message per connection" do
     event_count = 10
-    port = 5515
+    port = 5516
     config <<-CONFIG
       input {
         tcp {
@@ -219,12 +220,12 @@
       sleep 0.1 while !pipeline.ready?
 
       event_count.times do |i|
-        socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+        socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
         socket.puts("#{i}")
         socket.flush
         socket.close
       end
-
+      
       # wait till all events have been processed
       Timeout.timeout(1) {sleep 0.1 while queue.size < event_count}
 
@@ -239,7 +240,7 @@
 
   describe "connection threads are cleaned up when connection is closed" do
     event_count = 10
-    port = 5515
+    port = 5517
     config <<-CONFIG
       input {
         tcp {
@@ -256,7 +257,7 @@
       insist { inputs.size } == 1
 
       sockets = event_count.times.map do |i|
-        socket = Stud.try(5.times) { TCPSocket.new("127.0.0.1", port) }
+        socket = Stud::try(5.times) { TCPSocket.new("127.0.0.1", port) }
         socket.puts("#{i}")
         socket.flush
         socket
diff --git a/spec/logstash_helpers.rb b/spec/logstash_helpers.rb
new file mode 100644
index 00000000000..0439661e059
--- /dev/null
+++ b/spec/logstash_helpers.rb
@@ -0,0 +1,77 @@
+require "logstash/agent"
+require "logstash/pipeline"
+require "logstash/event"
+
+module LogStashHelper
+
+  def config(configstr)
+    let(:config) { configstr }
+  end # def config
+
+  def type(default_type)
+    let(:default_type) { default_type }
+  end
+
+  def tags(*tags)
+    let(:default_tags) { tags }
+    puts "Setting default tags: #{tags}"
+  end
+
+  def sample(sample_event, &block)
+    name = sample_event.is_a?(String) ? sample_event : LogStash::Json.dump(sample_event)
+    name = name[0..50] + "..." if name.length > 50
+
+    describe "\"#{name}\"" do
+      let(:pipeline) { LogStash::Pipeline.new(config) }
+      let(:event) do
+        sample_event = [sample_event] unless sample_event.is_a?(Array)
+        next sample_event.collect do |e|
+          e = { "message" => e } if e.is_a?(String)
+          next LogStash::Event.new(e)
+        end
+      end
+
+      let(:results) do
+        results = []
+        pipeline.instance_eval { @filters.each(&:register) }
+
+        event.each do |e|
+          pipeline.filter(e) {|new_event| results << new_event }
+        end
+
+        pipeline.flush_filters(:final => true) do |e|
+          results << e unless e.cancelled?
+        end
+
+        results
+      end
+
+      subject { results.length > 1 ? results: results.first }
+
+      it("when processed", &block)
+    end
+  end # def sample
+
+  def input(&block)
+    it "inputs" do
+      pipeline = LogStash::Pipeline.new(config)
+      queue = Queue.new
+      pipeline.instance_eval do
+        @output_func = lambda { |event| queue << event }
+      end
+      block.call(pipeline, queue)
+      pipeline.shutdown
+    end
+  end # def input
+
+  def agent(&block)
+
+    it("agent(#{caller[0].gsub(/ .*/, "")}) runs") do
+      pipeline = LogStash::Pipeline.new(config)
+      pipeline.run
+      block.call
+    end
+  end # def agent
+
+end # module LogStash
+
diff --git a/spec/outputs/cloudwatch_spec.rb b/spec/outputs/cloudwatch_spec.rb
new file mode 100644
index 00000000000..047d9968c5e
--- /dev/null
+++ b/spec/outputs/cloudwatch_spec.rb
@@ -0,0 +1,18 @@
+require "spec_helper"
+require "logstash/plugin"
+require "logstash/json"
+
+describe "outputs/cloudwatch" do
+  
+
+  output = LogStash::Plugin.lookup("output", "cloudwatch").new
+
+  it "should register" do
+    expect {output.register}.to_not raise_error
+  end
+
+  it "should respond correctly to a receive call" do
+    event = LogStash::Event.new
+    expect { output.receive(event) }.to_not raise_error
+  end
+end
diff --git a/spec/outputs/csv.rb b/spec/outputs/csv_spec.rb
similarity index 99%
rename from spec/outputs/csv.rb
rename to spec/outputs/csv_spec.rb
index 29fa719c89a..5430cb3235b 100644
--- a/spec/outputs/csv.rb
+++ b/spec/outputs/csv_spec.rb
@@ -1,10 +1,10 @@
 require "csv"
 require "tempfile"
-require "test_utils"
+require "spec_helper"
 require "logstash/outputs/csv"
 
 describe LogStash::Outputs::CSV do
-  extend LogStash::RSpec
+  
 
   describe "Write a single field to a csv file" do
     tmpfile = Tempfile.new('logstash-spec-output-csv')
diff --git a/spec/outputs/elasticsearch_http.rb b/spec/outputs/elasticsearch_http_spec.rb
similarity index 99%
rename from spec/outputs/elasticsearch_http.rb
rename to spec/outputs/elasticsearch_http_spec.rb
index f668b37191d..a89526216a7 100644
--- a/spec/outputs/elasticsearch_http.rb
+++ b/spec/outputs/elasticsearch_http_spec.rb
@@ -1,8 +1,8 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/json"
 
 describe "outputs/elasticsearch_http", :elasticsearch => true do
-  extend LogStash::RSpec
+  
 
   describe "ship lots of events w/ default index_type" do
     # Generate a random index name
diff --git a/spec/outputs/elasticsearch_river.rb b/spec/outputs/elasticsearch_river_spec.rb
similarity index 100%
rename from spec/outputs/elasticsearch_river.rb
rename to spec/outputs/elasticsearch_river_spec.rb
diff --git a/spec/outputs/elasticsearch.rb b/spec/outputs/elasticsearch_spec.rb
similarity index 99%
rename from spec/outputs/elasticsearch.rb
rename to spec/outputs/elasticsearch_spec.rb
index 836c9ef56e1..ce896ec6cbb 100644
--- a/spec/outputs/elasticsearch.rb
+++ b/spec/outputs/elasticsearch_spec.rb
@@ -1,10 +1,10 @@
-require "test_utils"
+require "spec_helper"
 require "ftw"
 require "logstash/plugin"
 require "logstash/json"
 
 describe "outputs/elasticsearch" do
-  extend LogStash::RSpec
+  
 
   it "should register" do
     output = LogStash::Plugin.lookup("output", "elasticsearch").new("embedded" => "false", "protocol" => "transport", "manage_template" => "false")
diff --git a/spec/outputs/email.rb b/spec/outputs/email_spec.rb
similarity index 99%
rename from spec/outputs/email.rb
rename to spec/outputs/email_spec.rb
index fdcb6c3e94d..38a8b50ea00 100644
--- a/spec/outputs/email.rb
+++ b/spec/outputs/email_spec.rb
@@ -1,9 +1,9 @@
-require "test_utils"
+require "spec_helper"
 require "rumbster"
 require "message_observers"
 
 describe "outputs/email", :broken => true do
-    extend LogStash::RSpec
+    
 
     @@port=2525
     let (:rumbster) { Rumbster.new(@@port) }
diff --git a/spec/outputs/file.rb b/spec/outputs/file_spec.rb
similarity index 97%
rename from spec/outputs/file.rb
rename to spec/outputs/file_spec.rb
index a49366bd4e3..aef261acc2e 100644
--- a/spec/outputs/file.rb
+++ b/spec/outputs/file_spec.rb
@@ -1,10 +1,10 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/outputs/file"
 require "logstash/json"
 require "tempfile"
 
 describe LogStash::Outputs::File do
-  extend LogStash::RSpec
+  
 
   describe "ship lots of events to a file" do
     event_count = 10000 + rand(500)
diff --git a/spec/outputs/graphite.rb b/spec/outputs/graphite_spec.rb
similarity index 99%
rename from spec/outputs/graphite.rb
rename to spec/outputs/graphite_spec.rb
index 2b5fe1ac428..d8bfe240e66 100644
--- a/spec/outputs/graphite.rb
+++ b/spec/outputs/graphite_spec.rb
@@ -1,9 +1,9 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/outputs/graphite"
 require "mocha/api"
 
 describe LogStash::Outputs::Graphite, :socket => true do
-  extend LogStash::RSpec
+  
 
   describe "defaults should include all metrics" do
     port = 4939
diff --git a/spec/outputs/kafka.rb b/spec/outputs/kafka_spec.rb
similarity index 100%
rename from spec/outputs/kafka.rb
rename to spec/outputs/kafka_spec.rb
index 0a87b974c54..28c36028500 100644
--- a/spec/outputs/kafka.rb
+++ b/spec/outputs/kafka_spec.rb
@@ -26,13 +26,13 @@
   end
 
   it "should send logstash event to kafka broker" do
+    kafka = LogStash::Outputs::Kafka.new(kafka_config)
+    kafka.register
     timestamp = LogStash::Timestamp.now
     expect_any_instance_of(Kafka::Producer)
     .to receive(:sendMsg)
         .with("test", nil, "{\"message\":\"hello world\",\"host\":\"test\",\"@timestamp\":\"#{timestamp}\",\"@version\":\"1\"}")
     e = LogStash::Event.new({"message" => "hello world", "host" => "test", "@timestamp" => timestamp})
-    kafka = LogStash::Outputs::Kafka.new(kafka_config)
-    kafka.register
     kafka.receive(e)
   end
 
diff --git a/spec/outputs/redis.rb b/spec/outputs/redis_spec.rb
similarity index 98%
rename from spec/outputs/redis.rb
rename to spec/outputs/redis_spec.rb
index 3c4dbeb04d0..70cc362b1bc 100644
--- a/spec/outputs/redis.rb
+++ b/spec/outputs/redis_spec.rb
@@ -1,10 +1,10 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/outputs/redis"
 require "logstash/json"
 require "redis"
 
 describe LogStash::Outputs::Redis, :redis => true do
-  extend LogStash::RSpec
+  
 
   describe "ship lots of events to a list" do
     key = 10.times.collect { rand(10).to_s }.join("")
diff --git a/spec/outputs/statsd.rb b/spec/outputs/statsd_spec.rb
similarity index 97%
rename from spec/outputs/statsd.rb
rename to spec/outputs/statsd_spec.rb
index 5bb0942600e..3aa95e0d8a8 100644
--- a/spec/outputs/statsd.rb
+++ b/spec/outputs/statsd_spec.rb
@@ -1,10 +1,10 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/outputs/statsd"
 require "mocha/api"
 require "socket"
 
 describe LogStash::Outputs::Statsd do
-  extend LogStash::RSpec
+  
   port = 4399
   udp_server = UDPSocket.new
   udp_server.bind("127.0.0.1", port)
diff --git a/spec/filters/date_performance.rb b/spec/performance/date.rb
similarity index 82%
rename from spec/filters/date_performance.rb
rename to spec/performance/date.rb
index 0c30b59dd84..47d3b0402c5 100644
--- a/spec/filters/date_performance.rb
+++ b/spec/performance/date.rb
@@ -1,11 +1,11 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/filters/date"
 
 puts "Skipping date tests because this ruby is not jruby" if RUBY_ENGINE != "jruby"
-describe LogStash::Filters::Date, :if => RUBY_ENGINE == "jruby" do
-  extend LogStash::RSpec
+describe LogStash::Filters::Date, :if => RUBY_ENGINE == "jruby", :performance => true do
+  
 
-  describe "speed test of date parsing", :performance => true do
+  describe "speed test of date parsing" do
     it "should be fast" do
       event_count = 100000
       min_rate = 4000
diff --git a/spec/speed.rb b/spec/performance/speed.rb
similarity index 88%
rename from spec/speed.rb
rename to spec/performance/speed.rb
index d8f0a9e5e18..d2f66dd8da8 100644
--- a/spec/speed.rb
+++ b/spec/performance/speed.rb
@@ -1,7 +1,7 @@
-require "test_utils"
+require "spec_helper"
 
 describe "speed tests", :performance => true do
-  extend LogStash::RSpec
+  
   count = 1000000
 
   config <<-CONFIG
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
new file mode 100644
index 00000000000..90e22b906cf
--- /dev/null
+++ b/spec/spec_helper.rb
@@ -0,0 +1,48 @@
+require "logstash/logging"
+require 'logstash_helpers'
+require "insist"
+
+if ENV['COVERAGE']
+  require 'simplecov'
+  require 'coveralls'
+
+  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
+    SimpleCov::Formatter::HTMLFormatter,
+    Coveralls::SimpleCov::Formatter
+  ]
+  SimpleCov.start do
+    add_filter 'spec/'
+    add_filter 'vendor/'
+  end
+end
+
+$TESTING = true
+if RUBY_VERSION < "1.9.2"
+  $stderr.puts "Ruby 1.9.2 or later is required. (You are running: " + RUBY_VERSION + ")"
+  raise LoadError
+end
+
+$logger = LogStash::Logger.new(STDOUT)
+if ENV["TEST_DEBUG"]
+  $logger.level = :debug
+else
+  $logger.level = :error
+end
+
+puts("Using Accessor#strict_set for specs")
+# mokey path LogStash::Event to use strict_set in tests
+# ugly, I know, but this avoids adding conditionals in performance critical section
+class LogStash::Event
+  def []=(str, value)
+    if str == TIMESTAMP && !value.is_a?(LogStash::Timestamp)
+      raise TypeError, "The field '@timestamp' must be a LogStash::Timestamp, not a #{value.class} (#{value})"
+    end
+    @accessors.strict_set(str, value)
+  end # def []=
+end
+
+RSpec.configure do |config|
+  config.extend LogStashHelper
+  config.filter_run_excluding :redis => true, :socket => true, :performance => true, :elasticsearch => true, :broken => true, :export_cypher => true
+end
+
diff --git a/spec/support/LOGSTASH-733.rb b/spec/support/LOGSTASH-733.rb
deleted file mode 100644
index 62a9b7dce81..00000000000
--- a/spec/support/LOGSTASH-733.rb
+++ /dev/null
@@ -1,21 +0,0 @@
-# This spec covers the question here:
-# https://logstash.jira.com/browse/LOGSTASH-733
-
-require "test_utils"
-
-describe "LOGSTASH-733" do
-  extend LogStash::RSpec
-  describe  "pipe-delimited fields" do
-    config <<-CONFIG
-      filter {
-        kv { field_split => "|" }
-      }
-    CONFIG
-
-    sample "field1=test|field2=another test|field3=test3" do
-      insist { subject["field1"] } == "test"
-      insist { subject["field2"] } == "another test"
-      insist { subject["field3"] } == "test3"
-    end
-  end
-end
diff --git a/spec/support/LOGSTASH-820.rb b/spec/support/LOGSTASH-820.rb
deleted file mode 100644
index 251b1f0e5bc..00000000000
--- a/spec/support/LOGSTASH-820.rb
+++ /dev/null
@@ -1,25 +0,0 @@
-# encoding: utf-8
-# This spec covers the question here:
-# https://logstash.jira.com/browse/LOGSTASH-820
-
-require "test_utils"
-
-describe "LOGSTASH-820" do
-  extend LogStash::RSpec
-  describe  "grok with unicode" do
-    config <<-CONFIG
-      filter {
-        grok {
-          #pattern => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
-          pattern => "<%{POSINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{PROG:syslog_program}(:?)(?:\\[%{GREEDYDATA:syslog_pid}\\])?(:?) %{GREEDYDATA:syslog_message}"
-        }
-      }
-    CONFIG
-
-    sample "<22>Jan  4 07:50:46 mailmaster postfix/policy-spf[9454]: : SPF permerror (Junk encountered in record 'v=spf1 mx a:mail.domain.no ip4:192.168.0.4 �all'): Envelope-from: email@domain.no" do
-      insist { subject["tags"] }.nil?
-      insist { subject["syslog_pri"] } == "22"
-      insist { subject["syslog_program"] } == "postfix/policy-spf"
-    end
-  end
-end
diff --git a/spec/support/akamai-grok.rb b/spec/support/akamai-grok_spec.rb
similarity index 96%
rename from spec/support/akamai-grok.rb
rename to spec/support/akamai-grok_spec.rb
index f889d5c9e87..cb678a2dee6 100644
--- a/spec/support/akamai-grok.rb
+++ b/spec/support/akamai-grok_spec.rb
@@ -1,7 +1,6 @@
-require "test_utils"
+require "spec_helper"
 
-describe "..." do
-  extend LogStash::RSpec
+describe "Akamai Grok pattern" do
 
   config <<-'CONFIG'
     filter {
diff --git a/spec/support/date-http.rb b/spec/support/date-http_spec.rb
similarity index 88%
rename from spec/support/date-http.rb
rename to spec/support/date-http_spec.rb
index a6ac07966fc..fb25f48b45b 100644
--- a/spec/support/date-http.rb
+++ b/spec/support/date-http_spec.rb
@@ -1,7 +1,6 @@
-require "test_utils"
+require "spec_helper"
 
 describe "http dates", :if => RUBY_ENGINE == "jruby" do
-  extend LogStash::RSpec
 
   config <<-'CONFIG'
     filter {
diff --git a/spec/support/pull375.rb b/spec/support/pull375_spec.rb
similarity index 91%
rename from spec/support/pull375.rb
rename to spec/support/pull375_spec.rb
index 77295fc61be..b0851ff8eb5 100644
--- a/spec/support/pull375.rb
+++ b/spec/support/pull375_spec.rb
@@ -3,10 +3,10 @@
 # This spec covers the question here:
 # https://github.com/logstash/logstash/pull/375
 
-require "test_utils"
+require "spec_helper"
 
 describe "pull #375" do
-  extend LogStash::RSpec
+  
   describe  "kv after grok" do
     config <<-CONFIG
       filter {
diff --git a/spec/test_utils.rb b/spec/test_utils.rb
deleted file mode 100644
index 8c98f4a911c..00000000000
--- a/spec/test_utils.rb
+++ /dev/null
@@ -1,143 +0,0 @@
-# encoding: utf-8
-
-require "logstash/json"
-require "logstash/timestamp"
-
-if ENV['COVERAGE']
-  require 'simplecov'
-  require 'coveralls'
-
-  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
-    SimpleCov::Formatter::HTMLFormatter,
-    Coveralls::SimpleCov::Formatter
-  ]
-  SimpleCov.start do
-    add_filter 'spec/'
-    add_filter 'vendor/'
-  end
-end
-require "insist"
-require "logstash/agent"
-require "logstash/pipeline"
-require "logstash/event"
-require "logstash/logging"
-require "insist"
-require "stud/try"
-
-$TESTING = true
-if RUBY_VERSION < "1.9.2"
-  $stderr.puts "Ruby 1.9.2 or later is required. (You are running: " + RUBY_VERSION + ")"
-  $stderr.puts "Options for fixing this: "
-  $stderr.puts "  * If doing 'ruby bin/logstash ...' add --1.9 flag to 'ruby'"
-  $stderr.puts "  * If doing 'java -jar ... ' add -Djruby.compat.version=RUBY1_9 to java flags"
-  raise LoadError
-end
-
-$logger = LogStash::Logger.new(STDOUT)
-if ENV["TEST_DEBUG"]
-  $logger.level = :debug
-else
-  $logger.level = :error
-end
-
-puts("Using Accessor#strict_set for specs")
-# mokey path LogStash::Event to use strict_set in tests
-# ugly, I know, but this avoids adding conditionals in performance critical section
-class LogStash::Event
-  def []=(str, value)
-    if str == TIMESTAMP && !value.is_a?(LogStash::Timestamp)
-      raise TypeError, "The field '@timestamp' must be a LogStash::Timestamp, not a #{value.class} (#{value})"
-    end
-    @accessors.strict_set(str, value)
-  end # def []=
-end
-
-RSpec.configure do |config|
-  config.filter_run_excluding :redis => true, :socket => true, :performance => true, :elasticsearch => true, :broken => true, :export_cypher => true
-end
-
-module LogStash
-  module RSpec
-    def config(configstr)
-      let(:config) { configstr }
-    end # def config
-
-    def type(default_type)
-      let(:default_type) { default_type }
-    end
-
-    def tags(*tags)
-      let(:default_tags) { tags }
-      puts "Setting default tags: #{@default_tags}"
-    end
-
-    def sample(sample_event, &block)
-      name = sample_event.is_a?(String) ? sample_event : LogStash::Json.dump(sample_event)
-      name = name[0..50] + "..." if name.length > 50
-
-      describe "\"#{name}\"" do
-        extend LogStash::RSpec
-        let(:pipeline) { LogStash::Pipeline.new(config) }
-        let(:event) do
-          sample_event = [sample_event] unless sample_event.is_a?(Array)
-          next sample_event.collect do |e|
-            e = { "message" => e } if e.is_a?(String)
-            next LogStash::Event.new(e)
-          end
-        end
-
-        let(:results) do
-          results = []
-          pipeline.instance_eval { @filters.each(&:register) }
-
-          event.each do |e|
-            pipeline.filter(e) {|new_event| results << new_event }
-          end
-
-          pipeline.flush_filters(:final => true) do |e|
-            results << e unless e.cancelled?
-          end
-
-          results
-        end
-
-        subject { results.length > 1 ? results: results.first }
-
-        it("when processed", &block)
-      end
-    end # def sample
-
-    def input(&block)
-      it "inputs" do
-        pipeline = LogStash::Pipeline.new(config)
-        queue = Queue.new
-        pipeline.instance_eval do
-          @output_func = lambda { |event| queue << event }
-        end
-        block.call(pipeline, queue)
-        pipeline.shutdown
-      end
-    end # def input
-
-    def agent(&block)
-      require "logstash/pipeline"
-
-      it("agent(#{caller[0].gsub(/ .*/, "")}) runs") do
-        pipeline = LogStash::Pipeline.new(config)
-        pipeline.run
-        block.call
-      end
-    end # def agent
-
-  end # module RSpec
-end # module LogStash
-
-class Shiftback
-  def initialize(&block)
-    @block = block
-  end
-
-  def <<(event)
-    @block.call(event)
-  end
-end # class Shiftback
diff --git a/spec/util/accessors_spec.rb b/spec/util/accessors_spec.rb
index e86e25aed37..ca6ea831c14 100644
--- a/spec/util/accessors_spec.rb
+++ b/spec/util/accessors_spec.rb
@@ -1,6 +1,6 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/util/accessors"
 
 describe LogStash::Util::Accessors, :if => true do
diff --git a/spec/util/charset_spec.rb b/spec/util/charset_spec.rb
index f741b0ce2cb..8514e1a5755 100644
--- a/spec/util/charset_spec.rb
+++ b/spec/util/charset_spec.rb
@@ -1,6 +1,6 @@
 # encoding: utf-8
 
-require "test_utils"
+require "spec_helper"
 require "logstash/util/charset"
 
 describe LogStash::Util::Charset do
@@ -29,7 +29,8 @@
       ["foo \xED\xB9\x81\xC3", "bar \xAD"].each do |data|
         insist { data.encoding.name } == "UTF-8"
         insist { data.valid_encoding? } == false
-        logger.should_receive(:warn).twice
+        expect(logger).to receive(:warn).exactly(2).times
+#logger.should_receive(:warn).twice
         insist { subject.convert(data) } == data.inspect[1..-2]
         insist { subject.convert(data).encoding.name } == "UTF-8"
       end
diff --git a/spec/environment.rb b/spec/util/environment_spec.rb
similarity index 100%
rename from spec/environment.rb
rename to spec/util/environment_spec.rb
diff --git a/spec/util/fieldeval_spec.rb b/spec/util/fieldeval_spec.rb
index 4cf10597ba2..963ad3925f5 100644
--- a/spec/util/fieldeval_spec.rb
+++ b/spec/util/fieldeval_spec.rb
@@ -1,4 +1,4 @@
-require "test_utils"
+require "spec_helper"
 require "logstash/util/fieldreference"
 
 describe LogStash::Util::FieldReference, :if => true do
diff --git a/spec/jar.rb b/spec/util/jar_spec.rb
similarity index 100%
rename from spec/jar.rb
rename to spec/util/jar_spec.rb
diff --git a/spec/json.rb b/spec/util/json_spec.rb
similarity index 99%
rename from spec/json.rb
rename to spec/util/json_spec.rb
index 147b6196d38..a745f91a1e8 100644
--- a/spec/json.rb
+++ b/spec/util/json_spec.rb
@@ -55,7 +55,9 @@
         expect(JrJackson::Raw).to receive(:generate).with(array).and_call_original
         expect(LogStash::Json.dump(array)).to eql(json_array)
       end
+
     end
+
   else
 
     ### MRI specific
