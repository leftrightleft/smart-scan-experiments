diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 8f34518db05..8b842fa8501 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -133,11 +133,11 @@ def validate_positive_integer(str_arg)
   # Emit a warning message.
   def warn(message)
     # For now, all warnings are fatal.
-    raise LogStash::ConfigurationError, message
+    signal_usage_error(message)
   end # def warn
 
   def fail(message)
-    raise LogStash::ConfigurationError, message
+    signal_usage_error(message)
   end # def fail
 
   # Run the agent. This method is invoked after clamp parses the
@@ -242,7 +242,10 @@ def execute
     end
     return 1
   rescue => e
-    @logger.unsubscribe(stdout_logs) if show_startup_errors
+    if show_startup_errors
+      @logger.terminal(e.message)
+      @logger.unsubscribe(stdout_logs)
+    end
     @logger.warn(I18n.t("oops"), :error => e, :class => e.class.name, :backtrace => e.backtrace)
     return 1
   ensure
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index c4811f99699..96835de8c09 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -255,7 +255,7 @@
     it "should fail with single invalid dir path" do
       expect(File).to receive(:directory?).and_return(false)
       expect(LogStash::Environment).not_to receive(:add_plugin_path)
-      expect{subject.configure_plugin_paths(single_path)}.to raise_error(LogStash::ConfigurationError)
+      expect{subject.configure_plugin_paths(single_path)}.to raise_error(Clamp::UsageError)
     end
 
     it "should add multiple valid dir path to the environment" do
@@ -293,7 +293,7 @@
     it "should fail with single invalid dir path" do
       expect(File).to receive(:directory?).and_return(false)
       expect(LogStash::Environment).not_to receive(:add_plugin_path)
-      expect{subject.configure_plugin_paths(single_path)}.to raise_error(LogStash::ConfigurationError)
+      expect{subject.configure_plugin_paths(single_path)}.to raise_error(Clamp::UsageError)
     end
   end
 
