diff --git a/logstash-core/lib/logstash/compiler.rb b/logstash-core/lib/logstash/compiler.rb
index 6cd68b280e0..33b34ace69d 100644
--- a/logstash-core/lib/logstash/compiler.rb
+++ b/logstash-core/lib/logstash/compiler.rb
@@ -1,32 +1,15 @@
 require 'logstash/compiler/lscl/lscl_grammar'
 
 java_import org.logstash.config.ir.PipelineIR
+java_import org.logstash.config.ir.ConfigCompiler
 java_import org.logstash.config.ir.graph.Graph
 
 module LogStash; class Compiler
   include ::LogStash::Util::Loggable
 
+  # Used only in lir_serializer_spec
   def self.compile_sources(sources_with_metadata, support_escapes)
-    graph_sections = sources_with_metadata.map do |swm|
-      self.compile_graph(swm, support_escapes)
-    end
-
-    input_graph = Graph.combine(*graph_sections.map {|s| s[:input] }).graph
-    output_graph = Graph.combine(*graph_sections.map {|s| s[:output] }).graph
-
-    filter_graph = graph_sections.reduce(nil) do |acc, s|
-      filter_section = s[:filter]
-
-      if acc.nil?
-        filter_section
-      else
-        acc.chain(filter_section)
-      end
-    end
-
-    original_source = sources_with_metadata.map(&:text).join("\n")
-
-    PipelineIR.new(input_graph, filter_graph, output_graph, original_source)
+    ConfigCompiler.compileSources(sources_with_metadata, support_escapes)
   end
 
   def self.compile_imperative(source_with_metadata, support_escapes)
@@ -45,7 +28,4 @@ def self.compile_imperative(source_with_metadata, support_escapes)
     config.compile(source_with_metadata)
   end
 
-  def self.compile_graph(source_with_metadata, support_escapes)
-    Hash[compile_imperative(source_with_metadata, support_escapes).map {|section,icompiled| [section, icompiled.toGraph]}]
-  end
 end; end
diff --git a/logstash-core/spec/logstash/compiler/compiler_spec.rb b/logstash-core/spec/logstash/compiler/compiler_spec.rb
index 8e614332fe8..716a7653250 100644
--- a/logstash-core/spec/logstash/compiler/compiler_spec.rb
+++ b/logstash-core/spec/logstash/compiler/compiler_spec.rb
@@ -32,74 +32,74 @@ def rand_meta
     end
   end
 
-  describe "compiling to Pipeline" do
-    subject(:source_id) { "fake_sourcefile" }
-    let(:source_with_metadata) { org.logstash.common.SourceWithMetadata.new(source_protocol, source_id, 0, 0, source) }
-    subject(:compiled) { puts "PCOMP"; described_class.compile_pipeline(source_with_metadata, settings) }
-
-    describe "compiling multiple sources" do
-      let(:sources) do
-        [ 
-          "input { input_0 {} } filter { filter_0 {} } output { output_0 {} }",
-          "input { input_1 {} } filter { filter_1 {} } output { output_1 {} }"
-        ]
-      end
-
-      let(:sources_with_metadata) do
-        sources.map.with_index do |source, idx|
-          org.logstash.common.SourceWithMetadata.new("#{source_protocol}_#{idx}", "#{source_id}_#{idx}", 0, 0, source)
-        end
-      end
-
-      subject(:pipeline) { described_class.compile_sources(sources_with_metadata, false) }
-
-      it "should generate a hash" do
-        expect(pipeline.unique_hash).to be_a(String)
-      end
-
-      it "should compile cleanly" do
-        expect(pipeline).to be_a(org.logstash.config.ir.PipelineIR)
-      end
-
-      it "should provide the original source" do
-        expect(pipeline.original_source).to eq(sources.join("\n"))
-      end
-
-      describe "applying protocol and id metadata" do
-        it "should apply the correct source metadata to all components" do
-          # TODO: seems to be a jruby regression we cannot currently call each on a stream
-          pipeline.get_plugin_vertices.each do |pv|
-            name_idx = pv.plugin_definition.name.split("_").last
-            source_protocol_idx = pv.source_with_metadata.protocol.split("_").last
-            source_id_idx = pv.source_with_metadata.id.split("_").last
-
-            expect(name_idx).to eq(source_protocol_idx)
-            expect(name_idx).to eq(source_id_idx)
-          end
-        end
-      end
-    end
-
-    describe "complex configs" do
-      shared_examples_for "compilable LSCL files" do |path|
-        describe "parsing #{path}" do
-          let(:source) { File.read(path) }
-          
-          it "should compile" do
-            expect(compiled).to be_java_kind_of(Java::OrgLogstashConfigIr::Pipeline)
-          end
-          
-          it "should have a hash" do
-            expect(compiled.uniqueHash)
-          end
-        end
-      end
-      
-      Dir.glob(File.join(SUPPORT_DIR, "lscl_configs", "*.conf")).each do |path|
-        it_should_behave_like "compilable LSCL files", path
-      end
-    end
-  end
+#   describe "compiling to Pipeline" do
+#     subject(:source_id) { "fake_sourcefile" }
+#     let(:source_with_metadata) { org.logstash.common.SourceWithMetadata.new(source_protocol, source_id, 0, 0, source) }
+#     subject(:compiled) { puts "PCOMP"; described_class.compile_pipeline(source_with_metadata, settings) }
+#
+#     describe "compiling multiple sources" do
+#       let(:sources) do
+#         [
+#           "input { input_0 {} } filter { filter_0 {} } output { output_0 {} }",
+#           "input { input_1 {} } filter { filter_1 {} } output { output_1 {} }"
+#         ]
+#       end
+#
+#       let(:sources_with_metadata) do
+#         sources.map.with_index do |source, idx|
+#           org.logstash.common.SourceWithMetadata.new("#{source_protocol}_#{idx}", "#{source_id}_#{idx}", 0, 0, source)
+#         end
+#       end
+#
+#       subject(:pipeline) { described_class.compile_sources(sources_with_metadata, false) }
+#
+#       it "should generate a hash" do
+#         expect(pipeline.unique_hash).to be_a(String)
+#       end
+#
+#       it "should compile cleanly" do
+#         expect(pipeline).to be_a(org.logstash.config.ir.PipelineIR)
+#       end
+#
+#       it "should provide the original source" do
+#         expect(pipeline.original_source).to eq(sources.join("\n"))
+#       end
+#
+#       describe "applying protocol and id metadata" do
+#         it "should apply the correct source metadata to all components" do
+#           # TODO: seems to be a jruby regression we cannot currently call each on a stream
+#           pipeline.get_plugin_vertices.each do |pv|
+#             name_idx = pv.plugin_definition.name.split("_").last
+#             source_protocol_idx = pv.source_with_metadata.protocol.split("_").last
+#             source_id_idx = pv.source_with_metadata.id.split("_").last
+#
+#             expect(name_idx).to eq(source_protocol_idx)
+#             expect(name_idx).to eq(source_id_idx)
+#           end
+#         end
+#       end
+#     end
+#
+#     describe "complex configs" do
+#       shared_examples_for "compilable LSCL files" do |path|
+#         describe "parsing #{path}" do
+#           let(:source) { File.read(path) }
+#
+#           it "should compile" do
+#             expect(compiled).to be_java_kind_of(Java::OrgLogstashConfigIr::Pipeline)
+#           end
+#
+#           it "should have a hash" do
+#             expect(compiled.uniqueHash)
+#           end
+#         end
+#       end
+#
+#       Dir.glob(File.join(SUPPORT_DIR, "lscl_configs", "*.conf")).each do |path|
+#         it_should_behave_like "compilable LSCL files", path
+#       end
+#     end
+#   end
 
   describe "compiling imperative" do
     let(:source_id) { "fake_sourcefile" }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
index 668563fc6bb..849e54477c3 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/ConfigCompiler.java
@@ -1,10 +1,18 @@
 package org.logstash.config.ir;
 
+import org.jruby.RubyHash;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.common.IncompleteSourceWithMetadataException;
 import org.logstash.common.SourceWithMetadata;
+import org.logstash.config.ir.graph.Graph;
+import org.logstash.config.ir.imperative.Statement;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+import static java.util.stream.Collectors.*;
 
 /**
  * Java Implementation of the config compiler that is implemented by wrapping the Ruby
@@ -24,22 +32,76 @@ private ConfigCompiler() {
      */
     public static PipelineIR configToPipelineIR(final String config, final boolean supportEscapes)
         throws IncompleteSourceWithMetadataException {
+        SourceWithMetadata sourceWithMetadata = new SourceWithMetadata("str", "pipeline", 0, 0, config);
+        try {
+            return compileSources(Arrays.asList(sourceWithMetadata), supportEscapes);
+        } catch (InvalidIRException iirex) {
+            throw new IllegalArgumentException(iirex);
+        }
+    }
+
+    public static PipelineIR compileSources(List<SourceWithMetadata> sourcesWithMetadata, boolean supportEscapes) throws InvalidIRException {
+        Map<PluginDefinition.Type, List<Graph>> groupedPipelineSections = sourcesWithMetadata.stream()
+                .map(swm -> compileGraph(swm, supportEscapes))
+                .flatMap(m -> m.entrySet().stream())
+                .filter(e -> e.getValue() != null)
+                .collect(groupingBy(Map.Entry::getKey,
+                                mapping(Map.Entry::getValue, toList())));
+
+        Graph inputGraph = Graph.combine(groupedPipelineSections.get(PluginDefinition.Type.INPUT).toArray(new Graph[0])).graph;
+        Graph outputGraph = Graph.combine(groupedPipelineSections.get(PluginDefinition.Type.OUTPUT).toArray(new Graph[0])).graph;
+        Graph filterGraph = groupedPipelineSections.get(PluginDefinition.Type.FILTER).stream()
+                .reduce(ConfigCompiler::chainWithUntypedException).orElse(null);
+
+        String originalSource = sourcesWithMetadata.stream().map(SourceWithMetadata::getText).collect(joining("\n"));
+        return new PipelineIR(inputGraph, filterGraph, outputGraph, originalSource);
+    }
+
+    private static Graph chainWithUntypedException(Graph g1, Graph g2) {
+        try {
+            return g1.chain(g2);
+        } catch (InvalidIRException iirex) {
+            throw new IllegalArgumentException(iirex);
+        }
+    }
+
+    private static Map<PluginDefinition.Type, Graph> compileGraph(SourceWithMetadata swm, boolean supportEscapes) {
+        Map<PluginDefinition.Type, Statement> pluginStatements = compileImperative(swm, supportEscapes);
+        return pluginStatements.entrySet().stream()
+                .collect(Collectors.toMap(Map.Entry::getKey, e -> toGraphWithUntypedException(e.getValue())));
+    }
+
+    private static Graph toGraphWithUntypedException(Statement s) {
+        try {
+            return s.toGraph();
+        } catch (InvalidIRException iirex) {
+            throw new IllegalArgumentException(iirex);
+        }
+    }
+
+    private static Map<PluginDefinition.Type, Statement> compileImperative(SourceWithMetadata sourceWithMetadata,
+                                                                           boolean supportEscapes) {
         final IRubyObject compiler = RubyUtil.RUBY.executeScript(
-            "require 'logstash/compiler'\nLogStash::Compiler",
-            ""
+                "require 'logstash/compiler'\nLogStash::Compiler",
+                ""
         );
+        // invoke Ruby interpreter to execute LSCL treetop
         final IRubyObject code =
-            compiler.callMethod(RubyUtil.RUBY.getCurrentContext(), "compile_sources",
+            compiler.callMethod(RubyUtil.RUBY.getCurrentContext(), "compile_imperative",
                 new IRubyObject[]{
-                    RubyUtil.RUBY.newArray(
-                        JavaUtil.convertJavaToRuby(
-                            RubyUtil.RUBY,
-                            new SourceWithMetadata("str", "pipeline", 0, 0, config)
-                        )
-                    ),
+                    JavaUtil.convertJavaToRuby(RubyUtil.RUBY, sourceWithMetadata),
                     RubyUtil.RUBY.newBoolean(supportEscapes)
-                }
-            );
-        return code.toJava(PipelineIR.class);
+                });
+        RubyHash hash = (RubyHash) code;
+        Map<PluginDefinition.Type, Statement> result = new HashMap<>();
+        result.put(PluginDefinition.Type.INPUT, readStatementFromRubyHash(hash, "input"));
+        result.put(PluginDefinition.Type.FILTER, readStatementFromRubyHash(hash, "filter"));
+        result.put(PluginDefinition.Type.OUTPUT, readStatementFromRubyHash(hash, "output"));
+        return result;
+    }
+
+    private static Statement readStatementFromRubyHash(RubyHash hash, String key) {
+        IRubyObject inputValue = hash.op_aref(RubyUtil.RUBY.getCurrentContext(), RubyUtil.RUBY.newSymbol(key));
+        return inputValue.toJava(Statement.class);
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
index 1314dd0ec8f..a06e0c247aa 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/ConfigCompilerTest.java
@@ -2,12 +2,21 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.commons.codec.binary.StringUtils;
+import org.assertj.core.util.Strings;
 import org.junit.Test;
 import org.logstash.common.IncompleteSourceWithMetadataException;
+import org.logstash.common.SourceWithMetadata;
 import org.logstash.config.ir.graph.Graph;
+import org.logstash.config.ir.graph.PluginVertex;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 public class ConfigCompilerTest extends RubyEnvTestCase {
 
@@ -64,4 +73,40 @@ private static String graphHash(final String config)
         throws IncompleteSourceWithMetadataException {
         return ConfigCompiler.configToPipelineIR(config, false).uniqueHash();
     }
+
+    @Test
+    public void testCompilingPipelineWithMultipleSources() throws InvalidIRException {
+        String sourceId = "fake_sourcefile";
+        String sourceProtocol = "test_proto";
+        SourceWithMetadata sourceWithMetadata = new SourceWithMetadata(sourceProtocol, sourceId, 0, 0, "booo");
+
+        String[] sources = new String[] {
+                "input { input_0 {} } filter { filter_0 {} } output { output_0 {} }",
+                "input { input_1 {} } filter { filter_1 {} } output { output_1 {} }"};
+
+        List<SourceWithMetadata> sourcesWithMetadata = Arrays.asList(
+                new SourceWithMetadata(sourceProtocol + "_" + 0, sourceId + "_" + 0, 0, 0, sources[0]),
+                new SourceWithMetadata(sourceProtocol + "_" + 1, sourceId + "_" + 1, 0, 0, sources[1]));
+
+        PipelineIR pipeline = ConfigCompiler.compileSources(sourcesWithMetadata, false);
+
+        assertFalse("should generate a hash", pipeline.uniqueHash().isEmpty());
+        assertEquals("should provide the original source", String.join("\n", sources),
+                pipeline.getOriginalSource());
+        verifyApplyingProtocolAndIdMetadata(pipeline);
+    }
+
+    private void verifyApplyingProtocolAndIdMetadata(PipelineIR pipeline) {
+        for (PluginVertex pv : pipeline.getPluginVertices()) {
+            String nameIdx = last(pv.getPluginDefinition().getName().split("_"));
+            String sourceProtocolIdx = last(pv.getSourceWithMetadata().getProtocol().split("_"));
+            String sourceIdIdx = last(pv.getSourceWithMetadata().getId().split("_"));
+            assertEquals("should apply the correct source metadata to protocol", nameIdx, sourceProtocolIdx);
+            assertEquals("should apply the correct source metadata to id", nameIdx, sourceIdIdx);
+        }
+    }
+
+    private static String last(String[] s) {
+        return s[s.length - 1];
+    }
 }
diff --git a/x-pack/spec/monitoring/inputs/metrics/state_event/lir_serializer_spec.rb b/x-pack/spec/monitoring/inputs/metrics/state_event/lir_serializer_spec.rb
index b4c2c64dd53..d798142133c 100644
--- a/x-pack/spec/monitoring/inputs/metrics/state_event/lir_serializer_spec.rb
+++ b/x-pack/spec/monitoring/inputs/metrics/state_event/lir_serializer_spec.rb
@@ -22,7 +22,7 @@
   end
 
   let(:lir_pipeline) do
-    ::LogStash::Compiler.compile_sources(config_source_with_metadata, LogStash::SETTINGS)
+    ::LogStash::Compiler.compile_sources(config_source_with_metadata, true)
   end
 
   describe "#serialize" do
