diff --git a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
index 8529189fa06..feb1e6f7fa9 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/BiValues.java
@@ -1,21 +1,19 @@
 package org.logstash.bivalues;
 
-import org.logstash.Timestamp;
-import org.logstash.ext.JrubyTimestampExtLibrary.RubyTimestamp;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.HashMap;
 import org.jruby.RubyBignum;
 import org.jruby.RubyBoolean;
 import org.jruby.RubyFloat;
 import org.jruby.RubyInteger;
-import org.jruby.RubyNil;
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
 import org.jruby.ext.bigdecimal.RubyBigDecimal;
 import org.jruby.java.proxies.JavaProxy;
 import org.jruby.runtime.builtin.IRubyObject;
-
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.util.HashMap;
+import org.logstash.Timestamp;
+import org.logstash.ext.JrubyTimestampExtLibrary.RubyTimestamp;
 
 public enum BiValues {
     ORG_LOGSTASH_EXT_JRUBYTIMESTAMPEXTLIBRARY$RUBYTIMESTAMP(BiValueType.TIMESTAMP),
@@ -69,6 +67,8 @@ private static HashMap<String, String> initCache() {
         return hm;
     }
 
+    private static final NullBiValue NULL_BI_VALUE = NullBiValue.newNullBiValue();
+
     private final BiValueType biValueType;
 
     BiValues(BiValueType biValueType) {
@@ -82,8 +82,8 @@ private BiValue build(Object value) {
     }
 
     public static BiValue newBiValue(Object o) {
-        if (o == null){
-            return NULL.build(null);
+        if (o == null) {
+            return NULL_BI_VALUE;
         }
         BiValues bvs = valueOf(fetchName(o));
         return bvs.build(o);
@@ -174,11 +174,8 @@ BiValue build(Object value) {
             }
         },
         NULL {
-            BiValue build(Object value) {
-                if (value instanceof IRubyObject) {
-                    return new NullBiValue((RubyNil) value);
-                }
-                return NullBiValue.newNullBiValue();
+            NullBiValue build(Object value) {
+                return NULL_BI_VALUE;
             }
         },
         BIGINT {
diff --git a/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java b/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
index 4a5f4e53b77..c2c4522673f 100644
--- a/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
+++ b/logstash-core/src/main/java/org/logstash/bivalues/NullBiValue.java
@@ -1,26 +1,27 @@
 package org.logstash.bivalues;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import java.io.ObjectStreamException;
 import org.jruby.Ruby;
 import org.jruby.RubyNil;
 
-import java.io.ObjectStreamException;
+public final class NullBiValue extends BiValueCommon<RubyNil, Object>
+    implements BiValue<RubyNil, Object> {
+
+    private static final NullBiValue INSTANCE =
+        new NullBiValue((RubyNil) Ruby.getGlobalRuntime().getNil());
+
+    private static final Object WRITE_PROXY = newProxy(INSTANCE);
 
-public class NullBiValue extends BiValueCommon<RubyNil, Object> implements BiValue<RubyNil, Object> {
     public static NullBiValue newNullBiValue() {
-        return new NullBiValue();
+        return INSTANCE;
     }
 
-    public NullBiValue(RubyNil rubyValue) {
+    private NullBiValue(final RubyNil rubyValue) {
         this.rubyValue = rubyValue;
         javaValue = null;
     }
 
-    private NullBiValue() {
-        rubyValue = null;
-        javaValue = null;
-    }
-
     @JsonValue
     @Override
     public Object javaValue() {
@@ -32,14 +33,19 @@ public boolean hasJavaValue() {
         return true;
     }
 
-    protected void addRuby(Ruby runtime) {
-        rubyValue = (RubyNil) runtime.getNil();
+    @Override
+    public boolean hasRubyValue() {
+        return true;
     }
 
+    @Override
+    protected void addRuby(Ruby runtime) {}
+
+    @Override
     protected void addJava() {}
 
     // Called when object is to be serialized on a stream to allow the object to substitute a proxy for itself.
     private Object writeReplace() throws ObjectStreamException {
-        return newProxy(this);
+        return WRITE_PROXY;
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/TestBase.java b/logstash-core/src/test/java/org/logstash/TestBase.java
index 489c044a4ea..d22f790f76f 100644
--- a/logstash-core/src/test/java/org/logstash/TestBase.java
+++ b/logstash-core/src/test/java/org/logstash/TestBase.java
@@ -1,22 +1,17 @@
 package org.logstash;
 
-import org.logstash.ext.JrubyTimestampExtLibrary;
-import org.jruby.CompatVersion;
 import org.jruby.Ruby;
-import org.jruby.RubyInstanceConfig;
 import org.jruby.ext.bigdecimal.RubyBigDecimal;
 import org.junit.Before;
+import org.logstash.ext.JrubyTimestampExtLibrary;
 
 public abstract class TestBase {
     private static boolean setupDone = false;
-    public static Ruby ruby;
+    public static final Ruby ruby = Ruby.getGlobalRuntime();
 
     @Before
     public void setUp() throws Exception {
         if (setupDone) return;
-
-        RubyInstanceConfig config = new RubyInstanceConfig();
-        ruby = Ruby.newInstance(config);
         RubyBigDecimal.createBigDecimal(ruby); // we need to do 'require "bigdecimal"'
         JrubyTimestampExtLibrary.createTimestamp(ruby);
         setupDone = true;
diff --git a/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java b/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
index c4a96e2905d..2b7d3d7fd01 100644
--- a/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
+++ b/logstash-core/src/test/java/org/logstash/bivalues/BiValueTest.java
@@ -1,25 +1,23 @@
 package org.logstash.bivalues;
 
-import org.logstash.TestBase;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.math.BigDecimal;
+import java.math.BigInteger;
 import org.joda.time.DateTime;
 import org.jruby.RubyBignum;
 import org.jruby.RubyBoolean;
 import org.jruby.RubyFixnum;
 import org.jruby.RubyFloat;
 import org.jruby.RubyInteger;
-import org.jruby.RubyNil;
 import org.jruby.RubyString;
 import org.jruby.RubySymbol;
 import org.jruby.RubyTime;
 import org.jruby.ext.bigdecimal.RubyBigDecimal;
 import org.junit.Test;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.math.BigDecimal;
-import java.math.BigInteger;
+import org.logstash.TestBase;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -143,18 +141,10 @@ public void testBooleanBiValueFromJava() {
         assertEquals(v, subject.rubyValue(ruby));
     }
 
-    @Test
-    public void testNullBiValueFromRuby() {
-        NullBiValue subject = new NullBiValue((RubyNil) ruby.getNil());
-        assertTrue(subject.hasRubyValue());
-        assertTrue(subject.hasJavaValue());
-        assertEquals(null, subject.javaValue());
-    }
-
     @Test
     public void testNullBiValueFromJava() {
         NullBiValue subject = NullBiValue.newNullBiValue();
-        assertFalse(subject.hasRubyValue());
+        assertTrue(subject.hasRubyValue());
         assertTrue(subject.hasJavaValue());
         assertEquals(ruby.getNil(), subject.rubyValue(ruby));
     }
@@ -212,4 +202,4 @@ public void testSerialization() throws Exception {
         assertEquals(original, copy);
         assertFalse(copy.hasRubyValue());
     }
-}
\ No newline at end of file
+}
