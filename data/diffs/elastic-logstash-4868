diff --git a/.gitignore b/.gitignore
index 9360eb39bb9..d3f7954e9dd 100644
--- a/.gitignore
+++ b/.gitignore
@@ -28,3 +28,4 @@ rspec.xml
 .vendor
 integration_run
 .mvn/
+vagrant/.vagrant/
diff --git a/rakelib/vm.rake b/rakelib/vm.rake
new file mode 100644
index 00000000000..a2aa7ba3d90
--- /dev/null
+++ b/rakelib/vm.rake
@@ -0,0 +1,31 @@
+# we need to call exit explicity  in order to set the proper exit code, otherwise
+# most common CI systems can not know whats up with this tests.
+
+namespace "test" do
+
+  namespace "vm" do
+
+    task "setup" do
+      ENV['VAGRANT_CWD'] = File.join(File.dirname(__FILE__), "..", "vagrant")
+    end
+
+    desc "vagrant up"
+    task "up" => ["setup"] do
+      system("vagrant up")
+    end
+
+    desc "run test in the vagrant machines"
+    task "run" => ["setup"] do
+      system("vagrant ssh logstash_test_ubuntu -c '#{test_cmd}'")
+    end
+    desc "vagrant teardown"
+    task "down" => ["setup"] do
+      system("vagrant down")
+    end
+
+    def test_cmd
+      "cd logstash; rake test:core"
+    end
+  end
+end
+
diff --git a/spec/integration/logstash_spec.rb b/spec/integration/logstash_spec.rb
new file mode 100644
index 00000000000..5d68cc5b2a1
--- /dev/null
+++ b/spec/integration/logstash_spec.rb
@@ -0,0 +1,11 @@
+# Encoding: utf-8
+require_relative "spec_helper"
+require_relative "../../logstash-core/lib/logstash/version"
+
+describe "bin/logstash" do
+  it "returns the logstash version" do
+    result = command("bin/logstash --version")
+    expect(result.exit_status).to eq(0)
+    expect(result.stdout).to match(/^logstash\s#{LOGSTASH_VERSION}/)
+  end
+end
diff --git a/spec/integration/pluginmanager/plugin_install_spec.rb b/spec/integration/pluginmanager/plugin_install_spec.rb
new file mode 100644
index 00000000000..313fd1b1f73
--- /dev/null
+++ b/spec/integration/pluginmanager/plugin_install_spec.rb
@@ -0,0 +1,41 @@
+# Encoding: utf-8
+require_relative "../spec_helper"
+require "fileutils"
+
+context "bin/plugin install" do
+  context "with a local gem" do
+    let(:gem_name) { "logstash-input-wmi" }
+    let(:local_gem) { gem_fetch(gem_name) }
+
+    it "install the gem succesfully" do
+      result = command("bin/plugin install --no-verify #{local_gem}")
+      expect(result.exit_status).to eq(0)
+      expect(result.stdout).to match(/^Installing\s#{gem_name}\nInstallation\ssuccessful$/)
+    end
+  end
+
+  context "when the plugin exist" do
+    let(:plugin_name) { "logstash-input-drupal_dblog" }
+
+    it "sucessfully install" do
+      result = command("bin/plugin install #{plugin_name}")
+      expect(result.exit_status).to eq(0)
+      expect(result.stdout).to match(/^Validating\s#{plugin_name}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+    end
+
+    it "allow to install a specific version" do
+      version = "2.0.2"
+      result = command("bin/plugin install --version 2.0.2 #{plugin_name}")
+      expect(result.exit_status).to eq(0)
+      expect(result.stdout).to match(/^Validating\s#{plugin_name}-#{version}\nInstalling\s#{plugin_name}\nInstallation\ssuccessful$/)
+    end
+  end
+
+  context "when the plugin doesn't exist" do
+    it "fails to install" do
+      result = command("bin/plugin install --no-verify logstash-output-impossible-plugin")
+      expect(result.exit_status).to eq(1)
+      expect(result.stderr).to match(/Installation Aborted, message: Could not find gem/)
+    end
+  end
+end
diff --git a/spec/integration/pluginmanager/plugin_list_spec.rb b/spec/integration/pluginmanager/plugin_list_spec.rb
new file mode 100644
index 00000000000..a8a2b19e453
--- /dev/null
+++ b/spec/integration/pluginmanager/plugin_list_spec.rb
@@ -0,0 +1,41 @@
+# Encoding: utf-8
+require_relative "../spec_helper"
+
+describe "bin/plugin list" do
+  context "without a specific plugin" do
+    it "display a list of plugins" do
+      result = command("bin/plugin list")
+      expect(result.exit_status).to eq(0)
+      expect(result.stdout.split("\n").size).to be > 1
+    end
+
+    it "display a list of installed plugins" do
+      result = command("bin/plugin list --installed")
+      expect(result.exit_status).to eq(0)
+      expect(result.stdout.split("\n").size).to be > 1
+    end
+
+    it "list the plugins with their versions" do
+      result = command("bin/plugin list --verbose")
+      result.stdout.split("\n").each do |plugin|
+        expect(plugin).to match(/^logstash-\w+-\w+\s\(\d+\.\d+.\d+\)/)
+      end
+      expect(result.exit_status).to eq(0)
+    end
+  end
+
+  context "with a specific plugin" do
+    let(:plugin_name) { "logstash-input-stdin" }
+    it "list the plugin and display the plugin name" do
+      result = command("bin/plugin list #{plugin_name}")
+      expect(result.stdout).to match(/^#{plugin_name}$/)
+      expect(result.exit_status).to eq(0)
+    end
+
+    it "list the plugin with his version" do
+      result = command("bin/plugin list --verbose #{plugin_name}")
+      expect(result.stdout).to match(/^#{plugin_name} \(\d+\.\d+.\d+\)/)
+      expect(result.exit_status).to eq(0)
+    end
+  end
+end
diff --git a/spec/integration/pluginmanager/plugin_uninstall_spec.rb b/spec/integration/pluginmanager/plugin_uninstall_spec.rb
new file mode 100644
index 00000000000..87f2fd747e2
--- /dev/null
+++ b/spec/integration/pluginmanager/plugin_uninstall_spec.rb
@@ -0,0 +1,24 @@
+# Encoding: utf-8
+require_relative "../spec_helper"
+
+describe "bin/plugin uninstall" do
+  context "when the plugin isn't installed" do
+    it "fails to uninstall it" do
+      result = command("bin/plugin uninstall logstash-filter-cidr")
+      expect(result.stderr).to match(/ERROR: Uninstall Aborted, message: This plugin has not been previously installed, aborting/)
+      expect(result.exit_status).to eq(1)
+    end
+  end
+
+  context "when the plugin is installed" do
+      it "succesfully uninstall it" do
+      # make sure we have the plugin installed.
+      command("bin/plugin install logstash-filter-ruby")
+
+      result = command("bin/plugin uninstall logstash-filter-ruby")
+
+      expect(result.stdout).to match(/^Uninstalling logstash-filter-ruby/)
+      expect(result.exit_status).to eq(0)
+    end
+  end
+end
diff --git a/spec/integration/pluginmanager/plugin_update_spec.rb b/spec/integration/pluginmanager/plugin_update_spec.rb
new file mode 100644
index 00000000000..d8b291739cc
--- /dev/null
+++ b/spec/integration/pluginmanager/plugin_update_spec.rb
@@ -0,0 +1,32 @@
+# Encoding: utf-8
+require_relative "../spec_helper"
+
+describe "update" do
+  let(:plugin_name) { "logstash-input-stdin" }
+  let(:previous_version) { "2.0.1" }
+
+  before do
+    command("bin/plugin install --version #{previous_version} #{plugin_name}")
+    cmd = command("bin/plugin list --verbose #{plugin_name}")
+    expect(cmd.stdout).to match(/#{plugin_name} \(#{previous_version}\)/)
+  end
+
+  context "update a specific plugin" do
+    subject { command("bin/plugin update #{plugin_name}") }
+
+    it "has executed succesfully" do
+      expect(subject.exit_status).to eq(0)
+      expect(subject.stdout).to match(/Updating #{plugin_name}/)
+    end
+  end
+
+  context "update all the plugins" do
+    subject { command("bin/plugin update") }
+
+    it "has executed succesfully" do
+      expect(subject.exit_status).to eq(0)
+      cmd = command("bin/plugin list --verbose #{plugin_name}").stdout
+      expect(cmd).to match(/logstash-input-stdin \(#{LogStashTestHelpers.latest_version(plugin_name)}\)/)
+    end
+  end
+end
diff --git a/spec/integration/spec_helper.rb b/spec/integration/spec_helper.rb
new file mode 100644
index 00000000000..12c1133d6a3
--- /dev/null
+++ b/spec/integration/spec_helper.rb
@@ -0,0 +1,14 @@
+# encoding: utf-8
+require_relative "support/integration_test_helpers"
+require "fileutils"
+
+puts "[integration_spec] configure environment"
+
+LOGSTASH_TEST_PATH = File.expand_path(File.join(File.dirname(__FILE__), "..", ".."))
+
+puts "[integration_spec] Running the test in #{LOGSTASH_TEST_PATH}"
+puts "[integration_spec] Running specs"
+
+RSpec.configure do |config|
+  config.order = "random"
+end
diff --git a/spec/integration/support/integration_test_helpers.rb b/spec/integration/support/integration_test_helpers.rb
new file mode 100644
index 00000000000..74da9dec08e
--- /dev/null
+++ b/spec/integration/support/integration_test_helpers.rb
@@ -0,0 +1,68 @@
+# encoding: utf-8
+require "json"
+require "open3"
+require "open-uri"
+require "stud/temporary"
+require "fileutils"
+require "bundler"
+require "gems"
+
+class CommandResponse
+  attr_reader :stdin, :stdout, :stderr, :exit_status
+
+  def initialize(cmd, stdin, stdout, stderr, exit_status)
+    @stdin = stdin
+    @stdout = stdout
+    @stderr = stderr
+    @exit_status = exit_status
+    @cmd = cmd
+  end
+
+  def to_debug
+    "DEBUG: stdout: #{stdout}, stderr: #{stderr}, exit_status: #{exit_status}"
+  end
+
+  def to_s
+    @cmd
+  end
+end
+
+def command(cmd, path = nil)
+  # http://bundler.io/v1.3/man/bundle-exec.1.html
+  # see shelling out.
+  #
+  # Since most of the integration test are environment destructive
+  # its better to run them in a cloned directory.
+  path = LOGSTASH_TEST_PATH if path == nil
+
+  Bundler.with_clean_env do
+    Dir.chdir(path) do
+      Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
+          CommandResponse.new(cmd,
+            stdin,
+            stdout.read.chomp,
+            stderr.read.chomp,
+            wait_thr.value.exitstatus)
+      end
+    end
+  end
+end
+
+def gem_fetch(name)
+  tmp = Stud::Temporary.directory
+  FileUtils.mkdir_p(tmp)
+
+  c = command("gem fetch #{name}", tmp)
+
+  if c.exit_status == 1
+    raise RuntimeError, "Can't fetch gem #{name}"
+  end
+
+  return Dir.glob(File.join(tmp, "#{name}*.gem")).first
+end
+
+module LogStashTestHelpers
+  def self.latest_version(name)
+    Gems.versions(name).first["number"] 
+  end
+end
diff --git a/spec/bootstrap/bundler_spec.rb b/spec/unit/bundler_spec.rb
similarity index 100%
rename from spec/bootstrap/bundler_spec.rb
rename to spec/unit/bundler_spec.rb
diff --git a/spec/pluginmanager/gemfile_spec.rb b/spec/unit/pluginmanager/gemfile_spec.rb
similarity index 100%
rename from spec/pluginmanager/gemfile_spec.rb
rename to spec/unit/pluginmanager/gemfile_spec.rb
diff --git a/spec/plugin_manager/install_spec.rb b/spec/unit/pluginmanager/install_spec.rb
similarity index 100%
rename from spec/plugin_manager/install_spec.rb
rename to spec/unit/pluginmanager/install_spec.rb
diff --git a/spec/plugin_manager/update_spec.rb b/spec/unit/pluginmanager/update_spec.rb
similarity index 100%
rename from spec/plugin_manager/update_spec.rb
rename to spec/unit/pluginmanager/update_spec.rb
diff --git a/spec/plugin_manager/util_spec.rb b/spec/unit/pluginmanager/util_spec.rb
similarity index 100%
rename from spec/plugin_manager/util_spec.rb
rename to spec/unit/pluginmanager/util_spec.rb
diff --git a/spec/util/compress_spec.rb b/spec/unit/util/compress_spec.rb
similarity index 100%
rename from spec/util/compress_spec.rb
rename to spec/unit/util/compress_spec.rb
diff --git a/spec/util/retryable_spec.rb b/spec/unit/util/retryable_spec.rb
similarity index 100%
rename from spec/util/retryable_spec.rb
rename to spec/unit/util/retryable_spec.rb
diff --git a/vagrant/.rspec b/vagrant/.rspec
new file mode 100644
index 00000000000..16f9cdb0135
--- /dev/null
+++ b/vagrant/.rspec
@@ -0,0 +1,2 @@
+--color
+--format documentation
diff --git a/vagrant/Rakefile b/vagrant/Rakefile
new file mode 100644
index 00000000000..ea9e1343030
--- /dev/null
+++ b/vagrant/Rakefile
@@ -0,0 +1,47 @@
+require 'rake'
+require 'rspec'
+require 'rspec/core/rake_task'
+require 'acceptance_spec/spec_helper'
+
+task :spec    => 'spec:all'
+task :default => :spec
+
+namespace :spec do
+  targets = []
+  Dir.glob('./serverspec_spec/*').each do |dir|
+    next unless File.directory?(dir)
+    target = File.basename(dir)
+    target = "_#{target}" if target == "default"
+    targets << target
+  end
+
+  task :all     => targets
+  task :default => :all
+
+  targets.each do |target|
+    original_target = target == "_default" ? target[1..-1] : target
+    desc "Run serverspec tests to #{original_target}"
+    RSpec::Core::RakeTask.new(target.to_sym) do |t|
+      ENV['TARGET_HOST'] = original_target
+      t.pattern = "serverspec_spec/#{original_target}/*_spec.rb"
+    end
+  end
+end
+
+
+namespace :test do
+  desc "Run acceptance test"
+  task :acceptance, :port do |t, args|
+    require "rspec/core/runner"
+    require "rspec"
+    port  = args[:port] || 2222
+    puts "[Acceptance specs] running on port = #{port}"
+    IntegrationSpecHelper.configure do |config|
+      config.username = "vagrant"
+      config.password = "vagrant"
+      config.host     = "127.0.0.1"
+      config.port     = port
+    end
+    exit(RSpec::Core::Runner.run([Rake::FileList["acceptance_spec/**/*_spec.rb"]]))
+  end
+end
diff --git a/vagrant/Vagrantfile b/vagrant/Vagrantfile
new file mode 100644
index 00000000000..294625364e0
--- /dev/null
+++ b/vagrant/Vagrantfile
@@ -0,0 +1,48 @@
+# -*- mode: ruby -*-
+# vi: set ft=ruby :
+
+Vagrant.configure(2) do |config|
+
+  config.vm.define "logstash_test_ubuntu", primary: true do |ls|
+    ls.vm.box = "ubuntu/trusty64"
+
+    ls.vm.provider "virtualbox" do |v|
+      v.memory = 4096
+      v.cpus = 4
+    end
+
+    ls.vm.provision :shell do |sh|
+      sh.path = "sys/ubuntu/bootstrap.sh"
+      sh.privileged = true
+    end
+
+    ls.vm.provision :shell do |sh|
+      sh.path = "sys/ubuntu/user_bootstrap.sh"
+      sh.privileged = false
+    end
+
+    ls.vm.network "forwarded_port", guest: 9600, host: 9600
+  end
+
+  config.vm.define "logstash_test_centos" do |ls|
+    ls.vm.box = "elastic/centos-6-x86_64"
+
+    ls.vm.provider "virtualbox" do |v|
+      v.memory = 4096
+      v.cpus = 4
+    end
+
+    ls.vm.provision :shell do |sh|
+      sh.path = "sys/centos/bootstrap.sh"
+      sh.privileged = true
+    end
+
+    ls.vm.provision :shell do |sh|
+      sh.path = "sys/centos/user_bootstrap.sh"
+      sh.privileged = false
+    end
+
+    ls.vm.network "forwarded_port", guest: 9600, host: 9601
+  end
+
+end
diff --git a/vagrant/acceptance_spec/lib/sample_spec.rb b/vagrant/acceptance_spec/lib/sample_spec.rb
new file mode 100644
index 00000000000..d1179bd0375
--- /dev/null
+++ b/vagrant/acceptance_spec/lib/sample_spec.rb
@@ -0,0 +1,17 @@
+require_relative '../spec_helper'
+
+describe "plugin manager" do
+
+  describe "install" do
+    context "when the plugin exist" do
+
+      let(:plugin) { "logstash-input-stdin" }
+
+      it "does a successful installation" do
+        cmd = command("logstash/bin/plugin install #{plugin}")
+        expect(cmd[:exit_status]).to eq(0)
+        expect(cmd[:stdout]).to match(/^Validating\s#{plugin}\nInstalling\s#{plugin}\nInstallation\ssuccessful$/)
+      end
+    end
+  end
+end
diff --git a/vagrant/acceptance_spec/spec_helper.rb b/vagrant/acceptance_spec/spec_helper.rb
new file mode 100644
index 00000000000..174b464237e
--- /dev/null
+++ b/vagrant/acceptance_spec/spec_helper.rb
@@ -0,0 +1,50 @@
+require 'net/ssh'
+
+module IntegrationSpecHelper
+  class Configuration
+    attr_accessor :username, :password, :host, :port
+    def initialize
+      @username = "vagrant"
+      @host     = "127.0.0.1"
+      @password = ""
+      @port     = 22
+    end
+  end
+end
+
+module IntegrationSpecHelper
+
+  class << self
+    attr_accessor :configuration
+  end
+
+  def self.configure
+    self.configuration ||= Configuration.new
+    yield(configuration)
+  end
+
+  def command(cmd)
+    host     = config.host
+    username = config.username
+    stdout, stderr, exit_status = "", "", -1
+    Net::SSH.start(host, username, {:password => config.password, :port => config.port}) do |ssh|
+      ssh.exec!(cmd) do |channel, stream, data|
+        stdout << data if stream == :stdout
+        stderr << data if stream == :stderr
+        channel.on_request("exit-status") do |ch, _data|
+          exit_status = _data.read_long
+        end
+      end
+    end
+    { :stdout => stdout, :stderr => stderr, :exit_status => exit_status }
+  end
+
+  private
+  def config
+    IntegrationSpecHelper.configuration
+  end
+end
+
+RSpec.configure do |c|
+  c.include IntegrationSpecHelper
+end
diff --git a/vagrant/serverspec_spec/logstash_test_ubuntu/sample_spec.rb b/vagrant/serverspec_spec/logstash_test_ubuntu/sample_spec.rb
new file mode 100644
index 00000000000..ef1506d9fcb
--- /dev/null
+++ b/vagrant/serverspec_spec/logstash_test_ubuntu/sample_spec.rb
@@ -0,0 +1,39 @@
+require_relative '../spec_helper'
+
+describe "test" do
+  describe command('ls /foo') do
+    its(:stdout) { should match /No such file or directory/ }
+  end
+end
+
+describe "package" do
+  describe package('logstash') do
+    it { should be_installed }
+  end
+end
+
+describe "logstash command" do
+
+  describe command("/opt/logstash/bin/logstash --version") do
+    its(:stdout) { should match(/^logstash 3.0.0.dev$/) }
+  end
+end
+
+describe "plugin manager" do
+
+  describe "install" do
+    context "when the plugin exist" do
+      describe command("/opt/logstash/bin/plugin install logstash-input-drupal_dblog") do
+        its(:stdout) { should match(/^Validating\slogstash-input-drupal_dblog\nInstalling\slogstash-input-drupal_dblog\nInstallation\ssuccessful$/) }
+        its(:exit_status) { should eq 0 }
+      end
+    end
+  end
+
+  describe "update" do
+    xit "should update all plugins" do
+      command("logstash/bin/plugin update")
+      expect(true).to eq(true)
+    end
+  end
+end
diff --git a/vagrant/serverspec_spec/spec_helper.rb b/vagrant/serverspec_spec/spec_helper.rb
new file mode 100644
index 00000000000..69bf4017a7e
--- /dev/null
+++ b/vagrant/serverspec_spec/spec_helper.rb
@@ -0,0 +1,32 @@
+require 'serverspec'
+require 'net/ssh'
+require 'tempfile'
+
+set :backend, :ssh
+
+#set :sudo_password, ENV['SUDO_PASSWORD']
+set :sudo_password, 'vagrant'
+host = ENV['TARGET_HOST']
+
+`vagrant up #{host}`
+
+config = Tempfile.new('', Dir.tmpdir)
+config.write(`vagrant ssh-config #{host}`)
+config.close
+
+options = Net::SSH::Config.for(host, [config.path])
+
+options[:user] ||= Etc.getlogin
+
+set :host,        options[:host_name] || host
+set :ssh_options, options
+
+# Disable sudo
+# set :disable_sudo, true
+
+
+# Set environment variables
+# set :env, :LANG => 'C', :LC_MESSAGES => 'C' 
+
+# Set PATH
+# set :path, '/sbin:/usr/local/sbin:$PATH'
diff --git a/vagrant/sys/centos/bootstrap.sh b/vagrant/sys/centos/bootstrap.sh
new file mode 100644
index 00000000000..c5d275a07fc
--- /dev/null
+++ b/vagrant/sys/centos/bootstrap.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env bash
+
+yum update
+yum install git
+yum install -y java-1.8.0-openjdk-devel.x86_64
diff --git a/vagrant/sys/centos/user_bootstrap.sh b/vagrant/sys/centos/user_bootstrap.sh
new file mode 100644
index 00000000000..78be9a3c7b4
--- /dev/null
+++ b/vagrant/sys/centos/user_bootstrap.sh
@@ -0,0 +1,28 @@
+#!/usr/bin/env bash
+
+##
+# Installing rbenv
+##
+git clone git://github.com/sstephenson/rbenv.git .rbenv
+echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
+echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
+
+git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
+echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile
+source ~/.bash_profile
+
+
+##
+# install logstash from source code
+##
+git clone https://github.com/elastic/logstash.git
+
+##
+# install jruby-1.7.24 and make it global
+##
+rbenv install jruby-1.7.24
+rbenv global  jruby-1.7.24
+
+cd logstash
+rake bootstrap
+rake test:install-core
diff --git a/vagrant/sys/ubuntu/bootstrap.sh b/vagrant/sys/ubuntu/bootstrap.sh
new file mode 100644
index 00000000000..9f838d99574
--- /dev/null
+++ b/vagrant/sys/ubuntu/bootstrap.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+
+apt-get update
+
+apt-get install -y openjdk-7-jdk git g++
+apt-get install -y git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev
+
+##
+# Install logstash from a package repo
+##
+#wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | apt-key add -
+#echo "deb http://packages.elastic.co/logstash/2.2/debian stable main" | tee -a /etc/apt/sources.list
+#apt-get update
+
+##
+# Install logstash manually from a URL
+##
+BRANCH=${LOGSTASH_BRANCH:-'master'}
+BUILD_URL='https://s3-eu-west-1.amazonaws.com/build-eu.elasticsearch.org/logstash'
+URL="$BUILD_URL/$BRANCH/nightly/JDK8/logstash-latest-SNAPSHOT.deb"
+wget $URL
+dpkg -i "$HOME/logstash-latest-SNAPSHOT.deb"
diff --git a/vagrant/sys/ubuntu/user_bootstrap.sh b/vagrant/sys/ubuntu/user_bootstrap.sh
new file mode 100644
index 00000000000..78be9a3c7b4
--- /dev/null
+++ b/vagrant/sys/ubuntu/user_bootstrap.sh
@@ -0,0 +1,28 @@
+#!/usr/bin/env bash
+
+##
+# Installing rbenv
+##
+git clone git://github.com/sstephenson/rbenv.git .rbenv
+echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
+echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
+
+git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
+echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile
+source ~/.bash_profile
+
+
+##
+# install logstash from source code
+##
+git clone https://github.com/elastic/logstash.git
+
+##
+# install jruby-1.7.24 and make it global
+##
+rbenv install jruby-1.7.24
+rbenv global  jruby-1.7.24
+
+cd logstash
+rake bootstrap
+rake test:install-core
