diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index 0ae9ad55036..26f0fa1cdfe 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -262,11 +262,15 @@ def namespace_lookup(type, name)
     # @param name [String] plugin name
     # @return [Boolean] true if klass is a valid plugin for name
     def is_a_plugin?(klass, name)
-      klass.ancestors.include?(LogStash::Plugin) && klass.respond_to?(:config_name) && klass.config_name == name
+      (klass.class == Java::JavaClass && klass.simple_name.downcase == name) ||
+      (klass.ancestors.include?(LogStash::Plugin) && klass.respond_to?(:config_name) && klass.config_name == name)
     end
 
     def add_plugin(type, name, klass)
-      if !exists?(type, name)
+
+      if klass.respond_to?("javaClass", true)
+        @registry[key_for(type, name)] = PluginSpecification.new(type, name, klass.javaClass)
+      elsif !exists?(type, name)
         specification_klass = type == :universal ? UniversalPluginSpecification : PluginSpecification
         @registry[key_for(type, name)] = specification_klass.new(type, name, klass)
       else
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
index da9e2444842..7b80d81c90a 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/CompiledPipeline.java
@@ -128,23 +128,10 @@ private Map<String, AbstractOutputDelegatorExt> setupOutputs() {
         outs.forEach(v -> {
             final PluginDefinition def = v.getPluginDefinition();
             final SourceWithMetadata source = v.getSourceWithMetadata();
-            final Class<Output> cls = PluginRegistry.getOutputClass(def.getName());
-            if (cls != null) {
-                Output output;
-                try {
-                    final Constructor<Output> ctor = cls.getConstructor(Configuration.class, Context.class);
-                    output = ctor.newInstance(new Configuration(Collections.EMPTY_MAP /* def.getArguments()*/), new Context());
-                } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
-                    throw new IllegalStateException(ex);
-                }
-                res.put(v.getId(), pluginFactory.buildJavaOutput(def.getName(), source.getLine(),
-                        source.getColumn(), output, convertArgs(def)));
-            } else {
-                res.put(v.getId(), pluginFactory.buildOutput(
-                        RubyUtil.RUBY.newString(def.getName()), RubyUtil.RUBY.newFixnum(source.getLine()),
-                        RubyUtil.RUBY.newFixnum(source.getColumn()), convertArgs(def)
-                ));
-            }
+            res.put(v.getId(), pluginFactory.buildOutput(
+                    RubyUtil.RUBY.newString(def.getName()), RubyUtil.RUBY.newFixnum(source.getLine()),
+                    RubyUtil.RUBY.newFixnum(source.getColumn()), convertArgs(def)
+            ));
         });
         return res;
     }
@@ -159,24 +146,10 @@ private Map<String, AbstractFilterDelegatorExt> setupFilters() {
         for (final PluginVertex vertex : filterPlugins) {
             final PluginDefinition def = vertex.getPluginDefinition();
             final SourceWithMetadata source = vertex.getSourceWithMetadata();
-            final Class<Filter> cls = PluginRegistry.getFilterClass(def.getName());
-            if (cls != null) {
-                Filter filter;
-                try {
-                    final Constructor<Filter> ctor = cls.getConstructor(Configuration.class, Context.class);
-                    filter = ctor.newInstance(new Configuration(Collections.EMPTY_MAP /* def.getArguments()*/), new Context());
-                } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
-                    throw new IllegalStateException(ex);
-                }
-                res.put(vertex.getId(), pluginFactory.buildJavaFilter(def.getName(), source.getLine(),
-                        source.getColumn(), filter, convertArgs(def)));
-
-            } else {
-                res.put(vertex.getId(), pluginFactory.buildFilter(
-                        RubyUtil.RUBY.newString(def.getName()), RubyUtil.RUBY.newFixnum(source.getLine()),
-                        RubyUtil.RUBY.newFixnum(source.getColumn()), convertArgs(def)
-                ));
-            }
+            res.put(vertex.getId(), pluginFactory.buildFilter(
+                    RubyUtil.RUBY.newString(def.getName()), RubyUtil.RUBY.newFixnum(source.getLine()),
+                    RubyUtil.RUBY.newFixnum(source.getColumn()), convertArgs(def)
+            ));
         }
         return res;
     }
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaOutputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaOutputDelegatorExt.java
index 03526578a19..6093e4ed9b6 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaOutputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/JavaOutputDelegatorExt.java
@@ -43,8 +43,8 @@ public static JavaOutputDelegatorExt create(final String configName, final Strin
         final Runnable closeAction, final Runnable registerAction) {
         final JavaOutputDelegatorExt instance =
             new JavaOutputDelegatorExt(RubyUtil.RUBY, RubyUtil.JAVA_OUTPUT_DELEGATOR_CLASS);
-        instance.initMetrics(id, metric);
         instance.configName = RubyUtil.RUBY.newString(configName);
+        instance.initMetrics(id, metric);
         instance.outputFunction = outputFunction;
         instance.closeAction = closeAction;
         instance.registerAction = registerAction;
@@ -56,8 +56,8 @@ public static JavaOutputDelegatorExt create(final String configName, final Strin
                                                 final Output output) {
         final JavaOutputDelegatorExt instance =
                 new JavaOutputDelegatorExt(RubyUtil.RUBY, RubyUtil.JAVA_OUTPUT_DELEGATOR_CLASS);
-        instance.initMetrics(id, metric);
         instance.configName = RubyUtil.RUBY.newString(configName);
+        instance.initMetrics(id, metric);
         instance.output = output;
         instance.outputFunction = instance::outputRubyEvents;
         instance.closeAction = instance::outputClose;
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
index ac9c4f8a184..7ea14e77f45 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/PluginFactory.java
@@ -4,11 +4,9 @@
 import org.jruby.RubyString;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.plugins.api.Configuration;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
-import org.logstash.plugins.api.Context;
-import org.logstash.plugins.api.Output;
-import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 /**
  * Factory that can instantiate Java plugins as well as Ruby plugins.
@@ -49,21 +47,11 @@ public AbstractOutputDelegatorExt buildOutput(final RubyString name, final RubyI
             return rubyFactory.buildOutput(name, line, column, args);
         }
 
-        @Override
-        public AbstractOutputDelegatorExt buildJavaOutput(String name, int line, int column, Output output, IRubyObject args) {
-            throw new NotImplementedException();
-        }
-
         @Override
         public AbstractFilterDelegatorExt buildFilter(final RubyString name, final RubyInteger line, final RubyInteger column, final IRubyObject args) {
             return rubyFactory.buildFilter(name, line, column, args);
         }
 
-        @Override
-        public AbstractFilterDelegatorExt buildJavaFilter(String name, int line, int column, Filter filter, IRubyObject args) {
-            throw new NotImplementedException();
-        }
-
         @Override
         public IRubyObject buildCodec(final RubyString name, final IRubyObject args) {
             return rubyFactory.buildCodec(name, args);
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
index b7fd2e46ff3..73edf0454cc 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/RubyIntegration.java
@@ -3,8 +3,6 @@
 import org.jruby.RubyInteger;
 import org.jruby.RubyString;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.logstash.plugins.api.Filter;
-import org.logstash.plugins.api.Output;
 
 /**
  * This class holds interfaces implemented by Ruby concrete classes.
@@ -26,12 +24,8 @@ IRubyObject buildInput(RubyString name, RubyInteger line, RubyInteger column,
         AbstractOutputDelegatorExt buildOutput(RubyString name, RubyInteger line, RubyInteger column,
             IRubyObject args);
 
-        AbstractOutputDelegatorExt buildJavaOutput(String name, int line, int column, Output output, IRubyObject args);
-
         AbstractFilterDelegatorExt buildFilter(RubyString name, RubyInteger line, RubyInteger column, IRubyObject args);
 
-        AbstractFilterDelegatorExt buildJavaFilter(String name, int line, int column, Filter filter, IRubyObject args);
-
         IRubyObject buildCodec(RubyString name, IRubyObject args);
     }
 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
index 3e0d0d75168..af7fd32608c 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
@@ -24,6 +24,8 @@
 import org.logstash.config.ir.compiler.RubyIntegration;
 import org.logstash.config.ir.graph.Vertex;
 import org.logstash.execution.ExecutionContextExt;
+import org.logstash.plugins.api.Configuration;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Output;
 import org.logstash.instrument.metrics.AbstractMetricExt;
@@ -31,8 +33,11 @@
 import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.NullMetricExt;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Locale;
@@ -59,18 +64,17 @@ public static final class Plugins extends RubyBasicObject
 
         @JRubyMethod(name = "filter_delegator", meta = true, required = 5)
         public static IRubyObject filterDelegator(final ThreadContext context,
-            final IRubyObject recv, final IRubyObject[] args) {
+                                                  final IRubyObject recv, final IRubyObject[] args) {
             final RubyHash arguments = (RubyHash) args[2];
             final IRubyObject filterInstance = args[1].callMethod(context, "new", arguments);
             final RubyString id = (RubyString) arguments.op_aref(context, ID_KEY);
             filterInstance.callMethod(
-                context, "metric=",
-                ((AbstractMetricExt) args[3]).namespace(context, id.intern19())
+                    context, "metric=",
+                    ((AbstractMetricExt) args[3]).namespace(context, id.intern19())
             );
             filterInstance.callMethod(context, "execution_context=", args[4]);
-            FilterDelegatorExt fd = (FilterDelegatorExt) new FilterDelegatorExt(context.runtime, RubyUtil.FILTER_DELEGATOR_CLASS)
+            return new FilterDelegatorExt(context.runtime, RubyUtil.FILTER_DELEGATOR_CLASS)
                     .initialize(context, filterInstance, id);
-            return fd;
         }
 
         public Plugins(final Ruby runtime, final RubyClass metaClass) {
@@ -79,17 +83,17 @@ public Plugins(final Ruby runtime, final RubyClass metaClass) {
 
         @JRubyMethod(required = 4)
         public PluginFactoryExt.Plugins initialize(final ThreadContext context,
-            final IRubyObject[] args) {
+                                                   final IRubyObject[] args) {
             return init(
-                (PipelineIR) args[0].toJava(PipelineIR.class),
-                (PluginFactoryExt.Metrics) args[1], (PluginFactoryExt.ExecutionContext) args[2],
-                (RubyClass) args[3]
+                    (PipelineIR) args[0].toJava(PipelineIR.class),
+                    (PluginFactoryExt.Metrics) args[1], (PluginFactoryExt.ExecutionContext) args[2],
+                    (RubyClass) args[3]
             );
         }
 
-        public PluginFactoryExt.Plugins init(final PipelineIR lir,
-            final PluginFactoryExt.Metrics metrics,
-            final PluginFactoryExt.ExecutionContext executionContext, final RubyClass filterClass) {
+        public PluginFactoryExt.Plugins init(final PipelineIR lir, final PluginFactoryExt.Metrics metrics,
+                                             final PluginFactoryExt.ExecutionContext executionContext,
+                                             final RubyClass filterClass) {
             this.lir = lir;
             this.metrics = metrics;
             this.executionContext = executionContext;
@@ -100,82 +104,66 @@ public PluginFactoryExt.Plugins init(final PipelineIR lir,
         @SuppressWarnings("unchecked")
         @Override
         public IRubyObject buildInput(final RubyString name, final RubyInteger line,
-            final RubyInteger column, final IRubyObject args) {
+                                      final RubyInteger column, final IRubyObject args) {
             return plugin(
-                RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.INPUT,
-                name.asJavaString(), line.getIntValue(), column.getIntValue(),
-                (Map<String, IRubyObject>) args
+                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.INPUT,
+                    name.asJavaString(), line.getIntValue(), column.getIntValue(),
+                    (Map<String, IRubyObject>) args
             );
         }
 
         @JRubyMethod(required = 4)
         public IRubyObject buildInput(final ThreadContext context, final IRubyObject[] args) {
             return buildInput(
-                (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(),
-                args[3]
+                    (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(),
+                    args[3]
             );
         }
 
         @SuppressWarnings("unchecked")
         @Override
         public AbstractOutputDelegatorExt buildOutput(final RubyString name, final RubyInteger line,
-            final RubyInteger column, final IRubyObject args) {
-            return (OutputDelegatorExt) plugin(
-                RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.OUTPUT,
-                name.asJavaString(), line.getIntValue(), column.getIntValue(),
-                (Map<String, IRubyObject>) args
+                                                      final RubyInteger column, final IRubyObject args) {
+            return (AbstractOutputDelegatorExt) plugin(
+                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.OUTPUT,
+                    name.asJavaString(), line.getIntValue(), column.getIntValue(),
+                    (Map<String, IRubyObject>) args
             );
         }
 
         @JRubyMethod(required = 4)
         public AbstractOutputDelegatorExt buildOutput(final ThreadContext context,
-            final IRubyObject[] args) {
+                                                      final IRubyObject[] args) {
             return buildOutput(
-                (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(), args[3]
+                    (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(), args[3]
             );
         }
 
-        @Override
-        public AbstractOutputDelegatorExt buildJavaOutput(final String name, final int line, final int column,
-                                                          Output output, final IRubyObject args) {
-            return (AbstractOutputDelegatorExt) plugin(
-                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.OUTPUT,
-                    name, line, column, (Map<String, IRubyObject>) args, true, output);
-        }
-
         @SuppressWarnings("unchecked")
         @Override
         public AbstractFilterDelegatorExt buildFilter(final RubyString name, final RubyInteger line,
                                                       final RubyInteger column, final IRubyObject args) {
             return (AbstractFilterDelegatorExt) plugin(
-                RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.FILTER,
-                name.asJavaString(), line.getIntValue(), column.getIntValue(),
-                (Map<String, IRubyObject>) args
+                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.FILTER,
+                    name.asJavaString(), line.getIntValue(), column.getIntValue(),
+                    (Map<String, IRubyObject>) args
             );
         }
 
         @JRubyMethod(required = 4)
         public IRubyObject buildFilter(final ThreadContext context, final IRubyObject[] args) {
             return buildFilter(
-                (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(),
-                args[3]
+                    (RubyString) args[0], args[1].convertToInteger(), args[2].convertToInteger(),
+                    args[3]
             );
         }
 
-        @Override
-        public AbstractFilterDelegatorExt buildJavaFilter(final String name, final int line, final int column,
-                                                          Filter filter, final IRubyObject args) {
-            return (AbstractFilterDelegatorExt) plugin(
-                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.FILTER,
-                    name, line, column, (Map<String, IRubyObject>) args, true, filter);
-        }
-
         @SuppressWarnings("unchecked")
         @Override
         public IRubyObject buildCodec(final RubyString name, final IRubyObject args) {
             return plugin(
-                RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.CODEC,
-                name.asJavaString(), 0, 0, (Map<String, IRubyObject>) args
+                    RubyUtil.RUBY.getCurrentContext(), PluginLookup.PluginType.CODEC,
+                    name.asJavaString(), 0, 0, (Map<String, IRubyObject>) args
             );
         }
 
@@ -188,76 +176,71 @@ public IRubyObject buildCodec(final ThreadContext context, final IRubyObject[] a
         @JRubyMethod(required = 4, optional = 1)
         public IRubyObject plugin(final ThreadContext context, final IRubyObject[] args) {
             return plugin(
-                context,
-                PluginLookup.PluginType.valueOf(args[0].asJavaString().toUpperCase(Locale.ENGLISH)),
-                args[1].asJavaString(),
-                args[2].convertToInteger().getIntValue(),
-                args[3].convertToInteger().getIntValue(),
-                args.length > 4 ? (Map<String, IRubyObject>) args[4] : new HashMap<>()
+                    context,
+                    PluginLookup.PluginType.valueOf(args[0].asJavaString().toUpperCase(Locale.ENGLISH)),
+                    args[1].asJavaString(),
+                    args[2].convertToInteger().getIntValue(),
+                    args[3].convertToInteger().getIntValue(),
+                    args.length > 4 ? (Map<String, IRubyObject>) args[4] : new HashMap<>()
             );
         }
 
-        private IRubyObject plugin(final ThreadContext context,
-                                   final PluginLookup.PluginType type, final String name, final int line, final int column,
-                                   final Map<String, IRubyObject> args) {
-            return plugin(context, type, name, line, column, args, false, null);
-        }
-
-        private IRubyObject plugin(final ThreadContext context,
-            final PluginLookup.PluginType type, final String name, final int line, final int column,
-            final Map<String, IRubyObject> args, boolean isJava, Object javaPlugin) {
+        @SuppressWarnings("unchecked")
+        private IRubyObject plugin(final ThreadContext context, final PluginLookup.PluginType type, final String name,
+                                   final int line, final int column, final Map<String, IRubyObject> args) {
             final String id;
             if (type == PluginLookup.PluginType.CODEC) {
                 id = UUID.randomUUID().toString();
             } else {
                 id = lir.getGraph().vertices().filter(
-                    v -> v.getSourceWithMetadata() != null
-                        && v.getSourceWithMetadata().getLine() == line
-                        && v.getSourceWithMetadata().getColumn() == column
+                        v -> v.getSourceWithMetadata() != null
+                                && v.getSourceWithMetadata().getLine() == line
+                                && v.getSourceWithMetadata().getColumn() == column
                 ).findFirst().map(Vertex::getId).orElse(null);
             }
             if (id == null) {
                 throw context.runtime.newRaiseException(
-                    RubyUtil.CONFIGURATION_ERROR_CLASS,
-                    String.format(
-                        "Could not determine ID for %s/%s", type.rubyLabel().asJavaString(), name
-                    )
+                        RubyUtil.CONFIGURATION_ERROR_CLASS,
+                        String.format(
+                                "Could not determine ID for %s/%s", type.rubyLabel().asJavaString(), name
+                        )
                 );
             }
             if (pluginsById.contains(id)) {
                 throw context.runtime.newRaiseException(
-                    RubyUtil.CONFIGURATION_ERROR_CLASS,
-                    String.format("Two plugins have the id '%s', please fix this conflict", id)
+                        RubyUtil.CONFIGURATION_ERROR_CLASS,
+                        String.format("Two plugins have the id '%s', please fix this conflict", id)
                 );
             }
             pluginsById.add(id);
             final AbstractNamespacedMetricExt typeScopedMetric = metrics.create(context, type.rubyLabel());
+            final PluginLookup.PluginClass pluginClass = PluginLookup.lookup(type, name);
+
+            if (pluginClass.language() == PluginLookup.PluginLanguage.RUBY) {
 
-            if (!isJava) {
-                final PluginLookup.PluginClass pluginClass = PluginLookup.lookup(type, name);
                 final Map<String, Object> newArgs = new HashMap<>(args);
                 newArgs.put("id", id);
                 final RubyClass klass = (RubyClass) pluginClass.klass();
                 final ExecutionContextExt executionCntx = executionContext.create(
-                    context, RubyUtil.RUBY.newString(id), klass.callMethod(context, "config_name")
+                        context, RubyUtil.RUBY.newString(id), klass.callMethod(context, "config_name")
                 );
                 final RubyHash rubyArgs = RubyHash.newHash(context.runtime);
                 rubyArgs.putAll(newArgs);
                 if (type == PluginLookup.PluginType.OUTPUT) {
                     return new OutputDelegatorExt(context.runtime, RubyUtil.RUBY_OUTPUT_DELEGATOR_CLASS).initialize(
-                        context,
-                        new IRubyObject[]{
-                            klass, typeScopedMetric, executionCntx,
-                            OutputStrategyExt.OutputStrategyRegistryExt.instance(context, null),
-                            rubyArgs
-                        }
+                            context,
+                            new IRubyObject[]{
+                                    klass, typeScopedMetric, executionCntx,
+                                    OutputStrategyExt.OutputStrategyRegistryExt.instance(context, null),
+                                    rubyArgs
+                            }
                     );
                 } else if (type == PluginLookup.PluginType.FILTER) {
                     return filterDelegator(
-                        context, null,
-                        new IRubyObject[]{
-                            filterClass, klass, rubyArgs, typeScopedMetric, executionCntx
-                        }
+                            context, null,
+                            new IRubyObject[]{
+                                    filterClass, klass, rubyArgs, typeScopedMetric, executionCntx
+                            }
                     );
                 } else {
                     final IRubyObject pluginInstance = klass.callMethod(context, "new", rubyArgs);
@@ -269,9 +252,39 @@ private IRubyObject plugin(final ThreadContext context,
                 }
             } else {
                 if (type == PluginLookup.PluginType.OUTPUT) {
-                    return JavaOutputDelegatorExt.create(name, id, typeScopedMetric, (Output)javaPlugin);
+                    final Class<Output> cls = (Class<Output>) pluginClass.klass();
+                    Output output = null;
+                    if (cls != null) {
+                        try {
+                            final Constructor<Output> ctor = cls.getConstructor(Configuration.class, Context.class);
+                            output = ctor.newInstance(new Configuration(Collections.EMPTY_MAP  /*def.getArguments()*/), new Context());
+                        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
+                            throw new IllegalStateException(ex);
+                        }
+                    }
+
+                    if (output != null) {
+                        return JavaOutputDelegatorExt.create(name, id, typeScopedMetric, output);
+                    } else {
+                        throw new IllegalStateException("Unable to instantiate output: " + pluginClass);
+                    }
                 } else if (type == PluginLookup.PluginType.FILTER) {
-                    return JavaFilterDelegatorExt.create(name, id, typeScopedMetric, (Filter)javaPlugin);
+                    final Class<Filter> cls = (Class<Filter>) pluginClass.klass();
+                    Filter filter = null;
+                    if (cls != null) {
+                        try {
+                            final Constructor<Filter> ctor = cls.getConstructor(Configuration.class, Context.class);
+                            filter = ctor.newInstance(new Configuration(Collections.EMPTY_MAP /*def.getArguments()*/), new Context());
+                        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException ex) {
+                            throw new IllegalStateException(ex);
+                        }
+                    }
+
+                    if (filter != null) {
+                        return JavaFilterDelegatorExt.create(name, id, typeScopedMetric, filter);
+                    } else {
+                        throw new IllegalStateException("Unable to instantiate filter: " + pluginClass);
+                    }
                 } else {
                     return context.nil;
                 }
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
index 58eaa0a1656..962a02c88e0 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginLookup.java
@@ -1,8 +1,11 @@
 package org.logstash.plugins;
 
+import org.jruby.RubyClass;
 import org.jruby.RubyString;
+import org.jruby.javasupport.JavaClass;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
+import org.logstash.plugins.discovery.PluginRegistry;
 
 /**
  * Java Implementation of the plugin that is implemented by wrapping the Ruby
@@ -11,8 +14,8 @@
 public final class PluginLookup {
 
     private static final IRubyObject RUBY_REGISTRY = RubyUtil.RUBY.executeScript(
-        "require 'logstash/plugins/registry'\nrequire 'logstash/plugin'\nLogStash::Plugin",
-        ""
+            "require 'logstash/plugins/registry'\nrequire 'logstash/plugin'\nLogStash::Plugin",
+            ""
     );
 
     private PluginLookup() {
@@ -20,24 +23,50 @@ private PluginLookup() {
     }
 
     public static PluginLookup.PluginClass lookup(final PluginLookup.PluginType type, final String name) {
-        return new PluginLookup.PluginClass() {
-            @Override
-            public PluginLookup.PluginLanguage language() {
-                return PluginLookup.PluginLanguage.RUBY;
-            }
-
-            @Override
-            public Object klass() {
-                return RUBY_REGISTRY.callMethod(
-                    RubyUtil.RUBY.getCurrentContext(), "lookup",
-                    new IRubyObject[]{type.rubyLabel(), RubyUtil.RUBY.newString(name)}
-                );
-            }
-        };
+        Class javaClass = PluginRegistry.getPluginClass(type, name);
+        if (javaClass != null) {
+            return new PluginLookup.PluginClass() {
+
+                @Override
+                public PluginLookup.PluginLanguage language() {
+                    return PluginLookup.PluginLanguage.JAVA;
+                }
+
+                @Override
+                public Object klass() {
+                    return javaClass;
+                }
+            };
+        } else {
+            Object klass =
+                    RUBY_REGISTRY.callMethod(
+                            RubyUtil.RUBY.getCurrentContext(), "lookup",
+                            new IRubyObject[]{type.rubyLabel(), RubyUtil.RUBY.newString(name)});
+
+            PluginLanguage language = klass instanceof RubyClass
+                    ? PluginLanguage.RUBY
+                    : PluginLanguage.JAVA;
+
+            Object resolvedClass = klass instanceof JavaClass
+                    ? ((JavaClass) klass).javaClass()
+                    : klass;
+
+            return new PluginLookup.PluginClass() {
+
+                @Override
+                public PluginLookup.PluginLanguage language() {
+                    return language;
+                }
+
+                @Override
+                public Object klass() {
+                    return resolvedClass;
+                }
+            };
+        }
     }
 
     public interface PluginClass {
-
         PluginLookup.PluginLanguage language();
 
         Object klass();
diff --git a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
index cb1b949963d..6cbd52b6f37 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/discovery/PluginRegistry.java
@@ -1,21 +1,22 @@
 package org.logstash.plugins.discovery;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Constructor;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
+import org.logstash.plugins.PluginLookup;
 import org.logstash.plugins.api.Codec;
 import org.logstash.plugins.api.Configuration;
+import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Filter;
 import org.logstash.plugins.api.Input;
 import org.logstash.plugins.api.LogstashPlugin;
-import org.logstash.plugins.api.Context;
 import org.logstash.plugins.api.Output;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
 /**
- * Logstash Java Plugin Registry.
+ * Registry for built-in Java plugins (not installed via logstash-plugin)
  */
 public final class PluginRegistry {
 
@@ -57,6 +58,24 @@ private static void discoverPlugins() {
         }
     }
 
+    public static Class<?> getPluginClass(PluginLookup.PluginType pluginType, String pluginName) {
+        if (pluginType == PluginLookup.PluginType.FILTER) {
+            return getFilterClass(pluginName);
+        }
+        if (pluginType == PluginLookup.PluginType.OUTPUT) {
+            return getOutputClass(pluginName);
+        }
+        if (pluginType == PluginLookup.PluginType.INPUT) {
+            return getInputClass(pluginName);
+        }
+        if (pluginType == PluginLookup.PluginType.CODEC) {
+            return getCodecClass(pluginName);
+        }
+
+        throw new IllegalStateException("Unknown plugin type: " + pluginType);
+
+    }
+
     public static Class<Input> getInputClass(String name) {
         return INPUTS.get(name);
     }
