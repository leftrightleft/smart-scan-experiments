diff --git a/logstash-core/lib/logstash/api/service.rb b/logstash-core/lib/logstash/api/service.rb
index 32563fc994e..c49e609e109 100644
--- a/logstash-core/lib/logstash/api/service.rb
+++ b/logstash-core/lib/logstash/api/service.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/instrument/collector"
-require "logstash/util/loggable"
 
 module LogStash
   module Api
diff --git a/logstash-core/lib/logstash/bootstrap_check/default_config.rb b/logstash-core/lib/logstash/bootstrap_check/default_config.rb
index 228f63b8ef3..da058917db2 100644
--- a/logstash-core/lib/logstash/bootstrap_check/default_config.rb
+++ b/logstash-core/lib/logstash/bootstrap_check/default_config.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 
 module LogStash module BootstrapCheck
   class DefaultConfig
diff --git a/logstash-core/lib/logstash/codecs/base.rb b/logstash-core/lib/logstash/codecs/base.rb
index 329ac12c5ac..f9a9e636bc8 100644
--- a/logstash-core/lib/logstash/codecs/base.rb
+++ b/logstash-core/lib/logstash/codecs/base.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/event"
 require "logstash/plugin"
-require "logstash/logging"
 
 # This is the base class for logstash codecs.
 module LogStash::Codecs; class Base < LogStash::Plugin
diff --git a/logstash-core/lib/logstash/compiler.rb b/logstash-core/lib/logstash/compiler.rb
index 6c568c22859..6cd68b280e0 100644
--- a/logstash-core/lib/logstash/compiler.rb
+++ b/logstash-core/lib/logstash/compiler.rb
@@ -1,4 +1,3 @@
-require 'logstash/util/loggable'
 require 'logstash/compiler/lscl/lscl_grammar'
 
 java_import org.logstash.config.ir.PipelineIR
@@ -15,10 +14,10 @@ def self.compile_sources(sources_with_metadata, support_escapes)
     input_graph = Graph.combine(*graph_sections.map {|s| s[:input] }).graph
     output_graph = Graph.combine(*graph_sections.map {|s| s[:output] }).graph
 
-    filter_graph = graph_sections.reduce(nil) do |acc, s| 
+    filter_graph = graph_sections.reduce(nil) do |acc, s|
       filter_section = s[:filter]
 
-      if acc.nil? 
+      if acc.nil?
         filter_section
       else
         acc.chain(filter_section)
diff --git a/logstash-core/lib/logstash/config/mixin.rb b/logstash-core/lib/logstash/config/mixin.rb
index 0055e8dc95f..8ef076c4aeb 100644
--- a/logstash-core/lib/logstash/config/mixin.rb
+++ b/logstash-core/lib/logstash/config/mixin.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/plugins/registry"
-require "logstash/logging"
 require "logstash/util/password"
 require "logstash/util/safe_uri"
 require "logstash/version"
diff --git a/logstash-core/lib/logstash/config/modules_common.rb b/logstash-core/lib/logstash/config/modules_common.rb
index 9d608322035..e75c389c7e3 100644
--- a/logstash-core/lib/logstash/config/modules_common.rb
+++ b/logstash-core/lib/logstash/config/modules_common.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/util/loggable"
 require "logstash/elasticsearch_client"
 require "logstash/modules/kibana_client"
 require "logstash/modules/elasticsearch_importer"
diff --git a/logstash-core/lib/logstash/config/source/local.rb b/logstash-core/lib/logstash/config/source/local.rb
index ec068bb4ad6..a4beefb76fb 100644
--- a/logstash-core/lib/logstash/config/source/local.rb
+++ b/logstash-core/lib/logstash/config/source/local.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/config/source/base"
 require "logstash/config/pipeline_config"
-require "logstash/util/loggable"
 require "uri"
 
 module LogStash module Config module Source
diff --git a/logstash-core/lib/logstash/config/source/modules.rb b/logstash-core/lib/logstash/config/source/modules.rb
index 4473b0a4fec..6f88033ef9b 100644
--- a/logstash-core/lib/logstash/config/source/modules.rb
+++ b/logstash-core/lib/logstash/config/source/modules.rb
@@ -2,7 +2,6 @@
 require "logstash/config/source/base"
 require "logstash/config/modules_common"
 require "logstash/config/pipeline_config"
-require "logstash/util/loggable"
 
 module LogStash module Config module Source
   class Modules < Base
diff --git a/logstash-core/lib/logstash/config/source/multi_local.rb b/logstash-core/lib/logstash/config/source/multi_local.rb
index 5fc656caf3d..9f546ef24a7 100644
--- a/logstash-core/lib/logstash/config/source/multi_local.rb
+++ b/logstash-core/lib/logstash/config/source/multi_local.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/config/source/local"
-require "logstash/util/loggable"
 require "logstash/pipeline_settings"
 
 module LogStash module Config module Source
diff --git a/logstash-core/lib/logstash/elasticsearch_client.rb b/logstash-core/lib/logstash/elasticsearch_client.rb
index 9b341a03ea8..8398ec442d0 100644
--- a/logstash-core/lib/logstash/elasticsearch_client.rb
+++ b/logstash-core/lib/logstash/elasticsearch_client.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require "elasticsearch"
 require "elasticsearch/transport/transport/http/manticore"
 
diff --git a/logstash-core/lib/logstash/filters/base.rb b/logstash-core/lib/logstash/filters/base.rb
index b15bc1e9410..39036bf9f60 100644
--- a/logstash-core/lib/logstash/filters/base.rb
+++ b/logstash-core/lib/logstash/filters/base.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/event"
-require "logstash/logging"
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "logstash/util/decorators"
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index fd6a6c02740..2a8ee97e7bc 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/event"
 require "logstash/plugin"
-require "logstash/logging"
 require "logstash/config/mixin"
 require "logstash/codecs/base"
 require "logstash/util/decorators"
diff --git a/logstash-core/lib/logstash/instrument/collector.rb b/logstash-core/lib/logstash/instrument/collector.rb
index 4971695a2c9..d1318804946 100644
--- a/logstash-core/lib/logstash/instrument/collector.rb
+++ b/logstash-core/lib/logstash/instrument/collector.rb
@@ -1,7 +1,6 @@
 # encoding: utf-8
 require "logstash/instrument/snapshot"
 require "logstash/instrument/metric_store"
-require "logstash/util/loggable"
 require "concurrent/timer_task"
 require "observer"
 require "singleton"
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
index a990a19fe36..33816217247 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/base.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/util/loggable"
 require "logstash/util"
 require "concurrent"
 
diff --git a/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb b/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
index 28199b2a5cc..8a27ca72cd4 100644
--- a/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
+++ b/logstash-core/lib/logstash/instrument/periodic_poller/cgroup.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "pathname"
-require "logstash/util/loggable"
 
 # Logic from elasticsearch/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java
 # Move to ruby to remove any existing dependency
diff --git a/logstash-core/lib/logstash/instrument/snapshot.rb b/logstash-core/lib/logstash/instrument/snapshot.rb
index 62a12677fdb..1520981bac9 100644
--- a/logstash-core/lib/logstash/instrument/snapshot.rb
+++ b/logstash-core/lib/logstash/instrument/snapshot.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/util/loggable"
 
 module LogStash module Instrument
   class Snapshot
diff --git a/logstash-core/lib/logstash/modules/cli_parser.rb b/logstash-core/lib/logstash/modules/cli_parser.rb
index 9fa0df613fd..3942d14343e 100644
--- a/logstash-core/lib/logstash/modules/cli_parser.rb
+++ b/logstash-core/lib/logstash/modules/cli_parser.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-
 module LogStash module Modules class CLIParser
   include LogStash::Util::Loggable
 
diff --git a/logstash-core/lib/logstash/modules/elasticsearch_config.rb b/logstash-core/lib/logstash/modules/elasticsearch_config.rb
index 102266a8ff2..0fa54ffd82a 100644
--- a/logstash-core/lib/logstash/modules/elasticsearch_config.rb
+++ b/logstash-core/lib/logstash/modules/elasticsearch_config.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-
 require_relative "elasticsearch_resource"
 
 module LogStash module Modules class ElasticsearchConfig
diff --git a/logstash-core/lib/logstash/modules/elasticsearch_importer.rb b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
index 5b14585d5e9..6d957a709fb 100644
--- a/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
+++ b/logstash-core/lib/logstash/modules/elasticsearch_importer.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-
 module LogStash module Modules class ElasticsearchImporter
   include LogStash::Util::Loggable
 
diff --git a/logstash-core/lib/logstash/modules/file_reader.rb b/logstash-core/lib/logstash/modules/file_reader.rb
index 7e71ef05e69..75c14f692cd 100644
--- a/logstash-core/lib/logstash/modules/file_reader.rb
+++ b/logstash-core/lib/logstash/modules/file_reader.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require "logstash/json"
 
 module LogStash module Modules class FileReader
diff --git a/logstash-core/lib/logstash/modules/kibana_client.rb b/logstash-core/lib/logstash/modules/kibana_client.rb
index 06675bc2303..c48d0caebef 100644
--- a/logstash-core/lib/logstash/modules/kibana_client.rb
+++ b/logstash-core/lib/logstash/modules/kibana_client.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require "logstash/json"
 require "manticore"
 
diff --git a/logstash-core/lib/logstash/modules/kibana_config.rb b/logstash-core/lib/logstash/modules/kibana_config.rb
index 4f6e642c81a..0e932c03eba 100644
--- a/logstash-core/lib/logstash/modules/kibana_config.rb
+++ b/logstash-core/lib/logstash/modules/kibana_config.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-
 require_relative "file_reader"
 require_relative "kibana_settings"
 require_relative "kibana_dashboards"
diff --git a/logstash-core/lib/logstash/modules/kibana_dashboards.rb b/logstash-core/lib/logstash/modules/kibana_dashboards.rb
index 27643e77645..d8f345a17c1 100644
--- a/logstash-core/lib/logstash/modules/kibana_dashboards.rb
+++ b/logstash-core/lib/logstash/modules/kibana_dashboards.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require_relative "kibana_base"
 
 module LogStash module Modules class KibanaDashboards < KibanaBase
diff --git a/logstash-core/lib/logstash/modules/kibana_importer.rb b/logstash-core/lib/logstash/modules/kibana_importer.rb
index d00c94e6484..268f4827bf8 100644
--- a/logstash-core/lib/logstash/modules/kibana_importer.rb
+++ b/logstash-core/lib/logstash/modules/kibana_importer.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-
 module LogStash module Modules class KibanaImporter
   include LogStash::Util::Loggable
 
diff --git a/logstash-core/lib/logstash/modules/kibana_settings.rb b/logstash-core/lib/logstash/modules/kibana_settings.rb
index 0864280f44f..af3383360b7 100644
--- a/logstash-core/lib/logstash/modules/kibana_settings.rb
+++ b/logstash-core/lib/logstash/modules/kibana_settings.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require_relative "kibana_base"
 
 module LogStash module Modules class KibanaSettings < KibanaBase
diff --git a/logstash-core/lib/logstash/modules/scaffold.rb b/logstash-core/lib/logstash/modules/scaffold.rb
index 5921b961b1c..dfe16f97205 100644
--- a/logstash-core/lib/logstash/modules/scaffold.rb
+++ b/logstash-core/lib/logstash/modules/scaffold.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-require "logstash/util/loggable"
 require "erb"
 
 require_relative "elasticsearch_config"
diff --git a/logstash-core/lib/logstash/modules/settings_merger.rb b/logstash-core/lib/logstash/modules/settings_merger.rb
index 9b5ad11580b..628bfc5206f 100644
--- a/logstash-core/lib/logstash/modules/settings_merger.rb
+++ b/logstash-core/lib/logstash/modules/settings_merger.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/util"
-require "logstash/util/loggable"
 
 module LogStash module Modules module SettingsMerger
   include LogStash::Util::Loggable
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index ce087edfe70..1efc8b07907 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "logstash/event"
-require "logstash/logging"
 require "logstash/plugin"
 require "logstash/config/mixin"
 require "concurrent/atomic/atomic_fixnum"
diff --git a/logstash-core/lib/logstash/pipeline_action/create.rb b/logstash-core/lib/logstash/pipeline_action/create.rb
index f9dd7b5bdb0..6da3bfba3b7 100644
--- a/logstash-core/lib/logstash/pipeline_action/create.rb
+++ b/logstash-core/lib/logstash/pipeline_action/create.rb
@@ -3,7 +3,6 @@
 require "logstash/pipeline"
 require "logstash/java_pipeline"
 require "logstash/converge_result"
-require "logstash/util/loggable"
 
 module LogStash module PipelineAction
   class Create < Base
diff --git a/logstash-core/lib/logstash/pipeline_action/reload.rb b/logstash-core/lib/logstash/pipeline_action/reload.rb
index 931fdced02e..653e2c0c48c 100644
--- a/logstash-core/lib/logstash/pipeline_action/reload.rb
+++ b/logstash-core/lib/logstash/pipeline_action/reload.rb
@@ -2,7 +2,6 @@
 require "logstash/pipeline_action/base"
 require "logstash/pipeline_action/create"
 require "logstash/pipeline_action/stop"
-require "logstash/util/loggable"
 require "logstash/converge_result"
 
 module LogStash module PipelineAction
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 55ea3fc678e..84d19c2b7de 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
 require "logstash/config/mixin"
 require "concurrent"
 require "securerandom"
diff --git a/logstash-core/lib/logstash/plugins/registry.rb b/logstash-core/lib/logstash/plugins/registry.rb
index 394d363c442..a84d9cbc166 100644
--- a/logstash-core/lib/logstash/plugins/registry.rb
+++ b/logstash-core/lib/logstash/plugins/registry.rb
@@ -1,6 +1,5 @@
 # encoding: utf-8
 require "rubygems/package"
-require "logstash/util/loggable"
 require "logstash/plugin"
 require "logstash/plugins/hooks_registry"
 require "logstash/modules/scaffold"
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index 41f5891b3b0..cf32b171248 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -1,5 +1,4 @@
 # encoding: utf-8
-require "logstash/util/loggable"
 require "fileutils"
 require "logstash/util/byte_value"
 require "logstash/util/substitution_variables"
@@ -10,7 +9,7 @@ class Settings
 
     include LogStash::Util::SubstitutionVariables
     include LogStash::Util::Loggable
-    
+
     def initialize
       @settings = {}
       # Theses settings were loaded from the yaml file
@@ -119,7 +118,7 @@ def from_yaml(yaml_path, file_name="logstash.yml")
       self.merge(deep_replace(flatten_hash(settings)), true)
       self
     end
-    
+
     def post_process
       if @post_process_callbacks
         @post_process_callbacks.each do |callback|
@@ -127,7 +126,7 @@ def post_process
         end
       end
     end
-    
+
     def on_post_process(&block)
       @post_process_callbacks ||= []
       @post_process_callbacks << block
@@ -439,7 +438,7 @@ class WritableDirectory < Setting
       def initialize(name, default=nil, strict=false)
         super(name, ::String, default, strict)
       end
-      
+
       def validate(path)
         super(path)
 
diff --git a/logstash-core/lib/logstash/util/loggable.rb b/logstash-core/lib/logstash/util/loggable.rb
index 59bb9678b43..cf7879f56b6 100644
--- a/logstash-core/lib/logstash/util/loggable.rb
+++ b/logstash-core/lib/logstash/util/loggable.rb
@@ -1,30 +1 @@
-# encoding: utf-8
-require "logstash/logging/logger"
-
-module LogStash module Util
-  module Loggable
-    def self.included(klass)
-
-      def klass.log4j_name
-        ruby_name = self.name || self.class.name || self.class.to_s
-        ruby_name.gsub('::', '.').downcase
-      end
-
-      def klass.logger
-        @logger ||= LogStash::Logging::Logger.new(log4j_name)
-      end
-
-      def klass.slow_logger(warn_threshold, info_threshold, debug_threshold, trace_threshold)
-        @slow_logger ||= LogStash::Logging::SlowLogger.new(log4j_name, warn_threshold, info_threshold, debug_threshold, trace_threshold)
-      end
-
-      def logger
-        self.class.logger
-      end
-
-      def slow_logger(warn_threshold, info_threshold, debug_threshold, trace_threshold)
-        self.class.slow_logger(warn_threshold, info_threshold, debug_threshold, trace_threshold)
-      end
-    end
-  end
-end; end
+# Keeping this file for backwards compatibility with plugins that include it directly.
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index 229b20fbd32..0dd8da61224 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -1,6 +1,4 @@
 # encoding: utf-8
-require "logstash/logging"
-require "logstash/util/loggable"
 require "logstash/util/secretstore"
 
 module ::LogStash::Util::SubstitutionVariables
diff --git a/logstash-core/spec/logstash/config/mixin_spec.rb b/logstash-core/spec/logstash/config/mixin_spec.rb
index 4c3fd8a3d99..a395bbe9076 100644
--- a/logstash-core/spec/logstash/config/mixin_spec.rb
+++ b/logstash-core/spec/logstash/config/mixin_spec.rb
@@ -7,7 +7,7 @@
     let(:password) { "sekret" }
     let(:double_logger) { double("logger").as_null_object }
 
-    subject do 
+    subject do
       Class.new(LogStash::Filters::Base) do
         include LogStash::Config::Mixin
         config_name "test_deprecated"
@@ -151,7 +151,7 @@
 
         it "should raise a configuration error" do
           expect { subject.required_strings }.to raise_error(LogStash::ConfigurationError)
-        end        
+        end
       end
 
       context "with no value specified" do
@@ -160,7 +160,7 @@
         it "should raise a configuration error" do
           expect { subject.required_strings }.to raise_error(LogStash::ConfigurationError)
         end
-      end          
+      end
     end
   end
 
@@ -208,7 +208,7 @@
 
     shared_examples("safe URI") do |options|
       options ||= {}
-      
+
       subject { klass.new("uri" => uri_str) }
 
       it "should be a SafeURI object" do
diff --git a/logstash-core/spec/logstash/modules/cli_parser_spec.rb b/logstash-core/spec/logstash/modules/cli_parser_spec.rb
index 9169d8083ec..03a036f05fd 100644
--- a/logstash-core/spec/logstash/modules/cli_parser_spec.rb
+++ b/logstash-core/spec/logstash/modules/cli_parser_spec.rb
@@ -1,5 +1,4 @@
 require "spec_helper"
-require "logstash/logging"
 require "logstash/modules/cli_parser"
 
 describe LogStash::Modules::CLIParser do
diff --git a/logstash-core/spec/logstash/pipeline_spec.rb b/logstash-core/spec/logstash/pipeline_spec.rb
index e15f7cc85ae..20c26c007c8 100644
--- a/logstash-core/spec/logstash/pipeline_spec.rb
+++ b/logstash-core/spec/logstash/pipeline_spec.rb
@@ -370,7 +370,7 @@ class TestPipeline < LogStash::Pipeline
       after do
         pipeline.shutdown
       end
-      
+
       it "should call close of output without output-workers" do
         pipeline.run
 
@@ -395,7 +395,7 @@ class TestPipeline < LogStash::Pipeline
       # cause the suite to fail :(
       pipeline.close
     end
-    
+
     it "should use LIR provided IDs" do
       expect(pipeline.inputs.first.id).to eq(pipeline.lir.input_plugin_vertices.first.id)
       expect(pipeline.filters.first.id).to eq(pipeline.lir.filter_plugin_vertices.first.id)
diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 155d7281b09..682a10abc6d 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -33,6 +33,7 @@
 import org.logstash.instrument.metrics.NamespacedMetricExt;
 import org.logstash.instrument.metrics.NullMetricExt;
 import org.logstash.instrument.metrics.NullNamespacedMetricExt;
+import org.logstash.log.LoggableExt;
 import org.logstash.log.LoggerExt;
 import org.logstash.log.SlowLoggerExt;
 import org.logstash.plugins.PluginFactoryExt;
@@ -139,8 +140,12 @@ public final class RubyUtil {
 
     public static final RubyClass LOGGER;
 
+    public static final RubyModule LOGGABLE_MODULE;
+
     public static final RubyClass SLOW_LOGGER;
 
+    public static final RubyModule UTIL_MODULE;
+
     /**
      * Logstash Ruby Module.
      */
@@ -229,20 +234,20 @@ public final class RubyUtil {
         TIMED_EXECUTION_CLASS.defineAnnotatedMethods(MetricExt.TimedExecution.class);
         NULL_TIMED_EXECUTION_CLASS.defineAnnotatedMethods(NullMetricExt.NullTimedExecution.class);
         NULL_COUNTER_CLASS.defineAnnotatedMethods(NullNamespacedMetricExt.NullCounter.class);
-        final RubyModule util = LOGSTASH_MODULE.defineModuleUnder("Util");
-        ABSTRACT_DLQ_WRITER_CLASS = util.defineClassUnder(
+        UTIL_MODULE = LOGSTASH_MODULE.defineModuleUnder("Util");
+        ABSTRACT_DLQ_WRITER_CLASS = UTIL_MODULE.defineClassUnder(
             "AbstractDeadLetterQueueWriterExt", RUBY.getObject(),
             ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR
         );
         ABSTRACT_DLQ_WRITER_CLASS.defineAnnotatedMethods(AbstractDeadLetterQueueWriterExt.class);
-        DUMMY_DLQ_WRITER_CLASS = util.defineClassUnder(
+        DUMMY_DLQ_WRITER_CLASS = UTIL_MODULE.defineClassUnder(
             "DummyDeadLetterQueueWriter", ABSTRACT_DLQ_WRITER_CLASS,
             AbstractDeadLetterQueueWriterExt.DummyDeadLetterQueueWriterExt::new
         );
         DUMMY_DLQ_WRITER_CLASS.defineAnnotatedMethods(
             AbstractDeadLetterQueueWriterExt.DummyDeadLetterQueueWriterExt.class
         );
-        PLUGIN_DLQ_WRITER_CLASS = util.defineClassUnder(
+        PLUGIN_DLQ_WRITER_CLASS = UTIL_MODULE.defineClassUnder(
             "PluginDeadLetterQueueWriter", ABSTRACT_DLQ_WRITER_CLASS,
             AbstractDeadLetterQueueWriterExt.PluginDeadLetterQueueWriterExt::new
         );
@@ -329,14 +334,14 @@ public final class RubyUtil {
         FILTER_DELEGATOR_CLASS = setupLogstashClass(
             FilterDelegatorExt::new, FilterDelegatorExt.class
         );
-
         final RubyModule loggingModule = LOGSTASH_MODULE.defineOrGetModuleUnder("Logging");
         LOGGER = loggingModule.defineClassUnder("Logger", RUBY.getObject(), LoggerExt::new);
         LOGGER.defineAnnotatedMethods(LoggerExt.class);
         SLOW_LOGGER = loggingModule.defineClassUnder(
                 "SlowLogger", RUBY.getObject(), SlowLoggerExt::new);
         SLOW_LOGGER.defineAnnotatedMethods(SlowLoggerExt.class);
-
+        LOGGABLE_MODULE = UTIL_MODULE.defineModuleUnder("Loggable");
+        LOGGABLE_MODULE.defineAnnotatedMethods(LoggableExt.class);
         final RubyModule json = LOGSTASH_MODULE.defineOrGetModuleUnder("Json");
         final RubyClass stdErr = RUBY.getStandardError();
         LOGSTASH_ERROR = LOGSTASH_MODULE.defineClassUnder(
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
index 18fbcb06dd0..1e6461cd4db 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
@@ -45,7 +45,7 @@ public final class FilterDelegatorExt extends RubyObject {
     public IRubyObject init(final ThreadContext context, final IRubyObject filter, final IRubyObject id) {
         this.id = (RubyString) id;
         this.filter = filter;
-        this.filterClass = filter.getMetaClass();
+        this.filterClass = filter.getSingletonClass().getRealClass();
         final IRubyObject namespacedMetric = filter.callMethod(context, "metric");
         metricEvents = namespacedMetric.callMethod(context, "namespace", RubyUtil.RUBY.newSymbol("events"));
         eventMetricOut = LongCounter.fromRubyBase(metricEvents, MetricKeys.OUT_KEY);
diff --git a/logstash-core/src/main/java/org/logstash/log/LoggableExt.java b/logstash-core/src/main/java/org/logstash/log/LoggableExt.java
new file mode 100644
index 00000000000..e541578cb45
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/log/LoggableExt.java
@@ -0,0 +1,107 @@
+package org.logstash.log;
+
+import org.jruby.RubyClass;
+import org.jruby.RubyModule;
+import org.jruby.RubyString;
+import org.jruby.anno.JRubyMethod;
+import org.jruby.anno.JRubyModule;
+import org.jruby.runtime.Block;
+import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.jruby.runtime.builtin.InstanceVariables;
+import org.logstash.RubyUtil;
+
+@JRubyModule(name = "Loggable")
+public final class LoggableExt {
+
+    private LoggableExt() {
+        // Ruby Module
+    }
+
+    @JRubyMethod(module = true)
+    public static RubyModule included(final ThreadContext context, final IRubyObject recv,
+        final IRubyObject clazz) {
+        final RubyModule klass = (RubyModule) clazz;
+        klass.defineAnnotatedMethods(LoggableExt.ClassMethods.class);
+        return klass;
+    }
+
+    @JRubyMethod
+    public static IRubyObject logger(final ThreadContext context, final IRubyObject self) {
+        return self.getSingletonClass().callMethod(context, "logger");
+    }
+
+    @JRubyMethod(name = "slow_logger", required = 4)
+    public static IRubyObject slowLogger(final ThreadContext context, final IRubyObject self,
+        final IRubyObject[] args) {
+        return self.getSingletonClass().callMethod(context, "slow_logger", args);
+    }
+
+    private static RubyString log4jName(final ThreadContext context, final RubyModule self) {
+        IRubyObject name = self.name19();
+        if (name.isNil()) {
+            final RubyClass clazz;
+            if(self instanceof RubyClass) {
+                clazz = ((RubyClass) self).getRealClass();
+            } else {
+                clazz = self.getMetaClass();
+            }
+            name = clazz.name19();
+            if (name.isNil()) {
+                name = clazz.to_s();
+            }
+        }
+        return ((RubyString) ((RubyString) name).gsub(
+            context, RubyUtil.RUBY.newString("::"), RubyUtil.RUBY.newString("."),
+            Block.NULL_BLOCK
+        )).downcase19(context);
+    }
+
+    /**
+     * Holds the {@link JRubyMethod}s class methods that the {@link LoggableExt} module binds
+     * on classes that include it (and hence invoke
+     * {@link LoggableExt#included(ThreadContext, IRubyObject, IRubyObject)}).
+     */
+    public static final class ClassMethods {
+
+        private ClassMethods() {
+            // Holder for JRuby Methods
+        }
+
+        @JRubyMethod(meta = true)
+        public static IRubyObject logger(final ThreadContext context, final IRubyObject self) {
+            final InstanceVariables instanceVariables;
+            if (self instanceof RubyClass) {
+                instanceVariables = ((RubyClass) self).getRealClass().getInstanceVariables();
+            } else {
+                instanceVariables = self.getInstanceVariables();
+            }
+            IRubyObject logger = instanceVariables.getInstanceVariable("logger");
+            if (logger == null || logger.isNil()) {
+                logger = RubyUtil.LOGGER.callMethod(context, "new",
+                    LoggableExt.log4jName(context, (RubyModule) self)
+                );
+                instanceVariables.setInstanceVariable("logger", logger);
+            }
+            return logger;
+        }
+
+        @JRubyMethod(name = "slow_logger", required = 4, meta = true)
+        public static SlowLoggerExt slowLogger(final ThreadContext context,
+            final IRubyObject self, final IRubyObject[] args) {
+            final InstanceVariables instanceVariables = self.getInstanceVariables();
+            SlowLoggerExt logger =
+                (SlowLoggerExt) instanceVariables.getInstanceVariable("slow_logger");
+            if (logger == null || logger.isNil()) {
+                logger = new SlowLoggerExt(context.runtime, RubyUtil.SLOW_LOGGER).initialize(
+                    context, new IRubyObject[]{
+                        LoggableExt.log4jName(context, (RubyModule) self), args[0], args[1],
+                        args[2], args[3]
+                    }
+                );
+                instanceVariables.setInstanceVariable("slow_logger", logger);
+            }
+            return logger;
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/log/LoggerExt.java b/logstash-core/src/main/java/org/logstash/log/LoggerExt.java
index cc2cc54759a..f18cfa0abb1 100644
--- a/logstash-core/src/main/java/org/logstash/log/LoggerExt.java
+++ b/logstash-core/src/main/java/org/logstash/log/LoggerExt.java
@@ -10,7 +10,6 @@
 import org.jruby.RubyBoolean;
 import org.jruby.RubyClass;
 import org.jruby.RubyObject;
-import org.jruby.RubyString;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.javasupport.JavaUtil;
@@ -31,7 +30,7 @@ public LoggerExt(final Ruby runtime, final RubyClass metaClass) {
     }
 
     @JRubyMethod
-    public IRubyObject initialize(final ThreadContext context, final IRubyObject loggerName) {
+    public LoggerExt initialize(final ThreadContext context, final IRubyObject loggerName) {
         logger = LogManager.getLogger(loggerName.asJavaString());
         return this;
     }
diff --git a/logstash-core/src/main/java/org/logstash/log/SlowLoggerExt.java b/logstash-core/src/main/java/org/logstash/log/SlowLoggerExt.java
index 5ff71de4fac..2f3f8e94c15 100644
--- a/logstash-core/src/main/java/org/logstash/log/SlowLoggerExt.java
+++ b/logstash-core/src/main/java/org/logstash/log/SlowLoggerExt.java
@@ -34,7 +34,7 @@ public SlowLoggerExt(final Ruby runtime, final RubyClass metaClass) {
     }
 
     @JRubyMethod(required = 5)
-    public IRubyObject initialize(final ThreadContext context, final IRubyObject[] args) {
+    public SlowLoggerExt initialize(final ThreadContext context, final IRubyObject[] args) {
         String loggerName = args[0].asJavaString();
         slowLogger = LogManager.getLogger("slowlog." + loggerName);
         warnThreshold = ((RubyNumeric) args[1]).getLongValue();
diff --git a/x-pack/lib/monitoring/inputs/timer_task_logger.rb b/x-pack/lib/monitoring/inputs/timer_task_logger.rb
index a3a4e12e240..be3edac7716 100644
--- a/x-pack/lib/monitoring/inputs/timer_task_logger.rb
+++ b/x-pack/lib/monitoring/inputs/timer_task_logger.rb
@@ -2,7 +2,6 @@
 # or more contributor license agreements. Licensed under the Elastic License;
 # you may not use this file except in compliance with the Elastic License.
 
-require "logstash/util/loggable"
 require "concurrent"
 
 module LogStash module Inputs
