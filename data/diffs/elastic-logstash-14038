diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index bdf716d8501..f58a88c7508 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -321,7 +321,7 @@ def running_user_defined_pipelines
   end
 
   def no_pipeline?
-    @pipelines_registry.running_pipelines.empty?
+    @pipelines_registry.running_pipelines.empty? && @pipelines_registry.loading_pipelines.empty?
   end
 
   private
diff --git a/logstash-core/spec/logstash/agent_spec.rb b/logstash-core/spec/logstash/agent_spec.rb
index d2157f9bab2..4ff89bdd4af 100644
--- a/logstash-core/spec/logstash/agent_spec.rb
+++ b/logstash-core/spec/logstash/agent_spec.rb
@@ -176,7 +176,7 @@
 
             let(:source_loader) { TestSequenceSourceLoader.new(mock_config_pipeline, mock_second_pipeline_config)}
 
-            it "does upgrade the new config" do
+            it "updates to the new config without stopping logstash" do
               t = Thread.new { subject.execute }
               Timeout.timeout(timeout) do
                 sleep(0.1) until subject.running_pipelines_count > 0 && subject.running_pipelines.values.first.ready?
@@ -185,9 +185,13 @@
               expect(subject.converge_state_and_update).to be_a_successful_converge
               expect(subject).to have_running_pipeline?(mock_second_pipeline_config)
 
+              # Previously `transition_to_stopped` would be called - the loading pipeline would
+              # not be detected in the `while !Stud.stop?` loop in agent#execute, and the method would
+              # exit prematurely
+              joined = t.join(1)
+              expect(joined).to be(nil)
               Stud.stop!(t)
               t.join
-              subject.shutdown
             end
           end
 
