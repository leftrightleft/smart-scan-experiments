diff --git a/logstash-core/lib/logstash/execution_context.rb b/logstash-core/lib/logstash/execution_context.rb
new file mode 100644
index 00000000000..ad1579f40e6
--- /dev/null
+++ b/logstash-core/lib/logstash/execution_context.rb
@@ -0,0 +1,10 @@
+# encoding: utf-8
+module LogStash
+  class ExecutionContext
+    attr_reader :pipeline_id
+
+    def initialize(pipeline_id)
+      @pipeline_id = pipeline_id
+    end
+  end
+end
diff --git a/logstash-core/lib/logstash/filter_delegator.rb b/logstash-core/lib/logstash/filter_delegator.rb
index 092f01c2542..fb0569ae67e 100644
--- a/logstash-core/lib/logstash/filter_delegator.rb
+++ b/logstash-core/lib/logstash/filter_delegator.rb
@@ -14,7 +14,7 @@ class FilterDelegator
     ]
     def_delegators :@filter, *DELEGATED_METHODS
 
-    def initialize(logger, klass, metric, plugin_args)
+    def initialize(logger, klass, metric, execution_context, plugin_args)
       @logger = logger
       @klass = klass
       @id = plugin_args["id"]
@@ -23,6 +23,7 @@ def initialize(logger, klass, metric, plugin_args)
       # Scope the metrics to the plugin
       namespaced_metric = metric.namespace(@id.to_sym)
       @filter.metric = namespaced_metric
+      @filter.execution_context = execution_context
 
       @metric_events = namespaced_metric.namespace(:events)
       namespaced_metric.gauge(:name, config_name)
diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 33a96bd1b0a..3db155fb3d0 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -101,6 +101,14 @@ def clone
     cloned
   end
 
+  def execution_context=(context)
+    super
+    # There is no easy way to propage an instance variable into the codec, because the codec
+    # are created at the class level
+    @codec.execution_context = context
+    context
+  end
+
   protected
   def decorate(event)
     # Only set 'type' if not already set. This is backwards-compatible behavior
diff --git a/logstash-core/lib/logstash/output_delegator.rb b/logstash-core/lib/logstash/output_delegator.rb
index 23166f0cf0a..8c11f22bdee 100644
--- a/logstash-core/lib/logstash/output_delegator.rb
+++ b/logstash-core/lib/logstash/output_delegator.rb
@@ -7,7 +7,7 @@
 module LogStash class OutputDelegator
   attr_reader :metric, :metric_events, :strategy, :namespaced_metric, :metric_events, :id
 
-  def initialize(logger, output_class, metric, strategy_registry, plugin_args)
+  def initialize(logger, output_class, metric, execution_context, strategy_registry, plugin_args)
     @logger = logger
     @output_class = output_class
     @metric = metric
@@ -18,7 +18,7 @@ def initialize(logger, output_class, metric, strategy_registry, plugin_args)
     
     @strategy = strategy_registry.
                   class_for(self.concurrency).
-                  new(@logger, @output_class, @metric, plugin_args)
+                  new(@logger, @output_class, @metric, execution_context, plugin_args)
     
     @namespaced_metric = metric.namespace(id.to_sym)
     @namespaced_metric.gauge(:name, config_name)
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
index 81f695afc9d..9648c249417 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/legacy.rb
@@ -2,10 +2,13 @@
 module LogStash module OutputDelegatorStrategies class Legacy
   attr_reader :worker_count, :workers
   
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, klass, metric, execution_context, plugin_args)
     @worker_count = (plugin_args["workers"] || 1).to_i
     @workers = @worker_count.times.map { klass.new(plugin_args) }
-    @workers.each {|w| w.metric = metric }
+    @workers.each do |w|
+      w.metric = metric
+      w.execution_context = execution_context
+    end
     @worker_queue = SizedQueue.new(@worker_count)
     @workers.each {|w| @worker_queue << w}
   end
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
index 9650cf7ee22..4afce212ec5 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/shared.rb
@@ -1,7 +1,8 @@
 module LogStash module OutputDelegatorStrategies class Shared
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, klass, metric, execution_context, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
+    @output.execution_context = execution_context
   end
   
   def register
diff --git a/logstash-core/lib/logstash/output_delegator_strategies/single.rb b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
index d576a22df6f..5b836f2b587 100644
--- a/logstash-core/lib/logstash/output_delegator_strategies/single.rb
+++ b/logstash-core/lib/logstash/output_delegator_strategies/single.rb
@@ -1,7 +1,8 @@
 module LogStash module OutputDelegatorStrategies class Single
-  def initialize(logger, klass, metric, plugin_args)
+  def initialize(logger, klass, metric, execution_context, plugin_args)
     @output = klass.new(plugin_args)
     @output.metric = metric
+    @output.execution_context = execution_context
     @mutex = Mutex.new
   end
 
diff --git a/logstash-core/lib/logstash/outputs/base.rb b/logstash-core/lib/logstash/outputs/base.rb
index 5e3ce1ad1a3..8f85c251849 100644
--- a/logstash-core/lib/logstash/outputs/base.rb
+++ b/logstash-core/lib/logstash/outputs/base.rb
@@ -105,6 +105,14 @@ def concurrency
     self.class.concurrency
   end
 
+  def execution_context=(context)
+    super
+    # There is no easy way to propage an instance variable into the codec, because the codec
+    # are created at the class level
+    @codec.execution_context = context
+    context
+  end
+
   private
   def output?(event)
     # TODO: noop for now, remove this once we delete this call from all plugins
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index ac940a86ac0..8bbb9207e9d 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -21,7 +21,8 @@
 require "logstash/output_delegator"
 require "logstash/filter_delegator"
 require "logstash/queue_factory"
-require 'logstash/compiler'
+require "logstash/compiler"
+require "logstash/execution_context"
 
 module LogStash; class BasePipeline
   include LogStash::Util::Loggable
@@ -46,6 +47,7 @@ def initialize(config_str, settings = SETTINGS)
     @inputs = nil
     @filters = nil
     @outputs = nil
+    @execution_context = LogStash::ExecutionContext.new(@pipeline_id)
 
     grammar = LogStashConfigParser.new
     parsed_config = grammar.parse(config_str)
@@ -97,12 +99,13 @@ def plugin(plugin_type, name, *args)
     klass = Plugin.lookup(plugin_type, name)
 
     if plugin_type == "output"
-      OutputDelegator.new(@logger, klass, type_scoped_metric,  OutputDelegatorStrategyRegistry.instance, args)
+      OutputDelegator.new(@logger, klass, type_scoped_metric, @execution_context, OutputDelegatorStrategyRegistry.instance, args)
     elsif plugin_type == "filter"
-      FilterDelegator.new(@logger, klass, type_scoped_metric, args)
+      FilterDelegator.new(@logger, klass, type_scoped_metric, @execution_context, args)
     else # input
       input_plugin = klass.new(args)
       input_plugin.metric = type_scoped_metric.namespace(id)
+      input_plugin.execution_context = @execution_context
       input_plugin
     end
   end
diff --git a/logstash-core/lib/logstash/plugin.rb b/logstash-core/lib/logstash/plugin.rb
index 9d448c30dba..cf5f474bbb5 100644
--- a/logstash-core/lib/logstash/plugin.rb
+++ b/logstash-core/lib/logstash/plugin.rb
@@ -8,7 +8,8 @@
 
 class LogStash::Plugin
   include LogStash::Util::Loggable
-  attr_accessor :params
+
+  attr_accessor :params, :execution_context
 
   NL = "\n"
 
@@ -122,6 +123,7 @@ def metric
                          LogStash::Instrument::NamespacedNullMetric.new(@metric, :null)
                        end
   end
+
   # return the configured name of this plugin
   # @return [String] The name of the plugin defined by `config_name`
   def config_name
diff --git a/logstash-core/spec/logstash/execution_context_spec.rb b/logstash-core/spec/logstash/execution_context_spec.rb
new file mode 100644
index 00000000000..351f3a22f9e
--- /dev/null
+++ b/logstash-core/spec/logstash/execution_context_spec.rb
@@ -0,0 +1,13 @@
+# encoding: utf-8
+require "spec_helper"
+require "logstash/execution_context"
+
+describe LogStash::ExecutionContext do
+  let(:pipeline_id) { :main }
+
+  subject { described_class.new(pipeline_id) }
+
+  it "returns the `pipeline_id`" do
+    expect(subject.pipeline_id).to eq(pipeline_id)
+  end
+end
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index 951c72f69d3..577dfee105a 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -3,6 +3,7 @@
 require "logstash/filter_delegator"
 require "logstash/instrument/null_metric"
 require "logstash/event"
+require "logstash/execution_context"
 
 describe LogStash::FilterDelegator do
   let(:logger) { double(:logger) }
@@ -13,6 +14,7 @@
   let(:collector) { [] }
   let(:metric) { LogStash::Instrument::NamespacedNullMetric.new(collector, :null) }
   let(:events) { [LogStash::Event.new, LogStash::Event.new] }
+  let(:default_execution_context) { LogStash::ExecutionContext.new(:main) }
 
   before :each do
     allow(metric).to receive(:namespace).with(anything).and_return(metric)
@@ -26,11 +28,11 @@ def register; end
     end
   end
 
-  subject { described_class.new(logger, plugin_klass, metric, config) }
+  subject { described_class.new(logger, plugin_klass, metric, default_execution_context, config) }
 
   it "create a plugin with the passed options" do
     expect(plugin_klass).to receive(:new).with(config).and_return(plugin_klass.new(config))
-    described_class.new(logger, plugin_klass, metric, config)
+    described_class.new(logger, plugin_klass, metric, default_execution_context, config)
   end
 
   context "when the plugin support flush" do
diff --git a/logstash-core/spec/logstash/inputs/base_spec.rb b/logstash-core/spec/logstash/inputs/base_spec.rb
index e33540eab3d..0e2ada3a4f7 100644
--- a/logstash-core/spec/logstash/inputs/base_spec.rb
+++ b/logstash-core/spec/logstash/inputs/base_spec.rb
@@ -1,5 +1,7 @@
 # encoding: utf-8
 require "spec_helper"
+require "logstash/execution_context"
+require "logstash/inputs/base"
 
 # use a dummy NOOP input to test Inputs::Base
 class LogStash::Inputs::NOOP < LogStash::Inputs::Base
@@ -60,7 +62,28 @@ def register; end
     expect(evt.get("field")).to eq(["value1","value2"])
     expect(evt.get("field2")).to eq("value")
   end
-  
+
+  context "execution context" do
+    let(:default_execution_context) { LogStash::ExecutionContext.new(:main) }
+    let(:klass) { LogStash::Inputs::NOOP }
+
+    subject(:instance) { klass.new({}) }
+
+    it "allow to set the context" do
+      expect(instance.execution_context).to be_nil
+      instance.execution_context = default_execution_context
+
+      expect(instance.execution_context).to eq(default_execution_context)
+    end
+
+    it "propagate the context to the codec" do
+      expect(instance.codec.execution_context).to be_nil
+      instance.execution_context = default_execution_context
+
+      expect(instance.codec.execution_context).to eq(default_execution_context)
+    end
+  end
+
   describe "cloning" do
     let(:input) do
       LogStash::Inputs::NOOP.new("add_field" => {"field" => ["value1", "value2"], "field2" => "value"})
diff --git a/logstash-core/spec/logstash/output_delegator_spec.rb b/logstash-core/spec/logstash/output_delegator_spec.rb
index e86c0556f71..3b9d2b2c997 100644
--- a/logstash-core/spec/logstash/output_delegator_spec.rb
+++ b/logstash-core/spec/logstash/output_delegator_spec.rb
@@ -1,6 +1,7 @@
 # encoding: utf-8
 require "logstash/output_delegator"
-require 'spec_helper'
+require "logstash/execution_context"
+require "spec_helper"
 
 describe LogStash::OutputDelegator do
   let(:logger) { double("logger") }
@@ -8,8 +9,9 @@
   let(:plugin_args) { {"id" => "foo", "arg1" => "val1"} }
   let(:collector) { [] }
   let(:metric) { LogStash::Instrument::NamespacedNullMetric.new(collector, :null) }
+  let(:default_execution_context) { LogStash::ExecutionContext.new(:main) }
 
-  subject { described_class.new(logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
+  subject { described_class.new(logger, out_klass, metric, default_execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args) }
 
   context "with a plain output plugin" do
     let(:out_klass) { double("output klass") }
@@ -27,6 +29,7 @@
       allow(out_inst).to receive(:register)
       allow(out_inst).to receive(:multi_receive)
       allow(out_inst).to receive(:metric=).with(any_args)
+      allow(out_inst).to receive(:execution_context=).with(default_execution_context)
       allow(out_inst).to receive(:id).and_return("a-simple-plugin")
 
       allow(subject.metric_events).to receive(:increment).with(any_args)
@@ -39,7 +42,7 @@
 
     it "should push the name of the plugin to the metric" do
       expect(metric).to receive(:gauge).with(:name, out_klass.config_name)
-      described_class.new(logger, out_klass, metric, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
+      described_class.new(logger, out_klass, metric, default_execution_context, ::LogStash::OutputDelegatorStrategyRegistry.instance, plugin_args)
     end
 
     context "after having received a batch of events" do
diff --git a/logstash-core/spec/logstash/outputs/base_spec.rb b/logstash-core/spec/logstash/outputs/base_spec.rb
index fe03883fae6..650a22d9e2c 100644
--- a/logstash-core/spec/logstash/outputs/base_spec.rb
+++ b/logstash-core/spec/logstash/outputs/base_spec.rb
@@ -1,5 +1,7 @@
 # encoding: utf-8
 require "spec_helper"
+require "logstash/outputs/base"
+require "logstash/execution_context"
 
 # use a dummy NOOP output to test Outputs::Base
 class LogStash::Outputs::NOOPSingle < LogStash::Outputs::Base
@@ -77,6 +79,27 @@ def multi_receive_encoded(events_and_encoded)
     end
   end
 
+  context "execution context" do
+    let(:default_execution_context) { LogStash::ExecutionContext.new(:main) }
+    let(:klass) { LogStash::Outputs::NOOPSingle }
+
+    subject(:instance) { klass.new(params.dup) }
+
+    it "allow to set the context" do
+      expect(instance.execution_context).to be_nil
+      instance.execution_context = default_execution_context
+
+      expect(instance.execution_context).to eq(default_execution_context)
+    end
+
+    it "propagate the context to the codec" do
+      expect(instance.codec.execution_context).to be_nil
+      instance.execution_context = default_execution_context
+
+      expect(instance.codec.execution_context).to eq(default_execution_context)
+    end
+  end
+
   describe "dispatching multi_receive" do
     let(:event) { double("event") }
     let(:events) { [event] }
diff --git a/logstash-core/spec/logstash/plugin_spec.rb b/logstash-core/spec/logstash/plugin_spec.rb
index c6eda09c5ac..b6c0bf62d92 100644
--- a/logstash-core/spec/logstash/plugin_spec.rb
+++ b/logstash-core/spec/logstash/plugin_spec.rb
@@ -5,6 +5,7 @@
 require "logstash/codecs/base"
 require "logstash/inputs/base"
 require "logstash/filters/base"
+require "logstash/execution_context"
 
 describe LogStash::Plugin do
   context "reloadable" do
@@ -42,6 +43,17 @@ def self.reloadable?
     end
   end
 
+  context "#execution_context" do
+    subject { Class.new(LogStash::Plugin).new({}) }
+
+    it "can be set and get" do
+      expect(subject.execution_context).to be_nil
+      execution_context = LogStash::ExecutionContext.new(:main)
+      subject.execution_context = execution_context
+      expect(subject.execution_context).to eq(execution_context)
+    end
+  end
+
   it "should fail lookup on nonexistent type" do
     #expect_any_instance_of(Cabin::Channel).to receive(:debug).once
     expect { LogStash::Plugin.lookup("badbadtype", "badname") }.to raise_error(LogStash::PluginLoadingError)
