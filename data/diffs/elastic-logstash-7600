diff --git a/logstash-core/src/main/java/org/logstash/ConvertedList.java b/logstash-core/src/main/java/org/logstash/ConvertedList.java
index 6899631b821..a1aa771aa31 100644
--- a/logstash-core/src/main/java/org/logstash/ConvertedList.java
+++ b/logstash-core/src/main/java/org/logstash/ConvertedList.java
@@ -17,7 +17,7 @@
 
 import static org.logstash.Valuefier.convert;
 
-public class ConvertedList<T> implements List<T>, Collection<T>, Iterable<T> {
+public class ConvertedList<T> implements List<T> {
     private final List<T> delegate;
 
     public ConvertedList(final int size) {
diff --git a/logstash-core/src/main/java/org/logstash/KeyNode.java b/logstash-core/src/main/java/org/logstash/KeyNode.java
index e6a5c0bea3d..f3f3a15c442 100644
--- a/logstash-core/src/main/java/org/logstash/KeyNode.java
+++ b/logstash-core/src/main/java/org/logstash/KeyNode.java
@@ -30,7 +30,7 @@ public String evaluate(Event event) throws IOException {
                 return join((List)value, ",");
             } else if (value instanceof Map) {
                 ObjectMapper mapper = new ObjectMapper();
-                return mapper.writeValueAsString((Map<String, Object>)value);
+                return mapper.writeValueAsString(value);
             } else {
                 return event.getField(this.key).toString();
             }
@@ -60,8 +60,8 @@ private static String toString(Object value, String delim) {
         if (value == null) return "";
         if (value instanceof List) return join((List)value, delim);
         if (value instanceof BiValue) {
-            return ((BiValue) value).toString();
+            return value.toString();
         }
         return value.toString();
     }
-}
\ No newline at end of file
+}
