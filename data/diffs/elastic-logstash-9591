diff --git a/logstash-core/lib/logstash/agent.rb b/logstash-core/lib/logstash/agent.rb
index 07f95b79351..49784ea1c7a 100644
--- a/logstash-core/lib/logstash/agent.rb
+++ b/logstash-core/lib/logstash/agent.rb
@@ -45,6 +45,16 @@ def initialize(settings = LogStash::SETTINGS, source_loader = nil)
     # Generate / load the persistent uuid
     id
 
+    # Set the global FieldReference parsing mode
+    parsing_mode = case setting('config.field_reference.parser')
+                   when 'COMPAT' then org.logstash.FieldReference::ParsingMode::COMPAT;
+                   when 'LEGACY' then org.logstash.FieldReference::ParsingMode::LEGACY;
+                   when 'STRICT' then org.logstash.FieldReference::ParsingMode::STRICT;
+                   else fail('Unsupported FieldReference parsing mode')
+                   end
+    logger.debug("Setting global FieldReference parsing mode: #{parsing_mode}")
+    org.logstash.FieldReference::set_parsing_mode(parsing_mode)
+
     # This is for backward compatibility in the tests
     if source_loader.nil?
       @source_loader = LogStash::Config::SourceLoader.new
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index 85103a5a33c..63961784b26 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -33,6 +33,7 @@ module Environment
            Setting::Boolean.new("config.reload.automatic", false),
            Setting::TimeValue.new("config.reload.interval", "3s"), # in seconds
            Setting::Boolean.new("config.support_escapes", false),
+            Setting::String.new("config.field_reference.parser", "COMPAT", true, %w(STRICT COMPAT LEGACY)),
            Setting::Boolean.new("metric.collect", true),
             Setting::String.new("pipeline.id", "main"),
            Setting::Boolean.new("pipeline.system", false),
diff --git a/logstash-core/lib/logstash/runner.rb b/logstash-core/lib/logstash/runner.rb
index db649c9c397..07609a60761 100644
--- a/logstash-core/lib/logstash/runner.rb
+++ b/logstash-core/lib/logstash/runner.rb
@@ -68,6 +68,11 @@ class LogStash::Runner < Clamp::StrictCommand
     :default => LogStash::SETTINGS.get_default("config.string"),
     :attribute_name => "config.string"
 
+  option ["--field-reference-parser"], "MODE",
+         I18n.t("logstash.runner.flag.field-reference-parser"),
+         :attribute_name => "config.field_reference.parser",
+         :default => LogStash::SETTINGS.get_default("config.field_reference.parser")
+
   # Module settings
   option ["--modules"], "MODULES",
     I18n.t("logstash.runner.flag.modules"),
diff --git a/logstash-core/locales/en.yml b/logstash-core/locales/en.yml
index a037fef9fef..dafb662c230 100644
--- a/logstash-core/locales/en.yml
+++ b/logstash-core/locales/en.yml
@@ -228,6 +228,33 @@ en:
           "%{default_output}"
           If you wish to use both defaults, please use
           the empty string for the '-e' flag.
+        field-reference-parser: |+
+          Use the given MODE when parsing field
+          references.
+
+          The field reference parser is used to expand
+          field references in your pipeline configs,
+          and will be becoming more strict to better
+          handle illegal and ambbiguous inputs in a
+          future release of Logstash.
+
+          Available MODEs are:
+           - `LEGACY`: parse with the legacy parser,
+             which is known to handle ambiguous- and
+             illegal-syntax in surprising ways;
+             warnings will not be emitted.
+           - `COMPAT`: warn once for each distinct
+             ambiguous- or illegal-syntax input, but
+             continue to expand field references with
+             the legacy parser.
+           - `STRICT`: parse in a strict manner; when
+             given ambiguous- or illegal-syntax input,
+             raises a runtime exception that should
+             be handled by the calling plugin.
+
+           The MODE can also be set with
+           `config.field_reference.parser`
+
         modules: |+
           Load Logstash modules.
           Modules can be defined using multiple instances
diff --git a/logstash-core/spec/logstash/event_spec.rb b/logstash-core/spec/logstash/event_spec.rb
index 95d902ed1e2..2600e9c3ef7 100644
--- a/logstash-core/spec/logstash/event_spec.rb
+++ b/logstash-core/spec/logstash/event_spec.rb
@@ -76,6 +76,17 @@
         expect(e.get("[foo][-1]")).to eq(list[-1])
       end
     end
+
+    context 'with illegal-syntax field reference' do
+      # NOTE: in true-legacy-mode FieldReference parsing, the input `[` caused Logstash
+      # to crash entirely with a Java ArrayIndexOutOfBounds exception; this spec ensures that
+      # we instead raise a RuntimeException that can be handled normally within the
+      # Ruby runtime.
+      it 'raises a RuntimeError' do
+        e = LogStash::Event.new
+        expect { e.get('[') }.to raise_exception(::RuntimeError)
+      end
+    end
   end
 
   context "#set" do
@@ -155,6 +166,17 @@
       # expect(s2.encoding.name).to eq("UTF-8")
       # expect(s2.valid_encoding?).to eq(true)
     end
+
+    context 'with illegal-syntax field reference' do
+      # NOTE: in true-legacy-mode FieldReference parsing, the input `[` caused Logstash
+      # to crash entirely with a Java ArrayIndexOutOfBounds exception; this spec ensures that
+      # we instead raise a RuntimeException that can be handled normally within the
+      # Ruby runtime.
+      it 'raises a RuntimeError' do
+        e = LogStash::Event.new
+        expect { e.set('[', 'value') }.to raise_exception(::RuntimeError)
+      end
+    end
   end
 
   context "timestamp" do
diff --git a/logstash-core/src/main/java/org/logstash/FieldReference.java b/logstash-core/src/main/java/org/logstash/FieldReference.java
index 041500a6490..2266ad13288 100644
--- a/logstash-core/src/main/java/org/logstash/FieldReference.java
+++ b/logstash-core/src/main/java/org/logstash/FieldReference.java
@@ -1,13 +1,32 @@
 package org.logstash;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+
 import java.util.concurrent.ConcurrentHashMap;
 import org.jruby.RubyString;
 
 public final class FieldReference {
+    /**
+     * A custom unchecked {@link RuntimeException} that can be thrown by parsing methods when
+     * when they encounter an input with illegal syntax.
+     */
+    public static class IllegalSyntaxException extends RuntimeException {
+        IllegalSyntaxException(String message) {
+            super(message);
+        }
+    }
+
+    private static final Logger LOGGER = LogManager.getLogger(FieldReference.class);
 
     /**
      * This type indicates that the referenced that is the metadata of an {@link Event} found in
@@ -32,6 +51,30 @@ public final class FieldReference {
      */
     private static final Map<FieldReference, FieldReference> DEDUP = new HashMap<>(64);
 
+    /**
+     * Controls the global parsing mode, in support of the transition to strict-mode parsing.
+     *
+     * See {@link FieldReference#setParsingMode(ParsingMode)}.
+     */
+    private static ParsingMode PARSING_MODE = ParsingMode.LEGACY;
+
+    /**
+     * The {@link ParsingMode} enum holds references to the supported parsing modes, in
+     * support of the transition to strict-mode parsing.
+     */
+    public enum ParsingMode {
+        LEGACY(new LegacyTokenizer()),
+        COMPAT(new StrictTokenizer(LEGACY.tokenizer)),
+        STRICT(new StrictTokenizer()),
+        ;
+
+        final Tokenizer tokenizer;
+
+        ParsingMode(final Tokenizer tokenizer) {
+            this.tokenizer = tokenizer;
+        }
+    }
+
     /**
      * Unique {@link FieldReference} pointing at the timestamp field in a {@link Event}.
      */
@@ -90,6 +133,25 @@ public static FieldReference from(final String reference) {
         return parseToCache(reference);
     }
 
+    /**
+     * Sets the global {@link ParsingMode}
+     *
+     * @param newParsingMode a {@link ParsingMode} to be used globally
+     * @return the previous {@link ParsingMode}, enabling tests to reset to default behaviour
+     */
+    public static ParsingMode setParsingMode(final ParsingMode newParsingMode) {
+        final ParsingMode originalParsingMode = PARSING_MODE;
+        PARSING_MODE = newParsingMode;
+        return originalParsingMode;
+    }
+
+    /**
+     * @return the current global {@link ParsingMode}.
+     */
+    static ParsingMode getParsingMode() {
+        return PARSING_MODE;
+    }
+
     /**
      * Returns the type of this instance to allow for fast switch operations in
      * {@link Event#getUnconvertedField(FieldReference)} and
@@ -164,25 +226,8 @@ private static FieldReference parseToCache(final String reference) {
     }
 
     private static FieldReference parse(final CharSequence reference) {
-        final ArrayList<String> path = new ArrayList<>();
-        final int length = reference.length();
-        int splitPoint = 0;
-        for (int i = 0; i < length; ++i) {
-            final char seen = reference.charAt(i);
-            if (seen == '[' || seen == ']') {
-                if (i == 0) {
-                    splitPoint = 1;
-                }
-                if (i > splitPoint) {
-                    path.add(reference.subSequence(splitPoint, i).toString().intern());
-                }
-                splitPoint = i + 1;
-            }
-        }
-        if (splitPoint < length || length == 0) {
-            path.add(reference.subSequence(splitPoint, length).toString().intern());
-        }
-        path.trimToSize();
+        final List<String> path = PARSING_MODE.tokenizer.tokenize(reference);
+
         final String key = path.remove(path.size() - 1).intern();
         final boolean empty = path.isEmpty();
         if (empty && key.equals(Event.METADATA)) {
@@ -195,4 +240,182 @@ private static FieldReference parse(final CharSequence reference) {
             return new FieldReference(path.toArray(EMPTY_STRING_ARRAY), key, DATA_CHILD);
         }
     }
+
+    /**
+     * A temporary private interface to support the transition to strict-mode tokenizing.
+     */
+    private interface Tokenizer {
+        List<String> tokenize(final CharSequence reference);
+    }
+
+    /**
+     * The {@link LegacyTokenizer} is verbatim the tokenizer code that has long been a part
+     * of {@link FieldReference#parse(CharSequence)}.
+     *
+     * While it handles fully-legal bracket-style and no-bracket inputs, it behaves in
+     * surprising ways when given illegal-syntax inputs.
+     */
+    private static class LegacyTokenizer implements Tokenizer {
+        @Override
+        public List<String> tokenize(CharSequence reference) {
+            final ArrayList<String> path = new ArrayList<>();
+            final int length = reference.length();
+            int splitPoint = 0;
+            for (int i = 0; i < length; ++i) {
+                final char seen = reference.charAt(i);
+                if (seen == '[' || seen == ']') {
+                    if (i == 0) {
+                        splitPoint = 1;
+                    }
+                    if (i > splitPoint) {
+                        path.add(reference.subSequence(splitPoint, i).toString().intern());
+                    }
+                    splitPoint = i + 1;
+                }
+            }
+            if (splitPoint < length || length == 0) {
+                path.add(reference.subSequence(splitPoint, length).toString().intern());
+            }
+            if (path.isEmpty()) {
+                // https://github.com/elastic/logstash/issues/9524
+                // prevents an ArrayIndexOutOfBounds exception that would crash the entire Logstash process.
+                // If the path is empty, we have an illegal syntax input and are unable to build a valid
+                // FieldReference; throw a runtime exception, which can be handled downstream.
+                throw new IllegalSyntaxException(String.format("Invalid FieldReference: `%s`", reference.toString()));
+            }
+            path.trimToSize();
+
+            return path;
+        }
+    }
+
+    /**
+     * The {@link StrictTokenizer} parses field-references in a strict manner; when illegal syntax is encountered,
+     * the input is considered ambiguous.
+     *
+     * If instantiated with a fallback {@link Tokenizer}, when it encounters ambiguous input it will always return
+     * an output that is identical to the output of the fallback {@link Tokenizer#tokenize(CharSequence)}; when their
+     * outputs would differ, it also emits a warning to the logger for each distinct illegal input it encounters.
+     */
+    private static class StrictTokenizer implements Tokenizer {
+        private static final Set<CharSequence> AMBIGUOUS_INPUTS = new HashSet<>();
+
+        final Tokenizer legacyTokenizer;
+
+        StrictTokenizer(final Tokenizer legacyTokenizer) {
+            this.legacyTokenizer = Objects.requireNonNull(legacyTokenizer,
+                                                          "to run strict without a fallbackTokenizer, " +
+                                                          "use zero-arg variant");
+        }
+
+        StrictTokenizer() {
+            this.legacyTokenizer = null;
+        }
+
+        @Override
+        public List<String> tokenize(CharSequence reference) {
+            ArrayList<String> path = new ArrayList<>();
+            final int length = reference.length();
+
+            boolean strictMode = !Objects.nonNull(legacyTokenizer);
+
+            boolean potentiallyAmbiguousSyntaxDetected = false;
+            boolean seenBracket = false;
+            int depth = 0;
+            int splitPoint = 0;
+            char current = 0;
+            char previous = 0;
+            scan: for (int i=0 ; i < length; i++) {
+                previous = current;
+                current = reference.charAt(i);
+                switch (current) {
+                    case '[':
+                        seenBracket = true;
+                        if (splitPoint != i) {
+                            // if the current split point isn't the previous character, we have ambiguous input,
+                            // such as a mix of square-bracket and top-level unbracketed chunks, or an embedded
+                            // field reference that doesn't wholly occupy an outer fragment, and cannot
+                            // reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        depth++;
+                        splitPoint = i + 1;
+                        continue scan;
+
+                    case ']':
+                        seenBracket = true;
+                        if (depth <= 0) {
+                            // if we get to a close-bracket without having previously hit an open-bracket,
+                            // we have an illegal field reference and cannot reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+                        if (splitPoint == i && previous != ']') {
+                            // if we have a zero-length fragment and are not closing an embedded fieldreference,
+                            // we have an illegal field reference and cannot possibly recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        if (splitPoint < i) {
+                            // if we have something to add, add it.
+                            path.add(reference.subSequence(splitPoint, i).toString().intern());
+                        }
+
+                        depth--;
+                        splitPoint = i + 1;
+                        continue scan;
+
+                    default:
+                        if (seenBracket && previous == ']') {
+                            // if we have seen a bracket and encounter one or more characters that are _not_ enclosed
+                            // in brackets, we have illegal syntax and cannot reasonably recover.
+                            potentiallyAmbiguousSyntaxDetected = true;
+                            break scan;
+                        }
+
+                        continue scan;
+                }
+            }
+
+            if (!seenBracket) {
+                // if we saw no brackets, this is a top-level reference that can be emitted as-is without
+                // further processing
+                path.add(reference.toString());
+                return path;
+            } else if (depth > 0) {
+                // when we hit the end-of-input while still in an open bracket, we have an invalid field reference
+                potentiallyAmbiguousSyntaxDetected = true;
+            }
+
+            // if we have encountered ambiguous syntax and are not in strict-mode,
+            // fall back to legacy parser.
+            if (potentiallyAmbiguousSyntaxDetected) {
+                if (strictMode) {
+                    throw new FieldReference.IllegalSyntaxException(String.format("Invalid FieldReference: `%s`", reference.toString()));
+                } else {
+                    final List<String> legacyPath = legacyTokenizer.tokenize(reference);
+                    if (!path.equals(legacyPath)) {
+                        warnAmbiguous(reference, legacyPath);
+                    }
+                    return legacyPath;
+                }
+            }
+
+            path.trimToSize();
+            return path;
+        }
+
+        private void warnAmbiguous(final CharSequence reference, final List<String> expansion) {
+            if (AMBIGUOUS_INPUTS.size() > 10_000) {
+                return;
+            }
+            if (AMBIGUOUS_INPUTS.add(reference)) {
+                // TODO: i18n
+                LOGGER.warn(String.format("Detected ambiguous Field Reference `%s`, which we expanded to the path `%s`; in a future release of Logstash, ambiguous Field References will not be expanded.", reference.toString(), expansion));
+            }
+        }
+    }
 }
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index debb8303759..5e81cefc72c 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -82,14 +82,14 @@ public IRubyObject ruby_get_field(ThreadContext context, RubyString reference)
         {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.getUnconvertedField(FieldReference.from(reference))
+                this.event.getUnconvertedField(extractFieldReference(reference))
             );
         }
 
         @JRubyMethod(name = "set", required = 2)
         public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, IRubyObject value)
         {
-            final FieldReference r = FieldReference.from(reference);
+            final FieldReference r = extractFieldReference(reference);
             if (r.equals(FieldReference.TIMESTAMP_REFERENCE)) {
                 if (!(value instanceof JrubyTimestampExtLibrary.RubyTimestamp)) {
                     throw context.runtime.newTypeError("wrong argument type " + value.getMetaClass() + " (expected LogStash::Timestamp)");
@@ -124,7 +124,7 @@ public IRubyObject ruby_cancelled(ThreadContext context)
         @JRubyMethod(name = "include?", required = 1)
         public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
             return RubyBoolean.newBoolean(
-                context.runtime, this.event.includes(FieldReference.from(reference))
+                context.runtime, this.event.includes(extractFieldReference(reference))
             );
         }
 
@@ -132,7 +132,7 @@ public IRubyObject ruby_includes(ThreadContext context, RubyString reference) {
         public IRubyObject ruby_remove(ThreadContext context, RubyString reference) {
             return Rubyfier.deep(
                 context.runtime,
-                this.event.remove(FieldReference.from(reference))
+                this.event.remove(extractFieldReference(reference))
             );
         }
 
@@ -304,6 +304,23 @@ private void initializeFallback(final ThreadContext context, final IRubyObject d
             }
         }
 
+        /**
+         * Shared logic to wrap {@link FieldReference.IllegalSyntaxException}s that are raised by
+         * {@link FieldReference#from(RubyString)} when encountering illegal syntax in a ruby-exception
+         * that can be easily handled within the ruby plugins
+         *
+         * @param reference a {@link RubyString} representing the path to a field
+         * @return the corresponding {@link FieldReference} (see: {@link FieldReference#from(RubyString)})
+         */
+        private static FieldReference extractFieldReference(final RubyString reference) {
+            try {
+                return FieldReference.from(reference);
+            } catch (FieldReference.IllegalSyntaxException ise) {
+                throw RubyUtil.RUBY.newRuntimeError(ise.getMessage());
+            }
+        }
+
+
         private void setEvent(Event event) {
             this.event = event;
         }
diff --git a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
index 63fd16f6763..89c20d7aecf 100644
--- a/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
+++ b/logstash-core/src/test/java/org/logstash/FieldReferenceTest.java
@@ -3,7 +3,11 @@
 import java.lang.reflect.Field;
 import java.util.Map;
 import org.hamcrest.CoreMatchers;
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
@@ -11,39 +15,199 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
+@RunWith(Suite.class)
+@Suite.SuiteClasses({
+        FieldReferenceTest.LegacyMode.class,
+        FieldReferenceTest.CompatMode.class,
+        FieldReferenceTest.StrictMode.class,
+})
 public final class FieldReferenceTest {
 
-    @Test
-    public void testParseSingleBareField() throws Exception {
-        FieldReference f = FieldReference.from("foo");
-        assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
-    }
+    private static abstract class Base {
+        FieldReference.ParsingMode previousParsingMode;
 
-    @Test
-    public void testParseSingleFieldPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo]");
-        assertEquals(0, f.getPath().length);
-        assertEquals(f.getKey(), "foo");
-    }
+        @Before
+        public void setParsingMode() {
+            previousParsingMode = FieldReference.setParsingMode(parsingMode());
+        }
 
-    @Test
-    public void testParse2FieldsPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo][bar]");
-        assertArrayEquals(f.getPath(), new String[]{"foo"});
-        assertEquals(f.getKey(), "bar");
-    }
+        @Before
+        public void clearParsingCache() throws Exception {
+            final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
+            cacheField.setAccessible(true);
+            final Map<CharSequence, FieldReference> cache =
+                    (Map<CharSequence, FieldReference>) cacheField.get(null);
+            cache.clear();
+        }
 
-    @Test
-    public void testParse3FieldsPath() throws Exception {
-        FieldReference f = FieldReference.from("[foo][bar]]baz]");
-        assertArrayEquals(f.getPath(), new String[]{"foo", "bar"});
-        assertEquals(f.getKey(), "baz");
+        @Before
+        public void clearDedupCache() throws Exception  {
+            final Field cacheField = FieldReference.class.getDeclaredField("DEDUP");
+            cacheField.setAccessible(true);
+            final Map<CharSequence, FieldReference> cache =
+                    (Map<CharSequence, FieldReference>) cacheField.get(null);
+            cache.clear();
+        }
+
+        @After
+        public void restoreParsingMode() {
+            FieldReference.setParsingMode(previousParsingMode);
+        }
+
+        abstract FieldReference.ParsingMode parsingMode();
+
+        @Test
+        public void deduplicatesTimestamp() throws Exception {
+            assertTrue(FieldReference.from("@timestamp") == FieldReference.from("[@timestamp]"));
+        }
+
+        @Test
+        public void testParseEmptyString() {
+            final FieldReference emptyReference = FieldReference.from("");
+            assertNotNull(emptyReference);
+            assertEquals(
+                    emptyReference, FieldReference.from(RubyUtil.RUBY.newString(""))
+            );
+        }
+
+        @Test
+        public void testCacheUpperBound() throws NoSuchFieldException, IllegalAccessException {
+            final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
+            cacheField.setAccessible(true);
+            final Map<CharSequence, FieldReference> cache =
+                    (Map<CharSequence, FieldReference>) cacheField.get(null);
+            final int initial = cache.size();
+            for (int i = 0; i < 10_001 - initial; ++i) {
+                FieldReference.from(String.format("[array][%d]", i));
+            }
+            assertThat(cache.size(), CoreMatchers.is(10_000));
+        }
     }
 
-    @Test
-    public void deduplicatesTimestamp() throws Exception {
-        assertTrue(FieldReference.from("@timestamp") == FieldReference.from("[@timestamp]"));
+    public static class LegacyMode extends Base {
+        @Override
+        FieldReference.ParsingMode parsingMode() {
+            return FieldReference.ParsingMode.LEGACY;
+        }
+
+        @Test
+        public void testParseSingleBareField() throws Exception {
+            FieldReference f = FieldReference.from("foo");
+            assertEquals(0, f.getPath().length);
+            assertEquals("foo", f.getKey());
+        }
+
+        @Test
+        public void testParseSingleFieldPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo]");
+            assertEquals(0, f.getPath().length);
+            assertEquals("foo", f.getKey());
+        }
+
+        @Test
+        public void testParse2FieldsPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar]");
+            assertArrayEquals(new String[]{"foo"}, f.getPath());
+            assertEquals("bar", f.getKey());
+        }
+
+        @Test
+        public void testParse3FieldsPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar][baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test
+        public void testParseInvalid3FieldsPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar]]baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test
+        public void testParseInvalidNoCloseBracket() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar][baz");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test
+        public void testParseInvalidNoInitialOpenBracket() throws Exception {
+            FieldReference f = FieldReference.from("foo[bar][baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test
+        public void testParseInvalidMissingMiddleBracket() throws Exception {
+            FieldReference f = FieldReference.from("[foo]bar[baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidOnlyOpenBracket() throws Exception {
+            // was: hard-crash, now strict-by-default
+            FieldReference f = FieldReference.from("[");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidOnlyCloseBracket() throws Exception {
+            // was: hard-crash, now strict-by-default
+            FieldReference f = FieldReference.from("]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidLotsOfOpenBrackets() throws Exception {
+            // was: hard-crash, now strict-by-default
+            FieldReference f = FieldReference.from("[[[[[[[[[[[]");
+        }
+
+        @Test
+        public void testParseInvalidDoubleCloseBrackets() throws Exception {
+            FieldReference f = FieldReference.from("[foo]][bar]");
+            assertEquals(1, f.getPath().length);
+            assertArrayEquals(new String[]{"foo"}, f.getPath());
+            assertEquals("bar", f.getKey());
+        }
+
+        @Test
+        public void testParseNestingSquareBrackets() throws Exception {
+            FieldReference f = FieldReference.from("[this[is]terrible]");
+            assertEquals(2, f.getPath().length);
+            assertArrayEquals(new String[]{"this", "is"}, f.getPath());
+            assertEquals("terrible", f.getKey());
+        }
+
+        @Test
+        public void testParseChainedNestingSquareBrackets() throws Exception {
+            FieldReference f = FieldReference.from("[this[is]terrible][and][it[should[not][work]]]");
+            assertArrayEquals(new String[]{"this","is","terrible", "and", "it", "should", "not"}, f.getPath());
+            assertEquals("work", f.getKey());
+        }
+
+        @Test
+        public void testParseLiteralSquareBrackets() throws Exception {
+            FieldReference f = FieldReference.from("this[index]");
+            assertEquals(1, f.getPath().length);
+            assertArrayEquals(new String[]{"this"}, f.getPath());
+            assertEquals("index", f.getKey());
+        }
+
+        @Test
+        public void testEmbeddedSingleReference() throws Exception {
+            FieldReference f = FieldReference.from("[[foo]][bar]");
+            assertArrayEquals(new String[]{"foo"}, f.getPath());
+            assertEquals("bar", f.getKey());
+        }
+
+        @Test
+        public void testEmbeddedDeepReference() throws Exception {
+            FieldReference f = FieldReference.from("[[foo][bar]][baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
     }
 
     @Test
@@ -51,20 +215,124 @@ public void testParseEmptyString() {
         final FieldReference emptyReference = FieldReference.from("");
         assertNotNull(emptyReference);
         assertEquals(
-            emptyReference, FieldReference.from(RubyUtil.RUBY.newString(""))
+                emptyReference, FieldReference.from(RubyUtil.RUBY.newString(""))
         );
     }
 
-    @Test
-    public void testCacheUpperBound() throws NoSuchFieldException, IllegalAccessException {
-        final Field cacheField = FieldReference.class.getDeclaredField("CACHE");
-        cacheField.setAccessible(true);
-        final Map<CharSequence, FieldReference> cache =
-            (Map<CharSequence, FieldReference>) cacheField.get(null);
-        final int initial = cache.size();
-        for (int i = 0; i < 10_001 - initial; ++i) {
-            FieldReference.from(String.format("[array][%d]", i));
-        }
-        assertThat(cache.size(), CoreMatchers.is(10_000));
+    public static class CompatMode extends LegacyMode {
+        @Override
+        FieldReference.ParsingMode parsingMode() {
+            return FieldReference.ParsingMode.LEGACY;
+        }
+    }
+
+
+    public static class StrictMode extends Base {
+        @Override
+        FieldReference.ParsingMode parsingMode() {
+            return FieldReference.ParsingMode.STRICT;
+        }
+
+        @Test
+        public void testParseSingleBareField() throws Exception {
+            FieldReference f = FieldReference.from("foo");
+            assertEquals(0, f.getPath().length);
+            assertEquals("foo", f.getKey());
+        }
+
+        @Test
+        public void testParseSingleFieldPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo]");
+            assertEquals(0, f.getPath().length);
+            assertEquals("foo", f.getKey());
+        }
+
+        @Test
+        public void testParse2FieldsPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar]");
+            assertArrayEquals(new String[]{"foo"}, f.getPath());
+            assertEquals("bar", f.getKey());
+        }
+
+        @Test
+        public void testParse3FieldsPath() throws Exception {
+            FieldReference f = FieldReference.from("[foo][bar][baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test
+        public void testEmbeddedSingleReference() throws Exception {
+            FieldReference f = FieldReference.from("[[foo]][bar]");
+            assertArrayEquals(new String[]{"foo"}, f.getPath());
+            assertEquals("bar", f.getKey());
+        }
+
+        @Test
+        public void testEmbeddedDeepReference() throws Exception {
+            FieldReference f = FieldReference.from("[[foo][bar]][baz]");
+            assertArrayEquals(new String[]{"foo", "bar"}, f.getPath());
+            assertEquals("baz", f.getKey());
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidEmbeddedDeepReference() throws Exception {
+            FieldReference f = FieldReference.from("[[foo][bar]nope][baz]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidEmbeddedDeepReference2() throws Exception {
+            FieldReference f = FieldReference.from("[nope[foo][bar]][baz]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidNoCloseBracket() throws Exception {
+            FieldReference.from("[foo][bar][baz");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidNoInitialOpenBracket() throws Exception {
+            FieldReference.from("foo[bar][baz]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidMissingMiddleBracket() throws Exception {
+            FieldReference.from("[foo]bar[baz]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidOnlyOpenBracket() throws Exception {
+            FieldReference.from("[");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidOnlyCloseBracket() throws Exception {
+            FieldReference.from("]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidLotsOfOpenBrackets() throws Exception {
+            FieldReference.from("[[[[[[[[[[[]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseInvalidDoubleCloseBrackets() throws Exception {
+            FieldReference.from("[foo]][bar]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseNestingSquareBrackets() throws Exception {
+            FieldReference.from("[this[is]terrible]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseChainedNestingSquareBrackets() throws Exception {
+            FieldReference.from("[this[is]terrible][and][it[should-not[work]]]");
+        }
+
+        @Test(expected=FieldReference.IllegalSyntaxException.class)
+        public void testParseLiteralSquareBrackets() throws Exception {
+            FieldReference.from("this[index]");
+        }
     }
 }
