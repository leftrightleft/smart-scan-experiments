diff --git a/.gitignore b/.gitignore
index 0210c3075e6..008404d5a0b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -53,3 +53,4 @@ qa/integration/fixtures/offline_wrapper/offline
 qa/integration/fixtures/offline_wrapper/offline.o
 logstash-core/versions-gem-copy.yml
 logstash-core-plugin-api/versions-gem-copy.yml
+config/logstash.keystore
diff --git a/bin/logstash-keystore b/bin/logstash-keystore
new file mode 100755
index 00000000000..8e0fdc020e8
--- /dev/null
+++ b/bin/logstash-keystore
@@ -0,0 +1,11 @@
+#!/bin/sh
+
+unset CDPATH
+. "$(cd `dirname $0`/..; pwd)/bin/logstash.lib.sh"
+setup
+
+# bin/logstash-keystore is a short lived ruby script thus we can use aggressive "faster starting JRuby options"
+# see https://github.com/jruby/jruby/wiki/Improving-startup-time
+export JRUBY_OPTS="$JRUBY_OPTS -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify -X-C -Xcompile.invokedynamic=false"
+
+ruby_exec "${LOGSTASH_HOME}/lib/secretstore/cli.rb" "$@"
diff --git a/bin/logstash-keystore.bat b/bin/logstash-keystore.bat
new file mode 100644
index 00000000000..900376c97eb
--- /dev/null
+++ b/bin/logstash-keystore.bat
@@ -0,0 +1,17 @@
+@echo off
+setlocal enabledelayedexpansion
+
+call "%~dp0setup.bat" || exit /b 1
+if errorlevel 1 (
+	if not defined nopauseonerror (
+		pause
+	)
+	exit /B %ERRORLEVEL%
+)
+
+%JRUBY_BIN% "%LS_HOME%\lib\secretstore\cli.rb" %*
+if errorlevel 1 (
+  exit /B 1
+)
+
+endlocal
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index ca78035ef05..27768f1bbac 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 590f0e81da2..92165eede80 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3-bin.zip
diff --git a/gradlew b/gradlew
index 27309d92314..cccdd3d517f 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e72f..e95643d6a2c 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/lib/secretstore/cli.rb b/lib/secretstore/cli.rb
new file mode 100644
index 00000000000..ae4b8b5d485
--- /dev/null
+++ b/lib/secretstore/cli.rb
@@ -0,0 +1,43 @@
+$LOAD_PATH.push(File.expand_path(File.dirname(__FILE__) + "/../../logstash-core/lib"))
+require_relative "../bootstrap/environment"
+LogStash::Bundler.setup!({:without => [:build, :development]})
+
+require "logstash/namespace"
+require "logstash-core/logstash-core"
+require "logstash/util/settings_helper"
+require "logstash/util/secretstore"
+
+java_import "org.logstash.secret.store.SecretStoreFactory"
+java_import "org.logstash.secret.SecretIdentifier"
+java_import "org.logstash.secret.store.SecureConfig"
+java_import "org.logstash.secret.cli.SecretStoreCli"
+java_import "org.logstash.secret.cli.Terminal"
+
+# Thin wrapper to the Java SecretStore Command Line Interface
+class LogStash::SecretStoreCli
+  include LogStash::Util::Loggable
+
+  begin
+    index = ARGV.find_index("--path.settings")
+    # strip out any path.settings from the command line
+    unless index.nil?
+      path_settings_value = ARGV.slice!(index, 2)[1]
+      if path_settings_value.nil?
+        logger.error("''--path.settings' found, but it is empty. Please remove '--path.settings' from arguments or provide a value") if path_settings_value.nil?
+        exit 1
+      end
+    end
+
+    LogStash::Util::SettingsHelper.pre_process
+    LogStash::Util::SettingsHelper.from_yaml(["--path.settings", path_settings_value])
+    LogStash::Util::SettingsHelper.post_process
+    secure_config = LogStash::Util::SecretStore.get_config
+    cli = SecretStoreCli.new(Terminal.new)
+    cli.command(ARGV[0], secure_config, ARGV[1])
+    exit 0
+  rescue => e
+    logger.error(e.message, :cause => e.cause, :backtrace => e.backtrace)
+    exit 1
+  end
+
+end
\ No newline at end of file
diff --git a/logstash-core/lib/logstash/environment.rb b/logstash-core/lib/logstash/environment.rb
index fe9f4f7cdf6..d64bc658172 100644
--- a/logstash-core/lib/logstash/environment.rb
+++ b/logstash-core/lib/logstash/environment.rb
@@ -65,9 +65,12 @@ module Environment
             Setting::TimeValue.new("slowlog.threshold.warn", "-1"),
             Setting::TimeValue.new("slowlog.threshold.info", "-1"),
             Setting::TimeValue.new("slowlog.threshold.debug", "-1"),
-            Setting::TimeValue.new("slowlog.threshold.trace", "-1")
+            Setting::TimeValue.new("slowlog.threshold.trace", "-1"),
+            Setting::String.new("keystore.classname", "org.logstash.secret.store.backend.JavaKeyStore"),
+            Setting::String.new("keystore.file", "", false) # will be populated on post_process
   ].each {|setting| SETTINGS.register(setting) }
 
+
   # Compute the default queue path based on `path.data`
   default_queue_file_path = ::File.join(SETTINGS.get("path.data"), "queue")
   SETTINGS.register Setting::WritableDirectory.new("path.queue", default_queue_file_path)
@@ -75,6 +78,7 @@ module Environment
   default_dlq_file_path = ::File.join(SETTINGS.get("path.data"), "dead_letter_queue")
   SETTINGS.register Setting::WritableDirectory.new("path.dead_letter_queue", default_dlq_file_path)
 
+
   SETTINGS.on_post_process do |settings|
     # If the data path is overridden but the queue path isn't recompute the queue path
     # We need to do this at this stage because of the weird execution order
@@ -87,6 +91,12 @@ module Environment
         settings.set_value("path.dead_letter_queue", ::File.join(settings.get("path.data"), "dead_letter_queue"))
       end
     end
+
+    # Compute the default secret store path based on `path.settings`, the path.settings is defaulted in pre_process, and possibly reset to the command line switch in the from_yaml
+    if settings.set?("path.settings")
+      SETTINGS.set("keystore.file", ::File.join(SETTINGS.get("path.settings"), "logstash.keystore"))
+    end
+
   end
 
   module Environment
diff --git a/logstash-core/lib/logstash/settings.rb b/logstash-core/lib/logstash/settings.rb
index c4b12dba989..578b29dd375 100644
--- a/logstash-core/lib/logstash/settings.rb
+++ b/logstash-core/lib/logstash/settings.rb
@@ -9,6 +9,7 @@ module LogStash
   class Settings
 
     include LogStash::Util::SubstitutionVariables
+    include LogStash::Util::Loggable
     
     def initialize
       @settings = {}
diff --git a/logstash-core/lib/logstash/util/secretstore.rb b/logstash-core/lib/logstash/util/secretstore.rb
new file mode 100644
index 00000000000..e70ee35d083
--- /dev/null
+++ b/logstash-core/lib/logstash/util/secretstore.rb
@@ -0,0 +1,36 @@
+# encoding: utf-8
+
+# Ruby helper to work with the secret store
+module ::LogStash::Util::SecretStore
+
+  java_import "org.logstash.secret.store.SecretStoreFactory"
+  java_import "org.logstash.secret.SecretIdentifier"
+  java_import "org.logstash.secret.store.SecureConfig"
+  java_import "org.logstash.secret.cli.SecretStoreCli"
+
+  # Return the configuration necessary to work with a secret store
+  def self.get_config
+    secure_config = SecureConfig.new
+    secure_config.add("keystore.file", LogStash::SETTINGS.get_setting("keystore.file").value.chars)
+    pass = ENV["LOGSTASH_SECRET_STORE_PASS"]
+    secure_config.add("keystore.pass", pass.chars) unless pass.nil?
+    secure_config.add("keystore.classname", LogStash::SETTINGS.get_setting("keystore.classname").value.chars)
+    secure_config
+  end
+
+  # Check to see if the secret store exists, return true if exists, false otherwise
+  def self.exists?
+    SecretStoreFactory.exists(get_config)
+  end
+
+  # Returns a org.logstash.secret.store.SecretStore if it exists, nil otherwise
+  def self.get_if_exists
+    SecretStoreFactory.load(get_config) if exists?
+  end
+
+  # Returns a org.org.logstash.secret.SecretIdentifier for use with the secret store
+  def self.get_store_id(id)
+    SecretIdentifier.new(id)
+  end
+
+end
diff --git a/logstash-core/lib/logstash/util/substitution_variables.rb b/logstash-core/lib/logstash/util/substitution_variables.rb
index aa574fd3f32..229b20fbd32 100644
--- a/logstash-core/lib/logstash/util/substitution_variables.rb
+++ b/logstash-core/lib/logstash/util/substitution_variables.rb
@@ -1,9 +1,15 @@
 # encoding: utf-8
+require "logstash/logging"
+require "logstash/util/loggable"
+require "logstash/util/secretstore"
+
 module ::LogStash::Util::SubstitutionVariables
 
+  include LogStash::Util::Loggable
+
   SUBSTITUTION_PLACEHOLDER_REGEX = /\${(?<name>[a-zA-Z_.][a-zA-Z0-9_.]*)(:(?<default>[^}]*))?}/
 
-  # Recursive method to replace environment variable references in parameters
+  # Recursive method to replace substitution variable references in parameters
   def deep_replace(value)
     if value.is_a?(Hash)
       value.each do |valueHashKey, valueHashValue|
@@ -22,7 +28,7 @@ def deep_replace(value)
 
   # Replace all substitution variable references in the 'value' param and returns the substituted value, or the original value if a substitution can not be made
   # Process following patterns : ${VAR}, ${VAR:defaultValue}
-  # If value matches the pattern, returns the following precedence : Environment entry value, default value as provided in the pattern
+  # If value matches the pattern, returns the following precedence : Secret store value, Environment entry value, default value as provided in the pattern
   # If the value does not match the pattern, the 'value' param returns as-is
   def replace_placeholders(value)
     return value unless value.is_a?(String)
@@ -34,12 +40,19 @@ def replace_placeholders(value)
       # [1] http://ruby-doc.org/core-2.1.1/Regexp.html#method-c-last_match
       name = Regexp.last_match(:name)
       default = Regexp.last_match(:default)
+      logger.debug("Replacing `#{placeholder}` with actual value")
 
-      replacement = ENV.fetch(name, default)
+      #check the secret store if it exists
+      secret_store = LogStash::Util::SecretStore.get_if_exists
+      replacement = secret_store.nil? ? nil : secret_store.retrieveSecret(LogStash::Util::SecretStore.get_store_id(name))
+      #check the environment
+      replacement = ENV.fetch(name, default) if replacement.nil?
       if replacement.nil?
-        raise LogStash::ConfigurationError, "Cannot evaluate `#{placeholder}`. Environment variable `#{name}` is not set and there is no default value given."
+        raise LogStash::ConfigurationError, "Cannot evaluate `#{placeholder}`. Replacement variable `#{name}` is not defined in a Logstash secret store " +
+            "or as an Environment entry and there is no default value given."
       end
-      replacement
+      replacement.to_s
     end
   end # def replace_placeholders
+
 end
diff --git a/logstash-core/spec/logstash/settings_spec.rb b/logstash-core/spec/logstash/settings_spec.rb
index 5479d0f8022..cf2e0e69c38 100644
--- a/logstash-core/spec/logstash/settings_spec.rb
+++ b/logstash-core/spec/logstash/settings_spec.rb
@@ -150,23 +150,31 @@
 
   describe "#from_yaml" do
 
-    context "env placeholders in flat logstash.yml" do
+    before :each do
+      LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../src/test/resources/logstash.keystore.with.default.pass"))
+    end
+
+    context "placeholders in flat logstash.yml" do
+
 
       after do
         ENV.delete('SOME_LOGSTASH_SPEC_ENV_VAR')
         ENV.delete('some.logstash.spec.env.var')
+        ENV.delete('a')
       end
       
       subject do
         settings = described_class.new
-        settings.register(LogStash::Setting::String.new("interpolated", "missing"))
-        settings.register(LogStash::Setting::String.new("with_dot", "missing"))
+        settings.register(LogStash::Setting::String.new("interpolated_env", "missing"))
+        settings.register(LogStash::Setting::String.new("with_dot_env", "missing"))
+        settings.register(LogStash::Setting::String.new("interpolated_store", "missing"))
         settings
       end
 
       let(:values) {{
-        "interpolated" => "${SOME_LOGSTASH_SPEC_ENV_VAR}",
-        "with_dot" => "${some.logstash.spec.env.var}"
+        "interpolated_env" => "${SOME_LOGSTASH_SPEC_ENV_VAR}",
+        "with_dot_env" => "${some.logstash.spec.env.var}",
+        "interpolated_store" => "${a}"
       }}
       let(:yaml_path) do
         p = Stud::Temporary.pathname
@@ -178,28 +186,37 @@
         p
       end
 
-      it "can interpolate environment into settings" do
-        expect(subject.get('interpolated')).to eq("missing")
-        expect(subject.get('with_dot')).to eq("missing")
-        ENV['SOME_LOGSTASH_SPEC_ENV_VAR'] = "correct_setting"
-        ENV['some.logstash.spec.env.var'] = "correct_setting_for_dotted"
+      it "can interpolate into settings" do
+        expect(subject.get('interpolated_env')).to eq("missing")
+        expect(subject.get('with_dot_env')).to eq("missing")
+        expect(subject.get('interpolated_store')).to eq("missing")
+        ENV['SOME_LOGSTASH_SPEC_ENV_VAR'] = "correct_setting_env"
+        ENV['some.logstash.spec.env.var'] = "correct_setting_for_dotted_env"
+        ENV['a'] = "wrong_value" # the store should take precedence
         subject.from_yaml(yaml_path)
-        expect(subject.get('interpolated')).to eq("correct_setting")
-        expect(subject.get('with_dot')).to eq("correct_setting_for_dotted")
+        expect(subject.get('interpolated_env')).to eq("correct_setting_env")
+        expect(subject.get('with_dot_env')).to eq("correct_setting_for_dotted_env")
+        expect(subject.get('interpolated_store')).to eq("A")
       end
     end
   end
 
-  context "env placeholders in nested logstash.yml" do
+  context "placeholders in nested logstash.yml" do
+
+    before :each do
+      LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../src/test/resources/logstash.keystore.with.default.pass"))
+    end
 
     before do
-      ENV['lsspecdomain'] = "domain1"
-      ENV['lsspecdomain2'] = "domain2"
+      ENV['lsspecdomain_env'] = "domain1"
+      ENV['lsspecdomain2_env'] = "domain2"
+      ENV['a'] = "wrong_value" # the store should take precedence
     end
 
     after do
-      ENV.delete('lsspecdomain')
-      ENV.delete('lsspecdomain2')
+      ENV.delete('lsspecdomain_env')
+      ENV.delete('lsspecdomain2_env')
+      ENV.delete('a')
     end
 
     subject do
@@ -210,10 +227,12 @@
     end
 
     let(:values) {{
-      "host" => ["dev1.${lsspecdomain}", "dev2.${lsspecdomain}"],
+      "host" => ["dev1.${lsspecdomain_env}", "dev2.${lsspecdomain_env}", "dev3.${a}"],
       "modules" => [
-        {"name" => "${lsspecdomain}", "testing" => "${lsspecdomain}"}, 
-        {"name" => "${lsspecdomain2}", "testing" => "${lsspecdomain2}"}
+        {"name" => "${lsspecdomain_env}", "testing" => "${lsspecdomain_env}"},
+        {"name" => "${lsspecdomain2_env}", "testing" => "${lsspecdomain2_env}"},
+        {"name" => "${a}", "testing" => "${a}"},
+        {"name" => "${b}", "testing" => "${b}"}
       ]
     }}
     let(:yaml_path) do
@@ -230,10 +249,12 @@
       expect(subject.get('host')).to match_array([])
       expect(subject.get('modules')).to match_array([])
       subject.from_yaml(yaml_path)
-      expect(subject.get('host')).to match_array(["dev1.domain1", "dev2.domain1"])
+      expect(subject.get('host')).to match_array(["dev1.domain1", "dev2.domain1", "dev3.A"])
       expect(subject.get('modules')).to match_array([
                                                       {"name" => "domain1", "testing" => "domain1"},
-                                                      {"name" => "domain2", "testing" => "domain2"}
+                                                      {"name" => "domain2", "testing" => "domain2"},
+                                                      {"name" => "A", "testing" => "A"},
+                                                      {"name" => "B", "testing" => "B"}
                                                     ])
     end
   end
diff --git a/logstash-core/spec/logstash/util/secretstore_spec.rb b/logstash-core/spec/logstash/util/secretstore_spec.rb
new file mode 100644
index 00000000000..0856b9fed90
--- /dev/null
+++ b/logstash-core/spec/logstash/util/secretstore_spec.rb
@@ -0,0 +1,69 @@
+require "logstash/util/secretstore"
+require "logstash/settings"
+
+describe LogStash::Util::SecretStore do
+
+  subject {LogStash::Util::SecretStore}
+
+  describe "with missing keystore" do
+    before :each do
+      LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "nothing_here"))
+    end
+
+    it "should be not exist" do
+      expect(subject.exists?).to be_falsy
+      expect(subject.get_if_exists).to be_nil
+    end
+  end
+
+  describe "with implicit password keystore" do
+    before :each do
+      LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../../src/test/resources/logstash.keystore.with.default.pass"))
+    end
+
+    it "should be readable" do
+      expect(subject.get_if_exists.list).to include(subject.get_store_id("keystore.seed"))
+    end
+  end
+
+  describe "with explicit password keystore" do
+    before :each do
+      LogStash::SETTINGS.set("keystore.file", File.join(File.dirname(__FILE__), "../../../src/test/resources/logstash.keystore.with.defined.pass"))
+    end
+
+    describe "and correct password" do
+      before do
+        ENV['LOGSTASH_SECRET_STORE_PASS'] = "mypassword"
+      end
+
+      after do
+        ENV.delete('LOGSTASH_SECRET_STORE_PASS')
+      end
+
+      it "should be readable" do
+        expect(subject.get_if_exists.list).to include(subject.get_store_id("keystore.seed"))
+      end
+    end
+
+    describe "and wrong password" do
+      before do
+        ENV['LOGSTASH_SECRET_STORE_PASS'] = "not_the_correct_password"
+      end
+
+      after do
+        ENV.delete('LOGSTASH_SECRET_STORE_PASS')
+      end
+
+      it "should be not readable" do
+        expect {subject.get_if_exists}.to raise_error.with_message(/Can not access Logstash keystore/)
+      end
+    end
+
+    describe "and missing password" do
+      it "should be not readable" do
+        expect {subject.get_if_exists}.to raise_error.with_message(/Could not determine keystore password/)
+      end
+    end
+  end
+
+end
\ No newline at end of file
diff --git a/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java b/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java
new file mode 100644
index 00000000000..6b763c6e826
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/cli/SecretStoreCli.java
@@ -0,0 +1,189 @@
+package org.logstash.secret.cli;
+
+import org.logstash.secret.SecretIdentifier;
+import org.logstash.secret.store.*;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+import static org.logstash.secret.store.SecretStoreFactory.LOGSTASH_MARKER;
+
+/**
+ * Command line interface for the {@link SecretStore}. <p>Currently expected to be called from Ruby since all the required configuration is currently read from Ruby.</p>
+ * <p>Note - this command line user interface intentionally mirrors Elasticsearch's </p>
+ */
+public class SecretStoreCli {
+
+    private final Terminal terminal;
+    enum Command {
+        CREATE("create"), LIST("list"), ADD("add"), REMOVE("remove"), HELP("--help");
+
+        private final String option;
+
+        Command(String option) {
+            this.option = option;
+        }
+
+        static Optional<Command> fromString(final String input) {
+            Optional<Command> command = EnumSet.allOf(Command.class).stream().filter(c -> c.option.equals(input)).findFirst();
+            return command;
+        }
+    }
+
+    public SecretStoreCli(Terminal terminal){
+        this.terminal = terminal;
+    }
+
+    /**
+     * Entry point to issue a command line command.
+     * @param primaryCommand The string representation of a {@link Command}, if the String does not map to a {@link Command}, then it will show the help menu.
+     * @param config The configuration needed to work a secret store. May be null for help.
+     * @param argument This can be either the identifier for a secret, or a sub command like --help. May be null.
+     */
+    public void command(String primaryCommand, SecureConfig config, String argument) {
+        terminal.writeLine("");
+        final Command command = Command.fromString(primaryCommand).orElse(Command.HELP);
+        final Optional<Command> sub = Command.fromString(argument);
+        boolean help = Command.HELP.equals(sub.orElse(null));
+        switch (command) {
+            case CREATE: {
+                if (help){
+                    terminal.writeLine("Creates a new keystore. For example: 'bin/logstash-keystore create'");
+                    return;
+                }
+                if (SecretStoreFactory.exists(config.clone())) {
+                    terminal.write("An Logstash keystore already exists. Overwrite ? [y/N] ");
+                    if (isYes(terminal.readLine())) {
+                        create(config);
+                    }
+                } else {
+                    create(config);
+                }
+                break;
+            }
+            case LIST: {
+                if (help){
+                    terminal.writeLine("List all secret identifiers from the keystore. For example: " +
+                            "`bin/logstash-keystore list`. Note - only the identifiers will be listed, not the secrets.");
+                    return;
+                }
+                Collection<SecretIdentifier> ids = SecretStoreFactory.load(config).list();
+                List<String> keys = ids.stream().filter(id -> !id.equals(LOGSTASH_MARKER)).map(id -> id.getKey()).collect(Collectors.toList());
+                Collections.sort(keys);
+                keys.forEach(terminal::writeLine);
+                break;
+            }
+            case ADD: {
+                if (help){
+                    terminal.writeLine("Adds a new secret to the keystore. For example: " +
+                            "`bin/logstash-keystore add my-secret`, at the prompt enter your secret. You will use the identifier ${my-secret} in your Logstash configuration.");
+                    return;
+                }
+                if (argument == null || argument.isEmpty()) {
+                    terminal.writeLine("ERROR: You must supply a identifier to add.");
+                    return;
+                }
+                if (SecretStoreFactory.exists(config.clone())) {
+                    SecretIdentifier id = new SecretIdentifier(argument);
+                    SecretStore secretStore = SecretStoreFactory.load(config);
+                    byte[] s = secretStore.retrieveSecret(id);
+                    if (s == null) {
+                        terminal.write(String.format("Enter value for %s: ", argument));
+                        char[] secret = terminal.readSecret();
+                        if(secret == null || secret.length == 0){
+                            terminal.writeLine("ERROR: You must supply a identifier to add.");
+                            return;
+                        }
+                        add(secretStore, id, SecretStoreUtil.asciiCharToBytes(secret));
+                    } else {
+                        SecretStoreUtil.clearBytes(s);
+                        terminal.write(String.format("%s already exists. Overwrite ? [y/N] ", argument));
+                        if (isYes(terminal.readLine())) {
+                            terminal.write(String.format("Enter value for %s: ", argument));
+                            char[] secret = terminal.readSecret();
+                            add(secretStore, id, SecretStoreUtil.asciiCharToBytes(secret));
+                        }
+                    }
+                } else {
+                    terminal.writeLine(String.format("ERROR: Logstash keystore not found. Use 'create' command to create one."));
+                }
+                break;
+            }
+            case REMOVE: {
+                if (help){
+                    terminal.writeLine("Removes a secret from the keystore. For example: " +
+                            "`bin/logstash-keystore remove my-secret`");
+                    return;
+                }
+                if (argument == null || argument.isEmpty()) {
+                    terminal.writeLine("ERROR: You must supply a value to add.");
+                    return;
+                }
+                SecretIdentifier id = new SecretIdentifier(argument);
+
+                SecretStore secretStore = SecretStoreFactory.load(config);
+                byte[] s = secretStore.retrieveSecret(id);
+                if (s == null) {
+                    terminal.writeLine(String.format("ERROR: '%s' does not exist in the Logstash keystore.", argument));
+                } else {
+                    SecretStoreUtil.clearBytes(s);
+                    secretStore.purgeSecret(id);
+                    terminal.writeLine(String.format("Removed '%s' from the Logstash keystore.", id.getKey()));
+                }
+                break;
+            }
+            case HELP: {
+                terminal.writeLine("Usage:");
+                terminal.writeLine("--------");
+                terminal.writeLine("bin/logstash-keystore [option] command [argument]");
+                terminal.writeLine("");
+                terminal.writeLine("Commands:");
+                terminal.writeLine("--------");
+                terminal.writeLine("create - Creates a new Logstash keystore  (e.g. bin/logstash-keystore create)");
+                terminal.writeLine("list   - List entries in the keystore  (e.g. bin/logstash-keystore list)");
+                terminal.writeLine("add    - Add a value to the keystore (e.g. bin/logstash-keystore add my-secret)");
+                terminal.writeLine("remove - Remove a value from the keystore  (e.g. bin/logstash-keystore remove my-secret)");
+                terminal.writeLine("");
+                terminal.writeLine("Argument:");
+                terminal.writeLine("--------");
+                terminal.writeLine("--help - Display command specific help  (e.g. bin/logstash-keystore add --help)");
+                terminal.writeLine("");
+                terminal.writeLine("Options:");
+                terminal.writeLine("--------");
+                terminal.writeLine("--path.settings - Set the directory for the keystore. This is should be the same directory as the logstash.yml settings file. " +
+                        "The default is the config directory under Logstash home. (e.g. bin/logstash-keystore --path.settings /tmp/foo create)");
+                terminal.writeLine("");
+                break;
+            }
+        }
+    }
+
+    private void add(SecretStore secretStore, SecretIdentifier id, byte[] secret) {
+        secretStore.persistSecret(id, secret);
+        terminal.writeLine(String.format("Added '%s' to the Logstash keystore.", id.getKey()));
+        SecretStoreUtil.clearBytes(secret);
+    }
+
+    private void create(SecureConfig config) {
+        if (System.getenv(SecretStoreFactory.ENVIRONMENT_PASS_KEY) == null) {
+            terminal.write(String.format("WARNING: The keystore password is not set. Please set the environment variable `%s`. Failure to do so will result in" +
+                    " reduced security. Continue without password protection on the keystore? [y/N] ", SecretStoreFactory.ENVIRONMENT_PASS_KEY));
+            if (isYes(terminal.readLine())) {
+                deleteThenCreate(config);
+            }
+        } else {
+            deleteThenCreate(config);
+        }
+    }
+
+    private void deleteThenCreate(SecureConfig config) {
+        SecretStoreFactory.delete(config.clone());
+        SecretStoreFactory.create(config.clone());
+        char[] fileLocation = config.getPlainText("keystore.file");
+        terminal.writeLine("Created Logstash keystore" + (fileLocation == null ? "." : " at " + new String(fileLocation)));
+    }
+
+    private static boolean isYes(String response) {
+        return "y".equalsIgnoreCase(response) || "yes".equalsIgnoreCase(response);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/cli/Terminal.java b/logstash-core/src/main/java/org/logstash/secret/cli/Terminal.java
new file mode 100644
index 00000000000..6009ea17c0a
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/secret/cli/Terminal.java
@@ -0,0 +1,69 @@
+package org.logstash.secret.cli;
+
+import java.util.Scanner;
+
+/**
+ * Abstraction over System.console to allow graceful fallback to System.out
+ */
+public class Terminal {
+
+    private static final boolean useConsole = Boolean.valueOf(System.getProperty("cli.console", String.valueOf(System.console() != null)));
+    private static final Scanner scanner = new Scanner(System.in);
+
+    /**
+     * Writes a single line to the output.
+     *
+     * @param line the line to write.
+     */
+    public void writeLine(String line) {
+        if (useConsole) {
+            System.console().writer().println(line);
+            System.console().writer().flush();
+        } else {
+            System.out.println(line);
+        }
+    }
+
+    /**
+     * Writes text to the output, but does not include a new line.
+     *
+     * @param text the text to write.
+     */
+    public void write(String text) {
+        if (useConsole) {
+            System.console().writer().print(text);
+            System.console().writer().flush();
+        } else {
+            System.out.print(text);
+        }
+    }
+
+    /**
+     * Reads a single line
+     *
+     * @return the line
+     */
+    public String readLine() {
+        if (useConsole) {
+            return System.console().readLine();
+        } else {
+            return scanner.next();
+        }
+
+    }
+
+    /**
+     * Reads a secret
+     *
+     * @return the char[] representation of the secret.
+     */
+    public char[] readSecret() {
+        if (useConsole) {
+            return System.console().readPassword();
+        } else {
+            return scanner.next().toCharArray();
+        }
+    }
+
+
+}
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreException.java b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreException.java
index 708e67cff7e..64d765718d7 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreException.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreException.java
@@ -15,7 +15,7 @@ private SecretStoreException(String message) {
         super(message);
     }
 
-      static public class RetrievalException extends SecretStoreException {
+    static public class RetrievalException extends SecretStoreException {
         public RetrievalException(SecretIdentifier secretIdentifier, Throwable cause) {
             super(String.format("Error while trying to retrieve secret %s", secretIdentifier.toExternalForm()), cause);
         }
@@ -31,6 +31,7 @@ static public class CreateException extends SecretStoreException {
         public CreateException(String message, Throwable cause) {
             super(message, cause);
         }
+
         public CreateException(String message) {
             super(message);
         }
@@ -93,5 +94,4 @@ public InvalidConfigurationException(String message) {
     }
 
 
-
 }
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
index 2a2bc1c8a67..8280bf0b842 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecretStoreFactory.java
@@ -29,6 +29,7 @@ private enum MODE {LOAD, CREATE, EXISTS, DELETE}
 
     /**
      * Determine if this secret store currently exists
+     * @return true if the secret store exists, false otherwise
      */
     public static boolean exists(SecureConfig secureConfig) {
         return doIt(MODE.EXISTS, secureConfig).exists(secureConfig);
@@ -38,8 +39,7 @@ public static boolean exists(SecureConfig secureConfig) {
      * Creates a new {@link SecretStore} based on the provided configuration
      *
      * @param secureConfig The configuration to pass to the implementation
-     * @return the newly created SecretStore
-     * @throws {@link SecretStoreException} if errors occur while loading, or if store already exists
+     * @return the newly created SecretStore, throws {@link SecretStoreException} if errors occur while loading, or if store already exists
      */
     static public SecretStore create(SecureConfig secureConfig) {
         return doIt(MODE.CREATE, secureConfig);
@@ -49,7 +49,7 @@ static public SecretStore create(SecureConfig secureConfig) {
      * Deletes a {@link SecretStore} based on the provided configuration
      *
      * @param secureConfig The configuration to pass to the implementation
-     * @throws {@link SecretStoreException} if errors occur
+     * throws {@link SecretStoreException} if errors occur
      */
     static public void delete(SecureConfig secureConfig) {
         doIt(MODE.DELETE, secureConfig);
@@ -59,8 +59,7 @@ static public void delete(SecureConfig secureConfig) {
      * Loads an existing {@link SecretStore} based on the provided configuration
      *
      * @param secureConfig The configuration to pass to the implementation
-     * @return the loaded SecretStore
-     * @throws {@link SecretStoreException} if errors occur while loading, or if store does not exist
+     * @return the loaded SecretStore, throws {@link SecretStoreException} if errors occur while loading, or if store does not exist
      */
     static public SecretStore load(SecureConfig secureConfig) {
         return doIt(MODE.LOAD, secureConfig);
@@ -90,8 +89,8 @@ private static SecretStore doIt(MODE mode, SecureConfig secureConfig) {
             }
         } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
             throw new SecretStoreException.ImplementationNotFoundException(
-                    String.format("Could not %s class %s, please ensure it is on the Java classpath, implements org.logstash.secret.store.SecretStore, and has a zero " +
-                            "argument constructor", mode.name().toLowerCase(), className), e);
+                    String.format("Could not %s class %s, please validate the `keystore.classname` is configured correctly and that the class can be loaded by Logstash ", mode
+                                    .name().toLowerCase(), className), e);
         }
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/SecureConfig.java b/logstash-core/src/main/java/org/logstash/secret/store/SecureConfig.java
index 81f3cfdeb6b..07b70e90a93 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/SecureConfig.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/SecureConfig.java
@@ -5,7 +5,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * A String -> char[] container that holds a referenced char[] obfuscated in memory and allows for easy clearing all values from memory.
+ * A String to char[] container that holds a referenced char[] obfuscated in memory and allows for easy clearing all values from memory.
  */
 public class SecureConfig {
 
diff --git a/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java b/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
index bde6b3db8a5..ca635d24ce1 100644
--- a/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
+++ b/logstash-core/src/main/java/org/logstash/secret/store/backend/JavaKeyStore.java
@@ -92,8 +92,11 @@ public JavaKeyStore create(SecureConfig config) {
             }
         } catch (SecretStoreException sse) {
             throw sse;
+        } catch (NoSuchFileException | AccessDeniedException fe) {
+            throw new SecretStoreException.CreateException("Error while trying to create the Logstash keystore. Please ensure that path to " + keyStorePath.toAbsolutePath() +
+                    " exists and is writable", fe);
         } catch (Exception e) { //should never happen
-            throw new SecretStoreException.UnknownException("Error while trying to create the Logstash keystore", e);
+            throw new SecretStoreException.UnknownException("Error while trying to create the Logstash keystore. ", e);
         } finally {
             releaseLock(writeLock);
             config.clearValues();
@@ -122,13 +125,13 @@ public void delete(SecureConfig config) {
      * {@inheritDoc}
      *
      * @param config The configuration for this keystore <p>Requires "keystore.file" in the configuration</p>
-     * @throws SecretStoreException.InvalidConfigurationException if "keystore.file" is not defined in the config
      */
     @Override
     public boolean exists(SecureConfig config) {
         char[] path = config.getPlainText(PATH_KEY);
         if (!valid(path)) {
-            throw new SecretStoreException.InvalidConfigurationException("Logstash keystore path (keystore.file) must be defined");
+            LOGGER.warn("keystore.file configuration is not defined"); // should only every happen via tests
+            return false;
         }
         return new File(new String(path)).exists();
     }
@@ -243,7 +246,7 @@ public JavaKeyStore load(SecureConfig config) {
         if (!exists(config)) {
             throw new SecretStoreException.LoadException(
                     String.format("Can not find Logstash keystore at %s. Please verify this file exists and is a valid Logstash keystore.",
-                            new String(config.getPlainText("keystore.file"))));
+                            config.getPlainText("keystore.file") == null ? "<undefined>" : new String(config.getPlainText("keystore.file"))));
         }
         try {
             init(config);
diff --git a/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java b/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java
new file mode 100644
index 00000000000..261af4365a8
--- /dev/null
+++ b/logstash-core/src/test/java/org/logstash/secret/cli/SecretStoreCliTest.java
@@ -0,0 +1,238 @@
+package org.logstash.secret.cli;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+import org.logstash.secret.store.SecureConfig;
+
+import java.nio.file.Paths;
+import java.util.UUID;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class SecretStoreCliTest {
+
+    private TestTerminal terminal;
+    private SecretStoreCli cli;
+    private SecureConfig existingStoreConfig;
+    private SecureConfig newStoreConfig;
+
+    @Rule
+    public TemporaryFolder folder = new TemporaryFolder();
+
+    @Before
+    public void _setup() throws Exception {
+        terminal = new TestTerminal();
+        cli = new SecretStoreCli(terminal);
+        existingStoreConfig = new SecureConfig();
+        existingStoreConfig.add("keystore.file",
+                Paths.get(this.getClass().getClassLoader().getResource("logstash.keystore.with.default.pass").toURI()).toString().toCharArray());
+        char[] keyStorePath = folder.newFolder().toPath().resolve("logstash.keystore").toString().toCharArray();
+        newStoreConfig = new SecureConfig();
+        newStoreConfig.add("keystore.file", keyStorePath.clone());
+
+    }
+
+    @Test
+    public void testBadCommand() {
+        cli.command("nonsense", null, null);
+        assertPrimaryHelped();
+    }
+
+    @Test
+    public void testHelpAdd() {
+        cli.command("add", null, "--help");
+        assertThat(terminal.out).containsIgnoringCase("Adds a new secret to the keystore");
+    }
+
+    @Test
+    public void testHelpCreate() {
+        cli.command("create", null, "--help");
+        assertThat(terminal.out).containsIgnoringCase("Creates a new keystore");
+    }
+
+    @Test
+    public void testHelpList() {
+        cli.command("list", null, "--help");
+        assertThat(terminal.out).containsIgnoringCase("List all secret identifiers from the keystore");
+    }
+
+    @Test
+    public void testHelpRemove() {
+        cli.command("remove", null, "--help");
+        assertThat(terminal.out).containsIgnoringCase("Removes a secret from the keystore");
+    }
+
+    @Test
+    public void testList() {
+        cli.command("list", existingStoreConfig, null);
+
+       // contents of the existing store is a-z for both the key and value
+        for (int i = 65; i <= 90; i++) {
+            String expected = new String(new byte[]{(byte) i});
+            assertListed(expected.toLowerCase());
+        }
+        assertThat(terminal.out).doesNotContain("keystore.seed");
+    }
+
+    @Test
+    public void testCreateNewAllYes() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+    }
+
+    @Test
+    public void testCreateNewAllNo() {
+        terminal.in = "n";
+        cli.command("create", newStoreConfig, null);
+        assertNotCreated();
+    }
+
+    @Test
+    public void testCreateNoEnvironmentWarning() {
+        cli.command("create", newStoreConfig, null);
+        assertThat(terminal.out).contains("Please set the environment variable `LOGSTASH_KEYSTORE_PASS`. Failure to do so will result in reduced security.");
+    }
+
+
+    @Test
+    public void testDoubleCreateWarning() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+        terminal.reset();
+
+        cli.command("create", newStoreConfig, null);
+        assertThat(terminal.out).contains("Overwrite");
+        assertNotCreated();
+    }
+
+    @Test
+    public void testAddEmptyValue() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+        terminal.reset();
+
+        terminal.in = ""; // sets the value
+        String id = UUID.randomUUID().toString();
+        cli.command("add", newStoreConfig.clone(), id);
+        assertThat(terminal.out).containsIgnoringCase("ERROR");
+    }
+
+    @Test
+    public void testAdd() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+        terminal.reset();
+
+        terminal.in = UUID.randomUUID().toString(); // sets the value
+        String id = UUID.randomUUID().toString();
+        cli.command("add", newStoreConfig.clone(), id);
+        terminal.reset();
+
+        cli.command("list", newStoreConfig, null);
+        assertListed(id);
+    }
+
+    @Test
+    public void testRemove() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+        terminal.reset();
+
+        terminal.in = UUID.randomUUID().toString(); // sets the value
+        String id = UUID.randomUUID().toString();
+        cli.command("add", newStoreConfig.clone(), id);
+        System.out.println(terminal.out);
+        terminal.reset();
+
+        cli.command("list", newStoreConfig.clone(), null);
+        assertListed(id);
+        terminal.reset();
+
+        cli.command("remove", newStoreConfig.clone(), id);
+        terminal.reset();
+
+        cli.command("list", newStoreConfig, null);
+        assertThat(terminal.out).doesNotContain(id);
+    }
+
+    @Test
+    public void testRemoveMissing() {
+        terminal.in = "y";
+        cli.command("create", newStoreConfig, null);
+        assertCreated();
+        terminal.reset();
+
+        terminal.in = UUID.randomUUID().toString(); // sets the value
+        String id = UUID.randomUUID().toString();
+        cli.command("add", newStoreConfig.clone(), id);
+        System.out.println(terminal.out);
+        terminal.reset();
+
+        cli.command("list", newStoreConfig.clone(), null);
+        assertListed(id);
+        terminal.reset();
+
+        cli.command("remove", newStoreConfig.clone(), "notthere");
+        assertThat(terminal.out).containsIgnoringCase("error");
+    }
+
+
+    private void assertNotCreated() {
+        assertThat(terminal.out).doesNotContain("Created Logstash keystore");
+    }
+
+    private void assertCreated() {
+        assertThat(terminal.out).contains("Created Logstash keystore");
+    }
+
+    private void assertListed(String expected) {
+        assertThat(terminal.out).contains(expected);
+    }
+
+    private void assertPrimaryHelped() {
+        assertThat(terminal.out).
+                containsIgnoringCase("Commands").
+                containsIgnoringCase("create").
+                containsIgnoringCase("list").
+                containsIgnoringCase("add").
+                containsIgnoringCase("remove");
+    }
+
+
+    class TestTerminal extends Terminal {
+        public String out = "";
+        public String in = "";
+
+        @Override
+        public void writeLine(String text) {
+            out += text + "\n";
+        }
+
+        @Override
+        public void write(String text) {
+            out += text;
+        }
+
+        @Override
+        public String readLine() {
+            return in;
+        }
+
+        @Override
+        public char[] readSecret() {
+            return in.toCharArray();
+        }
+
+        public void reset() {
+            in = "";
+            out = "";
+        }
+    }
+}
\ No newline at end of file
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
index 746d84b459c..c80de193a15 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/SecretStoreFactoryTest.java
@@ -148,7 +148,7 @@ public void testDefaultLoadWithEnvPass() throws Exception {
      */
     @Test
     public void testErrorLoading() {
-        thrown.expect(SecretStoreException.InvalidConfigurationException.class);
+        thrown.expect(SecretStoreException.LoadException.class);
         //default implementation requires a path
         SecretStoreFactory.load(new SecureConfig());
     }
diff --git a/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java b/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
index 3effd794c02..7594976ad3d 100644
--- a/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
+++ b/logstash-core/src/test/java/org/logstash/secret/store/backend/JavaKeyStoreTest.java
@@ -154,6 +154,14 @@ public void basicTest() {
         assertThat(secret).isNull();
     }
 
+    @Test (expected = SecretStoreException.CreateException.class)
+    public void invalidDirectory() throws IOException {
+        keyStorePath = Paths.get("/doesnt_exist_root_volume").resolve("logstash.keystore").toString().toCharArray();
+        SecureConfig secureConfig = new SecureConfig();
+        secureConfig.add("keystore.file", keyStorePath.clone());
+        keyStore = new JavaKeyStore().create(secureConfig);
+    }
+
     /**
      * Tests that the magic marker that identifies this a logstash keystore is present.  This marker helps to ensure that we are only dealing with our keystore, we do not want
      * to support arbitrary keystores.
@@ -558,7 +566,7 @@ public void testLoadNotCreated() throws IOException {
 
     @Test
     public void testNoPathDefined() {
-        thrown.expect(SecretStoreException.InvalidConfigurationException.class);
+        thrown.expect(SecretStoreException.LoadException.class);
         new JavaKeyStore().load(new SecureConfig());
     }
 
diff --git a/rakelib/artifacts.rake b/rakelib/artifacts.rake
index 37289c66fca..68606c8de62 100644
--- a/rakelib/artifacts.rake
+++ b/rakelib/artifacts.rake
@@ -16,6 +16,7 @@ namespace "artifact" do
       "lib/bootstrap/**/*",
       "lib/pluginmanager/**/*",
       "lib/systeminstall/**/*",
+      "lib/secretstore/**/*",
 
       "logstash-core/lib/**/*",
       "logstash-core/locales/**/*",
