diff --git a/logstash-core/lib/logstash/java_pipeline.rb b/logstash-core/lib/logstash/java_pipeline.rb
index 9fe94389b98..183a7cf4848 100644
--- a/logstash-core/lib/logstash/java_pipeline.rb
+++ b/logstash-core/lib/logstash/java_pipeline.rb
@@ -280,7 +280,7 @@ def start_input(plugin)
   def inputworker(plugin)
     Util::set_thread_name("[#{pipeline_id}]<#{plugin.class.config_name}")
     begin
-      plugin.run(LogStash::WrappedWriteClient.new(input_queue_client, pipeline_id.to_s.to_sym, metric, plugin.id.to_sym))
+      plugin.run(wrapped_write_client(plugin.id.to_sym))
     rescue => e
       if plugin.stop?
         @logger.debug("Input plugin raised exception during shutdown, ignoring it.",
diff --git a/logstash-core/lib/logstash/pipeline.rb b/logstash-core/lib/logstash/pipeline.rb
index 3dad1d7a537..2f648a147b3 100644
--- a/logstash-core/lib/logstash/pipeline.rb
+++ b/logstash-core/lib/logstash/pipeline.rb
@@ -20,7 +20,6 @@ module LogStash; class BasePipeline < AbstractPipeline
   def initialize(pipeline_config, namespaced_metric = nil, agent = nil)
     @logger = self.logger
     super pipeline_config, namespaced_metric, @logger
-    @mutex = Mutex.new
 
     @inputs = nil
     @filters = nil
@@ -618,11 +617,4 @@ def default_logging_keys(other_keys = {})
   def draining_queue?
     @drain_queue ? !@filter_queue_client.empty? : false
   end
-
-  def wrapped_write_client(plugin_id)
-    #need to ensure that metrics are initialized one plugin at a time, else a race condition can exist.
-    @mutex.synchronize do
-      LogStash::WrappedWriteClient.new(input_queue_client, pipeline_id.to_s.to_sym, metric, plugin_id)
-    end
-  end
 end; end
diff --git a/logstash-core/spec/logstash/filter_delegator_spec.rb b/logstash-core/spec/logstash/filter_delegator_spec.rb
index 9dd73427f92..000e1f9aca7 100644
--- a/logstash-core/spec/logstash/filter_delegator_spec.rb
+++ b/logstash-core/spec/logstash/filter_delegator_spec.rb
@@ -1,34 +1,24 @@
 # encoding: utf-8
 require "spec_helper"
+require 'logstash/instrument/collector'
 require "logstash/filter_delegator"
 require "logstash/event"
 require "support/shared_contexts"
 
 describe LogStash::FilterDelegator do
 
-  class MockGauge
-    def increment(_)
-    end
-  end
-
   include_context "execution_context"
 
   let(:filter_id) { "my-filter" }
   let(:config) do
     { "host" => "127.0.0.1", "id" => filter_id }
   end
-  let(:counter_in) { MockGauge.new }
-  let(:counter_out) { MockGauge.new }
-  let(:counter_time) { MockGauge.new }
-  let(:metric) { LogStash::Instrument::NamespacedNullMetric.new(nil, :null) }
+  let(:collector) {LogStash::Instrument::Collector.new}
+  let(:metric) { LogStash::Instrument::Metric.new(collector).namespace(:null) }
   let(:events) { [LogStash::Event.new, LogStash::Event.new] }
 
   before :each do
     allow(pipeline).to receive(:id).and_return(pipeline_id)
-    allow(metric).to receive(:namespace).with(anything).and_return(metric)
-    allow(metric).to receive(:counter).with(:in).and_return(counter_in)
-    allow(metric).to receive(:counter).with(:out).and_return(counter_out)
-    allow(metric).to receive(:counter).with(:duration_in_millis).and_return(counter_time)
   end
 
   let(:plugin_klass) do
@@ -67,8 +57,8 @@ def filter(event)
     context "when the flush return events" do
       it "increments the out" do
         subject.multi_filter([LogStash::Event.new])
-        expect(counter_out).to receive(:increment).with(1)
         subject.flush({})
+        expect(collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events][:out].value).to eq(1)
       end
     end
 
@@ -80,18 +70,15 @@ def filter(event)
     end
 
     context "when the filter buffer events" do
-      before do
-        allow(metric).to receive(:increment).with(anything, anything)
-      end
 
       it "has incremented :in" do
-        expect(counter_in).to receive(:increment).with(events.size)
         subject.multi_filter(events)
+        expect(collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events][:in].value).to eq(events.size)
       end
 
       it "has not incremented :out" do
-        expect(counter_out).not_to receive(:increment).with(anything)
         subject.multi_filter(events)
+        expect(collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events][:out].value).to eq(0)
       end
     end
 
@@ -116,10 +103,10 @@ def filter(event)
       end
 
       it "increments the in/out of the metric" do
-        expect(counter_in).to receive(:increment).with(events.size)
-        expect(counter_out).to receive(:increment).with(events.size * 2)
-
         subject.multi_filter(events)
+        event_metrics = collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events]
+        expect(event_metrics[:in].value).to eq(events.size)
+        expect(event_metrics[:out].value).to eq(2 * events.size)
       end
     end
   end
@@ -145,10 +132,10 @@ def filter(event)
     end
 
     it "increments the in/out of the metric" do
-      expect(counter_in).to receive(:increment).with(events.size)
-      expect(counter_out).to receive(:increment).with(events.size)
-
       subject.multi_filter(events)
+      event_metrics = collector.snapshot_metric.metric_store.get_with_path("/null")[:null]["my-filter".to_sym][:events]
+      expect(event_metrics[:in].value).to eq(events.size)
+      expect(event_metrics[:out].value).to eq(events.size)
     end
   end
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/AbstractOutputDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/AbstractOutputDelegatorExt.java
index 2ba166c6037..ecc921b46fa 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/AbstractOutputDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/AbstractOutputDelegatorExt.java
@@ -25,7 +25,7 @@ public abstract class AbstractOutputDelegatorExt extends RubyObject {
 
     protected AbstractNamespacedMetricExt namespacedMetric;
 
-    private IRubyObject metricEvents;
+    private AbstractNamespacedMetricExt metricEvents;
 
     private RubyString id;
 
diff --git a/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java b/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
index 0bf40eca53c..436f0dff72f 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/compiler/FilterDelegatorExt.java
@@ -29,7 +29,7 @@ public final class FilterDelegatorExt extends RubyObject {
 
     private IRubyObject filter;
 
-    private IRubyObject metricEvents;
+    private AbstractNamespacedMetricExt metricEvents;
 
     private RubyString id;
 
diff --git a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
index 33ac3b33212..b75d28ccd07 100644
--- a/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
+++ b/logstash-core/src/main/java/org/logstash/execution/AbstractPipelineExt.java
@@ -21,6 +21,7 @@
 import org.jruby.anno.JRubyMethod;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.ThreadContext;
+import org.jruby.runtime.Visibility;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.ackedqueue.QueueFactoryExt;
@@ -31,6 +32,7 @@
 import org.logstash.config.ir.ConfigCompiler;
 import org.logstash.config.ir.PipelineIR;
 import org.logstash.ext.JRubyAbstractQueueWriteClientExt;
+import org.logstash.ext.JRubyWrappedWriteClientExt;
 import org.logstash.instrument.metrics.AbstractMetricExt;
 import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
@@ -74,9 +76,6 @@ public class AbstractPipelineExt extends RubyBasicObject {
 
     private static final RubySymbol DLQ_KEY = RubyUtil.RUBY.newSymbol("dlq");
 
-    private static final RubySymbol DLQ_SIZE_KEY =
-        RubyUtil.RUBY.newSymbol("queue_size_in_bytes");
-
     protected PipelineIR lir;
 
     private final RubyString ephemeralId = RubyUtil.RUBY.newString(UUID.randomUUID().toString());
@@ -240,7 +239,7 @@ public final PipelineReporterExt reporter() {
     public final IRubyObject collectDlqStats(final ThreadContext context) {
         if (dlqEnabled(context).isTrue()) {
             getDlqMetric(context).gauge(
-                context, DLQ_SIZE_KEY,
+                context, QUEUE_SIZE_IN_BYTES,
                 dlqWriter(context).callMethod(context, "get_current_queue_size")
             );
         }
@@ -308,6 +307,13 @@ public final AbstractWrappedQueueExt queue() {
         return queue;
     }
 
+    @JRubyMethod(name = "wrapped_write_client", visibility = Visibility.PROTECTED)
+    public final JRubyWrappedWriteClientExt wrappedWriteClient(final ThreadContext context,
+        final IRubyObject pluginId) {
+        return new JRubyWrappedWriteClientExt(context.runtime, RubyUtil.WRAPPED_WRITE_CLIENT_CLASS)
+            .initialize(inputQueueClient, pipelineId.asJavaString(), metric, pluginId);
+    }
+
     protected final IRubyObject getSetting(final ThreadContext context, final String name) {
         return settings.callMethod(context, "get_value", context.runtime.newString(name));
     }
diff --git a/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java b/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
index 3f29c752ec0..ce569783f29 100644
--- a/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
+++ b/logstash-core/src/main/java/org/logstash/execution/QueueReadClientBase.java
@@ -12,6 +12,7 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
+import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.counter.LongCounter;
 
@@ -48,25 +49,28 @@ public RubyHash rubyGetInflightBatches(final ThreadContext context) {
         return result;
     }
 
-    @JRubyMethod(name = "set_events_metric", required = 1)
-    public IRubyObject setEventsMetric(final ThreadContext context, IRubyObject metric) {
-        eventMetricOut = LongCounter.fromRubyBase(metric, MetricKeys.OUT_KEY);
-        eventMetricFiltered = LongCounter.fromRubyBase(metric, MetricKeys.FILTERED_KEY);
-        eventMetricTime = LongCounter.fromRubyBase(metric, MetricKeys.DURATION_IN_MILLIS_KEY);
+    @JRubyMethod(name = "set_events_metric")
+    public IRubyObject setEventsMetric(final IRubyObject metric) {
+        final AbstractNamespacedMetricExt namespacedMetric = (AbstractNamespacedMetricExt) metric;
+        eventMetricOut = LongCounter.fromRubyBase(namespacedMetric, MetricKeys.OUT_KEY);
+        eventMetricFiltered = LongCounter.fromRubyBase(namespacedMetric, MetricKeys.FILTERED_KEY);
+        eventMetricTime = LongCounter.fromRubyBase(namespacedMetric, MetricKeys.DURATION_IN_MILLIS_KEY);
         return this;
     }
 
-    @JRubyMethod(name = "set_pipeline_metric", required = 1)
-    public IRubyObject setPipelineMetric(final ThreadContext context, IRubyObject metric) {
-        pipelineMetricOut = LongCounter.fromRubyBase(metric, MetricKeys.OUT_KEY);
-        pipelineMetricFiltered = LongCounter.fromRubyBase(metric, MetricKeys.FILTERED_KEY);
-        pipelineMetricTime = LongCounter.fromRubyBase(metric, MetricKeys.DURATION_IN_MILLIS_KEY);
+    @JRubyMethod(name = "set_pipeline_metric")
+    public IRubyObject setPipelineMetric(final IRubyObject metric) {
+        final AbstractNamespacedMetricExt namespacedMetric = (AbstractNamespacedMetricExt) metric;
+        pipelineMetricOut = LongCounter.fromRubyBase(namespacedMetric, MetricKeys.OUT_KEY);
+        pipelineMetricFiltered = LongCounter.fromRubyBase(namespacedMetric, MetricKeys.FILTERED_KEY);
+        pipelineMetricTime =
+            LongCounter.fromRubyBase(namespacedMetric, MetricKeys.DURATION_IN_MILLIS_KEY);
         return this;
     }
 
     @JRubyMethod(name = "set_batch_dimensions")
-    public IRubyObject rubySetBatchDimensions(final ThreadContext context, IRubyObject batchSize,
-                                              IRubyObject waitForMillis) {
+    public IRubyObject rubySetBatchDimensions(final IRubyObject batchSize,
+        final IRubyObject waitForMillis) {
         setBatchDimensions(((RubyNumeric) batchSize).getIntValue(),
                 ((RubyNumeric) waitForMillis).getIntValue());
         return this;
@@ -115,7 +119,7 @@ public void closeBatch(QueueBatch batch) throws IOException {
      * original pipeline and rspec tests.
      */
     @JRubyMethod(name = "close_batch")
-    public void rubyCloseBatch(final ThreadContext context, IRubyObject batch) throws IOException {
+    public void rubyCloseBatch(final IRubyObject batch) throws IOException {
         closeBatch(extractQueueBatch(batch));
     }
 
@@ -124,7 +128,7 @@ public void rubyCloseBatch(final ThreadContext context, IRubyObject batch) throw
      * only in the original pipeline and rspec tests.
      */
     @JRubyMethod(name = "start_metrics")
-    public void rubyStartMetrics(final ThreadContext context, IRubyObject batch) {
+    public void rubyStartMetrics(final IRubyObject batch) {
         startMetrics(extractQueueBatch(batch));
     }
 
@@ -146,7 +150,7 @@ private static QueueBatch extractQueueBatch(final IRubyObject batch) {
      * only in the original pipeline and rspec tests.
      */
     @JRubyMethod(name = "add_filtered_metrics")
-    public void rubyAddFilteredMetrics(final ThreadContext context, IRubyObject size) {
+    public void rubyAddFilteredMetrics(final IRubyObject size) {
         addFilteredMetrics(((RubyNumeric)size).getIntValue());
     }
 
@@ -155,7 +159,7 @@ public void rubyAddFilteredMetrics(final ThreadContext context, IRubyObject size
      * only in the original pipeline and rspec tests.
      */
     @JRubyMethod(name = "add_output_metrics")
-    public void rubyAddOutputMetrics(final ThreadContext context, IRubyObject size) {
+    public void rubyAddOutputMetrics(final IRubyObject size) {
         addOutputMetrics(((RubyNumeric)size).getIntValue());
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
index 127e5570463..63db1adc4a4 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JRubyWrappedWriteClientExt.java
@@ -13,6 +13,7 @@
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.instrument.metrics.AbstractMetricExt;
+import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricKeys;
 import org.logstash.instrument.metrics.counter.LongCounter;
 
@@ -39,20 +40,25 @@ public JRubyWrappedWriteClientExt(final Ruby runtime, final RubyClass metaClass)
 
     @JRubyMethod(required = 4)
     public IRubyObject initialize(final ThreadContext context, final IRubyObject[] args) {
-        this.writeClient = (JRubyAbstractQueueWriteClientExt) args[0];
-        final String pipelineId = args[1].asJavaString();
-        final AbstractMetricExt metric = (AbstractMetricExt) args[2];
+        return initialize((JRubyAbstractQueueWriteClientExt) args[0], args[1].asJavaString(),
+            (AbstractMetricExt) args[2], args[3]);
+    }
+
+    public JRubyWrappedWriteClientExt initialize(
+        final JRubyAbstractQueueWriteClientExt queueWriteClientExt, final String pipelineId,
+        final AbstractMetricExt metric, final IRubyObject pluginId) {
+        this.writeClient = queueWriteClientExt;
         // Synchronize on the metric since setting up new fields on it is not threadsafe
         synchronized (metric) {
-            final IRubyObject pluginId = args[3];
-            final IRubyObject eventsMetrics = getMetric(metric, "stats", "events");
+            final AbstractNamespacedMetricExt eventsMetrics =
+                getMetric(metric, "stats", "events");
             eventsMetricsCounter = LongCounter.fromRubyBase(eventsMetrics, MetricKeys.IN_KEY);
             eventsMetricsTime = LongCounter.fromRubyBase(eventsMetrics, PUSH_DURATION_KEY);
-            final IRubyObject pipelineMetrics =
+            final AbstractNamespacedMetricExt pipelineMetrics =
                 getMetric(metric, "stats", "pipelines", pipelineId, "events");
             pipelineMetricsCounter = LongCounter.fromRubyBase(pipelineMetrics, MetricKeys.IN_KEY);
             pipelineMetricsTime = LongCounter.fromRubyBase(pipelineMetrics, PUSH_DURATION_KEY);
-            final IRubyObject pluginMetrics = getMetric(
+            final AbstractNamespacedMetricExt pluginMetrics = getMetric(
                 metric, "stats", "pipelines", pipelineId, "plugins", "inputs",
                 pluginId.asJavaString(), "events"
             );
@@ -113,7 +119,8 @@ private void incrementTimers(final long start) {
         pluginMetricsTime.increment(increment);
     }
 
-    private static IRubyObject getMetric(final AbstractMetricExt base, final String... keys) {
+    private static AbstractNamespacedMetricExt getMetric(final AbstractMetricExt base,
+        final String... keys) {
         return base.namespace(RubyUtil.RUBY.getCurrentContext(), toSymbolArray(keys));
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
index a8b6cb5f994..5211c5b80c1 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyTimestampExtLibrary.java
@@ -134,7 +134,7 @@ public IRubyObject ruby_to_json(ThreadContext context, IRubyObject[] args)
             return RubyString.newString(context.runtime,  "\"" + this.timestamp.toString() + "\"");
         }
 
-        @JRubyMethod(name = "coerce", required = 1, meta = true)
+        @JRubyMethod(name = "coerce", meta = true)
         public static IRubyObject ruby_coerce(ThreadContext context, IRubyObject recv, IRubyObject time)
         {
             try {
@@ -160,7 +160,7 @@ public static IRubyObject ruby_coerce(ThreadContext context, IRubyObject recv, I
             }
          }
 
-        @JRubyMethod(name = "parse_iso8601", required = 1, meta = true)
+        @JRubyMethod(name = "parse_iso8601", meta = true)
         public static IRubyObject ruby_parse_iso8601(ThreadContext context, IRubyObject recv, IRubyObject time)
         {
             if (time instanceof RubyString) {
@@ -199,13 +199,13 @@ public static JrubyTimestampExtLibrary.RubyTimestamp ruby_now(ThreadContext cont
         }
 
         @JRubyMethod(name = "utc")
-        public IRubyObject ruby_utc(ThreadContext context)
+        public IRubyObject ruby_utc()
         {
             return this;
         }
 
         @JRubyMethod(name = "gmtime")
-        public IRubyObject ruby_gmtime(ThreadContext context)
+        public IRubyObject ruby_gmtime()
         {
             return this;
         }
@@ -222,7 +222,7 @@ public IRubyObject ruby_year(ThreadContext context)
             return RubyFixnum.newFixnum(context.runtime, this.timestamp.getTime().getYear());
         }
 
-        @JRubyMethod(name = "<=>", required = 1)
+        @JRubyMethod(name = "<=>")
         public IRubyObject op_cmp(final ThreadContext context, final IRubyObject other) {
             if (other instanceof JrubyTimestampExtLibrary.RubyTimestamp) {
                 return ruby_time(context).op_cmp(
@@ -264,19 +264,19 @@ public IRubyObject op_lt(final ThreadContext context, final IRubyObject other) {
             return RubyComparable.op_lt(context, this, other);
         }
 
-        @JRubyMethod(name = {"eql?", "=="}, required = 1)
+        @JRubyMethod(name = {"eql?", "=="})
         public IRubyObject eql(final ThreadContext context, final IRubyObject other) {
             return this == other || other.getClass() == JrubyTimestampExtLibrary.RubyTimestamp.class
                 && timestamp.equals(((JrubyTimestampExtLibrary.RubyTimestamp) other).timestamp)
                 ? context.tru : context.fals;
         }
 
-        @JRubyMethod(name = "+", required = 1)
+        @JRubyMethod(name = "+")
         public IRubyObject plus(final ThreadContext context, final IRubyObject val) {
             return this.ruby_time(context).callMethod(context, "+", val);
         }
 
-        @JRubyMethod(name = "-", required = 1)
+        @JRubyMethod(name = "-")
         public IRubyObject minus(final ThreadContext context, final IRubyObject val) {
             return this.ruby_time(context).callMethod(
                 context, "-",
diff --git a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
index 5ee9cf4f180..1b08395b90f 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/metrics/counter/LongCounter.java
@@ -6,6 +6,7 @@
 import org.jruby.runtime.builtin.IRubyObject;
 import org.logstash.RubyUtil;
 import org.logstash.instrument.metrics.AbstractMetric;
+import org.logstash.instrument.metrics.AbstractNamespacedMetricExt;
 import org.logstash.instrument.metrics.MetricType;
 
 /**
@@ -29,9 +30,10 @@ public class LongCounter extends AbstractMetric<Long> implements CounterMetric<L
      * @return either the backing LongCounter or {@link #DUMMY_COUNTER} in case the input
      * {@code metric} was a Ruby {@code LogStash::Instrument::NullMetric}
      */
-    public static LongCounter fromRubyBase(final IRubyObject metric, final RubySymbol key) {
+    public static LongCounter fromRubyBase(final AbstractNamespacedMetricExt metric,
+        final RubySymbol key) {
         final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
-        final IRubyObject counter = metric.callMethod(context, "counter", key);
+        final IRubyObject counter = metric.counter(context, key);
         counter.callMethod(context, "increment", context.runtime.newFixnum(0));
         final LongCounter javaCounter;
         if (LongCounter.class.isAssignableFrom(counter.getJavaClass())) {
diff --git a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
index 6bded78736a..08271ed642c 100644
--- a/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
+++ b/logstash-core/src/main/java/org/logstash/instrument/witness/pipeline/ReloadWitness.java
@@ -26,7 +26,6 @@ public final class ReloadWitness implements SerializableWitness {
     private final RubyTimeStampGauge lastSuccessTimestamp;
     private final RubyTimeStampGauge lastFailureTimestamp;
     private final Snitch snitch;
-    private static final Serializer SERIALIZER = new Serializer();
 
     private static final String KEY = "reloads";
 
diff --git a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
index b067784d957..bc641c3df28 100644
--- a/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
+++ b/logstash-core/src/main/java/org/logstash/plugins/PluginFactoryExt.java
@@ -59,7 +59,7 @@ public static IRubyObject filterDelegator(final ThreadContext context,
             final RubyString id = (RubyString) arguments.op_aref(context, ID_KEY);
             filterInstance.callMethod(
                 context, "metric=",
-                args[3].callMethod(context, "namespace", id.intern19())
+                ((AbstractMetricExt) args[3]).namespace(context, id.intern19())
             );
             filterInstance.callMethod(context, "execution_context=", args[4]);
             return args[0].callMethod(context, "new", new IRubyObject[]{filterInstance, id});
