diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
index db467d109d5..ce79312cfe7 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/Queue.java
@@ -25,7 +25,7 @@
 import org.logstash.ackedqueue.io.CheckpointIO;
 import org.logstash.ackedqueue.io.FileCheckpointIO;
 import org.logstash.ackedqueue.io.LongVector;
-import org.logstash.ackedqueue.io.MmapPageIO;
+import org.logstash.ackedqueue.io.MmapPageIOV2;
 import org.logstash.ackedqueue.io.PageIO;
 import org.logstash.common.FsUtil;
 
@@ -155,6 +155,9 @@ public void open() throws IOException {
             // verify exclusive access to the dirPath
             this.dirLock = FileLockFactory.obtainLock(this.dirPath, LOCK_NAME);
 
+            // Upgrade to serialization format V2
+            QueueUpgrade.upgradeQueueDirectoryToV2(dirPath);
+
             Checkpoint headCheckpoint;
             try {
                 headCheckpoint = this.checkpointIO.read(checkpointIO.headFileName());
@@ -187,7 +190,7 @@ public void open() throws IOException {
 
                 logger.debug("opening tail page: {}, in: {}, with checkpoint: {}", pageNum, this.dirPath, cp.toString());
 
-                PageIO pageIO = new MmapPageIO(pageNum, this.pageCapacity, this.dirPath);
+                PageIO pageIO = new MmapPageIOV2(pageNum, this.pageCapacity, this.dirPath);
                 // important to NOT pageIO.open() just yet, we must first verify if it is fully acked in which case
                 // we can purge it and we don't care about its integrity for example if it is of zero-byte file size.
                 if (cp.isFullyAcked()) {
@@ -209,7 +212,7 @@ public void open() throws IOException {
 
             logger.debug("opening head page: {}, in: {}, with checkpoint: {}", headCheckpoint.getPageNum(), this.dirPath, headCheckpoint.toString());
 
-            PageIO pageIO = new MmapPageIO(headCheckpoint.getPageNum(), this.pageCapacity, this.dirPath);
+            PageIO pageIO = new MmapPageIOV2(headCheckpoint.getPageNum(), this.pageCapacity, this.dirPath);
             pageIO.recover(); // optimistically recovers the head page data file and set minSeqNum and elementCount to the actual read/recovered data
 
             ensureDiskAvailable(diskNeeded - (long)pageIO.getHead());
@@ -313,7 +316,7 @@ private void addTailPage(Page page) throws IOException {
      * @throws IOException
      */
     private void newCheckpointedHeadpage(int pageNum) throws IOException {
-        PageIO headPageIO = new MmapPageIO(pageNum, this.pageCapacity, this.dirPath);
+        PageIO headPageIO = new MmapPageIOV2(pageNum, this.pageCapacity, this.dirPath);
         headPageIO.create();
         this.headPage = PageFactory.newHeadPage(pageNum, this, headPageIO);
         this.headPage.forceCheckpoint();
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/QueueUpgrade.java b/logstash-core/src/main/java/org/logstash/ackedqueue/QueueUpgrade.java
new file mode 100644
index 00000000000..81ce3f09b52
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/QueueUpgrade.java
@@ -0,0 +1,118 @@
+package org.logstash.ackedqueue;
+
+import com.google.common.primitives.Ints;
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.file.DirectoryStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import java.util.Collection;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.logstash.Event;
+import org.logstash.ackedqueue.io.CheckpointIO;
+import org.logstash.ackedqueue.io.FileCheckpointIO;
+import org.logstash.ackedqueue.io.MmapPageIOV1;
+import org.logstash.ackedqueue.io.MmapPageIOV2;
+import org.logstash.ackedqueue.io.PageIO;
+
+public final class QueueUpgrade {
+
+    private static final Logger LOGGER = LogManager.getLogger(QueueUpgrade.class);
+
+    private static final Pattern PAGE_NAME_PATTERN = Pattern.compile("page\\.\\d+");
+
+    private QueueUpgrade() {
+        // Utility Class.
+    }
+
+    public static void upgradeQueueDirectoryToV2(final Path path) throws IOException {
+        final File upgradeFile = path.resolve(".queue-version").toFile();
+        if (upgradeFile.exists()) {
+            if (Ints.fromByteArray(Files.readAllBytes(upgradeFile.toPath())) != 2) {
+                throw new IllegalStateException(
+                    "Unexpected upgrade file contents found."
+                );
+            }
+            LOGGER.debug("PQ version file with correct version information (v2) found.");
+        } else {
+            LOGGER.info("No PQ version file found, upgrading to PQ v2.");
+            try (final DirectoryStream<Path> files = Files.newDirectoryStream(path)) {
+                final Collection<File> pageFiles = StreamSupport.stream(
+                    files.spliterator(), false
+                ).filter(
+                    file -> PAGE_NAME_PATTERN.matcher(file.getFileName().toString()).matches()
+                ).map(Path::toFile).collect(Collectors.toList());
+                final CheckpointIO cpIo = new FileCheckpointIO(path);
+                pageFiles.forEach(p -> validatePageFile(path, cpIo, p));
+                pageFiles.forEach(QueueUpgrade::setV2);
+            }
+            Files.write(upgradeFile.toPath(), Ints.toByteArray(2), StandardOpenOption.CREATE);
+        }
+    }
+
+    private static void validatePageFile(final Path path, final CheckpointIO cpIo, final File v1PageFile) {
+        final int num =
+            Integer.parseInt(v1PageFile.getName().substring("page.".length()));
+        try (final MmapPageIOV1 iov1 = new MmapPageIOV1(
+            num, Ints.checkedCast(v1PageFile.length()), path
+        )) {
+            final Checkpoint cp = loadCheckpoint(path, cpIo, num);
+            final int count = cp.getElementCount();
+            final long minSeqNum = cp.getMinSeqNum();
+            iov1.open(minSeqNum, count);
+            for (int i = 0; i < count; ++i) {
+                verifyEvent(iov1, minSeqNum + i);
+            }
+        } catch (final IOException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
+    private static void verifyEvent(final PageIO iov1, final long seqNum) {
+        try {
+            Event.deserialize(iov1.read(seqNum, 1).getElements().get(0));
+        } catch (final IOException ex) {
+            failValidation(ex);
+        }
+    }
+
+    private static void setV2(final File v1PageFile) {
+        try (final RandomAccessFile raf = new RandomAccessFile(v1PageFile, "rw")) {
+            raf.seek(0L);
+            raf.writeByte((int) MmapPageIOV2.VERSION_TWO);
+        } catch (final IOException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
+    private static Checkpoint loadCheckpoint(final Path path, final CheckpointIO cpIo,
+        final int num) throws IOException {
+        final String cpFilename = cpIo.tailFileName(num);
+        final Checkpoint cp;
+        if (path.resolve(cpFilename).toFile().exists()) {
+            cp = cpIo.read(cpFilename);
+        } else {
+            cp = cpIo.read("checkpoint.head");
+            if (cp.getPageNum() != num) {
+                throw new IllegalStateException(
+                    String.format("No checkpoint file found for page %d", num)
+                );
+            }
+        }
+        return cp;
+    }
+
+    private static void failValidation(final Throwable ex) {
+        LOGGER.error("Logstash was unable to upgrade your persistent queue data." +
+            "Please either downgrade to version 6.2.3 and fully drain " +
+            "your persistent queue or delete your queue data.dir if you " +
+            "don't need to retain the data currently in your queue.");
+        throw new IllegalStateException(ex);
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV1.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV1.java
new file mode 100644
index 00000000000..3aa56354cc3
--- /dev/null
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV1.java
@@ -0,0 +1,298 @@
+package org.logstash.ackedqueue.io;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.MappedByteBuffer;
+import java.nio.channels.FileChannel;
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.zip.CRC32;
+import org.logstash.LogstashJavaCompat;
+import org.logstash.ackedqueue.SequencedList;
+
+/**
+ * {@link PageIO} implementation for V1 PQ serialization format. Only supports read operations
+ * for use in {@link org.logstash.ackedqueue.QueueUpgrade}.
+ */
+public final class MmapPageIOV1 implements PageIO {
+
+    public static final byte VERSION_ONE = 1;
+
+    /**
+     * Cleaner function for forcing unmapping of backing {@link MmapPageIOV1#buffer}.
+     */
+    private static final ByteBufferCleaner BUFFER_CLEANER =
+        LogstashJavaCompat.setupBytebufferCleaner();
+
+    private final File file;
+
+    private final CRC32 checkSummer;
+
+    private final IntVector offsetMap;
+
+    private int capacity; // page capacity is an int per the ByteBuffer class.
+    private long minSeqNum;
+    private int elementCount;
+    private int head; // head is the write position and is an int per ByteBuffer class position
+    private byte version;
+
+    private MappedByteBuffer buffer;
+
+    public MmapPageIOV1(int pageNum, int capacity, Path dirPath) {
+        this.minSeqNum = 0;
+        this.elementCount = 0;
+        this.version = 0;
+        this.head = 0;
+        this.capacity = capacity;
+        this.offsetMap = new IntVector();
+        this.checkSummer = new CRC32();
+        this.file = dirPath.resolve("page." + pageNum).toFile();
+    }
+
+    @Override
+    public void open(long minSeqNum, int elementCount) throws IOException {
+        mapFile();
+        buffer.position(0);
+        this.version = buffer.get();
+        validateVersion(this.version);
+        this.head = 1;
+
+        this.minSeqNum = minSeqNum;
+        this.elementCount = elementCount;
+
+        if (this.elementCount > 0) {
+            // verify first seqNum to be same as expected minSeqNum
+            long seqNum = buffer.getLong();
+            if (seqNum != this.minSeqNum) {
+                throw new IOException(String.format("first seqNum=%d is different than minSeqNum=%d", seqNum, this.minSeqNum));
+            }
+
+            // reset back position to first seqNum
+            buffer.position(this.head);
+
+            for (int i = 0; i < this.elementCount; i++) {
+                // verify that seqNum must be of strict + 1 increasing order
+                readNextElement(this.minSeqNum + i, !MmapPageIOV2.VERIFY_CHECKSUM);
+            }
+        }
+    }
+
+    @Override
+    public SequencedList<byte[]> read(long seqNum, int limit) throws IOException {
+        assert seqNum >= this.minSeqNum :
+            String.format("seqNum=%d < minSeqNum=%d", seqNum, this.minSeqNum);
+        assert seqNum <= maxSeqNum() :
+            String.format("seqNum=%d is > maxSeqNum=%d", seqNum, maxSeqNum());
+
+        List<byte[]> elements = new ArrayList<>();
+        final LongVector seqNums = new LongVector(limit);
+
+        int offset = this.offsetMap.get((int) (seqNum - this.minSeqNum));
+
+        buffer.position(offset);
+
+        for (int i = 0; i < limit; i++) {
+            long readSeqNum = buffer.getLong();
+
+            assert readSeqNum == (seqNum + i) :
+                String.format("unmatched seqNum=%d to readSeqNum=%d", seqNum + i, readSeqNum);
+
+            int readLength = buffer.getInt();
+            byte[] readBytes = new byte[readLength];
+            buffer.get(readBytes);
+            int checksum = buffer.getInt();
+            int computedChecksum = checksum(readBytes);
+            if (computedChecksum != checksum) {
+                throw new IOException(String.format("computed checksum=%d != checksum for file=%d", computedChecksum, checksum));
+            }
+
+            elements.add(readBytes);
+            seqNums.add(readSeqNum);
+
+            if (seqNum + i >= maxSeqNum()) {
+                break;
+            }
+        }
+
+        return new SequencedList<>(elements, seqNums);
+    }
+
+    public void recover() {
+        throw new UnsupportedOperationException("Recovering v1 pages is not supported anymore.");
+    }
+
+    @Override
+    public void create() {
+        throw new UnsupportedOperationException("Creating v1 pages is not supported anymore.");
+    }
+
+    @Override
+    public void deactivate() {
+        close(); // close can be called multiple times
+    }
+
+    @Override
+    public void activate() throws IOException {
+        if (this.buffer == null) {
+            try (RandomAccessFile raf = new RandomAccessFile(this.file, "rw")) {
+                this.buffer = raf.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, this.capacity);
+            }
+            this.buffer.load();
+        }
+    }
+
+    @Override
+    public void ensurePersisted() {
+        throw new UnsupportedOperationException("Writing to v1 pages is not supported anymore");
+    }
+
+    @Override
+    public void purge() {
+        throw new UnsupportedOperationException("Purging v1 pages is not supported anymore");
+
+    }
+
+    @Override
+    public void write(byte[] bytes, long seqNum) {
+        throw new UnsupportedOperationException("Writing to v1 pages is not supported anymore");
+    }
+
+    @Override
+    public void close() {
+        if (this.buffer != null) {
+            this.buffer.force();
+            BUFFER_CLEANER.clean(buffer);
+
+        }
+        this.buffer = null;
+    }
+
+    @Override
+    public int getCapacity() {
+        return this.capacity;
+    }
+
+    @Override
+    public long getMinSeqNum() {
+        return this.minSeqNum;
+    }
+
+    @Override
+    public int getElementCount() {
+        return this.elementCount;
+    }
+
+    @Override
+    public boolean hasSpace(int bytes) {
+        return false;
+    }
+
+    @Override
+    public int persistedByteCount(int byteCount) {
+        return MmapPageIOV2.SEQNUM_SIZE + MmapPageIOV2.LENGTH_SIZE
+            + byteCount + MmapPageIOV2.CHECKSUM_SIZE;
+    }
+
+    @Override
+    public int getHead() {
+        return this.head;
+    }
+
+    private int checksum(byte[] bytes) {
+        checkSummer.reset();
+        checkSummer.update(bytes, 0, bytes.length);
+        return (int) checkSummer.getValue();
+    }
+
+    private long maxSeqNum() {
+        return this.minSeqNum + this.elementCount - 1;
+    }
+
+    // memory map data file to this.buffer and read initial version byte
+    private void mapFile() throws IOException {
+        try (RandomAccessFile raf = new RandomAccessFile(this.file, "rw")) {
+
+            if (raf.length() > Integer.MAX_VALUE) {
+                throw new IOException("Page file too large " + this.file);
+            }
+            int pageFileCapacity = (int) raf.length();
+
+            // update capacity to actual raf length. this can happen if a page size was changed on a non empty queue directory for example.
+            this.capacity = pageFileCapacity;
+
+            if (this.capacity < MmapPageIOV2.MIN_CAPACITY) {
+                throw new IOException(String.format("Page file size is too small to hold elements"));
+            }
+            this.buffer = raf.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, this.capacity);
+        }
+        this.buffer.load();
+    }
+
+    // read and validate next element at page head
+    // @param verifyChecksum if true the actual element data will be read + checksumed and compared to written checksum
+    private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws MmapPageIOV2.PageIOInvalidElementException {
+        // if there is no room for the seqNum and length bytes stop here
+        if (this.head + MmapPageIOV2.SEQNUM_SIZE + MmapPageIOV2.LENGTH_SIZE > capacity) {
+            throw new MmapPageIOV2.PageIOInvalidElementException(
+                "cannot read seqNum and length bytes past buffer capacity");
+        }
+
+        int elementOffset = this.head;
+        int newHead = this.head;
+
+        long seqNum = buffer.getLong();
+        newHead += MmapPageIOV2.SEQNUM_SIZE;
+
+        if (seqNum != expectedSeqNum) {
+            throw new MmapPageIOV2.PageIOInvalidElementException(
+                String.format("Element seqNum %d is expected to be %d", seqNum, expectedSeqNum));
+        }
+
+        int length = buffer.getInt();
+        newHead += MmapPageIOV2.LENGTH_SIZE;
+
+        // length must be > 0
+        if (length <= 0) {
+            throw new MmapPageIOV2.PageIOInvalidElementException("Element invalid length");
+        }
+
+        // if there is no room for the proposed data length and checksum just stop here
+        if (newHead + length + MmapPageIOV2.CHECKSUM_SIZE > capacity) {
+            throw new MmapPageIOV2.PageIOInvalidElementException(
+                "cannot read element payload and checksum past buffer capacity");
+        }
+
+        if (verifyChecksum) {
+            // read data and compute checksum;
+            this.checkSummer.reset();
+            final int prevLimit = buffer.limit();
+            buffer.limit(buffer.position() + length);
+            this.checkSummer.update(buffer);
+            buffer.limit(prevLimit);
+            int checksum = buffer.getInt();
+            int computedChecksum = (int) this.checkSummer.getValue();
+            if (computedChecksum != checksum) {
+                throw new MmapPageIOV2.PageIOInvalidElementException(
+                    "Element invalid checksum");
+            }
+        }
+
+        // at this point we recovered a valid element
+        this.offsetMap.add(elementOffset);
+        this.head = newHead + length + MmapPageIOV2.CHECKSUM_SIZE;
+
+        buffer.position(this.head);
+    }
+
+    // we don't have different versions yet so simply check if the version is VERSION_ONE for basic integrity check
+    // and if an unexpected version byte is read throw PageIOInvalidVersionException
+    private static void validateVersion(byte version)
+        throws MmapPageIOV2.PageIOInvalidVersionException {
+        if (version != VERSION_ONE) {
+            throw new MmapPageIOV2.PageIOInvalidVersionException(String
+                .format("Expected page version=%d but found version=%d", VERSION_ONE, version));
+        }
+    }
+}
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIO.java b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
similarity index 93%
rename from logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIO.java
rename to logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
index 3a3d8051019..ee0035a8578 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIO.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/io/MmapPageIOV2.java
@@ -15,9 +15,9 @@
 import org.logstash.LogstashJavaCompat;
 import org.logstash.ackedqueue.SequencedList;
 
-public final class MmapPageIO implements PageIO {
+public final class MmapPageIOV2 implements PageIO {
 
-    public static final byte VERSION_ONE = 1;
+    public static final byte VERSION_TWO = (byte) 2;
     public static final int VERSION_SIZE = Byte.BYTES;
     public static final int CHECKSUM_SIZE = Integer.BYTES;
     public static final int LENGTH_SIZE = Integer.BYTES;
@@ -26,10 +26,10 @@ public final class MmapPageIO implements PageIO {
     public static final int HEADER_SIZE = 1;     // version byte
     public static final boolean VERIFY_CHECKSUM = true;
 
-    private static final Logger LOGGER = LogManager.getLogger(MmapPageIO.class);
+    private static final Logger LOGGER = LogManager.getLogger(MmapPageIOV2.class);
 
     /**
-     * Cleaner function for forcing unmapping of backing {@link MmapPageIO#buffer}.
+     * Cleaner function for forcing unmapping of backing {@link MmapPageIOV2#buffer}.
      */
     private static final ByteBufferCleaner BUFFER_CLEANER =
         LogstashJavaCompat.setupBytebufferCleaner();
@@ -48,7 +48,7 @@ public final class MmapPageIO implements PageIO {
 
     private MappedByteBuffer buffer;
 
-    public MmapPageIO(int pageNum, int capacity, Path dirPath) {
+    public MmapPageIOV2(int pageNum, int capacity, Path dirPath) {
         this.minSeqNum = 0;
         this.elementCount = 0;
         this.version = 0;
@@ -150,7 +150,7 @@ public void recover() throws IOException {
                 // verify that seqNum must be of strict + 1 increasing order
                 readNextElement(this.minSeqNum + i, VERIFY_CHECKSUM);
                 this.elementCount += 1;
-            } catch (MmapPageIO.PageIOInvalidElementException e) {
+            } catch (MmapPageIOV2.PageIOInvalidElementException e) {
                 // simply stop at first invalid element
                 LOGGER.debug("PageIO recovery element index:{}, readNextElement exception: {}", i, e.getMessage());
                 break;
@@ -169,7 +169,7 @@ public void create() throws IOException {
             this.buffer = raf.getChannel().map(FileChannel.MapMode.READ_WRITE, 0, this.capacity);
         }
         buffer.position(0);
-        buffer.put(VERSION_ONE);
+        buffer.put(VERSION_TWO);
         this.head = 1;
         this.minSeqNum = 0L;
         this.elementCount = 0;
@@ -281,11 +281,11 @@ private void mapFile() throws IOException {
 
     // read and validate next element at page head
     // @param verifyChecksum if true the actual element data will be read + checksumed and compared to written checksum
-    private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws MmapPageIO.PageIOInvalidElementException {
+    private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws MmapPageIOV2.PageIOInvalidElementException {
         // if there is no room for the seqNum and length bytes stop here
         // TODO: I know this isn't a great exception message but at the time of writing I couldn't come up with anything better :P
         if (this.head + SEQNUM_SIZE + LENGTH_SIZE > capacity) {
-            throw new MmapPageIO.PageIOInvalidElementException(
+            throw new MmapPageIOV2.PageIOInvalidElementException(
                 "cannot read seqNum and length bytes past buffer capacity");
         }
 
@@ -296,7 +296,7 @@ private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws
         newHead += SEQNUM_SIZE;
 
         if (seqNum != expectedSeqNum) {
-            throw new MmapPageIO.PageIOInvalidElementException(
+            throw new MmapPageIOV2.PageIOInvalidElementException(
                 String.format("Element seqNum %d is expected to be %d", seqNum, expectedSeqNum));
         }
 
@@ -305,12 +305,12 @@ private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws
 
         // length must be > 0
         if (length <= 0) {
-            throw new MmapPageIO.PageIOInvalidElementException("Element invalid length");
+            throw new MmapPageIOV2.PageIOInvalidElementException("Element invalid length");
         }
 
         // if there is no room for the proposed data length and checksum just stop here
         if (newHead + length + CHECKSUM_SIZE > capacity) {
-            throw new MmapPageIO.PageIOInvalidElementException(
+            throw new MmapPageIOV2.PageIOInvalidElementException(
                 "cannot read element payload and checksum past buffer capacity");
         }
 
@@ -324,7 +324,7 @@ private void readNextElement(long expectedSeqNum, boolean verifyChecksum) throws
             int checksum = buffer.getInt();
             int computedChecksum = (int) this.checkSummer.getValue();
             if (computedChecksum != checksum) {
-                throw new MmapPageIO.PageIOInvalidElementException(
+                throw new MmapPageIOV2.PageIOInvalidElementException(
                     "Element invalid checksum");
             }
         }
@@ -364,10 +364,10 @@ private int write(byte[] bytes, long seqNum, int length, int checksum) {
     // we don't have different versions yet so simply check if the version is VERSION_ONE for basic integrity check
     // and if an unexpected version byte is read throw PageIOInvalidVersionException
     private static void validateVersion(byte version)
-        throws MmapPageIO.PageIOInvalidVersionException {
-        if (version != VERSION_ONE) {
-            throw new MmapPageIO.PageIOInvalidVersionException(String
-                .format("Expected page version=%d but found version=%d", VERSION_ONE, version));
+        throws MmapPageIOV2.PageIOInvalidVersionException {
+        if (version != VERSION_TWO) {
+            throw new MmapPageIOV2.PageIOInvalidVersionException(String
+                .format("Expected page version=%d but found version=%d", VERSION_TWO, version));
         }
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/HeadPageTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/HeadPageTest.java
index 2af5e3c784a..30fb5b69bae 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/HeadPageTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/HeadPageTest.java
@@ -7,7 +7,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.logstash.ackedqueue.io.MmapPageIO;
+import org.logstash.ackedqueue.io.MmapPageIOV2;
 import org.logstash.ackedqueue.io.PageIO;
 
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -33,7 +33,7 @@ public void newHeadPage() throws IOException {
         // Close method on Page requires an instance of Queue that has already been opened.
         try (Queue q = new Queue(s)) {
             q.open();
-            PageIO pageIO = new MmapPageIO(0, 100, Paths.get(dataPath));
+            PageIO pageIO = new MmapPageIOV2(0, 100, Paths.get(dataPath));
             pageIO.create();
             try (final Page p = PageFactory.newHeadPage(0, q, pageIO)) {
                 assertThat(p.getPageNum(), is(equalTo(0)));
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
index 03d6fb78049..68a4058b51d 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTest.java
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.logstash.ackedqueue.io.LongVector;
-import org.logstash.ackedqueue.io.MmapPageIO;
+import org.logstash.ackedqueue.io.MmapPageIOV2;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
@@ -91,7 +91,7 @@ public void singleWriteRead() throws IOException {
     @Test(timeout = 5000)
     public void writeToFullyAckedHeadpage() throws IOException {
         final Queueable element = new StringElement("foobarbaz");
-        final int page = element.serialize().length * 2 + MmapPageIO.MIN_CAPACITY;
+        final int page = element.serialize().length * 2 + MmapPageIOV2.MIN_CAPACITY;
         // Queue that can only hold one element per page.
         try (Queue q = new Queue(
             TestSettings.persistedQueueSettings(page, page * 2 - 1, dataPath))) {
@@ -109,7 +109,7 @@ public void writeToFullyAckedHeadpage() throws IOException {
 
     @Test
     public void canReadBatchZeroSize() throws IOException {
-        final int page = MmapPageIO.MIN_CAPACITY;
+        final int page = MmapPageIOV2.MIN_CAPACITY;
         try (Queue q = new Queue(
             TestSettings.persistedQueueSettings(page, page * 2 - 1, dataPath))) {
             q.open();
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTestHelpers.java b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTestHelpers.java
index 8a8194c2887..1eded8f4e46 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTestHelpers.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/QueueTestHelpers.java
@@ -1,7 +1,7 @@
 package org.logstash.ackedqueue;
 
 import java.io.IOException;
-import org.logstash.ackedqueue.io.MmapPageIO;
+import org.logstash.ackedqueue.io.MmapPageIOV2;
 
 /**
  * Class containing common methods to help DRY up acked queue tests.
@@ -9,7 +9,7 @@
 public class QueueTestHelpers {
 
     /**
-     * Returns the {@link org.logstash.ackedqueue.io.MmapPageIO} capacity required for the supplied element
+     * Returns the {@link MmapPageIOV2} capacity required for the supplied element
      * @param element
      * @return int - capacity required for the supplied element
      * @throws IOException Throws if a serialization error occurs
@@ -25,6 +25,6 @@ public static int computeCapacityForMmapPageIO(final Queueable element) throws I
      * @throws IOException Throws if a serialization error occurs
      */
     public static int computeCapacityForMmapPageIO(final Queueable element, int count) throws IOException {
-        return MmapPageIO.HEADER_SIZE + (count * (MmapPageIO.SEQNUM_SIZE + MmapPageIO.LENGTH_SIZE + element.serialize().length + MmapPageIO.CHECKSUM_SIZE));
+        return MmapPageIOV2.HEADER_SIZE + (count * (MmapPageIOV2.SEQNUM_SIZE + MmapPageIOV2.LENGTH_SIZE + element.serialize().length + MmapPageIOV2.CHECKSUM_SIZE));
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
index d8e6d61c197..adf930ae78e 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/io/FileMmapIOTest.java
@@ -17,8 +17,8 @@
 
 public class FileMmapIOTest {
     private Path folder;
-    private MmapPageIO writeIo;
-    private MmapPageIO readIo;
+    private MmapPageIOV2 writeIo;
+    private MmapPageIOV2 readIo;
     private int pageNum;
 
     @Rule
@@ -30,8 +30,8 @@ public void setUp() throws Exception {
         folder = temporaryFolder
                 .newFolder("pages")
                 .toPath();
-        writeIo = new MmapPageIO(pageNum, 1024, folder);
-        readIo = new MmapPageIO(pageNum, 1024, folder);
+        writeIo = new MmapPageIOV2(pageNum, 1024, folder);
+        readIo = new MmapPageIOV2(pageNum, 1024, folder);
     }
 
     @Test
diff --git a/logstash-core/src/test/java/org/logstash/ackedqueue/io/MmapPageIOTest.java b/logstash-core/src/test/java/org/logstash/ackedqueue/io/MmapPageIOTest.java
index 13569a38778..9a9266dc1ec 100644
--- a/logstash-core/src/test/java/org/logstash/ackedqueue/io/MmapPageIOTest.java
+++ b/logstash-core/src/test/java/org/logstash/ackedqueue/io/MmapPageIOTest.java
@@ -30,11 +30,11 @@ public void adjustToExistingCapacity() throws IOException {
         final int NEW_CAPACITY = 2048;
         final int PAGE_NUM = 0;
 
-        try (PageIO io1 = new MmapPageIO(PAGE_NUM, ORIGINAL_CAPACITY, dir)) {
+        try (PageIO io1 = new MmapPageIOV2(PAGE_NUM, ORIGINAL_CAPACITY, dir)) {
             io1.create();
         }
 
-        try (PageIO io2 = new MmapPageIO(PAGE_NUM, NEW_CAPACITY, dir)) {
+        try (PageIO io2 = new MmapPageIOV2(PAGE_NUM, NEW_CAPACITY, dir)) {
             io2.open(0, PAGE_NUM);
             assertThat(io2.getCapacity(), is(equalTo(ORIGINAL_CAPACITY)));
         }
