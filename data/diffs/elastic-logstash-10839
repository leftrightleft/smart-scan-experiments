diff --git a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
index a7a44c77b54..369ea3fd080 100644
--- a/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
+++ b/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java
@@ -96,7 +96,7 @@ public IRubyObject ruby_set_field(ThreadContext context, RubyString reference, I
                 }
                 this.event.setTimestamp(((JrubyTimestampExtLibrary.RubyTimestamp)value).getTimestamp());
             } else {
-                this.event.setField(r, Valuefier.convert(value));
+                this.event.setField(r, safeValueifierConvert(value));
             }
             return value;
         }
@@ -322,6 +322,22 @@ private static FieldReference extractFieldReference(final RubyString reference)
             }
         }
 
+        /**
+         * Shared logic to wrap {@link FieldReference.IllegalSyntaxException}s that are raised by
+         * {@link Valuefier#convert(Object)} when encountering illegal syntax in a ruby-exception
+         * that can be easily handled within the ruby plugins
+         *
+         * @param value a {@link Object} to be passed to {@link Valuefier#convert(Object)}
+         * @return the resulting {@link Object} (see: {@link Valuefier#convert(Object)})
+         */
+        private static Object safeValueifierConvert(final Object value) {
+            try {
+                return Valuefier.convert(value);
+            } catch (FieldReference.IllegalSyntaxException ise) {
+                throw RubyUtil.RUBY.newRuntimeError(ise.getMessage());
+            }
+        }
+
 
         private void setEvent(Event event) {
             this.event = event;
diff --git a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
index 8cd1e532790..0fbd606630b 100644
--- a/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
+++ b/logstash-core/src/test/java/org/logstash/ext/JrubyEventExtLibraryTest.java
@@ -2,13 +2,18 @@
 
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import org.assertj.core.api.Assertions;
+import org.hamcrest.CoreMatchers;
+import org.jruby.RubyHash;
 import org.jruby.RubyString;
+import org.jruby.exceptions.RuntimeError;
 import org.jruby.javasupport.JavaUtil;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
+import org.junit.Assert;
 import org.junit.Test;
 import org.logstash.ObjectMappers;
 import org.logstash.RubyUtil;
@@ -55,6 +60,38 @@ public void correctlyHandlesNonAsciiKeys() {
             .contains("\"テストフィールド\":\"someValue\"");
     }
 
+    @Test
+    public void correctlyRaiseRubyRuntimeErrorWhenGivenInvalidFieldReferences() {
+        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
+        final JrubyEventExtLibrary.RubyEvent event =
+                JrubyEventExtLibrary.RubyEvent.newRubyEvent(context.runtime);
+        final RubyString key = rubyString("il[[]]]legal");
+        final RubyString value = rubyString("foo");
+        try {
+            event.ruby_set_field(context, key, value);
+        } catch (RuntimeError rubyRuntimeError) {
+            Assert.assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
+            return;
+        }
+        Assert.fail("expected ruby RuntimeError was not thrown.");
+    }
+
+    @Test
+    public void correctlyRaiseRubyRuntimeErrorWhenGivenInvalidFieldReferencesInMap() {
+        final ThreadContext context = RubyUtil.RUBY.getCurrentContext();
+        final JrubyEventExtLibrary.RubyEvent event =
+                JrubyEventExtLibrary.RubyEvent.newRubyEvent(context.runtime);
+        final RubyString key = rubyString("foo");
+        final RubyHash value = RubyHash.newHash(context.runtime, Collections.singletonMap(rubyString("il[[]]]legal"), rubyString("okay")), context.nil);
+        try {
+            event.ruby_set_field(context, key, value);
+        } catch (RuntimeError rubyRuntimeError) {
+            Assert.assertThat(rubyRuntimeError.getLocalizedMessage(), CoreMatchers.containsString("Invalid FieldReference"));
+            return;
+        }
+        Assert.fail("expected ruby RuntimeError was not thrown.");
+    }
+
     private static RubyString rubyString(final String java) {
         return RubyUtil.RUBY.newString(java);
     }
