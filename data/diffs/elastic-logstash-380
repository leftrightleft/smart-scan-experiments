diff --git a/lib/logstash/inputs/rabbitmq.rb b/lib/logstash/inputs/rabbitmq.rb
index ade38c47424..e402b7be772 100644
--- a/lib/logstash/inputs/rabbitmq.rb
+++ b/lib/logstash/inputs/rabbitmq.rb
@@ -1,29 +1,25 @@
 require "logstash/inputs/threadable"
 require "logstash/namespace"
 require "cgi" # for CGI.escape
-
+require "logstash/util/amqp/driver"
 # Pull events from a RabbitMQ exchange.
 #
 # The default settings will create an entirely transient queue and listen for all messages by default.
 # If you need durability or any other advanced settings, please set the appropriate options
 #
-# This has been tested with Bunny 0.9.x, which supports RabbitMQ 2.x and 3.x. You can
-# find links to both here:
+# This plugin uses Bunny 0.9.x when running with mri and
+# host_bunnies 1.4.x when running under jruby.
 #
 # * RabbitMQ - <http://www.rabbitmq.com/>
 # * Bunny - <https://github.com/ruby-amqp/bunny>
+# * HotBunnies - <https://github.com/ruby-amqp/hot_bunnies>
 class LogStash::Inputs::RabbitMQ < LogStash::Inputs::Threadable
 
   config_name "rabbitmq"
   plugin_status "beta"
 
-  # Custom arguments. For example, mirrored queues in RabbitMQ 2.x:  [ "x-ha-policy", "all" ]
-  # RabbitMQ 3.x mirrored queues are set by policy. More information can be found
-  # here: http://www.rabbitmq.com/blog/2012/11/19/breaking-things-with-rabbitmq-3-0/
-  config :arguments, :validate => :array, :default => []
-
   # Your rabbitmq server address
-  config :host, :validate => :string, :required => true
+  config :host, :validate => :string, :default => "localhost"
 
   # The rabbitmq port to connect on
   config :port, :validate => :number, :default => 5672
@@ -34,41 +30,46 @@ class LogStash::Inputs::RabbitMQ < LogStash::Inputs::Threadable
   # Your rabbitmq password
   config :password, :validate => :password, :default => "guest"
 
-  # The name of the queue.
-  config :queue, :validate => :string, :default => ""
-
-  # The name of the exchange to bind the queue.
-  config :exchange, :validate => :string, :required => true
-
-  # The routing key to use. This is only valid for direct or fanout exchanges
-  #
-  # * Routing keys are ignored on topic exchanges.
-  # * Wildcards are not valid on direct exchanges.
-  config :key, :validate => :string, :default => "logstash"
-
   # The vhost to use. If you don't know what this is, leave the default.
   config :vhost, :validate => :string, :default => "/"
 
-  # Passive queue creation? Useful for checking queue existance without modifying server state
-  config :passive, :validate => :boolean, :default => false
+  # The name of the queue.
+  config :queue, :validate => :string, :default => "logstash"
 
-  # Is this queue durable? (aka; Should it survive a broker restart?)
-  config :durable, :validate => :boolean, :default => false
+  # Options for queue declaration. By default, performance is valued over event durability.
+  config :queue_opts, :validate => :hash, :default => {
+    "durable" => false,
+    "exclusive" => false,
+    "auto_delete" => false,
+    "passive" => false,
+  }
 
-  # Should the queue be deleted on the broker when the last consumer
-  # disconnects? Set this option to 'false' if you want the queue to remain
-  # on the broker, queueing up messages until a consumer comes along to
-  # consume them.
-  config :auto_delete, :validate => :boolean, :default => true
+  # Additional arguments used when binding queue.
+  config :binding_arguments, :validate => :hash, :default => {}
 
-  # Is the queue exclusive? (aka: Will other clients connect to this named queue?)
-  config :exclusive, :validate => :boolean, :default => true
+  # The name of the exchange to bind the queue.
+  config :exchange, :validate => :string, :default => "logstash"
+
+  # Exchange type, must be either fanout, direct or topic.
+  config :exchange_type, :validate => [ "fanout", "direct", "topic"], :default => "direct"
+
+  # Options for exchange decalration. By default, performance is valued over event durability.
+  config :exchange_opts, :validate => :hash, :default => {
+      "durable" => false,
+      "auto_delete" => false,
+      "passive" => false,
+  }
+  # The routing key to use. This is only valid for direct or topic exchanges
+  #
+  # * Routing keys are ignored on fanout exchanges.
+  # * Wildcards are not valid on direct exchanges.
+  config :routing_key, :validate => :string, :default => "logstash"
 
-  # Prefetch count. Number of messages to prefetch
+  # Prefetch count. Number of messages to accept before acknowledgment.
   config :prefetch_count, :validate => :number, :default => 1
 
   # Enable message acknowledgement
-  config :ack, :validate => :boolean, :default => true
+  config :ack, :validate => :boolean, :default => false
 
   # Enable or disable debugging
   config :debug, :validate => :boolean, :default => false
@@ -94,7 +95,6 @@ def initialize(params)
   def register   
 
     @logger.info("Registering input #{@url}")
-    require "bunny"
     
     @vhost ||= "/"
     @port ||= 5672
@@ -120,41 +120,33 @@ def register
       @rabbitmq_url << "@"
     end
     @rabbitmq_url += "#{@host}:#{@port}#{@vhost}/#{@queue}"
+
+    @logger.debug("Connecting with RabbitMQ settings #{@rabbitmq_settings.inspect} to setup queue #{@queue.inspect}")
+    @driver = LogStash::Rabbitmq.driver_class.new(@rabbitmq_settings)
+    @driver.setup_input(
+        :exchange => @exchange,
+        :exchange_type => @exchange_type,
+        :exchange_opts => @exchange_opts,
+        :queue => @queue,
+        :queue_opts => @queue_opts,
+        :binding_arguments => @binding_arguments,
+        :prefetch_count => @prefetch_count,
+        :routing_key => @routing_key,
+        :ack => @ack
+    )
   end # def register
 
   def run(queue)
-    begin
-      @logger.debug("Connecting with RabbitMQ settings #{@rabbitmq_settings.inspect} to set up queue #{@queue.inspect}")
-      @bunny = Bunny.new(@rabbitmq_settings)
-      return if terminating?
-      @bunny.start
-      @bunny.qos({:prefetch_count => @prefetch_count})
-
-      @arguments_hash = Hash[*@arguments]
-
-      @bunnyqueue = @bunny.queue(@queue, {:durable => @durable, :auto_delete => @auto_delete, :exclusive => @exclusive, :arguments => @arguments_hash })
-      @bunnyqueue.bind(@exchange, :key => @key)
-
-      @bunnyqueue.subscribe({:ack => @ack}) do |data|
-        e = to_event(data[:payload], @rabbitmq_url)
-        if e
-          queue << e
-        end
-      end # @bunnyqueue.subscribe
-
-    rescue *[Bunny::ConnectionError, Bunny::ServerDownError] => e
-      @logger.error("RabbitMQ connection error, will reconnect: #{e}")
-      # Sleep for a bit before retrying.
-      # TODO(sissel): Write 'backoff' method?
-      sleep(1)
-      retry
-    end # begin/rescue
+    @driver.subscribe do |payload|
+      e = to_event(payload, @rabbitmq_url)
+      if e
+        queue << e
+      end
+    end # @driver.subscribe
   end # def run
 
   def teardown
-    @bunnyqueue.unsubscribe unless @durable == true
-    @bunnyqueue.delete unless @durable == true
-    @bunny.close if @bunny
+    @driver.destroy
     finished
   end # def teardown
 end # class LogStash::Inputs::RabbitMQ
diff --git a/lib/logstash/outputs/rabbitmq.rb b/lib/logstash/outputs/rabbitmq.rb
index 9c0355f77f3..174838aa409 100644
--- a/lib/logstash/outputs/rabbitmq.rb
+++ b/lib/logstash/outputs/rabbitmq.rb
@@ -1,21 +1,24 @@
 require "logstash/outputs/base"
 require "logstash/namespace"
+require "logstash/util/amqp/driver"
 
 # Push events to a RabbitMQ exchange.
 #
-# This has been tested with Bunny 0.9.x, which supports RabbitMQ 2.x and 3.x. You can
-# find links to both here:
+# This plugin uses Bunny 0.9.x when running with mri and
+# host_bunnies 1.4.x when running under jruby.
 #
 # * RabbitMQ - <http://www.rabbitmq.com/>
 # * Bunny - <https://github.com/ruby-amqp/bunny>
+# * HotBunnies - <https://github.com/ruby-amqp/hot_bunnies>
 class LogStash::Outputs::RabbitMQ < LogStash::Outputs::Base
   MQTYPES = [ "fanout", "direct", "topic" ]
 
   config_name "rabbitmq"
   plugin_status "beta"
 
+
   # Your rabbitmq server address
-  config :host, :validate => :string, :required => true
+  config :host, :validate => :string, :default => "localhost"
 
   # The rabbitmq port to connect on
   config :port, :validate => :number, :default => 5672
@@ -26,26 +29,38 @@ class LogStash::Outputs::RabbitMQ < LogStash::Outputs::Base
   # Your rabbitmq password
   config :password, :validate => :password, :default => "guest"
 
-  # The name of the exchange
-  config :exchange, :validate => :string, :required => true
-  
-  # The exchange type (fanout, topic, direct)
-  config :exchange_type, :validate => [ "fanout", "direct", "topic"], :required => true
+  # The vhost to use. If you don't know what this is, leave the default.
+  config :vhost, :validate => :string, :default => "/"
+
+  # The name of the exchange to bind the queue.
+  config :exchange, :validate => :string, :default => "logstash"
+
+  # Exchange type, must be either fanout, direct or topic.
+  config :exchange_type, :validate => [ "fanout", "direct", "topic"], :default => "direct"
+
+  # Options for exchange decalration. By default, performance is valued over event durability.
+  config :exchange_opts, :validate => :hash, :default => {
+      "durable" => false,
+      "auto_delete" => false,
+      "passive" => false,
+  }
 
-  # Key to route to by default. Defaults to 'logstash'
+  # The routing key to use. This is only valid for direct or topic exchanges
   #
   # * Routing keys are ignored on fanout exchanges.
-  config :key, :validate => :string, :default => "logstash"
+  # * Wildcards are not valid on direct exchanges.
+  config :routing_key, :validate => :string, :default => "logstash"
 
-  # The vhost to use
-  config :vhost, :validate => :string, :default => "/"
+  # Should the event be persisted to disk when it arrives in a queue.
+  # Note that this can considerably impact performance and only works if
+  # it is consumed by a durable queue.
+  config :persistent, :validate => :boolean, :default => false
 
-  # Is this exchange durable? (aka; Should it survive a broker restart?)
-  config :durable, :validate => :boolean, :default => true
+  # Prefetch count. Number of messages to accept before acknowledgment.
+  config :prefetch_count, :validate => :number, :default => 1
 
-  # Should messages persist to disk on the rabbitmq broker until they are read by a
-  # consumer?
-  config :persistent, :validate => :boolean, :default => true
+  # Enable message acknowledgement
+  config :ack, :validate => :boolean, :default => false
 
   # Enable or disable debugging
   config :debug, :validate => :boolean, :default => false
@@ -61,59 +76,42 @@ class LogStash::Outputs::RabbitMQ < LogStash::Outputs::Base
 
   public
   def register
-    require "bunny"
-
     @logger.info("Registering output", :plugin => self)
-    connect
-  end # def register
 
-  public
-  def connect
-    
-    rabbitmq_settings = {
-      :vhost => @vhost,
-      :host => @host,
-      :port => @port,
-      :logging => @debug,
+    @rabbitmq_settings = {
+        :vhost => @vhost,
+        :host => @host,
+        :port => @port,
+        :logging => @debug,
     }
-    rabbitmq_settings[:user] = @user if @user
-    rabbitmq_settings[:pass] = @password.value if @password
-    rabbitmq_settings[:ssl] = @ssl if @ssl
-    rabbitmq_settings[:verify_ssl] = @verify_ssl if @verify_ssl
-    rabbitmq_settings[:frame_max] = @frame_max if @frame_max
-
-    begin
-      @logger.debug("Connecting to RabbitMQ", :settings => rabbitmq_settings,
-                    :exchange_type => @exchange_type, :name => @exchange)
-      @bunny = Bunny.new(rabbitmq_settings)
-      @bunny.start
-    rescue => e
-      if terminating?
-        return
-      else
-        @logger.error("RabbitMQ connection error (during connect), will reconnect",
-                      :exception => e, :backtrace => e.backtrace)
-        sleep(1)
-        retry
-      end
-    end
-
-    @logger.debug("Declaring exchange", :name => @exchange, :type => @exchange_type,
-                  :durable => @durable)
-    @bunnyexchange = @bunny.exchange(@exchange, :type => @exchange_type.to_sym, :durable => @durable)
+    @rabbitmq_settings[:user] = @user if @user
+    @rabbitmq_settings[:pass] = @password.value if @password
+    @rabbitmq_settings[:ssl] = @ssl if @ssl
+    @rabbitmq_settings[:verify_ssl] = @verify_ssl if @verify_ssl
+    @rabbitmq_settings[:frame_max] = @frame_max if @frame_max
+
+    @driver = LogStash::Rabbitmq.driver_class.new(@rabbitmq_settings)
+    @driver.setup_output(
+        :exchange => @exchange,
+        :exchange_type => @exchange_type,
+        :exchange_opts => @exchange_opts,
+        :prefetch_count => @prefetch_count,
+        :ack => @ack,
+        :persistent => @persistent
+    )
+  end # def register
 
-    @logger.debug("Binding exchange", :name => @exchange, :key => @key)
-  end # def connect
 
   public
   def receive(event)
     return unless output?(event)
 
+
+    key = event.sprintf(@routing_key)
     @logger.debug("Sending event", :destination => to_s, :event => event,
-                  :key => key)
-    key = event.sprintf(@key) if @key
+                  :routing_key => key)
     begin
-      receive_raw(event.to_json, key)
+      @driver.publish(event.to_json, :routing_key => key)
     rescue JSON::GeneratorError => e
       @logger.warn("Trouble converting event to JSON", :exception => e,
                    :event => event)
@@ -121,32 +119,14 @@ def receive(event)
     end
   end # def receive
 
-  public
-  def receive_raw(message, key=@key)
-    begin
-      if @bunnyexchange
-        @logger.debug(["Publishing message", { :destination => to_s, :message => message, :key => key }])
-        @bunnyexchange.publish(message, :persistent => @persistent, :key => key)
-      else
-        @logger.warn("Tried to send message, but not connected to rabbitmq yet.")
-      end
-    rescue *[Bunny::ServerDownError, Errno::ECONNRESET] => e
-      @logger.error("RabbitMQ connection error (during publish), will reconnect: #{e}")
-      connect
-      retry
-    end
-  end
-
   public
   def to_s
-    return "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@exchange}\##{@key}"
+    "amqp://#{@user}@#{@host}:#{@port}#{@vhost}/#{@exchange_type}/#{@exchange}\##{@key}"
   end
 
   public
   def teardown
-    @bunny.close rescue nil
-    @bunny = nil
-    @bunnyexchange = nil
+    @driver.destroy
     finished
   end # def teardown
 end # class LogStash::Outputs::RabbitMQ
diff --git a/lib/logstash/util/amqp/driver.rb b/lib/logstash/util/amqp/driver.rb
new file mode 100644
index 00000000000..d50a6598503
--- /dev/null
+++ b/lib/logstash/util/amqp/driver.rb
@@ -0,0 +1,36 @@
+require 'logstash/namespace'
+
+module LogStash::Rabbitmq
+  def self.driver_class
+    if RUBY_ENGINE == "jruby"
+      require "logstash/util/amqp/java_driver"
+      LogStash::Rabbitmq::JavaDriver
+    else
+      require "logstash/util/amqp/mri_driver"
+      LogStash::Rabbitmq::MRIDriver
+    end
+
+  end
+
+  class Driver
+    attr_reader :connection
+    def initialize(opts)
+    end
+
+    def setup_input(scope)
+
+    end
+
+    def setup_output(scope)
+
+    end
+
+    def subscribe(&block)
+
+    end
+
+    def publish(event, opts = {})
+
+    end
+  end
+end
\ No newline at end of file
diff --git a/lib/logstash/util/amqp/java_driver.rb b/lib/logstash/util/amqp/java_driver.rb
new file mode 100644
index 00000000000..e60cd38e800
--- /dev/null
+++ b/lib/logstash/util/amqp/java_driver.rb
@@ -0,0 +1,54 @@
+require 'logstash/namespace'
+require 'logstash/util/amqp/driver'
+require 'hot_bunnies'
+
+class LogStash::Rabbitmq::JavaDriver < LogStash::Rabbitmq::Driver
+  def initialize(opts)
+    connect opts
+  end
+
+  private
+  def connect(opts)
+    @connection = HotBunnies.connect opts
+    @channel = @connection.create_channel
+  end
+
+  public
+  def setup_input(opts)
+    @channel.prefetch = opts[:prefetch_count]
+    @exchange = @channel.exchange(opts[:exchange],
+                                  :type => opts[:exchange_type],
+                                  :durable => opts[:exchange_opts]["durable"],
+                                  :auto_delete => opts[:exchange_opts]["auto_delete"])
+    @queue = @channel.queue(opts[:queue],
+                            :durable => opts[:queue_opts]["durable"],
+                            :auto_delete => opts[:queue_opts]["auto_delete"],
+                            :exclusive => opts[:queue_opts]["exclusive"])
+    @queue.bind(@exchange, :routing_key => opts[:routing_key], :arguments => opts[:binding_arguments])
+    @ack = opts["ack"]
+  end
+
+  def setup_output(opts)
+    @exchange = @channel.exchange(opts[:exchange],
+                                  :type => opts[:exchange_type],
+                                  :durable => opts[:exchange_opts]["durable"],
+                                  :auto_delete => opts[:exchange_opts]["auto_delete"])
+  end
+
+  def subscribe(&block)
+    raise "You must call #{self}.setup_input before subscribing." if @queue.nil?
+    @queue.subscribe(:ack => @ack, :block => true) do |headers, payload|
+      block.call(payload)
+      #headers.ack if @ack
+    end
+  end
+
+  def publish(message, opts={})
+    raise "You must call #{self}.setup_output before publishing." if @exchange.nil?
+    @exchange.publish(message, opts)
+  end
+
+  def destroy
+    @connection.close
+  end
+end
diff --git a/lib/logstash/util/amqp/mri_driver.rb b/lib/logstash/util/amqp/mri_driver.rb
new file mode 100644
index 00000000000..46de82d68fd
--- /dev/null
+++ b/lib/logstash/util/amqp/mri_driver.rb
@@ -0,0 +1,54 @@
+require 'logstash/namespace'
+require 'logstash/util/amqp/driver'
+require 'bunny'
+
+class LogStash::Rabbitmq::MRIDriver < LogStash::Rabbitmq::Driver
+  def initialize(opts)
+    connect opts
+  end
+
+  private
+  def connect(opts)
+    @connection = Bunny.new opts
+    @connection.start
+    @channel = @connection.create_channel
+  end
+
+  public
+  def setup_input(opts)
+    @channel.prefetch(opts[:prefetch_count])
+    @exchange = @channel.exchange(opts[:exchange],
+                                  :type => opts[:exchange_type],
+                                  :durable => opts[:exchange_opts]["durable"],
+                                  :auto_delete => opts[:exchange_opts]["auto_delete"])
+    @queue = @channel.queue(opts[:queue],
+                            :durable => opts[:queue_opts]["durable"],
+                            :auto_delete => opts[:queue_opts]["auto_delete"],
+                            :exclusive => opts[:queue_opts]["exclusive"])
+    @queue.bind(@exchange, :routing_key => opts[:routing_key], :arguments => opts[:binding_arguments])
+    @ack = opts["ack"]
+  end
+
+  def setup_output(opts)
+    @exchange = @channel.exchange(opts[:exchange],
+                                  :type => opts[:exchange_type],
+                                  :durable => opts[:exchange_opts]["durable"],
+                                  :auto_delete => opts[:exchange_opts]["auto_delete"])
+  end
+
+  def subscribe(&block)
+    raise "You must call #{self}.setup_input before subscribing." if @queue.nil?
+    @queue.subscribe(:ack => @ack, :exclusive => @queue.exclusive?, :block => true) do |delivery_info, properties, payload|
+      block.call(payload)
+    end
+  end
+
+  def publish(message, opts={})
+    raise "You must call #{self}.setup_output before publishing." if @exchange.nil?
+    @exchange.publish(message, opts)
+  end
+
+  def destroy
+    @connection.close
+  end
+end
diff --git a/logstash.gemspec b/logstash.gemspec
index 790f98b5cca..5a4dcc1ce4e 100644
--- a/logstash.gemspec
+++ b/logstash.gemspec
@@ -74,6 +74,7 @@ Gem::Specification.new do |gem|
     gem.add_runtime_dependency "jruby-win32ole"
     gem.add_runtime_dependency "jdbc-mysql" # For input drupal_dblog
     gem.add_runtime_dependency "msgpack-jruby"
+    gem.add_runtime_dependency "hot_bunnies"
   else
     gem.add_runtime_dependency "excon"
     gem.add_runtime_dependency "mysql2" # For input drupal_dblog
