diff --git a/logstash-core/src/main/java/org/logstash/config/ir/PipelineConfig.java b/logstash-core/src/main/java/org/logstash/config/ir/PipelineConfig.java
index a9a8035d91b..dba86cb70c3 100644
--- a/logstash-core/src/main/java/org/logstash/config/ir/PipelineConfig.java
+++ b/logstash-core/src/main/java/org/logstash/config/ir/PipelineConfig.java
@@ -59,9 +59,11 @@ boolean includeLine(int lineNumber) {
     private RubyObject settings;
     private LocalDateTime readAt;
     private String configHash;
-    private String configString;
+    private volatile String configString;
     private List<LineToSource> sourceRefs;
 
+    private static final String NEWLINE = "\n";
+
     @SuppressWarnings({"rawtypes", "unchecked"})
     public PipelineConfig(RubyClass source, RubySymbol pipelineId, RubyObject uncastedConfigParts, RubyObject logstashSettings) {
         IRubyObject uncasted = uncastedConfigParts.checkArrayType();
@@ -108,7 +110,22 @@ public String configHash() {
     }
 
     public String configString() {
-        this.configString = confParts.stream().map(SourceWithMetadata::getText).collect(Collectors.joining("\n"));
+        if (this.configString == null) {
+            synchronized(this) {
+                if (this.configString == null) {
+                    final StringBuilder compositeConfig = new StringBuilder();
+                    for (SourceWithMetadata confPart : confParts) {
+                        // If our composite config ends without a trailing newline,
+                        // append one before appending the next config part
+                        if (compositeConfig.lastIndexOf(NEWLINE) < compositeConfig.length() - 1 ) {
+                            compositeConfig.append(NEWLINE);
+                        }
+                        compositeConfig.append(confPart.getText());
+                    }
+                    this.configString = compositeConfig.toString();
+                }
+            }
+        }
         return this.configString;
     }
 
diff --git a/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java b/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
index 2fcb3776c53..b26d3656f77 100644
--- a/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
+++ b/logstash-core/src/test/java/org/logstash/config/ir/PipelineConfigTest.java
@@ -77,23 +77,45 @@ public void describeTo(Description description) {
             "  generator1\n" +
             "}";
 
+    static class SourceCollector {
+        private final StringBuilder compositeSource = new StringBuilder();
+        private final List<SourceWithMetadata> orderedConfigParts = new ArrayList<>();
+
+        void appendSource(final String protocol, final String id, final int line, final int column, final String text) throws IncompleteSourceWithMetadataException {
+            orderedConfigParts.add(new SourceWithMetadata(protocol, id, line, column, text));
+
+            if (compositeSource.length() > 0 && !compositeSource.toString().endsWith("\n")) {
+                compositeSource.append("\n");
+            }
+            compositeSource.append(text);
+        }
+
+        String compositeSource() {
+            return this.compositeSource.toString();
+        }
+
+        SourceWithMetadata[] orderedConfigParts() {
+            return this.orderedConfigParts.toArray(new SourceWithMetadata[]{});
+        }
+    }
+
     @Before
     public void setUp() throws IncompleteSourceWithMetadataException {
 
         source = RubyUtil.RUBY.getClass("LogStash::Config::Source::Local");
         pipelineIdSym = RubySymbol.newSymbol(RubyUtil.RUBY, PIPELINE_ID);
 
-        orderedConfigParts = new SourceWithMetadata[]{
-                new SourceWithMetadata("file", "/tmp/1", 0, 0, "input { generator1 }"),
-                new SourceWithMetadata("file", "/tmp/2", 0, 0, "input { generator2 }"),
-                new SourceWithMetadata("file", "/tmp/3", 0, 0, "input { generator3 }"),
-                new SourceWithMetadata("file", "/tmp/4", 0, 0, "input { generator4 }"),
-                new SourceWithMetadata("file", "/tmp/5", 0, 0, "input { generator5 }"),
-                new SourceWithMetadata("file", "/tmp/6", 0, 0, "input { generator6 }"),
-                new SourceWithMetadata("string", "config_string", 0, 0, "input { generator1 }"),
-        };
-
-        configMerged = Arrays.stream(orderedConfigParts).map(SourceWithMetadata::getText).collect(Collectors.joining("\n"));
+        final SourceCollector sourceCollector = new SourceCollector();
+        sourceCollector.appendSource("file", "/tmp/1", 0, 0, "input { generator1 }\n");
+        sourceCollector.appendSource("file", "/tmp/2", 0, 0, "input { generator2 }");
+        sourceCollector.appendSource("file", "/tmp/3", 0, 0, "input { generator3 }\n");
+        sourceCollector.appendSource("file", "/tmp/4", 0, 0, "input { generator4 }");
+        sourceCollector.appendSource("file", "/tmp/5", 0, 0, "input { generator5 }\n");
+        sourceCollector.appendSource("file", "/tmp/6", 0, 0, "input { generator6 }");
+        sourceCollector.appendSource("string", "config_string", 0, 0, "input { generator1 }");
+
+        orderedConfigParts = sourceCollector.orderedConfigParts();
+        configMerged = sourceCollector.compositeSource();
 
         List<SourceWithMetadata> unorderedList = Arrays.asList(orderedConfigParts);
         Collections.shuffle(unorderedList);
