diff --git a/logstash-core/lib/logstash/logging/json.rb b/logstash-core/lib/logstash/logging/json.rb
deleted file mode 100644
index f51f8051d58..00000000000
--- a/logstash-core/lib/logstash/logging/json.rb
+++ /dev/null
@@ -1,21 +0,0 @@
-# encoding: utf-8
-require "logstash/namespace"
-require "logstash/logging"
-require "logstash/json"
-
-module LogStash; module Logging; class JSON
-  def initialize(io)
-    raise ArgumentError, "Expected IO, got #{io.class.name}" unless io.is_a?(IO)
-
-    @io = io
-    @lock = Mutex.new
-  end
-
-  def <<(obj)
-    serialized = LogStash::Json.dump(obj)
-    @lock.synchronize do
-      @io.puts(serialized)
-      @io.flush
-    end
-  end
-end; end; end
diff --git a/logstash-core/lib/logstash/util/retryable.rb b/logstash-core/lib/logstash/util/retryable.rb
deleted file mode 100644
index 1a932dd48c4..00000000000
--- a/logstash-core/lib/logstash/util/retryable.rb
+++ /dev/null
@@ -1,40 +0,0 @@
-# encoding: utf-8
-module LogStash
-  module Retryable
-    # execute retryable code block
-    # @param [Hash] options retryable options
-    # @option options [Fixnum] :tries retries to perform, default 1, set to 0 for infinite retries. 1 means that upon exception the block will be retried once
-    # @option options [Fixnum] :base_sleep seconds to sleep on first retry, default 1
-    # @option options [Fixnum] :max_sleep max seconds to sleep upon exponential backoff, default 1
-    # @option options [Exception] :rescue exception class list to retry on, defaults is Exception, which retries on any Exception.
-    # @option options [Proc] :on_retry call the given Proc/lambda before each retry with the raised exception as parameter
-    def retryable(options = {}, &block)
-      options = {
-        :tries => 1,
-        :rescue => Exception,
-        :on_retry => nil,
-        :base_sleep => 1,
-        :max_sleep => 1,
-      }.merge(options)
-
-      rescue_classes = Array(options[:rescue])
-      max_sleep_retry = Math.log2(options[:max_sleep] / options[:base_sleep])
-      retry_count = 0
-
-      begin
-        return yield(retry_count)
-      rescue *rescue_classes => e
-        raise e if options[:tries] > 0 && retry_count >= options[:tries]
-
-        options[:on_retry].call(retry_count + 1, e) if options[:on_retry]
-
-        # dont compute and maybe overflow exponent on too big a retry count
-        seconds = retry_count < max_sleep_retry ? options[:base_sleep] * (2 ** retry_count) : options[:max_sleep]
-        sleep(seconds)
-
-        retry_count += 1
-        retry
-      end
-    end
-  end
-end
diff --git a/logstash-core/spec/logstash/runner_spec.rb b/logstash-core/spec/logstash/runner_spec.rb
index 22a9ecb4aa6..4df9a74b0bb 100644
--- a/logstash-core/spec/logstash/runner_spec.rb
+++ b/logstash-core/spec/logstash/runner_spec.rb
@@ -5,7 +5,6 @@
 require "stud/trap"
 require "stud/temporary"
 require "logstash/util/java_version"
-require "logstash/logging/json"
 require "logstash/config/source_loader"
 require "logstash/config/modules_common"
 require "logstash/modules/util"
diff --git a/spec/unit/util/retryable_spec.rb b/spec/unit/util/retryable_spec.rb
deleted file mode 100644
index 261bf265a6d..00000000000
--- a/spec/unit/util/retryable_spec.rb
+++ /dev/null
@@ -1,139 +0,0 @@
-require "logstash/util/retryable"
-
-describe LogStash::Retryable do
-  class C
-    include LogStash::Retryable
-  end
-
-  class E < StandardError; end;
-  class F < StandardError; end;
-
-  subject {C.new}
-
-  context "with default fixed 1 second retry sleep" do
-
-    it "should execute once" do
-      expect(subject).to receive(:sleep).never
-      expect(subject.retryable(:rescue => nil){|i| expect(i).to eq(0); "foo"}).to eq("foo")
-    end
-
-    it "should not retry on non rescued exceptions" do
-      i = 0
-      expect(subject).to receive(:sleep).never
-      expect{subject.retryable(:rescue => E){i += 1; raise F}}.to raise_error(F)
-      expect(i).to eq(1)
-    end
-
-    it "should execute once and retry once by default" do
-      i = 0
-      expect(subject).to receive(:sleep).once.with(1)
-      expect{subject.retryable{i += 1; raise E}}.to raise_error(E)
-      expect(i).to eq(2)
-    end
-
-    it "should retry on rescued exceptions" do
-      i = 0
-      expect(subject).to receive(:sleep).once.with(1)
-      expect{subject.retryable(:rescue => E){i += 1; raise E}}.to raise_error(E)
-      expect(i).to eq(2)
-    end
-
-    it "should retry indefinitely" do
-      i = 0
-      expect(subject).to receive(:sleep).exactly(50).times.with(1)
-      expect{subject.retryable(:tries => 0, :rescue => E){i += 1; raise i <= 50 ? E : F}}.to raise_error(F)
-    end
-
-    it "should execute once and retry once by default and execute on_retry callback" do
-      i = 0
-      callback_values = []
-
-      callback = lambda do |retry_count, e|
-        callback_values << [retry_count, e]
-      end
-
-      expect(subject).to receive(:sleep).once.with(1)
-
-      expect do
-        subject.retryable(:on_retry => callback){i += 1; raise E}
-      end.to raise_error E
-
-      expect(i).to eq(2)
-
-      expect(callback_values.size).to eq(1)
-      expect(callback_values[0][0]).to eq(1)
-      expect(callback_values[0][1]).to be_a(E)
-    end
-
-    it "should execute once and retry n times" do
-      i = 0
-      n = 3
-      expect(subject).to receive(:sleep).exactly(n).times.with(1)
-      expect{subject.retryable(:tries => n){i += 1; raise E}}.to raise_error(E)
-      expect(i).to eq(n + 1)
-    end
-
-    it "should execute once and retry n times and execute on_retry callback" do
-      i = 0
-      n = 3
-      callback_values = []
-
-      callback = lambda do |retry_count, e|
-        callback_values << [retry_count, e]
-      end
-
-      expect(subject).to receive(:sleep).exactly(n).times.with(1)
-
-      expect do
-        subject.retryable(:tries => n, :on_retry => callback){i += 1; raise E}
-      end.to raise_error E
-
-      expect(i).to eq(n + 1)
-
-      expect(callback_values.size).to eq(n)
-      n.times.each do |j|
-        expect(callback_values[j].first).to eq(j + 1)
-        expect(callback_values[j].last).to be_a(E)
-      end
-    end
-  end
-
-  context "with exponential backoff" do
-
-    it "should execute once and retry once with base sleep by default" do
-      expect(subject).to receive(:sleep).once.with(2)
-      expect do
-        subject.retryable(:base_sleep => 2, :max_sleep => 10){raise E}
-      end.to raise_error(E)
-    end
-
-    it "should execute once and retry n times with exponential backoff sleep" do
-      n = 3
-      s = 0.5
-
-      n.times.each do |i|
-        expect(subject).to receive(:sleep).once.with(s * (2 ** i)).ordered
-      end
-      expect do
-        subject.retryable(:tries => n, :base_sleep => s, :max_sleep => 100){raise E}
-      end.to raise_error(E)
-    end
-
-    it "should execute once and retry n times with exponential backoff sleep capping at max_sleep" do
-      n = 20
-      base_sleep = 0.1
-      max_sleep = 1
-
-      expect(subject).to receive(:sleep).once.with(0.1).ordered
-      expect(subject).to receive(:sleep).once.with(0.2).ordered
-      expect(subject).to receive(:sleep).once.with(0.4).ordered
-      expect(subject).to receive(:sleep).once.with(0.8).ordered
-      (n - 4).times.each do |i|
-        expect(subject).to receive(:sleep).once.with(1).ordered
-      end
-      expect do
-        subject.retryable(:tries => n, :base_sleep => base_sleep, :max_sleep => max_sleep){raise E}
-      end.to raise_error(E)
-    end
-  end
-end
