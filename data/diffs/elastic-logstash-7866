diff --git a/logstash-core/lib/logstash/config/source/base.rb b/logstash-core/lib/logstash/config/source/base.rb
index e19e50ca099..b9a5e553038 100644
--- a/logstash-core/lib/logstash/config/source/base.rb
+++ b/logstash-core/lib/logstash/config/source/base.rb
@@ -41,7 +41,7 @@ def config_string
     end
 
     def config_string?
-      !(config_string.nil? || config_string.empty?)
+      !config_string.nil?
     end
 
     def config_path_setting
diff --git a/logstash-core/lib/logstash/config/source/local.rb b/logstash-core/lib/logstash/config/source/local.rb
index 7705afc3809..4dc46414e2f 100644
--- a/logstash-core/lib/logstash/config/source/local.rb
+++ b/logstash-core/lib/logstash/config/source/local.rb
@@ -18,8 +18,27 @@ module LogStash module Config module Source
   #
   class Local < Base
     class ConfigStringLoader
+      INPUT_BLOCK_RE = /input *{/
+      OUTPUT_BLOCK_RE = /output *{/
+      EMPTY_RE = /^\s*$/
+
       def self.read(config_string)
-        [org.logstash.common.SourceWithMetadata.new("string", "config_string", 0, 0, config_string)]
+        config_parts = [org.logstash.common.SourceWithMetadata.new("string", "config_string", 0, 0, config_string)]
+
+        # Make sure we have an input and at least 1 output
+        # if its not the case we will add stdin and stdout
+        # this is for backward compatibility reason
+        if !INPUT_BLOCK_RE.match(config_string)
+          config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default input", 0, 0, LogStash::Config::Defaults.input)
+
+        end
+
+        # include a default stdout output if no outputs given
+        if !OUTPUT_BLOCK_RE.match(config_string)
+          config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default output", 0, 0, LogStash::Config::Defaults.output)
+        end
+
+        config_parts
       end
     end
 
@@ -135,8 +154,6 @@ def self.read(uri)
 
     PIPELINE_ID = LogStash::SETTINGS.get("pipeline.id").to_sym
     HTTP_RE = /^http(s)?/
-    INPUT_BLOCK_RE = /input *{/
-    OUTPUT_BLOCK_RE = /output *{/
 
     def pipeline_configs
       if config_conflict?
@@ -178,9 +195,7 @@ def local_pipeline_configs
         []
       end
 
-      return if config_parts.empty?
-
-      add_missing_default_inputs_or_outputs(config_parts) if config_string?
+      return [] if config_parts.empty?
 
       [PipelineConfig.new(self.class, @settings.get("pipeline.id").to_sym, config_parts, @settings)]
     end
@@ -189,20 +204,6 @@ def automatic_reload_with_config_string?
       config_reload_automatic? && !config_path? && config_string?
     end
 
-    # Make sure we have an input and at least 1 output
-    # if its not the case we will add stdin and stdout
-    # this is for backward compatibility reason
-    def add_missing_default_inputs_or_outputs(config_parts)
-      if !config_parts.any? { |part| INPUT_BLOCK_RE.match(part.text) }
-        config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default input", 0, 0, LogStash::Config::Defaults.input)
-      end
-
-      # include a default stdout output if no outputs given
-      if !config_parts.any? { |part| OUTPUT_BLOCK_RE.match(part.text) }
-        config_parts << org.logstash.common.SourceWithMetadata.new(self.class.name, "default output", 0, 0, LogStash::Config::Defaults.output)
-      end
-    end
-
     def local_config?
       return false unless config_path?
 
diff --git a/logstash-core/lib/logstash/config/source/multi_local.rb b/logstash-core/lib/logstash/config/source/multi_local.rb
index 19b35c83567..599c48a9b18 100644
--- a/logstash-core/lib/logstash/config/source/multi_local.rb
+++ b/logstash-core/lib/logstash/config/source/multi_local.rb
@@ -19,13 +19,15 @@ def pipeline_configs
         ::LogStash::PipelineSettings.from_settings(@original_settings.clone).merge(pipeline_settings)
       end
       detect_duplicate_pipelines(pipelines_settings)
-      pipelines_settings.map do |pipeline_settings|
+      pipeline_configs = pipelines_settings.map do |pipeline_settings|
         @settings = pipeline_settings
         # this relies on instance variable @settings and the parent class' pipeline_configs
         # method. The alternative is to refactor most of the Local source methods to accept
         # a settings object instead of relying on @settings.
         local_pipeline_configs # create a PipelineConfig object based on @settings
       end.flatten
+      @settings = @original_settings
+      pipeline_configs
     end
 
     def match?
diff --git a/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java b/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java
index 4a91748ecea..5d535d93714 100644
--- a/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java
+++ b/logstash-core/src/main/java/org/logstash/common/SourceWithMetadata.java
@@ -60,6 +60,10 @@ public SourceWithMetadata(String protocol, String id, Integer line, Integer colu
             return false;
         }).collect(Collectors.toList());
 
+        if (!(this.getText() instanceof String)) {
+          badAttributes.add(this.getText());
+        }
+
         if (!badAttributes.isEmpty()){
             String message = "Missing attributes in SourceWithMetadata: (" + badAttributes + ") "
                     + this.toString();
@@ -72,7 +76,7 @@ public SourceWithMetadata(String protocol, String id, String text) throws Incomp
     }
 
     public int hashCode() {
-        return Objects.hash(attributes().toArray());
+        return Objects.hash(hashableAttributes().toArray());
     }
 
     public String toString() {
@@ -81,11 +85,16 @@ public String toString() {
 
     @Override
     public String hashSource() {
-        return attributes().stream().map(Object::toString).collect(Collectors.joining("|"));
+        return hashableAttributes().stream().map(Object::toString).collect(Collectors.joining("|"));
     }
 
-    // Fields used in the hashSource and hashCode methods to ensure uniqueness
+    // Fields checked for being not null and non empty String
     private Collection<Object> attributes() {
+        return Arrays.asList(this.getId(), this.getProtocol(), this.getLine(), this.getColumn());
+    }
+
+    // Fields used in the hashSource and hashCode methods to ensure uniqueness
+    private Collection<Object> hashableAttributes() {
         return Arrays.asList(this.getId(), this.getProtocol(), this.getLine(), this.getColumn(), this.getText());
     }
 }
diff --git a/logstash-core/src/test/java/org/logstash/common/SourceWithMetadataTest.java b/logstash-core/src/test/java/org/logstash/common/SourceWithMetadataTest.java
index ec0c9541ae9..3621f4b5489 100644
--- a/logstash-core/src/test/java/org/logstash/common/SourceWithMetadataTest.java
+++ b/logstash-core/src/test/java/org/logstash/common/SourceWithMetadataTest.java
@@ -40,10 +40,8 @@ public static Iterable<ParameterGroup> data() {
             new ParameterGroup("proto", "path", 1, 1, null),
             new ParameterGroup("", "path", 1, 1, "foo"),
             new ParameterGroup("proto", "", 1, 1, "foo"),
-            new ParameterGroup("proto", "path", 1, 1, ""),
             new ParameterGroup(" ", "path", 1, 1, "foo"),
-            new ParameterGroup("proto", "  ", 1, 1, "foo"),
-            new ParameterGroup("proto", "path", 1, 1, "   ")
+            new ParameterGroup("proto", "  ", 1, 1, "foo")
         );
     }
 
