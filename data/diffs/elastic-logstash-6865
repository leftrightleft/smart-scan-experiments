diff --git a/logstash-core/lib/logstash/inputs/base.rb b/logstash-core/lib/logstash/inputs/base.rb
index 6715aaa8cf8..33a96bd1b0a 100644
--- a/logstash-core/lib/logstash/inputs/base.rb
+++ b/logstash-core/lib/logstash/inputs/base.rb
@@ -94,6 +94,12 @@ def do_stop
   def stop?
     @stop_called.value
   end
+  
+  def clone
+    cloned = super
+    cloned.codec = @codec.clone if @codec
+    cloned
+  end
 
   protected
   def decorate(event)
diff --git a/logstash-core/spec/logstash/inputs/base_spec.rb b/logstash-core/spec/logstash/inputs/base_spec.rb
index a3f01fa89e1..e33540eab3d 100644
--- a/logstash-core/spec/logstash/inputs/base_spec.rb
+++ b/logstash-core/spec/logstash/inputs/base_spec.rb
@@ -60,6 +60,24 @@ def register; end
     expect(evt.get("field")).to eq(["value1","value2"])
     expect(evt.get("field2")).to eq("value")
   end
+  
+  describe "cloning" do
+    let(:input) do
+      LogStash::Inputs::NOOP.new("add_field" => {"field" => ["value1", "value2"], "field2" => "value"})
+    end
+    
+    let(:cloned) do
+      input.clone
+    end
+    
+    it "should clone the codec when cloned" do
+      expect(input.codec).not_to eq(cloned.codec)
+    end  
+    
+    it "should preserve codec params" do
+      expect(input.codec.params).to eq(cloned.codec.params)
+    end
+  end
 end
 
 describe "LogStash::Inputs::Base#fix_streaming_codecs" do
