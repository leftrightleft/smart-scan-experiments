diff --git a/logstash-core/src/main/java/org/logstash/RubyUtil.java b/logstash-core/src/main/java/org/logstash/RubyUtil.java
index 27ada7b6d11..4d407a12ab2 100644
--- a/logstash-core/src/main/java/org/logstash/RubyUtil.java
+++ b/logstash-core/src/main/java/org/logstash/RubyUtil.java
@@ -8,7 +8,7 @@
 import org.jruby.anno.JRubyClass;
 import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.ObjectAllocator;
-import org.logstash.ackedqueue.ext.AbstractJRubyQueue;
+import org.logstash.ackedqueue.ext.JRubyAckedQueueExt;
 import org.logstash.ackedqueue.ext.RubyAckedBatch;
 import org.logstash.ext.JRubyWrappedWriteClientExt;
 import org.logstash.ext.JrubyEventExtLibrary;
@@ -106,14 +106,8 @@ public final class RubyUtil {
         RUBY_EVENT_CLASS.setConstant("VERSION_ONE", RUBY.newString(Event.VERSION_ONE));
         RUBY_EVENT_CLASS.defineAnnotatedMethods(JrubyEventExtLibrary.RubyEvent.class);
         RUBY_EVENT_CLASS.defineAnnotatedConstants(JrubyEventExtLibrary.RubyEvent.class);
-        final RubyClass abstractQueue = setupLogstashClass(
-            ObjectAllocator.NOT_ALLOCATABLE_ALLOCATOR, AbstractJRubyQueue.class
-        );
+        setupLogstashClass(JRubyAckedQueueExt::new, JRubyAckedQueueExt.class);
         RUBY_ACKED_BATCH_CLASS = setupLogstashClass(RubyAckedBatch::new, RubyAckedBatch.class);
-        setupLogstashClass(
-            abstractQueue, AbstractJRubyQueue.RubyAckedQueue::new,
-            AbstractJRubyQueue.RubyAckedQueue.class
-        );
         RUBY.getGlobalVariables().set("$LS_JARS_LOADED", RUBY.newString("true"));
     }
 
diff --git a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
similarity index 73%
rename from logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java
rename to logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
index b4e7c3c2d46..4f32c6a7e75 100644
--- a/logstash-core/src/main/java/org/logstash/ackedqueue/ext/AbstractJRubyQueue.java
+++ b/logstash-core/src/main/java/org/logstash/ackedqueue/ext/JRubyAckedQueueExt.java
@@ -20,21 +20,44 @@
 import org.logstash.ackedqueue.io.MmapPageIO;
 import org.logstash.ext.JrubyEventExtLibrary;
 
-@JRubyClass(name = "AbstractAckedQueue")
-public abstract class AbstractJRubyQueue extends RubyObject {
+@JRubyClass(name = "AckedQueue")
+public final class JRubyAckedQueueExt extends RubyObject {
 
     private static final long serialVersionUID = 1L;
 
-    protected Queue queue;
+    private Queue queue;
 
-    AbstractJRubyQueue(final Ruby runtime, final RubyClass metaClass) {
+    public JRubyAckedQueueExt(final Ruby runtime, final RubyClass metaClass) {
         super(runtime, metaClass);
     }
 
-    public final Queue getQueue() {
+    public Queue getQueue() {
         return this.queue;
     }
 
+    @JRubyMethod(name = "initialize", optional = 7)
+    public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) {
+        args = Arity.scanArgs(context.runtime, args, 7, 0);
+        int capacity = RubyFixnum.num2int(args[1]);
+        int maxUnread = RubyFixnum.num2int(args[2]);
+        int checkpointMaxAcks = RubyFixnum.num2int(args[3]);
+        int checkpointMaxWrites = RubyFixnum.num2int(args[4]);
+        long queueMaxBytes = RubyFixnum.num2long(args[6]);
+        this.queue = new Queue(
+            SettingsImpl.fileSettingsBuilder(args[0].asJavaString())
+                .capacity(capacity)
+                .maxUnread(maxUnread)
+                .queueMaxBytes(queueMaxBytes)
+                .checkpointMaxAcks(checkpointMaxAcks)
+                .checkpointMaxWrites(checkpointMaxWrites)
+                .elementIOFactory(MmapPageIO::new)
+                .checkpointIOFactory(FileCheckpointIO::new)
+                .elementClass(Event.class)
+                .build()
+        );
+        return context.nil;
+    }
+
     @JRubyMethod(name = "max_unread_events")
     public IRubyObject ruby_max_unread_events(ThreadContext context) {
         return context.runtime.newFixnum(queue.getMaxUnread());
@@ -137,37 +160,4 @@ public IRubyObject ruby_close(ThreadContext context) {
         }
         return context.nil;
     }
-
-    @JRubyClass(name = "AckedQueue", parent = "AbstractAckedQueue")
-    public static final class RubyAckedQueue extends AbstractJRubyQueue {
-
-        private static final long serialVersionUID = 1L;
-
-        public RubyAckedQueue(Ruby runtime, RubyClass klass) {
-            super(runtime, klass);
-        }
-
-        @JRubyMethod(name = "initialize", optional = 7)
-        public IRubyObject ruby_initialize(ThreadContext context, IRubyObject[] args) {
-            args = Arity.scanArgs(context.runtime, args, 7, 0);
-            int capacity = RubyFixnum.num2int(args[1]);
-            int maxUnread = RubyFixnum.num2int(args[2]);
-            int checkpointMaxAcks = RubyFixnum.num2int(args[3]);
-            int checkpointMaxWrites = RubyFixnum.num2int(args[4]);
-            long queueMaxBytes = RubyFixnum.num2long(args[6]);
-            this.queue = new Queue(
-                SettingsImpl.fileSettingsBuilder(args[0].asJavaString())
-                    .capacity(capacity)
-                    .maxUnread(maxUnread)
-                    .queueMaxBytes(queueMaxBytes)
-                    .checkpointMaxAcks(checkpointMaxAcks)
-                    .checkpointMaxWrites(checkpointMaxWrites)
-                    .elementIOFactory(MmapPageIO::new)
-                    .checkpointIOFactory(FileCheckpointIO::new)
-                    .elementClass(Event.class)
-                    .build()
-            );
-            return context.nil;
-        }
-    }
 }
